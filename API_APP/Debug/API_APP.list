
API_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007880  080101e8  080101e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08017a68  08017a68  00017a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017f4c  08017f4c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08017f4c  08017f4c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017f4c  08017f4c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017f4c  08017f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017f50  08017f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08017f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200001e0  08018134  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08018134  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008028  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001963  00000000  00000000  00028231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00029b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dea  00000000  00000000  0002a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e86  00000000  00000000  000447ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009201e  00000000  00000000  0004e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e066e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f4  00000000  00000000  000e06c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101e8 <__do_global_dtors_aux>:
 80101e8:	b510      	push	{r4, lr}
 80101ea:	4c05      	ldr	r4, [pc, #20]	; (8010200 <__do_global_dtors_aux+0x18>)
 80101ec:	7823      	ldrb	r3, [r4, #0]
 80101ee:	b933      	cbnz	r3, 80101fe <__do_global_dtors_aux+0x16>
 80101f0:	4b04      	ldr	r3, [pc, #16]	; (8010204 <__do_global_dtors_aux+0x1c>)
 80101f2:	b113      	cbz	r3, 80101fa <__do_global_dtors_aux+0x12>
 80101f4:	4804      	ldr	r0, [pc, #16]	; (8010208 <__do_global_dtors_aux+0x20>)
 80101f6:	f3af 8000 	nop.w
 80101fa:	2301      	movs	r3, #1
 80101fc:	7023      	strb	r3, [r4, #0]
 80101fe:	bd10      	pop	{r4, pc}
 8010200:	200001e0 	.word	0x200001e0
 8010204:	00000000 	.word	0x00000000
 8010208:	08017a50 	.word	0x08017a50

0801020c <frame_dummy>:
 801020c:	b508      	push	{r3, lr}
 801020e:	4b03      	ldr	r3, [pc, #12]	; (801021c <frame_dummy+0x10>)
 8010210:	b11b      	cbz	r3, 801021a <frame_dummy+0xe>
 8010212:	4903      	ldr	r1, [pc, #12]	; (8010220 <frame_dummy+0x14>)
 8010214:	4803      	ldr	r0, [pc, #12]	; (8010224 <frame_dummy+0x18>)
 8010216:	f3af 8000 	nop.w
 801021a:	bd08      	pop	{r3, pc}
 801021c:	00000000 	.word	0x00000000
 8010220:	200001e4 	.word	0x200001e4
 8010224:	08017a50 	.word	0x08017a50

08010228 <strlen>:
 8010228:	4603      	mov	r3, r0
 801022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801022e:	2a00      	cmp	r2, #0
 8010230:	d1fb      	bne.n	801022a <strlen+0x2>
 8010232:	1a18      	subs	r0, r3, r0
 8010234:	3801      	subs	r0, #1
 8010236:	4770      	bx	lr

08010238 <__aeabi_drsub>:
 8010238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 801023c:	e002      	b.n	8010244 <__adddf3>
 801023e:	bf00      	nop

08010240 <__aeabi_dsub>:
 8010240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08010244 <__adddf3>:
 8010244:	b530      	push	{r4, r5, lr}
 8010246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 801024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801024e:	ea94 0f05 	teq	r4, r5
 8010252:	bf08      	it	eq
 8010254:	ea90 0f02 	teqeq	r0, r2
 8010258:	bf1f      	itttt	ne
 801025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 801025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8010262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8010266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801026a:	f000 80e2 	beq.w	8010432 <__adddf3+0x1ee>
 801026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8010272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8010276:	bfb8      	it	lt
 8010278:	426d      	neglt	r5, r5
 801027a:	dd0c      	ble.n	8010296 <__adddf3+0x52>
 801027c:	442c      	add	r4, r5
 801027e:	ea80 0202 	eor.w	r2, r0, r2
 8010282:	ea81 0303 	eor.w	r3, r1, r3
 8010286:	ea82 0000 	eor.w	r0, r2, r0
 801028a:	ea83 0101 	eor.w	r1, r3, r1
 801028e:	ea80 0202 	eor.w	r2, r0, r2
 8010292:	ea81 0303 	eor.w	r3, r1, r3
 8010296:	2d36      	cmp	r5, #54	; 0x36
 8010298:	bf88      	it	hi
 801029a:	bd30      	pophi	{r4, r5, pc}
 801029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80102a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80102a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80102a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80102ac:	d002      	beq.n	80102b4 <__adddf3+0x70>
 80102ae:	4240      	negs	r0, r0
 80102b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80102b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80102b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80102bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80102c0:	d002      	beq.n	80102c8 <__adddf3+0x84>
 80102c2:	4252      	negs	r2, r2
 80102c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80102c8:	ea94 0f05 	teq	r4, r5
 80102cc:	f000 80a7 	beq.w	801041e <__adddf3+0x1da>
 80102d0:	f1a4 0401 	sub.w	r4, r4, #1
 80102d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80102d8:	db0d      	blt.n	80102f6 <__adddf3+0xb2>
 80102da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80102de:	fa22 f205 	lsr.w	r2, r2, r5
 80102e2:	1880      	adds	r0, r0, r2
 80102e4:	f141 0100 	adc.w	r1, r1, #0
 80102e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80102ec:	1880      	adds	r0, r0, r2
 80102ee:	fa43 f305 	asr.w	r3, r3, r5
 80102f2:	4159      	adcs	r1, r3
 80102f4:	e00e      	b.n	8010314 <__adddf3+0xd0>
 80102f6:	f1a5 0520 	sub.w	r5, r5, #32
 80102fa:	f10e 0e20 	add.w	lr, lr, #32
 80102fe:	2a01      	cmp	r2, #1
 8010300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8010304:	bf28      	it	cs
 8010306:	f04c 0c02 	orrcs.w	ip, ip, #2
 801030a:	fa43 f305 	asr.w	r3, r3, r5
 801030e:	18c0      	adds	r0, r0, r3
 8010310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8010314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010318:	d507      	bpl.n	801032a <__adddf3+0xe6>
 801031a:	f04f 0e00 	mov.w	lr, #0
 801031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8010322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8010326:	eb6e 0101 	sbc.w	r1, lr, r1
 801032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801032e:	d31b      	bcc.n	8010368 <__adddf3+0x124>
 8010330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010334:	d30c      	bcc.n	8010350 <__adddf3+0x10c>
 8010336:	0849      	lsrs	r1, r1, #1
 8010338:	ea5f 0030 	movs.w	r0, r0, rrx
 801033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010340:	f104 0401 	add.w	r4, r4, #1
 8010344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 801034c:	f080 809a 	bcs.w	8010484 <__adddf3+0x240>
 8010350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8010354:	bf08      	it	eq
 8010356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801035a:	f150 0000 	adcs.w	r0, r0, #0
 801035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010362:	ea41 0105 	orr.w	r1, r1, r5
 8010366:	bd30      	pop	{r4, r5, pc}
 8010368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 801036c:	4140      	adcs	r0, r0
 801036e:	eb41 0101 	adc.w	r1, r1, r1
 8010372:	3c01      	subs	r4, #1
 8010374:	bf28      	it	cs
 8010376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 801037a:	d2e9      	bcs.n	8010350 <__adddf3+0x10c>
 801037c:	f091 0f00 	teq	r1, #0
 8010380:	bf04      	itt	eq
 8010382:	4601      	moveq	r1, r0
 8010384:	2000      	moveq	r0, #0
 8010386:	fab1 f381 	clz	r3, r1
 801038a:	bf08      	it	eq
 801038c:	3320      	addeq	r3, #32
 801038e:	f1a3 030b 	sub.w	r3, r3, #11
 8010392:	f1b3 0220 	subs.w	r2, r3, #32
 8010396:	da0c      	bge.n	80103b2 <__adddf3+0x16e>
 8010398:	320c      	adds	r2, #12
 801039a:	dd08      	ble.n	80103ae <__adddf3+0x16a>
 801039c:	f102 0c14 	add.w	ip, r2, #20
 80103a0:	f1c2 020c 	rsb	r2, r2, #12
 80103a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80103a8:	fa21 f102 	lsr.w	r1, r1, r2
 80103ac:	e00c      	b.n	80103c8 <__adddf3+0x184>
 80103ae:	f102 0214 	add.w	r2, r2, #20
 80103b2:	bfd8      	it	le
 80103b4:	f1c2 0c20 	rsble	ip, r2, #32
 80103b8:	fa01 f102 	lsl.w	r1, r1, r2
 80103bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80103c0:	bfdc      	itt	le
 80103c2:	ea41 010c 	orrle.w	r1, r1, ip
 80103c6:	4090      	lslle	r0, r2
 80103c8:	1ae4      	subs	r4, r4, r3
 80103ca:	bfa2      	ittt	ge
 80103cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80103d0:	4329      	orrge	r1, r5
 80103d2:	bd30      	popge	{r4, r5, pc}
 80103d4:	ea6f 0404 	mvn.w	r4, r4
 80103d8:	3c1f      	subs	r4, #31
 80103da:	da1c      	bge.n	8010416 <__adddf3+0x1d2>
 80103dc:	340c      	adds	r4, #12
 80103de:	dc0e      	bgt.n	80103fe <__adddf3+0x1ba>
 80103e0:	f104 0414 	add.w	r4, r4, #20
 80103e4:	f1c4 0220 	rsb	r2, r4, #32
 80103e8:	fa20 f004 	lsr.w	r0, r0, r4
 80103ec:	fa01 f302 	lsl.w	r3, r1, r2
 80103f0:	ea40 0003 	orr.w	r0, r0, r3
 80103f4:	fa21 f304 	lsr.w	r3, r1, r4
 80103f8:	ea45 0103 	orr.w	r1, r5, r3
 80103fc:	bd30      	pop	{r4, r5, pc}
 80103fe:	f1c4 040c 	rsb	r4, r4, #12
 8010402:	f1c4 0220 	rsb	r2, r4, #32
 8010406:	fa20 f002 	lsr.w	r0, r0, r2
 801040a:	fa01 f304 	lsl.w	r3, r1, r4
 801040e:	ea40 0003 	orr.w	r0, r0, r3
 8010412:	4629      	mov	r1, r5
 8010414:	bd30      	pop	{r4, r5, pc}
 8010416:	fa21 f004 	lsr.w	r0, r1, r4
 801041a:	4629      	mov	r1, r5
 801041c:	bd30      	pop	{r4, r5, pc}
 801041e:	f094 0f00 	teq	r4, #0
 8010422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010426:	bf06      	itte	eq
 8010428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 801042c:	3401      	addeq	r4, #1
 801042e:	3d01      	subne	r5, #1
 8010430:	e74e      	b.n	80102d0 <__adddf3+0x8c>
 8010432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010436:	bf18      	it	ne
 8010438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801043c:	d029      	beq.n	8010492 <__adddf3+0x24e>
 801043e:	ea94 0f05 	teq	r4, r5
 8010442:	bf08      	it	eq
 8010444:	ea90 0f02 	teqeq	r0, r2
 8010448:	d005      	beq.n	8010456 <__adddf3+0x212>
 801044a:	ea54 0c00 	orrs.w	ip, r4, r0
 801044e:	bf04      	itt	eq
 8010450:	4619      	moveq	r1, r3
 8010452:	4610      	moveq	r0, r2
 8010454:	bd30      	pop	{r4, r5, pc}
 8010456:	ea91 0f03 	teq	r1, r3
 801045a:	bf1e      	ittt	ne
 801045c:	2100      	movne	r1, #0
 801045e:	2000      	movne	r0, #0
 8010460:	bd30      	popne	{r4, r5, pc}
 8010462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8010466:	d105      	bne.n	8010474 <__adddf3+0x230>
 8010468:	0040      	lsls	r0, r0, #1
 801046a:	4149      	adcs	r1, r1
 801046c:	bf28      	it	cs
 801046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8010472:	bd30      	pop	{r4, r5, pc}
 8010474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010478:	bf3c      	itt	cc
 801047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801047e:	bd30      	popcc	{r4, r5, pc}
 8010480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801048c:	f04f 0000 	mov.w	r0, #0
 8010490:	bd30      	pop	{r4, r5, pc}
 8010492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010496:	bf1a      	itte	ne
 8010498:	4619      	movne	r1, r3
 801049a:	4610      	movne	r0, r2
 801049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80104a0:	bf1c      	itt	ne
 80104a2:	460b      	movne	r3, r1
 80104a4:	4602      	movne	r2, r0
 80104a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80104aa:	bf06      	itte	eq
 80104ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80104b0:	ea91 0f03 	teqeq	r1, r3
 80104b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80104b8:	bd30      	pop	{r4, r5, pc}
 80104ba:	bf00      	nop

080104bc <__aeabi_ui2d>:
 80104bc:	f090 0f00 	teq	r0, #0
 80104c0:	bf04      	itt	eq
 80104c2:	2100      	moveq	r1, #0
 80104c4:	4770      	bxeq	lr
 80104c6:	b530      	push	{r4, r5, lr}
 80104c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80104cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80104d0:	f04f 0500 	mov.w	r5, #0
 80104d4:	f04f 0100 	mov.w	r1, #0
 80104d8:	e750      	b.n	801037c <__adddf3+0x138>
 80104da:	bf00      	nop

080104dc <__aeabi_i2d>:
 80104dc:	f090 0f00 	teq	r0, #0
 80104e0:	bf04      	itt	eq
 80104e2:	2100      	moveq	r1, #0
 80104e4:	4770      	bxeq	lr
 80104e6:	b530      	push	{r4, r5, lr}
 80104e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80104ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80104f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80104f4:	bf48      	it	mi
 80104f6:	4240      	negmi	r0, r0
 80104f8:	f04f 0100 	mov.w	r1, #0
 80104fc:	e73e      	b.n	801037c <__adddf3+0x138>
 80104fe:	bf00      	nop

08010500 <__aeabi_f2d>:
 8010500:	0042      	lsls	r2, r0, #1
 8010502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010506:	ea4f 0131 	mov.w	r1, r1, rrx
 801050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801050e:	bf1f      	itttt	ne
 8010510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8010514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 801051c:	4770      	bxne	lr
 801051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8010522:	bf08      	it	eq
 8010524:	4770      	bxeq	lr
 8010526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 801052a:	bf04      	itt	eq
 801052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8010530:	4770      	bxeq	lr
 8010532:	b530      	push	{r4, r5, lr}
 8010534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010540:	e71c      	b.n	801037c <__adddf3+0x138>
 8010542:	bf00      	nop

08010544 <__aeabi_ul2d>:
 8010544:	ea50 0201 	orrs.w	r2, r0, r1
 8010548:	bf08      	it	eq
 801054a:	4770      	bxeq	lr
 801054c:	b530      	push	{r4, r5, lr}
 801054e:	f04f 0500 	mov.w	r5, #0
 8010552:	e00a      	b.n	801056a <__aeabi_l2d+0x16>

08010554 <__aeabi_l2d>:
 8010554:	ea50 0201 	orrs.w	r2, r0, r1
 8010558:	bf08      	it	eq
 801055a:	4770      	bxeq	lr
 801055c:	b530      	push	{r4, r5, lr}
 801055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8010562:	d502      	bpl.n	801056a <__aeabi_l2d+0x16>
 8010564:	4240      	negs	r0, r0
 8010566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010576:	f43f aed8 	beq.w	801032a <__adddf3+0xe6>
 801057a:	f04f 0203 	mov.w	r2, #3
 801057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010582:	bf18      	it	ne
 8010584:	3203      	addne	r2, #3
 8010586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801058a:	bf18      	it	ne
 801058c:	3203      	addne	r2, #3
 801058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8010592:	f1c2 0320 	rsb	r3, r2, #32
 8010596:	fa00 fc03 	lsl.w	ip, r0, r3
 801059a:	fa20 f002 	lsr.w	r0, r0, r2
 801059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80105a2:	ea40 000e 	orr.w	r0, r0, lr
 80105a6:	fa21 f102 	lsr.w	r1, r1, r2
 80105aa:	4414      	add	r4, r2
 80105ac:	e6bd      	b.n	801032a <__adddf3+0xe6>
 80105ae:	bf00      	nop

080105b0 <__aeabi_dmul>:
 80105b0:	b570      	push	{r4, r5, r6, lr}
 80105b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80105b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80105ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80105be:	bf1d      	ittte	ne
 80105c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80105c4:	ea94 0f0c 	teqne	r4, ip
 80105c8:	ea95 0f0c 	teqne	r5, ip
 80105cc:	f000 f8de 	bleq	801078c <__aeabi_dmul+0x1dc>
 80105d0:	442c      	add	r4, r5
 80105d2:	ea81 0603 	eor.w	r6, r1, r3
 80105d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80105da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80105de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80105e2:	bf18      	it	ne
 80105e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80105e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80105ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105f0:	d038      	beq.n	8010664 <__aeabi_dmul+0xb4>
 80105f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80105f6:	f04f 0500 	mov.w	r5, #0
 80105fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80105fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8010602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8010606:	f04f 0600 	mov.w	r6, #0
 801060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 801060e:	f09c 0f00 	teq	ip, #0
 8010612:	bf18      	it	ne
 8010614:	f04e 0e01 	orrne.w	lr, lr, #1
 8010618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 801061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8010624:	d204      	bcs.n	8010630 <__aeabi_dmul+0x80>
 8010626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 801062a:	416d      	adcs	r5, r5
 801062c:	eb46 0606 	adc.w	r6, r6, r6
 8010630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 801063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8010644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010648:	bf88      	it	hi
 801064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801064e:	d81e      	bhi.n	801068e <__aeabi_dmul+0xde>
 8010650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8010654:	bf08      	it	eq
 8010656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 801065a:	f150 0000 	adcs.w	r0, r0, #0
 801065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010662:	bd70      	pop	{r4, r5, r6, pc}
 8010664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010668:	ea46 0101 	orr.w	r1, r6, r1
 801066c:	ea40 0002 	orr.w	r0, r0, r2
 8010670:	ea81 0103 	eor.w	r1, r1, r3
 8010674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010678:	bfc2      	ittt	gt
 801067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 801067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010682:	bd70      	popgt	{r4, r5, r6, pc}
 8010684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010688:	f04f 0e00 	mov.w	lr, #0
 801068c:	3c01      	subs	r4, #1
 801068e:	f300 80ab 	bgt.w	80107e8 <__aeabi_dmul+0x238>
 8010692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8010696:	bfde      	ittt	le
 8010698:	2000      	movle	r0, #0
 801069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 801069e:	bd70      	pople	{r4, r5, r6, pc}
 80106a0:	f1c4 0400 	rsb	r4, r4, #0
 80106a4:	3c20      	subs	r4, #32
 80106a6:	da35      	bge.n	8010714 <__aeabi_dmul+0x164>
 80106a8:	340c      	adds	r4, #12
 80106aa:	dc1b      	bgt.n	80106e4 <__aeabi_dmul+0x134>
 80106ac:	f104 0414 	add.w	r4, r4, #20
 80106b0:	f1c4 0520 	rsb	r5, r4, #32
 80106b4:	fa00 f305 	lsl.w	r3, r0, r5
 80106b8:	fa20 f004 	lsr.w	r0, r0, r4
 80106bc:	fa01 f205 	lsl.w	r2, r1, r5
 80106c0:	ea40 0002 	orr.w	r0, r0, r2
 80106c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80106c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80106cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80106d0:	fa21 f604 	lsr.w	r6, r1, r4
 80106d4:	eb42 0106 	adc.w	r1, r2, r6
 80106d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80106dc:	bf08      	it	eq
 80106de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80106e2:	bd70      	pop	{r4, r5, r6, pc}
 80106e4:	f1c4 040c 	rsb	r4, r4, #12
 80106e8:	f1c4 0520 	rsb	r5, r4, #32
 80106ec:	fa00 f304 	lsl.w	r3, r0, r4
 80106f0:	fa20 f005 	lsr.w	r0, r0, r5
 80106f4:	fa01 f204 	lsl.w	r2, r1, r4
 80106f8:	ea40 0002 	orr.w	r0, r0, r2
 80106fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010704:	f141 0100 	adc.w	r1, r1, #0
 8010708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801070c:	bf08      	it	eq
 801070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010712:	bd70      	pop	{r4, r5, r6, pc}
 8010714:	f1c4 0520 	rsb	r5, r4, #32
 8010718:	fa00 f205 	lsl.w	r2, r0, r5
 801071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8010720:	fa20 f304 	lsr.w	r3, r0, r4
 8010724:	fa01 f205 	lsl.w	r2, r1, r5
 8010728:	ea43 0302 	orr.w	r3, r3, r2
 801072c:	fa21 f004 	lsr.w	r0, r1, r4
 8010730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010734:	fa21 f204 	lsr.w	r2, r1, r4
 8010738:	ea20 0002 	bic.w	r0, r0, r2
 801073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010744:	bf08      	it	eq
 8010746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801074a:	bd70      	pop	{r4, r5, r6, pc}
 801074c:	f094 0f00 	teq	r4, #0
 8010750:	d10f      	bne.n	8010772 <__aeabi_dmul+0x1c2>
 8010752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8010756:	0040      	lsls	r0, r0, #1
 8010758:	eb41 0101 	adc.w	r1, r1, r1
 801075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010760:	bf08      	it	eq
 8010762:	3c01      	subeq	r4, #1
 8010764:	d0f7      	beq.n	8010756 <__aeabi_dmul+0x1a6>
 8010766:	ea41 0106 	orr.w	r1, r1, r6
 801076a:	f095 0f00 	teq	r5, #0
 801076e:	bf18      	it	ne
 8010770:	4770      	bxne	lr
 8010772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010776:	0052      	lsls	r2, r2, #1
 8010778:	eb43 0303 	adc.w	r3, r3, r3
 801077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010780:	bf08      	it	eq
 8010782:	3d01      	subeq	r5, #1
 8010784:	d0f7      	beq.n	8010776 <__aeabi_dmul+0x1c6>
 8010786:	ea43 0306 	orr.w	r3, r3, r6
 801078a:	4770      	bx	lr
 801078c:	ea94 0f0c 	teq	r4, ip
 8010790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010794:	bf18      	it	ne
 8010796:	ea95 0f0c 	teqne	r5, ip
 801079a:	d00c      	beq.n	80107b6 <__aeabi_dmul+0x206>
 801079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80107a0:	bf18      	it	ne
 80107a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80107a6:	d1d1      	bne.n	801074c <__aeabi_dmul+0x19c>
 80107a8:	ea81 0103 	eor.w	r1, r1, r3
 80107ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107b0:	f04f 0000 	mov.w	r0, #0
 80107b4:	bd70      	pop	{r4, r5, r6, pc}
 80107b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80107ba:	bf06      	itte	eq
 80107bc:	4610      	moveq	r0, r2
 80107be:	4619      	moveq	r1, r3
 80107c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80107c4:	d019      	beq.n	80107fa <__aeabi_dmul+0x24a>
 80107c6:	ea94 0f0c 	teq	r4, ip
 80107ca:	d102      	bne.n	80107d2 <__aeabi_dmul+0x222>
 80107cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80107d0:	d113      	bne.n	80107fa <__aeabi_dmul+0x24a>
 80107d2:	ea95 0f0c 	teq	r5, ip
 80107d6:	d105      	bne.n	80107e4 <__aeabi_dmul+0x234>
 80107d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80107dc:	bf1c      	itt	ne
 80107de:	4610      	movne	r0, r2
 80107e0:	4619      	movne	r1, r3
 80107e2:	d10a      	bne.n	80107fa <__aeabi_dmul+0x24a>
 80107e4:	ea81 0103 	eor.w	r1, r1, r3
 80107e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80107f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80107f4:	f04f 0000 	mov.w	r0, #0
 80107f8:	bd70      	pop	{r4, r5, r6, pc}
 80107fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80107fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8010802:	bd70      	pop	{r4, r5, r6, pc}

08010804 <__aeabi_ddiv>:
 8010804:	b570      	push	{r4, r5, r6, lr}
 8010806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010812:	bf1d      	ittte	ne
 8010814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010818:	ea94 0f0c 	teqne	r4, ip
 801081c:	ea95 0f0c 	teqne	r5, ip
 8010820:	f000 f8a7 	bleq	8010972 <__aeabi_ddiv+0x16e>
 8010824:	eba4 0405 	sub.w	r4, r4, r5
 8010828:	ea81 0e03 	eor.w	lr, r1, r3
 801082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010834:	f000 8088 	beq.w	8010948 <__aeabi_ddiv+0x144>
 8010838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8010844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 801084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8010854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 801085c:	429d      	cmp	r5, r3
 801085e:	bf08      	it	eq
 8010860:	4296      	cmpeq	r6, r2
 8010862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8010866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 801086a:	d202      	bcs.n	8010872 <__aeabi_ddiv+0x6e>
 801086c:	085b      	lsrs	r3, r3, #1
 801086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8010872:	1ab6      	subs	r6, r6, r2
 8010874:	eb65 0503 	sbc.w	r5, r5, r3
 8010878:	085b      	lsrs	r3, r3, #1
 801087a:	ea4f 0232 	mov.w	r2, r2, rrx
 801087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8010886:	ebb6 0e02 	subs.w	lr, r6, r2
 801088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801088e:	bf22      	ittt	cs
 8010890:	1ab6      	subcs	r6, r6, r2
 8010892:	4675      	movcs	r5, lr
 8010894:	ea40 000c 	orrcs.w	r0, r0, ip
 8010898:	085b      	lsrs	r3, r3, #1
 801089a:	ea4f 0232 	mov.w	r2, r2, rrx
 801089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80108a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108a6:	bf22      	ittt	cs
 80108a8:	1ab6      	subcs	r6, r6, r2
 80108aa:	4675      	movcs	r5, lr
 80108ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80108b0:	085b      	lsrs	r3, r3, #1
 80108b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80108ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108be:	bf22      	ittt	cs
 80108c0:	1ab6      	subcs	r6, r6, r2
 80108c2:	4675      	movcs	r5, lr
 80108c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80108c8:	085b      	lsrs	r3, r3, #1
 80108ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80108d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108d6:	bf22      	ittt	cs
 80108d8:	1ab6      	subcs	r6, r6, r2
 80108da:	4675      	movcs	r5, lr
 80108dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80108e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80108e4:	d018      	beq.n	8010918 <__aeabi_ddiv+0x114>
 80108e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80108ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80108ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80108f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80108f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80108fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80108fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8010902:	d1c0      	bne.n	8010886 <__aeabi_ddiv+0x82>
 8010904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010908:	d10b      	bne.n	8010922 <__aeabi_ddiv+0x11e>
 801090a:	ea41 0100 	orr.w	r1, r1, r0
 801090e:	f04f 0000 	mov.w	r0, #0
 8010912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8010916:	e7b6      	b.n	8010886 <__aeabi_ddiv+0x82>
 8010918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801091c:	bf04      	itt	eq
 801091e:	4301      	orreq	r1, r0
 8010920:	2000      	moveq	r0, #0
 8010922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010926:	bf88      	it	hi
 8010928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801092c:	f63f aeaf 	bhi.w	801068e <__aeabi_dmul+0xde>
 8010930:	ebb5 0c03 	subs.w	ip, r5, r3
 8010934:	bf04      	itt	eq
 8010936:	ebb6 0c02 	subseq.w	ip, r6, r2
 801093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801093e:	f150 0000 	adcs.w	r0, r0, #0
 8010942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010946:	bd70      	pop	{r4, r5, r6, pc}
 8010948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 801094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8010950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8010954:	bfc2      	ittt	gt
 8010956:	ebd4 050c 	rsbsgt	r5, r4, ip
 801095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801095e:	bd70      	popgt	{r4, r5, r6, pc}
 8010960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010964:	f04f 0e00 	mov.w	lr, #0
 8010968:	3c01      	subs	r4, #1
 801096a:	e690      	b.n	801068e <__aeabi_dmul+0xde>
 801096c:	ea45 0e06 	orr.w	lr, r5, r6
 8010970:	e68d      	b.n	801068e <__aeabi_dmul+0xde>
 8010972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010976:	ea94 0f0c 	teq	r4, ip
 801097a:	bf08      	it	eq
 801097c:	ea95 0f0c 	teqeq	r5, ip
 8010980:	f43f af3b 	beq.w	80107fa <__aeabi_dmul+0x24a>
 8010984:	ea94 0f0c 	teq	r4, ip
 8010988:	d10a      	bne.n	80109a0 <__aeabi_ddiv+0x19c>
 801098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801098e:	f47f af34 	bne.w	80107fa <__aeabi_dmul+0x24a>
 8010992:	ea95 0f0c 	teq	r5, ip
 8010996:	f47f af25 	bne.w	80107e4 <__aeabi_dmul+0x234>
 801099a:	4610      	mov	r0, r2
 801099c:	4619      	mov	r1, r3
 801099e:	e72c      	b.n	80107fa <__aeabi_dmul+0x24a>
 80109a0:	ea95 0f0c 	teq	r5, ip
 80109a4:	d106      	bne.n	80109b4 <__aeabi_ddiv+0x1b0>
 80109a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80109aa:	f43f aefd 	beq.w	80107a8 <__aeabi_dmul+0x1f8>
 80109ae:	4610      	mov	r0, r2
 80109b0:	4619      	mov	r1, r3
 80109b2:	e722      	b.n	80107fa <__aeabi_dmul+0x24a>
 80109b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80109b8:	bf18      	it	ne
 80109ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80109be:	f47f aec5 	bne.w	801074c <__aeabi_dmul+0x19c>
 80109c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80109c6:	f47f af0d 	bne.w	80107e4 <__aeabi_dmul+0x234>
 80109ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80109ce:	f47f aeeb 	bne.w	80107a8 <__aeabi_dmul+0x1f8>
 80109d2:	e712      	b.n	80107fa <__aeabi_dmul+0x24a>

080109d4 <__gedf2>:
 80109d4:	f04f 3cff 	mov.w	ip, #4294967295
 80109d8:	e006      	b.n	80109e8 <__cmpdf2+0x4>
 80109da:	bf00      	nop

080109dc <__ledf2>:
 80109dc:	f04f 0c01 	mov.w	ip, #1
 80109e0:	e002      	b.n	80109e8 <__cmpdf2+0x4>
 80109e2:	bf00      	nop

080109e4 <__cmpdf2>:
 80109e4:	f04f 0c01 	mov.w	ip, #1
 80109e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80109ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80109f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80109f8:	bf18      	it	ne
 80109fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80109fe:	d01b      	beq.n	8010a38 <__cmpdf2+0x54>
 8010a00:	b001      	add	sp, #4
 8010a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a06:	bf0c      	ite	eq
 8010a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a0c:	ea91 0f03 	teqne	r1, r3
 8010a10:	bf02      	ittt	eq
 8010a12:	ea90 0f02 	teqeq	r0, r2
 8010a16:	2000      	moveq	r0, #0
 8010a18:	4770      	bxeq	lr
 8010a1a:	f110 0f00 	cmn.w	r0, #0
 8010a1e:	ea91 0f03 	teq	r1, r3
 8010a22:	bf58      	it	pl
 8010a24:	4299      	cmppl	r1, r3
 8010a26:	bf08      	it	eq
 8010a28:	4290      	cmpeq	r0, r2
 8010a2a:	bf2c      	ite	cs
 8010a2c:	17d8      	asrcs	r0, r3, #31
 8010a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010a32:	f040 0001 	orr.w	r0, r0, #1
 8010a36:	4770      	bx	lr
 8010a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a40:	d102      	bne.n	8010a48 <__cmpdf2+0x64>
 8010a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010a46:	d107      	bne.n	8010a58 <__cmpdf2+0x74>
 8010a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a50:	d1d6      	bne.n	8010a00 <__cmpdf2+0x1c>
 8010a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010a56:	d0d3      	beq.n	8010a00 <__cmpdf2+0x1c>
 8010a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop

08010a60 <__aeabi_cdrcmple>:
 8010a60:	4684      	mov	ip, r0
 8010a62:	4610      	mov	r0, r2
 8010a64:	4662      	mov	r2, ip
 8010a66:	468c      	mov	ip, r1
 8010a68:	4619      	mov	r1, r3
 8010a6a:	4663      	mov	r3, ip
 8010a6c:	e000      	b.n	8010a70 <__aeabi_cdcmpeq>
 8010a6e:	bf00      	nop

08010a70 <__aeabi_cdcmpeq>:
 8010a70:	b501      	push	{r0, lr}
 8010a72:	f7ff ffb7 	bl	80109e4 <__cmpdf2>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	bf48      	it	mi
 8010a7a:	f110 0f00 	cmnmi.w	r0, #0
 8010a7e:	bd01      	pop	{r0, pc}

08010a80 <__aeabi_dcmpeq>:
 8010a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a84:	f7ff fff4 	bl	8010a70 <__aeabi_cdcmpeq>
 8010a88:	bf0c      	ite	eq
 8010a8a:	2001      	moveq	r0, #1
 8010a8c:	2000      	movne	r0, #0
 8010a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a92:	bf00      	nop

08010a94 <__aeabi_dcmplt>:
 8010a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a98:	f7ff ffea 	bl	8010a70 <__aeabi_cdcmpeq>
 8010a9c:	bf34      	ite	cc
 8010a9e:	2001      	movcc	r0, #1
 8010aa0:	2000      	movcs	r0, #0
 8010aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8010aa6:	bf00      	nop

08010aa8 <__aeabi_dcmple>:
 8010aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010aac:	f7ff ffe0 	bl	8010a70 <__aeabi_cdcmpeq>
 8010ab0:	bf94      	ite	ls
 8010ab2:	2001      	movls	r0, #1
 8010ab4:	2000      	movhi	r0, #0
 8010ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8010aba:	bf00      	nop

08010abc <__aeabi_dcmpge>:
 8010abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010ac0:	f7ff ffce 	bl	8010a60 <__aeabi_cdrcmple>
 8010ac4:	bf94      	ite	ls
 8010ac6:	2001      	movls	r0, #1
 8010ac8:	2000      	movhi	r0, #0
 8010aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8010ace:	bf00      	nop

08010ad0 <__aeabi_dcmpgt>:
 8010ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010ad4:	f7ff ffc4 	bl	8010a60 <__aeabi_cdrcmple>
 8010ad8:	bf34      	ite	cc
 8010ada:	2001      	movcc	r0, #1
 8010adc:	2000      	movcs	r0, #0
 8010ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8010ae2:	bf00      	nop

08010ae4 <__aeabi_dcmpun>:
 8010ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010aec:	d102      	bne.n	8010af4 <__aeabi_dcmpun+0x10>
 8010aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010af2:	d10a      	bne.n	8010b0a <__aeabi_dcmpun+0x26>
 8010af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010afc:	d102      	bne.n	8010b04 <__aeabi_dcmpun+0x20>
 8010afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b02:	d102      	bne.n	8010b0a <__aeabi_dcmpun+0x26>
 8010b04:	f04f 0000 	mov.w	r0, #0
 8010b08:	4770      	bx	lr
 8010b0a:	f04f 0001 	mov.w	r0, #1
 8010b0e:	4770      	bx	lr

08010b10 <__aeabi_d2iz>:
 8010b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b18:	d215      	bcs.n	8010b46 <__aeabi_d2iz+0x36>
 8010b1a:	d511      	bpl.n	8010b40 <__aeabi_d2iz+0x30>
 8010b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b24:	d912      	bls.n	8010b4c <__aeabi_d2iz+0x3c>
 8010b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010b36:	fa23 f002 	lsr.w	r0, r3, r2
 8010b3a:	bf18      	it	ne
 8010b3c:	4240      	negne	r0, r0
 8010b3e:	4770      	bx	lr
 8010b40:	f04f 0000 	mov.w	r0, #0
 8010b44:	4770      	bx	lr
 8010b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010b4a:	d105      	bne.n	8010b58 <__aeabi_d2iz+0x48>
 8010b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010b50:	bf08      	it	eq
 8010b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010b56:	4770      	bx	lr
 8010b58:	f04f 0000 	mov.w	r0, #0
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop

08010b60 <__aeabi_d2uiz>:
 8010b60:	004a      	lsls	r2, r1, #1
 8010b62:	d211      	bcs.n	8010b88 <__aeabi_d2uiz+0x28>
 8010b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b68:	d211      	bcs.n	8010b8e <__aeabi_d2uiz+0x2e>
 8010b6a:	d50d      	bpl.n	8010b88 <__aeabi_d2uiz+0x28>
 8010b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b74:	d40e      	bmi.n	8010b94 <__aeabi_d2uiz+0x34>
 8010b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010b82:	fa23 f002 	lsr.w	r0, r3, r2
 8010b86:	4770      	bx	lr
 8010b88:	f04f 0000 	mov.w	r0, #0
 8010b8c:	4770      	bx	lr
 8010b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010b92:	d102      	bne.n	8010b9a <__aeabi_d2uiz+0x3a>
 8010b94:	f04f 30ff 	mov.w	r0, #4294967295
 8010b98:	4770      	bx	lr
 8010b9a:	f04f 0000 	mov.w	r0, #0
 8010b9e:	4770      	bx	lr

08010ba0 <__aeabi_d2f>:
 8010ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010ba8:	bf24      	itt	cs
 8010baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010bb2:	d90d      	bls.n	8010bd0 <__aeabi_d2f+0x30>
 8010bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010bc8:	bf08      	it	eq
 8010bca:	f020 0001 	biceq.w	r0, r0, #1
 8010bce:	4770      	bx	lr
 8010bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010bd4:	d121      	bne.n	8010c1a <__aeabi_d2f+0x7a>
 8010bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010bda:	bfbc      	itt	lt
 8010bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010be0:	4770      	bxlt	lr
 8010be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010bea:	f1c2 0218 	rsb	r2, r2, #24
 8010bee:	f1c2 0c20 	rsb	ip, r2, #32
 8010bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8010bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8010bfa:	bf18      	it	ne
 8010bfc:	f040 0001 	orrne.w	r0, r0, #1
 8010c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c0c:	ea40 000c 	orr.w	r0, r0, ip
 8010c10:	fa23 f302 	lsr.w	r3, r3, r2
 8010c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c18:	e7cc      	b.n	8010bb4 <__aeabi_d2f+0x14>
 8010c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c1e:	d107      	bne.n	8010c30 <__aeabi_d2f+0x90>
 8010c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c24:	bf1e      	ittt	ne
 8010c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010c2e:	4770      	bxne	lr
 8010c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop

08010c40 <__aeabi_d2lz>:
 8010c40:	b538      	push	{r3, r4, r5, lr}
 8010c42:	4605      	mov	r5, r0
 8010c44:	460c      	mov	r4, r1
 8010c46:	2200      	movs	r2, #0
 8010c48:	2300      	movs	r3, #0
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	f7ff ff21 	bl	8010a94 <__aeabi_dcmplt>
 8010c52:	b928      	cbnz	r0, 8010c60 <__aeabi_d2lz+0x20>
 8010c54:	4628      	mov	r0, r5
 8010c56:	4621      	mov	r1, r4
 8010c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c5c:	f000 b80a 	b.w	8010c74 <__aeabi_d2ulz>
 8010c60:	4628      	mov	r0, r5
 8010c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8010c66:	f000 f805 	bl	8010c74 <__aeabi_d2ulz>
 8010c6a:	4240      	negs	r0, r0
 8010c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010c70:	bd38      	pop	{r3, r4, r5, pc}
 8010c72:	bf00      	nop

08010c74 <__aeabi_d2ulz>:
 8010c74:	b5d0      	push	{r4, r6, r7, lr}
 8010c76:	2200      	movs	r2, #0
 8010c78:	4b0b      	ldr	r3, [pc, #44]	; (8010ca8 <__aeabi_d2ulz+0x34>)
 8010c7a:	4606      	mov	r6, r0
 8010c7c:	460f      	mov	r7, r1
 8010c7e:	f7ff fc97 	bl	80105b0 <__aeabi_dmul>
 8010c82:	f7ff ff6d 	bl	8010b60 <__aeabi_d2uiz>
 8010c86:	4604      	mov	r4, r0
 8010c88:	f7ff fc18 	bl	80104bc <__aeabi_ui2d>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	4b07      	ldr	r3, [pc, #28]	; (8010cac <__aeabi_d2ulz+0x38>)
 8010c90:	f7ff fc8e 	bl	80105b0 <__aeabi_dmul>
 8010c94:	4602      	mov	r2, r0
 8010c96:	460b      	mov	r3, r1
 8010c98:	4630      	mov	r0, r6
 8010c9a:	4639      	mov	r1, r7
 8010c9c:	f7ff fad0 	bl	8010240 <__aeabi_dsub>
 8010ca0:	f7ff ff5e 	bl	8010b60 <__aeabi_d2uiz>
 8010ca4:	4621      	mov	r1, r4
 8010ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8010ca8:	3df00000 	.word	0x3df00000
 8010cac:	41f00000 	.word	0x41f00000

08010cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b088      	sub	sp, #32
 8010cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010cb6:	f107 0310 	add.w	r3, r7, #16
 8010cba:	2200      	movs	r2, #0
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	605a      	str	r2, [r3, #4]
 8010cc0:	609a      	str	r2, [r3, #8]
 8010cc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8010cc4:	4b2c      	ldr	r3, [pc, #176]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010cc6:	699b      	ldr	r3, [r3, #24]
 8010cc8:	4a2b      	ldr	r2, [pc, #172]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cce:	6193      	str	r3, [r2, #24]
 8010cd0:	4b29      	ldr	r3, [pc, #164]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010cd2:	699b      	ldr	r3, [r3, #24]
 8010cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cd8:	60fb      	str	r3, [r7, #12]
 8010cda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010cdc:	4b26      	ldr	r3, [pc, #152]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	4a25      	ldr	r2, [pc, #148]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010ce2:	f043 0310 	orr.w	r3, r3, #16
 8010ce6:	6193      	str	r3, [r2, #24]
 8010ce8:	4b23      	ldr	r3, [pc, #140]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010cea:	699b      	ldr	r3, [r3, #24]
 8010cec:	f003 0310 	and.w	r3, r3, #16
 8010cf0:	60bb      	str	r3, [r7, #8]
 8010cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010cf4:	4b20      	ldr	r3, [pc, #128]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010cf6:	699b      	ldr	r3, [r3, #24]
 8010cf8:	4a1f      	ldr	r2, [pc, #124]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010cfa:	f043 0304 	orr.w	r3, r3, #4
 8010cfe:	6193      	str	r3, [r2, #24]
 8010d00:	4b1d      	ldr	r3, [pc, #116]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010d02:	699b      	ldr	r3, [r3, #24]
 8010d04:	f003 0304 	and.w	r3, r3, #4
 8010d08:	607b      	str	r3, [r7, #4]
 8010d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010d0c:	4b1a      	ldr	r3, [pc, #104]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010d0e:	699b      	ldr	r3, [r3, #24]
 8010d10:	4a19      	ldr	r2, [pc, #100]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010d12:	f043 0308 	orr.w	r3, r3, #8
 8010d16:	6193      	str	r3, [r2, #24]
 8010d18:	4b17      	ldr	r3, [pc, #92]	; (8010d78 <MX_GPIO_Init+0xc8>)
 8010d1a:	699b      	ldr	r3, [r3, #24]
 8010d1c:	f003 0308 	and.w	r3, r3, #8
 8010d20:	603b      	str	r3, [r7, #0]
 8010d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8010d24:	2200      	movs	r2, #0
 8010d26:	2120      	movs	r1, #32
 8010d28:	4814      	ldr	r0, [pc, #80]	; (8010d7c <MX_GPIO_Init+0xcc>)
 8010d2a:	f000 ff01 	bl	8011b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8010d2e:	2200      	movs	r2, #0
 8010d30:	2120      	movs	r1, #32
 8010d32:	4813      	ldr	r0, [pc, #76]	; (8010d80 <MX_GPIO_Init+0xd0>)
 8010d34:	f000 fefc 	bl	8011b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8010d38:	2320      	movs	r3, #32
 8010d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d40:	2300      	movs	r3, #0
 8010d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010d44:	2303      	movs	r3, #3
 8010d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8010d48:	f107 0310 	add.w	r3, r7, #16
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	480b      	ldr	r0, [pc, #44]	; (8010d7c <MX_GPIO_Init+0xcc>)
 8010d50:	f000 fd5a 	bl	8011808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8010d54:	2320      	movs	r3, #32
 8010d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010d60:	2303      	movs	r3, #3
 8010d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8010d64:	f107 0310 	add.w	r3, r7, #16
 8010d68:	4619      	mov	r1, r3
 8010d6a:	4805      	ldr	r0, [pc, #20]	; (8010d80 <MX_GPIO_Init+0xd0>)
 8010d6c:	f000 fd4c 	bl	8011808 <HAL_GPIO_Init>

}
 8010d70:	bf00      	nop
 8010d72:	3720      	adds	r7, #32
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	40021000 	.word	0x40021000
 8010d7c:	40011800 	.word	0x40011800
 8010d80:	40010c00 	.word	0x40010c00

08010d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010d88:	f000 fa68 	bl	801125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010d8c:	f000 f826 	bl	8010ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010d90:	f7ff ff8e 	bl	8010cb0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8010d94:	f000 f984 	bl	80110a0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8010d98:	2120      	movs	r1, #32
 8010d9a:	480d      	ldr	r0, [pc, #52]	; (8010dd0 <main+0x4c>)
 8010d9c:	f000 fee0 	bl	8011b60 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8010da0:	2120      	movs	r1, #32
 8010da2:	480c      	ldr	r0, [pc, #48]	; (8010dd4 <main+0x50>)
 8010da4:	f000 fedc 	bl	8011b60 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8010da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010dac:	f000 fab8 	bl	8011320 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8010db0:	2120      	movs	r1, #32
 8010db2:	4807      	ldr	r0, [pc, #28]	; (8010dd0 <main+0x4c>)
 8010db4:	f000 fed4 	bl	8011b60 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8010db8:	2120      	movs	r1, #32
 8010dba:	4806      	ldr	r0, [pc, #24]	; (8010dd4 <main+0x50>)
 8010dbc:	f000 fed0 	bl	8011b60 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8010dc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010dc4:	f000 faac 	bl	8011320 <HAL_Delay>
	  printf("test\r\n");
 8010dc8:	4803      	ldr	r0, [pc, #12]	; (8010dd8 <main+0x54>)
 8010dca:	f003 f879 	bl	8013ec0 <puts>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8010dce:	e7e3      	b.n	8010d98 <main+0x14>
 8010dd0:	40010c00 	.word	0x40010c00
 8010dd4:	40011800 	.word	0x40011800
 8010dd8:	08017a68 	.word	0x08017a68

08010ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b090      	sub	sp, #64	; 0x40
 8010de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010de2:	f107 0318 	add.w	r3, r7, #24
 8010de6:	2228      	movs	r2, #40	; 0x28
 8010de8:	2100      	movs	r1, #0
 8010dea:	4618      	mov	r0, r3
 8010dec:	f002 f984 	bl	80130f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010df0:	1d3b      	adds	r3, r7, #4
 8010df2:	2200      	movs	r2, #0
 8010df4:	601a      	str	r2, [r3, #0]
 8010df6:	605a      	str	r2, [r3, #4]
 8010df8:	609a      	str	r2, [r3, #8]
 8010dfa:	60da      	str	r2, [r3, #12]
 8010dfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010dfe:	2302      	movs	r3, #2
 8010e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010e02:	2301      	movs	r3, #1
 8010e04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010e06:	2310      	movs	r3, #16
 8010e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010e0e:	f107 0318 	add.w	r3, r7, #24
 8010e12:	4618      	mov	r0, r3
 8010e14:	f000 febe 	bl	8011b94 <HAL_RCC_OscConfig>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d001      	beq.n	8010e22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8010e1e:	f000 f818 	bl	8010e52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010e22:	230f      	movs	r3, #15
 8010e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8010e26:	2300      	movs	r3, #0
 8010e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010e32:	2300      	movs	r3, #0
 8010e34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8010e36:	1d3b      	adds	r3, r7, #4
 8010e38:	2100      	movs	r1, #0
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f001 f92c 	bl	8012098 <HAL_RCC_ClockConfig>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8010e46:	f000 f804 	bl	8010e52 <Error_Handler>
  }
}
 8010e4a:	bf00      	nop
 8010e4c:	3740      	adds	r7, #64	; 0x40
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}

08010e52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010e52:	b480      	push	{r7}
 8010e54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010e56:	b672      	cpsid	i
}
 8010e58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010e5a:	e7fe      	b.n	8010e5a <Error_Handler+0x8>

08010e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8010e62:	4b0e      	ldr	r3, [pc, #56]	; (8010e9c <HAL_MspInit+0x40>)
 8010e64:	699b      	ldr	r3, [r3, #24]
 8010e66:	4a0d      	ldr	r2, [pc, #52]	; (8010e9c <HAL_MspInit+0x40>)
 8010e68:	f043 0301 	orr.w	r3, r3, #1
 8010e6c:	6193      	str	r3, [r2, #24]
 8010e6e:	4b0b      	ldr	r3, [pc, #44]	; (8010e9c <HAL_MspInit+0x40>)
 8010e70:	699b      	ldr	r3, [r3, #24]
 8010e72:	f003 0301 	and.w	r3, r3, #1
 8010e76:	607b      	str	r3, [r7, #4]
 8010e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010e7a:	4b08      	ldr	r3, [pc, #32]	; (8010e9c <HAL_MspInit+0x40>)
 8010e7c:	69db      	ldr	r3, [r3, #28]
 8010e7e:	4a07      	ldr	r2, [pc, #28]	; (8010e9c <HAL_MspInit+0x40>)
 8010e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e84:	61d3      	str	r3, [r2, #28]
 8010e86:	4b05      	ldr	r3, [pc, #20]	; (8010e9c <HAL_MspInit+0x40>)
 8010e88:	69db      	ldr	r3, [r3, #28]
 8010e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e8e:	603b      	str	r3, [r7, #0]
 8010e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010e92:	bf00      	nop
 8010e94:	370c      	adds	r7, #12
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bc80      	pop	{r7}
 8010e9a:	4770      	bx	lr
 8010e9c:	40021000 	.word	0x40021000

08010ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010ea4:	e7fe      	b.n	8010ea4 <NMI_Handler+0x4>

08010ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010ea6:	b480      	push	{r7}
 8010ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010eaa:	e7fe      	b.n	8010eaa <HardFault_Handler+0x4>

08010eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010eac:	b480      	push	{r7}
 8010eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010eb0:	e7fe      	b.n	8010eb0 <MemManage_Handler+0x4>

08010eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010eb2:	b480      	push	{r7}
 8010eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010eb6:	e7fe      	b.n	8010eb6 <BusFault_Handler+0x4>

08010eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010ebc:	e7fe      	b.n	8010ebc <UsageFault_Handler+0x4>

08010ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010ebe:	b480      	push	{r7}
 8010ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010ec2:	bf00      	nop
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bc80      	pop	{r7}
 8010ec8:	4770      	bx	lr

08010eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010eca:	b480      	push	{r7}
 8010ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010ece:	bf00      	nop
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bc80      	pop	{r7}
 8010ed4:	4770      	bx	lr

08010ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010ed6:	b480      	push	{r7}
 8010ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010eda:	bf00      	nop
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bc80      	pop	{r7}
 8010ee0:	4770      	bx	lr

08010ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010ee2:	b580      	push	{r7, lr}
 8010ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010ee6:	f000 f9ff 	bl	80112e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010eea:	bf00      	nop
 8010eec:	bd80      	pop	{r7, pc}
	...

08010ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8010ef4:	4802      	ldr	r0, [pc, #8]	; (8010f00 <USART1_IRQHandler+0x10>)
 8010ef6:	f001 fb55 	bl	80125a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8010efa:	bf00      	nop
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	20000204 	.word	0x20000204

08010f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010f04:	b480      	push	{r7}
 8010f06:	af00      	add	r7, sp, #0
  return 1;
 8010f08:	2301      	movs	r3, #1
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bc80      	pop	{r7}
 8010f10:	4770      	bx	lr

08010f12 <_kill>:

int _kill(int pid, int sig)
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b082      	sub	sp, #8
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
 8010f1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010f1c:	f002 f8c2 	bl	80130a4 <__errno>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2216      	movs	r2, #22
 8010f24:	601a      	str	r2, [r3, #0]
  return -1;
 8010f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <_exit>:

void _exit (int status)
{
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b082      	sub	sp, #8
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8010f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7ff ffe7 	bl	8010f12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8010f44:	e7fe      	b.n	8010f44 <_exit+0x12>

08010f46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b086      	sub	sp, #24
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	60f8      	str	r0, [r7, #12]
 8010f4e:	60b9      	str	r1, [r7, #8]
 8010f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f52:	2300      	movs	r3, #0
 8010f54:	617b      	str	r3, [r7, #20]
 8010f56:	e00a      	b.n	8010f6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010f58:	f3af 8000 	nop.w
 8010f5c:	4601      	mov	r1, r0
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	1c5a      	adds	r2, r3, #1
 8010f62:	60ba      	str	r2, [r7, #8]
 8010f64:	b2ca      	uxtb	r2, r1
 8010f66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	617b      	str	r3, [r7, #20]
 8010f6e:	697a      	ldr	r2, [r7, #20]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	429a      	cmp	r2, r3
 8010f74:	dbf0      	blt.n	8010f58 <_read+0x12>
  }

  return len;
 8010f76:	687b      	ldr	r3, [r7, #4]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3718      	adds	r7, #24
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b086      	sub	sp, #24
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	617b      	str	r3, [r7, #20]
 8010f90:	e009      	b.n	8010fa6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	1c5a      	adds	r2, r3, #1
 8010f96:	60ba      	str	r2, [r7, #8]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f000 f904 	bl	80111a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	617b      	str	r3, [r7, #20]
 8010fa6:	697a      	ldr	r2, [r7, #20]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	dbf1      	blt.n	8010f92 <_write+0x12>
  }
  return len;
 8010fae:	687b      	ldr	r3, [r7, #4]
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3718      	adds	r7, #24
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <_close>:

int _close(int file)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b083      	sub	sp, #12
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bc80      	pop	{r7}
 8010fcc:	4770      	bx	lr

08010fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010fce:	b480      	push	{r7}
 8010fd0:	b083      	sub	sp, #12
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
 8010fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010fde:	605a      	str	r2, [r3, #4]
  return 0;
 8010fe0:	2300      	movs	r3, #0
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	370c      	adds	r7, #12
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bc80      	pop	{r7}
 8010fea:	4770      	bx	lr

08010fec <_isatty>:

int _isatty(int file)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010ff4:	2301      	movs	r3, #1
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	370c      	adds	r7, #12
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bc80      	pop	{r7}
 8010ffe:	4770      	bx	lr

08011000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011000:	b480      	push	{r7}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	60b9      	str	r1, [r7, #8]
 801100a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801100c:	2300      	movs	r3, #0
}
 801100e:	4618      	mov	r0, r3
 8011010:	3714      	adds	r7, #20
 8011012:	46bd      	mov	sp, r7
 8011014:	bc80      	pop	{r7}
 8011016:	4770      	bx	lr

08011018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b086      	sub	sp, #24
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011020:	4a14      	ldr	r2, [pc, #80]	; (8011074 <_sbrk+0x5c>)
 8011022:	4b15      	ldr	r3, [pc, #84]	; (8011078 <_sbrk+0x60>)
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801102c:	4b13      	ldr	r3, [pc, #76]	; (801107c <_sbrk+0x64>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d102      	bne.n	801103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011034:	4b11      	ldr	r3, [pc, #68]	; (801107c <_sbrk+0x64>)
 8011036:	4a12      	ldr	r2, [pc, #72]	; (8011080 <_sbrk+0x68>)
 8011038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801103a:	4b10      	ldr	r3, [pc, #64]	; (801107c <_sbrk+0x64>)
 801103c:	681a      	ldr	r2, [r3, #0]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	4413      	add	r3, r2
 8011042:	693a      	ldr	r2, [r7, #16]
 8011044:	429a      	cmp	r2, r3
 8011046:	d207      	bcs.n	8011058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011048:	f002 f82c 	bl	80130a4 <__errno>
 801104c:	4603      	mov	r3, r0
 801104e:	220c      	movs	r2, #12
 8011050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8011052:	f04f 33ff 	mov.w	r3, #4294967295
 8011056:	e009      	b.n	801106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011058:	4b08      	ldr	r3, [pc, #32]	; (801107c <_sbrk+0x64>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801105e:	4b07      	ldr	r3, [pc, #28]	; (801107c <_sbrk+0x64>)
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	4413      	add	r3, r2
 8011066:	4a05      	ldr	r2, [pc, #20]	; (801107c <_sbrk+0x64>)
 8011068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801106a:	68fb      	ldr	r3, [r7, #12]
}
 801106c:	4618      	mov	r0, r3
 801106e:	3718      	adds	r7, #24
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	20010000 	.word	0x20010000
 8011078:	00000400 	.word	0x00000400
 801107c:	200001fc 	.word	0x200001fc
 8011080:	20000260 	.word	0x20000260

08011084 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011084:	b480      	push	{r7}
 8011086:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8011088:	4b03      	ldr	r3, [pc, #12]	; (8011098 <SystemInit+0x14>)
 801108a:	4a04      	ldr	r2, [pc, #16]	; (801109c <SystemInit+0x18>)
 801108c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 801108e:	bf00      	nop
 8011090:	46bd      	mov	sp, r7
 8011092:	bc80      	pop	{r7}
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	e000ed00 	.word	0xe000ed00
 801109c:	08010000 	.word	0x08010000

080110a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80110a4:	4b13      	ldr	r3, [pc, #76]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110a6:	4a14      	ldr	r2, [pc, #80]	; (80110f8 <MX_USART1_UART_Init+0x58>)
 80110a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80110aa:	4b12      	ldr	r3, [pc, #72]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80110b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80110b2:	4b10      	ldr	r3, [pc, #64]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110b4:	2200      	movs	r2, #0
 80110b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80110b8:	4b0e      	ldr	r3, [pc, #56]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110ba:	2200      	movs	r2, #0
 80110bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80110be:	4b0d      	ldr	r3, [pc, #52]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110c0:	2200      	movs	r2, #0
 80110c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80110c4:	4b0b      	ldr	r3, [pc, #44]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110c6:	220c      	movs	r2, #12
 80110c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80110ca:	4b0a      	ldr	r3, [pc, #40]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110cc:	2200      	movs	r2, #0
 80110ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80110d0:	4b08      	ldr	r3, [pc, #32]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110d2:	2200      	movs	r2, #0
 80110d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80110d6:	4807      	ldr	r0, [pc, #28]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110d8:	f001 f96c 	bl	80123b4 <HAL_UART_Init>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d001      	beq.n	80110e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80110e2:	f7ff feb6 	bl	8010e52 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, (u8 *)aRxBuffer, RXBUFFERSIZE);//该函数会开启接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量
 80110e6:	2201      	movs	r2, #1
 80110e8:	4904      	ldr	r1, [pc, #16]	; (80110fc <MX_USART1_UART_Init+0x5c>)
 80110ea:	4802      	ldr	r0, [pc, #8]	; (80110f4 <MX_USART1_UART_Init+0x54>)
 80110ec:	f001 fa35 	bl	801255a <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 80110f0:	bf00      	nop
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	20000204 	.word	0x20000204
 80110f8:	40013800 	.word	0x40013800
 80110fc:	20000200 	.word	0x20000200

08011100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b088      	sub	sp, #32
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011108:	f107 0310 	add.w	r3, r7, #16
 801110c:	2200      	movs	r2, #0
 801110e:	601a      	str	r2, [r3, #0]
 8011110:	605a      	str	r2, [r3, #4]
 8011112:	609a      	str	r2, [r3, #8]
 8011114:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	4a20      	ldr	r2, [pc, #128]	; (801119c <HAL_UART_MspInit+0x9c>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d139      	bne.n	8011194 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8011120:	4b1f      	ldr	r3, [pc, #124]	; (80111a0 <HAL_UART_MspInit+0xa0>)
 8011122:	699b      	ldr	r3, [r3, #24]
 8011124:	4a1e      	ldr	r2, [pc, #120]	; (80111a0 <HAL_UART_MspInit+0xa0>)
 8011126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801112a:	6193      	str	r3, [r2, #24]
 801112c:	4b1c      	ldr	r3, [pc, #112]	; (80111a0 <HAL_UART_MspInit+0xa0>)
 801112e:	699b      	ldr	r3, [r3, #24]
 8011130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011134:	60fb      	str	r3, [r7, #12]
 8011136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011138:	4b19      	ldr	r3, [pc, #100]	; (80111a0 <HAL_UART_MspInit+0xa0>)
 801113a:	699b      	ldr	r3, [r3, #24]
 801113c:	4a18      	ldr	r2, [pc, #96]	; (80111a0 <HAL_UART_MspInit+0xa0>)
 801113e:	f043 0304 	orr.w	r3, r3, #4
 8011142:	6193      	str	r3, [r2, #24]
 8011144:	4b16      	ldr	r3, [pc, #88]	; (80111a0 <HAL_UART_MspInit+0xa0>)
 8011146:	699b      	ldr	r3, [r3, #24]
 8011148:	f003 0304 	and.w	r3, r3, #4
 801114c:	60bb      	str	r3, [r7, #8]
 801114e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011154:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011156:	2302      	movs	r3, #2
 8011158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801115a:	2303      	movs	r3, #3
 801115c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801115e:	f107 0310 	add.w	r3, r7, #16
 8011162:	4619      	mov	r1, r3
 8011164:	480f      	ldr	r0, [pc, #60]	; (80111a4 <HAL_UART_MspInit+0xa4>)
 8011166:	f000 fb4f 	bl	8011808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 801116a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011170:	2300      	movs	r3, #0
 8011172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011174:	2300      	movs	r3, #0
 8011176:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011178:	f107 0310 	add.w	r3, r7, #16
 801117c:	4619      	mov	r1, r3
 801117e:	4809      	ldr	r0, [pc, #36]	; (80111a4 <HAL_UART_MspInit+0xa4>)
 8011180:	f000 fb42 	bl	8011808 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8011184:	2200      	movs	r2, #0
 8011186:	2100      	movs	r1, #0
 8011188:	2025      	movs	r0, #37	; 0x25
 801118a:	f000 f9c4 	bl	8011516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801118e:	2025      	movs	r0, #37	; 0x25
 8011190:	f000 f9dd 	bl	801154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8011194:	bf00      	nop
 8011196:	3720      	adds	r7, #32
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	40013800 	.word	0x40013800
 80111a0:	40021000 	.word	0x40021000
 80111a4:	40010800 	.word	0x40010800

080111a8 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
	uint8_t c=ch;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 80111b6:	f107 010f 	add.w	r1, r7, #15
 80111ba:	2364      	movs	r3, #100	; 0x64
 80111bc:	2201      	movs	r2, #1
 80111be:	4804      	ldr	r0, [pc, #16]	; (80111d0 <__io_putchar+0x28>)
 80111c0:	f001 f948 	bl	8012454 <HAL_UART_Transmit>
	return ch;
 80111c4:	687b      	ldr	r3, [r7, #4]
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	20000204 	.word	0x20000204

080111d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4a07      	ldr	r2, [pc, #28]	; (8011200 <HAL_UART_RxCpltCallback+0x2c>)
 80111e2:	4293      	cmp	r3, r2
 80111e4:	d107      	bne.n	80111f6 <HAL_UART_RxCpltCallback+0x22>
	{
		printf("OK\r\n");
 80111e6:	4807      	ldr	r0, [pc, #28]	; (8011204 <HAL_UART_RxCpltCallback+0x30>)
 80111e8:	f002 fe6a 	bl	8013ec0 <puts>
		HAL_UART_Receive_IT(&huart1, (u8 *)aRxBuffer, RXBUFFERSIZE);
 80111ec:	2201      	movs	r2, #1
 80111ee:	4906      	ldr	r1, [pc, #24]	; (8011208 <HAL_UART_RxCpltCallback+0x34>)
 80111f0:	4806      	ldr	r0, [pc, #24]	; (801120c <HAL_UART_RxCpltCallback+0x38>)
 80111f2:	f001 f9b2 	bl	801255a <HAL_UART_Receive_IT>
		//HAL_UART_Transmit(&huart1, (u8 *)aRxBuffer, 1, 100);
	}
}
 80111f6:	bf00      	nop
 80111f8:	3708      	adds	r7, #8
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	40013800 	.word	0x40013800
 8011204:	08017a70 	.word	0x08017a70
 8011208:	20000200 	.word	0x20000200
 801120c:	20000204 	.word	0x20000204

08011210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8011210:	f7ff ff38 	bl	8011084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011214:	480b      	ldr	r0, [pc, #44]	; (8011244 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8011216:	490c      	ldr	r1, [pc, #48]	; (8011248 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8011218:	4a0c      	ldr	r2, [pc, #48]	; (801124c <LoopFillZerobss+0x16>)
  movs r3, #0
 801121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801121c:	e002      	b.n	8011224 <LoopCopyDataInit>

0801121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011222:	3304      	adds	r3, #4

08011224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011228:	d3f9      	bcc.n	801121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801122a:	4a09      	ldr	r2, [pc, #36]	; (8011250 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 801122c:	4c09      	ldr	r4, [pc, #36]	; (8011254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011230:	e001      	b.n	8011236 <LoopFillZerobss>

08011232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011234:	3204      	adds	r2, #4

08011236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011238:	d3fb      	bcc.n	8011232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801123a:	f001 ff39 	bl	80130b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801123e:	f7ff fda1 	bl	8010d84 <main>
  bx lr
 8011242:	4770      	bx	lr
  ldr r0, =_sdata
 8011244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011248:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 801124c:	08017f54 	.word	0x08017f54
  ldr r2, =_sbss
 8011250:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8011254:	20000260 	.word	0x20000260

08011258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011258:	e7fe      	b.n	8011258 <ADC1_2_IRQHandler>
	...

0801125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011260:	4b08      	ldr	r3, [pc, #32]	; (8011284 <HAL_Init+0x28>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4a07      	ldr	r2, [pc, #28]	; (8011284 <HAL_Init+0x28>)
 8011266:	f043 0310 	orr.w	r3, r3, #16
 801126a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801126c:	2003      	movs	r0, #3
 801126e:	f000 f947 	bl	8011500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011272:	200f      	movs	r0, #15
 8011274:	f000 f808 	bl	8011288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011278:	f7ff fdf0 	bl	8010e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801127c:	2300      	movs	r3, #0
}
 801127e:	4618      	mov	r0, r3
 8011280:	bd80      	pop	{r7, pc}
 8011282:	bf00      	nop
 8011284:	40022000 	.word	0x40022000

08011288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011290:	4b12      	ldr	r3, [pc, #72]	; (80112dc <HAL_InitTick+0x54>)
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	4b12      	ldr	r3, [pc, #72]	; (80112e0 <HAL_InitTick+0x58>)
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	4619      	mov	r1, r3
 801129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80112a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80112a6:	4618      	mov	r0, r3
 80112a8:	f000 f95f 	bl	801156a <HAL_SYSTICK_Config>
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d001      	beq.n	80112b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80112b2:	2301      	movs	r3, #1
 80112b4:	e00e      	b.n	80112d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2b0f      	cmp	r3, #15
 80112ba:	d80a      	bhi.n	80112d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80112bc:	2200      	movs	r2, #0
 80112be:	6879      	ldr	r1, [r7, #4]
 80112c0:	f04f 30ff 	mov.w	r0, #4294967295
 80112c4:	f000 f927 	bl	8011516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80112c8:	4a06      	ldr	r2, [pc, #24]	; (80112e4 <HAL_InitTick+0x5c>)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	e000      	b.n	80112d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80112d2:	2301      	movs	r3, #1
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	20000000 	.word	0x20000000
 80112e0:	20000008 	.word	0x20000008
 80112e4:	20000004 	.word	0x20000004

080112e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80112e8:	b480      	push	{r7}
 80112ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80112ec:	4b05      	ldr	r3, [pc, #20]	; (8011304 <HAL_IncTick+0x1c>)
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	461a      	mov	r2, r3
 80112f2:	4b05      	ldr	r3, [pc, #20]	; (8011308 <HAL_IncTick+0x20>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	4413      	add	r3, r2
 80112f8:	4a03      	ldr	r2, [pc, #12]	; (8011308 <HAL_IncTick+0x20>)
 80112fa:	6013      	str	r3, [r2, #0]
}
 80112fc:	bf00      	nop
 80112fe:	46bd      	mov	sp, r7
 8011300:	bc80      	pop	{r7}
 8011302:	4770      	bx	lr
 8011304:	20000008 	.word	0x20000008
 8011308:	2000024c 	.word	0x2000024c

0801130c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801130c:	b480      	push	{r7}
 801130e:	af00      	add	r7, sp, #0
  return uwTick;
 8011310:	4b02      	ldr	r3, [pc, #8]	; (801131c <HAL_GetTick+0x10>)
 8011312:	681b      	ldr	r3, [r3, #0]
}
 8011314:	4618      	mov	r0, r3
 8011316:	46bd      	mov	sp, r7
 8011318:	bc80      	pop	{r7}
 801131a:	4770      	bx	lr
 801131c:	2000024c 	.word	0x2000024c

08011320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011328:	f7ff fff0 	bl	801130c <HAL_GetTick>
 801132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011338:	d005      	beq.n	8011346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801133a:	4b0a      	ldr	r3, [pc, #40]	; (8011364 <HAL_Delay+0x44>)
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	461a      	mov	r2, r3
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	4413      	add	r3, r2
 8011344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011346:	bf00      	nop
 8011348:	f7ff ffe0 	bl	801130c <HAL_GetTick>
 801134c:	4602      	mov	r2, r0
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	429a      	cmp	r2, r3
 8011356:	d8f7      	bhi.n	8011348 <HAL_Delay+0x28>
  {
  }
}
 8011358:	bf00      	nop
 801135a:	bf00      	nop
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	20000008 	.word	0x20000008

08011368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011368:	b480      	push	{r7}
 801136a:	b085      	sub	sp, #20
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f003 0307 	and.w	r3, r3, #7
 8011376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011378:	4b0c      	ldr	r3, [pc, #48]	; (80113ac <__NVIC_SetPriorityGrouping+0x44>)
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801137e:	68ba      	ldr	r2, [r7, #8]
 8011380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011384:	4013      	ands	r3, r2
 8011386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801139a:	4a04      	ldr	r2, [pc, #16]	; (80113ac <__NVIC_SetPriorityGrouping+0x44>)
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	60d3      	str	r3, [r2, #12]
}
 80113a0:	bf00      	nop
 80113a2:	3714      	adds	r7, #20
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bc80      	pop	{r7}
 80113a8:	4770      	bx	lr
 80113aa:	bf00      	nop
 80113ac:	e000ed00 	.word	0xe000ed00

080113b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80113b0:	b480      	push	{r7}
 80113b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80113b4:	4b04      	ldr	r3, [pc, #16]	; (80113c8 <__NVIC_GetPriorityGrouping+0x18>)
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	0a1b      	lsrs	r3, r3, #8
 80113ba:	f003 0307 	and.w	r3, r3, #7
}
 80113be:	4618      	mov	r0, r3
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bc80      	pop	{r7}
 80113c4:	4770      	bx	lr
 80113c6:	bf00      	nop
 80113c8:	e000ed00 	.word	0xe000ed00

080113cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	4603      	mov	r3, r0
 80113d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80113d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	db0b      	blt.n	80113f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80113de:	79fb      	ldrb	r3, [r7, #7]
 80113e0:	f003 021f 	and.w	r2, r3, #31
 80113e4:	4906      	ldr	r1, [pc, #24]	; (8011400 <__NVIC_EnableIRQ+0x34>)
 80113e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113ea:	095b      	lsrs	r3, r3, #5
 80113ec:	2001      	movs	r0, #1
 80113ee:	fa00 f202 	lsl.w	r2, r0, r2
 80113f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80113f6:	bf00      	nop
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bc80      	pop	{r7}
 80113fe:	4770      	bx	lr
 8011400:	e000e100 	.word	0xe000e100

08011404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
 801140a:	4603      	mov	r3, r0
 801140c:	6039      	str	r1, [r7, #0]
 801140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011414:	2b00      	cmp	r3, #0
 8011416:	db0a      	blt.n	801142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	b2da      	uxtb	r2, r3
 801141c:	490c      	ldr	r1, [pc, #48]	; (8011450 <__NVIC_SetPriority+0x4c>)
 801141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011422:	0112      	lsls	r2, r2, #4
 8011424:	b2d2      	uxtb	r2, r2
 8011426:	440b      	add	r3, r1
 8011428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801142c:	e00a      	b.n	8011444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	b2da      	uxtb	r2, r3
 8011432:	4908      	ldr	r1, [pc, #32]	; (8011454 <__NVIC_SetPriority+0x50>)
 8011434:	79fb      	ldrb	r3, [r7, #7]
 8011436:	f003 030f 	and.w	r3, r3, #15
 801143a:	3b04      	subs	r3, #4
 801143c:	0112      	lsls	r2, r2, #4
 801143e:	b2d2      	uxtb	r2, r2
 8011440:	440b      	add	r3, r1
 8011442:	761a      	strb	r2, [r3, #24]
}
 8011444:	bf00      	nop
 8011446:	370c      	adds	r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	bc80      	pop	{r7}
 801144c:	4770      	bx	lr
 801144e:	bf00      	nop
 8011450:	e000e100 	.word	0xe000e100
 8011454:	e000ed00 	.word	0xe000ed00

08011458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011458:	b480      	push	{r7}
 801145a:	b089      	sub	sp, #36	; 0x24
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f003 0307 	and.w	r3, r3, #7
 801146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	f1c3 0307 	rsb	r3, r3, #7
 8011472:	2b04      	cmp	r3, #4
 8011474:	bf28      	it	cs
 8011476:	2304      	movcs	r3, #4
 8011478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801147a:	69fb      	ldr	r3, [r7, #28]
 801147c:	3304      	adds	r3, #4
 801147e:	2b06      	cmp	r3, #6
 8011480:	d902      	bls.n	8011488 <NVIC_EncodePriority+0x30>
 8011482:	69fb      	ldr	r3, [r7, #28]
 8011484:	3b03      	subs	r3, #3
 8011486:	e000      	b.n	801148a <NVIC_EncodePriority+0x32>
 8011488:	2300      	movs	r3, #0
 801148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801148c:	f04f 32ff 	mov.w	r2, #4294967295
 8011490:	69bb      	ldr	r3, [r7, #24]
 8011492:	fa02 f303 	lsl.w	r3, r2, r3
 8011496:	43da      	mvns	r2, r3
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	401a      	ands	r2, r3
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80114a0:	f04f 31ff 	mov.w	r1, #4294967295
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	fa01 f303 	lsl.w	r3, r1, r3
 80114aa:	43d9      	mvns	r1, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80114b0:	4313      	orrs	r3, r2
         );
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3724      	adds	r7, #36	; 0x24
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bc80      	pop	{r7}
 80114ba:	4770      	bx	lr

080114bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	3b01      	subs	r3, #1
 80114c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80114cc:	d301      	bcc.n	80114d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80114ce:	2301      	movs	r3, #1
 80114d0:	e00f      	b.n	80114f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80114d2:	4a0a      	ldr	r2, [pc, #40]	; (80114fc <SysTick_Config+0x40>)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	3b01      	subs	r3, #1
 80114d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80114da:	210f      	movs	r1, #15
 80114dc:	f04f 30ff 	mov.w	r0, #4294967295
 80114e0:	f7ff ff90 	bl	8011404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80114e4:	4b05      	ldr	r3, [pc, #20]	; (80114fc <SysTick_Config+0x40>)
 80114e6:	2200      	movs	r2, #0
 80114e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80114ea:	4b04      	ldr	r3, [pc, #16]	; (80114fc <SysTick_Config+0x40>)
 80114ec:	2207      	movs	r2, #7
 80114ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80114f0:	2300      	movs	r3, #0
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3708      	adds	r7, #8
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	bf00      	nop
 80114fc:	e000e010 	.word	0xe000e010

08011500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f7ff ff2d 	bl	8011368 <__NVIC_SetPriorityGrouping>
}
 801150e:	bf00      	nop
 8011510:	3708      	adds	r7, #8
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}

08011516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011516:	b580      	push	{r7, lr}
 8011518:	b086      	sub	sp, #24
 801151a:	af00      	add	r7, sp, #0
 801151c:	4603      	mov	r3, r0
 801151e:	60b9      	str	r1, [r7, #8]
 8011520:	607a      	str	r2, [r7, #4]
 8011522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011524:	2300      	movs	r3, #0
 8011526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011528:	f7ff ff42 	bl	80113b0 <__NVIC_GetPriorityGrouping>
 801152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	68b9      	ldr	r1, [r7, #8]
 8011532:	6978      	ldr	r0, [r7, #20]
 8011534:	f7ff ff90 	bl	8011458 <NVIC_EncodePriority>
 8011538:	4602      	mov	r2, r0
 801153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801153e:	4611      	mov	r1, r2
 8011540:	4618      	mov	r0, r3
 8011542:	f7ff ff5f 	bl	8011404 <__NVIC_SetPriority>
}
 8011546:	bf00      	nop
 8011548:	3718      	adds	r7, #24
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b082      	sub	sp, #8
 8011552:	af00      	add	r7, sp, #0
 8011554:	4603      	mov	r3, r0
 8011556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801155c:	4618      	mov	r0, r3
 801155e:	f7ff ff35 	bl	80113cc <__NVIC_EnableIRQ>
}
 8011562:	bf00      	nop
 8011564:	3708      	adds	r7, #8
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b082      	sub	sp, #8
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f7ff ffa2 	bl	80114bc <SysTick_Config>
 8011578:	4603      	mov	r3, r0
}
 801157a:	4618      	mov	r0, r3
 801157c:	3708      	adds	r7, #8
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}

08011582 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011582:	b480      	push	{r7}
 8011584:	b085      	sub	sp, #20
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801158a:	2300      	movs	r3, #0
 801158c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011594:	b2db      	uxtb	r3, r3
 8011596:	2b02      	cmp	r3, #2
 8011598:	d008      	beq.n	80115ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2204      	movs	r2, #4
 801159e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80115a8:	2301      	movs	r3, #1
 80115aa:	e020      	b.n	80115ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	681a      	ldr	r2, [r3, #0]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f022 020e 	bic.w	r2, r2, #14
 80115ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f022 0201 	bic.w	r2, r2, #1
 80115ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115d4:	2101      	movs	r1, #1
 80115d6:	fa01 f202 	lsl.w	r2, r1, r2
 80115da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2201      	movs	r2, #1
 80115e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2200      	movs	r2, #0
 80115e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80115ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3714      	adds	r7, #20
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bc80      	pop	{r7}
 80115f6:	4770      	bx	lr

080115f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011600:	2300      	movs	r3, #0
 8011602:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801160a:	b2db      	uxtb	r3, r3
 801160c:	2b02      	cmp	r3, #2
 801160e:	d005      	beq.n	801161c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2204      	movs	r2, #4
 8011614:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8011616:	2301      	movs	r3, #1
 8011618:	73fb      	strb	r3, [r7, #15]
 801161a:	e0d6      	b.n	80117ca <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	f022 020e 	bic.w	r2, r2, #14
 801162a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f022 0201 	bic.w	r2, r2, #1
 801163a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	461a      	mov	r2, r3
 8011642:	4b64      	ldr	r3, [pc, #400]	; (80117d4 <HAL_DMA_Abort_IT+0x1dc>)
 8011644:	429a      	cmp	r2, r3
 8011646:	d958      	bls.n	80116fa <HAL_DMA_Abort_IT+0x102>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	4a62      	ldr	r2, [pc, #392]	; (80117d8 <HAL_DMA_Abort_IT+0x1e0>)
 801164e:	4293      	cmp	r3, r2
 8011650:	d04f      	beq.n	80116f2 <HAL_DMA_Abort_IT+0xfa>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	4a61      	ldr	r2, [pc, #388]	; (80117dc <HAL_DMA_Abort_IT+0x1e4>)
 8011658:	4293      	cmp	r3, r2
 801165a:	d048      	beq.n	80116ee <HAL_DMA_Abort_IT+0xf6>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4a5f      	ldr	r2, [pc, #380]	; (80117e0 <HAL_DMA_Abort_IT+0x1e8>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d040      	beq.n	80116e8 <HAL_DMA_Abort_IT+0xf0>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4a5e      	ldr	r2, [pc, #376]	; (80117e4 <HAL_DMA_Abort_IT+0x1ec>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d038      	beq.n	80116e2 <HAL_DMA_Abort_IT+0xea>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4a5c      	ldr	r2, [pc, #368]	; (80117e8 <HAL_DMA_Abort_IT+0x1f0>)
 8011676:	4293      	cmp	r3, r2
 8011678:	d030      	beq.n	80116dc <HAL_DMA_Abort_IT+0xe4>
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	4a5b      	ldr	r2, [pc, #364]	; (80117ec <HAL_DMA_Abort_IT+0x1f4>)
 8011680:	4293      	cmp	r3, r2
 8011682:	d028      	beq.n	80116d6 <HAL_DMA_Abort_IT+0xde>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4a52      	ldr	r2, [pc, #328]	; (80117d4 <HAL_DMA_Abort_IT+0x1dc>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d020      	beq.n	80116d0 <HAL_DMA_Abort_IT+0xd8>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	4a57      	ldr	r2, [pc, #348]	; (80117f0 <HAL_DMA_Abort_IT+0x1f8>)
 8011694:	4293      	cmp	r3, r2
 8011696:	d019      	beq.n	80116cc <HAL_DMA_Abort_IT+0xd4>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	4a55      	ldr	r2, [pc, #340]	; (80117f4 <HAL_DMA_Abort_IT+0x1fc>)
 801169e:	4293      	cmp	r3, r2
 80116a0:	d012      	beq.n	80116c8 <HAL_DMA_Abort_IT+0xd0>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	4a54      	ldr	r2, [pc, #336]	; (80117f8 <HAL_DMA_Abort_IT+0x200>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d00a      	beq.n	80116c2 <HAL_DMA_Abort_IT+0xca>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4a52      	ldr	r2, [pc, #328]	; (80117fc <HAL_DMA_Abort_IT+0x204>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d102      	bne.n	80116bc <HAL_DMA_Abort_IT+0xc4>
 80116b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116ba:	e01b      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80116c0:	e018      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116c6:	e015      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116c8:	2310      	movs	r3, #16
 80116ca:	e013      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116cc:	2301      	movs	r3, #1
 80116ce:	e011      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80116d4:	e00e      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80116da:	e00b      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80116e0:	e008      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116e6:	e005      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116ec:	e002      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116ee:	2310      	movs	r3, #16
 80116f0:	e000      	b.n	80116f4 <HAL_DMA_Abort_IT+0xfc>
 80116f2:	2301      	movs	r3, #1
 80116f4:	4a42      	ldr	r2, [pc, #264]	; (8011800 <HAL_DMA_Abort_IT+0x208>)
 80116f6:	6053      	str	r3, [r2, #4]
 80116f8:	e057      	b.n	80117aa <HAL_DMA_Abort_IT+0x1b2>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	4a36      	ldr	r2, [pc, #216]	; (80117d8 <HAL_DMA_Abort_IT+0x1e0>)
 8011700:	4293      	cmp	r3, r2
 8011702:	d04f      	beq.n	80117a4 <HAL_DMA_Abort_IT+0x1ac>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	4a34      	ldr	r2, [pc, #208]	; (80117dc <HAL_DMA_Abort_IT+0x1e4>)
 801170a:	4293      	cmp	r3, r2
 801170c:	d048      	beq.n	80117a0 <HAL_DMA_Abort_IT+0x1a8>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4a33      	ldr	r2, [pc, #204]	; (80117e0 <HAL_DMA_Abort_IT+0x1e8>)
 8011714:	4293      	cmp	r3, r2
 8011716:	d040      	beq.n	801179a <HAL_DMA_Abort_IT+0x1a2>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4a31      	ldr	r2, [pc, #196]	; (80117e4 <HAL_DMA_Abort_IT+0x1ec>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d038      	beq.n	8011794 <HAL_DMA_Abort_IT+0x19c>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	4a30      	ldr	r2, [pc, #192]	; (80117e8 <HAL_DMA_Abort_IT+0x1f0>)
 8011728:	4293      	cmp	r3, r2
 801172a:	d030      	beq.n	801178e <HAL_DMA_Abort_IT+0x196>
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4a2e      	ldr	r2, [pc, #184]	; (80117ec <HAL_DMA_Abort_IT+0x1f4>)
 8011732:	4293      	cmp	r3, r2
 8011734:	d028      	beq.n	8011788 <HAL_DMA_Abort_IT+0x190>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	4a26      	ldr	r2, [pc, #152]	; (80117d4 <HAL_DMA_Abort_IT+0x1dc>)
 801173c:	4293      	cmp	r3, r2
 801173e:	d020      	beq.n	8011782 <HAL_DMA_Abort_IT+0x18a>
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	4a2a      	ldr	r2, [pc, #168]	; (80117f0 <HAL_DMA_Abort_IT+0x1f8>)
 8011746:	4293      	cmp	r3, r2
 8011748:	d019      	beq.n	801177e <HAL_DMA_Abort_IT+0x186>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	4a29      	ldr	r2, [pc, #164]	; (80117f4 <HAL_DMA_Abort_IT+0x1fc>)
 8011750:	4293      	cmp	r3, r2
 8011752:	d012      	beq.n	801177a <HAL_DMA_Abort_IT+0x182>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	4a27      	ldr	r2, [pc, #156]	; (80117f8 <HAL_DMA_Abort_IT+0x200>)
 801175a:	4293      	cmp	r3, r2
 801175c:	d00a      	beq.n	8011774 <HAL_DMA_Abort_IT+0x17c>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4a26      	ldr	r2, [pc, #152]	; (80117fc <HAL_DMA_Abort_IT+0x204>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d102      	bne.n	801176e <HAL_DMA_Abort_IT+0x176>
 8011768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801176c:	e01b      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 801176e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011772:	e018      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 8011774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011778:	e015      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 801177a:	2310      	movs	r3, #16
 801177c:	e013      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 801177e:	2301      	movs	r3, #1
 8011780:	e011      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 8011782:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011786:	e00e      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 8011788:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801178c:	e00b      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 801178e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011792:	e008      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 8011794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011798:	e005      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 801179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801179e:	e002      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 80117a0:	2310      	movs	r3, #16
 80117a2:	e000      	b.n	80117a6 <HAL_DMA_Abort_IT+0x1ae>
 80117a4:	2301      	movs	r3, #1
 80117a6:	4a17      	ldr	r2, [pc, #92]	; (8011804 <HAL_DMA_Abort_IT+0x20c>)
 80117a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2201      	movs	r2, #1
 80117ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2200      	movs	r2, #0
 80117b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d003      	beq.n	80117ca <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	4798      	blx	r3
    } 
  }
  return status;
 80117ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3710      	adds	r7, #16
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	40020080 	.word	0x40020080
 80117d8:	40020008 	.word	0x40020008
 80117dc:	4002001c 	.word	0x4002001c
 80117e0:	40020030 	.word	0x40020030
 80117e4:	40020044 	.word	0x40020044
 80117e8:	40020058 	.word	0x40020058
 80117ec:	4002006c 	.word	0x4002006c
 80117f0:	40020408 	.word	0x40020408
 80117f4:	4002041c 	.word	0x4002041c
 80117f8:	40020430 	.word	0x40020430
 80117fc:	40020444 	.word	0x40020444
 8011800:	40020400 	.word	0x40020400
 8011804:	40020000 	.word	0x40020000

08011808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011808:	b480      	push	{r7}
 801180a:	b08b      	sub	sp, #44	; 0x2c
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8011812:	2300      	movs	r3, #0
 8011814:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8011816:	2300      	movs	r3, #0
 8011818:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801181a:	e179      	b.n	8011b10 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 801181c:	2201      	movs	r2, #1
 801181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011820:	fa02 f303 	lsl.w	r3, r2, r3
 8011824:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	69fa      	ldr	r2, [r7, #28]
 801182c:	4013      	ands	r3, r2
 801182e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8011830:	69ba      	ldr	r2, [r7, #24]
 8011832:	69fb      	ldr	r3, [r7, #28]
 8011834:	429a      	cmp	r2, r3
 8011836:	f040 8168 	bne.w	8011b0a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	4a96      	ldr	r2, [pc, #600]	; (8011a98 <HAL_GPIO_Init+0x290>)
 8011840:	4293      	cmp	r3, r2
 8011842:	d05e      	beq.n	8011902 <HAL_GPIO_Init+0xfa>
 8011844:	4a94      	ldr	r2, [pc, #592]	; (8011a98 <HAL_GPIO_Init+0x290>)
 8011846:	4293      	cmp	r3, r2
 8011848:	d875      	bhi.n	8011936 <HAL_GPIO_Init+0x12e>
 801184a:	4a94      	ldr	r2, [pc, #592]	; (8011a9c <HAL_GPIO_Init+0x294>)
 801184c:	4293      	cmp	r3, r2
 801184e:	d058      	beq.n	8011902 <HAL_GPIO_Init+0xfa>
 8011850:	4a92      	ldr	r2, [pc, #584]	; (8011a9c <HAL_GPIO_Init+0x294>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d86f      	bhi.n	8011936 <HAL_GPIO_Init+0x12e>
 8011856:	4a92      	ldr	r2, [pc, #584]	; (8011aa0 <HAL_GPIO_Init+0x298>)
 8011858:	4293      	cmp	r3, r2
 801185a:	d052      	beq.n	8011902 <HAL_GPIO_Init+0xfa>
 801185c:	4a90      	ldr	r2, [pc, #576]	; (8011aa0 <HAL_GPIO_Init+0x298>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d869      	bhi.n	8011936 <HAL_GPIO_Init+0x12e>
 8011862:	4a90      	ldr	r2, [pc, #576]	; (8011aa4 <HAL_GPIO_Init+0x29c>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d04c      	beq.n	8011902 <HAL_GPIO_Init+0xfa>
 8011868:	4a8e      	ldr	r2, [pc, #568]	; (8011aa4 <HAL_GPIO_Init+0x29c>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d863      	bhi.n	8011936 <HAL_GPIO_Init+0x12e>
 801186e:	4a8e      	ldr	r2, [pc, #568]	; (8011aa8 <HAL_GPIO_Init+0x2a0>)
 8011870:	4293      	cmp	r3, r2
 8011872:	d046      	beq.n	8011902 <HAL_GPIO_Init+0xfa>
 8011874:	4a8c      	ldr	r2, [pc, #560]	; (8011aa8 <HAL_GPIO_Init+0x2a0>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d85d      	bhi.n	8011936 <HAL_GPIO_Init+0x12e>
 801187a:	2b12      	cmp	r3, #18
 801187c:	d82a      	bhi.n	80118d4 <HAL_GPIO_Init+0xcc>
 801187e:	2b12      	cmp	r3, #18
 8011880:	d859      	bhi.n	8011936 <HAL_GPIO_Init+0x12e>
 8011882:	a201      	add	r2, pc, #4	; (adr r2, 8011888 <HAL_GPIO_Init+0x80>)
 8011884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011888:	08011903 	.word	0x08011903
 801188c:	080118dd 	.word	0x080118dd
 8011890:	080118ef 	.word	0x080118ef
 8011894:	08011931 	.word	0x08011931
 8011898:	08011937 	.word	0x08011937
 801189c:	08011937 	.word	0x08011937
 80118a0:	08011937 	.word	0x08011937
 80118a4:	08011937 	.word	0x08011937
 80118a8:	08011937 	.word	0x08011937
 80118ac:	08011937 	.word	0x08011937
 80118b0:	08011937 	.word	0x08011937
 80118b4:	08011937 	.word	0x08011937
 80118b8:	08011937 	.word	0x08011937
 80118bc:	08011937 	.word	0x08011937
 80118c0:	08011937 	.word	0x08011937
 80118c4:	08011937 	.word	0x08011937
 80118c8:	08011937 	.word	0x08011937
 80118cc:	080118e5 	.word	0x080118e5
 80118d0:	080118f9 	.word	0x080118f9
 80118d4:	4a75      	ldr	r2, [pc, #468]	; (8011aac <HAL_GPIO_Init+0x2a4>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d013      	beq.n	8011902 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80118da:	e02c      	b.n	8011936 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	623b      	str	r3, [r7, #32]
          break;
 80118e2:	e029      	b.n	8011938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	3304      	adds	r3, #4
 80118ea:	623b      	str	r3, [r7, #32]
          break;
 80118ec:	e024      	b.n	8011938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	68db      	ldr	r3, [r3, #12]
 80118f2:	3308      	adds	r3, #8
 80118f4:	623b      	str	r3, [r7, #32]
          break;
 80118f6:	e01f      	b.n	8011938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	330c      	adds	r3, #12
 80118fe:	623b      	str	r3, [r7, #32]
          break;
 8011900:	e01a      	b.n	8011938 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	689b      	ldr	r3, [r3, #8]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d102      	bne.n	8011910 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 801190a:	2304      	movs	r3, #4
 801190c:	623b      	str	r3, [r7, #32]
          break;
 801190e:	e013      	b.n	8011938 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	689b      	ldr	r3, [r3, #8]
 8011914:	2b01      	cmp	r3, #1
 8011916:	d105      	bne.n	8011924 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8011918:	2308      	movs	r3, #8
 801191a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	69fa      	ldr	r2, [r7, #28]
 8011920:	611a      	str	r2, [r3, #16]
          break;
 8011922:	e009      	b.n	8011938 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8011924:	2308      	movs	r3, #8
 8011926:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	69fa      	ldr	r2, [r7, #28]
 801192c:	615a      	str	r2, [r3, #20]
          break;
 801192e:	e003      	b.n	8011938 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8011930:	2300      	movs	r3, #0
 8011932:	623b      	str	r3, [r7, #32]
          break;
 8011934:	e000      	b.n	8011938 <HAL_GPIO_Init+0x130>
          break;
 8011936:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8011938:	69bb      	ldr	r3, [r7, #24]
 801193a:	2bff      	cmp	r3, #255	; 0xff
 801193c:	d801      	bhi.n	8011942 <HAL_GPIO_Init+0x13a>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	e001      	b.n	8011946 <HAL_GPIO_Init+0x13e>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	3304      	adds	r3, #4
 8011946:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8011948:	69bb      	ldr	r3, [r7, #24]
 801194a:	2bff      	cmp	r3, #255	; 0xff
 801194c:	d802      	bhi.n	8011954 <HAL_GPIO_Init+0x14c>
 801194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	e002      	b.n	801195a <HAL_GPIO_Init+0x152>
 8011954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011956:	3b08      	subs	r3, #8
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	681a      	ldr	r2, [r3, #0]
 8011960:	210f      	movs	r1, #15
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	fa01 f303 	lsl.w	r3, r1, r3
 8011968:	43db      	mvns	r3, r3
 801196a:	401a      	ands	r2, r3
 801196c:	6a39      	ldr	r1, [r7, #32]
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	fa01 f303 	lsl.w	r3, r1, r3
 8011974:	431a      	orrs	r2, r3
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011982:	2b00      	cmp	r3, #0
 8011984:	f000 80c1 	beq.w	8011b0a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8011988:	4b49      	ldr	r3, [pc, #292]	; (8011ab0 <HAL_GPIO_Init+0x2a8>)
 801198a:	699b      	ldr	r3, [r3, #24]
 801198c:	4a48      	ldr	r2, [pc, #288]	; (8011ab0 <HAL_GPIO_Init+0x2a8>)
 801198e:	f043 0301 	orr.w	r3, r3, #1
 8011992:	6193      	str	r3, [r2, #24]
 8011994:	4b46      	ldr	r3, [pc, #280]	; (8011ab0 <HAL_GPIO_Init+0x2a8>)
 8011996:	699b      	ldr	r3, [r3, #24]
 8011998:	f003 0301 	and.w	r3, r3, #1
 801199c:	60bb      	str	r3, [r7, #8]
 801199e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80119a0:	4a44      	ldr	r2, [pc, #272]	; (8011ab4 <HAL_GPIO_Init+0x2ac>)
 80119a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a4:	089b      	lsrs	r3, r3, #2
 80119a6:	3302      	adds	r3, #2
 80119a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80119ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b0:	f003 0303 	and.w	r3, r3, #3
 80119b4:	009b      	lsls	r3, r3, #2
 80119b6:	220f      	movs	r2, #15
 80119b8:	fa02 f303 	lsl.w	r3, r2, r3
 80119bc:	43db      	mvns	r3, r3
 80119be:	68fa      	ldr	r2, [r7, #12]
 80119c0:	4013      	ands	r3, r2
 80119c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	4a3c      	ldr	r2, [pc, #240]	; (8011ab8 <HAL_GPIO_Init+0x2b0>)
 80119c8:	4293      	cmp	r3, r2
 80119ca:	d01f      	beq.n	8011a0c <HAL_GPIO_Init+0x204>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	4a3b      	ldr	r2, [pc, #236]	; (8011abc <HAL_GPIO_Init+0x2b4>)
 80119d0:	4293      	cmp	r3, r2
 80119d2:	d019      	beq.n	8011a08 <HAL_GPIO_Init+0x200>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	4a3a      	ldr	r2, [pc, #232]	; (8011ac0 <HAL_GPIO_Init+0x2b8>)
 80119d8:	4293      	cmp	r3, r2
 80119da:	d013      	beq.n	8011a04 <HAL_GPIO_Init+0x1fc>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	4a39      	ldr	r2, [pc, #228]	; (8011ac4 <HAL_GPIO_Init+0x2bc>)
 80119e0:	4293      	cmp	r3, r2
 80119e2:	d00d      	beq.n	8011a00 <HAL_GPIO_Init+0x1f8>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	4a38      	ldr	r2, [pc, #224]	; (8011ac8 <HAL_GPIO_Init+0x2c0>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d007      	beq.n	80119fc <HAL_GPIO_Init+0x1f4>
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	4a37      	ldr	r2, [pc, #220]	; (8011acc <HAL_GPIO_Init+0x2c4>)
 80119f0:	4293      	cmp	r3, r2
 80119f2:	d101      	bne.n	80119f8 <HAL_GPIO_Init+0x1f0>
 80119f4:	2305      	movs	r3, #5
 80119f6:	e00a      	b.n	8011a0e <HAL_GPIO_Init+0x206>
 80119f8:	2306      	movs	r3, #6
 80119fa:	e008      	b.n	8011a0e <HAL_GPIO_Init+0x206>
 80119fc:	2304      	movs	r3, #4
 80119fe:	e006      	b.n	8011a0e <HAL_GPIO_Init+0x206>
 8011a00:	2303      	movs	r3, #3
 8011a02:	e004      	b.n	8011a0e <HAL_GPIO_Init+0x206>
 8011a04:	2302      	movs	r3, #2
 8011a06:	e002      	b.n	8011a0e <HAL_GPIO_Init+0x206>
 8011a08:	2301      	movs	r3, #1
 8011a0a:	e000      	b.n	8011a0e <HAL_GPIO_Init+0x206>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a10:	f002 0203 	and.w	r2, r2, #3
 8011a14:	0092      	lsls	r2, r2, #2
 8011a16:	4093      	lsls	r3, r2
 8011a18:	68fa      	ldr	r2, [r7, #12]
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8011a1e:	4925      	ldr	r1, [pc, #148]	; (8011ab4 <HAL_GPIO_Init+0x2ac>)
 8011a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a22:	089b      	lsrs	r3, r3, #2
 8011a24:	3302      	adds	r3, #2
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d006      	beq.n	8011a46 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8011a38:	4b25      	ldr	r3, [pc, #148]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a3a:	689a      	ldr	r2, [r3, #8]
 8011a3c:	4924      	ldr	r1, [pc, #144]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	4313      	orrs	r3, r2
 8011a42:	608b      	str	r3, [r1, #8]
 8011a44:	e006      	b.n	8011a54 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8011a46:	4b22      	ldr	r3, [pc, #136]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a48:	689a      	ldr	r2, [r3, #8]
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	43db      	mvns	r3, r3
 8011a4e:	4920      	ldr	r1, [pc, #128]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a50:	4013      	ands	r3, r2
 8011a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d006      	beq.n	8011a6e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8011a60:	4b1b      	ldr	r3, [pc, #108]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a62:	68da      	ldr	r2, [r3, #12]
 8011a64:	491a      	ldr	r1, [pc, #104]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	60cb      	str	r3, [r1, #12]
 8011a6c:	e006      	b.n	8011a7c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8011a6e:	4b18      	ldr	r3, [pc, #96]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a70:	68da      	ldr	r2, [r3, #12]
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	43db      	mvns	r3, r3
 8011a76:	4916      	ldr	r1, [pc, #88]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a78:	4013      	ands	r3, r2
 8011a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d025      	beq.n	8011ad4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8011a88:	4b11      	ldr	r3, [pc, #68]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a8a:	685a      	ldr	r2, [r3, #4]
 8011a8c:	4910      	ldr	r1, [pc, #64]	; (8011ad0 <HAL_GPIO_Init+0x2c8>)
 8011a8e:	69bb      	ldr	r3, [r7, #24]
 8011a90:	4313      	orrs	r3, r2
 8011a92:	604b      	str	r3, [r1, #4]
 8011a94:	e025      	b.n	8011ae2 <HAL_GPIO_Init+0x2da>
 8011a96:	bf00      	nop
 8011a98:	10320000 	.word	0x10320000
 8011a9c:	10310000 	.word	0x10310000
 8011aa0:	10220000 	.word	0x10220000
 8011aa4:	10210000 	.word	0x10210000
 8011aa8:	10120000 	.word	0x10120000
 8011aac:	10110000 	.word	0x10110000
 8011ab0:	40021000 	.word	0x40021000
 8011ab4:	40010000 	.word	0x40010000
 8011ab8:	40010800 	.word	0x40010800
 8011abc:	40010c00 	.word	0x40010c00
 8011ac0:	40011000 	.word	0x40011000
 8011ac4:	40011400 	.word	0x40011400
 8011ac8:	40011800 	.word	0x40011800
 8011acc:	40011c00 	.word	0x40011c00
 8011ad0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8011ad4:	4b15      	ldr	r3, [pc, #84]	; (8011b2c <HAL_GPIO_Init+0x324>)
 8011ad6:	685a      	ldr	r2, [r3, #4]
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	43db      	mvns	r3, r3
 8011adc:	4913      	ldr	r1, [pc, #76]	; (8011b2c <HAL_GPIO_Init+0x324>)
 8011ade:	4013      	ands	r3, r2
 8011ae0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d006      	beq.n	8011afc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8011aee:	4b0f      	ldr	r3, [pc, #60]	; (8011b2c <HAL_GPIO_Init+0x324>)
 8011af0:	681a      	ldr	r2, [r3, #0]
 8011af2:	490e      	ldr	r1, [pc, #56]	; (8011b2c <HAL_GPIO_Init+0x324>)
 8011af4:	69bb      	ldr	r3, [r7, #24]
 8011af6:	4313      	orrs	r3, r2
 8011af8:	600b      	str	r3, [r1, #0]
 8011afa:	e006      	b.n	8011b0a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8011afc:	4b0b      	ldr	r3, [pc, #44]	; (8011b2c <HAL_GPIO_Init+0x324>)
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	43db      	mvns	r3, r3
 8011b04:	4909      	ldr	r1, [pc, #36]	; (8011b2c <HAL_GPIO_Init+0x324>)
 8011b06:	4013      	ands	r3, r2
 8011b08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8011b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b16:	fa22 f303 	lsr.w	r3, r2, r3
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	f47f ae7e 	bne.w	801181c <HAL_GPIO_Init+0x14>
  }
}
 8011b20:	bf00      	nop
 8011b22:	bf00      	nop
 8011b24:	372c      	adds	r7, #44	; 0x2c
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bc80      	pop	{r7}
 8011b2a:	4770      	bx	lr
 8011b2c:	40010400 	.word	0x40010400

08011b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	460b      	mov	r3, r1
 8011b3a:	807b      	strh	r3, [r7, #2]
 8011b3c:	4613      	mov	r3, r2
 8011b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011b40:	787b      	ldrb	r3, [r7, #1]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d003      	beq.n	8011b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011b46:	887a      	ldrh	r2, [r7, #2]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8011b4c:	e003      	b.n	8011b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8011b4e:	887b      	ldrh	r3, [r7, #2]
 8011b50:	041a      	lsls	r2, r3, #16
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	611a      	str	r2, [r3, #16]
}
 8011b56:	bf00      	nop
 8011b58:	370c      	adds	r7, #12
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bc80      	pop	{r7}
 8011b5e:	4770      	bx	lr

08011b60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b085      	sub	sp, #20
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	460b      	mov	r3, r1
 8011b6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011b72:	887a      	ldrh	r2, [r7, #2]
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	4013      	ands	r3, r2
 8011b78:	041a      	lsls	r2, r3, #16
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	43d9      	mvns	r1, r3
 8011b7e:	887b      	ldrh	r3, [r7, #2]
 8011b80:	400b      	ands	r3, r1
 8011b82:	431a      	orrs	r2, r3
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	611a      	str	r2, [r3, #16]
}
 8011b88:	bf00      	nop
 8011b8a:	3714      	adds	r7, #20
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bc80      	pop	{r7}
 8011b90:	4770      	bx	lr
	...

08011b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b086      	sub	sp, #24
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d101      	bne.n	8011ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e272      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	f003 0301 	and.w	r3, r3, #1
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	f000 8087 	beq.w	8011cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8011bb4:	4b92      	ldr	r3, [pc, #584]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	f003 030c 	and.w	r3, r3, #12
 8011bbc:	2b04      	cmp	r3, #4
 8011bbe:	d00c      	beq.n	8011bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011bc0:	4b8f      	ldr	r3, [pc, #572]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	f003 030c 	and.w	r3, r3, #12
 8011bc8:	2b08      	cmp	r3, #8
 8011bca:	d112      	bne.n	8011bf2 <HAL_RCC_OscConfig+0x5e>
 8011bcc:	4b8c      	ldr	r3, [pc, #560]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bd8:	d10b      	bne.n	8011bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011bda:	4b89      	ldr	r3, [pc, #548]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d06c      	beq.n	8011cc0 <HAL_RCC_OscConfig+0x12c>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d168      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	e24c      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bfa:	d106      	bne.n	8011c0a <HAL_RCC_OscConfig+0x76>
 8011bfc:	4b80      	ldr	r3, [pc, #512]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	4a7f      	ldr	r2, [pc, #508]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c06:	6013      	str	r3, [r2, #0]
 8011c08:	e02e      	b.n	8011c68 <HAL_RCC_OscConfig+0xd4>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d10c      	bne.n	8011c2c <HAL_RCC_OscConfig+0x98>
 8011c12:	4b7b      	ldr	r3, [pc, #492]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	4a7a      	ldr	r2, [pc, #488]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c1c:	6013      	str	r3, [r2, #0]
 8011c1e:	4b78      	ldr	r3, [pc, #480]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4a77      	ldr	r2, [pc, #476]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011c28:	6013      	str	r3, [r2, #0]
 8011c2a:	e01d      	b.n	8011c68 <HAL_RCC_OscConfig+0xd4>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	685b      	ldr	r3, [r3, #4]
 8011c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011c34:	d10c      	bne.n	8011c50 <HAL_RCC_OscConfig+0xbc>
 8011c36:	4b72      	ldr	r3, [pc, #456]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4a71      	ldr	r2, [pc, #452]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011c40:	6013      	str	r3, [r2, #0]
 8011c42:	4b6f      	ldr	r3, [pc, #444]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	4a6e      	ldr	r2, [pc, #440]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c4c:	6013      	str	r3, [r2, #0]
 8011c4e:	e00b      	b.n	8011c68 <HAL_RCC_OscConfig+0xd4>
 8011c50:	4b6b      	ldr	r3, [pc, #428]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4a6a      	ldr	r2, [pc, #424]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c5a:	6013      	str	r3, [r2, #0]
 8011c5c:	4b68      	ldr	r3, [pc, #416]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4a67      	ldr	r2, [pc, #412]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d013      	beq.n	8011c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011c70:	f7ff fb4c 	bl	801130c <HAL_GetTick>
 8011c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c76:	e008      	b.n	8011c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011c78:	f7ff fb48 	bl	801130c <HAL_GetTick>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	2b64      	cmp	r3, #100	; 0x64
 8011c84:	d901      	bls.n	8011c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8011c86:	2303      	movs	r3, #3
 8011c88:	e200      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c8a:	4b5d      	ldr	r3, [pc, #372]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d0f0      	beq.n	8011c78 <HAL_RCC_OscConfig+0xe4>
 8011c96:	e014      	b.n	8011cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011c98:	f7ff fb38 	bl	801130c <HAL_GetTick>
 8011c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011c9e:	e008      	b.n	8011cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011ca0:	f7ff fb34 	bl	801130c <HAL_GetTick>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	1ad3      	subs	r3, r2, r3
 8011caa:	2b64      	cmp	r3, #100	; 0x64
 8011cac:	d901      	bls.n	8011cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8011cae:	2303      	movs	r3, #3
 8011cb0:	e1ec      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011cb2:	4b53      	ldr	r3, [pc, #332]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d1f0      	bne.n	8011ca0 <HAL_RCC_OscConfig+0x10c>
 8011cbe:	e000      	b.n	8011cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f003 0302 	and.w	r3, r3, #2
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d063      	beq.n	8011d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8011cce:	4b4c      	ldr	r3, [pc, #304]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	f003 030c 	and.w	r3, r3, #12
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d00b      	beq.n	8011cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8011cda:	4b49      	ldr	r3, [pc, #292]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	f003 030c 	and.w	r3, r3, #12
 8011ce2:	2b08      	cmp	r3, #8
 8011ce4:	d11c      	bne.n	8011d20 <HAL_RCC_OscConfig+0x18c>
 8011ce6:	4b46      	ldr	r3, [pc, #280]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011ce8:	685b      	ldr	r3, [r3, #4]
 8011cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d116      	bne.n	8011d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011cf2:	4b43      	ldr	r3, [pc, #268]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	f003 0302 	and.w	r3, r3, #2
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d005      	beq.n	8011d0a <HAL_RCC_OscConfig+0x176>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	691b      	ldr	r3, [r3, #16]
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d001      	beq.n	8011d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8011d06:	2301      	movs	r3, #1
 8011d08:	e1c0      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d0a:	4b3d      	ldr	r3, [pc, #244]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	695b      	ldr	r3, [r3, #20]
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	4939      	ldr	r1, [pc, #228]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011d1a:	4313      	orrs	r3, r2
 8011d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011d1e:	e03a      	b.n	8011d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	691b      	ldr	r3, [r3, #16]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d020      	beq.n	8011d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011d28:	4b36      	ldr	r3, [pc, #216]	; (8011e04 <HAL_RCC_OscConfig+0x270>)
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d2e:	f7ff faed 	bl	801130c <HAL_GetTick>
 8011d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d34:	e008      	b.n	8011d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011d36:	f7ff fae9 	bl	801130c <HAL_GetTick>
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	2b02      	cmp	r3, #2
 8011d42:	d901      	bls.n	8011d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8011d44:	2303      	movs	r3, #3
 8011d46:	e1a1      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d48:	4b2d      	ldr	r3, [pc, #180]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f003 0302 	and.w	r3, r3, #2
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d0f0      	beq.n	8011d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d54:	4b2a      	ldr	r3, [pc, #168]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	695b      	ldr	r3, [r3, #20]
 8011d60:	00db      	lsls	r3, r3, #3
 8011d62:	4927      	ldr	r1, [pc, #156]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011d64:	4313      	orrs	r3, r2
 8011d66:	600b      	str	r3, [r1, #0]
 8011d68:	e015      	b.n	8011d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011d6a:	4b26      	ldr	r3, [pc, #152]	; (8011e04 <HAL_RCC_OscConfig+0x270>)
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d70:	f7ff facc 	bl	801130c <HAL_GetTick>
 8011d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011d76:	e008      	b.n	8011d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011d78:	f7ff fac8 	bl	801130c <HAL_GetTick>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	2b02      	cmp	r3, #2
 8011d84:	d901      	bls.n	8011d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8011d86:	2303      	movs	r3, #3
 8011d88:	e180      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011d8a:	4b1d      	ldr	r3, [pc, #116]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f003 0302 	and.w	r3, r3, #2
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d1f0      	bne.n	8011d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	f003 0308 	and.w	r3, r3, #8
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d03a      	beq.n	8011e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	699b      	ldr	r3, [r3, #24]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d019      	beq.n	8011dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011daa:	4b17      	ldr	r3, [pc, #92]	; (8011e08 <HAL_RCC_OscConfig+0x274>)
 8011dac:	2201      	movs	r2, #1
 8011dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011db0:	f7ff faac 	bl	801130c <HAL_GetTick>
 8011db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011db6:	e008      	b.n	8011dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011db8:	f7ff faa8 	bl	801130c <HAL_GetTick>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	2b02      	cmp	r3, #2
 8011dc4:	d901      	bls.n	8011dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8011dc6:	2303      	movs	r3, #3
 8011dc8:	e160      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011dca:	4b0d      	ldr	r3, [pc, #52]	; (8011e00 <HAL_RCC_OscConfig+0x26c>)
 8011dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dce:	f003 0302 	and.w	r3, r3, #2
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d0f0      	beq.n	8011db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8011dd6:	2001      	movs	r0, #1
 8011dd8:	f000 face 	bl	8012378 <RCC_Delay>
 8011ddc:	e01c      	b.n	8011e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011dde:	4b0a      	ldr	r3, [pc, #40]	; (8011e08 <HAL_RCC_OscConfig+0x274>)
 8011de0:	2200      	movs	r2, #0
 8011de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011de4:	f7ff fa92 	bl	801130c <HAL_GetTick>
 8011de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011dea:	e00f      	b.n	8011e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011dec:	f7ff fa8e 	bl	801130c <HAL_GetTick>
 8011df0:	4602      	mov	r2, r0
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	1ad3      	subs	r3, r2, r3
 8011df6:	2b02      	cmp	r3, #2
 8011df8:	d908      	bls.n	8011e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8011dfa:	2303      	movs	r3, #3
 8011dfc:	e146      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
 8011dfe:	bf00      	nop
 8011e00:	40021000 	.word	0x40021000
 8011e04:	42420000 	.word	0x42420000
 8011e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011e0c:	4b92      	ldr	r3, [pc, #584]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e10:	f003 0302 	and.w	r3, r3, #2
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d1e9      	bne.n	8011dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f003 0304 	and.w	r3, r3, #4
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	f000 80a6 	beq.w	8011f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011e26:	2300      	movs	r3, #0
 8011e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011e2a:	4b8b      	ldr	r3, [pc, #556]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011e2c:	69db      	ldr	r3, [r3, #28]
 8011e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d10d      	bne.n	8011e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011e36:	4b88      	ldr	r3, [pc, #544]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011e38:	69db      	ldr	r3, [r3, #28]
 8011e3a:	4a87      	ldr	r2, [pc, #540]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e40:	61d3      	str	r3, [r2, #28]
 8011e42:	4b85      	ldr	r3, [pc, #532]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011e44:	69db      	ldr	r3, [r3, #28]
 8011e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011e4a:	60bb      	str	r3, [r7, #8]
 8011e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011e4e:	2301      	movs	r3, #1
 8011e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011e52:	4b82      	ldr	r3, [pc, #520]	; (801205c <HAL_RCC_OscConfig+0x4c8>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d118      	bne.n	8011e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011e5e:	4b7f      	ldr	r3, [pc, #508]	; (801205c <HAL_RCC_OscConfig+0x4c8>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	4a7e      	ldr	r2, [pc, #504]	; (801205c <HAL_RCC_OscConfig+0x4c8>)
 8011e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011e6a:	f7ff fa4f 	bl	801130c <HAL_GetTick>
 8011e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011e70:	e008      	b.n	8011e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011e72:	f7ff fa4b 	bl	801130c <HAL_GetTick>
 8011e76:	4602      	mov	r2, r0
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	1ad3      	subs	r3, r2, r3
 8011e7c:	2b64      	cmp	r3, #100	; 0x64
 8011e7e:	d901      	bls.n	8011e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8011e80:	2303      	movs	r3, #3
 8011e82:	e103      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011e84:	4b75      	ldr	r3, [pc, #468]	; (801205c <HAL_RCC_OscConfig+0x4c8>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d0f0      	beq.n	8011e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d106      	bne.n	8011ea6 <HAL_RCC_OscConfig+0x312>
 8011e98:	4b6f      	ldr	r3, [pc, #444]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011e9a:	6a1b      	ldr	r3, [r3, #32]
 8011e9c:	4a6e      	ldr	r2, [pc, #440]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011e9e:	f043 0301 	orr.w	r3, r3, #1
 8011ea2:	6213      	str	r3, [r2, #32]
 8011ea4:	e02d      	b.n	8011f02 <HAL_RCC_OscConfig+0x36e>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d10c      	bne.n	8011ec8 <HAL_RCC_OscConfig+0x334>
 8011eae:	4b6a      	ldr	r3, [pc, #424]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011eb0:	6a1b      	ldr	r3, [r3, #32]
 8011eb2:	4a69      	ldr	r2, [pc, #420]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011eb4:	f023 0301 	bic.w	r3, r3, #1
 8011eb8:	6213      	str	r3, [r2, #32]
 8011eba:	4b67      	ldr	r3, [pc, #412]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011ebc:	6a1b      	ldr	r3, [r3, #32]
 8011ebe:	4a66      	ldr	r2, [pc, #408]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011ec0:	f023 0304 	bic.w	r3, r3, #4
 8011ec4:	6213      	str	r3, [r2, #32]
 8011ec6:	e01c      	b.n	8011f02 <HAL_RCC_OscConfig+0x36e>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	2b05      	cmp	r3, #5
 8011ece:	d10c      	bne.n	8011eea <HAL_RCC_OscConfig+0x356>
 8011ed0:	4b61      	ldr	r3, [pc, #388]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011ed2:	6a1b      	ldr	r3, [r3, #32]
 8011ed4:	4a60      	ldr	r2, [pc, #384]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011ed6:	f043 0304 	orr.w	r3, r3, #4
 8011eda:	6213      	str	r3, [r2, #32]
 8011edc:	4b5e      	ldr	r3, [pc, #376]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011ede:	6a1b      	ldr	r3, [r3, #32]
 8011ee0:	4a5d      	ldr	r2, [pc, #372]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011ee2:	f043 0301 	orr.w	r3, r3, #1
 8011ee6:	6213      	str	r3, [r2, #32]
 8011ee8:	e00b      	b.n	8011f02 <HAL_RCC_OscConfig+0x36e>
 8011eea:	4b5b      	ldr	r3, [pc, #364]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011eec:	6a1b      	ldr	r3, [r3, #32]
 8011eee:	4a5a      	ldr	r2, [pc, #360]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011ef0:	f023 0301 	bic.w	r3, r3, #1
 8011ef4:	6213      	str	r3, [r2, #32]
 8011ef6:	4b58      	ldr	r3, [pc, #352]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011ef8:	6a1b      	ldr	r3, [r3, #32]
 8011efa:	4a57      	ldr	r2, [pc, #348]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011efc:	f023 0304 	bic.w	r3, r3, #4
 8011f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	68db      	ldr	r3, [r3, #12]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d015      	beq.n	8011f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011f0a:	f7ff f9ff 	bl	801130c <HAL_GetTick>
 8011f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f10:	e00a      	b.n	8011f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011f12:	f7ff f9fb 	bl	801130c <HAL_GetTick>
 8011f16:	4602      	mov	r2, r0
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f20:	4293      	cmp	r3, r2
 8011f22:	d901      	bls.n	8011f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8011f24:	2303      	movs	r3, #3
 8011f26:	e0b1      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f28:	4b4b      	ldr	r3, [pc, #300]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011f2a:	6a1b      	ldr	r3, [r3, #32]
 8011f2c:	f003 0302 	and.w	r3, r3, #2
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d0ee      	beq.n	8011f12 <HAL_RCC_OscConfig+0x37e>
 8011f34:	e014      	b.n	8011f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011f36:	f7ff f9e9 	bl	801130c <HAL_GetTick>
 8011f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011f3c:	e00a      	b.n	8011f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011f3e:	f7ff f9e5 	bl	801130c <HAL_GetTick>
 8011f42:	4602      	mov	r2, r0
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	d901      	bls.n	8011f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8011f50:	2303      	movs	r3, #3
 8011f52:	e09b      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011f54:	4b40      	ldr	r3, [pc, #256]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011f56:	6a1b      	ldr	r3, [r3, #32]
 8011f58:	f003 0302 	and.w	r3, r3, #2
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1ee      	bne.n	8011f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8011f60:	7dfb      	ldrb	r3, [r7, #23]
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d105      	bne.n	8011f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011f66:	4b3c      	ldr	r3, [pc, #240]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011f68:	69db      	ldr	r3, [r3, #28]
 8011f6a:	4a3b      	ldr	r2, [pc, #236]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	69db      	ldr	r3, [r3, #28]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f000 8087 	beq.w	801208a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011f7c:	4b36      	ldr	r3, [pc, #216]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	f003 030c 	and.w	r3, r3, #12
 8011f84:	2b08      	cmp	r3, #8
 8011f86:	d061      	beq.n	801204c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	69db      	ldr	r3, [r3, #28]
 8011f8c:	2b02      	cmp	r3, #2
 8011f8e:	d146      	bne.n	801201e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011f90:	4b33      	ldr	r3, [pc, #204]	; (8012060 <HAL_RCC_OscConfig+0x4cc>)
 8011f92:	2200      	movs	r2, #0
 8011f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011f96:	f7ff f9b9 	bl	801130c <HAL_GetTick>
 8011f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011f9c:	e008      	b.n	8011fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011f9e:	f7ff f9b5 	bl	801130c <HAL_GetTick>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	1ad3      	subs	r3, r2, r3
 8011fa8:	2b02      	cmp	r3, #2
 8011faa:	d901      	bls.n	8011fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8011fac:	2303      	movs	r3, #3
 8011fae:	e06d      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011fb0:	4b29      	ldr	r3, [pc, #164]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1f0      	bne.n	8011f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6a1b      	ldr	r3, [r3, #32]
 8011fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011fc4:	d108      	bne.n	8011fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8011fc6:	4b24      	ldr	r3, [pc, #144]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	689b      	ldr	r3, [r3, #8]
 8011fd2:	4921      	ldr	r1, [pc, #132]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011fd4:	4313      	orrs	r3, r2
 8011fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011fd8:	4b1f      	ldr	r3, [pc, #124]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6a19      	ldr	r1, [r3, #32]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe8:	430b      	orrs	r3, r1
 8011fea:	491b      	ldr	r1, [pc, #108]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8011fec:	4313      	orrs	r3, r2
 8011fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011ff0:	4b1b      	ldr	r3, [pc, #108]	; (8012060 <HAL_RCC_OscConfig+0x4cc>)
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011ff6:	f7ff f989 	bl	801130c <HAL_GetTick>
 8011ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011ffc:	e008      	b.n	8012010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011ffe:	f7ff f985 	bl	801130c <HAL_GetTick>
 8012002:	4602      	mov	r2, r0
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	1ad3      	subs	r3, r2, r3
 8012008:	2b02      	cmp	r3, #2
 801200a:	d901      	bls.n	8012010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 801200c:	2303      	movs	r3, #3
 801200e:	e03d      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012010:	4b11      	ldr	r3, [pc, #68]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012018:	2b00      	cmp	r3, #0
 801201a:	d0f0      	beq.n	8011ffe <HAL_RCC_OscConfig+0x46a>
 801201c:	e035      	b.n	801208a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801201e:	4b10      	ldr	r3, [pc, #64]	; (8012060 <HAL_RCC_OscConfig+0x4cc>)
 8012020:	2200      	movs	r2, #0
 8012022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012024:	f7ff f972 	bl	801130c <HAL_GetTick>
 8012028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801202a:	e008      	b.n	801203e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801202c:	f7ff f96e 	bl	801130c <HAL_GetTick>
 8012030:	4602      	mov	r2, r0
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	2b02      	cmp	r3, #2
 8012038:	d901      	bls.n	801203e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 801203a:	2303      	movs	r3, #3
 801203c:	e026      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801203e:	4b06      	ldr	r3, [pc, #24]	; (8012058 <HAL_RCC_OscConfig+0x4c4>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012046:	2b00      	cmp	r3, #0
 8012048:	d1f0      	bne.n	801202c <HAL_RCC_OscConfig+0x498>
 801204a:	e01e      	b.n	801208a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	69db      	ldr	r3, [r3, #28]
 8012050:	2b01      	cmp	r3, #1
 8012052:	d107      	bne.n	8012064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8012054:	2301      	movs	r3, #1
 8012056:	e019      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
 8012058:	40021000 	.word	0x40021000
 801205c:	40007000 	.word	0x40007000
 8012060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8012064:	4b0b      	ldr	r3, [pc, #44]	; (8012094 <HAL_RCC_OscConfig+0x500>)
 8012066:	685b      	ldr	r3, [r3, #4]
 8012068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6a1b      	ldr	r3, [r3, #32]
 8012074:	429a      	cmp	r2, r3
 8012076:	d106      	bne.n	8012086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012082:	429a      	cmp	r2, r3
 8012084:	d001      	beq.n	801208a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8012086:	2301      	movs	r3, #1
 8012088:	e000      	b.n	801208c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 801208a:	2300      	movs	r3, #0
}
 801208c:	4618      	mov	r0, r3
 801208e:	3718      	adds	r7, #24
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	40021000 	.word	0x40021000

08012098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d101      	bne.n	80120ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80120a8:	2301      	movs	r3, #1
 80120aa:	e0d0      	b.n	801224e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80120ac:	4b6a      	ldr	r3, [pc, #424]	; (8012258 <HAL_RCC_ClockConfig+0x1c0>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f003 0307 	and.w	r3, r3, #7
 80120b4:	683a      	ldr	r2, [r7, #0]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d910      	bls.n	80120dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80120ba:	4b67      	ldr	r3, [pc, #412]	; (8012258 <HAL_RCC_ClockConfig+0x1c0>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f023 0207 	bic.w	r2, r3, #7
 80120c2:	4965      	ldr	r1, [pc, #404]	; (8012258 <HAL_RCC_ClockConfig+0x1c0>)
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	4313      	orrs	r3, r2
 80120c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80120ca:	4b63      	ldr	r3, [pc, #396]	; (8012258 <HAL_RCC_ClockConfig+0x1c0>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f003 0307 	and.w	r3, r3, #7
 80120d2:	683a      	ldr	r2, [r7, #0]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d001      	beq.n	80120dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80120d8:	2301      	movs	r3, #1
 80120da:	e0b8      	b.n	801224e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f003 0302 	and.w	r3, r3, #2
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d020      	beq.n	801212a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f003 0304 	and.w	r3, r3, #4
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d005      	beq.n	8012100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80120f4:	4b59      	ldr	r3, [pc, #356]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	4a58      	ldr	r2, [pc, #352]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 80120fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80120fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	f003 0308 	and.w	r3, r3, #8
 8012108:	2b00      	cmp	r3, #0
 801210a:	d005      	beq.n	8012118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801210c:	4b53      	ldr	r3, [pc, #332]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	4a52      	ldr	r2, [pc, #328]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8012116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012118:	4b50      	ldr	r3, [pc, #320]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	494d      	ldr	r1, [pc, #308]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012126:	4313      	orrs	r3, r2
 8012128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	f003 0301 	and.w	r3, r3, #1
 8012132:	2b00      	cmp	r3, #0
 8012134:	d040      	beq.n	80121b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	2b01      	cmp	r3, #1
 801213c:	d107      	bne.n	801214e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801213e:	4b47      	ldr	r3, [pc, #284]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012146:	2b00      	cmp	r3, #0
 8012148:	d115      	bne.n	8012176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801214a:	2301      	movs	r3, #1
 801214c:	e07f      	b.n	801224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	685b      	ldr	r3, [r3, #4]
 8012152:	2b02      	cmp	r3, #2
 8012154:	d107      	bne.n	8012166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012156:	4b41      	ldr	r3, [pc, #260]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801215e:	2b00      	cmp	r3, #0
 8012160:	d109      	bne.n	8012176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012162:	2301      	movs	r3, #1
 8012164:	e073      	b.n	801224e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012166:	4b3d      	ldr	r3, [pc, #244]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f003 0302 	and.w	r3, r3, #2
 801216e:	2b00      	cmp	r3, #0
 8012170:	d101      	bne.n	8012176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012172:	2301      	movs	r3, #1
 8012174:	e06b      	b.n	801224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012176:	4b39      	ldr	r3, [pc, #228]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	f023 0203 	bic.w	r2, r3, #3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	4936      	ldr	r1, [pc, #216]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012184:	4313      	orrs	r3, r2
 8012186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012188:	f7ff f8c0 	bl	801130c <HAL_GetTick>
 801218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801218e:	e00a      	b.n	80121a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012190:	f7ff f8bc 	bl	801130c <HAL_GetTick>
 8012194:	4602      	mov	r2, r0
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	1ad3      	subs	r3, r2, r3
 801219a:	f241 3288 	movw	r2, #5000	; 0x1388
 801219e:	4293      	cmp	r3, r2
 80121a0:	d901      	bls.n	80121a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80121a2:	2303      	movs	r3, #3
 80121a4:	e053      	b.n	801224e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80121a6:	4b2d      	ldr	r3, [pc, #180]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	f003 020c 	and.w	r2, r3, #12
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d1eb      	bne.n	8012190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80121b8:	4b27      	ldr	r3, [pc, #156]	; (8012258 <HAL_RCC_ClockConfig+0x1c0>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	f003 0307 	and.w	r3, r3, #7
 80121c0:	683a      	ldr	r2, [r7, #0]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d210      	bcs.n	80121e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80121c6:	4b24      	ldr	r3, [pc, #144]	; (8012258 <HAL_RCC_ClockConfig+0x1c0>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f023 0207 	bic.w	r2, r3, #7
 80121ce:	4922      	ldr	r1, [pc, #136]	; (8012258 <HAL_RCC_ClockConfig+0x1c0>)
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	4313      	orrs	r3, r2
 80121d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80121d6:	4b20      	ldr	r3, [pc, #128]	; (8012258 <HAL_RCC_ClockConfig+0x1c0>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	f003 0307 	and.w	r3, r3, #7
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d001      	beq.n	80121e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80121e4:	2301      	movs	r3, #1
 80121e6:	e032      	b.n	801224e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f003 0304 	and.w	r3, r3, #4
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d008      	beq.n	8012206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80121f4:	4b19      	ldr	r3, [pc, #100]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	4916      	ldr	r1, [pc, #88]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012202:	4313      	orrs	r3, r2
 8012204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f003 0308 	and.w	r3, r3, #8
 801220e:	2b00      	cmp	r3, #0
 8012210:	d009      	beq.n	8012226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8012212:	4b12      	ldr	r3, [pc, #72]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	691b      	ldr	r3, [r3, #16]
 801221e:	00db      	lsls	r3, r3, #3
 8012220:	490e      	ldr	r1, [pc, #56]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 8012222:	4313      	orrs	r3, r2
 8012224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8012226:	f000 f821 	bl	801226c <HAL_RCC_GetSysClockFreq>
 801222a:	4602      	mov	r2, r0
 801222c:	4b0b      	ldr	r3, [pc, #44]	; (801225c <HAL_RCC_ClockConfig+0x1c4>)
 801222e:	685b      	ldr	r3, [r3, #4]
 8012230:	091b      	lsrs	r3, r3, #4
 8012232:	f003 030f 	and.w	r3, r3, #15
 8012236:	490a      	ldr	r1, [pc, #40]	; (8012260 <HAL_RCC_ClockConfig+0x1c8>)
 8012238:	5ccb      	ldrb	r3, [r1, r3]
 801223a:	fa22 f303 	lsr.w	r3, r2, r3
 801223e:	4a09      	ldr	r2, [pc, #36]	; (8012264 <HAL_RCC_ClockConfig+0x1cc>)
 8012240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8012242:	4b09      	ldr	r3, [pc, #36]	; (8012268 <HAL_RCC_ClockConfig+0x1d0>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	4618      	mov	r0, r3
 8012248:	f7ff f81e 	bl	8011288 <HAL_InitTick>

  return HAL_OK;
 801224c:	2300      	movs	r3, #0
}
 801224e:	4618      	mov	r0, r3
 8012250:	3710      	adds	r7, #16
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop
 8012258:	40022000 	.word	0x40022000
 801225c:	40021000 	.word	0x40021000
 8012260:	08017a74 	.word	0x08017a74
 8012264:	20000000 	.word	0x20000000
 8012268:	20000004 	.word	0x20000004

0801226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801226c:	b480      	push	{r7}
 801226e:	b087      	sub	sp, #28
 8012270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8012272:	2300      	movs	r3, #0
 8012274:	60fb      	str	r3, [r7, #12]
 8012276:	2300      	movs	r3, #0
 8012278:	60bb      	str	r3, [r7, #8]
 801227a:	2300      	movs	r3, #0
 801227c:	617b      	str	r3, [r7, #20]
 801227e:	2300      	movs	r3, #0
 8012280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8012282:	2300      	movs	r3, #0
 8012284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8012286:	4b1e      	ldr	r3, [pc, #120]	; (8012300 <HAL_RCC_GetSysClockFreq+0x94>)
 8012288:	685b      	ldr	r3, [r3, #4]
 801228a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f003 030c 	and.w	r3, r3, #12
 8012292:	2b04      	cmp	r3, #4
 8012294:	d002      	beq.n	801229c <HAL_RCC_GetSysClockFreq+0x30>
 8012296:	2b08      	cmp	r3, #8
 8012298:	d003      	beq.n	80122a2 <HAL_RCC_GetSysClockFreq+0x36>
 801229a:	e027      	b.n	80122ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801229c:	4b19      	ldr	r3, [pc, #100]	; (8012304 <HAL_RCC_GetSysClockFreq+0x98>)
 801229e:	613b      	str	r3, [r7, #16]
      break;
 80122a0:	e027      	b.n	80122f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	0c9b      	lsrs	r3, r3, #18
 80122a6:	f003 030f 	and.w	r3, r3, #15
 80122aa:	4a17      	ldr	r2, [pc, #92]	; (8012308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80122ac:	5cd3      	ldrb	r3, [r2, r3]
 80122ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d010      	beq.n	80122dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80122ba:	4b11      	ldr	r3, [pc, #68]	; (8012300 <HAL_RCC_GetSysClockFreq+0x94>)
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	0c5b      	lsrs	r3, r3, #17
 80122c0:	f003 0301 	and.w	r3, r3, #1
 80122c4:	4a11      	ldr	r2, [pc, #68]	; (801230c <HAL_RCC_GetSysClockFreq+0xa0>)
 80122c6:	5cd3      	ldrb	r3, [r2, r3]
 80122c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	4a0d      	ldr	r2, [pc, #52]	; (8012304 <HAL_RCC_GetSysClockFreq+0x98>)
 80122ce:	fb03 f202 	mul.w	r2, r3, r2
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80122d8:	617b      	str	r3, [r7, #20]
 80122da:	e004      	b.n	80122e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	4a0c      	ldr	r2, [pc, #48]	; (8012310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80122e0:	fb02 f303 	mul.w	r3, r2, r3
 80122e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	613b      	str	r3, [r7, #16]
      break;
 80122ea:	e002      	b.n	80122f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80122ec:	4b05      	ldr	r3, [pc, #20]	; (8012304 <HAL_RCC_GetSysClockFreq+0x98>)
 80122ee:	613b      	str	r3, [r7, #16]
      break;
 80122f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80122f2:	693b      	ldr	r3, [r7, #16]
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	371c      	adds	r7, #28
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bc80      	pop	{r7}
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop
 8012300:	40021000 	.word	0x40021000
 8012304:	007a1200 	.word	0x007a1200
 8012308:	08017a8c 	.word	0x08017a8c
 801230c:	08017a9c 	.word	0x08017a9c
 8012310:	003d0900 	.word	0x003d0900

08012314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012314:	b480      	push	{r7}
 8012316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012318:	4b02      	ldr	r3, [pc, #8]	; (8012324 <HAL_RCC_GetHCLKFreq+0x10>)
 801231a:	681b      	ldr	r3, [r3, #0]
}
 801231c:	4618      	mov	r0, r3
 801231e:	46bd      	mov	sp, r7
 8012320:	bc80      	pop	{r7}
 8012322:	4770      	bx	lr
 8012324:	20000000 	.word	0x20000000

08012328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801232c:	f7ff fff2 	bl	8012314 <HAL_RCC_GetHCLKFreq>
 8012330:	4602      	mov	r2, r0
 8012332:	4b05      	ldr	r3, [pc, #20]	; (8012348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	0a1b      	lsrs	r3, r3, #8
 8012338:	f003 0307 	and.w	r3, r3, #7
 801233c:	4903      	ldr	r1, [pc, #12]	; (801234c <HAL_RCC_GetPCLK1Freq+0x24>)
 801233e:	5ccb      	ldrb	r3, [r1, r3]
 8012340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012344:	4618      	mov	r0, r3
 8012346:	bd80      	pop	{r7, pc}
 8012348:	40021000 	.word	0x40021000
 801234c:	08017a84 	.word	0x08017a84

08012350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8012354:	f7ff ffde 	bl	8012314 <HAL_RCC_GetHCLKFreq>
 8012358:	4602      	mov	r2, r0
 801235a:	4b05      	ldr	r3, [pc, #20]	; (8012370 <HAL_RCC_GetPCLK2Freq+0x20>)
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	0adb      	lsrs	r3, r3, #11
 8012360:	f003 0307 	and.w	r3, r3, #7
 8012364:	4903      	ldr	r1, [pc, #12]	; (8012374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012366:	5ccb      	ldrb	r3, [r1, r3]
 8012368:	fa22 f303 	lsr.w	r3, r2, r3
}
 801236c:	4618      	mov	r0, r3
 801236e:	bd80      	pop	{r7, pc}
 8012370:	40021000 	.word	0x40021000
 8012374:	08017a84 	.word	0x08017a84

08012378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8012378:	b480      	push	{r7}
 801237a:	b085      	sub	sp, #20
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8012380:	4b0a      	ldr	r3, [pc, #40]	; (80123ac <RCC_Delay+0x34>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4a0a      	ldr	r2, [pc, #40]	; (80123b0 <RCC_Delay+0x38>)
 8012386:	fba2 2303 	umull	r2, r3, r2, r3
 801238a:	0a5b      	lsrs	r3, r3, #9
 801238c:	687a      	ldr	r2, [r7, #4]
 801238e:	fb02 f303 	mul.w	r3, r2, r3
 8012392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8012394:	bf00      	nop
  }
  while (Delay --);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	1e5a      	subs	r2, r3, #1
 801239a:	60fa      	str	r2, [r7, #12]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1f9      	bne.n	8012394 <RCC_Delay+0x1c>
}
 80123a0:	bf00      	nop
 80123a2:	bf00      	nop
 80123a4:	3714      	adds	r7, #20
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bc80      	pop	{r7}
 80123aa:	4770      	bx	lr
 80123ac:	20000000 	.word	0x20000000
 80123b0:	10624dd3 	.word	0x10624dd3

080123b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d101      	bne.n	80123c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80123c2:	2301      	movs	r3, #1
 80123c4:	e042      	b.n	801244c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d106      	bne.n	80123e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2200      	movs	r2, #0
 80123d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7fe fe90 	bl	8011100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2224      	movs	r2, #36	; 0x24
 80123e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	68da      	ldr	r2, [r3, #12]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80123f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 fdc5 	bl	8012f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	691a      	ldr	r2, [r3, #16]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801240c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	695a      	ldr	r2, [r3, #20]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801241c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	68da      	ldr	r2, [r3, #12]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801242c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2200      	movs	r2, #0
 8012432:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2220      	movs	r2, #32
 8012438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2220      	movs	r2, #32
 8012440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2200      	movs	r2, #0
 8012448:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801244a:	2300      	movs	r3, #0
}
 801244c:	4618      	mov	r0, r3
 801244e:	3708      	adds	r7, #8
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b08a      	sub	sp, #40	; 0x28
 8012458:	af02      	add	r7, sp, #8
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	603b      	str	r3, [r7, #0]
 8012460:	4613      	mov	r3, r2
 8012462:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8012464:	2300      	movs	r3, #0
 8012466:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801246e:	b2db      	uxtb	r3, r3
 8012470:	2b20      	cmp	r3, #32
 8012472:	d16d      	bne.n	8012550 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d002      	beq.n	8012480 <HAL_UART_Transmit+0x2c>
 801247a:	88fb      	ldrh	r3, [r7, #6]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d101      	bne.n	8012484 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8012480:	2301      	movs	r3, #1
 8012482:	e066      	b.n	8012552 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2200      	movs	r2, #0
 8012488:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	2221      	movs	r2, #33	; 0x21
 801248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012492:	f7fe ff3b 	bl	801130c <HAL_GetTick>
 8012496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	88fa      	ldrh	r2, [r7, #6]
 801249c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	88fa      	ldrh	r2, [r7, #6]
 80124a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80124ac:	d108      	bne.n	80124c0 <HAL_UART_Transmit+0x6c>
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	691b      	ldr	r3, [r3, #16]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d104      	bne.n	80124c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80124b6:	2300      	movs	r3, #0
 80124b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	61bb      	str	r3, [r7, #24]
 80124be:	e003      	b.n	80124c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80124c4:	2300      	movs	r3, #0
 80124c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80124c8:	e02a      	b.n	8012520 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	9300      	str	r3, [sp, #0]
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	2200      	movs	r2, #0
 80124d2:	2180      	movs	r1, #128	; 0x80
 80124d4:	68f8      	ldr	r0, [r7, #12]
 80124d6:	f000 fb14 	bl	8012b02 <UART_WaitOnFlagUntilTimeout>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d001      	beq.n	80124e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80124e0:	2303      	movs	r3, #3
 80124e2:	e036      	b.n	8012552 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d10b      	bne.n	8012502 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	881b      	ldrh	r3, [r3, #0]
 80124ee:	461a      	mov	r2, r3
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80124f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	3302      	adds	r3, #2
 80124fe:	61bb      	str	r3, [r7, #24]
 8012500:	e007      	b.n	8012512 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8012502:	69fb      	ldr	r3, [r7, #28]
 8012504:	781a      	ldrb	r2, [r3, #0]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801250c:	69fb      	ldr	r3, [r7, #28]
 801250e:	3301      	adds	r3, #1
 8012510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012516:	b29b      	uxth	r3, r3
 8012518:	3b01      	subs	r3, #1
 801251a:	b29a      	uxth	r2, r3
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012524:	b29b      	uxth	r3, r3
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1cf      	bne.n	80124ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	9300      	str	r3, [sp, #0]
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	2200      	movs	r2, #0
 8012532:	2140      	movs	r1, #64	; 0x40
 8012534:	68f8      	ldr	r0, [r7, #12]
 8012536:	f000 fae4 	bl	8012b02 <UART_WaitOnFlagUntilTimeout>
 801253a:	4603      	mov	r3, r0
 801253c:	2b00      	cmp	r3, #0
 801253e:	d001      	beq.n	8012544 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8012540:	2303      	movs	r3, #3
 8012542:	e006      	b.n	8012552 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2220      	movs	r2, #32
 8012548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 801254c:	2300      	movs	r3, #0
 801254e:	e000      	b.n	8012552 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8012550:	2302      	movs	r3, #2
  }
}
 8012552:	4618      	mov	r0, r3
 8012554:	3720      	adds	r7, #32
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801255a:	b580      	push	{r7, lr}
 801255c:	b084      	sub	sp, #16
 801255e:	af00      	add	r7, sp, #0
 8012560:	60f8      	str	r0, [r7, #12]
 8012562:	60b9      	str	r1, [r7, #8]
 8012564:	4613      	mov	r3, r2
 8012566:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801256e:	b2db      	uxtb	r3, r3
 8012570:	2b20      	cmp	r3, #32
 8012572:	d112      	bne.n	801259a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d002      	beq.n	8012580 <HAL_UART_Receive_IT+0x26>
 801257a:	88fb      	ldrh	r3, [r7, #6]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d101      	bne.n	8012584 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8012580:	2301      	movs	r3, #1
 8012582:	e00b      	b.n	801259c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	2200      	movs	r2, #0
 8012588:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801258a:	88fb      	ldrh	r3, [r7, #6]
 801258c:	461a      	mov	r2, r3
 801258e:	68b9      	ldr	r1, [r7, #8]
 8012590:	68f8      	ldr	r0, [r7, #12]
 8012592:	f000 fb24 	bl	8012bde <UART_Start_Receive_IT>
 8012596:	4603      	mov	r3, r0
 8012598:	e000      	b.n	801259c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 801259a:	2302      	movs	r3, #2
  }
}
 801259c:	4618      	mov	r0, r3
 801259e:	3710      	adds	r7, #16
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b0ba      	sub	sp, #232	; 0xe8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	68db      	ldr	r3, [r3, #12]
 80125bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	695b      	ldr	r3, [r3, #20]
 80125c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80125ca:	2300      	movs	r3, #0
 80125cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80125d0:	2300      	movs	r3, #0
 80125d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80125d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125da:	f003 030f 	and.w	r3, r3, #15
 80125de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80125e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d10f      	bne.n	801260a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80125ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125ee:	f003 0320 	and.w	r3, r3, #32
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d009      	beq.n	801260a <HAL_UART_IRQHandler+0x66>
 80125f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80125fa:	f003 0320 	and.w	r3, r3, #32
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d003      	beq.n	801260a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f000 fc01 	bl	8012e0a <UART_Receive_IT>
      return;
 8012608:	e25b      	b.n	8012ac2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801260a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801260e:	2b00      	cmp	r3, #0
 8012610:	f000 80de 	beq.w	80127d0 <HAL_UART_IRQHandler+0x22c>
 8012614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012618:	f003 0301 	and.w	r3, r3, #1
 801261c:	2b00      	cmp	r3, #0
 801261e:	d106      	bne.n	801262e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012624:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012628:	2b00      	cmp	r3, #0
 801262a:	f000 80d1 	beq.w	80127d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012632:	f003 0301 	and.w	r3, r3, #1
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00b      	beq.n	8012652 <HAL_UART_IRQHandler+0xae>
 801263a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012642:	2b00      	cmp	r3, #0
 8012644:	d005      	beq.n	8012652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801264a:	f043 0201 	orr.w	r2, r3, #1
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012656:	f003 0304 	and.w	r3, r3, #4
 801265a:	2b00      	cmp	r3, #0
 801265c:	d00b      	beq.n	8012676 <HAL_UART_IRQHandler+0xd2>
 801265e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012662:	f003 0301 	and.w	r3, r3, #1
 8012666:	2b00      	cmp	r3, #0
 8012668:	d005      	beq.n	8012676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801266e:	f043 0202 	orr.w	r2, r3, #2
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801267a:	f003 0302 	and.w	r3, r3, #2
 801267e:	2b00      	cmp	r3, #0
 8012680:	d00b      	beq.n	801269a <HAL_UART_IRQHandler+0xf6>
 8012682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012686:	f003 0301 	and.w	r3, r3, #1
 801268a:	2b00      	cmp	r3, #0
 801268c:	d005      	beq.n	801269a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012692:	f043 0204 	orr.w	r2, r3, #4
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801269e:	f003 0308 	and.w	r3, r3, #8
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d011      	beq.n	80126ca <HAL_UART_IRQHandler+0x126>
 80126a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126aa:	f003 0320 	and.w	r3, r3, #32
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d105      	bne.n	80126be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80126b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126b6:	f003 0301 	and.w	r3, r3, #1
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d005      	beq.n	80126ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126c2:	f043 0208 	orr.w	r2, r3, #8
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	f000 81f2 	beq.w	8012ab8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80126d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126d8:	f003 0320 	and.w	r3, r3, #32
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d008      	beq.n	80126f2 <HAL_UART_IRQHandler+0x14e>
 80126e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126e4:	f003 0320 	and.w	r3, r3, #32
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d002      	beq.n	80126f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f000 fb8c 	bl	8012e0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	695b      	ldr	r3, [r3, #20]
 80126f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	bf14      	ite	ne
 8012700:	2301      	movne	r3, #1
 8012702:	2300      	moveq	r3, #0
 8012704:	b2db      	uxtb	r3, r3
 8012706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801270e:	f003 0308 	and.w	r3, r3, #8
 8012712:	2b00      	cmp	r3, #0
 8012714:	d103      	bne.n	801271e <HAL_UART_IRQHandler+0x17a>
 8012716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801271a:	2b00      	cmp	r3, #0
 801271c:	d04f      	beq.n	80127be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f000 fa96 	bl	8012c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	695b      	ldr	r3, [r3, #20]
 801272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801272e:	2b00      	cmp	r3, #0
 8012730:	d041      	beq.n	80127b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	3314      	adds	r3, #20
 8012738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801273c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012740:	e853 3f00 	ldrex	r3, [r3]
 8012744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801274c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	3314      	adds	r3, #20
 801275a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801275e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801276a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801276e:	e841 2300 	strex	r3, r2, [r1]
 8012772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801277a:	2b00      	cmp	r3, #0
 801277c:	d1d9      	bne.n	8012732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012782:	2b00      	cmp	r3, #0
 8012784:	d013      	beq.n	80127ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801278a:	4a7e      	ldr	r2, [pc, #504]	; (8012984 <HAL_UART_IRQHandler+0x3e0>)
 801278c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012792:	4618      	mov	r0, r3
 8012794:	f7fe ff30 	bl	80115f8 <HAL_DMA_Abort_IT>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d016      	beq.n	80127cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80127a8:	4610      	mov	r0, r2
 80127aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127ac:	e00e      	b.n	80127cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f000 f993 	bl	8012ada <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127b4:	e00a      	b.n	80127cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 f98f 	bl	8012ada <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127bc:	e006      	b.n	80127cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f000 f98b 	bl	8012ada <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2200      	movs	r2, #0
 80127c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80127ca:	e175      	b.n	8012ab8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127cc:	bf00      	nop
    return;
 80127ce:	e173      	b.n	8012ab8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127d4:	2b01      	cmp	r3, #1
 80127d6:	f040 814f 	bne.w	8012a78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80127da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127de:	f003 0310 	and.w	r3, r3, #16
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	f000 8148 	beq.w	8012a78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80127e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127ec:	f003 0310 	and.w	r3, r3, #16
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	f000 8141 	beq.w	8012a78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80127f6:	2300      	movs	r3, #0
 80127f8:	60bb      	str	r3, [r7, #8]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	60bb      	str	r3, [r7, #8]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	60bb      	str	r3, [r7, #8]
 801280a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	695b      	ldr	r3, [r3, #20]
 8012812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012816:	2b00      	cmp	r3, #0
 8012818:	f000 80b6 	beq.w	8012988 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801282c:	2b00      	cmp	r3, #0
 801282e:	f000 8145 	beq.w	8012abc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801283a:	429a      	cmp	r2, r3
 801283c:	f080 813e 	bcs.w	8012abc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012846:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801284c:	699b      	ldr	r3, [r3, #24]
 801284e:	2b20      	cmp	r3, #32
 8012850:	f000 8088 	beq.w	8012964 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	330c      	adds	r3, #12
 801285a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801285e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012862:	e853 3f00 	ldrex	r3, [r3]
 8012866:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801286a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801286e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012872:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	330c      	adds	r3, #12
 801287c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012880:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8012884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012888:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801288c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012890:	e841 2300 	strex	r3, r2, [r1]
 8012894:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801289c:	2b00      	cmp	r3, #0
 801289e:	d1d9      	bne.n	8012854 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	3314      	adds	r3, #20
 80128a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80128aa:	e853 3f00 	ldrex	r3, [r3]
 80128ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80128b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128b2:	f023 0301 	bic.w	r3, r3, #1
 80128b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	3314      	adds	r3, #20
 80128c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80128c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80128c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80128cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128d0:	e841 2300 	strex	r3, r2, [r1]
 80128d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80128d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d1e1      	bne.n	80128a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	3314      	adds	r3, #20
 80128e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80128e6:	e853 3f00 	ldrex	r3, [r3]
 80128ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80128ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80128ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	3314      	adds	r3, #20
 80128fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012900:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012902:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012904:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012906:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012908:	e841 2300 	strex	r3, r2, [r1]
 801290c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801290e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012910:	2b00      	cmp	r3, #0
 8012912:	d1e3      	bne.n	80128dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2220      	movs	r2, #32
 8012918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	330c      	adds	r3, #12
 8012928:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801292a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801292c:	e853 3f00 	ldrex	r3, [r3]
 8012930:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012934:	f023 0310 	bic.w	r3, r3, #16
 8012938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	330c      	adds	r3, #12
 8012942:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8012946:	65ba      	str	r2, [r7, #88]	; 0x58
 8012948:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801294a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801294c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801294e:	e841 2300 	strex	r3, r2, [r1]
 8012952:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1e3      	bne.n	8012922 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801295e:	4618      	mov	r0, r3
 8012960:	f7fe fe0f 	bl	8011582 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2202      	movs	r2, #2
 8012968:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012972:	b29b      	uxth	r3, r3
 8012974:	1ad3      	subs	r3, r2, r3
 8012976:	b29b      	uxth	r3, r3
 8012978:	4619      	mov	r1, r3
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 f8b6 	bl	8012aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8012980:	e09c      	b.n	8012abc <HAL_UART_IRQHandler+0x518>
 8012982:	bf00      	nop
 8012984:	08012d15 	.word	0x08012d15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012990:	b29b      	uxth	r3, r3
 8012992:	1ad3      	subs	r3, r2, r3
 8012994:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801299c:	b29b      	uxth	r3, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f000 808e 	beq.w	8012ac0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80129a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	f000 8089 	beq.w	8012ac0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	330c      	adds	r3, #12
 80129b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b8:	e853 3f00 	ldrex	r3, [r3]
 80129bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80129c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	330c      	adds	r3, #12
 80129ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80129d2:	647a      	str	r2, [r7, #68]	; 0x44
 80129d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129da:	e841 2300 	strex	r3, r2, [r1]
 80129de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1e3      	bne.n	80129ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	3314      	adds	r3, #20
 80129ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f0:	e853 3f00 	ldrex	r3, [r3]
 80129f4:	623b      	str	r3, [r7, #32]
   return(result);
 80129f6:	6a3b      	ldr	r3, [r7, #32]
 80129f8:	f023 0301 	bic.w	r3, r3, #1
 80129fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	3314      	adds	r3, #20
 8012a06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012a0a:	633a      	str	r2, [r7, #48]	; 0x30
 8012a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a12:	e841 2300 	strex	r3, r2, [r1]
 8012a16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d1e3      	bne.n	80129e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	2220      	movs	r2, #32
 8012a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	330c      	adds	r3, #12
 8012a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	e853 3f00 	ldrex	r3, [r3]
 8012a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	f023 0310 	bic.w	r3, r3, #16
 8012a42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	330c      	adds	r3, #12
 8012a4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8012a50:	61fa      	str	r2, [r7, #28]
 8012a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a54:	69b9      	ldr	r1, [r7, #24]
 8012a56:	69fa      	ldr	r2, [r7, #28]
 8012a58:	e841 2300 	strex	r3, r2, [r1]
 8012a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d1e3      	bne.n	8012a2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2202      	movs	r2, #2
 8012a68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012a6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012a6e:	4619      	mov	r1, r3
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f000 f83b 	bl	8012aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8012a76:	e023      	b.n	8012ac0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d009      	beq.n	8012a98 <HAL_UART_IRQHandler+0x4f4>
 8012a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d003      	beq.n	8012a98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f000 f953 	bl	8012d3c <UART_Transmit_IT>
    return;
 8012a96:	e014      	b.n	8012ac2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d00e      	beq.n	8012ac2 <HAL_UART_IRQHandler+0x51e>
 8012aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d008      	beq.n	8012ac2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f000 f992 	bl	8012dda <UART_EndTransmit_IT>
    return;
 8012ab6:	e004      	b.n	8012ac2 <HAL_UART_IRQHandler+0x51e>
    return;
 8012ab8:	bf00      	nop
 8012aba:	e002      	b.n	8012ac2 <HAL_UART_IRQHandler+0x51e>
      return;
 8012abc:	bf00      	nop
 8012abe:	e000      	b.n	8012ac2 <HAL_UART_IRQHandler+0x51e>
      return;
 8012ac0:	bf00      	nop
  }
}
 8012ac2:	37e8      	adds	r7, #232	; 0xe8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8012ad0:	bf00      	nop
 8012ad2:	370c      	adds	r7, #12
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bc80      	pop	{r7}
 8012ad8:	4770      	bx	lr

08012ada <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012ada:	b480      	push	{r7}
 8012adc:	b083      	sub	sp, #12
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8012ae2:	bf00      	nop
 8012ae4:	370c      	adds	r7, #12
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bc80      	pop	{r7}
 8012aea:	4770      	bx	lr

08012aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	460b      	mov	r3, r1
 8012af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012af8:	bf00      	nop
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bc80      	pop	{r7}
 8012b00:	4770      	bx	lr

08012b02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8012b02:	b580      	push	{r7, lr}
 8012b04:	b090      	sub	sp, #64	; 0x40
 8012b06:	af00      	add	r7, sp, #0
 8012b08:	60f8      	str	r0, [r7, #12]
 8012b0a:	60b9      	str	r1, [r7, #8]
 8012b0c:	603b      	str	r3, [r7, #0]
 8012b0e:	4613      	mov	r3, r2
 8012b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b12:	e050      	b.n	8012bb6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b1a:	d04c      	beq.n	8012bb6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8012b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d007      	beq.n	8012b32 <UART_WaitOnFlagUntilTimeout+0x30>
 8012b22:	f7fe fbf3 	bl	801130c <HAL_GetTick>
 8012b26:	4602      	mov	r2, r0
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	1ad3      	subs	r3, r2, r3
 8012b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d241      	bcs.n	8012bb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	330c      	adds	r3, #12
 8012b38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3c:	e853 3f00 	ldrex	r3, [r3]
 8012b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	330c      	adds	r3, #12
 8012b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b52:	637a      	str	r2, [r7, #52]	; 0x34
 8012b54:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b5a:	e841 2300 	strex	r3, r2, [r1]
 8012b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d1e5      	bne.n	8012b32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	3314      	adds	r3, #20
 8012b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	e853 3f00 	ldrex	r3, [r3]
 8012b74:	613b      	str	r3, [r7, #16]
   return(result);
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	f023 0301 	bic.w	r3, r3, #1
 8012b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	3314      	adds	r3, #20
 8012b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b86:	623a      	str	r2, [r7, #32]
 8012b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b8a:	69f9      	ldr	r1, [r7, #28]
 8012b8c:	6a3a      	ldr	r2, [r7, #32]
 8012b8e:	e841 2300 	strex	r3, r2, [r1]
 8012b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8012b94:	69bb      	ldr	r3, [r7, #24]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d1e5      	bne.n	8012b66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2220      	movs	r2, #32
 8012b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	2220      	movs	r2, #32
 8012ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2200      	movs	r2, #0
 8012bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8012bb2:	2303      	movs	r3, #3
 8012bb4:	e00f      	b.n	8012bd6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	681a      	ldr	r2, [r3, #0]
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	4013      	ands	r3, r2
 8012bc0:	68ba      	ldr	r2, [r7, #8]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	bf0c      	ite	eq
 8012bc6:	2301      	moveq	r3, #1
 8012bc8:	2300      	movne	r3, #0
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	461a      	mov	r2, r3
 8012bce:	79fb      	ldrb	r3, [r7, #7]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d09f      	beq.n	8012b14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012bd4:	2300      	movs	r3, #0
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3740      	adds	r7, #64	; 0x40
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012bde:	b480      	push	{r7}
 8012be0:	b085      	sub	sp, #20
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	60f8      	str	r0, [r7, #12]
 8012be6:	60b9      	str	r1, [r7, #8]
 8012be8:	4613      	mov	r3, r2
 8012bea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	68ba      	ldr	r2, [r7, #8]
 8012bf0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	88fa      	ldrh	r2, [r7, #6]
 8012bf6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	88fa      	ldrh	r2, [r7, #6]
 8012bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	2200      	movs	r2, #0
 8012c02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2222      	movs	r2, #34	; 0x22
 8012c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	691b      	ldr	r3, [r3, #16]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d007      	beq.n	8012c24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	68da      	ldr	r2, [r3, #12]
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	695a      	ldr	r2, [r3, #20]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	f042 0201 	orr.w	r2, r2, #1
 8012c32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	68da      	ldr	r2, [r3, #12]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f042 0220 	orr.w	r2, r2, #32
 8012c42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012c44:	2300      	movs	r3, #0
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3714      	adds	r7, #20
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bc80      	pop	{r7}
 8012c4e:	4770      	bx	lr

08012c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012c50:	b480      	push	{r7}
 8012c52:	b095      	sub	sp, #84	; 0x54
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	330c      	adds	r3, #12
 8012c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c62:	e853 3f00 	ldrex	r3, [r3]
 8012c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	330c      	adds	r3, #12
 8012c76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c78:	643a      	str	r2, [r7, #64]	; 0x40
 8012c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c80:	e841 2300 	strex	r3, r2, [r1]
 8012c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d1e5      	bne.n	8012c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	3314      	adds	r3, #20
 8012c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c94:	6a3b      	ldr	r3, [r7, #32]
 8012c96:	e853 3f00 	ldrex	r3, [r3]
 8012c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	f023 0301 	bic.w	r3, r3, #1
 8012ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	3314      	adds	r3, #20
 8012caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cb4:	e841 2300 	strex	r3, r2, [r1]
 8012cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d1e5      	bne.n	8012c8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cc4:	2b01      	cmp	r3, #1
 8012cc6:	d119      	bne.n	8012cfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	330c      	adds	r3, #12
 8012cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	e853 3f00 	ldrex	r3, [r3]
 8012cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	f023 0310 	bic.w	r3, r3, #16
 8012cde:	647b      	str	r3, [r7, #68]	; 0x44
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	330c      	adds	r3, #12
 8012ce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ce8:	61ba      	str	r2, [r7, #24]
 8012cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cec:	6979      	ldr	r1, [r7, #20]
 8012cee:	69ba      	ldr	r2, [r7, #24]
 8012cf0:	e841 2300 	strex	r3, r2, [r1]
 8012cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d1e5      	bne.n	8012cc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2220      	movs	r2, #32
 8012d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2200      	movs	r2, #0
 8012d08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8012d0a:	bf00      	nop
 8012d0c:	3754      	adds	r7, #84	; 0x54
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bc80      	pop	{r7}
 8012d12:	4770      	bx	lr

08012d14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b084      	sub	sp, #16
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	2200      	movs	r2, #0
 8012d26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012d2e:	68f8      	ldr	r0, [r7, #12]
 8012d30:	f7ff fed3 	bl	8012ada <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012d34:	bf00      	nop
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b085      	sub	sp, #20
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	2b21      	cmp	r3, #33	; 0x21
 8012d4e:	d13e      	bne.n	8012dce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d58:	d114      	bne.n	8012d84 <UART_Transmit_IT+0x48>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	691b      	ldr	r3, [r3, #16]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d110      	bne.n	8012d84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6a1b      	ldr	r3, [r3, #32]
 8012d66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	881b      	ldrh	r3, [r3, #0]
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012d76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6a1b      	ldr	r3, [r3, #32]
 8012d7c:	1c9a      	adds	r2, r3, #2
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	621a      	str	r2, [r3, #32]
 8012d82:	e008      	b.n	8012d96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6a1b      	ldr	r3, [r3, #32]
 8012d88:	1c59      	adds	r1, r3, #1
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	6211      	str	r1, [r2, #32]
 8012d8e:	781a      	ldrb	r2, [r3, #0]
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	3b01      	subs	r3, #1
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	687a      	ldr	r2, [r7, #4]
 8012da2:	4619      	mov	r1, r3
 8012da4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d10f      	bne.n	8012dca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	68da      	ldr	r2, [r3, #12]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012db8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	68da      	ldr	r2, [r3, #12]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012dc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	e000      	b.n	8012dd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8012dce:	2302      	movs	r3, #2
  }
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3714      	adds	r7, #20
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bc80      	pop	{r7}
 8012dd8:	4770      	bx	lr

08012dda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012dda:	b580      	push	{r7, lr}
 8012ddc:	b082      	sub	sp, #8
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	68da      	ldr	r2, [r3, #12]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012df0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2220      	movs	r2, #32
 8012df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f7ff fe64 	bl	8012ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b08c      	sub	sp, #48	; 0x30
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	2b22      	cmp	r3, #34	; 0x22
 8012e1c:	f040 80ae 	bne.w	8012f7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	689b      	ldr	r3, [r3, #8]
 8012e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e28:	d117      	bne.n	8012e5a <UART_Receive_IT+0x50>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	691b      	ldr	r3, [r3, #16]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d113      	bne.n	8012e5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8012e32:	2300      	movs	r3, #0
 8012e34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e48:	b29a      	uxth	r2, r3
 8012e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e52:	1c9a      	adds	r2, r3, #2
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	629a      	str	r2, [r3, #40]	; 0x28
 8012e58:	e026      	b.n	8012ea8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8012e60:	2300      	movs	r3, #0
 8012e62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	689b      	ldr	r3, [r3, #8]
 8012e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e6c:	d007      	beq.n	8012e7e <UART_Receive_IT+0x74>
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	689b      	ldr	r3, [r3, #8]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d10a      	bne.n	8012e8c <UART_Receive_IT+0x82>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	691b      	ldr	r3, [r3, #16]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d106      	bne.n	8012e8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	b2da      	uxtb	r2, r3
 8012e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e88:	701a      	strb	r2, [r3, #0]
 8012e8a:	e008      	b.n	8012e9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e98:	b2da      	uxtb	r2, r3
 8012e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ea2:	1c5a      	adds	r2, r3, #1
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	3b01      	subs	r3, #1
 8012eb0:	b29b      	uxth	r3, r3
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d15d      	bne.n	8012f78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	68da      	ldr	r2, [r3, #12]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	f022 0220 	bic.w	r2, r2, #32
 8012eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	68da      	ldr	r2, [r3, #12]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	695a      	ldr	r2, [r3, #20]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f022 0201 	bic.w	r2, r2, #1
 8012eea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2220      	movs	r2, #32
 8012ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d135      	bne.n	8012f6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2200      	movs	r2, #0
 8012f06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	330c      	adds	r3, #12
 8012f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	e853 3f00 	ldrex	r3, [r3]
 8012f16:	613b      	str	r3, [r7, #16]
   return(result);
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	f023 0310 	bic.w	r3, r3, #16
 8012f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	330c      	adds	r3, #12
 8012f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f28:	623a      	str	r2, [r7, #32]
 8012f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f2c:	69f9      	ldr	r1, [r7, #28]
 8012f2e:	6a3a      	ldr	r2, [r7, #32]
 8012f30:	e841 2300 	strex	r3, r2, [r1]
 8012f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d1e5      	bne.n	8012f08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	f003 0310 	and.w	r3, r3, #16
 8012f46:	2b10      	cmp	r3, #16
 8012f48:	d10a      	bne.n	8012f60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	60fb      	str	r3, [r7, #12]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	60fb      	str	r3, [r7, #12]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	60fb      	str	r3, [r7, #12]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012f64:	4619      	mov	r1, r3
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f7ff fdc0 	bl	8012aec <HAL_UARTEx_RxEventCallback>
 8012f6c:	e002      	b.n	8012f74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f7fe f930 	bl	80111d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8012f74:	2300      	movs	r3, #0
 8012f76:	e002      	b.n	8012f7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	e000      	b.n	8012f7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8012f7c:	2302      	movs	r3, #2
  }
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3730      	adds	r7, #48	; 0x30
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}
	...

08012f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	691b      	ldr	r3, [r3, #16]
 8012f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	68da      	ldr	r2, [r3, #12]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	430a      	orrs	r2, r1
 8012fa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	689a      	ldr	r2, [r3, #8]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	691b      	ldr	r3, [r3, #16]
 8012fae:	431a      	orrs	r2, r3
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	695b      	ldr	r3, [r3, #20]
 8012fb4:	4313      	orrs	r3, r2
 8012fb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	68db      	ldr	r3, [r3, #12]
 8012fbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8012fc2:	f023 030c 	bic.w	r3, r3, #12
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	6812      	ldr	r2, [r2, #0]
 8012fca:	68b9      	ldr	r1, [r7, #8]
 8012fcc:	430b      	orrs	r3, r1
 8012fce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	695b      	ldr	r3, [r3, #20]
 8012fd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	699a      	ldr	r2, [r3, #24]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	430a      	orrs	r2, r1
 8012fe4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	4a2c      	ldr	r2, [pc, #176]	; (801309c <UART_SetConfig+0x114>)
 8012fec:	4293      	cmp	r3, r2
 8012fee:	d103      	bne.n	8012ff8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8012ff0:	f7ff f9ae 	bl	8012350 <HAL_RCC_GetPCLK2Freq>
 8012ff4:	60f8      	str	r0, [r7, #12]
 8012ff6:	e002      	b.n	8012ffe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8012ff8:	f7ff f996 	bl	8012328 <HAL_RCC_GetPCLK1Freq>
 8012ffc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012ffe:	68fa      	ldr	r2, [r7, #12]
 8013000:	4613      	mov	r3, r2
 8013002:	009b      	lsls	r3, r3, #2
 8013004:	4413      	add	r3, r2
 8013006:	009a      	lsls	r2, r3, #2
 8013008:	441a      	add	r2, r3
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	009b      	lsls	r3, r3, #2
 8013010:	fbb2 f3f3 	udiv	r3, r2, r3
 8013014:	4a22      	ldr	r2, [pc, #136]	; (80130a0 <UART_SetConfig+0x118>)
 8013016:	fba2 2303 	umull	r2, r3, r2, r3
 801301a:	095b      	lsrs	r3, r3, #5
 801301c:	0119      	lsls	r1, r3, #4
 801301e:	68fa      	ldr	r2, [r7, #12]
 8013020:	4613      	mov	r3, r2
 8013022:	009b      	lsls	r3, r3, #2
 8013024:	4413      	add	r3, r2
 8013026:	009a      	lsls	r2, r3, #2
 8013028:	441a      	add	r2, r3
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	009b      	lsls	r3, r3, #2
 8013030:	fbb2 f2f3 	udiv	r2, r2, r3
 8013034:	4b1a      	ldr	r3, [pc, #104]	; (80130a0 <UART_SetConfig+0x118>)
 8013036:	fba3 0302 	umull	r0, r3, r3, r2
 801303a:	095b      	lsrs	r3, r3, #5
 801303c:	2064      	movs	r0, #100	; 0x64
 801303e:	fb00 f303 	mul.w	r3, r0, r3
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	011b      	lsls	r3, r3, #4
 8013046:	3332      	adds	r3, #50	; 0x32
 8013048:	4a15      	ldr	r2, [pc, #84]	; (80130a0 <UART_SetConfig+0x118>)
 801304a:	fba2 2303 	umull	r2, r3, r2, r3
 801304e:	095b      	lsrs	r3, r3, #5
 8013050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013054:	4419      	add	r1, r3
 8013056:	68fa      	ldr	r2, [r7, #12]
 8013058:	4613      	mov	r3, r2
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	4413      	add	r3, r2
 801305e:	009a      	lsls	r2, r3, #2
 8013060:	441a      	add	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	009b      	lsls	r3, r3, #2
 8013068:	fbb2 f2f3 	udiv	r2, r2, r3
 801306c:	4b0c      	ldr	r3, [pc, #48]	; (80130a0 <UART_SetConfig+0x118>)
 801306e:	fba3 0302 	umull	r0, r3, r3, r2
 8013072:	095b      	lsrs	r3, r3, #5
 8013074:	2064      	movs	r0, #100	; 0x64
 8013076:	fb00 f303 	mul.w	r3, r0, r3
 801307a:	1ad3      	subs	r3, r2, r3
 801307c:	011b      	lsls	r3, r3, #4
 801307e:	3332      	adds	r3, #50	; 0x32
 8013080:	4a07      	ldr	r2, [pc, #28]	; (80130a0 <UART_SetConfig+0x118>)
 8013082:	fba2 2303 	umull	r2, r3, r2, r3
 8013086:	095b      	lsrs	r3, r3, #5
 8013088:	f003 020f 	and.w	r2, r3, #15
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	440a      	add	r2, r1
 8013092:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8013094:	bf00      	nop
 8013096:	3710      	adds	r7, #16
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	40013800 	.word	0x40013800
 80130a0:	51eb851f 	.word	0x51eb851f

080130a4 <__errno>:
 80130a4:	4b01      	ldr	r3, [pc, #4]	; (80130ac <__errno+0x8>)
 80130a6:	6818      	ldr	r0, [r3, #0]
 80130a8:	4770      	bx	lr
 80130aa:	bf00      	nop
 80130ac:	2000000c 	.word	0x2000000c

080130b0 <__libc_init_array>:
 80130b0:	b570      	push	{r4, r5, r6, lr}
 80130b2:	2600      	movs	r6, #0
 80130b4:	4d0c      	ldr	r5, [pc, #48]	; (80130e8 <__libc_init_array+0x38>)
 80130b6:	4c0d      	ldr	r4, [pc, #52]	; (80130ec <__libc_init_array+0x3c>)
 80130b8:	1b64      	subs	r4, r4, r5
 80130ba:	10a4      	asrs	r4, r4, #2
 80130bc:	42a6      	cmp	r6, r4
 80130be:	d109      	bne.n	80130d4 <__libc_init_array+0x24>
 80130c0:	f004 fcc6 	bl	8017a50 <_init>
 80130c4:	2600      	movs	r6, #0
 80130c6:	4d0a      	ldr	r5, [pc, #40]	; (80130f0 <__libc_init_array+0x40>)
 80130c8:	4c0a      	ldr	r4, [pc, #40]	; (80130f4 <__libc_init_array+0x44>)
 80130ca:	1b64      	subs	r4, r4, r5
 80130cc:	10a4      	asrs	r4, r4, #2
 80130ce:	42a6      	cmp	r6, r4
 80130d0:	d105      	bne.n	80130de <__libc_init_array+0x2e>
 80130d2:	bd70      	pop	{r4, r5, r6, pc}
 80130d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80130d8:	4798      	blx	r3
 80130da:	3601      	adds	r6, #1
 80130dc:	e7ee      	b.n	80130bc <__libc_init_array+0xc>
 80130de:	f855 3b04 	ldr.w	r3, [r5], #4
 80130e2:	4798      	blx	r3
 80130e4:	3601      	adds	r6, #1
 80130e6:	e7f2      	b.n	80130ce <__libc_init_array+0x1e>
 80130e8:	08017f4c 	.word	0x08017f4c
 80130ec:	08017f4c 	.word	0x08017f4c
 80130f0:	08017f4c 	.word	0x08017f4c
 80130f4:	08017f50 	.word	0x08017f50

080130f8 <memset>:
 80130f8:	4603      	mov	r3, r0
 80130fa:	4402      	add	r2, r0
 80130fc:	4293      	cmp	r3, r2
 80130fe:	d100      	bne.n	8013102 <memset+0xa>
 8013100:	4770      	bx	lr
 8013102:	f803 1b01 	strb.w	r1, [r3], #1
 8013106:	e7f9      	b.n	80130fc <memset+0x4>

08013108 <__cvt>:
 8013108:	2b00      	cmp	r3, #0
 801310a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801310e:	461f      	mov	r7, r3
 8013110:	bfbb      	ittet	lt
 8013112:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8013116:	461f      	movlt	r7, r3
 8013118:	2300      	movge	r3, #0
 801311a:	232d      	movlt	r3, #45	; 0x2d
 801311c:	b088      	sub	sp, #32
 801311e:	4614      	mov	r4, r2
 8013120:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013122:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8013124:	7013      	strb	r3, [r2, #0]
 8013126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013128:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801312c:	f023 0820 	bic.w	r8, r3, #32
 8013130:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013134:	d005      	beq.n	8013142 <__cvt+0x3a>
 8013136:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801313a:	d100      	bne.n	801313e <__cvt+0x36>
 801313c:	3501      	adds	r5, #1
 801313e:	2302      	movs	r3, #2
 8013140:	e000      	b.n	8013144 <__cvt+0x3c>
 8013142:	2303      	movs	r3, #3
 8013144:	aa07      	add	r2, sp, #28
 8013146:	9204      	str	r2, [sp, #16]
 8013148:	aa06      	add	r2, sp, #24
 801314a:	e9cd a202 	strd	sl, r2, [sp, #8]
 801314e:	e9cd 3500 	strd	r3, r5, [sp]
 8013152:	4622      	mov	r2, r4
 8013154:	463b      	mov	r3, r7
 8013156:	f001 febb 	bl	8014ed0 <_dtoa_r>
 801315a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801315e:	4606      	mov	r6, r0
 8013160:	d102      	bne.n	8013168 <__cvt+0x60>
 8013162:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013164:	07db      	lsls	r3, r3, #31
 8013166:	d522      	bpl.n	80131ae <__cvt+0xa6>
 8013168:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801316c:	eb06 0905 	add.w	r9, r6, r5
 8013170:	d110      	bne.n	8013194 <__cvt+0x8c>
 8013172:	7833      	ldrb	r3, [r6, #0]
 8013174:	2b30      	cmp	r3, #48	; 0x30
 8013176:	d10a      	bne.n	801318e <__cvt+0x86>
 8013178:	2200      	movs	r2, #0
 801317a:	2300      	movs	r3, #0
 801317c:	4620      	mov	r0, r4
 801317e:	4639      	mov	r1, r7
 8013180:	f7fd fc7e 	bl	8010a80 <__aeabi_dcmpeq>
 8013184:	b918      	cbnz	r0, 801318e <__cvt+0x86>
 8013186:	f1c5 0501 	rsb	r5, r5, #1
 801318a:	f8ca 5000 	str.w	r5, [sl]
 801318e:	f8da 3000 	ldr.w	r3, [sl]
 8013192:	4499      	add	r9, r3
 8013194:	2200      	movs	r2, #0
 8013196:	2300      	movs	r3, #0
 8013198:	4620      	mov	r0, r4
 801319a:	4639      	mov	r1, r7
 801319c:	f7fd fc70 	bl	8010a80 <__aeabi_dcmpeq>
 80131a0:	b108      	cbz	r0, 80131a6 <__cvt+0x9e>
 80131a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80131a6:	2230      	movs	r2, #48	; 0x30
 80131a8:	9b07      	ldr	r3, [sp, #28]
 80131aa:	454b      	cmp	r3, r9
 80131ac:	d307      	bcc.n	80131be <__cvt+0xb6>
 80131ae:	4630      	mov	r0, r6
 80131b0:	9b07      	ldr	r3, [sp, #28]
 80131b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80131b4:	1b9b      	subs	r3, r3, r6
 80131b6:	6013      	str	r3, [r2, #0]
 80131b8:	b008      	add	sp, #32
 80131ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131be:	1c59      	adds	r1, r3, #1
 80131c0:	9107      	str	r1, [sp, #28]
 80131c2:	701a      	strb	r2, [r3, #0]
 80131c4:	e7f0      	b.n	80131a8 <__cvt+0xa0>

080131c6 <__exponent>:
 80131c6:	4603      	mov	r3, r0
 80131c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131ca:	2900      	cmp	r1, #0
 80131cc:	f803 2b02 	strb.w	r2, [r3], #2
 80131d0:	bfb6      	itet	lt
 80131d2:	222d      	movlt	r2, #45	; 0x2d
 80131d4:	222b      	movge	r2, #43	; 0x2b
 80131d6:	4249      	neglt	r1, r1
 80131d8:	2909      	cmp	r1, #9
 80131da:	7042      	strb	r2, [r0, #1]
 80131dc:	dd2b      	ble.n	8013236 <__exponent+0x70>
 80131de:	f10d 0407 	add.w	r4, sp, #7
 80131e2:	46a4      	mov	ip, r4
 80131e4:	270a      	movs	r7, #10
 80131e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80131ea:	460a      	mov	r2, r1
 80131ec:	46a6      	mov	lr, r4
 80131ee:	fb07 1516 	mls	r5, r7, r6, r1
 80131f2:	2a63      	cmp	r2, #99	; 0x63
 80131f4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80131f8:	4631      	mov	r1, r6
 80131fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80131fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013202:	dcf0      	bgt.n	80131e6 <__exponent+0x20>
 8013204:	3130      	adds	r1, #48	; 0x30
 8013206:	f1ae 0502 	sub.w	r5, lr, #2
 801320a:	f804 1c01 	strb.w	r1, [r4, #-1]
 801320e:	4629      	mov	r1, r5
 8013210:	1c44      	adds	r4, r0, #1
 8013212:	4561      	cmp	r1, ip
 8013214:	d30a      	bcc.n	801322c <__exponent+0x66>
 8013216:	f10d 0209 	add.w	r2, sp, #9
 801321a:	eba2 020e 	sub.w	r2, r2, lr
 801321e:	4565      	cmp	r5, ip
 8013220:	bf88      	it	hi
 8013222:	2200      	movhi	r2, #0
 8013224:	4413      	add	r3, r2
 8013226:	1a18      	subs	r0, r3, r0
 8013228:	b003      	add	sp, #12
 801322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801322c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013230:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013234:	e7ed      	b.n	8013212 <__exponent+0x4c>
 8013236:	2330      	movs	r3, #48	; 0x30
 8013238:	3130      	adds	r1, #48	; 0x30
 801323a:	7083      	strb	r3, [r0, #2]
 801323c:	70c1      	strb	r1, [r0, #3]
 801323e:	1d03      	adds	r3, r0, #4
 8013240:	e7f1      	b.n	8013226 <__exponent+0x60>
	...

08013244 <_printf_float>:
 8013244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013248:	b091      	sub	sp, #68	; 0x44
 801324a:	460c      	mov	r4, r1
 801324c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8013250:	4616      	mov	r6, r2
 8013252:	461f      	mov	r7, r3
 8013254:	4605      	mov	r5, r0
 8013256:	f003 f943 	bl	80164e0 <_localeconv_r>
 801325a:	6803      	ldr	r3, [r0, #0]
 801325c:	4618      	mov	r0, r3
 801325e:	9309      	str	r3, [sp, #36]	; 0x24
 8013260:	f7fc ffe2 	bl	8010228 <strlen>
 8013264:	2300      	movs	r3, #0
 8013266:	930e      	str	r3, [sp, #56]	; 0x38
 8013268:	f8d8 3000 	ldr.w	r3, [r8]
 801326c:	900a      	str	r0, [sp, #40]	; 0x28
 801326e:	3307      	adds	r3, #7
 8013270:	f023 0307 	bic.w	r3, r3, #7
 8013274:	f103 0208 	add.w	r2, r3, #8
 8013278:	f894 9018 	ldrb.w	r9, [r4, #24]
 801327c:	f8d4 b000 	ldr.w	fp, [r4]
 8013280:	f8c8 2000 	str.w	r2, [r8]
 8013284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013288:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801328c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8013290:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8013294:	930b      	str	r3, [sp, #44]	; 0x2c
 8013296:	f04f 32ff 	mov.w	r2, #4294967295
 801329a:	4640      	mov	r0, r8
 801329c:	4b9c      	ldr	r3, [pc, #624]	; (8013510 <_printf_float+0x2cc>)
 801329e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80132a0:	f7fd fc20 	bl	8010ae4 <__aeabi_dcmpun>
 80132a4:	bb70      	cbnz	r0, 8013304 <_printf_float+0xc0>
 80132a6:	f04f 32ff 	mov.w	r2, #4294967295
 80132aa:	4640      	mov	r0, r8
 80132ac:	4b98      	ldr	r3, [pc, #608]	; (8013510 <_printf_float+0x2cc>)
 80132ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80132b0:	f7fd fbfa 	bl	8010aa8 <__aeabi_dcmple>
 80132b4:	bb30      	cbnz	r0, 8013304 <_printf_float+0xc0>
 80132b6:	2200      	movs	r2, #0
 80132b8:	2300      	movs	r3, #0
 80132ba:	4640      	mov	r0, r8
 80132bc:	4651      	mov	r1, sl
 80132be:	f7fd fbe9 	bl	8010a94 <__aeabi_dcmplt>
 80132c2:	b110      	cbz	r0, 80132ca <_printf_float+0x86>
 80132c4:	232d      	movs	r3, #45	; 0x2d
 80132c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132ca:	4b92      	ldr	r3, [pc, #584]	; (8013514 <_printf_float+0x2d0>)
 80132cc:	4892      	ldr	r0, [pc, #584]	; (8013518 <_printf_float+0x2d4>)
 80132ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80132d2:	bf94      	ite	ls
 80132d4:	4698      	movls	r8, r3
 80132d6:	4680      	movhi	r8, r0
 80132d8:	2303      	movs	r3, #3
 80132da:	f04f 0a00 	mov.w	sl, #0
 80132de:	6123      	str	r3, [r4, #16]
 80132e0:	f02b 0304 	bic.w	r3, fp, #4
 80132e4:	6023      	str	r3, [r4, #0]
 80132e6:	4633      	mov	r3, r6
 80132e8:	4621      	mov	r1, r4
 80132ea:	4628      	mov	r0, r5
 80132ec:	9700      	str	r7, [sp, #0]
 80132ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80132f0:	f000 f9d4 	bl	801369c <_printf_common>
 80132f4:	3001      	adds	r0, #1
 80132f6:	f040 8090 	bne.w	801341a <_printf_float+0x1d6>
 80132fa:	f04f 30ff 	mov.w	r0, #4294967295
 80132fe:	b011      	add	sp, #68	; 0x44
 8013300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013304:	4642      	mov	r2, r8
 8013306:	4653      	mov	r3, sl
 8013308:	4640      	mov	r0, r8
 801330a:	4651      	mov	r1, sl
 801330c:	f7fd fbea 	bl	8010ae4 <__aeabi_dcmpun>
 8013310:	b148      	cbz	r0, 8013326 <_printf_float+0xe2>
 8013312:	f1ba 0f00 	cmp.w	sl, #0
 8013316:	bfb8      	it	lt
 8013318:	232d      	movlt	r3, #45	; 0x2d
 801331a:	4880      	ldr	r0, [pc, #512]	; (801351c <_printf_float+0x2d8>)
 801331c:	bfb8      	it	lt
 801331e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013322:	4b7f      	ldr	r3, [pc, #508]	; (8013520 <_printf_float+0x2dc>)
 8013324:	e7d3      	b.n	80132ce <_printf_float+0x8a>
 8013326:	6863      	ldr	r3, [r4, #4]
 8013328:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801332c:	1c5a      	adds	r2, r3, #1
 801332e:	d142      	bne.n	80133b6 <_printf_float+0x172>
 8013330:	2306      	movs	r3, #6
 8013332:	6063      	str	r3, [r4, #4]
 8013334:	2200      	movs	r2, #0
 8013336:	9206      	str	r2, [sp, #24]
 8013338:	aa0e      	add	r2, sp, #56	; 0x38
 801333a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 801333e:	aa0d      	add	r2, sp, #52	; 0x34
 8013340:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8013344:	9203      	str	r2, [sp, #12]
 8013346:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801334a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801334e:	6023      	str	r3, [r4, #0]
 8013350:	6863      	ldr	r3, [r4, #4]
 8013352:	4642      	mov	r2, r8
 8013354:	9300      	str	r3, [sp, #0]
 8013356:	4628      	mov	r0, r5
 8013358:	4653      	mov	r3, sl
 801335a:	910b      	str	r1, [sp, #44]	; 0x2c
 801335c:	f7ff fed4 	bl	8013108 <__cvt>
 8013360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013362:	4680      	mov	r8, r0
 8013364:	2947      	cmp	r1, #71	; 0x47
 8013366:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013368:	d108      	bne.n	801337c <_printf_float+0x138>
 801336a:	1cc8      	adds	r0, r1, #3
 801336c:	db02      	blt.n	8013374 <_printf_float+0x130>
 801336e:	6863      	ldr	r3, [r4, #4]
 8013370:	4299      	cmp	r1, r3
 8013372:	dd40      	ble.n	80133f6 <_printf_float+0x1b2>
 8013374:	f1a9 0902 	sub.w	r9, r9, #2
 8013378:	fa5f f989 	uxtb.w	r9, r9
 801337c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013380:	d81f      	bhi.n	80133c2 <_printf_float+0x17e>
 8013382:	464a      	mov	r2, r9
 8013384:	3901      	subs	r1, #1
 8013386:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801338a:	910d      	str	r1, [sp, #52]	; 0x34
 801338c:	f7ff ff1b 	bl	80131c6 <__exponent>
 8013390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013392:	4682      	mov	sl, r0
 8013394:	1813      	adds	r3, r2, r0
 8013396:	2a01      	cmp	r2, #1
 8013398:	6123      	str	r3, [r4, #16]
 801339a:	dc02      	bgt.n	80133a2 <_printf_float+0x15e>
 801339c:	6822      	ldr	r2, [r4, #0]
 801339e:	07d2      	lsls	r2, r2, #31
 80133a0:	d501      	bpl.n	80133a6 <_printf_float+0x162>
 80133a2:	3301      	adds	r3, #1
 80133a4:	6123      	str	r3, [r4, #16]
 80133a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d09b      	beq.n	80132e6 <_printf_float+0xa2>
 80133ae:	232d      	movs	r3, #45	; 0x2d
 80133b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133b4:	e797      	b.n	80132e6 <_printf_float+0xa2>
 80133b6:	2947      	cmp	r1, #71	; 0x47
 80133b8:	d1bc      	bne.n	8013334 <_printf_float+0xf0>
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d1ba      	bne.n	8013334 <_printf_float+0xf0>
 80133be:	2301      	movs	r3, #1
 80133c0:	e7b7      	b.n	8013332 <_printf_float+0xee>
 80133c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80133c6:	d118      	bne.n	80133fa <_printf_float+0x1b6>
 80133c8:	2900      	cmp	r1, #0
 80133ca:	6863      	ldr	r3, [r4, #4]
 80133cc:	dd0b      	ble.n	80133e6 <_printf_float+0x1a2>
 80133ce:	6121      	str	r1, [r4, #16]
 80133d0:	b913      	cbnz	r3, 80133d8 <_printf_float+0x194>
 80133d2:	6822      	ldr	r2, [r4, #0]
 80133d4:	07d0      	lsls	r0, r2, #31
 80133d6:	d502      	bpl.n	80133de <_printf_float+0x19a>
 80133d8:	3301      	adds	r3, #1
 80133da:	440b      	add	r3, r1
 80133dc:	6123      	str	r3, [r4, #16]
 80133de:	f04f 0a00 	mov.w	sl, #0
 80133e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80133e4:	e7df      	b.n	80133a6 <_printf_float+0x162>
 80133e6:	b913      	cbnz	r3, 80133ee <_printf_float+0x1aa>
 80133e8:	6822      	ldr	r2, [r4, #0]
 80133ea:	07d2      	lsls	r2, r2, #31
 80133ec:	d501      	bpl.n	80133f2 <_printf_float+0x1ae>
 80133ee:	3302      	adds	r3, #2
 80133f0:	e7f4      	b.n	80133dc <_printf_float+0x198>
 80133f2:	2301      	movs	r3, #1
 80133f4:	e7f2      	b.n	80133dc <_printf_float+0x198>
 80133f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80133fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133fc:	4299      	cmp	r1, r3
 80133fe:	db05      	blt.n	801340c <_printf_float+0x1c8>
 8013400:	6823      	ldr	r3, [r4, #0]
 8013402:	6121      	str	r1, [r4, #16]
 8013404:	07d8      	lsls	r0, r3, #31
 8013406:	d5ea      	bpl.n	80133de <_printf_float+0x19a>
 8013408:	1c4b      	adds	r3, r1, #1
 801340a:	e7e7      	b.n	80133dc <_printf_float+0x198>
 801340c:	2900      	cmp	r1, #0
 801340e:	bfcc      	ite	gt
 8013410:	2201      	movgt	r2, #1
 8013412:	f1c1 0202 	rsble	r2, r1, #2
 8013416:	4413      	add	r3, r2
 8013418:	e7e0      	b.n	80133dc <_printf_float+0x198>
 801341a:	6823      	ldr	r3, [r4, #0]
 801341c:	055a      	lsls	r2, r3, #21
 801341e:	d407      	bmi.n	8013430 <_printf_float+0x1ec>
 8013420:	6923      	ldr	r3, [r4, #16]
 8013422:	4642      	mov	r2, r8
 8013424:	4631      	mov	r1, r6
 8013426:	4628      	mov	r0, r5
 8013428:	47b8      	blx	r7
 801342a:	3001      	adds	r0, #1
 801342c:	d12b      	bne.n	8013486 <_printf_float+0x242>
 801342e:	e764      	b.n	80132fa <_printf_float+0xb6>
 8013430:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013434:	f240 80dd 	bls.w	80135f2 <_printf_float+0x3ae>
 8013438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801343c:	2200      	movs	r2, #0
 801343e:	2300      	movs	r3, #0
 8013440:	f7fd fb1e 	bl	8010a80 <__aeabi_dcmpeq>
 8013444:	2800      	cmp	r0, #0
 8013446:	d033      	beq.n	80134b0 <_printf_float+0x26c>
 8013448:	2301      	movs	r3, #1
 801344a:	4631      	mov	r1, r6
 801344c:	4628      	mov	r0, r5
 801344e:	4a35      	ldr	r2, [pc, #212]	; (8013524 <_printf_float+0x2e0>)
 8013450:	47b8      	blx	r7
 8013452:	3001      	adds	r0, #1
 8013454:	f43f af51 	beq.w	80132fa <_printf_float+0xb6>
 8013458:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801345c:	429a      	cmp	r2, r3
 801345e:	db02      	blt.n	8013466 <_printf_float+0x222>
 8013460:	6823      	ldr	r3, [r4, #0]
 8013462:	07d8      	lsls	r0, r3, #31
 8013464:	d50f      	bpl.n	8013486 <_printf_float+0x242>
 8013466:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801346a:	4631      	mov	r1, r6
 801346c:	4628      	mov	r0, r5
 801346e:	47b8      	blx	r7
 8013470:	3001      	adds	r0, #1
 8013472:	f43f af42 	beq.w	80132fa <_printf_float+0xb6>
 8013476:	f04f 0800 	mov.w	r8, #0
 801347a:	f104 091a 	add.w	r9, r4, #26
 801347e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013480:	3b01      	subs	r3, #1
 8013482:	4543      	cmp	r3, r8
 8013484:	dc09      	bgt.n	801349a <_printf_float+0x256>
 8013486:	6823      	ldr	r3, [r4, #0]
 8013488:	079b      	lsls	r3, r3, #30
 801348a:	f100 8102 	bmi.w	8013692 <_printf_float+0x44e>
 801348e:	68e0      	ldr	r0, [r4, #12]
 8013490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013492:	4298      	cmp	r0, r3
 8013494:	bfb8      	it	lt
 8013496:	4618      	movlt	r0, r3
 8013498:	e731      	b.n	80132fe <_printf_float+0xba>
 801349a:	2301      	movs	r3, #1
 801349c:	464a      	mov	r2, r9
 801349e:	4631      	mov	r1, r6
 80134a0:	4628      	mov	r0, r5
 80134a2:	47b8      	blx	r7
 80134a4:	3001      	adds	r0, #1
 80134a6:	f43f af28 	beq.w	80132fa <_printf_float+0xb6>
 80134aa:	f108 0801 	add.w	r8, r8, #1
 80134ae:	e7e6      	b.n	801347e <_printf_float+0x23a>
 80134b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	dc38      	bgt.n	8013528 <_printf_float+0x2e4>
 80134b6:	2301      	movs	r3, #1
 80134b8:	4631      	mov	r1, r6
 80134ba:	4628      	mov	r0, r5
 80134bc:	4a19      	ldr	r2, [pc, #100]	; (8013524 <_printf_float+0x2e0>)
 80134be:	47b8      	blx	r7
 80134c0:	3001      	adds	r0, #1
 80134c2:	f43f af1a 	beq.w	80132fa <_printf_float+0xb6>
 80134c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80134ca:	4313      	orrs	r3, r2
 80134cc:	d102      	bne.n	80134d4 <_printf_float+0x290>
 80134ce:	6823      	ldr	r3, [r4, #0]
 80134d0:	07d9      	lsls	r1, r3, #31
 80134d2:	d5d8      	bpl.n	8013486 <_printf_float+0x242>
 80134d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134d8:	4631      	mov	r1, r6
 80134da:	4628      	mov	r0, r5
 80134dc:	47b8      	blx	r7
 80134de:	3001      	adds	r0, #1
 80134e0:	f43f af0b 	beq.w	80132fa <_printf_float+0xb6>
 80134e4:	f04f 0900 	mov.w	r9, #0
 80134e8:	f104 0a1a 	add.w	sl, r4, #26
 80134ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134ee:	425b      	negs	r3, r3
 80134f0:	454b      	cmp	r3, r9
 80134f2:	dc01      	bgt.n	80134f8 <_printf_float+0x2b4>
 80134f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80134f6:	e794      	b.n	8013422 <_printf_float+0x1de>
 80134f8:	2301      	movs	r3, #1
 80134fa:	4652      	mov	r2, sl
 80134fc:	4631      	mov	r1, r6
 80134fe:	4628      	mov	r0, r5
 8013500:	47b8      	blx	r7
 8013502:	3001      	adds	r0, #1
 8013504:	f43f aef9 	beq.w	80132fa <_printf_float+0xb6>
 8013508:	f109 0901 	add.w	r9, r9, #1
 801350c:	e7ee      	b.n	80134ec <_printf_float+0x2a8>
 801350e:	bf00      	nop
 8013510:	7fefffff 	.word	0x7fefffff
 8013514:	08017aa4 	.word	0x08017aa4
 8013518:	08017aa8 	.word	0x08017aa8
 801351c:	08017ab0 	.word	0x08017ab0
 8013520:	08017aac 	.word	0x08017aac
 8013524:	08017ab4 	.word	0x08017ab4
 8013528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801352a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801352c:	429a      	cmp	r2, r3
 801352e:	bfa8      	it	ge
 8013530:	461a      	movge	r2, r3
 8013532:	2a00      	cmp	r2, #0
 8013534:	4691      	mov	r9, r2
 8013536:	dc37      	bgt.n	80135a8 <_printf_float+0x364>
 8013538:	f04f 0b00 	mov.w	fp, #0
 801353c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013540:	f104 021a 	add.w	r2, r4, #26
 8013544:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013548:	ebaa 0309 	sub.w	r3, sl, r9
 801354c:	455b      	cmp	r3, fp
 801354e:	dc33      	bgt.n	80135b8 <_printf_float+0x374>
 8013550:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013554:	429a      	cmp	r2, r3
 8013556:	db3b      	blt.n	80135d0 <_printf_float+0x38c>
 8013558:	6823      	ldr	r3, [r4, #0]
 801355a:	07da      	lsls	r2, r3, #31
 801355c:	d438      	bmi.n	80135d0 <_printf_float+0x38c>
 801355e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013560:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013562:	eba3 020a 	sub.w	r2, r3, sl
 8013566:	eba3 0901 	sub.w	r9, r3, r1
 801356a:	4591      	cmp	r9, r2
 801356c:	bfa8      	it	ge
 801356e:	4691      	movge	r9, r2
 8013570:	f1b9 0f00 	cmp.w	r9, #0
 8013574:	dc34      	bgt.n	80135e0 <_printf_float+0x39c>
 8013576:	f04f 0800 	mov.w	r8, #0
 801357a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801357e:	f104 0a1a 	add.w	sl, r4, #26
 8013582:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013586:	1a9b      	subs	r3, r3, r2
 8013588:	eba3 0309 	sub.w	r3, r3, r9
 801358c:	4543      	cmp	r3, r8
 801358e:	f77f af7a 	ble.w	8013486 <_printf_float+0x242>
 8013592:	2301      	movs	r3, #1
 8013594:	4652      	mov	r2, sl
 8013596:	4631      	mov	r1, r6
 8013598:	4628      	mov	r0, r5
 801359a:	47b8      	blx	r7
 801359c:	3001      	adds	r0, #1
 801359e:	f43f aeac 	beq.w	80132fa <_printf_float+0xb6>
 80135a2:	f108 0801 	add.w	r8, r8, #1
 80135a6:	e7ec      	b.n	8013582 <_printf_float+0x33e>
 80135a8:	4613      	mov	r3, r2
 80135aa:	4631      	mov	r1, r6
 80135ac:	4642      	mov	r2, r8
 80135ae:	4628      	mov	r0, r5
 80135b0:	47b8      	blx	r7
 80135b2:	3001      	adds	r0, #1
 80135b4:	d1c0      	bne.n	8013538 <_printf_float+0x2f4>
 80135b6:	e6a0      	b.n	80132fa <_printf_float+0xb6>
 80135b8:	2301      	movs	r3, #1
 80135ba:	4631      	mov	r1, r6
 80135bc:	4628      	mov	r0, r5
 80135be:	920b      	str	r2, [sp, #44]	; 0x2c
 80135c0:	47b8      	blx	r7
 80135c2:	3001      	adds	r0, #1
 80135c4:	f43f ae99 	beq.w	80132fa <_printf_float+0xb6>
 80135c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80135ca:	f10b 0b01 	add.w	fp, fp, #1
 80135ce:	e7b9      	b.n	8013544 <_printf_float+0x300>
 80135d0:	4631      	mov	r1, r6
 80135d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135d6:	4628      	mov	r0, r5
 80135d8:	47b8      	blx	r7
 80135da:	3001      	adds	r0, #1
 80135dc:	d1bf      	bne.n	801355e <_printf_float+0x31a>
 80135de:	e68c      	b.n	80132fa <_printf_float+0xb6>
 80135e0:	464b      	mov	r3, r9
 80135e2:	4631      	mov	r1, r6
 80135e4:	4628      	mov	r0, r5
 80135e6:	eb08 020a 	add.w	r2, r8, sl
 80135ea:	47b8      	blx	r7
 80135ec:	3001      	adds	r0, #1
 80135ee:	d1c2      	bne.n	8013576 <_printf_float+0x332>
 80135f0:	e683      	b.n	80132fa <_printf_float+0xb6>
 80135f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135f4:	2a01      	cmp	r2, #1
 80135f6:	dc01      	bgt.n	80135fc <_printf_float+0x3b8>
 80135f8:	07db      	lsls	r3, r3, #31
 80135fa:	d537      	bpl.n	801366c <_printf_float+0x428>
 80135fc:	2301      	movs	r3, #1
 80135fe:	4642      	mov	r2, r8
 8013600:	4631      	mov	r1, r6
 8013602:	4628      	mov	r0, r5
 8013604:	47b8      	blx	r7
 8013606:	3001      	adds	r0, #1
 8013608:	f43f ae77 	beq.w	80132fa <_printf_float+0xb6>
 801360c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013610:	4631      	mov	r1, r6
 8013612:	4628      	mov	r0, r5
 8013614:	47b8      	blx	r7
 8013616:	3001      	adds	r0, #1
 8013618:	f43f ae6f 	beq.w	80132fa <_printf_float+0xb6>
 801361c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013620:	2200      	movs	r2, #0
 8013622:	2300      	movs	r3, #0
 8013624:	f7fd fa2c 	bl	8010a80 <__aeabi_dcmpeq>
 8013628:	b9d8      	cbnz	r0, 8013662 <_printf_float+0x41e>
 801362a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801362c:	f108 0201 	add.w	r2, r8, #1
 8013630:	3b01      	subs	r3, #1
 8013632:	4631      	mov	r1, r6
 8013634:	4628      	mov	r0, r5
 8013636:	47b8      	blx	r7
 8013638:	3001      	adds	r0, #1
 801363a:	d10e      	bne.n	801365a <_printf_float+0x416>
 801363c:	e65d      	b.n	80132fa <_printf_float+0xb6>
 801363e:	2301      	movs	r3, #1
 8013640:	464a      	mov	r2, r9
 8013642:	4631      	mov	r1, r6
 8013644:	4628      	mov	r0, r5
 8013646:	47b8      	blx	r7
 8013648:	3001      	adds	r0, #1
 801364a:	f43f ae56 	beq.w	80132fa <_printf_float+0xb6>
 801364e:	f108 0801 	add.w	r8, r8, #1
 8013652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013654:	3b01      	subs	r3, #1
 8013656:	4543      	cmp	r3, r8
 8013658:	dcf1      	bgt.n	801363e <_printf_float+0x3fa>
 801365a:	4653      	mov	r3, sl
 801365c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013660:	e6e0      	b.n	8013424 <_printf_float+0x1e0>
 8013662:	f04f 0800 	mov.w	r8, #0
 8013666:	f104 091a 	add.w	r9, r4, #26
 801366a:	e7f2      	b.n	8013652 <_printf_float+0x40e>
 801366c:	2301      	movs	r3, #1
 801366e:	4642      	mov	r2, r8
 8013670:	e7df      	b.n	8013632 <_printf_float+0x3ee>
 8013672:	2301      	movs	r3, #1
 8013674:	464a      	mov	r2, r9
 8013676:	4631      	mov	r1, r6
 8013678:	4628      	mov	r0, r5
 801367a:	47b8      	blx	r7
 801367c:	3001      	adds	r0, #1
 801367e:	f43f ae3c 	beq.w	80132fa <_printf_float+0xb6>
 8013682:	f108 0801 	add.w	r8, r8, #1
 8013686:	68e3      	ldr	r3, [r4, #12]
 8013688:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801368a:	1a5b      	subs	r3, r3, r1
 801368c:	4543      	cmp	r3, r8
 801368e:	dcf0      	bgt.n	8013672 <_printf_float+0x42e>
 8013690:	e6fd      	b.n	801348e <_printf_float+0x24a>
 8013692:	f04f 0800 	mov.w	r8, #0
 8013696:	f104 0919 	add.w	r9, r4, #25
 801369a:	e7f4      	b.n	8013686 <_printf_float+0x442>

0801369c <_printf_common>:
 801369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136a0:	4616      	mov	r6, r2
 80136a2:	4699      	mov	r9, r3
 80136a4:	688a      	ldr	r2, [r1, #8]
 80136a6:	690b      	ldr	r3, [r1, #16]
 80136a8:	4607      	mov	r7, r0
 80136aa:	4293      	cmp	r3, r2
 80136ac:	bfb8      	it	lt
 80136ae:	4613      	movlt	r3, r2
 80136b0:	6033      	str	r3, [r6, #0]
 80136b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80136b6:	460c      	mov	r4, r1
 80136b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80136bc:	b10a      	cbz	r2, 80136c2 <_printf_common+0x26>
 80136be:	3301      	adds	r3, #1
 80136c0:	6033      	str	r3, [r6, #0]
 80136c2:	6823      	ldr	r3, [r4, #0]
 80136c4:	0699      	lsls	r1, r3, #26
 80136c6:	bf42      	ittt	mi
 80136c8:	6833      	ldrmi	r3, [r6, #0]
 80136ca:	3302      	addmi	r3, #2
 80136cc:	6033      	strmi	r3, [r6, #0]
 80136ce:	6825      	ldr	r5, [r4, #0]
 80136d0:	f015 0506 	ands.w	r5, r5, #6
 80136d4:	d106      	bne.n	80136e4 <_printf_common+0x48>
 80136d6:	f104 0a19 	add.w	sl, r4, #25
 80136da:	68e3      	ldr	r3, [r4, #12]
 80136dc:	6832      	ldr	r2, [r6, #0]
 80136de:	1a9b      	subs	r3, r3, r2
 80136e0:	42ab      	cmp	r3, r5
 80136e2:	dc28      	bgt.n	8013736 <_printf_common+0x9a>
 80136e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80136e8:	1e13      	subs	r3, r2, #0
 80136ea:	6822      	ldr	r2, [r4, #0]
 80136ec:	bf18      	it	ne
 80136ee:	2301      	movne	r3, #1
 80136f0:	0692      	lsls	r2, r2, #26
 80136f2:	d42d      	bmi.n	8013750 <_printf_common+0xb4>
 80136f4:	4649      	mov	r1, r9
 80136f6:	4638      	mov	r0, r7
 80136f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80136fc:	47c0      	blx	r8
 80136fe:	3001      	adds	r0, #1
 8013700:	d020      	beq.n	8013744 <_printf_common+0xa8>
 8013702:	6823      	ldr	r3, [r4, #0]
 8013704:	68e5      	ldr	r5, [r4, #12]
 8013706:	f003 0306 	and.w	r3, r3, #6
 801370a:	2b04      	cmp	r3, #4
 801370c:	bf18      	it	ne
 801370e:	2500      	movne	r5, #0
 8013710:	6832      	ldr	r2, [r6, #0]
 8013712:	f04f 0600 	mov.w	r6, #0
 8013716:	68a3      	ldr	r3, [r4, #8]
 8013718:	bf08      	it	eq
 801371a:	1aad      	subeq	r5, r5, r2
 801371c:	6922      	ldr	r2, [r4, #16]
 801371e:	bf08      	it	eq
 8013720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013724:	4293      	cmp	r3, r2
 8013726:	bfc4      	itt	gt
 8013728:	1a9b      	subgt	r3, r3, r2
 801372a:	18ed      	addgt	r5, r5, r3
 801372c:	341a      	adds	r4, #26
 801372e:	42b5      	cmp	r5, r6
 8013730:	d11a      	bne.n	8013768 <_printf_common+0xcc>
 8013732:	2000      	movs	r0, #0
 8013734:	e008      	b.n	8013748 <_printf_common+0xac>
 8013736:	2301      	movs	r3, #1
 8013738:	4652      	mov	r2, sl
 801373a:	4649      	mov	r1, r9
 801373c:	4638      	mov	r0, r7
 801373e:	47c0      	blx	r8
 8013740:	3001      	adds	r0, #1
 8013742:	d103      	bne.n	801374c <_printf_common+0xb0>
 8013744:	f04f 30ff 	mov.w	r0, #4294967295
 8013748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801374c:	3501      	adds	r5, #1
 801374e:	e7c4      	b.n	80136da <_printf_common+0x3e>
 8013750:	2030      	movs	r0, #48	; 0x30
 8013752:	18e1      	adds	r1, r4, r3
 8013754:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013758:	1c5a      	adds	r2, r3, #1
 801375a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801375e:	4422      	add	r2, r4
 8013760:	3302      	adds	r3, #2
 8013762:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013766:	e7c5      	b.n	80136f4 <_printf_common+0x58>
 8013768:	2301      	movs	r3, #1
 801376a:	4622      	mov	r2, r4
 801376c:	4649      	mov	r1, r9
 801376e:	4638      	mov	r0, r7
 8013770:	47c0      	blx	r8
 8013772:	3001      	adds	r0, #1
 8013774:	d0e6      	beq.n	8013744 <_printf_common+0xa8>
 8013776:	3601      	adds	r6, #1
 8013778:	e7d9      	b.n	801372e <_printf_common+0x92>
	...

0801377c <_printf_i>:
 801377c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013780:	7e0f      	ldrb	r7, [r1, #24]
 8013782:	4691      	mov	r9, r2
 8013784:	2f78      	cmp	r7, #120	; 0x78
 8013786:	4680      	mov	r8, r0
 8013788:	460c      	mov	r4, r1
 801378a:	469a      	mov	sl, r3
 801378c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801378e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013792:	d807      	bhi.n	80137a4 <_printf_i+0x28>
 8013794:	2f62      	cmp	r7, #98	; 0x62
 8013796:	d80a      	bhi.n	80137ae <_printf_i+0x32>
 8013798:	2f00      	cmp	r7, #0
 801379a:	f000 80d9 	beq.w	8013950 <_printf_i+0x1d4>
 801379e:	2f58      	cmp	r7, #88	; 0x58
 80137a0:	f000 80a4 	beq.w	80138ec <_printf_i+0x170>
 80137a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80137a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80137ac:	e03a      	b.n	8013824 <_printf_i+0xa8>
 80137ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80137b2:	2b15      	cmp	r3, #21
 80137b4:	d8f6      	bhi.n	80137a4 <_printf_i+0x28>
 80137b6:	a101      	add	r1, pc, #4	; (adr r1, 80137bc <_printf_i+0x40>)
 80137b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80137bc:	08013815 	.word	0x08013815
 80137c0:	08013829 	.word	0x08013829
 80137c4:	080137a5 	.word	0x080137a5
 80137c8:	080137a5 	.word	0x080137a5
 80137cc:	080137a5 	.word	0x080137a5
 80137d0:	080137a5 	.word	0x080137a5
 80137d4:	08013829 	.word	0x08013829
 80137d8:	080137a5 	.word	0x080137a5
 80137dc:	080137a5 	.word	0x080137a5
 80137e0:	080137a5 	.word	0x080137a5
 80137e4:	080137a5 	.word	0x080137a5
 80137e8:	08013937 	.word	0x08013937
 80137ec:	08013859 	.word	0x08013859
 80137f0:	08013919 	.word	0x08013919
 80137f4:	080137a5 	.word	0x080137a5
 80137f8:	080137a5 	.word	0x080137a5
 80137fc:	08013959 	.word	0x08013959
 8013800:	080137a5 	.word	0x080137a5
 8013804:	08013859 	.word	0x08013859
 8013808:	080137a5 	.word	0x080137a5
 801380c:	080137a5 	.word	0x080137a5
 8013810:	08013921 	.word	0x08013921
 8013814:	682b      	ldr	r3, [r5, #0]
 8013816:	1d1a      	adds	r2, r3, #4
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	602a      	str	r2, [r5, #0]
 801381c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013824:	2301      	movs	r3, #1
 8013826:	e0a4      	b.n	8013972 <_printf_i+0x1f6>
 8013828:	6820      	ldr	r0, [r4, #0]
 801382a:	6829      	ldr	r1, [r5, #0]
 801382c:	0606      	lsls	r6, r0, #24
 801382e:	f101 0304 	add.w	r3, r1, #4
 8013832:	d50a      	bpl.n	801384a <_printf_i+0xce>
 8013834:	680e      	ldr	r6, [r1, #0]
 8013836:	602b      	str	r3, [r5, #0]
 8013838:	2e00      	cmp	r6, #0
 801383a:	da03      	bge.n	8013844 <_printf_i+0xc8>
 801383c:	232d      	movs	r3, #45	; 0x2d
 801383e:	4276      	negs	r6, r6
 8013840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013844:	230a      	movs	r3, #10
 8013846:	485e      	ldr	r0, [pc, #376]	; (80139c0 <_printf_i+0x244>)
 8013848:	e019      	b.n	801387e <_printf_i+0x102>
 801384a:	680e      	ldr	r6, [r1, #0]
 801384c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013850:	602b      	str	r3, [r5, #0]
 8013852:	bf18      	it	ne
 8013854:	b236      	sxthne	r6, r6
 8013856:	e7ef      	b.n	8013838 <_printf_i+0xbc>
 8013858:	682b      	ldr	r3, [r5, #0]
 801385a:	6820      	ldr	r0, [r4, #0]
 801385c:	1d19      	adds	r1, r3, #4
 801385e:	6029      	str	r1, [r5, #0]
 8013860:	0601      	lsls	r1, r0, #24
 8013862:	d501      	bpl.n	8013868 <_printf_i+0xec>
 8013864:	681e      	ldr	r6, [r3, #0]
 8013866:	e002      	b.n	801386e <_printf_i+0xf2>
 8013868:	0646      	lsls	r6, r0, #25
 801386a:	d5fb      	bpl.n	8013864 <_printf_i+0xe8>
 801386c:	881e      	ldrh	r6, [r3, #0]
 801386e:	2f6f      	cmp	r7, #111	; 0x6f
 8013870:	bf0c      	ite	eq
 8013872:	2308      	moveq	r3, #8
 8013874:	230a      	movne	r3, #10
 8013876:	4852      	ldr	r0, [pc, #328]	; (80139c0 <_printf_i+0x244>)
 8013878:	2100      	movs	r1, #0
 801387a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801387e:	6865      	ldr	r5, [r4, #4]
 8013880:	2d00      	cmp	r5, #0
 8013882:	bfa8      	it	ge
 8013884:	6821      	ldrge	r1, [r4, #0]
 8013886:	60a5      	str	r5, [r4, #8]
 8013888:	bfa4      	itt	ge
 801388a:	f021 0104 	bicge.w	r1, r1, #4
 801388e:	6021      	strge	r1, [r4, #0]
 8013890:	b90e      	cbnz	r6, 8013896 <_printf_i+0x11a>
 8013892:	2d00      	cmp	r5, #0
 8013894:	d04d      	beq.n	8013932 <_printf_i+0x1b6>
 8013896:	4615      	mov	r5, r2
 8013898:	fbb6 f1f3 	udiv	r1, r6, r3
 801389c:	fb03 6711 	mls	r7, r3, r1, r6
 80138a0:	5dc7      	ldrb	r7, [r0, r7]
 80138a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80138a6:	4637      	mov	r7, r6
 80138a8:	42bb      	cmp	r3, r7
 80138aa:	460e      	mov	r6, r1
 80138ac:	d9f4      	bls.n	8013898 <_printf_i+0x11c>
 80138ae:	2b08      	cmp	r3, #8
 80138b0:	d10b      	bne.n	80138ca <_printf_i+0x14e>
 80138b2:	6823      	ldr	r3, [r4, #0]
 80138b4:	07de      	lsls	r6, r3, #31
 80138b6:	d508      	bpl.n	80138ca <_printf_i+0x14e>
 80138b8:	6923      	ldr	r3, [r4, #16]
 80138ba:	6861      	ldr	r1, [r4, #4]
 80138bc:	4299      	cmp	r1, r3
 80138be:	bfde      	ittt	le
 80138c0:	2330      	movle	r3, #48	; 0x30
 80138c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80138c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80138ca:	1b52      	subs	r2, r2, r5
 80138cc:	6122      	str	r2, [r4, #16]
 80138ce:	464b      	mov	r3, r9
 80138d0:	4621      	mov	r1, r4
 80138d2:	4640      	mov	r0, r8
 80138d4:	f8cd a000 	str.w	sl, [sp]
 80138d8:	aa03      	add	r2, sp, #12
 80138da:	f7ff fedf 	bl	801369c <_printf_common>
 80138de:	3001      	adds	r0, #1
 80138e0:	d14c      	bne.n	801397c <_printf_i+0x200>
 80138e2:	f04f 30ff 	mov.w	r0, #4294967295
 80138e6:	b004      	add	sp, #16
 80138e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ec:	4834      	ldr	r0, [pc, #208]	; (80139c0 <_printf_i+0x244>)
 80138ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80138f2:	6829      	ldr	r1, [r5, #0]
 80138f4:	6823      	ldr	r3, [r4, #0]
 80138f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80138fa:	6029      	str	r1, [r5, #0]
 80138fc:	061d      	lsls	r5, r3, #24
 80138fe:	d514      	bpl.n	801392a <_printf_i+0x1ae>
 8013900:	07df      	lsls	r7, r3, #31
 8013902:	bf44      	itt	mi
 8013904:	f043 0320 	orrmi.w	r3, r3, #32
 8013908:	6023      	strmi	r3, [r4, #0]
 801390a:	b91e      	cbnz	r6, 8013914 <_printf_i+0x198>
 801390c:	6823      	ldr	r3, [r4, #0]
 801390e:	f023 0320 	bic.w	r3, r3, #32
 8013912:	6023      	str	r3, [r4, #0]
 8013914:	2310      	movs	r3, #16
 8013916:	e7af      	b.n	8013878 <_printf_i+0xfc>
 8013918:	6823      	ldr	r3, [r4, #0]
 801391a:	f043 0320 	orr.w	r3, r3, #32
 801391e:	6023      	str	r3, [r4, #0]
 8013920:	2378      	movs	r3, #120	; 0x78
 8013922:	4828      	ldr	r0, [pc, #160]	; (80139c4 <_printf_i+0x248>)
 8013924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013928:	e7e3      	b.n	80138f2 <_printf_i+0x176>
 801392a:	0659      	lsls	r1, r3, #25
 801392c:	bf48      	it	mi
 801392e:	b2b6      	uxthmi	r6, r6
 8013930:	e7e6      	b.n	8013900 <_printf_i+0x184>
 8013932:	4615      	mov	r5, r2
 8013934:	e7bb      	b.n	80138ae <_printf_i+0x132>
 8013936:	682b      	ldr	r3, [r5, #0]
 8013938:	6826      	ldr	r6, [r4, #0]
 801393a:	1d18      	adds	r0, r3, #4
 801393c:	6961      	ldr	r1, [r4, #20]
 801393e:	6028      	str	r0, [r5, #0]
 8013940:	0635      	lsls	r5, r6, #24
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	d501      	bpl.n	801394a <_printf_i+0x1ce>
 8013946:	6019      	str	r1, [r3, #0]
 8013948:	e002      	b.n	8013950 <_printf_i+0x1d4>
 801394a:	0670      	lsls	r0, r6, #25
 801394c:	d5fb      	bpl.n	8013946 <_printf_i+0x1ca>
 801394e:	8019      	strh	r1, [r3, #0]
 8013950:	2300      	movs	r3, #0
 8013952:	4615      	mov	r5, r2
 8013954:	6123      	str	r3, [r4, #16]
 8013956:	e7ba      	b.n	80138ce <_printf_i+0x152>
 8013958:	682b      	ldr	r3, [r5, #0]
 801395a:	2100      	movs	r1, #0
 801395c:	1d1a      	adds	r2, r3, #4
 801395e:	602a      	str	r2, [r5, #0]
 8013960:	681d      	ldr	r5, [r3, #0]
 8013962:	6862      	ldr	r2, [r4, #4]
 8013964:	4628      	mov	r0, r5
 8013966:	f002 fe41 	bl	80165ec <memchr>
 801396a:	b108      	cbz	r0, 8013970 <_printf_i+0x1f4>
 801396c:	1b40      	subs	r0, r0, r5
 801396e:	6060      	str	r0, [r4, #4]
 8013970:	6863      	ldr	r3, [r4, #4]
 8013972:	6123      	str	r3, [r4, #16]
 8013974:	2300      	movs	r3, #0
 8013976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801397a:	e7a8      	b.n	80138ce <_printf_i+0x152>
 801397c:	462a      	mov	r2, r5
 801397e:	4649      	mov	r1, r9
 8013980:	4640      	mov	r0, r8
 8013982:	6923      	ldr	r3, [r4, #16]
 8013984:	47d0      	blx	sl
 8013986:	3001      	adds	r0, #1
 8013988:	d0ab      	beq.n	80138e2 <_printf_i+0x166>
 801398a:	6823      	ldr	r3, [r4, #0]
 801398c:	079b      	lsls	r3, r3, #30
 801398e:	d413      	bmi.n	80139b8 <_printf_i+0x23c>
 8013990:	68e0      	ldr	r0, [r4, #12]
 8013992:	9b03      	ldr	r3, [sp, #12]
 8013994:	4298      	cmp	r0, r3
 8013996:	bfb8      	it	lt
 8013998:	4618      	movlt	r0, r3
 801399a:	e7a4      	b.n	80138e6 <_printf_i+0x16a>
 801399c:	2301      	movs	r3, #1
 801399e:	4632      	mov	r2, r6
 80139a0:	4649      	mov	r1, r9
 80139a2:	4640      	mov	r0, r8
 80139a4:	47d0      	blx	sl
 80139a6:	3001      	adds	r0, #1
 80139a8:	d09b      	beq.n	80138e2 <_printf_i+0x166>
 80139aa:	3501      	adds	r5, #1
 80139ac:	68e3      	ldr	r3, [r4, #12]
 80139ae:	9903      	ldr	r1, [sp, #12]
 80139b0:	1a5b      	subs	r3, r3, r1
 80139b2:	42ab      	cmp	r3, r5
 80139b4:	dcf2      	bgt.n	801399c <_printf_i+0x220>
 80139b6:	e7eb      	b.n	8013990 <_printf_i+0x214>
 80139b8:	2500      	movs	r5, #0
 80139ba:	f104 0619 	add.w	r6, r4, #25
 80139be:	e7f5      	b.n	80139ac <_printf_i+0x230>
 80139c0:	08017ab6 	.word	0x08017ab6
 80139c4:	08017ac7 	.word	0x08017ac7

080139c8 <_scanf_float>:
 80139c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139cc:	b087      	sub	sp, #28
 80139ce:	9303      	str	r3, [sp, #12]
 80139d0:	688b      	ldr	r3, [r1, #8]
 80139d2:	4617      	mov	r7, r2
 80139d4:	1e5a      	subs	r2, r3, #1
 80139d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80139da:	bf85      	ittet	hi
 80139dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80139e0:	195b      	addhi	r3, r3, r5
 80139e2:	2300      	movls	r3, #0
 80139e4:	9302      	strhi	r3, [sp, #8]
 80139e6:	bf88      	it	hi
 80139e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80139ec:	468b      	mov	fp, r1
 80139ee:	f04f 0500 	mov.w	r5, #0
 80139f2:	bf8c      	ite	hi
 80139f4:	608b      	strhi	r3, [r1, #8]
 80139f6:	9302      	strls	r3, [sp, #8]
 80139f8:	680b      	ldr	r3, [r1, #0]
 80139fa:	4680      	mov	r8, r0
 80139fc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013a00:	f84b 3b1c 	str.w	r3, [fp], #28
 8013a04:	460c      	mov	r4, r1
 8013a06:	465e      	mov	r6, fp
 8013a08:	46aa      	mov	sl, r5
 8013a0a:	46a9      	mov	r9, r5
 8013a0c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013a10:	9501      	str	r5, [sp, #4]
 8013a12:	68a2      	ldr	r2, [r4, #8]
 8013a14:	b152      	cbz	r2, 8013a2c <_scanf_float+0x64>
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	781b      	ldrb	r3, [r3, #0]
 8013a1a:	2b4e      	cmp	r3, #78	; 0x4e
 8013a1c:	d864      	bhi.n	8013ae8 <_scanf_float+0x120>
 8013a1e:	2b40      	cmp	r3, #64	; 0x40
 8013a20:	d83c      	bhi.n	8013a9c <_scanf_float+0xd4>
 8013a22:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013a26:	b2c8      	uxtb	r0, r1
 8013a28:	280e      	cmp	r0, #14
 8013a2a:	d93a      	bls.n	8013aa2 <_scanf_float+0xda>
 8013a2c:	f1b9 0f00 	cmp.w	r9, #0
 8013a30:	d003      	beq.n	8013a3a <_scanf_float+0x72>
 8013a32:	6823      	ldr	r3, [r4, #0]
 8013a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013a38:	6023      	str	r3, [r4, #0]
 8013a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013a3e:	f1ba 0f01 	cmp.w	sl, #1
 8013a42:	f200 8113 	bhi.w	8013c6c <_scanf_float+0x2a4>
 8013a46:	455e      	cmp	r6, fp
 8013a48:	f200 8105 	bhi.w	8013c56 <_scanf_float+0x28e>
 8013a4c:	2501      	movs	r5, #1
 8013a4e:	4628      	mov	r0, r5
 8013a50:	b007      	add	sp, #28
 8013a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013a5a:	2a0d      	cmp	r2, #13
 8013a5c:	d8e6      	bhi.n	8013a2c <_scanf_float+0x64>
 8013a5e:	a101      	add	r1, pc, #4	; (adr r1, 8013a64 <_scanf_float+0x9c>)
 8013a60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013a64:	08013ba3 	.word	0x08013ba3
 8013a68:	08013a2d 	.word	0x08013a2d
 8013a6c:	08013a2d 	.word	0x08013a2d
 8013a70:	08013a2d 	.word	0x08013a2d
 8013a74:	08013c03 	.word	0x08013c03
 8013a78:	08013bdb 	.word	0x08013bdb
 8013a7c:	08013a2d 	.word	0x08013a2d
 8013a80:	08013a2d 	.word	0x08013a2d
 8013a84:	08013bb1 	.word	0x08013bb1
 8013a88:	08013a2d 	.word	0x08013a2d
 8013a8c:	08013a2d 	.word	0x08013a2d
 8013a90:	08013a2d 	.word	0x08013a2d
 8013a94:	08013a2d 	.word	0x08013a2d
 8013a98:	08013b69 	.word	0x08013b69
 8013a9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013aa0:	e7db      	b.n	8013a5a <_scanf_float+0x92>
 8013aa2:	290e      	cmp	r1, #14
 8013aa4:	d8c2      	bhi.n	8013a2c <_scanf_float+0x64>
 8013aa6:	a001      	add	r0, pc, #4	; (adr r0, 8013aac <_scanf_float+0xe4>)
 8013aa8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013aac:	08013b5b 	.word	0x08013b5b
 8013ab0:	08013a2d 	.word	0x08013a2d
 8013ab4:	08013b5b 	.word	0x08013b5b
 8013ab8:	08013bef 	.word	0x08013bef
 8013abc:	08013a2d 	.word	0x08013a2d
 8013ac0:	08013b09 	.word	0x08013b09
 8013ac4:	08013b45 	.word	0x08013b45
 8013ac8:	08013b45 	.word	0x08013b45
 8013acc:	08013b45 	.word	0x08013b45
 8013ad0:	08013b45 	.word	0x08013b45
 8013ad4:	08013b45 	.word	0x08013b45
 8013ad8:	08013b45 	.word	0x08013b45
 8013adc:	08013b45 	.word	0x08013b45
 8013ae0:	08013b45 	.word	0x08013b45
 8013ae4:	08013b45 	.word	0x08013b45
 8013ae8:	2b6e      	cmp	r3, #110	; 0x6e
 8013aea:	d809      	bhi.n	8013b00 <_scanf_float+0x138>
 8013aec:	2b60      	cmp	r3, #96	; 0x60
 8013aee:	d8b2      	bhi.n	8013a56 <_scanf_float+0x8e>
 8013af0:	2b54      	cmp	r3, #84	; 0x54
 8013af2:	d077      	beq.n	8013be4 <_scanf_float+0x21c>
 8013af4:	2b59      	cmp	r3, #89	; 0x59
 8013af6:	d199      	bne.n	8013a2c <_scanf_float+0x64>
 8013af8:	2d07      	cmp	r5, #7
 8013afa:	d197      	bne.n	8013a2c <_scanf_float+0x64>
 8013afc:	2508      	movs	r5, #8
 8013afe:	e029      	b.n	8013b54 <_scanf_float+0x18c>
 8013b00:	2b74      	cmp	r3, #116	; 0x74
 8013b02:	d06f      	beq.n	8013be4 <_scanf_float+0x21c>
 8013b04:	2b79      	cmp	r3, #121	; 0x79
 8013b06:	e7f6      	b.n	8013af6 <_scanf_float+0x12e>
 8013b08:	6821      	ldr	r1, [r4, #0]
 8013b0a:	05c8      	lsls	r0, r1, #23
 8013b0c:	d51a      	bpl.n	8013b44 <_scanf_float+0x17c>
 8013b0e:	9b02      	ldr	r3, [sp, #8]
 8013b10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013b14:	6021      	str	r1, [r4, #0]
 8013b16:	f109 0901 	add.w	r9, r9, #1
 8013b1a:	b11b      	cbz	r3, 8013b24 <_scanf_float+0x15c>
 8013b1c:	3b01      	subs	r3, #1
 8013b1e:	3201      	adds	r2, #1
 8013b20:	9302      	str	r3, [sp, #8]
 8013b22:	60a2      	str	r2, [r4, #8]
 8013b24:	68a3      	ldr	r3, [r4, #8]
 8013b26:	3b01      	subs	r3, #1
 8013b28:	60a3      	str	r3, [r4, #8]
 8013b2a:	6923      	ldr	r3, [r4, #16]
 8013b2c:	3301      	adds	r3, #1
 8013b2e:	6123      	str	r3, [r4, #16]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	3b01      	subs	r3, #1
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	607b      	str	r3, [r7, #4]
 8013b38:	f340 8084 	ble.w	8013c44 <_scanf_float+0x27c>
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	3301      	adds	r3, #1
 8013b40:	603b      	str	r3, [r7, #0]
 8013b42:	e766      	b.n	8013a12 <_scanf_float+0x4a>
 8013b44:	eb1a 0f05 	cmn.w	sl, r5
 8013b48:	f47f af70 	bne.w	8013a2c <_scanf_float+0x64>
 8013b4c:	6822      	ldr	r2, [r4, #0]
 8013b4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013b52:	6022      	str	r2, [r4, #0]
 8013b54:	f806 3b01 	strb.w	r3, [r6], #1
 8013b58:	e7e4      	b.n	8013b24 <_scanf_float+0x15c>
 8013b5a:	6822      	ldr	r2, [r4, #0]
 8013b5c:	0610      	lsls	r0, r2, #24
 8013b5e:	f57f af65 	bpl.w	8013a2c <_scanf_float+0x64>
 8013b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013b66:	e7f4      	b.n	8013b52 <_scanf_float+0x18a>
 8013b68:	f1ba 0f00 	cmp.w	sl, #0
 8013b6c:	d10e      	bne.n	8013b8c <_scanf_float+0x1c4>
 8013b6e:	f1b9 0f00 	cmp.w	r9, #0
 8013b72:	d10e      	bne.n	8013b92 <_scanf_float+0x1ca>
 8013b74:	6822      	ldr	r2, [r4, #0]
 8013b76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013b7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013b7e:	d108      	bne.n	8013b92 <_scanf_float+0x1ca>
 8013b80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013b84:	f04f 0a01 	mov.w	sl, #1
 8013b88:	6022      	str	r2, [r4, #0]
 8013b8a:	e7e3      	b.n	8013b54 <_scanf_float+0x18c>
 8013b8c:	f1ba 0f02 	cmp.w	sl, #2
 8013b90:	d055      	beq.n	8013c3e <_scanf_float+0x276>
 8013b92:	2d01      	cmp	r5, #1
 8013b94:	d002      	beq.n	8013b9c <_scanf_float+0x1d4>
 8013b96:	2d04      	cmp	r5, #4
 8013b98:	f47f af48 	bne.w	8013a2c <_scanf_float+0x64>
 8013b9c:	3501      	adds	r5, #1
 8013b9e:	b2ed      	uxtb	r5, r5
 8013ba0:	e7d8      	b.n	8013b54 <_scanf_float+0x18c>
 8013ba2:	f1ba 0f01 	cmp.w	sl, #1
 8013ba6:	f47f af41 	bne.w	8013a2c <_scanf_float+0x64>
 8013baa:	f04f 0a02 	mov.w	sl, #2
 8013bae:	e7d1      	b.n	8013b54 <_scanf_float+0x18c>
 8013bb0:	b97d      	cbnz	r5, 8013bd2 <_scanf_float+0x20a>
 8013bb2:	f1b9 0f00 	cmp.w	r9, #0
 8013bb6:	f47f af3c 	bne.w	8013a32 <_scanf_float+0x6a>
 8013bba:	6822      	ldr	r2, [r4, #0]
 8013bbc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013bc0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013bc4:	f47f af39 	bne.w	8013a3a <_scanf_float+0x72>
 8013bc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013bcc:	2501      	movs	r5, #1
 8013bce:	6022      	str	r2, [r4, #0]
 8013bd0:	e7c0      	b.n	8013b54 <_scanf_float+0x18c>
 8013bd2:	2d03      	cmp	r5, #3
 8013bd4:	d0e2      	beq.n	8013b9c <_scanf_float+0x1d4>
 8013bd6:	2d05      	cmp	r5, #5
 8013bd8:	e7de      	b.n	8013b98 <_scanf_float+0x1d0>
 8013bda:	2d02      	cmp	r5, #2
 8013bdc:	f47f af26 	bne.w	8013a2c <_scanf_float+0x64>
 8013be0:	2503      	movs	r5, #3
 8013be2:	e7b7      	b.n	8013b54 <_scanf_float+0x18c>
 8013be4:	2d06      	cmp	r5, #6
 8013be6:	f47f af21 	bne.w	8013a2c <_scanf_float+0x64>
 8013bea:	2507      	movs	r5, #7
 8013bec:	e7b2      	b.n	8013b54 <_scanf_float+0x18c>
 8013bee:	6822      	ldr	r2, [r4, #0]
 8013bf0:	0591      	lsls	r1, r2, #22
 8013bf2:	f57f af1b 	bpl.w	8013a2c <_scanf_float+0x64>
 8013bf6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013bfa:	6022      	str	r2, [r4, #0]
 8013bfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8013c00:	e7a8      	b.n	8013b54 <_scanf_float+0x18c>
 8013c02:	6822      	ldr	r2, [r4, #0]
 8013c04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013c08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013c0c:	d006      	beq.n	8013c1c <_scanf_float+0x254>
 8013c0e:	0550      	lsls	r0, r2, #21
 8013c10:	f57f af0c 	bpl.w	8013a2c <_scanf_float+0x64>
 8013c14:	f1b9 0f00 	cmp.w	r9, #0
 8013c18:	f43f af0f 	beq.w	8013a3a <_scanf_float+0x72>
 8013c1c:	0591      	lsls	r1, r2, #22
 8013c1e:	bf58      	it	pl
 8013c20:	9901      	ldrpl	r1, [sp, #4]
 8013c22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013c26:	bf58      	it	pl
 8013c28:	eba9 0101 	subpl.w	r1, r9, r1
 8013c2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013c30:	f04f 0900 	mov.w	r9, #0
 8013c34:	bf58      	it	pl
 8013c36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013c3a:	6022      	str	r2, [r4, #0]
 8013c3c:	e78a      	b.n	8013b54 <_scanf_float+0x18c>
 8013c3e:	f04f 0a03 	mov.w	sl, #3
 8013c42:	e787      	b.n	8013b54 <_scanf_float+0x18c>
 8013c44:	4639      	mov	r1, r7
 8013c46:	4640      	mov	r0, r8
 8013c48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013c4c:	4798      	blx	r3
 8013c4e:	2800      	cmp	r0, #0
 8013c50:	f43f aedf 	beq.w	8013a12 <_scanf_float+0x4a>
 8013c54:	e6ea      	b.n	8013a2c <_scanf_float+0x64>
 8013c56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c5a:	463a      	mov	r2, r7
 8013c5c:	4640      	mov	r0, r8
 8013c5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013c62:	4798      	blx	r3
 8013c64:	6923      	ldr	r3, [r4, #16]
 8013c66:	3b01      	subs	r3, #1
 8013c68:	6123      	str	r3, [r4, #16]
 8013c6a:	e6ec      	b.n	8013a46 <_scanf_float+0x7e>
 8013c6c:	1e6b      	subs	r3, r5, #1
 8013c6e:	2b06      	cmp	r3, #6
 8013c70:	d825      	bhi.n	8013cbe <_scanf_float+0x2f6>
 8013c72:	2d02      	cmp	r5, #2
 8013c74:	d836      	bhi.n	8013ce4 <_scanf_float+0x31c>
 8013c76:	455e      	cmp	r6, fp
 8013c78:	f67f aee8 	bls.w	8013a4c <_scanf_float+0x84>
 8013c7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c80:	463a      	mov	r2, r7
 8013c82:	4640      	mov	r0, r8
 8013c84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013c88:	4798      	blx	r3
 8013c8a:	6923      	ldr	r3, [r4, #16]
 8013c8c:	3b01      	subs	r3, #1
 8013c8e:	6123      	str	r3, [r4, #16]
 8013c90:	e7f1      	b.n	8013c76 <_scanf_float+0x2ae>
 8013c92:	9802      	ldr	r0, [sp, #8]
 8013c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013c9c:	463a      	mov	r2, r7
 8013c9e:	9002      	str	r0, [sp, #8]
 8013ca0:	4640      	mov	r0, r8
 8013ca2:	4798      	blx	r3
 8013ca4:	6923      	ldr	r3, [r4, #16]
 8013ca6:	3b01      	subs	r3, #1
 8013ca8:	6123      	str	r3, [r4, #16]
 8013caa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cae:	fa5f fa8a 	uxtb.w	sl, sl
 8013cb2:	f1ba 0f02 	cmp.w	sl, #2
 8013cb6:	d1ec      	bne.n	8013c92 <_scanf_float+0x2ca>
 8013cb8:	3d03      	subs	r5, #3
 8013cba:	b2ed      	uxtb	r5, r5
 8013cbc:	1b76      	subs	r6, r6, r5
 8013cbe:	6823      	ldr	r3, [r4, #0]
 8013cc0:	05da      	lsls	r2, r3, #23
 8013cc2:	d52f      	bpl.n	8013d24 <_scanf_float+0x35c>
 8013cc4:	055b      	lsls	r3, r3, #21
 8013cc6:	d510      	bpl.n	8013cea <_scanf_float+0x322>
 8013cc8:	455e      	cmp	r6, fp
 8013cca:	f67f aebf 	bls.w	8013a4c <_scanf_float+0x84>
 8013cce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cd2:	463a      	mov	r2, r7
 8013cd4:	4640      	mov	r0, r8
 8013cd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013cda:	4798      	blx	r3
 8013cdc:	6923      	ldr	r3, [r4, #16]
 8013cde:	3b01      	subs	r3, #1
 8013ce0:	6123      	str	r3, [r4, #16]
 8013ce2:	e7f1      	b.n	8013cc8 <_scanf_float+0x300>
 8013ce4:	46aa      	mov	sl, r5
 8013ce6:	9602      	str	r6, [sp, #8]
 8013ce8:	e7df      	b.n	8013caa <_scanf_float+0x2e2>
 8013cea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013cee:	6923      	ldr	r3, [r4, #16]
 8013cf0:	2965      	cmp	r1, #101	; 0x65
 8013cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8013cf6:	f106 35ff 	add.w	r5, r6, #4294967295
 8013cfa:	6123      	str	r3, [r4, #16]
 8013cfc:	d00c      	beq.n	8013d18 <_scanf_float+0x350>
 8013cfe:	2945      	cmp	r1, #69	; 0x45
 8013d00:	d00a      	beq.n	8013d18 <_scanf_float+0x350>
 8013d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d06:	463a      	mov	r2, r7
 8013d08:	4640      	mov	r0, r8
 8013d0a:	4798      	blx	r3
 8013d0c:	6923      	ldr	r3, [r4, #16]
 8013d0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013d12:	3b01      	subs	r3, #1
 8013d14:	1eb5      	subs	r5, r6, #2
 8013d16:	6123      	str	r3, [r4, #16]
 8013d18:	463a      	mov	r2, r7
 8013d1a:	4640      	mov	r0, r8
 8013d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d20:	4798      	blx	r3
 8013d22:	462e      	mov	r6, r5
 8013d24:	6825      	ldr	r5, [r4, #0]
 8013d26:	f015 0510 	ands.w	r5, r5, #16
 8013d2a:	d155      	bne.n	8013dd8 <_scanf_float+0x410>
 8013d2c:	7035      	strb	r5, [r6, #0]
 8013d2e:	6823      	ldr	r3, [r4, #0]
 8013d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d38:	d11b      	bne.n	8013d72 <_scanf_float+0x3aa>
 8013d3a:	9b01      	ldr	r3, [sp, #4]
 8013d3c:	454b      	cmp	r3, r9
 8013d3e:	eba3 0209 	sub.w	r2, r3, r9
 8013d42:	d123      	bne.n	8013d8c <_scanf_float+0x3c4>
 8013d44:	2200      	movs	r2, #0
 8013d46:	4659      	mov	r1, fp
 8013d48:	4640      	mov	r0, r8
 8013d4a:	f000 fef1 	bl	8014b30 <_strtod_r>
 8013d4e:	6822      	ldr	r2, [r4, #0]
 8013d50:	9b03      	ldr	r3, [sp, #12]
 8013d52:	f012 0f02 	tst.w	r2, #2
 8013d56:	4606      	mov	r6, r0
 8013d58:	460f      	mov	r7, r1
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	d021      	beq.n	8013da2 <_scanf_float+0x3da>
 8013d5e:	1d1a      	adds	r2, r3, #4
 8013d60:	9903      	ldr	r1, [sp, #12]
 8013d62:	600a      	str	r2, [r1, #0]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	e9c3 6700 	strd	r6, r7, [r3]
 8013d6a:	68e3      	ldr	r3, [r4, #12]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	60e3      	str	r3, [r4, #12]
 8013d70:	e66d      	b.n	8013a4e <_scanf_float+0x86>
 8013d72:	9b04      	ldr	r3, [sp, #16]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d0e5      	beq.n	8013d44 <_scanf_float+0x37c>
 8013d78:	9905      	ldr	r1, [sp, #20]
 8013d7a:	230a      	movs	r3, #10
 8013d7c:	462a      	mov	r2, r5
 8013d7e:	4640      	mov	r0, r8
 8013d80:	3101      	adds	r1, #1
 8013d82:	f000 ff57 	bl	8014c34 <_strtol_r>
 8013d86:	9b04      	ldr	r3, [sp, #16]
 8013d88:	9e05      	ldr	r6, [sp, #20]
 8013d8a:	1ac2      	subs	r2, r0, r3
 8013d8c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013d90:	429e      	cmp	r6, r3
 8013d92:	bf28      	it	cs
 8013d94:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013d98:	4630      	mov	r0, r6
 8013d9a:	4910      	ldr	r1, [pc, #64]	; (8013ddc <_scanf_float+0x414>)
 8013d9c:	f000 f89c 	bl	8013ed8 <siprintf>
 8013da0:	e7d0      	b.n	8013d44 <_scanf_float+0x37c>
 8013da2:	f012 0f04 	tst.w	r2, #4
 8013da6:	f103 0204 	add.w	r2, r3, #4
 8013daa:	d1d9      	bne.n	8013d60 <_scanf_float+0x398>
 8013dac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013db0:	f8cc 2000 	str.w	r2, [ip]
 8013db4:	f8d3 8000 	ldr.w	r8, [r3]
 8013db8:	4602      	mov	r2, r0
 8013dba:	460b      	mov	r3, r1
 8013dbc:	f7fc fe92 	bl	8010ae4 <__aeabi_dcmpun>
 8013dc0:	b128      	cbz	r0, 8013dce <_scanf_float+0x406>
 8013dc2:	4807      	ldr	r0, [pc, #28]	; (8013de0 <_scanf_float+0x418>)
 8013dc4:	f000 f884 	bl	8013ed0 <nanf>
 8013dc8:	f8c8 0000 	str.w	r0, [r8]
 8013dcc:	e7cd      	b.n	8013d6a <_scanf_float+0x3a2>
 8013dce:	4630      	mov	r0, r6
 8013dd0:	4639      	mov	r1, r7
 8013dd2:	f7fc fee5 	bl	8010ba0 <__aeabi_d2f>
 8013dd6:	e7f7      	b.n	8013dc8 <_scanf_float+0x400>
 8013dd8:	2500      	movs	r5, #0
 8013dda:	e638      	b.n	8013a4e <_scanf_float+0x86>
 8013ddc:	08017ad8 	.word	0x08017ad8
 8013de0:	08017f48 	.word	0x08017f48

08013de4 <_puts_r>:
 8013de4:	b570      	push	{r4, r5, r6, lr}
 8013de6:	460e      	mov	r6, r1
 8013de8:	4605      	mov	r5, r0
 8013dea:	b118      	cbz	r0, 8013df4 <_puts_r+0x10>
 8013dec:	6983      	ldr	r3, [r0, #24]
 8013dee:	b90b      	cbnz	r3, 8013df4 <_puts_r+0x10>
 8013df0:	f001 ff72 	bl	8015cd8 <__sinit>
 8013df4:	69ab      	ldr	r3, [r5, #24]
 8013df6:	68ac      	ldr	r4, [r5, #8]
 8013df8:	b913      	cbnz	r3, 8013e00 <_puts_r+0x1c>
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	f001 ff6c 	bl	8015cd8 <__sinit>
 8013e00:	4b2c      	ldr	r3, [pc, #176]	; (8013eb4 <_puts_r+0xd0>)
 8013e02:	429c      	cmp	r4, r3
 8013e04:	d120      	bne.n	8013e48 <_puts_r+0x64>
 8013e06:	686c      	ldr	r4, [r5, #4]
 8013e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e0a:	07db      	lsls	r3, r3, #31
 8013e0c:	d405      	bmi.n	8013e1a <_puts_r+0x36>
 8013e0e:	89a3      	ldrh	r3, [r4, #12]
 8013e10:	0598      	lsls	r0, r3, #22
 8013e12:	d402      	bmi.n	8013e1a <_puts_r+0x36>
 8013e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e16:	f002 fb68 	bl	80164ea <__retarget_lock_acquire_recursive>
 8013e1a:	89a3      	ldrh	r3, [r4, #12]
 8013e1c:	0719      	lsls	r1, r3, #28
 8013e1e:	d51d      	bpl.n	8013e5c <_puts_r+0x78>
 8013e20:	6923      	ldr	r3, [r4, #16]
 8013e22:	b1db      	cbz	r3, 8013e5c <_puts_r+0x78>
 8013e24:	3e01      	subs	r6, #1
 8013e26:	68a3      	ldr	r3, [r4, #8]
 8013e28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013e2c:	3b01      	subs	r3, #1
 8013e2e:	60a3      	str	r3, [r4, #8]
 8013e30:	bb39      	cbnz	r1, 8013e82 <_puts_r+0x9e>
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	da38      	bge.n	8013ea8 <_puts_r+0xc4>
 8013e36:	4622      	mov	r2, r4
 8013e38:	210a      	movs	r1, #10
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	f000 fefc 	bl	8014c38 <__swbuf_r>
 8013e40:	3001      	adds	r0, #1
 8013e42:	d011      	beq.n	8013e68 <_puts_r+0x84>
 8013e44:	250a      	movs	r5, #10
 8013e46:	e011      	b.n	8013e6c <_puts_r+0x88>
 8013e48:	4b1b      	ldr	r3, [pc, #108]	; (8013eb8 <_puts_r+0xd4>)
 8013e4a:	429c      	cmp	r4, r3
 8013e4c:	d101      	bne.n	8013e52 <_puts_r+0x6e>
 8013e4e:	68ac      	ldr	r4, [r5, #8]
 8013e50:	e7da      	b.n	8013e08 <_puts_r+0x24>
 8013e52:	4b1a      	ldr	r3, [pc, #104]	; (8013ebc <_puts_r+0xd8>)
 8013e54:	429c      	cmp	r4, r3
 8013e56:	bf08      	it	eq
 8013e58:	68ec      	ldreq	r4, [r5, #12]
 8013e5a:	e7d5      	b.n	8013e08 <_puts_r+0x24>
 8013e5c:	4621      	mov	r1, r4
 8013e5e:	4628      	mov	r0, r5
 8013e60:	f000 ff3c 	bl	8014cdc <__swsetup_r>
 8013e64:	2800      	cmp	r0, #0
 8013e66:	d0dd      	beq.n	8013e24 <_puts_r+0x40>
 8013e68:	f04f 35ff 	mov.w	r5, #4294967295
 8013e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e6e:	07da      	lsls	r2, r3, #31
 8013e70:	d405      	bmi.n	8013e7e <_puts_r+0x9a>
 8013e72:	89a3      	ldrh	r3, [r4, #12]
 8013e74:	059b      	lsls	r3, r3, #22
 8013e76:	d402      	bmi.n	8013e7e <_puts_r+0x9a>
 8013e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e7a:	f002 fb37 	bl	80164ec <__retarget_lock_release_recursive>
 8013e7e:	4628      	mov	r0, r5
 8013e80:	bd70      	pop	{r4, r5, r6, pc}
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	da04      	bge.n	8013e90 <_puts_r+0xac>
 8013e86:	69a2      	ldr	r2, [r4, #24]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	dc06      	bgt.n	8013e9a <_puts_r+0xb6>
 8013e8c:	290a      	cmp	r1, #10
 8013e8e:	d004      	beq.n	8013e9a <_puts_r+0xb6>
 8013e90:	6823      	ldr	r3, [r4, #0]
 8013e92:	1c5a      	adds	r2, r3, #1
 8013e94:	6022      	str	r2, [r4, #0]
 8013e96:	7019      	strb	r1, [r3, #0]
 8013e98:	e7c5      	b.n	8013e26 <_puts_r+0x42>
 8013e9a:	4622      	mov	r2, r4
 8013e9c:	4628      	mov	r0, r5
 8013e9e:	f000 fecb 	bl	8014c38 <__swbuf_r>
 8013ea2:	3001      	adds	r0, #1
 8013ea4:	d1bf      	bne.n	8013e26 <_puts_r+0x42>
 8013ea6:	e7df      	b.n	8013e68 <_puts_r+0x84>
 8013ea8:	250a      	movs	r5, #10
 8013eaa:	6823      	ldr	r3, [r4, #0]
 8013eac:	1c5a      	adds	r2, r3, #1
 8013eae:	6022      	str	r2, [r4, #0]
 8013eb0:	701d      	strb	r5, [r3, #0]
 8013eb2:	e7db      	b.n	8013e6c <_puts_r+0x88>
 8013eb4:	08017ce4 	.word	0x08017ce4
 8013eb8:	08017d04 	.word	0x08017d04
 8013ebc:	08017cc4 	.word	0x08017cc4

08013ec0 <puts>:
 8013ec0:	4b02      	ldr	r3, [pc, #8]	; (8013ecc <puts+0xc>)
 8013ec2:	4601      	mov	r1, r0
 8013ec4:	6818      	ldr	r0, [r3, #0]
 8013ec6:	f7ff bf8d 	b.w	8013de4 <_puts_r>
 8013eca:	bf00      	nop
 8013ecc:	2000000c 	.word	0x2000000c

08013ed0 <nanf>:
 8013ed0:	4800      	ldr	r0, [pc, #0]	; (8013ed4 <nanf+0x4>)
 8013ed2:	4770      	bx	lr
 8013ed4:	7fc00000 	.word	0x7fc00000

08013ed8 <siprintf>:
 8013ed8:	b40e      	push	{r1, r2, r3}
 8013eda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013ede:	b500      	push	{lr}
 8013ee0:	b09c      	sub	sp, #112	; 0x70
 8013ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8013ee4:	9002      	str	r0, [sp, #8]
 8013ee6:	9006      	str	r0, [sp, #24]
 8013ee8:	9107      	str	r1, [sp, #28]
 8013eea:	9104      	str	r1, [sp, #16]
 8013eec:	4808      	ldr	r0, [pc, #32]	; (8013f10 <siprintf+0x38>)
 8013eee:	4909      	ldr	r1, [pc, #36]	; (8013f14 <siprintf+0x3c>)
 8013ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ef4:	9105      	str	r1, [sp, #20]
 8013ef6:	6800      	ldr	r0, [r0, #0]
 8013ef8:	a902      	add	r1, sp, #8
 8013efa:	9301      	str	r3, [sp, #4]
 8013efc:	f003 f996 	bl	801722c <_svfiprintf_r>
 8013f00:	2200      	movs	r2, #0
 8013f02:	9b02      	ldr	r3, [sp, #8]
 8013f04:	701a      	strb	r2, [r3, #0]
 8013f06:	b01c      	add	sp, #112	; 0x70
 8013f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f0c:	b003      	add	sp, #12
 8013f0e:	4770      	bx	lr
 8013f10:	2000000c 	.word	0x2000000c
 8013f14:	ffff0208 	.word	0xffff0208

08013f18 <sulp>:
 8013f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f1c:	460f      	mov	r7, r1
 8013f1e:	4690      	mov	r8, r2
 8013f20:	f002 fef0 	bl	8016d04 <__ulp>
 8013f24:	4604      	mov	r4, r0
 8013f26:	460d      	mov	r5, r1
 8013f28:	f1b8 0f00 	cmp.w	r8, #0
 8013f2c:	d011      	beq.n	8013f52 <sulp+0x3a>
 8013f2e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8013f32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	dd0b      	ble.n	8013f52 <sulp+0x3a>
 8013f3a:	2400      	movs	r4, #0
 8013f3c:	051b      	lsls	r3, r3, #20
 8013f3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013f42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013f46:	4622      	mov	r2, r4
 8013f48:	462b      	mov	r3, r5
 8013f4a:	f7fc fb31 	bl	80105b0 <__aeabi_dmul>
 8013f4e:	4604      	mov	r4, r0
 8013f50:	460d      	mov	r5, r1
 8013f52:	4620      	mov	r0, r4
 8013f54:	4629      	mov	r1, r5
 8013f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f5a:	0000      	movs	r0, r0
 8013f5c:	0000      	movs	r0, r0
	...

08013f60 <_strtod_l>:
 8013f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f64:	469b      	mov	fp, r3
 8013f66:	2300      	movs	r3, #0
 8013f68:	b09f      	sub	sp, #124	; 0x7c
 8013f6a:	931a      	str	r3, [sp, #104]	; 0x68
 8013f6c:	4b9e      	ldr	r3, [pc, #632]	; (80141e8 <_strtod_l+0x288>)
 8013f6e:	4682      	mov	sl, r0
 8013f70:	681f      	ldr	r7, [r3, #0]
 8013f72:	460e      	mov	r6, r1
 8013f74:	4638      	mov	r0, r7
 8013f76:	9215      	str	r2, [sp, #84]	; 0x54
 8013f78:	f7fc f956 	bl	8010228 <strlen>
 8013f7c:	f04f 0800 	mov.w	r8, #0
 8013f80:	4604      	mov	r4, r0
 8013f82:	f04f 0900 	mov.w	r9, #0
 8013f86:	9619      	str	r6, [sp, #100]	; 0x64
 8013f88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f8a:	781a      	ldrb	r2, [r3, #0]
 8013f8c:	2a2b      	cmp	r2, #43	; 0x2b
 8013f8e:	d04c      	beq.n	801402a <_strtod_l+0xca>
 8013f90:	d83a      	bhi.n	8014008 <_strtod_l+0xa8>
 8013f92:	2a0d      	cmp	r2, #13
 8013f94:	d833      	bhi.n	8013ffe <_strtod_l+0x9e>
 8013f96:	2a08      	cmp	r2, #8
 8013f98:	d833      	bhi.n	8014002 <_strtod_l+0xa2>
 8013f9a:	2a00      	cmp	r2, #0
 8013f9c:	d03d      	beq.n	801401a <_strtod_l+0xba>
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8013fa2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8013fa4:	782b      	ldrb	r3, [r5, #0]
 8013fa6:	2b30      	cmp	r3, #48	; 0x30
 8013fa8:	f040 80aa 	bne.w	8014100 <_strtod_l+0x1a0>
 8013fac:	786b      	ldrb	r3, [r5, #1]
 8013fae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013fb2:	2b58      	cmp	r3, #88	; 0x58
 8013fb4:	d166      	bne.n	8014084 <_strtod_l+0x124>
 8013fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fb8:	4650      	mov	r0, sl
 8013fba:	9301      	str	r3, [sp, #4]
 8013fbc:	ab1a      	add	r3, sp, #104	; 0x68
 8013fbe:	9300      	str	r3, [sp, #0]
 8013fc0:	4a8a      	ldr	r2, [pc, #552]	; (80141ec <_strtod_l+0x28c>)
 8013fc2:	f8cd b008 	str.w	fp, [sp, #8]
 8013fc6:	ab1b      	add	r3, sp, #108	; 0x6c
 8013fc8:	a919      	add	r1, sp, #100	; 0x64
 8013fca:	f001 ff8b 	bl	8015ee4 <__gethex>
 8013fce:	f010 0607 	ands.w	r6, r0, #7
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	d005      	beq.n	8013fe2 <_strtod_l+0x82>
 8013fd6:	2e06      	cmp	r6, #6
 8013fd8:	d129      	bne.n	801402e <_strtod_l+0xce>
 8013fda:	2300      	movs	r3, #0
 8013fdc:	3501      	adds	r5, #1
 8013fde:	9519      	str	r5, [sp, #100]	; 0x64
 8013fe0:	930a      	str	r3, [sp, #40]	; 0x28
 8013fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	f040 858a 	bne.w	8014afe <_strtod_l+0xb9e>
 8013fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fec:	b1d3      	cbz	r3, 8014024 <_strtod_l+0xc4>
 8013fee:	4642      	mov	r2, r8
 8013ff0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013ff4:	4610      	mov	r0, r2
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	b01f      	add	sp, #124	; 0x7c
 8013ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ffe:	2a20      	cmp	r2, #32
 8014000:	d1cd      	bne.n	8013f9e <_strtod_l+0x3e>
 8014002:	3301      	adds	r3, #1
 8014004:	9319      	str	r3, [sp, #100]	; 0x64
 8014006:	e7bf      	b.n	8013f88 <_strtod_l+0x28>
 8014008:	2a2d      	cmp	r2, #45	; 0x2d
 801400a:	d1c8      	bne.n	8013f9e <_strtod_l+0x3e>
 801400c:	2201      	movs	r2, #1
 801400e:	920a      	str	r2, [sp, #40]	; 0x28
 8014010:	1c5a      	adds	r2, r3, #1
 8014012:	9219      	str	r2, [sp, #100]	; 0x64
 8014014:	785b      	ldrb	r3, [r3, #1]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d1c3      	bne.n	8013fa2 <_strtod_l+0x42>
 801401a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801401c:	9619      	str	r6, [sp, #100]	; 0x64
 801401e:	2b00      	cmp	r3, #0
 8014020:	f040 856b 	bne.w	8014afa <_strtod_l+0xb9a>
 8014024:	4642      	mov	r2, r8
 8014026:	464b      	mov	r3, r9
 8014028:	e7e4      	b.n	8013ff4 <_strtod_l+0x94>
 801402a:	2200      	movs	r2, #0
 801402c:	e7ef      	b.n	801400e <_strtod_l+0xae>
 801402e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014030:	b13a      	cbz	r2, 8014042 <_strtod_l+0xe2>
 8014032:	2135      	movs	r1, #53	; 0x35
 8014034:	a81c      	add	r0, sp, #112	; 0x70
 8014036:	f002 ff69 	bl	8016f0c <__copybits>
 801403a:	4650      	mov	r0, sl
 801403c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801403e:	f002 fb31 	bl	80166a4 <_Bfree>
 8014042:	3e01      	subs	r6, #1
 8014044:	2e04      	cmp	r6, #4
 8014046:	d806      	bhi.n	8014056 <_strtod_l+0xf6>
 8014048:	e8df f006 	tbb	[pc, r6]
 801404c:	1714030a 	.word	0x1714030a
 8014050:	0a          	.byte	0x0a
 8014051:	00          	.byte	0x00
 8014052:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8014056:	0721      	lsls	r1, r4, #28
 8014058:	d5c3      	bpl.n	8013fe2 <_strtod_l+0x82>
 801405a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801405e:	e7c0      	b.n	8013fe2 <_strtod_l+0x82>
 8014060:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014062:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8014066:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801406a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801406e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014072:	e7f0      	b.n	8014056 <_strtod_l+0xf6>
 8014074:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80141f0 <_strtod_l+0x290>
 8014078:	e7ed      	b.n	8014056 <_strtod_l+0xf6>
 801407a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801407e:	f04f 38ff 	mov.w	r8, #4294967295
 8014082:	e7e8      	b.n	8014056 <_strtod_l+0xf6>
 8014084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014086:	1c5a      	adds	r2, r3, #1
 8014088:	9219      	str	r2, [sp, #100]	; 0x64
 801408a:	785b      	ldrb	r3, [r3, #1]
 801408c:	2b30      	cmp	r3, #48	; 0x30
 801408e:	d0f9      	beq.n	8014084 <_strtod_l+0x124>
 8014090:	2b00      	cmp	r3, #0
 8014092:	d0a6      	beq.n	8013fe2 <_strtod_l+0x82>
 8014094:	2301      	movs	r3, #1
 8014096:	9307      	str	r3, [sp, #28]
 8014098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801409a:	220a      	movs	r2, #10
 801409c:	9308      	str	r3, [sp, #32]
 801409e:	2300      	movs	r3, #0
 80140a0:	469b      	mov	fp, r3
 80140a2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80140a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80140a8:	7805      	ldrb	r5, [r0, #0]
 80140aa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80140ae:	b2d9      	uxtb	r1, r3
 80140b0:	2909      	cmp	r1, #9
 80140b2:	d927      	bls.n	8014104 <_strtod_l+0x1a4>
 80140b4:	4622      	mov	r2, r4
 80140b6:	4639      	mov	r1, r7
 80140b8:	f003 fa11 	bl	80174de <strncmp>
 80140bc:	2800      	cmp	r0, #0
 80140be:	d033      	beq.n	8014128 <_strtod_l+0x1c8>
 80140c0:	2000      	movs	r0, #0
 80140c2:	462a      	mov	r2, r5
 80140c4:	465c      	mov	r4, fp
 80140c6:	4603      	mov	r3, r0
 80140c8:	9004      	str	r0, [sp, #16]
 80140ca:	2a65      	cmp	r2, #101	; 0x65
 80140cc:	d001      	beq.n	80140d2 <_strtod_l+0x172>
 80140ce:	2a45      	cmp	r2, #69	; 0x45
 80140d0:	d114      	bne.n	80140fc <_strtod_l+0x19c>
 80140d2:	b91c      	cbnz	r4, 80140dc <_strtod_l+0x17c>
 80140d4:	9a07      	ldr	r2, [sp, #28]
 80140d6:	4302      	orrs	r2, r0
 80140d8:	d09f      	beq.n	801401a <_strtod_l+0xba>
 80140da:	2400      	movs	r4, #0
 80140dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80140de:	1c72      	adds	r2, r6, #1
 80140e0:	9219      	str	r2, [sp, #100]	; 0x64
 80140e2:	7872      	ldrb	r2, [r6, #1]
 80140e4:	2a2b      	cmp	r2, #43	; 0x2b
 80140e6:	d079      	beq.n	80141dc <_strtod_l+0x27c>
 80140e8:	2a2d      	cmp	r2, #45	; 0x2d
 80140ea:	f000 8083 	beq.w	80141f4 <_strtod_l+0x294>
 80140ee:	2700      	movs	r7, #0
 80140f0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80140f4:	2909      	cmp	r1, #9
 80140f6:	f240 8083 	bls.w	8014200 <_strtod_l+0x2a0>
 80140fa:	9619      	str	r6, [sp, #100]	; 0x64
 80140fc:	2500      	movs	r5, #0
 80140fe:	e09f      	b.n	8014240 <_strtod_l+0x2e0>
 8014100:	2300      	movs	r3, #0
 8014102:	e7c8      	b.n	8014096 <_strtod_l+0x136>
 8014104:	f1bb 0f08 	cmp.w	fp, #8
 8014108:	bfd5      	itete	le
 801410a:	9906      	ldrle	r1, [sp, #24]
 801410c:	9905      	ldrgt	r1, [sp, #20]
 801410e:	fb02 3301 	mlale	r3, r2, r1, r3
 8014112:	fb02 3301 	mlagt	r3, r2, r1, r3
 8014116:	f100 0001 	add.w	r0, r0, #1
 801411a:	bfd4      	ite	le
 801411c:	9306      	strle	r3, [sp, #24]
 801411e:	9305      	strgt	r3, [sp, #20]
 8014120:	f10b 0b01 	add.w	fp, fp, #1
 8014124:	9019      	str	r0, [sp, #100]	; 0x64
 8014126:	e7be      	b.n	80140a6 <_strtod_l+0x146>
 8014128:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801412a:	191a      	adds	r2, r3, r4
 801412c:	9219      	str	r2, [sp, #100]	; 0x64
 801412e:	5d1a      	ldrb	r2, [r3, r4]
 8014130:	f1bb 0f00 	cmp.w	fp, #0
 8014134:	d036      	beq.n	80141a4 <_strtod_l+0x244>
 8014136:	465c      	mov	r4, fp
 8014138:	9004      	str	r0, [sp, #16]
 801413a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801413e:	2b09      	cmp	r3, #9
 8014140:	d912      	bls.n	8014168 <_strtod_l+0x208>
 8014142:	2301      	movs	r3, #1
 8014144:	e7c1      	b.n	80140ca <_strtod_l+0x16a>
 8014146:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014148:	3001      	adds	r0, #1
 801414a:	1c5a      	adds	r2, r3, #1
 801414c:	9219      	str	r2, [sp, #100]	; 0x64
 801414e:	785a      	ldrb	r2, [r3, #1]
 8014150:	2a30      	cmp	r2, #48	; 0x30
 8014152:	d0f8      	beq.n	8014146 <_strtod_l+0x1e6>
 8014154:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014158:	2b08      	cmp	r3, #8
 801415a:	f200 84d5 	bhi.w	8014b08 <_strtod_l+0xba8>
 801415e:	9004      	str	r0, [sp, #16]
 8014160:	2000      	movs	r0, #0
 8014162:	4604      	mov	r4, r0
 8014164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014166:	9308      	str	r3, [sp, #32]
 8014168:	3a30      	subs	r2, #48	; 0x30
 801416a:	f100 0301 	add.w	r3, r0, #1
 801416e:	d013      	beq.n	8014198 <_strtod_l+0x238>
 8014170:	9904      	ldr	r1, [sp, #16]
 8014172:	1905      	adds	r5, r0, r4
 8014174:	4419      	add	r1, r3
 8014176:	9104      	str	r1, [sp, #16]
 8014178:	4623      	mov	r3, r4
 801417a:	210a      	movs	r1, #10
 801417c:	42ab      	cmp	r3, r5
 801417e:	d113      	bne.n	80141a8 <_strtod_l+0x248>
 8014180:	1823      	adds	r3, r4, r0
 8014182:	2b08      	cmp	r3, #8
 8014184:	f104 0401 	add.w	r4, r4, #1
 8014188:	4404      	add	r4, r0
 801418a:	dc1b      	bgt.n	80141c4 <_strtod_l+0x264>
 801418c:	230a      	movs	r3, #10
 801418e:	9906      	ldr	r1, [sp, #24]
 8014190:	fb03 2301 	mla	r3, r3, r1, r2
 8014194:	9306      	str	r3, [sp, #24]
 8014196:	2300      	movs	r3, #0
 8014198:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801419a:	4618      	mov	r0, r3
 801419c:	1c51      	adds	r1, r2, #1
 801419e:	9119      	str	r1, [sp, #100]	; 0x64
 80141a0:	7852      	ldrb	r2, [r2, #1]
 80141a2:	e7ca      	b.n	801413a <_strtod_l+0x1da>
 80141a4:	4658      	mov	r0, fp
 80141a6:	e7d3      	b.n	8014150 <_strtod_l+0x1f0>
 80141a8:	2b08      	cmp	r3, #8
 80141aa:	dc04      	bgt.n	80141b6 <_strtod_l+0x256>
 80141ac:	9f06      	ldr	r7, [sp, #24]
 80141ae:	434f      	muls	r7, r1
 80141b0:	9706      	str	r7, [sp, #24]
 80141b2:	3301      	adds	r3, #1
 80141b4:	e7e2      	b.n	801417c <_strtod_l+0x21c>
 80141b6:	1c5f      	adds	r7, r3, #1
 80141b8:	2f10      	cmp	r7, #16
 80141ba:	bfde      	ittt	le
 80141bc:	9f05      	ldrle	r7, [sp, #20]
 80141be:	434f      	mulle	r7, r1
 80141c0:	9705      	strle	r7, [sp, #20]
 80141c2:	e7f6      	b.n	80141b2 <_strtod_l+0x252>
 80141c4:	2c10      	cmp	r4, #16
 80141c6:	bfdf      	itttt	le
 80141c8:	230a      	movle	r3, #10
 80141ca:	9905      	ldrle	r1, [sp, #20]
 80141cc:	fb03 2301 	mlale	r3, r3, r1, r2
 80141d0:	9305      	strle	r3, [sp, #20]
 80141d2:	e7e0      	b.n	8014196 <_strtod_l+0x236>
 80141d4:	2300      	movs	r3, #0
 80141d6:	9304      	str	r3, [sp, #16]
 80141d8:	2301      	movs	r3, #1
 80141da:	e77b      	b.n	80140d4 <_strtod_l+0x174>
 80141dc:	2700      	movs	r7, #0
 80141de:	1cb2      	adds	r2, r6, #2
 80141e0:	9219      	str	r2, [sp, #100]	; 0x64
 80141e2:	78b2      	ldrb	r2, [r6, #2]
 80141e4:	e784      	b.n	80140f0 <_strtod_l+0x190>
 80141e6:	bf00      	nop
 80141e8:	08017d8c 	.word	0x08017d8c
 80141ec:	08017ae0 	.word	0x08017ae0
 80141f0:	7ff00000 	.word	0x7ff00000
 80141f4:	2701      	movs	r7, #1
 80141f6:	e7f2      	b.n	80141de <_strtod_l+0x27e>
 80141f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80141fa:	1c51      	adds	r1, r2, #1
 80141fc:	9119      	str	r1, [sp, #100]	; 0x64
 80141fe:	7852      	ldrb	r2, [r2, #1]
 8014200:	2a30      	cmp	r2, #48	; 0x30
 8014202:	d0f9      	beq.n	80141f8 <_strtod_l+0x298>
 8014204:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014208:	2908      	cmp	r1, #8
 801420a:	f63f af77 	bhi.w	80140fc <_strtod_l+0x19c>
 801420e:	f04f 0e0a 	mov.w	lr, #10
 8014212:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014216:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014218:	9209      	str	r2, [sp, #36]	; 0x24
 801421a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801421c:	1c51      	adds	r1, r2, #1
 801421e:	9119      	str	r1, [sp, #100]	; 0x64
 8014220:	7852      	ldrb	r2, [r2, #1]
 8014222:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8014226:	2d09      	cmp	r5, #9
 8014228:	d935      	bls.n	8014296 <_strtod_l+0x336>
 801422a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801422c:	1b49      	subs	r1, r1, r5
 801422e:	2908      	cmp	r1, #8
 8014230:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8014234:	dc02      	bgt.n	801423c <_strtod_l+0x2dc>
 8014236:	4565      	cmp	r5, ip
 8014238:	bfa8      	it	ge
 801423a:	4665      	movge	r5, ip
 801423c:	b107      	cbz	r7, 8014240 <_strtod_l+0x2e0>
 801423e:	426d      	negs	r5, r5
 8014240:	2c00      	cmp	r4, #0
 8014242:	d14c      	bne.n	80142de <_strtod_l+0x37e>
 8014244:	9907      	ldr	r1, [sp, #28]
 8014246:	4301      	orrs	r1, r0
 8014248:	f47f aecb 	bne.w	8013fe2 <_strtod_l+0x82>
 801424c:	2b00      	cmp	r3, #0
 801424e:	f47f aee4 	bne.w	801401a <_strtod_l+0xba>
 8014252:	2a69      	cmp	r2, #105	; 0x69
 8014254:	d026      	beq.n	80142a4 <_strtod_l+0x344>
 8014256:	dc23      	bgt.n	80142a0 <_strtod_l+0x340>
 8014258:	2a49      	cmp	r2, #73	; 0x49
 801425a:	d023      	beq.n	80142a4 <_strtod_l+0x344>
 801425c:	2a4e      	cmp	r2, #78	; 0x4e
 801425e:	f47f aedc 	bne.w	801401a <_strtod_l+0xba>
 8014262:	499d      	ldr	r1, [pc, #628]	; (80144d8 <_strtod_l+0x578>)
 8014264:	a819      	add	r0, sp, #100	; 0x64
 8014266:	f002 f88b 	bl	8016380 <__match>
 801426a:	2800      	cmp	r0, #0
 801426c:	f43f aed5 	beq.w	801401a <_strtod_l+0xba>
 8014270:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	2b28      	cmp	r3, #40	; 0x28
 8014276:	d12c      	bne.n	80142d2 <_strtod_l+0x372>
 8014278:	4998      	ldr	r1, [pc, #608]	; (80144dc <_strtod_l+0x57c>)
 801427a:	aa1c      	add	r2, sp, #112	; 0x70
 801427c:	a819      	add	r0, sp, #100	; 0x64
 801427e:	f002 f893 	bl	80163a8 <__hexnan>
 8014282:	2805      	cmp	r0, #5
 8014284:	d125      	bne.n	80142d2 <_strtod_l+0x372>
 8014286:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014288:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 801428c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014290:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014294:	e6a5      	b.n	8013fe2 <_strtod_l+0x82>
 8014296:	fb0e 2c0c 	mla	ip, lr, ip, r2
 801429a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801429e:	e7bc      	b.n	801421a <_strtod_l+0x2ba>
 80142a0:	2a6e      	cmp	r2, #110	; 0x6e
 80142a2:	e7dc      	b.n	801425e <_strtod_l+0x2fe>
 80142a4:	498e      	ldr	r1, [pc, #568]	; (80144e0 <_strtod_l+0x580>)
 80142a6:	a819      	add	r0, sp, #100	; 0x64
 80142a8:	f002 f86a 	bl	8016380 <__match>
 80142ac:	2800      	cmp	r0, #0
 80142ae:	f43f aeb4 	beq.w	801401a <_strtod_l+0xba>
 80142b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80142b4:	498b      	ldr	r1, [pc, #556]	; (80144e4 <_strtod_l+0x584>)
 80142b6:	3b01      	subs	r3, #1
 80142b8:	a819      	add	r0, sp, #100	; 0x64
 80142ba:	9319      	str	r3, [sp, #100]	; 0x64
 80142bc:	f002 f860 	bl	8016380 <__match>
 80142c0:	b910      	cbnz	r0, 80142c8 <_strtod_l+0x368>
 80142c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80142c4:	3301      	adds	r3, #1
 80142c6:	9319      	str	r3, [sp, #100]	; 0x64
 80142c8:	f04f 0800 	mov.w	r8, #0
 80142cc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80144e8 <_strtod_l+0x588>
 80142d0:	e687      	b.n	8013fe2 <_strtod_l+0x82>
 80142d2:	4886      	ldr	r0, [pc, #536]	; (80144ec <_strtod_l+0x58c>)
 80142d4:	f003 f8aa 	bl	801742c <nan>
 80142d8:	4680      	mov	r8, r0
 80142da:	4689      	mov	r9, r1
 80142dc:	e681      	b.n	8013fe2 <_strtod_l+0x82>
 80142de:	9b04      	ldr	r3, [sp, #16]
 80142e0:	f1bb 0f00 	cmp.w	fp, #0
 80142e4:	bf08      	it	eq
 80142e6:	46a3      	moveq	fp, r4
 80142e8:	1aeb      	subs	r3, r5, r3
 80142ea:	2c10      	cmp	r4, #16
 80142ec:	9806      	ldr	r0, [sp, #24]
 80142ee:	4626      	mov	r6, r4
 80142f0:	9307      	str	r3, [sp, #28]
 80142f2:	bfa8      	it	ge
 80142f4:	2610      	movge	r6, #16
 80142f6:	f7fc f8e1 	bl	80104bc <__aeabi_ui2d>
 80142fa:	2c09      	cmp	r4, #9
 80142fc:	4680      	mov	r8, r0
 80142fe:	4689      	mov	r9, r1
 8014300:	dd13      	ble.n	801432a <_strtod_l+0x3ca>
 8014302:	4b7b      	ldr	r3, [pc, #492]	; (80144f0 <_strtod_l+0x590>)
 8014304:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014308:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801430c:	f7fc f950 	bl	80105b0 <__aeabi_dmul>
 8014310:	4680      	mov	r8, r0
 8014312:	9805      	ldr	r0, [sp, #20]
 8014314:	4689      	mov	r9, r1
 8014316:	f7fc f8d1 	bl	80104bc <__aeabi_ui2d>
 801431a:	4602      	mov	r2, r0
 801431c:	460b      	mov	r3, r1
 801431e:	4640      	mov	r0, r8
 8014320:	4649      	mov	r1, r9
 8014322:	f7fb ff8f 	bl	8010244 <__adddf3>
 8014326:	4680      	mov	r8, r0
 8014328:	4689      	mov	r9, r1
 801432a:	2c0f      	cmp	r4, #15
 801432c:	dc36      	bgt.n	801439c <_strtod_l+0x43c>
 801432e:	9b07      	ldr	r3, [sp, #28]
 8014330:	2b00      	cmp	r3, #0
 8014332:	f43f ae56 	beq.w	8013fe2 <_strtod_l+0x82>
 8014336:	dd22      	ble.n	801437e <_strtod_l+0x41e>
 8014338:	2b16      	cmp	r3, #22
 801433a:	dc09      	bgt.n	8014350 <_strtod_l+0x3f0>
 801433c:	496c      	ldr	r1, [pc, #432]	; (80144f0 <_strtod_l+0x590>)
 801433e:	4642      	mov	r2, r8
 8014340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014344:	464b      	mov	r3, r9
 8014346:	e9d1 0100 	ldrd	r0, r1, [r1]
 801434a:	f7fc f931 	bl	80105b0 <__aeabi_dmul>
 801434e:	e7c3      	b.n	80142d8 <_strtod_l+0x378>
 8014350:	9a07      	ldr	r2, [sp, #28]
 8014352:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014356:	4293      	cmp	r3, r2
 8014358:	db20      	blt.n	801439c <_strtod_l+0x43c>
 801435a:	4d65      	ldr	r5, [pc, #404]	; (80144f0 <_strtod_l+0x590>)
 801435c:	f1c4 040f 	rsb	r4, r4, #15
 8014360:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014364:	4642      	mov	r2, r8
 8014366:	e9d1 0100 	ldrd	r0, r1, [r1]
 801436a:	464b      	mov	r3, r9
 801436c:	f7fc f920 	bl	80105b0 <__aeabi_dmul>
 8014370:	9b07      	ldr	r3, [sp, #28]
 8014372:	1b1c      	subs	r4, r3, r4
 8014374:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8014378:	e9d5 2300 	ldrd	r2, r3, [r5]
 801437c:	e7e5      	b.n	801434a <_strtod_l+0x3ea>
 801437e:	9b07      	ldr	r3, [sp, #28]
 8014380:	3316      	adds	r3, #22
 8014382:	db0b      	blt.n	801439c <_strtod_l+0x43c>
 8014384:	9b04      	ldr	r3, [sp, #16]
 8014386:	4640      	mov	r0, r8
 8014388:	1b5d      	subs	r5, r3, r5
 801438a:	4b59      	ldr	r3, [pc, #356]	; (80144f0 <_strtod_l+0x590>)
 801438c:	4649      	mov	r1, r9
 801438e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014392:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014396:	f7fc fa35 	bl	8010804 <__aeabi_ddiv>
 801439a:	e79d      	b.n	80142d8 <_strtod_l+0x378>
 801439c:	9b07      	ldr	r3, [sp, #28]
 801439e:	1ba6      	subs	r6, r4, r6
 80143a0:	441e      	add	r6, r3
 80143a2:	2e00      	cmp	r6, #0
 80143a4:	dd74      	ble.n	8014490 <_strtod_l+0x530>
 80143a6:	f016 030f 	ands.w	r3, r6, #15
 80143aa:	d00a      	beq.n	80143c2 <_strtod_l+0x462>
 80143ac:	4950      	ldr	r1, [pc, #320]	; (80144f0 <_strtod_l+0x590>)
 80143ae:	4642      	mov	r2, r8
 80143b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80143b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143b8:	464b      	mov	r3, r9
 80143ba:	f7fc f8f9 	bl	80105b0 <__aeabi_dmul>
 80143be:	4680      	mov	r8, r0
 80143c0:	4689      	mov	r9, r1
 80143c2:	f036 060f 	bics.w	r6, r6, #15
 80143c6:	d052      	beq.n	801446e <_strtod_l+0x50e>
 80143c8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80143cc:	dd27      	ble.n	801441e <_strtod_l+0x4be>
 80143ce:	f04f 0b00 	mov.w	fp, #0
 80143d2:	f8cd b010 	str.w	fp, [sp, #16]
 80143d6:	f8cd b020 	str.w	fp, [sp, #32]
 80143da:	f8cd b018 	str.w	fp, [sp, #24]
 80143de:	2322      	movs	r3, #34	; 0x22
 80143e0:	f04f 0800 	mov.w	r8, #0
 80143e4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80144e8 <_strtod_l+0x588>
 80143e8:	f8ca 3000 	str.w	r3, [sl]
 80143ec:	9b08      	ldr	r3, [sp, #32]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f43f adf7 	beq.w	8013fe2 <_strtod_l+0x82>
 80143f4:	4650      	mov	r0, sl
 80143f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80143f8:	f002 f954 	bl	80166a4 <_Bfree>
 80143fc:	4650      	mov	r0, sl
 80143fe:	9906      	ldr	r1, [sp, #24]
 8014400:	f002 f950 	bl	80166a4 <_Bfree>
 8014404:	4650      	mov	r0, sl
 8014406:	9904      	ldr	r1, [sp, #16]
 8014408:	f002 f94c 	bl	80166a4 <_Bfree>
 801440c:	4650      	mov	r0, sl
 801440e:	9908      	ldr	r1, [sp, #32]
 8014410:	f002 f948 	bl	80166a4 <_Bfree>
 8014414:	4659      	mov	r1, fp
 8014416:	4650      	mov	r0, sl
 8014418:	f002 f944 	bl	80166a4 <_Bfree>
 801441c:	e5e1      	b.n	8013fe2 <_strtod_l+0x82>
 801441e:	4b35      	ldr	r3, [pc, #212]	; (80144f4 <_strtod_l+0x594>)
 8014420:	4640      	mov	r0, r8
 8014422:	9305      	str	r3, [sp, #20]
 8014424:	2300      	movs	r3, #0
 8014426:	4649      	mov	r1, r9
 8014428:	461f      	mov	r7, r3
 801442a:	1136      	asrs	r6, r6, #4
 801442c:	2e01      	cmp	r6, #1
 801442e:	dc21      	bgt.n	8014474 <_strtod_l+0x514>
 8014430:	b10b      	cbz	r3, 8014436 <_strtod_l+0x4d6>
 8014432:	4680      	mov	r8, r0
 8014434:	4689      	mov	r9, r1
 8014436:	4b2f      	ldr	r3, [pc, #188]	; (80144f4 <_strtod_l+0x594>)
 8014438:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801443c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014440:	4642      	mov	r2, r8
 8014442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014446:	464b      	mov	r3, r9
 8014448:	f7fc f8b2 	bl	80105b0 <__aeabi_dmul>
 801444c:	4b26      	ldr	r3, [pc, #152]	; (80144e8 <_strtod_l+0x588>)
 801444e:	460a      	mov	r2, r1
 8014450:	400b      	ands	r3, r1
 8014452:	4929      	ldr	r1, [pc, #164]	; (80144f8 <_strtod_l+0x598>)
 8014454:	4680      	mov	r8, r0
 8014456:	428b      	cmp	r3, r1
 8014458:	d8b9      	bhi.n	80143ce <_strtod_l+0x46e>
 801445a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801445e:	428b      	cmp	r3, r1
 8014460:	bf86      	itte	hi
 8014462:	f04f 38ff 	movhi.w	r8, #4294967295
 8014466:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80144fc <_strtod_l+0x59c>
 801446a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801446e:	2300      	movs	r3, #0
 8014470:	9305      	str	r3, [sp, #20]
 8014472:	e07f      	b.n	8014574 <_strtod_l+0x614>
 8014474:	07f2      	lsls	r2, r6, #31
 8014476:	d505      	bpl.n	8014484 <_strtod_l+0x524>
 8014478:	9b05      	ldr	r3, [sp, #20]
 801447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447e:	f7fc f897 	bl	80105b0 <__aeabi_dmul>
 8014482:	2301      	movs	r3, #1
 8014484:	9a05      	ldr	r2, [sp, #20]
 8014486:	3701      	adds	r7, #1
 8014488:	3208      	adds	r2, #8
 801448a:	1076      	asrs	r6, r6, #1
 801448c:	9205      	str	r2, [sp, #20]
 801448e:	e7cd      	b.n	801442c <_strtod_l+0x4cc>
 8014490:	d0ed      	beq.n	801446e <_strtod_l+0x50e>
 8014492:	4276      	negs	r6, r6
 8014494:	f016 020f 	ands.w	r2, r6, #15
 8014498:	d00a      	beq.n	80144b0 <_strtod_l+0x550>
 801449a:	4b15      	ldr	r3, [pc, #84]	; (80144f0 <_strtod_l+0x590>)
 801449c:	4640      	mov	r0, r8
 801449e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80144a2:	4649      	mov	r1, r9
 80144a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a8:	f7fc f9ac 	bl	8010804 <__aeabi_ddiv>
 80144ac:	4680      	mov	r8, r0
 80144ae:	4689      	mov	r9, r1
 80144b0:	1136      	asrs	r6, r6, #4
 80144b2:	d0dc      	beq.n	801446e <_strtod_l+0x50e>
 80144b4:	2e1f      	cmp	r6, #31
 80144b6:	dd23      	ble.n	8014500 <_strtod_l+0x5a0>
 80144b8:	f04f 0b00 	mov.w	fp, #0
 80144bc:	f8cd b010 	str.w	fp, [sp, #16]
 80144c0:	f8cd b020 	str.w	fp, [sp, #32]
 80144c4:	f8cd b018 	str.w	fp, [sp, #24]
 80144c8:	2322      	movs	r3, #34	; 0x22
 80144ca:	f04f 0800 	mov.w	r8, #0
 80144ce:	f04f 0900 	mov.w	r9, #0
 80144d2:	f8ca 3000 	str.w	r3, [sl]
 80144d6:	e789      	b.n	80143ec <_strtod_l+0x48c>
 80144d8:	08017ab1 	.word	0x08017ab1
 80144dc:	08017af4 	.word	0x08017af4
 80144e0:	08017aa9 	.word	0x08017aa9
 80144e4:	08017c34 	.word	0x08017c34
 80144e8:	7ff00000 	.word	0x7ff00000
 80144ec:	08017f48 	.word	0x08017f48
 80144f0:	08017e28 	.word	0x08017e28
 80144f4:	08017e00 	.word	0x08017e00
 80144f8:	7ca00000 	.word	0x7ca00000
 80144fc:	7fefffff 	.word	0x7fefffff
 8014500:	f016 0310 	ands.w	r3, r6, #16
 8014504:	bf18      	it	ne
 8014506:	236a      	movne	r3, #106	; 0x6a
 8014508:	4640      	mov	r0, r8
 801450a:	9305      	str	r3, [sp, #20]
 801450c:	4649      	mov	r1, r9
 801450e:	2300      	movs	r3, #0
 8014510:	4fb0      	ldr	r7, [pc, #704]	; (80147d4 <_strtod_l+0x874>)
 8014512:	07f2      	lsls	r2, r6, #31
 8014514:	d504      	bpl.n	8014520 <_strtod_l+0x5c0>
 8014516:	e9d7 2300 	ldrd	r2, r3, [r7]
 801451a:	f7fc f849 	bl	80105b0 <__aeabi_dmul>
 801451e:	2301      	movs	r3, #1
 8014520:	1076      	asrs	r6, r6, #1
 8014522:	f107 0708 	add.w	r7, r7, #8
 8014526:	d1f4      	bne.n	8014512 <_strtod_l+0x5b2>
 8014528:	b10b      	cbz	r3, 801452e <_strtod_l+0x5ce>
 801452a:	4680      	mov	r8, r0
 801452c:	4689      	mov	r9, r1
 801452e:	9b05      	ldr	r3, [sp, #20]
 8014530:	b1c3      	cbz	r3, 8014564 <_strtod_l+0x604>
 8014532:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014536:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801453a:	2b00      	cmp	r3, #0
 801453c:	4649      	mov	r1, r9
 801453e:	dd11      	ble.n	8014564 <_strtod_l+0x604>
 8014540:	2b1f      	cmp	r3, #31
 8014542:	f340 8127 	ble.w	8014794 <_strtod_l+0x834>
 8014546:	2b34      	cmp	r3, #52	; 0x34
 8014548:	bfd8      	it	le
 801454a:	f04f 33ff 	movle.w	r3, #4294967295
 801454e:	f04f 0800 	mov.w	r8, #0
 8014552:	bfcf      	iteee	gt
 8014554:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014558:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801455c:	fa03 f202 	lslle.w	r2, r3, r2
 8014560:	ea02 0901 	andle.w	r9, r2, r1
 8014564:	2200      	movs	r2, #0
 8014566:	2300      	movs	r3, #0
 8014568:	4640      	mov	r0, r8
 801456a:	4649      	mov	r1, r9
 801456c:	f7fc fa88 	bl	8010a80 <__aeabi_dcmpeq>
 8014570:	2800      	cmp	r0, #0
 8014572:	d1a1      	bne.n	80144b8 <_strtod_l+0x558>
 8014574:	9b06      	ldr	r3, [sp, #24]
 8014576:	465a      	mov	r2, fp
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	4650      	mov	r0, sl
 801457c:	4623      	mov	r3, r4
 801457e:	9908      	ldr	r1, [sp, #32]
 8014580:	f002 f8f8 	bl	8016774 <__s2b>
 8014584:	9008      	str	r0, [sp, #32]
 8014586:	2800      	cmp	r0, #0
 8014588:	f43f af21 	beq.w	80143ce <_strtod_l+0x46e>
 801458c:	9b04      	ldr	r3, [sp, #16]
 801458e:	f04f 0b00 	mov.w	fp, #0
 8014592:	1b5d      	subs	r5, r3, r5
 8014594:	9b07      	ldr	r3, [sp, #28]
 8014596:	f8cd b010 	str.w	fp, [sp, #16]
 801459a:	2b00      	cmp	r3, #0
 801459c:	bfb4      	ite	lt
 801459e:	462b      	movlt	r3, r5
 80145a0:	2300      	movge	r3, #0
 80145a2:	930e      	str	r3, [sp, #56]	; 0x38
 80145a4:	9b07      	ldr	r3, [sp, #28]
 80145a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80145aa:	9314      	str	r3, [sp, #80]	; 0x50
 80145ac:	9b08      	ldr	r3, [sp, #32]
 80145ae:	4650      	mov	r0, sl
 80145b0:	6859      	ldr	r1, [r3, #4]
 80145b2:	f002 f837 	bl	8016624 <_Balloc>
 80145b6:	9006      	str	r0, [sp, #24]
 80145b8:	2800      	cmp	r0, #0
 80145ba:	f43f af10 	beq.w	80143de <_strtod_l+0x47e>
 80145be:	9b08      	ldr	r3, [sp, #32]
 80145c0:	300c      	adds	r0, #12
 80145c2:	691a      	ldr	r2, [r3, #16]
 80145c4:	f103 010c 	add.w	r1, r3, #12
 80145c8:	3202      	adds	r2, #2
 80145ca:	0092      	lsls	r2, r2, #2
 80145cc:	f002 f81c 	bl	8016608 <memcpy>
 80145d0:	ab1c      	add	r3, sp, #112	; 0x70
 80145d2:	9301      	str	r3, [sp, #4]
 80145d4:	ab1b      	add	r3, sp, #108	; 0x6c
 80145d6:	9300      	str	r3, [sp, #0]
 80145d8:	4642      	mov	r2, r8
 80145da:	464b      	mov	r3, r9
 80145dc:	4650      	mov	r0, sl
 80145de:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80145e2:	f002 fc09 	bl	8016df8 <__d2b>
 80145e6:	901a      	str	r0, [sp, #104]	; 0x68
 80145e8:	2800      	cmp	r0, #0
 80145ea:	f43f aef8 	beq.w	80143de <_strtod_l+0x47e>
 80145ee:	2101      	movs	r1, #1
 80145f0:	4650      	mov	r0, sl
 80145f2:	f002 f957 	bl	80168a4 <__i2b>
 80145f6:	4603      	mov	r3, r0
 80145f8:	9004      	str	r0, [sp, #16]
 80145fa:	2800      	cmp	r0, #0
 80145fc:	f43f aeef 	beq.w	80143de <_strtod_l+0x47e>
 8014600:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014602:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014604:	2d00      	cmp	r5, #0
 8014606:	bfab      	itete	ge
 8014608:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801460a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 801460c:	18ee      	addge	r6, r5, r3
 801460e:	1b5c      	sublt	r4, r3, r5
 8014610:	9b05      	ldr	r3, [sp, #20]
 8014612:	bfa8      	it	ge
 8014614:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8014616:	eba5 0503 	sub.w	r5, r5, r3
 801461a:	4415      	add	r5, r2
 801461c:	4b6e      	ldr	r3, [pc, #440]	; (80147d8 <_strtod_l+0x878>)
 801461e:	f105 35ff 	add.w	r5, r5, #4294967295
 8014622:	bfb8      	it	lt
 8014624:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8014626:	429d      	cmp	r5, r3
 8014628:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801462c:	f280 80c4 	bge.w	80147b8 <_strtod_l+0x858>
 8014630:	1b5b      	subs	r3, r3, r5
 8014632:	2b1f      	cmp	r3, #31
 8014634:	f04f 0701 	mov.w	r7, #1
 8014638:	eba2 0203 	sub.w	r2, r2, r3
 801463c:	f300 80b1 	bgt.w	80147a2 <_strtod_l+0x842>
 8014640:	2500      	movs	r5, #0
 8014642:	fa07 f303 	lsl.w	r3, r7, r3
 8014646:	930f      	str	r3, [sp, #60]	; 0x3c
 8014648:	18b7      	adds	r7, r6, r2
 801464a:	9b05      	ldr	r3, [sp, #20]
 801464c:	42be      	cmp	r6, r7
 801464e:	4414      	add	r4, r2
 8014650:	441c      	add	r4, r3
 8014652:	4633      	mov	r3, r6
 8014654:	bfa8      	it	ge
 8014656:	463b      	movge	r3, r7
 8014658:	42a3      	cmp	r3, r4
 801465a:	bfa8      	it	ge
 801465c:	4623      	movge	r3, r4
 801465e:	2b00      	cmp	r3, #0
 8014660:	bfc2      	ittt	gt
 8014662:	1aff      	subgt	r7, r7, r3
 8014664:	1ae4      	subgt	r4, r4, r3
 8014666:	1af6      	subgt	r6, r6, r3
 8014668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801466a:	2b00      	cmp	r3, #0
 801466c:	dd17      	ble.n	801469e <_strtod_l+0x73e>
 801466e:	461a      	mov	r2, r3
 8014670:	4650      	mov	r0, sl
 8014672:	9904      	ldr	r1, [sp, #16]
 8014674:	f002 f9d4 	bl	8016a20 <__pow5mult>
 8014678:	9004      	str	r0, [sp, #16]
 801467a:	2800      	cmp	r0, #0
 801467c:	f43f aeaf 	beq.w	80143de <_strtod_l+0x47e>
 8014680:	4601      	mov	r1, r0
 8014682:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014684:	4650      	mov	r0, sl
 8014686:	f002 f923 	bl	80168d0 <__multiply>
 801468a:	9009      	str	r0, [sp, #36]	; 0x24
 801468c:	2800      	cmp	r0, #0
 801468e:	f43f aea6 	beq.w	80143de <_strtod_l+0x47e>
 8014692:	4650      	mov	r0, sl
 8014694:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014696:	f002 f805 	bl	80166a4 <_Bfree>
 801469a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801469c:	931a      	str	r3, [sp, #104]	; 0x68
 801469e:	2f00      	cmp	r7, #0
 80146a0:	f300 808e 	bgt.w	80147c0 <_strtod_l+0x860>
 80146a4:	9b07      	ldr	r3, [sp, #28]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	dd08      	ble.n	80146bc <_strtod_l+0x75c>
 80146aa:	4650      	mov	r0, sl
 80146ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80146ae:	9906      	ldr	r1, [sp, #24]
 80146b0:	f002 f9b6 	bl	8016a20 <__pow5mult>
 80146b4:	9006      	str	r0, [sp, #24]
 80146b6:	2800      	cmp	r0, #0
 80146b8:	f43f ae91 	beq.w	80143de <_strtod_l+0x47e>
 80146bc:	2c00      	cmp	r4, #0
 80146be:	dd08      	ble.n	80146d2 <_strtod_l+0x772>
 80146c0:	4622      	mov	r2, r4
 80146c2:	4650      	mov	r0, sl
 80146c4:	9906      	ldr	r1, [sp, #24]
 80146c6:	f002 fa05 	bl	8016ad4 <__lshift>
 80146ca:	9006      	str	r0, [sp, #24]
 80146cc:	2800      	cmp	r0, #0
 80146ce:	f43f ae86 	beq.w	80143de <_strtod_l+0x47e>
 80146d2:	2e00      	cmp	r6, #0
 80146d4:	dd08      	ble.n	80146e8 <_strtod_l+0x788>
 80146d6:	4632      	mov	r2, r6
 80146d8:	4650      	mov	r0, sl
 80146da:	9904      	ldr	r1, [sp, #16]
 80146dc:	f002 f9fa 	bl	8016ad4 <__lshift>
 80146e0:	9004      	str	r0, [sp, #16]
 80146e2:	2800      	cmp	r0, #0
 80146e4:	f43f ae7b 	beq.w	80143de <_strtod_l+0x47e>
 80146e8:	4650      	mov	r0, sl
 80146ea:	9a06      	ldr	r2, [sp, #24]
 80146ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80146ee:	f002 fa7d 	bl	8016bec <__mdiff>
 80146f2:	4683      	mov	fp, r0
 80146f4:	2800      	cmp	r0, #0
 80146f6:	f43f ae72 	beq.w	80143de <_strtod_l+0x47e>
 80146fa:	2400      	movs	r4, #0
 80146fc:	68c3      	ldr	r3, [r0, #12]
 80146fe:	9904      	ldr	r1, [sp, #16]
 8014700:	60c4      	str	r4, [r0, #12]
 8014702:	930b      	str	r3, [sp, #44]	; 0x2c
 8014704:	f002 fa56 	bl	8016bb4 <__mcmp>
 8014708:	42a0      	cmp	r0, r4
 801470a:	da6b      	bge.n	80147e4 <_strtod_l+0x884>
 801470c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801470e:	ea53 0308 	orrs.w	r3, r3, r8
 8014712:	f040 8091 	bne.w	8014838 <_strtod_l+0x8d8>
 8014716:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801471a:	2b00      	cmp	r3, #0
 801471c:	f040 808c 	bne.w	8014838 <_strtod_l+0x8d8>
 8014720:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014724:	0d1b      	lsrs	r3, r3, #20
 8014726:	051b      	lsls	r3, r3, #20
 8014728:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801472c:	f240 8084 	bls.w	8014838 <_strtod_l+0x8d8>
 8014730:	f8db 3014 	ldr.w	r3, [fp, #20]
 8014734:	b91b      	cbnz	r3, 801473e <_strtod_l+0x7de>
 8014736:	f8db 3010 	ldr.w	r3, [fp, #16]
 801473a:	2b01      	cmp	r3, #1
 801473c:	dd7c      	ble.n	8014838 <_strtod_l+0x8d8>
 801473e:	4659      	mov	r1, fp
 8014740:	2201      	movs	r2, #1
 8014742:	4650      	mov	r0, sl
 8014744:	f002 f9c6 	bl	8016ad4 <__lshift>
 8014748:	9904      	ldr	r1, [sp, #16]
 801474a:	4683      	mov	fp, r0
 801474c:	f002 fa32 	bl	8016bb4 <__mcmp>
 8014750:	2800      	cmp	r0, #0
 8014752:	dd71      	ble.n	8014838 <_strtod_l+0x8d8>
 8014754:	9905      	ldr	r1, [sp, #20]
 8014756:	464b      	mov	r3, r9
 8014758:	4a20      	ldr	r2, [pc, #128]	; (80147dc <_strtod_l+0x87c>)
 801475a:	2900      	cmp	r1, #0
 801475c:	f000 808c 	beq.w	8014878 <_strtod_l+0x918>
 8014760:	ea02 0109 	and.w	r1, r2, r9
 8014764:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014768:	f300 8086 	bgt.w	8014878 <_strtod_l+0x918>
 801476c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014770:	f77f aeaa 	ble.w	80144c8 <_strtod_l+0x568>
 8014774:	4640      	mov	r0, r8
 8014776:	4649      	mov	r1, r9
 8014778:	4b19      	ldr	r3, [pc, #100]	; (80147e0 <_strtod_l+0x880>)
 801477a:	2200      	movs	r2, #0
 801477c:	f7fb ff18 	bl	80105b0 <__aeabi_dmul>
 8014780:	460b      	mov	r3, r1
 8014782:	4303      	orrs	r3, r0
 8014784:	bf08      	it	eq
 8014786:	2322      	moveq	r3, #34	; 0x22
 8014788:	4680      	mov	r8, r0
 801478a:	4689      	mov	r9, r1
 801478c:	bf08      	it	eq
 801478e:	f8ca 3000 	streq.w	r3, [sl]
 8014792:	e62f      	b.n	80143f4 <_strtod_l+0x494>
 8014794:	f04f 32ff 	mov.w	r2, #4294967295
 8014798:	fa02 f303 	lsl.w	r3, r2, r3
 801479c:	ea03 0808 	and.w	r8, r3, r8
 80147a0:	e6e0      	b.n	8014564 <_strtod_l+0x604>
 80147a2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80147a6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80147aa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80147ae:	35e2      	adds	r5, #226	; 0xe2
 80147b0:	fa07 f505 	lsl.w	r5, r7, r5
 80147b4:	970f      	str	r7, [sp, #60]	; 0x3c
 80147b6:	e747      	b.n	8014648 <_strtod_l+0x6e8>
 80147b8:	2301      	movs	r3, #1
 80147ba:	2500      	movs	r5, #0
 80147bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80147be:	e743      	b.n	8014648 <_strtod_l+0x6e8>
 80147c0:	463a      	mov	r2, r7
 80147c2:	4650      	mov	r0, sl
 80147c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80147c6:	f002 f985 	bl	8016ad4 <__lshift>
 80147ca:	901a      	str	r0, [sp, #104]	; 0x68
 80147cc:	2800      	cmp	r0, #0
 80147ce:	f47f af69 	bne.w	80146a4 <_strtod_l+0x744>
 80147d2:	e604      	b.n	80143de <_strtod_l+0x47e>
 80147d4:	08017b08 	.word	0x08017b08
 80147d8:	fffffc02 	.word	0xfffffc02
 80147dc:	7ff00000 	.word	0x7ff00000
 80147e0:	39500000 	.word	0x39500000
 80147e4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80147e8:	d165      	bne.n	80148b6 <_strtod_l+0x956>
 80147ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80147ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80147f0:	b35a      	cbz	r2, 801484a <_strtod_l+0x8ea>
 80147f2:	4a99      	ldr	r2, [pc, #612]	; (8014a58 <_strtod_l+0xaf8>)
 80147f4:	4293      	cmp	r3, r2
 80147f6:	d12b      	bne.n	8014850 <_strtod_l+0x8f0>
 80147f8:	9b05      	ldr	r3, [sp, #20]
 80147fa:	4641      	mov	r1, r8
 80147fc:	b303      	cbz	r3, 8014840 <_strtod_l+0x8e0>
 80147fe:	464a      	mov	r2, r9
 8014800:	4b96      	ldr	r3, [pc, #600]	; (8014a5c <_strtod_l+0xafc>)
 8014802:	4013      	ands	r3, r2
 8014804:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014808:	f04f 32ff 	mov.w	r2, #4294967295
 801480c:	d81b      	bhi.n	8014846 <_strtod_l+0x8e6>
 801480e:	0d1b      	lsrs	r3, r3, #20
 8014810:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014814:	fa02 f303 	lsl.w	r3, r2, r3
 8014818:	4299      	cmp	r1, r3
 801481a:	d119      	bne.n	8014850 <_strtod_l+0x8f0>
 801481c:	4b90      	ldr	r3, [pc, #576]	; (8014a60 <_strtod_l+0xb00>)
 801481e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014820:	429a      	cmp	r2, r3
 8014822:	d102      	bne.n	801482a <_strtod_l+0x8ca>
 8014824:	3101      	adds	r1, #1
 8014826:	f43f adda 	beq.w	80143de <_strtod_l+0x47e>
 801482a:	f04f 0800 	mov.w	r8, #0
 801482e:	4b8b      	ldr	r3, [pc, #556]	; (8014a5c <_strtod_l+0xafc>)
 8014830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014832:	401a      	ands	r2, r3
 8014834:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8014838:	9b05      	ldr	r3, [sp, #20]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d19a      	bne.n	8014774 <_strtod_l+0x814>
 801483e:	e5d9      	b.n	80143f4 <_strtod_l+0x494>
 8014840:	f04f 33ff 	mov.w	r3, #4294967295
 8014844:	e7e8      	b.n	8014818 <_strtod_l+0x8b8>
 8014846:	4613      	mov	r3, r2
 8014848:	e7e6      	b.n	8014818 <_strtod_l+0x8b8>
 801484a:	ea53 0308 	orrs.w	r3, r3, r8
 801484e:	d081      	beq.n	8014754 <_strtod_l+0x7f4>
 8014850:	b1e5      	cbz	r5, 801488c <_strtod_l+0x92c>
 8014852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014854:	421d      	tst	r5, r3
 8014856:	d0ef      	beq.n	8014838 <_strtod_l+0x8d8>
 8014858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801485a:	4640      	mov	r0, r8
 801485c:	4649      	mov	r1, r9
 801485e:	9a05      	ldr	r2, [sp, #20]
 8014860:	b1c3      	cbz	r3, 8014894 <_strtod_l+0x934>
 8014862:	f7ff fb59 	bl	8013f18 <sulp>
 8014866:	4602      	mov	r2, r0
 8014868:	460b      	mov	r3, r1
 801486a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801486e:	f7fb fce9 	bl	8010244 <__adddf3>
 8014872:	4680      	mov	r8, r0
 8014874:	4689      	mov	r9, r1
 8014876:	e7df      	b.n	8014838 <_strtod_l+0x8d8>
 8014878:	4013      	ands	r3, r2
 801487a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801487e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014882:	f04f 38ff 	mov.w	r8, #4294967295
 8014886:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801488a:	e7d5      	b.n	8014838 <_strtod_l+0x8d8>
 801488c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801488e:	ea13 0f08 	tst.w	r3, r8
 8014892:	e7e0      	b.n	8014856 <_strtod_l+0x8f6>
 8014894:	f7ff fb40 	bl	8013f18 <sulp>
 8014898:	4602      	mov	r2, r0
 801489a:	460b      	mov	r3, r1
 801489c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80148a0:	f7fb fcce 	bl	8010240 <__aeabi_dsub>
 80148a4:	2200      	movs	r2, #0
 80148a6:	2300      	movs	r3, #0
 80148a8:	4680      	mov	r8, r0
 80148aa:	4689      	mov	r9, r1
 80148ac:	f7fc f8e8 	bl	8010a80 <__aeabi_dcmpeq>
 80148b0:	2800      	cmp	r0, #0
 80148b2:	d0c1      	beq.n	8014838 <_strtod_l+0x8d8>
 80148b4:	e608      	b.n	80144c8 <_strtod_l+0x568>
 80148b6:	4658      	mov	r0, fp
 80148b8:	9904      	ldr	r1, [sp, #16]
 80148ba:	f002 faf9 	bl	8016eb0 <__ratio>
 80148be:	2200      	movs	r2, #0
 80148c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80148c4:	4606      	mov	r6, r0
 80148c6:	460f      	mov	r7, r1
 80148c8:	f7fc f8ee 	bl	8010aa8 <__aeabi_dcmple>
 80148cc:	2800      	cmp	r0, #0
 80148ce:	d070      	beq.n	80149b2 <_strtod_l+0xa52>
 80148d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d042      	beq.n	801495c <_strtod_l+0x9fc>
 80148d6:	2600      	movs	r6, #0
 80148d8:	4f62      	ldr	r7, [pc, #392]	; (8014a64 <_strtod_l+0xb04>)
 80148da:	4d62      	ldr	r5, [pc, #392]	; (8014a64 <_strtod_l+0xb04>)
 80148dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80148e2:	0d1b      	lsrs	r3, r3, #20
 80148e4:	051b      	lsls	r3, r3, #20
 80148e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80148e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80148ea:	4b5f      	ldr	r3, [pc, #380]	; (8014a68 <_strtod_l+0xb08>)
 80148ec:	429a      	cmp	r2, r3
 80148ee:	f040 80c3 	bne.w	8014a78 <_strtod_l+0xb18>
 80148f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148f4:	4640      	mov	r0, r8
 80148f6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80148fa:	4649      	mov	r1, r9
 80148fc:	f002 fa02 	bl	8016d04 <__ulp>
 8014900:	4602      	mov	r2, r0
 8014902:	460b      	mov	r3, r1
 8014904:	4630      	mov	r0, r6
 8014906:	4639      	mov	r1, r7
 8014908:	f7fb fe52 	bl	80105b0 <__aeabi_dmul>
 801490c:	4642      	mov	r2, r8
 801490e:	464b      	mov	r3, r9
 8014910:	f7fb fc98 	bl	8010244 <__adddf3>
 8014914:	460b      	mov	r3, r1
 8014916:	4951      	ldr	r1, [pc, #324]	; (8014a5c <_strtod_l+0xafc>)
 8014918:	4a54      	ldr	r2, [pc, #336]	; (8014a6c <_strtod_l+0xb0c>)
 801491a:	4019      	ands	r1, r3
 801491c:	4291      	cmp	r1, r2
 801491e:	4680      	mov	r8, r0
 8014920:	d95d      	bls.n	80149de <_strtod_l+0xa7e>
 8014922:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014924:	4b4e      	ldr	r3, [pc, #312]	; (8014a60 <_strtod_l+0xb00>)
 8014926:	429a      	cmp	r2, r3
 8014928:	d103      	bne.n	8014932 <_strtod_l+0x9d2>
 801492a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801492c:	3301      	adds	r3, #1
 801492e:	f43f ad56 	beq.w	80143de <_strtod_l+0x47e>
 8014932:	f04f 38ff 	mov.w	r8, #4294967295
 8014936:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8014a60 <_strtod_l+0xb00>
 801493a:	4650      	mov	r0, sl
 801493c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801493e:	f001 feb1 	bl	80166a4 <_Bfree>
 8014942:	4650      	mov	r0, sl
 8014944:	9906      	ldr	r1, [sp, #24]
 8014946:	f001 fead 	bl	80166a4 <_Bfree>
 801494a:	4650      	mov	r0, sl
 801494c:	9904      	ldr	r1, [sp, #16]
 801494e:	f001 fea9 	bl	80166a4 <_Bfree>
 8014952:	4659      	mov	r1, fp
 8014954:	4650      	mov	r0, sl
 8014956:	f001 fea5 	bl	80166a4 <_Bfree>
 801495a:	e627      	b.n	80145ac <_strtod_l+0x64c>
 801495c:	f1b8 0f00 	cmp.w	r8, #0
 8014960:	d119      	bne.n	8014996 <_strtod_l+0xa36>
 8014962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014968:	b9e3      	cbnz	r3, 80149a4 <_strtod_l+0xa44>
 801496a:	2200      	movs	r2, #0
 801496c:	4630      	mov	r0, r6
 801496e:	4639      	mov	r1, r7
 8014970:	4b3c      	ldr	r3, [pc, #240]	; (8014a64 <_strtod_l+0xb04>)
 8014972:	f7fc f88f 	bl	8010a94 <__aeabi_dcmplt>
 8014976:	b9c8      	cbnz	r0, 80149ac <_strtod_l+0xa4c>
 8014978:	2200      	movs	r2, #0
 801497a:	4630      	mov	r0, r6
 801497c:	4639      	mov	r1, r7
 801497e:	4b3c      	ldr	r3, [pc, #240]	; (8014a70 <_strtod_l+0xb10>)
 8014980:	f7fb fe16 	bl	80105b0 <__aeabi_dmul>
 8014984:	4604      	mov	r4, r0
 8014986:	460d      	mov	r5, r1
 8014988:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801498c:	9416      	str	r4, [sp, #88]	; 0x58
 801498e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014990:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8014994:	e7a2      	b.n	80148dc <_strtod_l+0x97c>
 8014996:	f1b8 0f01 	cmp.w	r8, #1
 801499a:	d103      	bne.n	80149a4 <_strtod_l+0xa44>
 801499c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801499e:	2b00      	cmp	r3, #0
 80149a0:	f43f ad92 	beq.w	80144c8 <_strtod_l+0x568>
 80149a4:	2600      	movs	r6, #0
 80149a6:	2400      	movs	r4, #0
 80149a8:	4f32      	ldr	r7, [pc, #200]	; (8014a74 <_strtod_l+0xb14>)
 80149aa:	e796      	b.n	80148da <_strtod_l+0x97a>
 80149ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80149ae:	4d30      	ldr	r5, [pc, #192]	; (8014a70 <_strtod_l+0xb10>)
 80149b0:	e7ea      	b.n	8014988 <_strtod_l+0xa28>
 80149b2:	4b2f      	ldr	r3, [pc, #188]	; (8014a70 <_strtod_l+0xb10>)
 80149b4:	2200      	movs	r2, #0
 80149b6:	4630      	mov	r0, r6
 80149b8:	4639      	mov	r1, r7
 80149ba:	f7fb fdf9 	bl	80105b0 <__aeabi_dmul>
 80149be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149c0:	4604      	mov	r4, r0
 80149c2:	460d      	mov	r5, r1
 80149c4:	b933      	cbnz	r3, 80149d4 <_strtod_l+0xa74>
 80149c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80149ca:	9010      	str	r0, [sp, #64]	; 0x40
 80149cc:	9311      	str	r3, [sp, #68]	; 0x44
 80149ce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80149d2:	e783      	b.n	80148dc <_strtod_l+0x97c>
 80149d4:	4602      	mov	r2, r0
 80149d6:	460b      	mov	r3, r1
 80149d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80149dc:	e7f7      	b.n	80149ce <_strtod_l+0xa6e>
 80149de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80149e2:	9b05      	ldr	r3, [sp, #20]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d1a8      	bne.n	801493a <_strtod_l+0x9da>
 80149e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80149ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149ee:	0d1b      	lsrs	r3, r3, #20
 80149f0:	051b      	lsls	r3, r3, #20
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d1a1      	bne.n	801493a <_strtod_l+0x9da>
 80149f6:	4620      	mov	r0, r4
 80149f8:	4629      	mov	r1, r5
 80149fa:	f7fc f921 	bl	8010c40 <__aeabi_d2lz>
 80149fe:	f7fb fda9 	bl	8010554 <__aeabi_l2d>
 8014a02:	4602      	mov	r2, r0
 8014a04:	460b      	mov	r3, r1
 8014a06:	4620      	mov	r0, r4
 8014a08:	4629      	mov	r1, r5
 8014a0a:	f7fb fc19 	bl	8010240 <__aeabi_dsub>
 8014a0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a14:	ea43 0308 	orr.w	r3, r3, r8
 8014a18:	4313      	orrs	r3, r2
 8014a1a:	4604      	mov	r4, r0
 8014a1c:	460d      	mov	r5, r1
 8014a1e:	d066      	beq.n	8014aee <_strtod_l+0xb8e>
 8014a20:	a309      	add	r3, pc, #36	; (adr r3, 8014a48 <_strtod_l+0xae8>)
 8014a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a26:	f7fc f835 	bl	8010a94 <__aeabi_dcmplt>
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	f47f ace2 	bne.w	80143f4 <_strtod_l+0x494>
 8014a30:	a307      	add	r3, pc, #28	; (adr r3, 8014a50 <_strtod_l+0xaf0>)
 8014a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a36:	4620      	mov	r0, r4
 8014a38:	4629      	mov	r1, r5
 8014a3a:	f7fc f849 	bl	8010ad0 <__aeabi_dcmpgt>
 8014a3e:	2800      	cmp	r0, #0
 8014a40:	f43f af7b 	beq.w	801493a <_strtod_l+0x9da>
 8014a44:	e4d6      	b.n	80143f4 <_strtod_l+0x494>
 8014a46:	bf00      	nop
 8014a48:	94a03595 	.word	0x94a03595
 8014a4c:	3fdfffff 	.word	0x3fdfffff
 8014a50:	35afe535 	.word	0x35afe535
 8014a54:	3fe00000 	.word	0x3fe00000
 8014a58:	000fffff 	.word	0x000fffff
 8014a5c:	7ff00000 	.word	0x7ff00000
 8014a60:	7fefffff 	.word	0x7fefffff
 8014a64:	3ff00000 	.word	0x3ff00000
 8014a68:	7fe00000 	.word	0x7fe00000
 8014a6c:	7c9fffff 	.word	0x7c9fffff
 8014a70:	3fe00000 	.word	0x3fe00000
 8014a74:	bff00000 	.word	0xbff00000
 8014a78:	9b05      	ldr	r3, [sp, #20]
 8014a7a:	b313      	cbz	r3, 8014ac2 <_strtod_l+0xb62>
 8014a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014a82:	d81e      	bhi.n	8014ac2 <_strtod_l+0xb62>
 8014a84:	a326      	add	r3, pc, #152	; (adr r3, 8014b20 <_strtod_l+0xbc0>)
 8014a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	f7fc f80b 	bl	8010aa8 <__aeabi_dcmple>
 8014a92:	b190      	cbz	r0, 8014aba <_strtod_l+0xb5a>
 8014a94:	4629      	mov	r1, r5
 8014a96:	4620      	mov	r0, r4
 8014a98:	f7fc f862 	bl	8010b60 <__aeabi_d2uiz>
 8014a9c:	2801      	cmp	r0, #1
 8014a9e:	bf38      	it	cc
 8014aa0:	2001      	movcc	r0, #1
 8014aa2:	f7fb fd0b 	bl	80104bc <__aeabi_ui2d>
 8014aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aa8:	4604      	mov	r4, r0
 8014aaa:	460d      	mov	r5, r1
 8014aac:	b9d3      	cbnz	r3, 8014ae4 <_strtod_l+0xb84>
 8014aae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ab2:	9012      	str	r0, [sp, #72]	; 0x48
 8014ab4:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ab6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8014aba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014abc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8014ac0:	1a9f      	subs	r7, r3, r2
 8014ac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ac6:	f002 f91d 	bl	8016d04 <__ulp>
 8014aca:	4602      	mov	r2, r0
 8014acc:	460b      	mov	r3, r1
 8014ace:	4630      	mov	r0, r6
 8014ad0:	4639      	mov	r1, r7
 8014ad2:	f7fb fd6d 	bl	80105b0 <__aeabi_dmul>
 8014ad6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014ada:	f7fb fbb3 	bl	8010244 <__adddf3>
 8014ade:	4680      	mov	r8, r0
 8014ae0:	4689      	mov	r9, r1
 8014ae2:	e77e      	b.n	80149e2 <_strtod_l+0xa82>
 8014ae4:	4602      	mov	r2, r0
 8014ae6:	460b      	mov	r3, r1
 8014ae8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8014aec:	e7e3      	b.n	8014ab6 <_strtod_l+0xb56>
 8014aee:	a30e      	add	r3, pc, #56	; (adr r3, 8014b28 <_strtod_l+0xbc8>)
 8014af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af4:	f7fb ffce 	bl	8010a94 <__aeabi_dcmplt>
 8014af8:	e7a1      	b.n	8014a3e <_strtod_l+0xade>
 8014afa:	2300      	movs	r3, #0
 8014afc:	930a      	str	r3, [sp, #40]	; 0x28
 8014afe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014b00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b02:	6013      	str	r3, [r2, #0]
 8014b04:	f7ff ba71 	b.w	8013fea <_strtod_l+0x8a>
 8014b08:	2a65      	cmp	r2, #101	; 0x65
 8014b0a:	f43f ab63 	beq.w	80141d4 <_strtod_l+0x274>
 8014b0e:	2a45      	cmp	r2, #69	; 0x45
 8014b10:	f43f ab60 	beq.w	80141d4 <_strtod_l+0x274>
 8014b14:	2301      	movs	r3, #1
 8014b16:	f7ff bb95 	b.w	8014244 <_strtod_l+0x2e4>
 8014b1a:	bf00      	nop
 8014b1c:	f3af 8000 	nop.w
 8014b20:	ffc00000 	.word	0xffc00000
 8014b24:	41dfffff 	.word	0x41dfffff
 8014b28:	94a03595 	.word	0x94a03595
 8014b2c:	3fcfffff 	.word	0x3fcfffff

08014b30 <_strtod_r>:
 8014b30:	4b01      	ldr	r3, [pc, #4]	; (8014b38 <_strtod_r+0x8>)
 8014b32:	f7ff ba15 	b.w	8013f60 <_strtod_l>
 8014b36:	bf00      	nop
 8014b38:	20000074 	.word	0x20000074

08014b3c <_strtol_l.constprop.0>:
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b42:	4680      	mov	r8, r0
 8014b44:	d001      	beq.n	8014b4a <_strtol_l.constprop.0+0xe>
 8014b46:	2b24      	cmp	r3, #36	; 0x24
 8014b48:	d906      	bls.n	8014b58 <_strtol_l.constprop.0+0x1c>
 8014b4a:	f7fe faab 	bl	80130a4 <__errno>
 8014b4e:	2316      	movs	r3, #22
 8014b50:	6003      	str	r3, [r0, #0]
 8014b52:	2000      	movs	r0, #0
 8014b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b58:	460d      	mov	r5, r1
 8014b5a:	4f35      	ldr	r7, [pc, #212]	; (8014c30 <_strtol_l.constprop.0+0xf4>)
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014b62:	5de6      	ldrb	r6, [r4, r7]
 8014b64:	f016 0608 	ands.w	r6, r6, #8
 8014b68:	d1f8      	bne.n	8014b5c <_strtol_l.constprop.0+0x20>
 8014b6a:	2c2d      	cmp	r4, #45	; 0x2d
 8014b6c:	d12f      	bne.n	8014bce <_strtol_l.constprop.0+0x92>
 8014b6e:	2601      	movs	r6, #1
 8014b70:	782c      	ldrb	r4, [r5, #0]
 8014b72:	1c85      	adds	r5, r0, #2
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d057      	beq.n	8014c28 <_strtol_l.constprop.0+0xec>
 8014b78:	2b10      	cmp	r3, #16
 8014b7a:	d109      	bne.n	8014b90 <_strtol_l.constprop.0+0x54>
 8014b7c:	2c30      	cmp	r4, #48	; 0x30
 8014b7e:	d107      	bne.n	8014b90 <_strtol_l.constprop.0+0x54>
 8014b80:	7828      	ldrb	r0, [r5, #0]
 8014b82:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014b86:	2858      	cmp	r0, #88	; 0x58
 8014b88:	d149      	bne.n	8014c1e <_strtol_l.constprop.0+0xe2>
 8014b8a:	2310      	movs	r3, #16
 8014b8c:	786c      	ldrb	r4, [r5, #1]
 8014b8e:	3502      	adds	r5, #2
 8014b90:	2700      	movs	r7, #0
 8014b92:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8014b96:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014b9a:	fbbe f9f3 	udiv	r9, lr, r3
 8014b9e:	4638      	mov	r0, r7
 8014ba0:	fb03 ea19 	mls	sl, r3, r9, lr
 8014ba4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014ba8:	f1bc 0f09 	cmp.w	ip, #9
 8014bac:	d814      	bhi.n	8014bd8 <_strtol_l.constprop.0+0x9c>
 8014bae:	4664      	mov	r4, ip
 8014bb0:	42a3      	cmp	r3, r4
 8014bb2:	dd22      	ble.n	8014bfa <_strtol_l.constprop.0+0xbe>
 8014bb4:	2f00      	cmp	r7, #0
 8014bb6:	db1d      	blt.n	8014bf4 <_strtol_l.constprop.0+0xb8>
 8014bb8:	4581      	cmp	r9, r0
 8014bba:	d31b      	bcc.n	8014bf4 <_strtol_l.constprop.0+0xb8>
 8014bbc:	d101      	bne.n	8014bc2 <_strtol_l.constprop.0+0x86>
 8014bbe:	45a2      	cmp	sl, r4
 8014bc0:	db18      	blt.n	8014bf4 <_strtol_l.constprop.0+0xb8>
 8014bc2:	2701      	movs	r7, #1
 8014bc4:	fb00 4003 	mla	r0, r0, r3, r4
 8014bc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014bcc:	e7ea      	b.n	8014ba4 <_strtol_l.constprop.0+0x68>
 8014bce:	2c2b      	cmp	r4, #43	; 0x2b
 8014bd0:	bf04      	itt	eq
 8014bd2:	782c      	ldrbeq	r4, [r5, #0]
 8014bd4:	1c85      	addeq	r5, r0, #2
 8014bd6:	e7cd      	b.n	8014b74 <_strtol_l.constprop.0+0x38>
 8014bd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014bdc:	f1bc 0f19 	cmp.w	ip, #25
 8014be0:	d801      	bhi.n	8014be6 <_strtol_l.constprop.0+0xaa>
 8014be2:	3c37      	subs	r4, #55	; 0x37
 8014be4:	e7e4      	b.n	8014bb0 <_strtol_l.constprop.0+0x74>
 8014be6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014bea:	f1bc 0f19 	cmp.w	ip, #25
 8014bee:	d804      	bhi.n	8014bfa <_strtol_l.constprop.0+0xbe>
 8014bf0:	3c57      	subs	r4, #87	; 0x57
 8014bf2:	e7dd      	b.n	8014bb0 <_strtol_l.constprop.0+0x74>
 8014bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8014bf8:	e7e6      	b.n	8014bc8 <_strtol_l.constprop.0+0x8c>
 8014bfa:	2f00      	cmp	r7, #0
 8014bfc:	da07      	bge.n	8014c0e <_strtol_l.constprop.0+0xd2>
 8014bfe:	2322      	movs	r3, #34	; 0x22
 8014c00:	4670      	mov	r0, lr
 8014c02:	f8c8 3000 	str.w	r3, [r8]
 8014c06:	2a00      	cmp	r2, #0
 8014c08:	d0a4      	beq.n	8014b54 <_strtol_l.constprop.0+0x18>
 8014c0a:	1e69      	subs	r1, r5, #1
 8014c0c:	e005      	b.n	8014c1a <_strtol_l.constprop.0+0xde>
 8014c0e:	b106      	cbz	r6, 8014c12 <_strtol_l.constprop.0+0xd6>
 8014c10:	4240      	negs	r0, r0
 8014c12:	2a00      	cmp	r2, #0
 8014c14:	d09e      	beq.n	8014b54 <_strtol_l.constprop.0+0x18>
 8014c16:	2f00      	cmp	r7, #0
 8014c18:	d1f7      	bne.n	8014c0a <_strtol_l.constprop.0+0xce>
 8014c1a:	6011      	str	r1, [r2, #0]
 8014c1c:	e79a      	b.n	8014b54 <_strtol_l.constprop.0+0x18>
 8014c1e:	2430      	movs	r4, #48	; 0x30
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d1b5      	bne.n	8014b90 <_strtol_l.constprop.0+0x54>
 8014c24:	2308      	movs	r3, #8
 8014c26:	e7b3      	b.n	8014b90 <_strtol_l.constprop.0+0x54>
 8014c28:	2c30      	cmp	r4, #48	; 0x30
 8014c2a:	d0a9      	beq.n	8014b80 <_strtol_l.constprop.0+0x44>
 8014c2c:	230a      	movs	r3, #10
 8014c2e:	e7af      	b.n	8014b90 <_strtol_l.constprop.0+0x54>
 8014c30:	08017b31 	.word	0x08017b31

08014c34 <_strtol_r>:
 8014c34:	f7ff bf82 	b.w	8014b3c <_strtol_l.constprop.0>

08014c38 <__swbuf_r>:
 8014c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c3a:	460e      	mov	r6, r1
 8014c3c:	4614      	mov	r4, r2
 8014c3e:	4605      	mov	r5, r0
 8014c40:	b118      	cbz	r0, 8014c4a <__swbuf_r+0x12>
 8014c42:	6983      	ldr	r3, [r0, #24]
 8014c44:	b90b      	cbnz	r3, 8014c4a <__swbuf_r+0x12>
 8014c46:	f001 f847 	bl	8015cd8 <__sinit>
 8014c4a:	4b21      	ldr	r3, [pc, #132]	; (8014cd0 <__swbuf_r+0x98>)
 8014c4c:	429c      	cmp	r4, r3
 8014c4e:	d12b      	bne.n	8014ca8 <__swbuf_r+0x70>
 8014c50:	686c      	ldr	r4, [r5, #4]
 8014c52:	69a3      	ldr	r3, [r4, #24]
 8014c54:	60a3      	str	r3, [r4, #8]
 8014c56:	89a3      	ldrh	r3, [r4, #12]
 8014c58:	071a      	lsls	r2, r3, #28
 8014c5a:	d52f      	bpl.n	8014cbc <__swbuf_r+0x84>
 8014c5c:	6923      	ldr	r3, [r4, #16]
 8014c5e:	b36b      	cbz	r3, 8014cbc <__swbuf_r+0x84>
 8014c60:	6923      	ldr	r3, [r4, #16]
 8014c62:	6820      	ldr	r0, [r4, #0]
 8014c64:	b2f6      	uxtb	r6, r6
 8014c66:	1ac0      	subs	r0, r0, r3
 8014c68:	6963      	ldr	r3, [r4, #20]
 8014c6a:	4637      	mov	r7, r6
 8014c6c:	4283      	cmp	r3, r0
 8014c6e:	dc04      	bgt.n	8014c7a <__swbuf_r+0x42>
 8014c70:	4621      	mov	r1, r4
 8014c72:	4628      	mov	r0, r5
 8014c74:	f000 ff9c 	bl	8015bb0 <_fflush_r>
 8014c78:	bb30      	cbnz	r0, 8014cc8 <__swbuf_r+0x90>
 8014c7a:	68a3      	ldr	r3, [r4, #8]
 8014c7c:	3001      	adds	r0, #1
 8014c7e:	3b01      	subs	r3, #1
 8014c80:	60a3      	str	r3, [r4, #8]
 8014c82:	6823      	ldr	r3, [r4, #0]
 8014c84:	1c5a      	adds	r2, r3, #1
 8014c86:	6022      	str	r2, [r4, #0]
 8014c88:	701e      	strb	r6, [r3, #0]
 8014c8a:	6963      	ldr	r3, [r4, #20]
 8014c8c:	4283      	cmp	r3, r0
 8014c8e:	d004      	beq.n	8014c9a <__swbuf_r+0x62>
 8014c90:	89a3      	ldrh	r3, [r4, #12]
 8014c92:	07db      	lsls	r3, r3, #31
 8014c94:	d506      	bpl.n	8014ca4 <__swbuf_r+0x6c>
 8014c96:	2e0a      	cmp	r6, #10
 8014c98:	d104      	bne.n	8014ca4 <__swbuf_r+0x6c>
 8014c9a:	4621      	mov	r1, r4
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	f000 ff87 	bl	8015bb0 <_fflush_r>
 8014ca2:	b988      	cbnz	r0, 8014cc8 <__swbuf_r+0x90>
 8014ca4:	4638      	mov	r0, r7
 8014ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ca8:	4b0a      	ldr	r3, [pc, #40]	; (8014cd4 <__swbuf_r+0x9c>)
 8014caa:	429c      	cmp	r4, r3
 8014cac:	d101      	bne.n	8014cb2 <__swbuf_r+0x7a>
 8014cae:	68ac      	ldr	r4, [r5, #8]
 8014cb0:	e7cf      	b.n	8014c52 <__swbuf_r+0x1a>
 8014cb2:	4b09      	ldr	r3, [pc, #36]	; (8014cd8 <__swbuf_r+0xa0>)
 8014cb4:	429c      	cmp	r4, r3
 8014cb6:	bf08      	it	eq
 8014cb8:	68ec      	ldreq	r4, [r5, #12]
 8014cba:	e7ca      	b.n	8014c52 <__swbuf_r+0x1a>
 8014cbc:	4621      	mov	r1, r4
 8014cbe:	4628      	mov	r0, r5
 8014cc0:	f000 f80c 	bl	8014cdc <__swsetup_r>
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d0cb      	beq.n	8014c60 <__swbuf_r+0x28>
 8014cc8:	f04f 37ff 	mov.w	r7, #4294967295
 8014ccc:	e7ea      	b.n	8014ca4 <__swbuf_r+0x6c>
 8014cce:	bf00      	nop
 8014cd0:	08017ce4 	.word	0x08017ce4
 8014cd4:	08017d04 	.word	0x08017d04
 8014cd8:	08017cc4 	.word	0x08017cc4

08014cdc <__swsetup_r>:
 8014cdc:	4b32      	ldr	r3, [pc, #200]	; (8014da8 <__swsetup_r+0xcc>)
 8014cde:	b570      	push	{r4, r5, r6, lr}
 8014ce0:	681d      	ldr	r5, [r3, #0]
 8014ce2:	4606      	mov	r6, r0
 8014ce4:	460c      	mov	r4, r1
 8014ce6:	b125      	cbz	r5, 8014cf2 <__swsetup_r+0x16>
 8014ce8:	69ab      	ldr	r3, [r5, #24]
 8014cea:	b913      	cbnz	r3, 8014cf2 <__swsetup_r+0x16>
 8014cec:	4628      	mov	r0, r5
 8014cee:	f000 fff3 	bl	8015cd8 <__sinit>
 8014cf2:	4b2e      	ldr	r3, [pc, #184]	; (8014dac <__swsetup_r+0xd0>)
 8014cf4:	429c      	cmp	r4, r3
 8014cf6:	d10f      	bne.n	8014d18 <__swsetup_r+0x3c>
 8014cf8:	686c      	ldr	r4, [r5, #4]
 8014cfa:	89a3      	ldrh	r3, [r4, #12]
 8014cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d00:	0719      	lsls	r1, r3, #28
 8014d02:	d42c      	bmi.n	8014d5e <__swsetup_r+0x82>
 8014d04:	06dd      	lsls	r5, r3, #27
 8014d06:	d411      	bmi.n	8014d2c <__swsetup_r+0x50>
 8014d08:	2309      	movs	r3, #9
 8014d0a:	6033      	str	r3, [r6, #0]
 8014d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d10:	f04f 30ff 	mov.w	r0, #4294967295
 8014d14:	81a3      	strh	r3, [r4, #12]
 8014d16:	e03e      	b.n	8014d96 <__swsetup_r+0xba>
 8014d18:	4b25      	ldr	r3, [pc, #148]	; (8014db0 <__swsetup_r+0xd4>)
 8014d1a:	429c      	cmp	r4, r3
 8014d1c:	d101      	bne.n	8014d22 <__swsetup_r+0x46>
 8014d1e:	68ac      	ldr	r4, [r5, #8]
 8014d20:	e7eb      	b.n	8014cfa <__swsetup_r+0x1e>
 8014d22:	4b24      	ldr	r3, [pc, #144]	; (8014db4 <__swsetup_r+0xd8>)
 8014d24:	429c      	cmp	r4, r3
 8014d26:	bf08      	it	eq
 8014d28:	68ec      	ldreq	r4, [r5, #12]
 8014d2a:	e7e6      	b.n	8014cfa <__swsetup_r+0x1e>
 8014d2c:	0758      	lsls	r0, r3, #29
 8014d2e:	d512      	bpl.n	8014d56 <__swsetup_r+0x7a>
 8014d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d32:	b141      	cbz	r1, 8014d46 <__swsetup_r+0x6a>
 8014d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d38:	4299      	cmp	r1, r3
 8014d3a:	d002      	beq.n	8014d42 <__swsetup_r+0x66>
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	f002 f93d 	bl	8016fbc <_free_r>
 8014d42:	2300      	movs	r3, #0
 8014d44:	6363      	str	r3, [r4, #52]	; 0x34
 8014d46:	89a3      	ldrh	r3, [r4, #12]
 8014d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014d4c:	81a3      	strh	r3, [r4, #12]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	6063      	str	r3, [r4, #4]
 8014d52:	6923      	ldr	r3, [r4, #16]
 8014d54:	6023      	str	r3, [r4, #0]
 8014d56:	89a3      	ldrh	r3, [r4, #12]
 8014d58:	f043 0308 	orr.w	r3, r3, #8
 8014d5c:	81a3      	strh	r3, [r4, #12]
 8014d5e:	6923      	ldr	r3, [r4, #16]
 8014d60:	b94b      	cbnz	r3, 8014d76 <__swsetup_r+0x9a>
 8014d62:	89a3      	ldrh	r3, [r4, #12]
 8014d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d6c:	d003      	beq.n	8014d76 <__swsetup_r+0x9a>
 8014d6e:	4621      	mov	r1, r4
 8014d70:	4630      	mov	r0, r6
 8014d72:	f001 fbe1 	bl	8016538 <__smakebuf_r>
 8014d76:	89a0      	ldrh	r0, [r4, #12]
 8014d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d7c:	f010 0301 	ands.w	r3, r0, #1
 8014d80:	d00a      	beq.n	8014d98 <__swsetup_r+0xbc>
 8014d82:	2300      	movs	r3, #0
 8014d84:	60a3      	str	r3, [r4, #8]
 8014d86:	6963      	ldr	r3, [r4, #20]
 8014d88:	425b      	negs	r3, r3
 8014d8a:	61a3      	str	r3, [r4, #24]
 8014d8c:	6923      	ldr	r3, [r4, #16]
 8014d8e:	b943      	cbnz	r3, 8014da2 <__swsetup_r+0xc6>
 8014d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014d94:	d1ba      	bne.n	8014d0c <__swsetup_r+0x30>
 8014d96:	bd70      	pop	{r4, r5, r6, pc}
 8014d98:	0781      	lsls	r1, r0, #30
 8014d9a:	bf58      	it	pl
 8014d9c:	6963      	ldrpl	r3, [r4, #20]
 8014d9e:	60a3      	str	r3, [r4, #8]
 8014da0:	e7f4      	b.n	8014d8c <__swsetup_r+0xb0>
 8014da2:	2000      	movs	r0, #0
 8014da4:	e7f7      	b.n	8014d96 <__swsetup_r+0xba>
 8014da6:	bf00      	nop
 8014da8:	2000000c 	.word	0x2000000c
 8014dac:	08017ce4 	.word	0x08017ce4
 8014db0:	08017d04 	.word	0x08017d04
 8014db4:	08017cc4 	.word	0x08017cc4

08014db8 <quorem>:
 8014db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dbc:	6903      	ldr	r3, [r0, #16]
 8014dbe:	690c      	ldr	r4, [r1, #16]
 8014dc0:	4607      	mov	r7, r0
 8014dc2:	42a3      	cmp	r3, r4
 8014dc4:	f2c0 8082 	blt.w	8014ecc <quorem+0x114>
 8014dc8:	3c01      	subs	r4, #1
 8014dca:	f100 0514 	add.w	r5, r0, #20
 8014dce:	f101 0814 	add.w	r8, r1, #20
 8014dd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014dd6:	9301      	str	r3, [sp, #4]
 8014dd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014ddc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014de0:	3301      	adds	r3, #1
 8014de2:	429a      	cmp	r2, r3
 8014de4:	fbb2 f6f3 	udiv	r6, r2, r3
 8014de8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014dec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014df0:	d331      	bcc.n	8014e56 <quorem+0x9e>
 8014df2:	f04f 0e00 	mov.w	lr, #0
 8014df6:	4640      	mov	r0, r8
 8014df8:	46ac      	mov	ip, r5
 8014dfa:	46f2      	mov	sl, lr
 8014dfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8014e00:	b293      	uxth	r3, r2
 8014e02:	fb06 e303 	mla	r3, r6, r3, lr
 8014e06:	0c12      	lsrs	r2, r2, #16
 8014e08:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014e0c:	b29b      	uxth	r3, r3
 8014e0e:	fb06 e202 	mla	r2, r6, r2, lr
 8014e12:	ebaa 0303 	sub.w	r3, sl, r3
 8014e16:	f8dc a000 	ldr.w	sl, [ip]
 8014e1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014e1e:	fa1f fa8a 	uxth.w	sl, sl
 8014e22:	4453      	add	r3, sl
 8014e24:	f8dc a000 	ldr.w	sl, [ip]
 8014e28:	b292      	uxth	r2, r2
 8014e2a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014e2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e38:	4581      	cmp	r9, r0
 8014e3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014e3e:	f84c 3b04 	str.w	r3, [ip], #4
 8014e42:	d2db      	bcs.n	8014dfc <quorem+0x44>
 8014e44:	f855 300b 	ldr.w	r3, [r5, fp]
 8014e48:	b92b      	cbnz	r3, 8014e56 <quorem+0x9e>
 8014e4a:	9b01      	ldr	r3, [sp, #4]
 8014e4c:	3b04      	subs	r3, #4
 8014e4e:	429d      	cmp	r5, r3
 8014e50:	461a      	mov	r2, r3
 8014e52:	d32f      	bcc.n	8014eb4 <quorem+0xfc>
 8014e54:	613c      	str	r4, [r7, #16]
 8014e56:	4638      	mov	r0, r7
 8014e58:	f001 feac 	bl	8016bb4 <__mcmp>
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	db25      	blt.n	8014eac <quorem+0xf4>
 8014e60:	4628      	mov	r0, r5
 8014e62:	f04f 0c00 	mov.w	ip, #0
 8014e66:	3601      	adds	r6, #1
 8014e68:	f858 1b04 	ldr.w	r1, [r8], #4
 8014e6c:	f8d0 e000 	ldr.w	lr, [r0]
 8014e70:	b28b      	uxth	r3, r1
 8014e72:	ebac 0303 	sub.w	r3, ip, r3
 8014e76:	fa1f f28e 	uxth.w	r2, lr
 8014e7a:	4413      	add	r3, r2
 8014e7c:	0c0a      	lsrs	r2, r1, #16
 8014e7e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014e82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e8c:	45c1      	cmp	r9, r8
 8014e8e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014e92:	f840 3b04 	str.w	r3, [r0], #4
 8014e96:	d2e7      	bcs.n	8014e68 <quorem+0xb0>
 8014e98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ea0:	b922      	cbnz	r2, 8014eac <quorem+0xf4>
 8014ea2:	3b04      	subs	r3, #4
 8014ea4:	429d      	cmp	r5, r3
 8014ea6:	461a      	mov	r2, r3
 8014ea8:	d30a      	bcc.n	8014ec0 <quorem+0x108>
 8014eaa:	613c      	str	r4, [r7, #16]
 8014eac:	4630      	mov	r0, r6
 8014eae:	b003      	add	sp, #12
 8014eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb4:	6812      	ldr	r2, [r2, #0]
 8014eb6:	3b04      	subs	r3, #4
 8014eb8:	2a00      	cmp	r2, #0
 8014eba:	d1cb      	bne.n	8014e54 <quorem+0x9c>
 8014ebc:	3c01      	subs	r4, #1
 8014ebe:	e7c6      	b.n	8014e4e <quorem+0x96>
 8014ec0:	6812      	ldr	r2, [r2, #0]
 8014ec2:	3b04      	subs	r3, #4
 8014ec4:	2a00      	cmp	r2, #0
 8014ec6:	d1f0      	bne.n	8014eaa <quorem+0xf2>
 8014ec8:	3c01      	subs	r4, #1
 8014eca:	e7eb      	b.n	8014ea4 <quorem+0xec>
 8014ecc:	2000      	movs	r0, #0
 8014ece:	e7ee      	b.n	8014eae <quorem+0xf6>

08014ed0 <_dtoa_r>:
 8014ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ed4:	4616      	mov	r6, r2
 8014ed6:	461f      	mov	r7, r3
 8014ed8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014eda:	b099      	sub	sp, #100	; 0x64
 8014edc:	4605      	mov	r5, r0
 8014ede:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014ee2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8014ee6:	b974      	cbnz	r4, 8014f06 <_dtoa_r+0x36>
 8014ee8:	2010      	movs	r0, #16
 8014eea:	f001 fb65 	bl	80165b8 <malloc>
 8014eee:	4602      	mov	r2, r0
 8014ef0:	6268      	str	r0, [r5, #36]	; 0x24
 8014ef2:	b920      	cbnz	r0, 8014efe <_dtoa_r+0x2e>
 8014ef4:	21ea      	movs	r1, #234	; 0xea
 8014ef6:	4ba8      	ldr	r3, [pc, #672]	; (8015198 <_dtoa_r+0x2c8>)
 8014ef8:	48a8      	ldr	r0, [pc, #672]	; (801519c <_dtoa_r+0x2cc>)
 8014efa:	f002 fb23 	bl	8017544 <__assert_func>
 8014efe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014f02:	6004      	str	r4, [r0, #0]
 8014f04:	60c4      	str	r4, [r0, #12]
 8014f06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014f08:	6819      	ldr	r1, [r3, #0]
 8014f0a:	b151      	cbz	r1, 8014f22 <_dtoa_r+0x52>
 8014f0c:	685a      	ldr	r2, [r3, #4]
 8014f0e:	2301      	movs	r3, #1
 8014f10:	4093      	lsls	r3, r2
 8014f12:	604a      	str	r2, [r1, #4]
 8014f14:	608b      	str	r3, [r1, #8]
 8014f16:	4628      	mov	r0, r5
 8014f18:	f001 fbc4 	bl	80166a4 <_Bfree>
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014f20:	601a      	str	r2, [r3, #0]
 8014f22:	1e3b      	subs	r3, r7, #0
 8014f24:	bfaf      	iteee	ge
 8014f26:	2300      	movge	r3, #0
 8014f28:	2201      	movlt	r2, #1
 8014f2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014f2e:	9305      	strlt	r3, [sp, #20]
 8014f30:	bfa8      	it	ge
 8014f32:	f8c8 3000 	strge.w	r3, [r8]
 8014f36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8014f3a:	4b99      	ldr	r3, [pc, #612]	; (80151a0 <_dtoa_r+0x2d0>)
 8014f3c:	bfb8      	it	lt
 8014f3e:	f8c8 2000 	strlt.w	r2, [r8]
 8014f42:	ea33 0309 	bics.w	r3, r3, r9
 8014f46:	d119      	bne.n	8014f7c <_dtoa_r+0xac>
 8014f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8014f4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f4e:	6013      	str	r3, [r2, #0]
 8014f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014f54:	4333      	orrs	r3, r6
 8014f56:	f000 857f 	beq.w	8015a58 <_dtoa_r+0xb88>
 8014f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f5c:	b953      	cbnz	r3, 8014f74 <_dtoa_r+0xa4>
 8014f5e:	4b91      	ldr	r3, [pc, #580]	; (80151a4 <_dtoa_r+0x2d4>)
 8014f60:	e022      	b.n	8014fa8 <_dtoa_r+0xd8>
 8014f62:	4b91      	ldr	r3, [pc, #580]	; (80151a8 <_dtoa_r+0x2d8>)
 8014f64:	9303      	str	r3, [sp, #12]
 8014f66:	3308      	adds	r3, #8
 8014f68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014f6a:	6013      	str	r3, [r2, #0]
 8014f6c:	9803      	ldr	r0, [sp, #12]
 8014f6e:	b019      	add	sp, #100	; 0x64
 8014f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f74:	4b8b      	ldr	r3, [pc, #556]	; (80151a4 <_dtoa_r+0x2d4>)
 8014f76:	9303      	str	r3, [sp, #12]
 8014f78:	3303      	adds	r3, #3
 8014f7a:	e7f5      	b.n	8014f68 <_dtoa_r+0x98>
 8014f7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014f80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8014f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014f88:	2200      	movs	r2, #0
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	f7fb fd78 	bl	8010a80 <__aeabi_dcmpeq>
 8014f90:	4680      	mov	r8, r0
 8014f92:	b158      	cbz	r0, 8014fac <_dtoa_r+0xdc>
 8014f94:	2301      	movs	r3, #1
 8014f96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f98:	6013      	str	r3, [r2, #0]
 8014f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f000 8558 	beq.w	8015a52 <_dtoa_r+0xb82>
 8014fa2:	4882      	ldr	r0, [pc, #520]	; (80151ac <_dtoa_r+0x2dc>)
 8014fa4:	6018      	str	r0, [r3, #0]
 8014fa6:	1e43      	subs	r3, r0, #1
 8014fa8:	9303      	str	r3, [sp, #12]
 8014faa:	e7df      	b.n	8014f6c <_dtoa_r+0x9c>
 8014fac:	ab16      	add	r3, sp, #88	; 0x58
 8014fae:	9301      	str	r3, [sp, #4]
 8014fb0:	ab17      	add	r3, sp, #92	; 0x5c
 8014fb2:	9300      	str	r3, [sp, #0]
 8014fb4:	4628      	mov	r0, r5
 8014fb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014fba:	f001 ff1d 	bl	8016df8 <__d2b>
 8014fbe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014fc2:	4683      	mov	fp, r0
 8014fc4:	2c00      	cmp	r4, #0
 8014fc6:	d07f      	beq.n	80150c8 <_dtoa_r+0x1f8>
 8014fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014fd6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014fda:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014fde:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	4b72      	ldr	r3, [pc, #456]	; (80151b0 <_dtoa_r+0x2e0>)
 8014fe6:	f7fb f92b 	bl	8010240 <__aeabi_dsub>
 8014fea:	a365      	add	r3, pc, #404	; (adr r3, 8015180 <_dtoa_r+0x2b0>)
 8014fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff0:	f7fb fade 	bl	80105b0 <__aeabi_dmul>
 8014ff4:	a364      	add	r3, pc, #400	; (adr r3, 8015188 <_dtoa_r+0x2b8>)
 8014ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ffa:	f7fb f923 	bl	8010244 <__adddf3>
 8014ffe:	4606      	mov	r6, r0
 8015000:	4620      	mov	r0, r4
 8015002:	460f      	mov	r7, r1
 8015004:	f7fb fa6a 	bl	80104dc <__aeabi_i2d>
 8015008:	a361      	add	r3, pc, #388	; (adr r3, 8015190 <_dtoa_r+0x2c0>)
 801500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801500e:	f7fb facf 	bl	80105b0 <__aeabi_dmul>
 8015012:	4602      	mov	r2, r0
 8015014:	460b      	mov	r3, r1
 8015016:	4630      	mov	r0, r6
 8015018:	4639      	mov	r1, r7
 801501a:	f7fb f913 	bl	8010244 <__adddf3>
 801501e:	4606      	mov	r6, r0
 8015020:	460f      	mov	r7, r1
 8015022:	f7fb fd75 	bl	8010b10 <__aeabi_d2iz>
 8015026:	2200      	movs	r2, #0
 8015028:	4682      	mov	sl, r0
 801502a:	2300      	movs	r3, #0
 801502c:	4630      	mov	r0, r6
 801502e:	4639      	mov	r1, r7
 8015030:	f7fb fd30 	bl	8010a94 <__aeabi_dcmplt>
 8015034:	b148      	cbz	r0, 801504a <_dtoa_r+0x17a>
 8015036:	4650      	mov	r0, sl
 8015038:	f7fb fa50 	bl	80104dc <__aeabi_i2d>
 801503c:	4632      	mov	r2, r6
 801503e:	463b      	mov	r3, r7
 8015040:	f7fb fd1e 	bl	8010a80 <__aeabi_dcmpeq>
 8015044:	b908      	cbnz	r0, 801504a <_dtoa_r+0x17a>
 8015046:	f10a 3aff 	add.w	sl, sl, #4294967295
 801504a:	f1ba 0f16 	cmp.w	sl, #22
 801504e:	d858      	bhi.n	8015102 <_dtoa_r+0x232>
 8015050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015054:	4b57      	ldr	r3, [pc, #348]	; (80151b4 <_dtoa_r+0x2e4>)
 8015056:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801505e:	f7fb fd19 	bl	8010a94 <__aeabi_dcmplt>
 8015062:	2800      	cmp	r0, #0
 8015064:	d04f      	beq.n	8015106 <_dtoa_r+0x236>
 8015066:	2300      	movs	r3, #0
 8015068:	f10a 3aff 	add.w	sl, sl, #4294967295
 801506c:	930f      	str	r3, [sp, #60]	; 0x3c
 801506e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015070:	1b1c      	subs	r4, r3, r4
 8015072:	1e63      	subs	r3, r4, #1
 8015074:	9309      	str	r3, [sp, #36]	; 0x24
 8015076:	bf49      	itett	mi
 8015078:	f1c4 0301 	rsbmi	r3, r4, #1
 801507c:	2300      	movpl	r3, #0
 801507e:	9306      	strmi	r3, [sp, #24]
 8015080:	2300      	movmi	r3, #0
 8015082:	bf54      	ite	pl
 8015084:	9306      	strpl	r3, [sp, #24]
 8015086:	9309      	strmi	r3, [sp, #36]	; 0x24
 8015088:	f1ba 0f00 	cmp.w	sl, #0
 801508c:	db3d      	blt.n	801510a <_dtoa_r+0x23a>
 801508e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015090:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015094:	4453      	add	r3, sl
 8015096:	9309      	str	r3, [sp, #36]	; 0x24
 8015098:	2300      	movs	r3, #0
 801509a:	930a      	str	r3, [sp, #40]	; 0x28
 801509c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801509e:	2b09      	cmp	r3, #9
 80150a0:	f200 808c 	bhi.w	80151bc <_dtoa_r+0x2ec>
 80150a4:	2b05      	cmp	r3, #5
 80150a6:	bfc4      	itt	gt
 80150a8:	3b04      	subgt	r3, #4
 80150aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80150ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80150ae:	bfc8      	it	gt
 80150b0:	2400      	movgt	r4, #0
 80150b2:	f1a3 0302 	sub.w	r3, r3, #2
 80150b6:	bfd8      	it	le
 80150b8:	2401      	movle	r4, #1
 80150ba:	2b03      	cmp	r3, #3
 80150bc:	f200 808a 	bhi.w	80151d4 <_dtoa_r+0x304>
 80150c0:	e8df f003 	tbb	[pc, r3]
 80150c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80150c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80150cc:	441c      	add	r4, r3
 80150ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80150d2:	2b20      	cmp	r3, #32
 80150d4:	bfc3      	ittte	gt
 80150d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80150da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80150de:	fa09 f303 	lslgt.w	r3, r9, r3
 80150e2:	f1c3 0320 	rsble	r3, r3, #32
 80150e6:	bfc6      	itte	gt
 80150e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80150ec:	4318      	orrgt	r0, r3
 80150ee:	fa06 f003 	lslle.w	r0, r6, r3
 80150f2:	f7fb f9e3 	bl	80104bc <__aeabi_ui2d>
 80150f6:	2301      	movs	r3, #1
 80150f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80150fc:	3c01      	subs	r4, #1
 80150fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8015100:	e76f      	b.n	8014fe2 <_dtoa_r+0x112>
 8015102:	2301      	movs	r3, #1
 8015104:	e7b2      	b.n	801506c <_dtoa_r+0x19c>
 8015106:	900f      	str	r0, [sp, #60]	; 0x3c
 8015108:	e7b1      	b.n	801506e <_dtoa_r+0x19e>
 801510a:	9b06      	ldr	r3, [sp, #24]
 801510c:	eba3 030a 	sub.w	r3, r3, sl
 8015110:	9306      	str	r3, [sp, #24]
 8015112:	f1ca 0300 	rsb	r3, sl, #0
 8015116:	930a      	str	r3, [sp, #40]	; 0x28
 8015118:	2300      	movs	r3, #0
 801511a:	930e      	str	r3, [sp, #56]	; 0x38
 801511c:	e7be      	b.n	801509c <_dtoa_r+0x1cc>
 801511e:	2300      	movs	r3, #0
 8015120:	930b      	str	r3, [sp, #44]	; 0x2c
 8015122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015124:	2b00      	cmp	r3, #0
 8015126:	dc58      	bgt.n	80151da <_dtoa_r+0x30a>
 8015128:	f04f 0901 	mov.w	r9, #1
 801512c:	464b      	mov	r3, r9
 801512e:	f8cd 9020 	str.w	r9, [sp, #32]
 8015132:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8015136:	2200      	movs	r2, #0
 8015138:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801513a:	6042      	str	r2, [r0, #4]
 801513c:	2204      	movs	r2, #4
 801513e:	f102 0614 	add.w	r6, r2, #20
 8015142:	429e      	cmp	r6, r3
 8015144:	6841      	ldr	r1, [r0, #4]
 8015146:	d94e      	bls.n	80151e6 <_dtoa_r+0x316>
 8015148:	4628      	mov	r0, r5
 801514a:	f001 fa6b 	bl	8016624 <_Balloc>
 801514e:	9003      	str	r0, [sp, #12]
 8015150:	2800      	cmp	r0, #0
 8015152:	d14c      	bne.n	80151ee <_dtoa_r+0x31e>
 8015154:	4602      	mov	r2, r0
 8015156:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801515a:	4b17      	ldr	r3, [pc, #92]	; (80151b8 <_dtoa_r+0x2e8>)
 801515c:	e6cc      	b.n	8014ef8 <_dtoa_r+0x28>
 801515e:	2301      	movs	r3, #1
 8015160:	e7de      	b.n	8015120 <_dtoa_r+0x250>
 8015162:	2300      	movs	r3, #0
 8015164:	930b      	str	r3, [sp, #44]	; 0x2c
 8015166:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015168:	eb0a 0903 	add.w	r9, sl, r3
 801516c:	f109 0301 	add.w	r3, r9, #1
 8015170:	2b01      	cmp	r3, #1
 8015172:	9308      	str	r3, [sp, #32]
 8015174:	bfb8      	it	lt
 8015176:	2301      	movlt	r3, #1
 8015178:	e7dd      	b.n	8015136 <_dtoa_r+0x266>
 801517a:	2301      	movs	r3, #1
 801517c:	e7f2      	b.n	8015164 <_dtoa_r+0x294>
 801517e:	bf00      	nop
 8015180:	636f4361 	.word	0x636f4361
 8015184:	3fd287a7 	.word	0x3fd287a7
 8015188:	8b60c8b3 	.word	0x8b60c8b3
 801518c:	3fc68a28 	.word	0x3fc68a28
 8015190:	509f79fb 	.word	0x509f79fb
 8015194:	3fd34413 	.word	0x3fd34413
 8015198:	08017c3e 	.word	0x08017c3e
 801519c:	08017c55 	.word	0x08017c55
 80151a0:	7ff00000 	.word	0x7ff00000
 80151a4:	08017c3a 	.word	0x08017c3a
 80151a8:	08017c31 	.word	0x08017c31
 80151ac:	08017ab5 	.word	0x08017ab5
 80151b0:	3ff80000 	.word	0x3ff80000
 80151b4:	08017e28 	.word	0x08017e28
 80151b8:	08017cb0 	.word	0x08017cb0
 80151bc:	2401      	movs	r4, #1
 80151be:	2300      	movs	r3, #0
 80151c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80151c2:	9322      	str	r3, [sp, #136]	; 0x88
 80151c4:	f04f 39ff 	mov.w	r9, #4294967295
 80151c8:	2200      	movs	r2, #0
 80151ca:	2312      	movs	r3, #18
 80151cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80151d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80151d2:	e7b0      	b.n	8015136 <_dtoa_r+0x266>
 80151d4:	2301      	movs	r3, #1
 80151d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80151d8:	e7f4      	b.n	80151c4 <_dtoa_r+0x2f4>
 80151da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80151de:	464b      	mov	r3, r9
 80151e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80151e4:	e7a7      	b.n	8015136 <_dtoa_r+0x266>
 80151e6:	3101      	adds	r1, #1
 80151e8:	6041      	str	r1, [r0, #4]
 80151ea:	0052      	lsls	r2, r2, #1
 80151ec:	e7a7      	b.n	801513e <_dtoa_r+0x26e>
 80151ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80151f0:	9a03      	ldr	r2, [sp, #12]
 80151f2:	601a      	str	r2, [r3, #0]
 80151f4:	9b08      	ldr	r3, [sp, #32]
 80151f6:	2b0e      	cmp	r3, #14
 80151f8:	f200 80a8 	bhi.w	801534c <_dtoa_r+0x47c>
 80151fc:	2c00      	cmp	r4, #0
 80151fe:	f000 80a5 	beq.w	801534c <_dtoa_r+0x47c>
 8015202:	f1ba 0f00 	cmp.w	sl, #0
 8015206:	dd34      	ble.n	8015272 <_dtoa_r+0x3a2>
 8015208:	4a9a      	ldr	r2, [pc, #616]	; (8015474 <_dtoa_r+0x5a4>)
 801520a:	f00a 030f 	and.w	r3, sl, #15
 801520e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015212:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015216:	e9d3 3400 	ldrd	r3, r4, [r3]
 801521a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801521e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8015222:	d016      	beq.n	8015252 <_dtoa_r+0x382>
 8015224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015228:	4b93      	ldr	r3, [pc, #588]	; (8015478 <_dtoa_r+0x5a8>)
 801522a:	2703      	movs	r7, #3
 801522c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015230:	f7fb fae8 	bl	8010804 <__aeabi_ddiv>
 8015234:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015238:	f004 040f 	and.w	r4, r4, #15
 801523c:	4e8e      	ldr	r6, [pc, #568]	; (8015478 <_dtoa_r+0x5a8>)
 801523e:	b954      	cbnz	r4, 8015256 <_dtoa_r+0x386>
 8015240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015248:	f7fb fadc 	bl	8010804 <__aeabi_ddiv>
 801524c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015250:	e029      	b.n	80152a6 <_dtoa_r+0x3d6>
 8015252:	2702      	movs	r7, #2
 8015254:	e7f2      	b.n	801523c <_dtoa_r+0x36c>
 8015256:	07e1      	lsls	r1, r4, #31
 8015258:	d508      	bpl.n	801526c <_dtoa_r+0x39c>
 801525a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801525e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015262:	f7fb f9a5 	bl	80105b0 <__aeabi_dmul>
 8015266:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801526a:	3701      	adds	r7, #1
 801526c:	1064      	asrs	r4, r4, #1
 801526e:	3608      	adds	r6, #8
 8015270:	e7e5      	b.n	801523e <_dtoa_r+0x36e>
 8015272:	f000 80a5 	beq.w	80153c0 <_dtoa_r+0x4f0>
 8015276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801527a:	f1ca 0400 	rsb	r4, sl, #0
 801527e:	4b7d      	ldr	r3, [pc, #500]	; (8015474 <_dtoa_r+0x5a4>)
 8015280:	f004 020f 	and.w	r2, r4, #15
 8015284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801528c:	f7fb f990 	bl	80105b0 <__aeabi_dmul>
 8015290:	2702      	movs	r7, #2
 8015292:	2300      	movs	r3, #0
 8015294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015298:	4e77      	ldr	r6, [pc, #476]	; (8015478 <_dtoa_r+0x5a8>)
 801529a:	1124      	asrs	r4, r4, #4
 801529c:	2c00      	cmp	r4, #0
 801529e:	f040 8084 	bne.w	80153aa <_dtoa_r+0x4da>
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d1d2      	bne.n	801524c <_dtoa_r+0x37c>
 80152a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	f000 808b 	beq.w	80153c4 <_dtoa_r+0x4f4>
 80152ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80152b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80152b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80152ba:	2200      	movs	r2, #0
 80152bc:	4b6f      	ldr	r3, [pc, #444]	; (801547c <_dtoa_r+0x5ac>)
 80152be:	f7fb fbe9 	bl	8010a94 <__aeabi_dcmplt>
 80152c2:	2800      	cmp	r0, #0
 80152c4:	d07e      	beq.n	80153c4 <_dtoa_r+0x4f4>
 80152c6:	9b08      	ldr	r3, [sp, #32]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d07b      	beq.n	80153c4 <_dtoa_r+0x4f4>
 80152cc:	f1b9 0f00 	cmp.w	r9, #0
 80152d0:	dd38      	ble.n	8015344 <_dtoa_r+0x474>
 80152d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80152d6:	2200      	movs	r2, #0
 80152d8:	4b69      	ldr	r3, [pc, #420]	; (8015480 <_dtoa_r+0x5b0>)
 80152da:	f7fb f969 	bl	80105b0 <__aeabi_dmul>
 80152de:	464c      	mov	r4, r9
 80152e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80152e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80152e8:	3701      	adds	r7, #1
 80152ea:	4638      	mov	r0, r7
 80152ec:	f7fb f8f6 	bl	80104dc <__aeabi_i2d>
 80152f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80152f4:	f7fb f95c 	bl	80105b0 <__aeabi_dmul>
 80152f8:	2200      	movs	r2, #0
 80152fa:	4b62      	ldr	r3, [pc, #392]	; (8015484 <_dtoa_r+0x5b4>)
 80152fc:	f7fa ffa2 	bl	8010244 <__adddf3>
 8015300:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015304:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8015308:	9611      	str	r6, [sp, #68]	; 0x44
 801530a:	2c00      	cmp	r4, #0
 801530c:	d15d      	bne.n	80153ca <_dtoa_r+0x4fa>
 801530e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015312:	2200      	movs	r2, #0
 8015314:	4b5c      	ldr	r3, [pc, #368]	; (8015488 <_dtoa_r+0x5b8>)
 8015316:	f7fa ff93 	bl	8010240 <__aeabi_dsub>
 801531a:	4602      	mov	r2, r0
 801531c:	460b      	mov	r3, r1
 801531e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015322:	4633      	mov	r3, r6
 8015324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015326:	f7fb fbd3 	bl	8010ad0 <__aeabi_dcmpgt>
 801532a:	2800      	cmp	r0, #0
 801532c:	f040 829c 	bne.w	8015868 <_dtoa_r+0x998>
 8015330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015336:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801533a:	f7fb fbab 	bl	8010a94 <__aeabi_dcmplt>
 801533e:	2800      	cmp	r0, #0
 8015340:	f040 8290 	bne.w	8015864 <_dtoa_r+0x994>
 8015344:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8015348:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801534c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801534e:	2b00      	cmp	r3, #0
 8015350:	f2c0 8152 	blt.w	80155f8 <_dtoa_r+0x728>
 8015354:	f1ba 0f0e 	cmp.w	sl, #14
 8015358:	f300 814e 	bgt.w	80155f8 <_dtoa_r+0x728>
 801535c:	4b45      	ldr	r3, [pc, #276]	; (8015474 <_dtoa_r+0x5a4>)
 801535e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015362:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015366:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801536a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801536c:	2b00      	cmp	r3, #0
 801536e:	f280 80db 	bge.w	8015528 <_dtoa_r+0x658>
 8015372:	9b08      	ldr	r3, [sp, #32]
 8015374:	2b00      	cmp	r3, #0
 8015376:	f300 80d7 	bgt.w	8015528 <_dtoa_r+0x658>
 801537a:	f040 8272 	bne.w	8015862 <_dtoa_r+0x992>
 801537e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015382:	2200      	movs	r2, #0
 8015384:	4b40      	ldr	r3, [pc, #256]	; (8015488 <_dtoa_r+0x5b8>)
 8015386:	f7fb f913 	bl	80105b0 <__aeabi_dmul>
 801538a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801538e:	f7fb fb95 	bl	8010abc <__aeabi_dcmpge>
 8015392:	9c08      	ldr	r4, [sp, #32]
 8015394:	4626      	mov	r6, r4
 8015396:	2800      	cmp	r0, #0
 8015398:	f040 8248 	bne.w	801582c <_dtoa_r+0x95c>
 801539c:	2331      	movs	r3, #49	; 0x31
 801539e:	9f03      	ldr	r7, [sp, #12]
 80153a0:	f10a 0a01 	add.w	sl, sl, #1
 80153a4:	f807 3b01 	strb.w	r3, [r7], #1
 80153a8:	e244      	b.n	8015834 <_dtoa_r+0x964>
 80153aa:	07e2      	lsls	r2, r4, #31
 80153ac:	d505      	bpl.n	80153ba <_dtoa_r+0x4ea>
 80153ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80153b2:	f7fb f8fd 	bl	80105b0 <__aeabi_dmul>
 80153b6:	2301      	movs	r3, #1
 80153b8:	3701      	adds	r7, #1
 80153ba:	1064      	asrs	r4, r4, #1
 80153bc:	3608      	adds	r6, #8
 80153be:	e76d      	b.n	801529c <_dtoa_r+0x3cc>
 80153c0:	2702      	movs	r7, #2
 80153c2:	e770      	b.n	80152a6 <_dtoa_r+0x3d6>
 80153c4:	46d0      	mov	r8, sl
 80153c6:	9c08      	ldr	r4, [sp, #32]
 80153c8:	e78f      	b.n	80152ea <_dtoa_r+0x41a>
 80153ca:	9903      	ldr	r1, [sp, #12]
 80153cc:	4b29      	ldr	r3, [pc, #164]	; (8015474 <_dtoa_r+0x5a4>)
 80153ce:	4421      	add	r1, r4
 80153d0:	9112      	str	r1, [sp, #72]	; 0x48
 80153d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80153d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80153dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80153e0:	2900      	cmp	r1, #0
 80153e2:	d055      	beq.n	8015490 <_dtoa_r+0x5c0>
 80153e4:	2000      	movs	r0, #0
 80153e6:	4929      	ldr	r1, [pc, #164]	; (801548c <_dtoa_r+0x5bc>)
 80153e8:	f7fb fa0c 	bl	8010804 <__aeabi_ddiv>
 80153ec:	463b      	mov	r3, r7
 80153ee:	4632      	mov	r2, r6
 80153f0:	f7fa ff26 	bl	8010240 <__aeabi_dsub>
 80153f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80153f8:	9f03      	ldr	r7, [sp, #12]
 80153fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80153fe:	f7fb fb87 	bl	8010b10 <__aeabi_d2iz>
 8015402:	4604      	mov	r4, r0
 8015404:	f7fb f86a 	bl	80104dc <__aeabi_i2d>
 8015408:	4602      	mov	r2, r0
 801540a:	460b      	mov	r3, r1
 801540c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015410:	f7fa ff16 	bl	8010240 <__aeabi_dsub>
 8015414:	4602      	mov	r2, r0
 8015416:	460b      	mov	r3, r1
 8015418:	3430      	adds	r4, #48	; 0x30
 801541a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801541e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015422:	f807 4b01 	strb.w	r4, [r7], #1
 8015426:	f7fb fb35 	bl	8010a94 <__aeabi_dcmplt>
 801542a:	2800      	cmp	r0, #0
 801542c:	d174      	bne.n	8015518 <_dtoa_r+0x648>
 801542e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015432:	2000      	movs	r0, #0
 8015434:	4911      	ldr	r1, [pc, #68]	; (801547c <_dtoa_r+0x5ac>)
 8015436:	f7fa ff03 	bl	8010240 <__aeabi_dsub>
 801543a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801543e:	f7fb fb29 	bl	8010a94 <__aeabi_dcmplt>
 8015442:	2800      	cmp	r0, #0
 8015444:	f040 80b7 	bne.w	80155b6 <_dtoa_r+0x6e6>
 8015448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801544a:	429f      	cmp	r7, r3
 801544c:	f43f af7a 	beq.w	8015344 <_dtoa_r+0x474>
 8015450:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015454:	2200      	movs	r2, #0
 8015456:	4b0a      	ldr	r3, [pc, #40]	; (8015480 <_dtoa_r+0x5b0>)
 8015458:	f7fb f8aa 	bl	80105b0 <__aeabi_dmul>
 801545c:	2200      	movs	r2, #0
 801545e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8015462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015466:	4b06      	ldr	r3, [pc, #24]	; (8015480 <_dtoa_r+0x5b0>)
 8015468:	f7fb f8a2 	bl	80105b0 <__aeabi_dmul>
 801546c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015470:	e7c3      	b.n	80153fa <_dtoa_r+0x52a>
 8015472:	bf00      	nop
 8015474:	08017e28 	.word	0x08017e28
 8015478:	08017e00 	.word	0x08017e00
 801547c:	3ff00000 	.word	0x3ff00000
 8015480:	40240000 	.word	0x40240000
 8015484:	401c0000 	.word	0x401c0000
 8015488:	40140000 	.word	0x40140000
 801548c:	3fe00000 	.word	0x3fe00000
 8015490:	4630      	mov	r0, r6
 8015492:	4639      	mov	r1, r7
 8015494:	f7fb f88c 	bl	80105b0 <__aeabi_dmul>
 8015498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801549a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801549e:	9c03      	ldr	r4, [sp, #12]
 80154a0:	9314      	str	r3, [sp, #80]	; 0x50
 80154a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154a6:	f7fb fb33 	bl	8010b10 <__aeabi_d2iz>
 80154aa:	9015      	str	r0, [sp, #84]	; 0x54
 80154ac:	f7fb f816 	bl	80104dc <__aeabi_i2d>
 80154b0:	4602      	mov	r2, r0
 80154b2:	460b      	mov	r3, r1
 80154b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154b8:	f7fa fec2 	bl	8010240 <__aeabi_dsub>
 80154bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154be:	4606      	mov	r6, r0
 80154c0:	3330      	adds	r3, #48	; 0x30
 80154c2:	f804 3b01 	strb.w	r3, [r4], #1
 80154c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80154c8:	460f      	mov	r7, r1
 80154ca:	429c      	cmp	r4, r3
 80154cc:	f04f 0200 	mov.w	r2, #0
 80154d0:	d124      	bne.n	801551c <_dtoa_r+0x64c>
 80154d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80154d6:	4bb0      	ldr	r3, [pc, #704]	; (8015798 <_dtoa_r+0x8c8>)
 80154d8:	f7fa feb4 	bl	8010244 <__adddf3>
 80154dc:	4602      	mov	r2, r0
 80154de:	460b      	mov	r3, r1
 80154e0:	4630      	mov	r0, r6
 80154e2:	4639      	mov	r1, r7
 80154e4:	f7fb faf4 	bl	8010ad0 <__aeabi_dcmpgt>
 80154e8:	2800      	cmp	r0, #0
 80154ea:	d163      	bne.n	80155b4 <_dtoa_r+0x6e4>
 80154ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80154f0:	2000      	movs	r0, #0
 80154f2:	49a9      	ldr	r1, [pc, #676]	; (8015798 <_dtoa_r+0x8c8>)
 80154f4:	f7fa fea4 	bl	8010240 <__aeabi_dsub>
 80154f8:	4602      	mov	r2, r0
 80154fa:	460b      	mov	r3, r1
 80154fc:	4630      	mov	r0, r6
 80154fe:	4639      	mov	r1, r7
 8015500:	f7fb fac8 	bl	8010a94 <__aeabi_dcmplt>
 8015504:	2800      	cmp	r0, #0
 8015506:	f43f af1d 	beq.w	8015344 <_dtoa_r+0x474>
 801550a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801550c:	1e7b      	subs	r3, r7, #1
 801550e:	9314      	str	r3, [sp, #80]	; 0x50
 8015510:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8015514:	2b30      	cmp	r3, #48	; 0x30
 8015516:	d0f8      	beq.n	801550a <_dtoa_r+0x63a>
 8015518:	46c2      	mov	sl, r8
 801551a:	e03b      	b.n	8015594 <_dtoa_r+0x6c4>
 801551c:	4b9f      	ldr	r3, [pc, #636]	; (801579c <_dtoa_r+0x8cc>)
 801551e:	f7fb f847 	bl	80105b0 <__aeabi_dmul>
 8015522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015526:	e7bc      	b.n	80154a2 <_dtoa_r+0x5d2>
 8015528:	9f03      	ldr	r7, [sp, #12]
 801552a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801552e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015532:	4640      	mov	r0, r8
 8015534:	4649      	mov	r1, r9
 8015536:	f7fb f965 	bl	8010804 <__aeabi_ddiv>
 801553a:	f7fb fae9 	bl	8010b10 <__aeabi_d2iz>
 801553e:	4604      	mov	r4, r0
 8015540:	f7fa ffcc 	bl	80104dc <__aeabi_i2d>
 8015544:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015548:	f7fb f832 	bl	80105b0 <__aeabi_dmul>
 801554c:	4602      	mov	r2, r0
 801554e:	460b      	mov	r3, r1
 8015550:	4640      	mov	r0, r8
 8015552:	4649      	mov	r1, r9
 8015554:	f7fa fe74 	bl	8010240 <__aeabi_dsub>
 8015558:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801555c:	f807 6b01 	strb.w	r6, [r7], #1
 8015560:	9e03      	ldr	r6, [sp, #12]
 8015562:	f8dd c020 	ldr.w	ip, [sp, #32]
 8015566:	1bbe      	subs	r6, r7, r6
 8015568:	45b4      	cmp	ip, r6
 801556a:	4602      	mov	r2, r0
 801556c:	460b      	mov	r3, r1
 801556e:	d136      	bne.n	80155de <_dtoa_r+0x70e>
 8015570:	f7fa fe68 	bl	8010244 <__adddf3>
 8015574:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015578:	4680      	mov	r8, r0
 801557a:	4689      	mov	r9, r1
 801557c:	f7fb faa8 	bl	8010ad0 <__aeabi_dcmpgt>
 8015580:	bb58      	cbnz	r0, 80155da <_dtoa_r+0x70a>
 8015582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015586:	4640      	mov	r0, r8
 8015588:	4649      	mov	r1, r9
 801558a:	f7fb fa79 	bl	8010a80 <__aeabi_dcmpeq>
 801558e:	b108      	cbz	r0, 8015594 <_dtoa_r+0x6c4>
 8015590:	07e1      	lsls	r1, r4, #31
 8015592:	d422      	bmi.n	80155da <_dtoa_r+0x70a>
 8015594:	4628      	mov	r0, r5
 8015596:	4659      	mov	r1, fp
 8015598:	f001 f884 	bl	80166a4 <_Bfree>
 801559c:	2300      	movs	r3, #0
 801559e:	703b      	strb	r3, [r7, #0]
 80155a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80155a2:	f10a 0001 	add.w	r0, sl, #1
 80155a6:	6018      	str	r0, [r3, #0]
 80155a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	f43f acde 	beq.w	8014f6c <_dtoa_r+0x9c>
 80155b0:	601f      	str	r7, [r3, #0]
 80155b2:	e4db      	b.n	8014f6c <_dtoa_r+0x9c>
 80155b4:	4627      	mov	r7, r4
 80155b6:	463b      	mov	r3, r7
 80155b8:	461f      	mov	r7, r3
 80155ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80155be:	2a39      	cmp	r2, #57	; 0x39
 80155c0:	d107      	bne.n	80155d2 <_dtoa_r+0x702>
 80155c2:	9a03      	ldr	r2, [sp, #12]
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d1f7      	bne.n	80155b8 <_dtoa_r+0x6e8>
 80155c8:	2230      	movs	r2, #48	; 0x30
 80155ca:	9903      	ldr	r1, [sp, #12]
 80155cc:	f108 0801 	add.w	r8, r8, #1
 80155d0:	700a      	strb	r2, [r1, #0]
 80155d2:	781a      	ldrb	r2, [r3, #0]
 80155d4:	3201      	adds	r2, #1
 80155d6:	701a      	strb	r2, [r3, #0]
 80155d8:	e79e      	b.n	8015518 <_dtoa_r+0x648>
 80155da:	46d0      	mov	r8, sl
 80155dc:	e7eb      	b.n	80155b6 <_dtoa_r+0x6e6>
 80155de:	2200      	movs	r2, #0
 80155e0:	4b6e      	ldr	r3, [pc, #440]	; (801579c <_dtoa_r+0x8cc>)
 80155e2:	f7fa ffe5 	bl	80105b0 <__aeabi_dmul>
 80155e6:	2200      	movs	r2, #0
 80155e8:	2300      	movs	r3, #0
 80155ea:	4680      	mov	r8, r0
 80155ec:	4689      	mov	r9, r1
 80155ee:	f7fb fa47 	bl	8010a80 <__aeabi_dcmpeq>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d09b      	beq.n	801552e <_dtoa_r+0x65e>
 80155f6:	e7cd      	b.n	8015594 <_dtoa_r+0x6c4>
 80155f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155fa:	2a00      	cmp	r2, #0
 80155fc:	f000 80d0 	beq.w	80157a0 <_dtoa_r+0x8d0>
 8015600:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015602:	2a01      	cmp	r2, #1
 8015604:	f300 80ae 	bgt.w	8015764 <_dtoa_r+0x894>
 8015608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801560a:	2a00      	cmp	r2, #0
 801560c:	f000 80a6 	beq.w	801575c <_dtoa_r+0x88c>
 8015610:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015614:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015616:	9f06      	ldr	r7, [sp, #24]
 8015618:	9a06      	ldr	r2, [sp, #24]
 801561a:	2101      	movs	r1, #1
 801561c:	441a      	add	r2, r3
 801561e:	9206      	str	r2, [sp, #24]
 8015620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015622:	4628      	mov	r0, r5
 8015624:	441a      	add	r2, r3
 8015626:	9209      	str	r2, [sp, #36]	; 0x24
 8015628:	f001 f93c 	bl	80168a4 <__i2b>
 801562c:	4606      	mov	r6, r0
 801562e:	2f00      	cmp	r7, #0
 8015630:	dd0c      	ble.n	801564c <_dtoa_r+0x77c>
 8015632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015634:	2b00      	cmp	r3, #0
 8015636:	dd09      	ble.n	801564c <_dtoa_r+0x77c>
 8015638:	42bb      	cmp	r3, r7
 801563a:	bfa8      	it	ge
 801563c:	463b      	movge	r3, r7
 801563e:	9a06      	ldr	r2, [sp, #24]
 8015640:	1aff      	subs	r7, r7, r3
 8015642:	1ad2      	subs	r2, r2, r3
 8015644:	9206      	str	r2, [sp, #24]
 8015646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015648:	1ad3      	subs	r3, r2, r3
 801564a:	9309      	str	r3, [sp, #36]	; 0x24
 801564c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801564e:	b1f3      	cbz	r3, 801568e <_dtoa_r+0x7be>
 8015650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015652:	2b00      	cmp	r3, #0
 8015654:	f000 80a8 	beq.w	80157a8 <_dtoa_r+0x8d8>
 8015658:	2c00      	cmp	r4, #0
 801565a:	dd10      	ble.n	801567e <_dtoa_r+0x7ae>
 801565c:	4631      	mov	r1, r6
 801565e:	4622      	mov	r2, r4
 8015660:	4628      	mov	r0, r5
 8015662:	f001 f9dd 	bl	8016a20 <__pow5mult>
 8015666:	465a      	mov	r2, fp
 8015668:	4601      	mov	r1, r0
 801566a:	4606      	mov	r6, r0
 801566c:	4628      	mov	r0, r5
 801566e:	f001 f92f 	bl	80168d0 <__multiply>
 8015672:	4680      	mov	r8, r0
 8015674:	4659      	mov	r1, fp
 8015676:	4628      	mov	r0, r5
 8015678:	f001 f814 	bl	80166a4 <_Bfree>
 801567c:	46c3      	mov	fp, r8
 801567e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015680:	1b1a      	subs	r2, r3, r4
 8015682:	d004      	beq.n	801568e <_dtoa_r+0x7be>
 8015684:	4659      	mov	r1, fp
 8015686:	4628      	mov	r0, r5
 8015688:	f001 f9ca 	bl	8016a20 <__pow5mult>
 801568c:	4683      	mov	fp, r0
 801568e:	2101      	movs	r1, #1
 8015690:	4628      	mov	r0, r5
 8015692:	f001 f907 	bl	80168a4 <__i2b>
 8015696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015698:	4604      	mov	r4, r0
 801569a:	2b00      	cmp	r3, #0
 801569c:	f340 8086 	ble.w	80157ac <_dtoa_r+0x8dc>
 80156a0:	461a      	mov	r2, r3
 80156a2:	4601      	mov	r1, r0
 80156a4:	4628      	mov	r0, r5
 80156a6:	f001 f9bb 	bl	8016a20 <__pow5mult>
 80156aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80156ac:	4604      	mov	r4, r0
 80156ae:	2b01      	cmp	r3, #1
 80156b0:	dd7f      	ble.n	80157b2 <_dtoa_r+0x8e2>
 80156b2:	f04f 0800 	mov.w	r8, #0
 80156b6:	6923      	ldr	r3, [r4, #16]
 80156b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80156bc:	6918      	ldr	r0, [r3, #16]
 80156be:	f001 f8a3 	bl	8016808 <__hi0bits>
 80156c2:	f1c0 0020 	rsb	r0, r0, #32
 80156c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156c8:	4418      	add	r0, r3
 80156ca:	f010 001f 	ands.w	r0, r0, #31
 80156ce:	f000 8092 	beq.w	80157f6 <_dtoa_r+0x926>
 80156d2:	f1c0 0320 	rsb	r3, r0, #32
 80156d6:	2b04      	cmp	r3, #4
 80156d8:	f340 808a 	ble.w	80157f0 <_dtoa_r+0x920>
 80156dc:	f1c0 001c 	rsb	r0, r0, #28
 80156e0:	9b06      	ldr	r3, [sp, #24]
 80156e2:	4407      	add	r7, r0
 80156e4:	4403      	add	r3, r0
 80156e6:	9306      	str	r3, [sp, #24]
 80156e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156ea:	4403      	add	r3, r0
 80156ec:	9309      	str	r3, [sp, #36]	; 0x24
 80156ee:	9b06      	ldr	r3, [sp, #24]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	dd05      	ble.n	8015700 <_dtoa_r+0x830>
 80156f4:	4659      	mov	r1, fp
 80156f6:	461a      	mov	r2, r3
 80156f8:	4628      	mov	r0, r5
 80156fa:	f001 f9eb 	bl	8016ad4 <__lshift>
 80156fe:	4683      	mov	fp, r0
 8015700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015702:	2b00      	cmp	r3, #0
 8015704:	dd05      	ble.n	8015712 <_dtoa_r+0x842>
 8015706:	4621      	mov	r1, r4
 8015708:	461a      	mov	r2, r3
 801570a:	4628      	mov	r0, r5
 801570c:	f001 f9e2 	bl	8016ad4 <__lshift>
 8015710:	4604      	mov	r4, r0
 8015712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015714:	2b00      	cmp	r3, #0
 8015716:	d070      	beq.n	80157fa <_dtoa_r+0x92a>
 8015718:	4621      	mov	r1, r4
 801571a:	4658      	mov	r0, fp
 801571c:	f001 fa4a 	bl	8016bb4 <__mcmp>
 8015720:	2800      	cmp	r0, #0
 8015722:	da6a      	bge.n	80157fa <_dtoa_r+0x92a>
 8015724:	2300      	movs	r3, #0
 8015726:	4659      	mov	r1, fp
 8015728:	220a      	movs	r2, #10
 801572a:	4628      	mov	r0, r5
 801572c:	f000 ffdc 	bl	80166e8 <__multadd>
 8015730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015732:	4683      	mov	fp, r0
 8015734:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015738:	2b00      	cmp	r3, #0
 801573a:	f000 8194 	beq.w	8015a66 <_dtoa_r+0xb96>
 801573e:	4631      	mov	r1, r6
 8015740:	2300      	movs	r3, #0
 8015742:	220a      	movs	r2, #10
 8015744:	4628      	mov	r0, r5
 8015746:	f000 ffcf 	bl	80166e8 <__multadd>
 801574a:	f1b9 0f00 	cmp.w	r9, #0
 801574e:	4606      	mov	r6, r0
 8015750:	f300 8093 	bgt.w	801587a <_dtoa_r+0x9aa>
 8015754:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015756:	2b02      	cmp	r3, #2
 8015758:	dc57      	bgt.n	801580a <_dtoa_r+0x93a>
 801575a:	e08e      	b.n	801587a <_dtoa_r+0x9aa>
 801575c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801575e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015762:	e757      	b.n	8015614 <_dtoa_r+0x744>
 8015764:	9b08      	ldr	r3, [sp, #32]
 8015766:	1e5c      	subs	r4, r3, #1
 8015768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801576a:	42a3      	cmp	r3, r4
 801576c:	bfb7      	itett	lt
 801576e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015770:	1b1c      	subge	r4, r3, r4
 8015772:	1ae2      	sublt	r2, r4, r3
 8015774:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015776:	bfbe      	ittt	lt
 8015778:	940a      	strlt	r4, [sp, #40]	; 0x28
 801577a:	189b      	addlt	r3, r3, r2
 801577c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801577e:	9b08      	ldr	r3, [sp, #32]
 8015780:	bfb8      	it	lt
 8015782:	2400      	movlt	r4, #0
 8015784:	2b00      	cmp	r3, #0
 8015786:	bfbb      	ittet	lt
 8015788:	9b06      	ldrlt	r3, [sp, #24]
 801578a:	9a08      	ldrlt	r2, [sp, #32]
 801578c:	9f06      	ldrge	r7, [sp, #24]
 801578e:	1a9f      	sublt	r7, r3, r2
 8015790:	bfac      	ite	ge
 8015792:	9b08      	ldrge	r3, [sp, #32]
 8015794:	2300      	movlt	r3, #0
 8015796:	e73f      	b.n	8015618 <_dtoa_r+0x748>
 8015798:	3fe00000 	.word	0x3fe00000
 801579c:	40240000 	.word	0x40240000
 80157a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80157a2:	9f06      	ldr	r7, [sp, #24]
 80157a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80157a6:	e742      	b.n	801562e <_dtoa_r+0x75e>
 80157a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157aa:	e76b      	b.n	8015684 <_dtoa_r+0x7b4>
 80157ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80157ae:	2b01      	cmp	r3, #1
 80157b0:	dc19      	bgt.n	80157e6 <_dtoa_r+0x916>
 80157b2:	9b04      	ldr	r3, [sp, #16]
 80157b4:	b9bb      	cbnz	r3, 80157e6 <_dtoa_r+0x916>
 80157b6:	9b05      	ldr	r3, [sp, #20]
 80157b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157bc:	b99b      	cbnz	r3, 80157e6 <_dtoa_r+0x916>
 80157be:	9b05      	ldr	r3, [sp, #20]
 80157c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80157c4:	0d1b      	lsrs	r3, r3, #20
 80157c6:	051b      	lsls	r3, r3, #20
 80157c8:	b183      	cbz	r3, 80157ec <_dtoa_r+0x91c>
 80157ca:	f04f 0801 	mov.w	r8, #1
 80157ce:	9b06      	ldr	r3, [sp, #24]
 80157d0:	3301      	adds	r3, #1
 80157d2:	9306      	str	r3, [sp, #24]
 80157d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157d6:	3301      	adds	r3, #1
 80157d8:	9309      	str	r3, [sp, #36]	; 0x24
 80157da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157dc:	2b00      	cmp	r3, #0
 80157de:	f47f af6a 	bne.w	80156b6 <_dtoa_r+0x7e6>
 80157e2:	2001      	movs	r0, #1
 80157e4:	e76f      	b.n	80156c6 <_dtoa_r+0x7f6>
 80157e6:	f04f 0800 	mov.w	r8, #0
 80157ea:	e7f6      	b.n	80157da <_dtoa_r+0x90a>
 80157ec:	4698      	mov	r8, r3
 80157ee:	e7f4      	b.n	80157da <_dtoa_r+0x90a>
 80157f0:	f43f af7d 	beq.w	80156ee <_dtoa_r+0x81e>
 80157f4:	4618      	mov	r0, r3
 80157f6:	301c      	adds	r0, #28
 80157f8:	e772      	b.n	80156e0 <_dtoa_r+0x810>
 80157fa:	9b08      	ldr	r3, [sp, #32]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	dc36      	bgt.n	801586e <_dtoa_r+0x99e>
 8015800:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015802:	2b02      	cmp	r3, #2
 8015804:	dd33      	ble.n	801586e <_dtoa_r+0x99e>
 8015806:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801580a:	f1b9 0f00 	cmp.w	r9, #0
 801580e:	d10d      	bne.n	801582c <_dtoa_r+0x95c>
 8015810:	4621      	mov	r1, r4
 8015812:	464b      	mov	r3, r9
 8015814:	2205      	movs	r2, #5
 8015816:	4628      	mov	r0, r5
 8015818:	f000 ff66 	bl	80166e8 <__multadd>
 801581c:	4601      	mov	r1, r0
 801581e:	4604      	mov	r4, r0
 8015820:	4658      	mov	r0, fp
 8015822:	f001 f9c7 	bl	8016bb4 <__mcmp>
 8015826:	2800      	cmp	r0, #0
 8015828:	f73f adb8 	bgt.w	801539c <_dtoa_r+0x4cc>
 801582c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801582e:	9f03      	ldr	r7, [sp, #12]
 8015830:	ea6f 0a03 	mvn.w	sl, r3
 8015834:	f04f 0800 	mov.w	r8, #0
 8015838:	4621      	mov	r1, r4
 801583a:	4628      	mov	r0, r5
 801583c:	f000 ff32 	bl	80166a4 <_Bfree>
 8015840:	2e00      	cmp	r6, #0
 8015842:	f43f aea7 	beq.w	8015594 <_dtoa_r+0x6c4>
 8015846:	f1b8 0f00 	cmp.w	r8, #0
 801584a:	d005      	beq.n	8015858 <_dtoa_r+0x988>
 801584c:	45b0      	cmp	r8, r6
 801584e:	d003      	beq.n	8015858 <_dtoa_r+0x988>
 8015850:	4641      	mov	r1, r8
 8015852:	4628      	mov	r0, r5
 8015854:	f000 ff26 	bl	80166a4 <_Bfree>
 8015858:	4631      	mov	r1, r6
 801585a:	4628      	mov	r0, r5
 801585c:	f000 ff22 	bl	80166a4 <_Bfree>
 8015860:	e698      	b.n	8015594 <_dtoa_r+0x6c4>
 8015862:	2400      	movs	r4, #0
 8015864:	4626      	mov	r6, r4
 8015866:	e7e1      	b.n	801582c <_dtoa_r+0x95c>
 8015868:	46c2      	mov	sl, r8
 801586a:	4626      	mov	r6, r4
 801586c:	e596      	b.n	801539c <_dtoa_r+0x4cc>
 801586e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015874:	2b00      	cmp	r3, #0
 8015876:	f000 80fd 	beq.w	8015a74 <_dtoa_r+0xba4>
 801587a:	2f00      	cmp	r7, #0
 801587c:	dd05      	ble.n	801588a <_dtoa_r+0x9ba>
 801587e:	4631      	mov	r1, r6
 8015880:	463a      	mov	r2, r7
 8015882:	4628      	mov	r0, r5
 8015884:	f001 f926 	bl	8016ad4 <__lshift>
 8015888:	4606      	mov	r6, r0
 801588a:	f1b8 0f00 	cmp.w	r8, #0
 801588e:	d05c      	beq.n	801594a <_dtoa_r+0xa7a>
 8015890:	4628      	mov	r0, r5
 8015892:	6871      	ldr	r1, [r6, #4]
 8015894:	f000 fec6 	bl	8016624 <_Balloc>
 8015898:	4607      	mov	r7, r0
 801589a:	b928      	cbnz	r0, 80158a8 <_dtoa_r+0x9d8>
 801589c:	4602      	mov	r2, r0
 801589e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80158a2:	4b7f      	ldr	r3, [pc, #508]	; (8015aa0 <_dtoa_r+0xbd0>)
 80158a4:	f7ff bb28 	b.w	8014ef8 <_dtoa_r+0x28>
 80158a8:	6932      	ldr	r2, [r6, #16]
 80158aa:	f106 010c 	add.w	r1, r6, #12
 80158ae:	3202      	adds	r2, #2
 80158b0:	0092      	lsls	r2, r2, #2
 80158b2:	300c      	adds	r0, #12
 80158b4:	f000 fea8 	bl	8016608 <memcpy>
 80158b8:	2201      	movs	r2, #1
 80158ba:	4639      	mov	r1, r7
 80158bc:	4628      	mov	r0, r5
 80158be:	f001 f909 	bl	8016ad4 <__lshift>
 80158c2:	46b0      	mov	r8, r6
 80158c4:	4606      	mov	r6, r0
 80158c6:	9b03      	ldr	r3, [sp, #12]
 80158c8:	3301      	adds	r3, #1
 80158ca:	9308      	str	r3, [sp, #32]
 80158cc:	9b03      	ldr	r3, [sp, #12]
 80158ce:	444b      	add	r3, r9
 80158d0:	930a      	str	r3, [sp, #40]	; 0x28
 80158d2:	9b04      	ldr	r3, [sp, #16]
 80158d4:	f003 0301 	and.w	r3, r3, #1
 80158d8:	9309      	str	r3, [sp, #36]	; 0x24
 80158da:	9b08      	ldr	r3, [sp, #32]
 80158dc:	4621      	mov	r1, r4
 80158de:	3b01      	subs	r3, #1
 80158e0:	4658      	mov	r0, fp
 80158e2:	9304      	str	r3, [sp, #16]
 80158e4:	f7ff fa68 	bl	8014db8 <quorem>
 80158e8:	4603      	mov	r3, r0
 80158ea:	4641      	mov	r1, r8
 80158ec:	3330      	adds	r3, #48	; 0x30
 80158ee:	9006      	str	r0, [sp, #24]
 80158f0:	4658      	mov	r0, fp
 80158f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80158f4:	f001 f95e 	bl	8016bb4 <__mcmp>
 80158f8:	4632      	mov	r2, r6
 80158fa:	4681      	mov	r9, r0
 80158fc:	4621      	mov	r1, r4
 80158fe:	4628      	mov	r0, r5
 8015900:	f001 f974 	bl	8016bec <__mdiff>
 8015904:	68c2      	ldr	r2, [r0, #12]
 8015906:	4607      	mov	r7, r0
 8015908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801590a:	bb02      	cbnz	r2, 801594e <_dtoa_r+0xa7e>
 801590c:	4601      	mov	r1, r0
 801590e:	4658      	mov	r0, fp
 8015910:	f001 f950 	bl	8016bb4 <__mcmp>
 8015914:	4602      	mov	r2, r0
 8015916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015918:	4639      	mov	r1, r7
 801591a:	4628      	mov	r0, r5
 801591c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8015920:	f000 fec0 	bl	80166a4 <_Bfree>
 8015924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015928:	9f08      	ldr	r7, [sp, #32]
 801592a:	ea43 0102 	orr.w	r1, r3, r2
 801592e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015930:	430b      	orrs	r3, r1
 8015932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015934:	d10d      	bne.n	8015952 <_dtoa_r+0xa82>
 8015936:	2b39      	cmp	r3, #57	; 0x39
 8015938:	d029      	beq.n	801598e <_dtoa_r+0xabe>
 801593a:	f1b9 0f00 	cmp.w	r9, #0
 801593e:	dd01      	ble.n	8015944 <_dtoa_r+0xa74>
 8015940:	9b06      	ldr	r3, [sp, #24]
 8015942:	3331      	adds	r3, #49	; 0x31
 8015944:	9a04      	ldr	r2, [sp, #16]
 8015946:	7013      	strb	r3, [r2, #0]
 8015948:	e776      	b.n	8015838 <_dtoa_r+0x968>
 801594a:	4630      	mov	r0, r6
 801594c:	e7b9      	b.n	80158c2 <_dtoa_r+0x9f2>
 801594e:	2201      	movs	r2, #1
 8015950:	e7e2      	b.n	8015918 <_dtoa_r+0xa48>
 8015952:	f1b9 0f00 	cmp.w	r9, #0
 8015956:	db06      	blt.n	8015966 <_dtoa_r+0xa96>
 8015958:	9922      	ldr	r1, [sp, #136]	; 0x88
 801595a:	ea41 0909 	orr.w	r9, r1, r9
 801595e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015960:	ea59 0101 	orrs.w	r1, r9, r1
 8015964:	d120      	bne.n	80159a8 <_dtoa_r+0xad8>
 8015966:	2a00      	cmp	r2, #0
 8015968:	ddec      	ble.n	8015944 <_dtoa_r+0xa74>
 801596a:	4659      	mov	r1, fp
 801596c:	2201      	movs	r2, #1
 801596e:	4628      	mov	r0, r5
 8015970:	9308      	str	r3, [sp, #32]
 8015972:	f001 f8af 	bl	8016ad4 <__lshift>
 8015976:	4621      	mov	r1, r4
 8015978:	4683      	mov	fp, r0
 801597a:	f001 f91b 	bl	8016bb4 <__mcmp>
 801597e:	2800      	cmp	r0, #0
 8015980:	9b08      	ldr	r3, [sp, #32]
 8015982:	dc02      	bgt.n	801598a <_dtoa_r+0xaba>
 8015984:	d1de      	bne.n	8015944 <_dtoa_r+0xa74>
 8015986:	07da      	lsls	r2, r3, #31
 8015988:	d5dc      	bpl.n	8015944 <_dtoa_r+0xa74>
 801598a:	2b39      	cmp	r3, #57	; 0x39
 801598c:	d1d8      	bne.n	8015940 <_dtoa_r+0xa70>
 801598e:	2339      	movs	r3, #57	; 0x39
 8015990:	9a04      	ldr	r2, [sp, #16]
 8015992:	7013      	strb	r3, [r2, #0]
 8015994:	463b      	mov	r3, r7
 8015996:	461f      	mov	r7, r3
 8015998:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801599c:	3b01      	subs	r3, #1
 801599e:	2a39      	cmp	r2, #57	; 0x39
 80159a0:	d050      	beq.n	8015a44 <_dtoa_r+0xb74>
 80159a2:	3201      	adds	r2, #1
 80159a4:	701a      	strb	r2, [r3, #0]
 80159a6:	e747      	b.n	8015838 <_dtoa_r+0x968>
 80159a8:	2a00      	cmp	r2, #0
 80159aa:	dd03      	ble.n	80159b4 <_dtoa_r+0xae4>
 80159ac:	2b39      	cmp	r3, #57	; 0x39
 80159ae:	d0ee      	beq.n	801598e <_dtoa_r+0xabe>
 80159b0:	3301      	adds	r3, #1
 80159b2:	e7c7      	b.n	8015944 <_dtoa_r+0xa74>
 80159b4:	9a08      	ldr	r2, [sp, #32]
 80159b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80159b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80159bc:	428a      	cmp	r2, r1
 80159be:	d02a      	beq.n	8015a16 <_dtoa_r+0xb46>
 80159c0:	4659      	mov	r1, fp
 80159c2:	2300      	movs	r3, #0
 80159c4:	220a      	movs	r2, #10
 80159c6:	4628      	mov	r0, r5
 80159c8:	f000 fe8e 	bl	80166e8 <__multadd>
 80159cc:	45b0      	cmp	r8, r6
 80159ce:	4683      	mov	fp, r0
 80159d0:	f04f 0300 	mov.w	r3, #0
 80159d4:	f04f 020a 	mov.w	r2, #10
 80159d8:	4641      	mov	r1, r8
 80159da:	4628      	mov	r0, r5
 80159dc:	d107      	bne.n	80159ee <_dtoa_r+0xb1e>
 80159de:	f000 fe83 	bl	80166e8 <__multadd>
 80159e2:	4680      	mov	r8, r0
 80159e4:	4606      	mov	r6, r0
 80159e6:	9b08      	ldr	r3, [sp, #32]
 80159e8:	3301      	adds	r3, #1
 80159ea:	9308      	str	r3, [sp, #32]
 80159ec:	e775      	b.n	80158da <_dtoa_r+0xa0a>
 80159ee:	f000 fe7b 	bl	80166e8 <__multadd>
 80159f2:	4631      	mov	r1, r6
 80159f4:	4680      	mov	r8, r0
 80159f6:	2300      	movs	r3, #0
 80159f8:	220a      	movs	r2, #10
 80159fa:	4628      	mov	r0, r5
 80159fc:	f000 fe74 	bl	80166e8 <__multadd>
 8015a00:	4606      	mov	r6, r0
 8015a02:	e7f0      	b.n	80159e6 <_dtoa_r+0xb16>
 8015a04:	f1b9 0f00 	cmp.w	r9, #0
 8015a08:	bfcc      	ite	gt
 8015a0a:	464f      	movgt	r7, r9
 8015a0c:	2701      	movle	r7, #1
 8015a0e:	f04f 0800 	mov.w	r8, #0
 8015a12:	9a03      	ldr	r2, [sp, #12]
 8015a14:	4417      	add	r7, r2
 8015a16:	4659      	mov	r1, fp
 8015a18:	2201      	movs	r2, #1
 8015a1a:	4628      	mov	r0, r5
 8015a1c:	9308      	str	r3, [sp, #32]
 8015a1e:	f001 f859 	bl	8016ad4 <__lshift>
 8015a22:	4621      	mov	r1, r4
 8015a24:	4683      	mov	fp, r0
 8015a26:	f001 f8c5 	bl	8016bb4 <__mcmp>
 8015a2a:	2800      	cmp	r0, #0
 8015a2c:	dcb2      	bgt.n	8015994 <_dtoa_r+0xac4>
 8015a2e:	d102      	bne.n	8015a36 <_dtoa_r+0xb66>
 8015a30:	9b08      	ldr	r3, [sp, #32]
 8015a32:	07db      	lsls	r3, r3, #31
 8015a34:	d4ae      	bmi.n	8015994 <_dtoa_r+0xac4>
 8015a36:	463b      	mov	r3, r7
 8015a38:	461f      	mov	r7, r3
 8015a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a3e:	2a30      	cmp	r2, #48	; 0x30
 8015a40:	d0fa      	beq.n	8015a38 <_dtoa_r+0xb68>
 8015a42:	e6f9      	b.n	8015838 <_dtoa_r+0x968>
 8015a44:	9a03      	ldr	r2, [sp, #12]
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d1a5      	bne.n	8015996 <_dtoa_r+0xac6>
 8015a4a:	2331      	movs	r3, #49	; 0x31
 8015a4c:	f10a 0a01 	add.w	sl, sl, #1
 8015a50:	e779      	b.n	8015946 <_dtoa_r+0xa76>
 8015a52:	4b14      	ldr	r3, [pc, #80]	; (8015aa4 <_dtoa_r+0xbd4>)
 8015a54:	f7ff baa8 	b.w	8014fa8 <_dtoa_r+0xd8>
 8015a58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	f47f aa81 	bne.w	8014f62 <_dtoa_r+0x92>
 8015a60:	4b11      	ldr	r3, [pc, #68]	; (8015aa8 <_dtoa_r+0xbd8>)
 8015a62:	f7ff baa1 	b.w	8014fa8 <_dtoa_r+0xd8>
 8015a66:	f1b9 0f00 	cmp.w	r9, #0
 8015a6a:	dc03      	bgt.n	8015a74 <_dtoa_r+0xba4>
 8015a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015a6e:	2b02      	cmp	r3, #2
 8015a70:	f73f aecb 	bgt.w	801580a <_dtoa_r+0x93a>
 8015a74:	9f03      	ldr	r7, [sp, #12]
 8015a76:	4621      	mov	r1, r4
 8015a78:	4658      	mov	r0, fp
 8015a7a:	f7ff f99d 	bl	8014db8 <quorem>
 8015a7e:	9a03      	ldr	r2, [sp, #12]
 8015a80:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015a84:	f807 3b01 	strb.w	r3, [r7], #1
 8015a88:	1aba      	subs	r2, r7, r2
 8015a8a:	4591      	cmp	r9, r2
 8015a8c:	ddba      	ble.n	8015a04 <_dtoa_r+0xb34>
 8015a8e:	4659      	mov	r1, fp
 8015a90:	2300      	movs	r3, #0
 8015a92:	220a      	movs	r2, #10
 8015a94:	4628      	mov	r0, r5
 8015a96:	f000 fe27 	bl	80166e8 <__multadd>
 8015a9a:	4683      	mov	fp, r0
 8015a9c:	e7eb      	b.n	8015a76 <_dtoa_r+0xba6>
 8015a9e:	bf00      	nop
 8015aa0:	08017cb0 	.word	0x08017cb0
 8015aa4:	08017ab4 	.word	0x08017ab4
 8015aa8:	08017c31 	.word	0x08017c31

08015aac <__sflush_r>:
 8015aac:	898a      	ldrh	r2, [r1, #12]
 8015aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ab0:	4605      	mov	r5, r0
 8015ab2:	0710      	lsls	r0, r2, #28
 8015ab4:	460c      	mov	r4, r1
 8015ab6:	d457      	bmi.n	8015b68 <__sflush_r+0xbc>
 8015ab8:	684b      	ldr	r3, [r1, #4]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	dc04      	bgt.n	8015ac8 <__sflush_r+0x1c>
 8015abe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	dc01      	bgt.n	8015ac8 <__sflush_r+0x1c>
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015aca:	2e00      	cmp	r6, #0
 8015acc:	d0fa      	beq.n	8015ac4 <__sflush_r+0x18>
 8015ace:	2300      	movs	r3, #0
 8015ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ad4:	682f      	ldr	r7, [r5, #0]
 8015ad6:	602b      	str	r3, [r5, #0]
 8015ad8:	d032      	beq.n	8015b40 <__sflush_r+0x94>
 8015ada:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015adc:	89a3      	ldrh	r3, [r4, #12]
 8015ade:	075a      	lsls	r2, r3, #29
 8015ae0:	d505      	bpl.n	8015aee <__sflush_r+0x42>
 8015ae2:	6863      	ldr	r3, [r4, #4]
 8015ae4:	1ac0      	subs	r0, r0, r3
 8015ae6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ae8:	b10b      	cbz	r3, 8015aee <__sflush_r+0x42>
 8015aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015aec:	1ac0      	subs	r0, r0, r3
 8015aee:	2300      	movs	r3, #0
 8015af0:	4602      	mov	r2, r0
 8015af2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015af4:	4628      	mov	r0, r5
 8015af6:	6a21      	ldr	r1, [r4, #32]
 8015af8:	47b0      	blx	r6
 8015afa:	1c43      	adds	r3, r0, #1
 8015afc:	89a3      	ldrh	r3, [r4, #12]
 8015afe:	d106      	bne.n	8015b0e <__sflush_r+0x62>
 8015b00:	6829      	ldr	r1, [r5, #0]
 8015b02:	291d      	cmp	r1, #29
 8015b04:	d82c      	bhi.n	8015b60 <__sflush_r+0xb4>
 8015b06:	4a29      	ldr	r2, [pc, #164]	; (8015bac <__sflush_r+0x100>)
 8015b08:	40ca      	lsrs	r2, r1
 8015b0a:	07d6      	lsls	r6, r2, #31
 8015b0c:	d528      	bpl.n	8015b60 <__sflush_r+0xb4>
 8015b0e:	2200      	movs	r2, #0
 8015b10:	6062      	str	r2, [r4, #4]
 8015b12:	6922      	ldr	r2, [r4, #16]
 8015b14:	04d9      	lsls	r1, r3, #19
 8015b16:	6022      	str	r2, [r4, #0]
 8015b18:	d504      	bpl.n	8015b24 <__sflush_r+0x78>
 8015b1a:	1c42      	adds	r2, r0, #1
 8015b1c:	d101      	bne.n	8015b22 <__sflush_r+0x76>
 8015b1e:	682b      	ldr	r3, [r5, #0]
 8015b20:	b903      	cbnz	r3, 8015b24 <__sflush_r+0x78>
 8015b22:	6560      	str	r0, [r4, #84]	; 0x54
 8015b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b26:	602f      	str	r7, [r5, #0]
 8015b28:	2900      	cmp	r1, #0
 8015b2a:	d0cb      	beq.n	8015ac4 <__sflush_r+0x18>
 8015b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b30:	4299      	cmp	r1, r3
 8015b32:	d002      	beq.n	8015b3a <__sflush_r+0x8e>
 8015b34:	4628      	mov	r0, r5
 8015b36:	f001 fa41 	bl	8016fbc <_free_r>
 8015b3a:	2000      	movs	r0, #0
 8015b3c:	6360      	str	r0, [r4, #52]	; 0x34
 8015b3e:	e7c2      	b.n	8015ac6 <__sflush_r+0x1a>
 8015b40:	6a21      	ldr	r1, [r4, #32]
 8015b42:	2301      	movs	r3, #1
 8015b44:	4628      	mov	r0, r5
 8015b46:	47b0      	blx	r6
 8015b48:	1c41      	adds	r1, r0, #1
 8015b4a:	d1c7      	bne.n	8015adc <__sflush_r+0x30>
 8015b4c:	682b      	ldr	r3, [r5, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d0c4      	beq.n	8015adc <__sflush_r+0x30>
 8015b52:	2b1d      	cmp	r3, #29
 8015b54:	d001      	beq.n	8015b5a <__sflush_r+0xae>
 8015b56:	2b16      	cmp	r3, #22
 8015b58:	d101      	bne.n	8015b5e <__sflush_r+0xb2>
 8015b5a:	602f      	str	r7, [r5, #0]
 8015b5c:	e7b2      	b.n	8015ac4 <__sflush_r+0x18>
 8015b5e:	89a3      	ldrh	r3, [r4, #12]
 8015b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b64:	81a3      	strh	r3, [r4, #12]
 8015b66:	e7ae      	b.n	8015ac6 <__sflush_r+0x1a>
 8015b68:	690f      	ldr	r7, [r1, #16]
 8015b6a:	2f00      	cmp	r7, #0
 8015b6c:	d0aa      	beq.n	8015ac4 <__sflush_r+0x18>
 8015b6e:	0793      	lsls	r3, r2, #30
 8015b70:	bf18      	it	ne
 8015b72:	2300      	movne	r3, #0
 8015b74:	680e      	ldr	r6, [r1, #0]
 8015b76:	bf08      	it	eq
 8015b78:	694b      	ldreq	r3, [r1, #20]
 8015b7a:	1bf6      	subs	r6, r6, r7
 8015b7c:	600f      	str	r7, [r1, #0]
 8015b7e:	608b      	str	r3, [r1, #8]
 8015b80:	2e00      	cmp	r6, #0
 8015b82:	dd9f      	ble.n	8015ac4 <__sflush_r+0x18>
 8015b84:	4633      	mov	r3, r6
 8015b86:	463a      	mov	r2, r7
 8015b88:	4628      	mov	r0, r5
 8015b8a:	6a21      	ldr	r1, [r4, #32]
 8015b8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015b90:	47e0      	blx	ip
 8015b92:	2800      	cmp	r0, #0
 8015b94:	dc06      	bgt.n	8015ba4 <__sflush_r+0xf8>
 8015b96:	89a3      	ldrh	r3, [r4, #12]
 8015b98:	f04f 30ff 	mov.w	r0, #4294967295
 8015b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ba0:	81a3      	strh	r3, [r4, #12]
 8015ba2:	e790      	b.n	8015ac6 <__sflush_r+0x1a>
 8015ba4:	4407      	add	r7, r0
 8015ba6:	1a36      	subs	r6, r6, r0
 8015ba8:	e7ea      	b.n	8015b80 <__sflush_r+0xd4>
 8015baa:	bf00      	nop
 8015bac:	20400001 	.word	0x20400001

08015bb0 <_fflush_r>:
 8015bb0:	b538      	push	{r3, r4, r5, lr}
 8015bb2:	690b      	ldr	r3, [r1, #16]
 8015bb4:	4605      	mov	r5, r0
 8015bb6:	460c      	mov	r4, r1
 8015bb8:	b913      	cbnz	r3, 8015bc0 <_fflush_r+0x10>
 8015bba:	2500      	movs	r5, #0
 8015bbc:	4628      	mov	r0, r5
 8015bbe:	bd38      	pop	{r3, r4, r5, pc}
 8015bc0:	b118      	cbz	r0, 8015bca <_fflush_r+0x1a>
 8015bc2:	6983      	ldr	r3, [r0, #24]
 8015bc4:	b90b      	cbnz	r3, 8015bca <_fflush_r+0x1a>
 8015bc6:	f000 f887 	bl	8015cd8 <__sinit>
 8015bca:	4b14      	ldr	r3, [pc, #80]	; (8015c1c <_fflush_r+0x6c>)
 8015bcc:	429c      	cmp	r4, r3
 8015bce:	d11b      	bne.n	8015c08 <_fflush_r+0x58>
 8015bd0:	686c      	ldr	r4, [r5, #4]
 8015bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d0ef      	beq.n	8015bba <_fflush_r+0xa>
 8015bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015bdc:	07d0      	lsls	r0, r2, #31
 8015bde:	d404      	bmi.n	8015bea <_fflush_r+0x3a>
 8015be0:	0599      	lsls	r1, r3, #22
 8015be2:	d402      	bmi.n	8015bea <_fflush_r+0x3a>
 8015be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015be6:	f000 fc80 	bl	80164ea <__retarget_lock_acquire_recursive>
 8015bea:	4628      	mov	r0, r5
 8015bec:	4621      	mov	r1, r4
 8015bee:	f7ff ff5d 	bl	8015aac <__sflush_r>
 8015bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015bf4:	4605      	mov	r5, r0
 8015bf6:	07da      	lsls	r2, r3, #31
 8015bf8:	d4e0      	bmi.n	8015bbc <_fflush_r+0xc>
 8015bfa:	89a3      	ldrh	r3, [r4, #12]
 8015bfc:	059b      	lsls	r3, r3, #22
 8015bfe:	d4dd      	bmi.n	8015bbc <_fflush_r+0xc>
 8015c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c02:	f000 fc73 	bl	80164ec <__retarget_lock_release_recursive>
 8015c06:	e7d9      	b.n	8015bbc <_fflush_r+0xc>
 8015c08:	4b05      	ldr	r3, [pc, #20]	; (8015c20 <_fflush_r+0x70>)
 8015c0a:	429c      	cmp	r4, r3
 8015c0c:	d101      	bne.n	8015c12 <_fflush_r+0x62>
 8015c0e:	68ac      	ldr	r4, [r5, #8]
 8015c10:	e7df      	b.n	8015bd2 <_fflush_r+0x22>
 8015c12:	4b04      	ldr	r3, [pc, #16]	; (8015c24 <_fflush_r+0x74>)
 8015c14:	429c      	cmp	r4, r3
 8015c16:	bf08      	it	eq
 8015c18:	68ec      	ldreq	r4, [r5, #12]
 8015c1a:	e7da      	b.n	8015bd2 <_fflush_r+0x22>
 8015c1c:	08017ce4 	.word	0x08017ce4
 8015c20:	08017d04 	.word	0x08017d04
 8015c24:	08017cc4 	.word	0x08017cc4

08015c28 <std>:
 8015c28:	2300      	movs	r3, #0
 8015c2a:	b510      	push	{r4, lr}
 8015c2c:	4604      	mov	r4, r0
 8015c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8015c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015c36:	6083      	str	r3, [r0, #8]
 8015c38:	8181      	strh	r1, [r0, #12]
 8015c3a:	6643      	str	r3, [r0, #100]	; 0x64
 8015c3c:	81c2      	strh	r2, [r0, #14]
 8015c3e:	6183      	str	r3, [r0, #24]
 8015c40:	4619      	mov	r1, r3
 8015c42:	2208      	movs	r2, #8
 8015c44:	305c      	adds	r0, #92	; 0x5c
 8015c46:	f7fd fa57 	bl	80130f8 <memset>
 8015c4a:	4b05      	ldr	r3, [pc, #20]	; (8015c60 <std+0x38>)
 8015c4c:	6224      	str	r4, [r4, #32]
 8015c4e:	6263      	str	r3, [r4, #36]	; 0x24
 8015c50:	4b04      	ldr	r3, [pc, #16]	; (8015c64 <std+0x3c>)
 8015c52:	62a3      	str	r3, [r4, #40]	; 0x28
 8015c54:	4b04      	ldr	r3, [pc, #16]	; (8015c68 <std+0x40>)
 8015c56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015c58:	4b04      	ldr	r3, [pc, #16]	; (8015c6c <std+0x44>)
 8015c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8015c5c:	bd10      	pop	{r4, pc}
 8015c5e:	bf00      	nop
 8015c60:	08017459 	.word	0x08017459
 8015c64:	0801747b 	.word	0x0801747b
 8015c68:	080174b3 	.word	0x080174b3
 8015c6c:	080174d7 	.word	0x080174d7

08015c70 <_cleanup_r>:
 8015c70:	4901      	ldr	r1, [pc, #4]	; (8015c78 <_cleanup_r+0x8>)
 8015c72:	f000 b8af 	b.w	8015dd4 <_fwalk_reent>
 8015c76:	bf00      	nop
 8015c78:	08015bb1 	.word	0x08015bb1

08015c7c <__sfmoreglue>:
 8015c7c:	2268      	movs	r2, #104	; 0x68
 8015c7e:	b570      	push	{r4, r5, r6, lr}
 8015c80:	1e4d      	subs	r5, r1, #1
 8015c82:	4355      	muls	r5, r2
 8015c84:	460e      	mov	r6, r1
 8015c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015c8a:	f001 f9ff 	bl	801708c <_malloc_r>
 8015c8e:	4604      	mov	r4, r0
 8015c90:	b140      	cbz	r0, 8015ca4 <__sfmoreglue+0x28>
 8015c92:	2100      	movs	r1, #0
 8015c94:	e9c0 1600 	strd	r1, r6, [r0]
 8015c98:	300c      	adds	r0, #12
 8015c9a:	60a0      	str	r0, [r4, #8]
 8015c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ca0:	f7fd fa2a 	bl	80130f8 <memset>
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	bd70      	pop	{r4, r5, r6, pc}

08015ca8 <__sfp_lock_acquire>:
 8015ca8:	4801      	ldr	r0, [pc, #4]	; (8015cb0 <__sfp_lock_acquire+0x8>)
 8015caa:	f000 bc1e 	b.w	80164ea <__retarget_lock_acquire_recursive>
 8015cae:	bf00      	nop
 8015cb0:	20000251 	.word	0x20000251

08015cb4 <__sfp_lock_release>:
 8015cb4:	4801      	ldr	r0, [pc, #4]	; (8015cbc <__sfp_lock_release+0x8>)
 8015cb6:	f000 bc19 	b.w	80164ec <__retarget_lock_release_recursive>
 8015cba:	bf00      	nop
 8015cbc:	20000251 	.word	0x20000251

08015cc0 <__sinit_lock_acquire>:
 8015cc0:	4801      	ldr	r0, [pc, #4]	; (8015cc8 <__sinit_lock_acquire+0x8>)
 8015cc2:	f000 bc12 	b.w	80164ea <__retarget_lock_acquire_recursive>
 8015cc6:	bf00      	nop
 8015cc8:	20000252 	.word	0x20000252

08015ccc <__sinit_lock_release>:
 8015ccc:	4801      	ldr	r0, [pc, #4]	; (8015cd4 <__sinit_lock_release+0x8>)
 8015cce:	f000 bc0d 	b.w	80164ec <__retarget_lock_release_recursive>
 8015cd2:	bf00      	nop
 8015cd4:	20000252 	.word	0x20000252

08015cd8 <__sinit>:
 8015cd8:	b510      	push	{r4, lr}
 8015cda:	4604      	mov	r4, r0
 8015cdc:	f7ff fff0 	bl	8015cc0 <__sinit_lock_acquire>
 8015ce0:	69a3      	ldr	r3, [r4, #24]
 8015ce2:	b11b      	cbz	r3, 8015cec <__sinit+0x14>
 8015ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ce8:	f7ff bff0 	b.w	8015ccc <__sinit_lock_release>
 8015cec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015cf0:	6523      	str	r3, [r4, #80]	; 0x50
 8015cf2:	4b13      	ldr	r3, [pc, #76]	; (8015d40 <__sinit+0x68>)
 8015cf4:	4a13      	ldr	r2, [pc, #76]	; (8015d44 <__sinit+0x6c>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	62a2      	str	r2, [r4, #40]	; 0x28
 8015cfa:	42a3      	cmp	r3, r4
 8015cfc:	bf08      	it	eq
 8015cfe:	2301      	moveq	r3, #1
 8015d00:	4620      	mov	r0, r4
 8015d02:	bf08      	it	eq
 8015d04:	61a3      	streq	r3, [r4, #24]
 8015d06:	f000 f81f 	bl	8015d48 <__sfp>
 8015d0a:	6060      	str	r0, [r4, #4]
 8015d0c:	4620      	mov	r0, r4
 8015d0e:	f000 f81b 	bl	8015d48 <__sfp>
 8015d12:	60a0      	str	r0, [r4, #8]
 8015d14:	4620      	mov	r0, r4
 8015d16:	f000 f817 	bl	8015d48 <__sfp>
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	2104      	movs	r1, #4
 8015d1e:	60e0      	str	r0, [r4, #12]
 8015d20:	6860      	ldr	r0, [r4, #4]
 8015d22:	f7ff ff81 	bl	8015c28 <std>
 8015d26:	2201      	movs	r2, #1
 8015d28:	2109      	movs	r1, #9
 8015d2a:	68a0      	ldr	r0, [r4, #8]
 8015d2c:	f7ff ff7c 	bl	8015c28 <std>
 8015d30:	2202      	movs	r2, #2
 8015d32:	2112      	movs	r1, #18
 8015d34:	68e0      	ldr	r0, [r4, #12]
 8015d36:	f7ff ff77 	bl	8015c28 <std>
 8015d3a:	2301      	movs	r3, #1
 8015d3c:	61a3      	str	r3, [r4, #24]
 8015d3e:	e7d1      	b.n	8015ce4 <__sinit+0xc>
 8015d40:	08017aa0 	.word	0x08017aa0
 8015d44:	08015c71 	.word	0x08015c71

08015d48 <__sfp>:
 8015d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d4a:	4607      	mov	r7, r0
 8015d4c:	f7ff ffac 	bl	8015ca8 <__sfp_lock_acquire>
 8015d50:	4b1e      	ldr	r3, [pc, #120]	; (8015dcc <__sfp+0x84>)
 8015d52:	681e      	ldr	r6, [r3, #0]
 8015d54:	69b3      	ldr	r3, [r6, #24]
 8015d56:	b913      	cbnz	r3, 8015d5e <__sfp+0x16>
 8015d58:	4630      	mov	r0, r6
 8015d5a:	f7ff ffbd 	bl	8015cd8 <__sinit>
 8015d5e:	3648      	adds	r6, #72	; 0x48
 8015d60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015d64:	3b01      	subs	r3, #1
 8015d66:	d503      	bpl.n	8015d70 <__sfp+0x28>
 8015d68:	6833      	ldr	r3, [r6, #0]
 8015d6a:	b30b      	cbz	r3, 8015db0 <__sfp+0x68>
 8015d6c:	6836      	ldr	r6, [r6, #0]
 8015d6e:	e7f7      	b.n	8015d60 <__sfp+0x18>
 8015d70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015d74:	b9d5      	cbnz	r5, 8015dac <__sfp+0x64>
 8015d76:	4b16      	ldr	r3, [pc, #88]	; (8015dd0 <__sfp+0x88>)
 8015d78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015d7c:	60e3      	str	r3, [r4, #12]
 8015d7e:	6665      	str	r5, [r4, #100]	; 0x64
 8015d80:	f000 fbb2 	bl	80164e8 <__retarget_lock_init_recursive>
 8015d84:	f7ff ff96 	bl	8015cb4 <__sfp_lock_release>
 8015d88:	2208      	movs	r2, #8
 8015d8a:	4629      	mov	r1, r5
 8015d8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015d90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015d94:	6025      	str	r5, [r4, #0]
 8015d96:	61a5      	str	r5, [r4, #24]
 8015d98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015d9c:	f7fd f9ac 	bl	80130f8 <memset>
 8015da0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015da4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015da8:	4620      	mov	r0, r4
 8015daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dac:	3468      	adds	r4, #104	; 0x68
 8015dae:	e7d9      	b.n	8015d64 <__sfp+0x1c>
 8015db0:	2104      	movs	r1, #4
 8015db2:	4638      	mov	r0, r7
 8015db4:	f7ff ff62 	bl	8015c7c <__sfmoreglue>
 8015db8:	4604      	mov	r4, r0
 8015dba:	6030      	str	r0, [r6, #0]
 8015dbc:	2800      	cmp	r0, #0
 8015dbe:	d1d5      	bne.n	8015d6c <__sfp+0x24>
 8015dc0:	f7ff ff78 	bl	8015cb4 <__sfp_lock_release>
 8015dc4:	230c      	movs	r3, #12
 8015dc6:	603b      	str	r3, [r7, #0]
 8015dc8:	e7ee      	b.n	8015da8 <__sfp+0x60>
 8015dca:	bf00      	nop
 8015dcc:	08017aa0 	.word	0x08017aa0
 8015dd0:	ffff0001 	.word	0xffff0001

08015dd4 <_fwalk_reent>:
 8015dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015dd8:	4606      	mov	r6, r0
 8015dda:	4688      	mov	r8, r1
 8015ddc:	2700      	movs	r7, #0
 8015dde:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015de2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015de6:	f1b9 0901 	subs.w	r9, r9, #1
 8015dea:	d505      	bpl.n	8015df8 <_fwalk_reent+0x24>
 8015dec:	6824      	ldr	r4, [r4, #0]
 8015dee:	2c00      	cmp	r4, #0
 8015df0:	d1f7      	bne.n	8015de2 <_fwalk_reent+0xe>
 8015df2:	4638      	mov	r0, r7
 8015df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015df8:	89ab      	ldrh	r3, [r5, #12]
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	d907      	bls.n	8015e0e <_fwalk_reent+0x3a>
 8015dfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015e02:	3301      	adds	r3, #1
 8015e04:	d003      	beq.n	8015e0e <_fwalk_reent+0x3a>
 8015e06:	4629      	mov	r1, r5
 8015e08:	4630      	mov	r0, r6
 8015e0a:	47c0      	blx	r8
 8015e0c:	4307      	orrs	r7, r0
 8015e0e:	3568      	adds	r5, #104	; 0x68
 8015e10:	e7e9      	b.n	8015de6 <_fwalk_reent+0x12>

08015e12 <rshift>:
 8015e12:	6903      	ldr	r3, [r0, #16]
 8015e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e18:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015e1c:	f100 0414 	add.w	r4, r0, #20
 8015e20:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015e24:	dd46      	ble.n	8015eb4 <rshift+0xa2>
 8015e26:	f011 011f 	ands.w	r1, r1, #31
 8015e2a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015e2e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015e32:	d10c      	bne.n	8015e4e <rshift+0x3c>
 8015e34:	4629      	mov	r1, r5
 8015e36:	f100 0710 	add.w	r7, r0, #16
 8015e3a:	42b1      	cmp	r1, r6
 8015e3c:	d335      	bcc.n	8015eaa <rshift+0x98>
 8015e3e:	1a9b      	subs	r3, r3, r2
 8015e40:	009b      	lsls	r3, r3, #2
 8015e42:	1eea      	subs	r2, r5, #3
 8015e44:	4296      	cmp	r6, r2
 8015e46:	bf38      	it	cc
 8015e48:	2300      	movcc	r3, #0
 8015e4a:	4423      	add	r3, r4
 8015e4c:	e015      	b.n	8015e7a <rshift+0x68>
 8015e4e:	46a1      	mov	r9, r4
 8015e50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015e54:	f1c1 0820 	rsb	r8, r1, #32
 8015e58:	40cf      	lsrs	r7, r1
 8015e5a:	f105 0e04 	add.w	lr, r5, #4
 8015e5e:	4576      	cmp	r6, lr
 8015e60:	46f4      	mov	ip, lr
 8015e62:	d816      	bhi.n	8015e92 <rshift+0x80>
 8015e64:	1a9a      	subs	r2, r3, r2
 8015e66:	0092      	lsls	r2, r2, #2
 8015e68:	3a04      	subs	r2, #4
 8015e6a:	3501      	adds	r5, #1
 8015e6c:	42ae      	cmp	r6, r5
 8015e6e:	bf38      	it	cc
 8015e70:	2200      	movcc	r2, #0
 8015e72:	18a3      	adds	r3, r4, r2
 8015e74:	50a7      	str	r7, [r4, r2]
 8015e76:	b107      	cbz	r7, 8015e7a <rshift+0x68>
 8015e78:	3304      	adds	r3, #4
 8015e7a:	42a3      	cmp	r3, r4
 8015e7c:	eba3 0204 	sub.w	r2, r3, r4
 8015e80:	bf08      	it	eq
 8015e82:	2300      	moveq	r3, #0
 8015e84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015e88:	6102      	str	r2, [r0, #16]
 8015e8a:	bf08      	it	eq
 8015e8c:	6143      	streq	r3, [r0, #20]
 8015e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e92:	f8dc c000 	ldr.w	ip, [ip]
 8015e96:	fa0c fc08 	lsl.w	ip, ip, r8
 8015e9a:	ea4c 0707 	orr.w	r7, ip, r7
 8015e9e:	f849 7b04 	str.w	r7, [r9], #4
 8015ea2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015ea6:	40cf      	lsrs	r7, r1
 8015ea8:	e7d9      	b.n	8015e5e <rshift+0x4c>
 8015eaa:	f851 cb04 	ldr.w	ip, [r1], #4
 8015eae:	f847 cf04 	str.w	ip, [r7, #4]!
 8015eb2:	e7c2      	b.n	8015e3a <rshift+0x28>
 8015eb4:	4623      	mov	r3, r4
 8015eb6:	e7e0      	b.n	8015e7a <rshift+0x68>

08015eb8 <__hexdig_fun>:
 8015eb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015ebc:	2b09      	cmp	r3, #9
 8015ebe:	d802      	bhi.n	8015ec6 <__hexdig_fun+0xe>
 8015ec0:	3820      	subs	r0, #32
 8015ec2:	b2c0      	uxtb	r0, r0
 8015ec4:	4770      	bx	lr
 8015ec6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015eca:	2b05      	cmp	r3, #5
 8015ecc:	d801      	bhi.n	8015ed2 <__hexdig_fun+0x1a>
 8015ece:	3847      	subs	r0, #71	; 0x47
 8015ed0:	e7f7      	b.n	8015ec2 <__hexdig_fun+0xa>
 8015ed2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015ed6:	2b05      	cmp	r3, #5
 8015ed8:	d801      	bhi.n	8015ede <__hexdig_fun+0x26>
 8015eda:	3827      	subs	r0, #39	; 0x27
 8015edc:	e7f1      	b.n	8015ec2 <__hexdig_fun+0xa>
 8015ede:	2000      	movs	r0, #0
 8015ee0:	4770      	bx	lr
	...

08015ee4 <__gethex>:
 8015ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee8:	b08b      	sub	sp, #44	; 0x2c
 8015eea:	9305      	str	r3, [sp, #20]
 8015eec:	4bb2      	ldr	r3, [pc, #712]	; (80161b8 <__gethex+0x2d4>)
 8015eee:	9002      	str	r0, [sp, #8]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	468b      	mov	fp, r1
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	4690      	mov	r8, r2
 8015ef8:	9303      	str	r3, [sp, #12]
 8015efa:	f7fa f995 	bl	8010228 <strlen>
 8015efe:	4682      	mov	sl, r0
 8015f00:	9b03      	ldr	r3, [sp, #12]
 8015f02:	f8db 2000 	ldr.w	r2, [fp]
 8015f06:	4403      	add	r3, r0
 8015f08:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015f0c:	9306      	str	r3, [sp, #24]
 8015f0e:	1c93      	adds	r3, r2, #2
 8015f10:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015f14:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015f18:	32fe      	adds	r2, #254	; 0xfe
 8015f1a:	18d1      	adds	r1, r2, r3
 8015f1c:	461f      	mov	r7, r3
 8015f1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015f22:	9101      	str	r1, [sp, #4]
 8015f24:	2830      	cmp	r0, #48	; 0x30
 8015f26:	d0f8      	beq.n	8015f1a <__gethex+0x36>
 8015f28:	f7ff ffc6 	bl	8015eb8 <__hexdig_fun>
 8015f2c:	4604      	mov	r4, r0
 8015f2e:	2800      	cmp	r0, #0
 8015f30:	d13a      	bne.n	8015fa8 <__gethex+0xc4>
 8015f32:	4652      	mov	r2, sl
 8015f34:	4638      	mov	r0, r7
 8015f36:	9903      	ldr	r1, [sp, #12]
 8015f38:	f001 fad1 	bl	80174de <strncmp>
 8015f3c:	4605      	mov	r5, r0
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	d166      	bne.n	8016010 <__gethex+0x12c>
 8015f42:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015f46:	eb07 060a 	add.w	r6, r7, sl
 8015f4a:	f7ff ffb5 	bl	8015eb8 <__hexdig_fun>
 8015f4e:	2800      	cmp	r0, #0
 8015f50:	d060      	beq.n	8016014 <__gethex+0x130>
 8015f52:	4633      	mov	r3, r6
 8015f54:	7818      	ldrb	r0, [r3, #0]
 8015f56:	461f      	mov	r7, r3
 8015f58:	2830      	cmp	r0, #48	; 0x30
 8015f5a:	f103 0301 	add.w	r3, r3, #1
 8015f5e:	d0f9      	beq.n	8015f54 <__gethex+0x70>
 8015f60:	f7ff ffaa 	bl	8015eb8 <__hexdig_fun>
 8015f64:	2301      	movs	r3, #1
 8015f66:	fab0 f480 	clz	r4, r0
 8015f6a:	4635      	mov	r5, r6
 8015f6c:	0964      	lsrs	r4, r4, #5
 8015f6e:	9301      	str	r3, [sp, #4]
 8015f70:	463a      	mov	r2, r7
 8015f72:	4616      	mov	r6, r2
 8015f74:	7830      	ldrb	r0, [r6, #0]
 8015f76:	3201      	adds	r2, #1
 8015f78:	f7ff ff9e 	bl	8015eb8 <__hexdig_fun>
 8015f7c:	2800      	cmp	r0, #0
 8015f7e:	d1f8      	bne.n	8015f72 <__gethex+0x8e>
 8015f80:	4652      	mov	r2, sl
 8015f82:	4630      	mov	r0, r6
 8015f84:	9903      	ldr	r1, [sp, #12]
 8015f86:	f001 faaa 	bl	80174de <strncmp>
 8015f8a:	b980      	cbnz	r0, 8015fae <__gethex+0xca>
 8015f8c:	b94d      	cbnz	r5, 8015fa2 <__gethex+0xbe>
 8015f8e:	eb06 050a 	add.w	r5, r6, sl
 8015f92:	462a      	mov	r2, r5
 8015f94:	4616      	mov	r6, r2
 8015f96:	7830      	ldrb	r0, [r6, #0]
 8015f98:	3201      	adds	r2, #1
 8015f9a:	f7ff ff8d 	bl	8015eb8 <__hexdig_fun>
 8015f9e:	2800      	cmp	r0, #0
 8015fa0:	d1f8      	bne.n	8015f94 <__gethex+0xb0>
 8015fa2:	1bad      	subs	r5, r5, r6
 8015fa4:	00ad      	lsls	r5, r5, #2
 8015fa6:	e004      	b.n	8015fb2 <__gethex+0xce>
 8015fa8:	2400      	movs	r4, #0
 8015faa:	4625      	mov	r5, r4
 8015fac:	e7e0      	b.n	8015f70 <__gethex+0x8c>
 8015fae:	2d00      	cmp	r5, #0
 8015fb0:	d1f7      	bne.n	8015fa2 <__gethex+0xbe>
 8015fb2:	7833      	ldrb	r3, [r6, #0]
 8015fb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015fb8:	2b50      	cmp	r3, #80	; 0x50
 8015fba:	d139      	bne.n	8016030 <__gethex+0x14c>
 8015fbc:	7873      	ldrb	r3, [r6, #1]
 8015fbe:	2b2b      	cmp	r3, #43	; 0x2b
 8015fc0:	d02a      	beq.n	8016018 <__gethex+0x134>
 8015fc2:	2b2d      	cmp	r3, #45	; 0x2d
 8015fc4:	d02c      	beq.n	8016020 <__gethex+0x13c>
 8015fc6:	f04f 0900 	mov.w	r9, #0
 8015fca:	1c71      	adds	r1, r6, #1
 8015fcc:	7808      	ldrb	r0, [r1, #0]
 8015fce:	f7ff ff73 	bl	8015eb8 <__hexdig_fun>
 8015fd2:	1e43      	subs	r3, r0, #1
 8015fd4:	b2db      	uxtb	r3, r3
 8015fd6:	2b18      	cmp	r3, #24
 8015fd8:	d82a      	bhi.n	8016030 <__gethex+0x14c>
 8015fda:	f1a0 0210 	sub.w	r2, r0, #16
 8015fde:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015fe2:	f7ff ff69 	bl	8015eb8 <__hexdig_fun>
 8015fe6:	1e43      	subs	r3, r0, #1
 8015fe8:	b2db      	uxtb	r3, r3
 8015fea:	2b18      	cmp	r3, #24
 8015fec:	d91b      	bls.n	8016026 <__gethex+0x142>
 8015fee:	f1b9 0f00 	cmp.w	r9, #0
 8015ff2:	d000      	beq.n	8015ff6 <__gethex+0x112>
 8015ff4:	4252      	negs	r2, r2
 8015ff6:	4415      	add	r5, r2
 8015ff8:	f8cb 1000 	str.w	r1, [fp]
 8015ffc:	b1d4      	cbz	r4, 8016034 <__gethex+0x150>
 8015ffe:	9b01      	ldr	r3, [sp, #4]
 8016000:	2b00      	cmp	r3, #0
 8016002:	bf14      	ite	ne
 8016004:	2700      	movne	r7, #0
 8016006:	2706      	moveq	r7, #6
 8016008:	4638      	mov	r0, r7
 801600a:	b00b      	add	sp, #44	; 0x2c
 801600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016010:	463e      	mov	r6, r7
 8016012:	4625      	mov	r5, r4
 8016014:	2401      	movs	r4, #1
 8016016:	e7cc      	b.n	8015fb2 <__gethex+0xce>
 8016018:	f04f 0900 	mov.w	r9, #0
 801601c:	1cb1      	adds	r1, r6, #2
 801601e:	e7d5      	b.n	8015fcc <__gethex+0xe8>
 8016020:	f04f 0901 	mov.w	r9, #1
 8016024:	e7fa      	b.n	801601c <__gethex+0x138>
 8016026:	230a      	movs	r3, #10
 8016028:	fb03 0202 	mla	r2, r3, r2, r0
 801602c:	3a10      	subs	r2, #16
 801602e:	e7d6      	b.n	8015fde <__gethex+0xfa>
 8016030:	4631      	mov	r1, r6
 8016032:	e7e1      	b.n	8015ff8 <__gethex+0x114>
 8016034:	4621      	mov	r1, r4
 8016036:	1bf3      	subs	r3, r6, r7
 8016038:	3b01      	subs	r3, #1
 801603a:	2b07      	cmp	r3, #7
 801603c:	dc0a      	bgt.n	8016054 <__gethex+0x170>
 801603e:	9802      	ldr	r0, [sp, #8]
 8016040:	f000 faf0 	bl	8016624 <_Balloc>
 8016044:	4604      	mov	r4, r0
 8016046:	b940      	cbnz	r0, 801605a <__gethex+0x176>
 8016048:	4602      	mov	r2, r0
 801604a:	21de      	movs	r1, #222	; 0xde
 801604c:	4b5b      	ldr	r3, [pc, #364]	; (80161bc <__gethex+0x2d8>)
 801604e:	485c      	ldr	r0, [pc, #368]	; (80161c0 <__gethex+0x2dc>)
 8016050:	f001 fa78 	bl	8017544 <__assert_func>
 8016054:	3101      	adds	r1, #1
 8016056:	105b      	asrs	r3, r3, #1
 8016058:	e7ef      	b.n	801603a <__gethex+0x156>
 801605a:	f04f 0b00 	mov.w	fp, #0
 801605e:	f100 0914 	add.w	r9, r0, #20
 8016062:	f1ca 0301 	rsb	r3, sl, #1
 8016066:	f8cd 9010 	str.w	r9, [sp, #16]
 801606a:	f8cd b004 	str.w	fp, [sp, #4]
 801606e:	9308      	str	r3, [sp, #32]
 8016070:	42b7      	cmp	r7, r6
 8016072:	d33f      	bcc.n	80160f4 <__gethex+0x210>
 8016074:	9f04      	ldr	r7, [sp, #16]
 8016076:	9b01      	ldr	r3, [sp, #4]
 8016078:	f847 3b04 	str.w	r3, [r7], #4
 801607c:	eba7 0709 	sub.w	r7, r7, r9
 8016080:	10bf      	asrs	r7, r7, #2
 8016082:	6127      	str	r7, [r4, #16]
 8016084:	4618      	mov	r0, r3
 8016086:	f000 fbbf 	bl	8016808 <__hi0bits>
 801608a:	017f      	lsls	r7, r7, #5
 801608c:	f8d8 6000 	ldr.w	r6, [r8]
 8016090:	1a3f      	subs	r7, r7, r0
 8016092:	42b7      	cmp	r7, r6
 8016094:	dd62      	ble.n	801615c <__gethex+0x278>
 8016096:	1bbf      	subs	r7, r7, r6
 8016098:	4639      	mov	r1, r7
 801609a:	4620      	mov	r0, r4
 801609c:	f000 ff59 	bl	8016f52 <__any_on>
 80160a0:	4682      	mov	sl, r0
 80160a2:	b1a8      	cbz	r0, 80160d0 <__gethex+0x1ec>
 80160a4:	f04f 0a01 	mov.w	sl, #1
 80160a8:	1e7b      	subs	r3, r7, #1
 80160aa:	1159      	asrs	r1, r3, #5
 80160ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80160b0:	f003 021f 	and.w	r2, r3, #31
 80160b4:	fa0a f202 	lsl.w	r2, sl, r2
 80160b8:	420a      	tst	r2, r1
 80160ba:	d009      	beq.n	80160d0 <__gethex+0x1ec>
 80160bc:	4553      	cmp	r3, sl
 80160be:	dd05      	ble.n	80160cc <__gethex+0x1e8>
 80160c0:	4620      	mov	r0, r4
 80160c2:	1eb9      	subs	r1, r7, #2
 80160c4:	f000 ff45 	bl	8016f52 <__any_on>
 80160c8:	2800      	cmp	r0, #0
 80160ca:	d144      	bne.n	8016156 <__gethex+0x272>
 80160cc:	f04f 0a02 	mov.w	sl, #2
 80160d0:	4639      	mov	r1, r7
 80160d2:	4620      	mov	r0, r4
 80160d4:	f7ff fe9d 	bl	8015e12 <rshift>
 80160d8:	443d      	add	r5, r7
 80160da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80160de:	42ab      	cmp	r3, r5
 80160e0:	da4a      	bge.n	8016178 <__gethex+0x294>
 80160e2:	4621      	mov	r1, r4
 80160e4:	9802      	ldr	r0, [sp, #8]
 80160e6:	f000 fadd 	bl	80166a4 <_Bfree>
 80160ea:	2300      	movs	r3, #0
 80160ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80160ee:	27a3      	movs	r7, #163	; 0xa3
 80160f0:	6013      	str	r3, [r2, #0]
 80160f2:	e789      	b.n	8016008 <__gethex+0x124>
 80160f4:	1e73      	subs	r3, r6, #1
 80160f6:	9a06      	ldr	r2, [sp, #24]
 80160f8:	9307      	str	r3, [sp, #28]
 80160fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80160fe:	4293      	cmp	r3, r2
 8016100:	d019      	beq.n	8016136 <__gethex+0x252>
 8016102:	f1bb 0f20 	cmp.w	fp, #32
 8016106:	d107      	bne.n	8016118 <__gethex+0x234>
 8016108:	9b04      	ldr	r3, [sp, #16]
 801610a:	9a01      	ldr	r2, [sp, #4]
 801610c:	f843 2b04 	str.w	r2, [r3], #4
 8016110:	9304      	str	r3, [sp, #16]
 8016112:	2300      	movs	r3, #0
 8016114:	469b      	mov	fp, r3
 8016116:	9301      	str	r3, [sp, #4]
 8016118:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801611c:	f7ff fecc 	bl	8015eb8 <__hexdig_fun>
 8016120:	9b01      	ldr	r3, [sp, #4]
 8016122:	f000 000f 	and.w	r0, r0, #15
 8016126:	fa00 f00b 	lsl.w	r0, r0, fp
 801612a:	4303      	orrs	r3, r0
 801612c:	9301      	str	r3, [sp, #4]
 801612e:	f10b 0b04 	add.w	fp, fp, #4
 8016132:	9b07      	ldr	r3, [sp, #28]
 8016134:	e00d      	b.n	8016152 <__gethex+0x26e>
 8016136:	9a08      	ldr	r2, [sp, #32]
 8016138:	1e73      	subs	r3, r6, #1
 801613a:	4413      	add	r3, r2
 801613c:	42bb      	cmp	r3, r7
 801613e:	d3e0      	bcc.n	8016102 <__gethex+0x21e>
 8016140:	4618      	mov	r0, r3
 8016142:	4652      	mov	r2, sl
 8016144:	9903      	ldr	r1, [sp, #12]
 8016146:	9309      	str	r3, [sp, #36]	; 0x24
 8016148:	f001 f9c9 	bl	80174de <strncmp>
 801614c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801614e:	2800      	cmp	r0, #0
 8016150:	d1d7      	bne.n	8016102 <__gethex+0x21e>
 8016152:	461e      	mov	r6, r3
 8016154:	e78c      	b.n	8016070 <__gethex+0x18c>
 8016156:	f04f 0a03 	mov.w	sl, #3
 801615a:	e7b9      	b.n	80160d0 <__gethex+0x1ec>
 801615c:	da09      	bge.n	8016172 <__gethex+0x28e>
 801615e:	1bf7      	subs	r7, r6, r7
 8016160:	4621      	mov	r1, r4
 8016162:	463a      	mov	r2, r7
 8016164:	9802      	ldr	r0, [sp, #8]
 8016166:	f000 fcb5 	bl	8016ad4 <__lshift>
 801616a:	4604      	mov	r4, r0
 801616c:	1bed      	subs	r5, r5, r7
 801616e:	f100 0914 	add.w	r9, r0, #20
 8016172:	f04f 0a00 	mov.w	sl, #0
 8016176:	e7b0      	b.n	80160da <__gethex+0x1f6>
 8016178:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801617c:	42a8      	cmp	r0, r5
 801617e:	dd72      	ble.n	8016266 <__gethex+0x382>
 8016180:	1b45      	subs	r5, r0, r5
 8016182:	42ae      	cmp	r6, r5
 8016184:	dc35      	bgt.n	80161f2 <__gethex+0x30e>
 8016186:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801618a:	2b02      	cmp	r3, #2
 801618c:	d029      	beq.n	80161e2 <__gethex+0x2fe>
 801618e:	2b03      	cmp	r3, #3
 8016190:	d02b      	beq.n	80161ea <__gethex+0x306>
 8016192:	2b01      	cmp	r3, #1
 8016194:	d11c      	bne.n	80161d0 <__gethex+0x2ec>
 8016196:	42ae      	cmp	r6, r5
 8016198:	d11a      	bne.n	80161d0 <__gethex+0x2ec>
 801619a:	2e01      	cmp	r6, #1
 801619c:	d112      	bne.n	80161c4 <__gethex+0x2e0>
 801619e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80161a2:	9a05      	ldr	r2, [sp, #20]
 80161a4:	2762      	movs	r7, #98	; 0x62
 80161a6:	6013      	str	r3, [r2, #0]
 80161a8:	2301      	movs	r3, #1
 80161aa:	6123      	str	r3, [r4, #16]
 80161ac:	f8c9 3000 	str.w	r3, [r9]
 80161b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80161b2:	601c      	str	r4, [r3, #0]
 80161b4:	e728      	b.n	8016008 <__gethex+0x124>
 80161b6:	bf00      	nop
 80161b8:	08017d8c 	.word	0x08017d8c
 80161bc:	08017cb0 	.word	0x08017cb0
 80161c0:	08017d24 	.word	0x08017d24
 80161c4:	4620      	mov	r0, r4
 80161c6:	1e71      	subs	r1, r6, #1
 80161c8:	f000 fec3 	bl	8016f52 <__any_on>
 80161cc:	2800      	cmp	r0, #0
 80161ce:	d1e6      	bne.n	801619e <__gethex+0x2ba>
 80161d0:	4621      	mov	r1, r4
 80161d2:	9802      	ldr	r0, [sp, #8]
 80161d4:	f000 fa66 	bl	80166a4 <_Bfree>
 80161d8:	2300      	movs	r3, #0
 80161da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80161dc:	2750      	movs	r7, #80	; 0x50
 80161de:	6013      	str	r3, [r2, #0]
 80161e0:	e712      	b.n	8016008 <__gethex+0x124>
 80161e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d1f3      	bne.n	80161d0 <__gethex+0x2ec>
 80161e8:	e7d9      	b.n	801619e <__gethex+0x2ba>
 80161ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d1d6      	bne.n	801619e <__gethex+0x2ba>
 80161f0:	e7ee      	b.n	80161d0 <__gethex+0x2ec>
 80161f2:	1e6f      	subs	r7, r5, #1
 80161f4:	f1ba 0f00 	cmp.w	sl, #0
 80161f8:	d132      	bne.n	8016260 <__gethex+0x37c>
 80161fa:	b127      	cbz	r7, 8016206 <__gethex+0x322>
 80161fc:	4639      	mov	r1, r7
 80161fe:	4620      	mov	r0, r4
 8016200:	f000 fea7 	bl	8016f52 <__any_on>
 8016204:	4682      	mov	sl, r0
 8016206:	2101      	movs	r1, #1
 8016208:	117b      	asrs	r3, r7, #5
 801620a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801620e:	f007 071f 	and.w	r7, r7, #31
 8016212:	fa01 f707 	lsl.w	r7, r1, r7
 8016216:	421f      	tst	r7, r3
 8016218:	f04f 0702 	mov.w	r7, #2
 801621c:	4629      	mov	r1, r5
 801621e:	4620      	mov	r0, r4
 8016220:	bf18      	it	ne
 8016222:	f04a 0a02 	orrne.w	sl, sl, #2
 8016226:	1b76      	subs	r6, r6, r5
 8016228:	f7ff fdf3 	bl	8015e12 <rshift>
 801622c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016230:	f1ba 0f00 	cmp.w	sl, #0
 8016234:	d048      	beq.n	80162c8 <__gethex+0x3e4>
 8016236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801623a:	2b02      	cmp	r3, #2
 801623c:	d015      	beq.n	801626a <__gethex+0x386>
 801623e:	2b03      	cmp	r3, #3
 8016240:	d017      	beq.n	8016272 <__gethex+0x38e>
 8016242:	2b01      	cmp	r3, #1
 8016244:	d109      	bne.n	801625a <__gethex+0x376>
 8016246:	f01a 0f02 	tst.w	sl, #2
 801624a:	d006      	beq.n	801625a <__gethex+0x376>
 801624c:	f8d9 0000 	ldr.w	r0, [r9]
 8016250:	ea4a 0a00 	orr.w	sl, sl, r0
 8016254:	f01a 0f01 	tst.w	sl, #1
 8016258:	d10e      	bne.n	8016278 <__gethex+0x394>
 801625a:	f047 0710 	orr.w	r7, r7, #16
 801625e:	e033      	b.n	80162c8 <__gethex+0x3e4>
 8016260:	f04f 0a01 	mov.w	sl, #1
 8016264:	e7cf      	b.n	8016206 <__gethex+0x322>
 8016266:	2701      	movs	r7, #1
 8016268:	e7e2      	b.n	8016230 <__gethex+0x34c>
 801626a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801626c:	f1c3 0301 	rsb	r3, r3, #1
 8016270:	9315      	str	r3, [sp, #84]	; 0x54
 8016272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016274:	2b00      	cmp	r3, #0
 8016276:	d0f0      	beq.n	801625a <__gethex+0x376>
 8016278:	f04f 0c00 	mov.w	ip, #0
 801627c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016280:	f104 0314 	add.w	r3, r4, #20
 8016284:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016288:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801628c:	4618      	mov	r0, r3
 801628e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016292:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016296:	d01c      	beq.n	80162d2 <__gethex+0x3ee>
 8016298:	3201      	adds	r2, #1
 801629a:	6002      	str	r2, [r0, #0]
 801629c:	2f02      	cmp	r7, #2
 801629e:	f104 0314 	add.w	r3, r4, #20
 80162a2:	d13d      	bne.n	8016320 <__gethex+0x43c>
 80162a4:	f8d8 2000 	ldr.w	r2, [r8]
 80162a8:	3a01      	subs	r2, #1
 80162aa:	42b2      	cmp	r2, r6
 80162ac:	d10a      	bne.n	80162c4 <__gethex+0x3e0>
 80162ae:	2201      	movs	r2, #1
 80162b0:	1171      	asrs	r1, r6, #5
 80162b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80162b6:	f006 061f 	and.w	r6, r6, #31
 80162ba:	fa02 f606 	lsl.w	r6, r2, r6
 80162be:	421e      	tst	r6, r3
 80162c0:	bf18      	it	ne
 80162c2:	4617      	movne	r7, r2
 80162c4:	f047 0720 	orr.w	r7, r7, #32
 80162c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80162ca:	601c      	str	r4, [r3, #0]
 80162cc:	9b05      	ldr	r3, [sp, #20]
 80162ce:	601d      	str	r5, [r3, #0]
 80162d0:	e69a      	b.n	8016008 <__gethex+0x124>
 80162d2:	4299      	cmp	r1, r3
 80162d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80162d8:	d8d8      	bhi.n	801628c <__gethex+0x3a8>
 80162da:	68a3      	ldr	r3, [r4, #8]
 80162dc:	459b      	cmp	fp, r3
 80162de:	db17      	blt.n	8016310 <__gethex+0x42c>
 80162e0:	6861      	ldr	r1, [r4, #4]
 80162e2:	9802      	ldr	r0, [sp, #8]
 80162e4:	3101      	adds	r1, #1
 80162e6:	f000 f99d 	bl	8016624 <_Balloc>
 80162ea:	4681      	mov	r9, r0
 80162ec:	b918      	cbnz	r0, 80162f6 <__gethex+0x412>
 80162ee:	4602      	mov	r2, r0
 80162f0:	2184      	movs	r1, #132	; 0x84
 80162f2:	4b19      	ldr	r3, [pc, #100]	; (8016358 <__gethex+0x474>)
 80162f4:	e6ab      	b.n	801604e <__gethex+0x16a>
 80162f6:	6922      	ldr	r2, [r4, #16]
 80162f8:	f104 010c 	add.w	r1, r4, #12
 80162fc:	3202      	adds	r2, #2
 80162fe:	0092      	lsls	r2, r2, #2
 8016300:	300c      	adds	r0, #12
 8016302:	f000 f981 	bl	8016608 <memcpy>
 8016306:	4621      	mov	r1, r4
 8016308:	9802      	ldr	r0, [sp, #8]
 801630a:	f000 f9cb 	bl	80166a4 <_Bfree>
 801630e:	464c      	mov	r4, r9
 8016310:	6923      	ldr	r3, [r4, #16]
 8016312:	1c5a      	adds	r2, r3, #1
 8016314:	6122      	str	r2, [r4, #16]
 8016316:	2201      	movs	r2, #1
 8016318:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801631c:	615a      	str	r2, [r3, #20]
 801631e:	e7bd      	b.n	801629c <__gethex+0x3b8>
 8016320:	6922      	ldr	r2, [r4, #16]
 8016322:	455a      	cmp	r2, fp
 8016324:	dd0b      	ble.n	801633e <__gethex+0x45a>
 8016326:	2101      	movs	r1, #1
 8016328:	4620      	mov	r0, r4
 801632a:	f7ff fd72 	bl	8015e12 <rshift>
 801632e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016332:	3501      	adds	r5, #1
 8016334:	42ab      	cmp	r3, r5
 8016336:	f6ff aed4 	blt.w	80160e2 <__gethex+0x1fe>
 801633a:	2701      	movs	r7, #1
 801633c:	e7c2      	b.n	80162c4 <__gethex+0x3e0>
 801633e:	f016 061f 	ands.w	r6, r6, #31
 8016342:	d0fa      	beq.n	801633a <__gethex+0x456>
 8016344:	4453      	add	r3, sl
 8016346:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801634a:	f000 fa5d 	bl	8016808 <__hi0bits>
 801634e:	f1c6 0620 	rsb	r6, r6, #32
 8016352:	42b0      	cmp	r0, r6
 8016354:	dbe7      	blt.n	8016326 <__gethex+0x442>
 8016356:	e7f0      	b.n	801633a <__gethex+0x456>
 8016358:	08017cb0 	.word	0x08017cb0

0801635c <L_shift>:
 801635c:	f1c2 0208 	rsb	r2, r2, #8
 8016360:	0092      	lsls	r2, r2, #2
 8016362:	b570      	push	{r4, r5, r6, lr}
 8016364:	f1c2 0620 	rsb	r6, r2, #32
 8016368:	6843      	ldr	r3, [r0, #4]
 801636a:	6804      	ldr	r4, [r0, #0]
 801636c:	fa03 f506 	lsl.w	r5, r3, r6
 8016370:	432c      	orrs	r4, r5
 8016372:	40d3      	lsrs	r3, r2
 8016374:	6004      	str	r4, [r0, #0]
 8016376:	f840 3f04 	str.w	r3, [r0, #4]!
 801637a:	4288      	cmp	r0, r1
 801637c:	d3f4      	bcc.n	8016368 <L_shift+0xc>
 801637e:	bd70      	pop	{r4, r5, r6, pc}

08016380 <__match>:
 8016380:	b530      	push	{r4, r5, lr}
 8016382:	6803      	ldr	r3, [r0, #0]
 8016384:	3301      	adds	r3, #1
 8016386:	f811 4b01 	ldrb.w	r4, [r1], #1
 801638a:	b914      	cbnz	r4, 8016392 <__match+0x12>
 801638c:	6003      	str	r3, [r0, #0]
 801638e:	2001      	movs	r0, #1
 8016390:	bd30      	pop	{r4, r5, pc}
 8016392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016396:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801639a:	2d19      	cmp	r5, #25
 801639c:	bf98      	it	ls
 801639e:	3220      	addls	r2, #32
 80163a0:	42a2      	cmp	r2, r4
 80163a2:	d0f0      	beq.n	8016386 <__match+0x6>
 80163a4:	2000      	movs	r0, #0
 80163a6:	e7f3      	b.n	8016390 <__match+0x10>

080163a8 <__hexnan>:
 80163a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ac:	2500      	movs	r5, #0
 80163ae:	680b      	ldr	r3, [r1, #0]
 80163b0:	4682      	mov	sl, r0
 80163b2:	115e      	asrs	r6, r3, #5
 80163b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80163b8:	f013 031f 	ands.w	r3, r3, #31
 80163bc:	bf18      	it	ne
 80163be:	3604      	addne	r6, #4
 80163c0:	1f37      	subs	r7, r6, #4
 80163c2:	46b9      	mov	r9, r7
 80163c4:	463c      	mov	r4, r7
 80163c6:	46ab      	mov	fp, r5
 80163c8:	b087      	sub	sp, #28
 80163ca:	4690      	mov	r8, r2
 80163cc:	6802      	ldr	r2, [r0, #0]
 80163ce:	9301      	str	r3, [sp, #4]
 80163d0:	f846 5c04 	str.w	r5, [r6, #-4]
 80163d4:	9502      	str	r5, [sp, #8]
 80163d6:	7851      	ldrb	r1, [r2, #1]
 80163d8:	1c53      	adds	r3, r2, #1
 80163da:	9303      	str	r3, [sp, #12]
 80163dc:	b341      	cbz	r1, 8016430 <__hexnan+0x88>
 80163de:	4608      	mov	r0, r1
 80163e0:	9205      	str	r2, [sp, #20]
 80163e2:	9104      	str	r1, [sp, #16]
 80163e4:	f7ff fd68 	bl	8015eb8 <__hexdig_fun>
 80163e8:	2800      	cmp	r0, #0
 80163ea:	d14f      	bne.n	801648c <__hexnan+0xe4>
 80163ec:	9904      	ldr	r1, [sp, #16]
 80163ee:	9a05      	ldr	r2, [sp, #20]
 80163f0:	2920      	cmp	r1, #32
 80163f2:	d818      	bhi.n	8016426 <__hexnan+0x7e>
 80163f4:	9b02      	ldr	r3, [sp, #8]
 80163f6:	459b      	cmp	fp, r3
 80163f8:	dd13      	ble.n	8016422 <__hexnan+0x7a>
 80163fa:	454c      	cmp	r4, r9
 80163fc:	d206      	bcs.n	801640c <__hexnan+0x64>
 80163fe:	2d07      	cmp	r5, #7
 8016400:	dc04      	bgt.n	801640c <__hexnan+0x64>
 8016402:	462a      	mov	r2, r5
 8016404:	4649      	mov	r1, r9
 8016406:	4620      	mov	r0, r4
 8016408:	f7ff ffa8 	bl	801635c <L_shift>
 801640c:	4544      	cmp	r4, r8
 801640e:	d950      	bls.n	80164b2 <__hexnan+0x10a>
 8016410:	2300      	movs	r3, #0
 8016412:	f1a4 0904 	sub.w	r9, r4, #4
 8016416:	f844 3c04 	str.w	r3, [r4, #-4]
 801641a:	461d      	mov	r5, r3
 801641c:	464c      	mov	r4, r9
 801641e:	f8cd b008 	str.w	fp, [sp, #8]
 8016422:	9a03      	ldr	r2, [sp, #12]
 8016424:	e7d7      	b.n	80163d6 <__hexnan+0x2e>
 8016426:	2929      	cmp	r1, #41	; 0x29
 8016428:	d156      	bne.n	80164d8 <__hexnan+0x130>
 801642a:	3202      	adds	r2, #2
 801642c:	f8ca 2000 	str.w	r2, [sl]
 8016430:	f1bb 0f00 	cmp.w	fp, #0
 8016434:	d050      	beq.n	80164d8 <__hexnan+0x130>
 8016436:	454c      	cmp	r4, r9
 8016438:	d206      	bcs.n	8016448 <__hexnan+0xa0>
 801643a:	2d07      	cmp	r5, #7
 801643c:	dc04      	bgt.n	8016448 <__hexnan+0xa0>
 801643e:	462a      	mov	r2, r5
 8016440:	4649      	mov	r1, r9
 8016442:	4620      	mov	r0, r4
 8016444:	f7ff ff8a 	bl	801635c <L_shift>
 8016448:	4544      	cmp	r4, r8
 801644a:	d934      	bls.n	80164b6 <__hexnan+0x10e>
 801644c:	4623      	mov	r3, r4
 801644e:	f1a8 0204 	sub.w	r2, r8, #4
 8016452:	f853 1b04 	ldr.w	r1, [r3], #4
 8016456:	429f      	cmp	r7, r3
 8016458:	f842 1f04 	str.w	r1, [r2, #4]!
 801645c:	d2f9      	bcs.n	8016452 <__hexnan+0xaa>
 801645e:	1b3b      	subs	r3, r7, r4
 8016460:	f023 0303 	bic.w	r3, r3, #3
 8016464:	3304      	adds	r3, #4
 8016466:	3401      	adds	r4, #1
 8016468:	3e03      	subs	r6, #3
 801646a:	42b4      	cmp	r4, r6
 801646c:	bf88      	it	hi
 801646e:	2304      	movhi	r3, #4
 8016470:	2200      	movs	r2, #0
 8016472:	4443      	add	r3, r8
 8016474:	f843 2b04 	str.w	r2, [r3], #4
 8016478:	429f      	cmp	r7, r3
 801647a:	d2fb      	bcs.n	8016474 <__hexnan+0xcc>
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	b91b      	cbnz	r3, 8016488 <__hexnan+0xe0>
 8016480:	4547      	cmp	r7, r8
 8016482:	d127      	bne.n	80164d4 <__hexnan+0x12c>
 8016484:	2301      	movs	r3, #1
 8016486:	603b      	str	r3, [r7, #0]
 8016488:	2005      	movs	r0, #5
 801648a:	e026      	b.n	80164da <__hexnan+0x132>
 801648c:	3501      	adds	r5, #1
 801648e:	2d08      	cmp	r5, #8
 8016490:	f10b 0b01 	add.w	fp, fp, #1
 8016494:	dd06      	ble.n	80164a4 <__hexnan+0xfc>
 8016496:	4544      	cmp	r4, r8
 8016498:	d9c3      	bls.n	8016422 <__hexnan+0x7a>
 801649a:	2300      	movs	r3, #0
 801649c:	2501      	movs	r5, #1
 801649e:	f844 3c04 	str.w	r3, [r4, #-4]
 80164a2:	3c04      	subs	r4, #4
 80164a4:	6822      	ldr	r2, [r4, #0]
 80164a6:	f000 000f 	and.w	r0, r0, #15
 80164aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80164ae:	6022      	str	r2, [r4, #0]
 80164b0:	e7b7      	b.n	8016422 <__hexnan+0x7a>
 80164b2:	2508      	movs	r5, #8
 80164b4:	e7b5      	b.n	8016422 <__hexnan+0x7a>
 80164b6:	9b01      	ldr	r3, [sp, #4]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d0df      	beq.n	801647c <__hexnan+0xd4>
 80164bc:	f04f 32ff 	mov.w	r2, #4294967295
 80164c0:	f1c3 0320 	rsb	r3, r3, #32
 80164c4:	fa22 f303 	lsr.w	r3, r2, r3
 80164c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80164cc:	401a      	ands	r2, r3
 80164ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80164d2:	e7d3      	b.n	801647c <__hexnan+0xd4>
 80164d4:	3f04      	subs	r7, #4
 80164d6:	e7d1      	b.n	801647c <__hexnan+0xd4>
 80164d8:	2004      	movs	r0, #4
 80164da:	b007      	add	sp, #28
 80164dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164e0 <_localeconv_r>:
 80164e0:	4800      	ldr	r0, [pc, #0]	; (80164e4 <_localeconv_r+0x4>)
 80164e2:	4770      	bx	lr
 80164e4:	20000164 	.word	0x20000164

080164e8 <__retarget_lock_init_recursive>:
 80164e8:	4770      	bx	lr

080164ea <__retarget_lock_acquire_recursive>:
 80164ea:	4770      	bx	lr

080164ec <__retarget_lock_release_recursive>:
 80164ec:	4770      	bx	lr

080164ee <__swhatbuf_r>:
 80164ee:	b570      	push	{r4, r5, r6, lr}
 80164f0:	460e      	mov	r6, r1
 80164f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164f6:	4614      	mov	r4, r2
 80164f8:	2900      	cmp	r1, #0
 80164fa:	461d      	mov	r5, r3
 80164fc:	b096      	sub	sp, #88	; 0x58
 80164fe:	da08      	bge.n	8016512 <__swhatbuf_r+0x24>
 8016500:	2200      	movs	r2, #0
 8016502:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016506:	602a      	str	r2, [r5, #0]
 8016508:	061a      	lsls	r2, r3, #24
 801650a:	d410      	bmi.n	801652e <__swhatbuf_r+0x40>
 801650c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016510:	e00e      	b.n	8016530 <__swhatbuf_r+0x42>
 8016512:	466a      	mov	r2, sp
 8016514:	f001 f856 	bl	80175c4 <_fstat_r>
 8016518:	2800      	cmp	r0, #0
 801651a:	dbf1      	blt.n	8016500 <__swhatbuf_r+0x12>
 801651c:	9a01      	ldr	r2, [sp, #4]
 801651e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016522:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016526:	425a      	negs	r2, r3
 8016528:	415a      	adcs	r2, r3
 801652a:	602a      	str	r2, [r5, #0]
 801652c:	e7ee      	b.n	801650c <__swhatbuf_r+0x1e>
 801652e:	2340      	movs	r3, #64	; 0x40
 8016530:	2000      	movs	r0, #0
 8016532:	6023      	str	r3, [r4, #0]
 8016534:	b016      	add	sp, #88	; 0x58
 8016536:	bd70      	pop	{r4, r5, r6, pc}

08016538 <__smakebuf_r>:
 8016538:	898b      	ldrh	r3, [r1, #12]
 801653a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801653c:	079d      	lsls	r5, r3, #30
 801653e:	4606      	mov	r6, r0
 8016540:	460c      	mov	r4, r1
 8016542:	d507      	bpl.n	8016554 <__smakebuf_r+0x1c>
 8016544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016548:	6023      	str	r3, [r4, #0]
 801654a:	6123      	str	r3, [r4, #16]
 801654c:	2301      	movs	r3, #1
 801654e:	6163      	str	r3, [r4, #20]
 8016550:	b002      	add	sp, #8
 8016552:	bd70      	pop	{r4, r5, r6, pc}
 8016554:	466a      	mov	r2, sp
 8016556:	ab01      	add	r3, sp, #4
 8016558:	f7ff ffc9 	bl	80164ee <__swhatbuf_r>
 801655c:	9900      	ldr	r1, [sp, #0]
 801655e:	4605      	mov	r5, r0
 8016560:	4630      	mov	r0, r6
 8016562:	f000 fd93 	bl	801708c <_malloc_r>
 8016566:	b948      	cbnz	r0, 801657c <__smakebuf_r+0x44>
 8016568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801656c:	059a      	lsls	r2, r3, #22
 801656e:	d4ef      	bmi.n	8016550 <__smakebuf_r+0x18>
 8016570:	f023 0303 	bic.w	r3, r3, #3
 8016574:	f043 0302 	orr.w	r3, r3, #2
 8016578:	81a3      	strh	r3, [r4, #12]
 801657a:	e7e3      	b.n	8016544 <__smakebuf_r+0xc>
 801657c:	4b0d      	ldr	r3, [pc, #52]	; (80165b4 <__smakebuf_r+0x7c>)
 801657e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016580:	89a3      	ldrh	r3, [r4, #12]
 8016582:	6020      	str	r0, [r4, #0]
 8016584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016588:	81a3      	strh	r3, [r4, #12]
 801658a:	9b00      	ldr	r3, [sp, #0]
 801658c:	6120      	str	r0, [r4, #16]
 801658e:	6163      	str	r3, [r4, #20]
 8016590:	9b01      	ldr	r3, [sp, #4]
 8016592:	b15b      	cbz	r3, 80165ac <__smakebuf_r+0x74>
 8016594:	4630      	mov	r0, r6
 8016596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801659a:	f001 f825 	bl	80175e8 <_isatty_r>
 801659e:	b128      	cbz	r0, 80165ac <__smakebuf_r+0x74>
 80165a0:	89a3      	ldrh	r3, [r4, #12]
 80165a2:	f023 0303 	bic.w	r3, r3, #3
 80165a6:	f043 0301 	orr.w	r3, r3, #1
 80165aa:	81a3      	strh	r3, [r4, #12]
 80165ac:	89a0      	ldrh	r0, [r4, #12]
 80165ae:	4305      	orrs	r5, r0
 80165b0:	81a5      	strh	r5, [r4, #12]
 80165b2:	e7cd      	b.n	8016550 <__smakebuf_r+0x18>
 80165b4:	08015c71 	.word	0x08015c71

080165b8 <malloc>:
 80165b8:	4b02      	ldr	r3, [pc, #8]	; (80165c4 <malloc+0xc>)
 80165ba:	4601      	mov	r1, r0
 80165bc:	6818      	ldr	r0, [r3, #0]
 80165be:	f000 bd65 	b.w	801708c <_malloc_r>
 80165c2:	bf00      	nop
 80165c4:	2000000c 	.word	0x2000000c

080165c8 <__ascii_mbtowc>:
 80165c8:	b082      	sub	sp, #8
 80165ca:	b901      	cbnz	r1, 80165ce <__ascii_mbtowc+0x6>
 80165cc:	a901      	add	r1, sp, #4
 80165ce:	b142      	cbz	r2, 80165e2 <__ascii_mbtowc+0x1a>
 80165d0:	b14b      	cbz	r3, 80165e6 <__ascii_mbtowc+0x1e>
 80165d2:	7813      	ldrb	r3, [r2, #0]
 80165d4:	600b      	str	r3, [r1, #0]
 80165d6:	7812      	ldrb	r2, [r2, #0]
 80165d8:	1e10      	subs	r0, r2, #0
 80165da:	bf18      	it	ne
 80165dc:	2001      	movne	r0, #1
 80165de:	b002      	add	sp, #8
 80165e0:	4770      	bx	lr
 80165e2:	4610      	mov	r0, r2
 80165e4:	e7fb      	b.n	80165de <__ascii_mbtowc+0x16>
 80165e6:	f06f 0001 	mvn.w	r0, #1
 80165ea:	e7f8      	b.n	80165de <__ascii_mbtowc+0x16>

080165ec <memchr>:
 80165ec:	4603      	mov	r3, r0
 80165ee:	b510      	push	{r4, lr}
 80165f0:	b2c9      	uxtb	r1, r1
 80165f2:	4402      	add	r2, r0
 80165f4:	4293      	cmp	r3, r2
 80165f6:	4618      	mov	r0, r3
 80165f8:	d101      	bne.n	80165fe <memchr+0x12>
 80165fa:	2000      	movs	r0, #0
 80165fc:	e003      	b.n	8016606 <memchr+0x1a>
 80165fe:	7804      	ldrb	r4, [r0, #0]
 8016600:	3301      	adds	r3, #1
 8016602:	428c      	cmp	r4, r1
 8016604:	d1f6      	bne.n	80165f4 <memchr+0x8>
 8016606:	bd10      	pop	{r4, pc}

08016608 <memcpy>:
 8016608:	440a      	add	r2, r1
 801660a:	4291      	cmp	r1, r2
 801660c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016610:	d100      	bne.n	8016614 <memcpy+0xc>
 8016612:	4770      	bx	lr
 8016614:	b510      	push	{r4, lr}
 8016616:	f811 4b01 	ldrb.w	r4, [r1], #1
 801661a:	4291      	cmp	r1, r2
 801661c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016620:	d1f9      	bne.n	8016616 <memcpy+0xe>
 8016622:	bd10      	pop	{r4, pc}

08016624 <_Balloc>:
 8016624:	b570      	push	{r4, r5, r6, lr}
 8016626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016628:	4604      	mov	r4, r0
 801662a:	460d      	mov	r5, r1
 801662c:	b976      	cbnz	r6, 801664c <_Balloc+0x28>
 801662e:	2010      	movs	r0, #16
 8016630:	f7ff ffc2 	bl	80165b8 <malloc>
 8016634:	4602      	mov	r2, r0
 8016636:	6260      	str	r0, [r4, #36]	; 0x24
 8016638:	b920      	cbnz	r0, 8016644 <_Balloc+0x20>
 801663a:	2166      	movs	r1, #102	; 0x66
 801663c:	4b17      	ldr	r3, [pc, #92]	; (801669c <_Balloc+0x78>)
 801663e:	4818      	ldr	r0, [pc, #96]	; (80166a0 <_Balloc+0x7c>)
 8016640:	f000 ff80 	bl	8017544 <__assert_func>
 8016644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016648:	6006      	str	r6, [r0, #0]
 801664a:	60c6      	str	r6, [r0, #12]
 801664c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801664e:	68f3      	ldr	r3, [r6, #12]
 8016650:	b183      	cbz	r3, 8016674 <_Balloc+0x50>
 8016652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016654:	68db      	ldr	r3, [r3, #12]
 8016656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801665a:	b9b8      	cbnz	r0, 801668c <_Balloc+0x68>
 801665c:	2101      	movs	r1, #1
 801665e:	fa01 f605 	lsl.w	r6, r1, r5
 8016662:	1d72      	adds	r2, r6, #5
 8016664:	4620      	mov	r0, r4
 8016666:	0092      	lsls	r2, r2, #2
 8016668:	f000 fc94 	bl	8016f94 <_calloc_r>
 801666c:	b160      	cbz	r0, 8016688 <_Balloc+0x64>
 801666e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016672:	e00e      	b.n	8016692 <_Balloc+0x6e>
 8016674:	2221      	movs	r2, #33	; 0x21
 8016676:	2104      	movs	r1, #4
 8016678:	4620      	mov	r0, r4
 801667a:	f000 fc8b 	bl	8016f94 <_calloc_r>
 801667e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016680:	60f0      	str	r0, [r6, #12]
 8016682:	68db      	ldr	r3, [r3, #12]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d1e4      	bne.n	8016652 <_Balloc+0x2e>
 8016688:	2000      	movs	r0, #0
 801668a:	bd70      	pop	{r4, r5, r6, pc}
 801668c:	6802      	ldr	r2, [r0, #0]
 801668e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016692:	2300      	movs	r3, #0
 8016694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016698:	e7f7      	b.n	801668a <_Balloc+0x66>
 801669a:	bf00      	nop
 801669c:	08017c3e 	.word	0x08017c3e
 80166a0:	08017da0 	.word	0x08017da0

080166a4 <_Bfree>:
 80166a4:	b570      	push	{r4, r5, r6, lr}
 80166a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80166a8:	4605      	mov	r5, r0
 80166aa:	460c      	mov	r4, r1
 80166ac:	b976      	cbnz	r6, 80166cc <_Bfree+0x28>
 80166ae:	2010      	movs	r0, #16
 80166b0:	f7ff ff82 	bl	80165b8 <malloc>
 80166b4:	4602      	mov	r2, r0
 80166b6:	6268      	str	r0, [r5, #36]	; 0x24
 80166b8:	b920      	cbnz	r0, 80166c4 <_Bfree+0x20>
 80166ba:	218a      	movs	r1, #138	; 0x8a
 80166bc:	4b08      	ldr	r3, [pc, #32]	; (80166e0 <_Bfree+0x3c>)
 80166be:	4809      	ldr	r0, [pc, #36]	; (80166e4 <_Bfree+0x40>)
 80166c0:	f000 ff40 	bl	8017544 <__assert_func>
 80166c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80166c8:	6006      	str	r6, [r0, #0]
 80166ca:	60c6      	str	r6, [r0, #12]
 80166cc:	b13c      	cbz	r4, 80166de <_Bfree+0x3a>
 80166ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80166d0:	6862      	ldr	r2, [r4, #4]
 80166d2:	68db      	ldr	r3, [r3, #12]
 80166d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80166d8:	6021      	str	r1, [r4, #0]
 80166da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80166de:	bd70      	pop	{r4, r5, r6, pc}
 80166e0:	08017c3e 	.word	0x08017c3e
 80166e4:	08017da0 	.word	0x08017da0

080166e8 <__multadd>:
 80166e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ec:	4607      	mov	r7, r0
 80166ee:	460c      	mov	r4, r1
 80166f0:	461e      	mov	r6, r3
 80166f2:	2000      	movs	r0, #0
 80166f4:	690d      	ldr	r5, [r1, #16]
 80166f6:	f101 0c14 	add.w	ip, r1, #20
 80166fa:	f8dc 3000 	ldr.w	r3, [ip]
 80166fe:	3001      	adds	r0, #1
 8016700:	b299      	uxth	r1, r3
 8016702:	fb02 6101 	mla	r1, r2, r1, r6
 8016706:	0c1e      	lsrs	r6, r3, #16
 8016708:	0c0b      	lsrs	r3, r1, #16
 801670a:	fb02 3306 	mla	r3, r2, r6, r3
 801670e:	b289      	uxth	r1, r1
 8016710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016714:	4285      	cmp	r5, r0
 8016716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801671a:	f84c 1b04 	str.w	r1, [ip], #4
 801671e:	dcec      	bgt.n	80166fa <__multadd+0x12>
 8016720:	b30e      	cbz	r6, 8016766 <__multadd+0x7e>
 8016722:	68a3      	ldr	r3, [r4, #8]
 8016724:	42ab      	cmp	r3, r5
 8016726:	dc19      	bgt.n	801675c <__multadd+0x74>
 8016728:	6861      	ldr	r1, [r4, #4]
 801672a:	4638      	mov	r0, r7
 801672c:	3101      	adds	r1, #1
 801672e:	f7ff ff79 	bl	8016624 <_Balloc>
 8016732:	4680      	mov	r8, r0
 8016734:	b928      	cbnz	r0, 8016742 <__multadd+0x5a>
 8016736:	4602      	mov	r2, r0
 8016738:	21b5      	movs	r1, #181	; 0xb5
 801673a:	4b0c      	ldr	r3, [pc, #48]	; (801676c <__multadd+0x84>)
 801673c:	480c      	ldr	r0, [pc, #48]	; (8016770 <__multadd+0x88>)
 801673e:	f000 ff01 	bl	8017544 <__assert_func>
 8016742:	6922      	ldr	r2, [r4, #16]
 8016744:	f104 010c 	add.w	r1, r4, #12
 8016748:	3202      	adds	r2, #2
 801674a:	0092      	lsls	r2, r2, #2
 801674c:	300c      	adds	r0, #12
 801674e:	f7ff ff5b 	bl	8016608 <memcpy>
 8016752:	4621      	mov	r1, r4
 8016754:	4638      	mov	r0, r7
 8016756:	f7ff ffa5 	bl	80166a4 <_Bfree>
 801675a:	4644      	mov	r4, r8
 801675c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016760:	3501      	adds	r5, #1
 8016762:	615e      	str	r6, [r3, #20]
 8016764:	6125      	str	r5, [r4, #16]
 8016766:	4620      	mov	r0, r4
 8016768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801676c:	08017cb0 	.word	0x08017cb0
 8016770:	08017da0 	.word	0x08017da0

08016774 <__s2b>:
 8016774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016778:	4615      	mov	r5, r2
 801677a:	2209      	movs	r2, #9
 801677c:	461f      	mov	r7, r3
 801677e:	3308      	adds	r3, #8
 8016780:	460c      	mov	r4, r1
 8016782:	fb93 f3f2 	sdiv	r3, r3, r2
 8016786:	4606      	mov	r6, r0
 8016788:	2201      	movs	r2, #1
 801678a:	2100      	movs	r1, #0
 801678c:	429a      	cmp	r2, r3
 801678e:	db09      	blt.n	80167a4 <__s2b+0x30>
 8016790:	4630      	mov	r0, r6
 8016792:	f7ff ff47 	bl	8016624 <_Balloc>
 8016796:	b940      	cbnz	r0, 80167aa <__s2b+0x36>
 8016798:	4602      	mov	r2, r0
 801679a:	21ce      	movs	r1, #206	; 0xce
 801679c:	4b18      	ldr	r3, [pc, #96]	; (8016800 <__s2b+0x8c>)
 801679e:	4819      	ldr	r0, [pc, #100]	; (8016804 <__s2b+0x90>)
 80167a0:	f000 fed0 	bl	8017544 <__assert_func>
 80167a4:	0052      	lsls	r2, r2, #1
 80167a6:	3101      	adds	r1, #1
 80167a8:	e7f0      	b.n	801678c <__s2b+0x18>
 80167aa:	9b08      	ldr	r3, [sp, #32]
 80167ac:	2d09      	cmp	r5, #9
 80167ae:	6143      	str	r3, [r0, #20]
 80167b0:	f04f 0301 	mov.w	r3, #1
 80167b4:	6103      	str	r3, [r0, #16]
 80167b6:	dd16      	ble.n	80167e6 <__s2b+0x72>
 80167b8:	f104 0909 	add.w	r9, r4, #9
 80167bc:	46c8      	mov	r8, r9
 80167be:	442c      	add	r4, r5
 80167c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80167c4:	4601      	mov	r1, r0
 80167c6:	220a      	movs	r2, #10
 80167c8:	4630      	mov	r0, r6
 80167ca:	3b30      	subs	r3, #48	; 0x30
 80167cc:	f7ff ff8c 	bl	80166e8 <__multadd>
 80167d0:	45a0      	cmp	r8, r4
 80167d2:	d1f5      	bne.n	80167c0 <__s2b+0x4c>
 80167d4:	f1a5 0408 	sub.w	r4, r5, #8
 80167d8:	444c      	add	r4, r9
 80167da:	1b2d      	subs	r5, r5, r4
 80167dc:	1963      	adds	r3, r4, r5
 80167de:	42bb      	cmp	r3, r7
 80167e0:	db04      	blt.n	80167ec <__s2b+0x78>
 80167e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167e6:	2509      	movs	r5, #9
 80167e8:	340a      	adds	r4, #10
 80167ea:	e7f6      	b.n	80167da <__s2b+0x66>
 80167ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80167f0:	4601      	mov	r1, r0
 80167f2:	220a      	movs	r2, #10
 80167f4:	4630      	mov	r0, r6
 80167f6:	3b30      	subs	r3, #48	; 0x30
 80167f8:	f7ff ff76 	bl	80166e8 <__multadd>
 80167fc:	e7ee      	b.n	80167dc <__s2b+0x68>
 80167fe:	bf00      	nop
 8016800:	08017cb0 	.word	0x08017cb0
 8016804:	08017da0 	.word	0x08017da0

08016808 <__hi0bits>:
 8016808:	0c02      	lsrs	r2, r0, #16
 801680a:	0412      	lsls	r2, r2, #16
 801680c:	4603      	mov	r3, r0
 801680e:	b9ca      	cbnz	r2, 8016844 <__hi0bits+0x3c>
 8016810:	0403      	lsls	r3, r0, #16
 8016812:	2010      	movs	r0, #16
 8016814:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016818:	bf04      	itt	eq
 801681a:	021b      	lsleq	r3, r3, #8
 801681c:	3008      	addeq	r0, #8
 801681e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016822:	bf04      	itt	eq
 8016824:	011b      	lsleq	r3, r3, #4
 8016826:	3004      	addeq	r0, #4
 8016828:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801682c:	bf04      	itt	eq
 801682e:	009b      	lsleq	r3, r3, #2
 8016830:	3002      	addeq	r0, #2
 8016832:	2b00      	cmp	r3, #0
 8016834:	db05      	blt.n	8016842 <__hi0bits+0x3a>
 8016836:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801683a:	f100 0001 	add.w	r0, r0, #1
 801683e:	bf08      	it	eq
 8016840:	2020      	moveq	r0, #32
 8016842:	4770      	bx	lr
 8016844:	2000      	movs	r0, #0
 8016846:	e7e5      	b.n	8016814 <__hi0bits+0xc>

08016848 <__lo0bits>:
 8016848:	6803      	ldr	r3, [r0, #0]
 801684a:	4602      	mov	r2, r0
 801684c:	f013 0007 	ands.w	r0, r3, #7
 8016850:	d00b      	beq.n	801686a <__lo0bits+0x22>
 8016852:	07d9      	lsls	r1, r3, #31
 8016854:	d421      	bmi.n	801689a <__lo0bits+0x52>
 8016856:	0798      	lsls	r0, r3, #30
 8016858:	bf49      	itett	mi
 801685a:	085b      	lsrmi	r3, r3, #1
 801685c:	089b      	lsrpl	r3, r3, #2
 801685e:	2001      	movmi	r0, #1
 8016860:	6013      	strmi	r3, [r2, #0]
 8016862:	bf5c      	itt	pl
 8016864:	2002      	movpl	r0, #2
 8016866:	6013      	strpl	r3, [r2, #0]
 8016868:	4770      	bx	lr
 801686a:	b299      	uxth	r1, r3
 801686c:	b909      	cbnz	r1, 8016872 <__lo0bits+0x2a>
 801686e:	2010      	movs	r0, #16
 8016870:	0c1b      	lsrs	r3, r3, #16
 8016872:	b2d9      	uxtb	r1, r3
 8016874:	b909      	cbnz	r1, 801687a <__lo0bits+0x32>
 8016876:	3008      	adds	r0, #8
 8016878:	0a1b      	lsrs	r3, r3, #8
 801687a:	0719      	lsls	r1, r3, #28
 801687c:	bf04      	itt	eq
 801687e:	091b      	lsreq	r3, r3, #4
 8016880:	3004      	addeq	r0, #4
 8016882:	0799      	lsls	r1, r3, #30
 8016884:	bf04      	itt	eq
 8016886:	089b      	lsreq	r3, r3, #2
 8016888:	3002      	addeq	r0, #2
 801688a:	07d9      	lsls	r1, r3, #31
 801688c:	d403      	bmi.n	8016896 <__lo0bits+0x4e>
 801688e:	085b      	lsrs	r3, r3, #1
 8016890:	f100 0001 	add.w	r0, r0, #1
 8016894:	d003      	beq.n	801689e <__lo0bits+0x56>
 8016896:	6013      	str	r3, [r2, #0]
 8016898:	4770      	bx	lr
 801689a:	2000      	movs	r0, #0
 801689c:	4770      	bx	lr
 801689e:	2020      	movs	r0, #32
 80168a0:	4770      	bx	lr
	...

080168a4 <__i2b>:
 80168a4:	b510      	push	{r4, lr}
 80168a6:	460c      	mov	r4, r1
 80168a8:	2101      	movs	r1, #1
 80168aa:	f7ff febb 	bl	8016624 <_Balloc>
 80168ae:	4602      	mov	r2, r0
 80168b0:	b928      	cbnz	r0, 80168be <__i2b+0x1a>
 80168b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80168b6:	4b04      	ldr	r3, [pc, #16]	; (80168c8 <__i2b+0x24>)
 80168b8:	4804      	ldr	r0, [pc, #16]	; (80168cc <__i2b+0x28>)
 80168ba:	f000 fe43 	bl	8017544 <__assert_func>
 80168be:	2301      	movs	r3, #1
 80168c0:	6144      	str	r4, [r0, #20]
 80168c2:	6103      	str	r3, [r0, #16]
 80168c4:	bd10      	pop	{r4, pc}
 80168c6:	bf00      	nop
 80168c8:	08017cb0 	.word	0x08017cb0
 80168cc:	08017da0 	.word	0x08017da0

080168d0 <__multiply>:
 80168d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168d4:	4691      	mov	r9, r2
 80168d6:	690a      	ldr	r2, [r1, #16]
 80168d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80168dc:	460c      	mov	r4, r1
 80168de:	429a      	cmp	r2, r3
 80168e0:	bfbe      	ittt	lt
 80168e2:	460b      	movlt	r3, r1
 80168e4:	464c      	movlt	r4, r9
 80168e6:	4699      	movlt	r9, r3
 80168e8:	6927      	ldr	r7, [r4, #16]
 80168ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80168ee:	68a3      	ldr	r3, [r4, #8]
 80168f0:	6861      	ldr	r1, [r4, #4]
 80168f2:	eb07 060a 	add.w	r6, r7, sl
 80168f6:	42b3      	cmp	r3, r6
 80168f8:	b085      	sub	sp, #20
 80168fa:	bfb8      	it	lt
 80168fc:	3101      	addlt	r1, #1
 80168fe:	f7ff fe91 	bl	8016624 <_Balloc>
 8016902:	b930      	cbnz	r0, 8016912 <__multiply+0x42>
 8016904:	4602      	mov	r2, r0
 8016906:	f240 115d 	movw	r1, #349	; 0x15d
 801690a:	4b43      	ldr	r3, [pc, #268]	; (8016a18 <__multiply+0x148>)
 801690c:	4843      	ldr	r0, [pc, #268]	; (8016a1c <__multiply+0x14c>)
 801690e:	f000 fe19 	bl	8017544 <__assert_func>
 8016912:	f100 0514 	add.w	r5, r0, #20
 8016916:	462b      	mov	r3, r5
 8016918:	2200      	movs	r2, #0
 801691a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801691e:	4543      	cmp	r3, r8
 8016920:	d321      	bcc.n	8016966 <__multiply+0x96>
 8016922:	f104 0314 	add.w	r3, r4, #20
 8016926:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801692a:	f109 0314 	add.w	r3, r9, #20
 801692e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016932:	9202      	str	r2, [sp, #8]
 8016934:	1b3a      	subs	r2, r7, r4
 8016936:	3a15      	subs	r2, #21
 8016938:	f022 0203 	bic.w	r2, r2, #3
 801693c:	3204      	adds	r2, #4
 801693e:	f104 0115 	add.w	r1, r4, #21
 8016942:	428f      	cmp	r7, r1
 8016944:	bf38      	it	cc
 8016946:	2204      	movcc	r2, #4
 8016948:	9201      	str	r2, [sp, #4]
 801694a:	9a02      	ldr	r2, [sp, #8]
 801694c:	9303      	str	r3, [sp, #12]
 801694e:	429a      	cmp	r2, r3
 8016950:	d80c      	bhi.n	801696c <__multiply+0x9c>
 8016952:	2e00      	cmp	r6, #0
 8016954:	dd03      	ble.n	801695e <__multiply+0x8e>
 8016956:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801695a:	2b00      	cmp	r3, #0
 801695c:	d059      	beq.n	8016a12 <__multiply+0x142>
 801695e:	6106      	str	r6, [r0, #16]
 8016960:	b005      	add	sp, #20
 8016962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016966:	f843 2b04 	str.w	r2, [r3], #4
 801696a:	e7d8      	b.n	801691e <__multiply+0x4e>
 801696c:	f8b3 a000 	ldrh.w	sl, [r3]
 8016970:	f1ba 0f00 	cmp.w	sl, #0
 8016974:	d023      	beq.n	80169be <__multiply+0xee>
 8016976:	46a9      	mov	r9, r5
 8016978:	f04f 0c00 	mov.w	ip, #0
 801697c:	f104 0e14 	add.w	lr, r4, #20
 8016980:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016984:	f8d9 1000 	ldr.w	r1, [r9]
 8016988:	fa1f fb82 	uxth.w	fp, r2
 801698c:	b289      	uxth	r1, r1
 801698e:	fb0a 110b 	mla	r1, sl, fp, r1
 8016992:	4461      	add	r1, ip
 8016994:	f8d9 c000 	ldr.w	ip, [r9]
 8016998:	0c12      	lsrs	r2, r2, #16
 801699a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801699e:	fb0a c202 	mla	r2, sl, r2, ip
 80169a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80169a6:	b289      	uxth	r1, r1
 80169a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80169ac:	4577      	cmp	r7, lr
 80169ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80169b2:	f849 1b04 	str.w	r1, [r9], #4
 80169b6:	d8e3      	bhi.n	8016980 <__multiply+0xb0>
 80169b8:	9a01      	ldr	r2, [sp, #4]
 80169ba:	f845 c002 	str.w	ip, [r5, r2]
 80169be:	9a03      	ldr	r2, [sp, #12]
 80169c0:	3304      	adds	r3, #4
 80169c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80169c6:	f1b9 0f00 	cmp.w	r9, #0
 80169ca:	d020      	beq.n	8016a0e <__multiply+0x13e>
 80169cc:	46ae      	mov	lr, r5
 80169ce:	f04f 0a00 	mov.w	sl, #0
 80169d2:	6829      	ldr	r1, [r5, #0]
 80169d4:	f104 0c14 	add.w	ip, r4, #20
 80169d8:	f8bc b000 	ldrh.w	fp, [ip]
 80169dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80169e0:	b289      	uxth	r1, r1
 80169e2:	fb09 220b 	mla	r2, r9, fp, r2
 80169e6:	4492      	add	sl, r2
 80169e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80169ec:	f84e 1b04 	str.w	r1, [lr], #4
 80169f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80169f4:	f8be 1000 	ldrh.w	r1, [lr]
 80169f8:	0c12      	lsrs	r2, r2, #16
 80169fa:	fb09 1102 	mla	r1, r9, r2, r1
 80169fe:	4567      	cmp	r7, ip
 8016a00:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016a04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016a08:	d8e6      	bhi.n	80169d8 <__multiply+0x108>
 8016a0a:	9a01      	ldr	r2, [sp, #4]
 8016a0c:	50a9      	str	r1, [r5, r2]
 8016a0e:	3504      	adds	r5, #4
 8016a10:	e79b      	b.n	801694a <__multiply+0x7a>
 8016a12:	3e01      	subs	r6, #1
 8016a14:	e79d      	b.n	8016952 <__multiply+0x82>
 8016a16:	bf00      	nop
 8016a18:	08017cb0 	.word	0x08017cb0
 8016a1c:	08017da0 	.word	0x08017da0

08016a20 <__pow5mult>:
 8016a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a24:	4615      	mov	r5, r2
 8016a26:	f012 0203 	ands.w	r2, r2, #3
 8016a2a:	4606      	mov	r6, r0
 8016a2c:	460f      	mov	r7, r1
 8016a2e:	d007      	beq.n	8016a40 <__pow5mult+0x20>
 8016a30:	4c25      	ldr	r4, [pc, #148]	; (8016ac8 <__pow5mult+0xa8>)
 8016a32:	3a01      	subs	r2, #1
 8016a34:	2300      	movs	r3, #0
 8016a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016a3a:	f7ff fe55 	bl	80166e8 <__multadd>
 8016a3e:	4607      	mov	r7, r0
 8016a40:	10ad      	asrs	r5, r5, #2
 8016a42:	d03d      	beq.n	8016ac0 <__pow5mult+0xa0>
 8016a44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016a46:	b97c      	cbnz	r4, 8016a68 <__pow5mult+0x48>
 8016a48:	2010      	movs	r0, #16
 8016a4a:	f7ff fdb5 	bl	80165b8 <malloc>
 8016a4e:	4602      	mov	r2, r0
 8016a50:	6270      	str	r0, [r6, #36]	; 0x24
 8016a52:	b928      	cbnz	r0, 8016a60 <__pow5mult+0x40>
 8016a54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016a58:	4b1c      	ldr	r3, [pc, #112]	; (8016acc <__pow5mult+0xac>)
 8016a5a:	481d      	ldr	r0, [pc, #116]	; (8016ad0 <__pow5mult+0xb0>)
 8016a5c:	f000 fd72 	bl	8017544 <__assert_func>
 8016a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016a64:	6004      	str	r4, [r0, #0]
 8016a66:	60c4      	str	r4, [r0, #12]
 8016a68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016a70:	b94c      	cbnz	r4, 8016a86 <__pow5mult+0x66>
 8016a72:	f240 2171 	movw	r1, #625	; 0x271
 8016a76:	4630      	mov	r0, r6
 8016a78:	f7ff ff14 	bl	80168a4 <__i2b>
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	4604      	mov	r4, r0
 8016a80:	f8c8 0008 	str.w	r0, [r8, #8]
 8016a84:	6003      	str	r3, [r0, #0]
 8016a86:	f04f 0900 	mov.w	r9, #0
 8016a8a:	07eb      	lsls	r3, r5, #31
 8016a8c:	d50a      	bpl.n	8016aa4 <__pow5mult+0x84>
 8016a8e:	4639      	mov	r1, r7
 8016a90:	4622      	mov	r2, r4
 8016a92:	4630      	mov	r0, r6
 8016a94:	f7ff ff1c 	bl	80168d0 <__multiply>
 8016a98:	4680      	mov	r8, r0
 8016a9a:	4639      	mov	r1, r7
 8016a9c:	4630      	mov	r0, r6
 8016a9e:	f7ff fe01 	bl	80166a4 <_Bfree>
 8016aa2:	4647      	mov	r7, r8
 8016aa4:	106d      	asrs	r5, r5, #1
 8016aa6:	d00b      	beq.n	8016ac0 <__pow5mult+0xa0>
 8016aa8:	6820      	ldr	r0, [r4, #0]
 8016aaa:	b938      	cbnz	r0, 8016abc <__pow5mult+0x9c>
 8016aac:	4622      	mov	r2, r4
 8016aae:	4621      	mov	r1, r4
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	f7ff ff0d 	bl	80168d0 <__multiply>
 8016ab6:	6020      	str	r0, [r4, #0]
 8016ab8:	f8c0 9000 	str.w	r9, [r0]
 8016abc:	4604      	mov	r4, r0
 8016abe:	e7e4      	b.n	8016a8a <__pow5mult+0x6a>
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ac6:	bf00      	nop
 8016ac8:	08017ef0 	.word	0x08017ef0
 8016acc:	08017c3e 	.word	0x08017c3e
 8016ad0:	08017da0 	.word	0x08017da0

08016ad4 <__lshift>:
 8016ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ad8:	460c      	mov	r4, r1
 8016ada:	4607      	mov	r7, r0
 8016adc:	4691      	mov	r9, r2
 8016ade:	6923      	ldr	r3, [r4, #16]
 8016ae0:	6849      	ldr	r1, [r1, #4]
 8016ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016ae6:	68a3      	ldr	r3, [r4, #8]
 8016ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016aec:	f108 0601 	add.w	r6, r8, #1
 8016af0:	42b3      	cmp	r3, r6
 8016af2:	db0b      	blt.n	8016b0c <__lshift+0x38>
 8016af4:	4638      	mov	r0, r7
 8016af6:	f7ff fd95 	bl	8016624 <_Balloc>
 8016afa:	4605      	mov	r5, r0
 8016afc:	b948      	cbnz	r0, 8016b12 <__lshift+0x3e>
 8016afe:	4602      	mov	r2, r0
 8016b00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016b04:	4b29      	ldr	r3, [pc, #164]	; (8016bac <__lshift+0xd8>)
 8016b06:	482a      	ldr	r0, [pc, #168]	; (8016bb0 <__lshift+0xdc>)
 8016b08:	f000 fd1c 	bl	8017544 <__assert_func>
 8016b0c:	3101      	adds	r1, #1
 8016b0e:	005b      	lsls	r3, r3, #1
 8016b10:	e7ee      	b.n	8016af0 <__lshift+0x1c>
 8016b12:	2300      	movs	r3, #0
 8016b14:	f100 0114 	add.w	r1, r0, #20
 8016b18:	f100 0210 	add.w	r2, r0, #16
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	4553      	cmp	r3, sl
 8016b20:	db37      	blt.n	8016b92 <__lshift+0xbe>
 8016b22:	6920      	ldr	r0, [r4, #16]
 8016b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016b28:	f104 0314 	add.w	r3, r4, #20
 8016b2c:	f019 091f 	ands.w	r9, r9, #31
 8016b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016b34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016b38:	d02f      	beq.n	8016b9a <__lshift+0xc6>
 8016b3a:	468a      	mov	sl, r1
 8016b3c:	f04f 0c00 	mov.w	ip, #0
 8016b40:	f1c9 0e20 	rsb	lr, r9, #32
 8016b44:	681a      	ldr	r2, [r3, #0]
 8016b46:	fa02 f209 	lsl.w	r2, r2, r9
 8016b4a:	ea42 020c 	orr.w	r2, r2, ip
 8016b4e:	f84a 2b04 	str.w	r2, [sl], #4
 8016b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b56:	4298      	cmp	r0, r3
 8016b58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016b5c:	d8f2      	bhi.n	8016b44 <__lshift+0x70>
 8016b5e:	1b03      	subs	r3, r0, r4
 8016b60:	3b15      	subs	r3, #21
 8016b62:	f023 0303 	bic.w	r3, r3, #3
 8016b66:	3304      	adds	r3, #4
 8016b68:	f104 0215 	add.w	r2, r4, #21
 8016b6c:	4290      	cmp	r0, r2
 8016b6e:	bf38      	it	cc
 8016b70:	2304      	movcc	r3, #4
 8016b72:	f841 c003 	str.w	ip, [r1, r3]
 8016b76:	f1bc 0f00 	cmp.w	ip, #0
 8016b7a:	d001      	beq.n	8016b80 <__lshift+0xac>
 8016b7c:	f108 0602 	add.w	r6, r8, #2
 8016b80:	3e01      	subs	r6, #1
 8016b82:	4638      	mov	r0, r7
 8016b84:	4621      	mov	r1, r4
 8016b86:	612e      	str	r6, [r5, #16]
 8016b88:	f7ff fd8c 	bl	80166a4 <_Bfree>
 8016b8c:	4628      	mov	r0, r5
 8016b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b92:	f842 0f04 	str.w	r0, [r2, #4]!
 8016b96:	3301      	adds	r3, #1
 8016b98:	e7c1      	b.n	8016b1e <__lshift+0x4a>
 8016b9a:	3904      	subs	r1, #4
 8016b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ba0:	4298      	cmp	r0, r3
 8016ba2:	f841 2f04 	str.w	r2, [r1, #4]!
 8016ba6:	d8f9      	bhi.n	8016b9c <__lshift+0xc8>
 8016ba8:	e7ea      	b.n	8016b80 <__lshift+0xac>
 8016baa:	bf00      	nop
 8016bac:	08017cb0 	.word	0x08017cb0
 8016bb0:	08017da0 	.word	0x08017da0

08016bb4 <__mcmp>:
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	690a      	ldr	r2, [r1, #16]
 8016bb8:	6900      	ldr	r0, [r0, #16]
 8016bba:	b530      	push	{r4, r5, lr}
 8016bbc:	1a80      	subs	r0, r0, r2
 8016bbe:	d10d      	bne.n	8016bdc <__mcmp+0x28>
 8016bc0:	3314      	adds	r3, #20
 8016bc2:	3114      	adds	r1, #20
 8016bc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016bc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016bcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016bd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016bd4:	4295      	cmp	r5, r2
 8016bd6:	d002      	beq.n	8016bde <__mcmp+0x2a>
 8016bd8:	d304      	bcc.n	8016be4 <__mcmp+0x30>
 8016bda:	2001      	movs	r0, #1
 8016bdc:	bd30      	pop	{r4, r5, pc}
 8016bde:	42a3      	cmp	r3, r4
 8016be0:	d3f4      	bcc.n	8016bcc <__mcmp+0x18>
 8016be2:	e7fb      	b.n	8016bdc <__mcmp+0x28>
 8016be4:	f04f 30ff 	mov.w	r0, #4294967295
 8016be8:	e7f8      	b.n	8016bdc <__mcmp+0x28>
	...

08016bec <__mdiff>:
 8016bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bf0:	460d      	mov	r5, r1
 8016bf2:	4607      	mov	r7, r0
 8016bf4:	4611      	mov	r1, r2
 8016bf6:	4628      	mov	r0, r5
 8016bf8:	4614      	mov	r4, r2
 8016bfa:	f7ff ffdb 	bl	8016bb4 <__mcmp>
 8016bfe:	1e06      	subs	r6, r0, #0
 8016c00:	d111      	bne.n	8016c26 <__mdiff+0x3a>
 8016c02:	4631      	mov	r1, r6
 8016c04:	4638      	mov	r0, r7
 8016c06:	f7ff fd0d 	bl	8016624 <_Balloc>
 8016c0a:	4602      	mov	r2, r0
 8016c0c:	b928      	cbnz	r0, 8016c1a <__mdiff+0x2e>
 8016c0e:	f240 2132 	movw	r1, #562	; 0x232
 8016c12:	4b3a      	ldr	r3, [pc, #232]	; (8016cfc <__mdiff+0x110>)
 8016c14:	483a      	ldr	r0, [pc, #232]	; (8016d00 <__mdiff+0x114>)
 8016c16:	f000 fc95 	bl	8017544 <__assert_func>
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016c20:	4610      	mov	r0, r2
 8016c22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c26:	bfa4      	itt	ge
 8016c28:	4623      	movge	r3, r4
 8016c2a:	462c      	movge	r4, r5
 8016c2c:	4638      	mov	r0, r7
 8016c2e:	6861      	ldr	r1, [r4, #4]
 8016c30:	bfa6      	itte	ge
 8016c32:	461d      	movge	r5, r3
 8016c34:	2600      	movge	r6, #0
 8016c36:	2601      	movlt	r6, #1
 8016c38:	f7ff fcf4 	bl	8016624 <_Balloc>
 8016c3c:	4602      	mov	r2, r0
 8016c3e:	b918      	cbnz	r0, 8016c48 <__mdiff+0x5c>
 8016c40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016c44:	4b2d      	ldr	r3, [pc, #180]	; (8016cfc <__mdiff+0x110>)
 8016c46:	e7e5      	b.n	8016c14 <__mdiff+0x28>
 8016c48:	f102 0814 	add.w	r8, r2, #20
 8016c4c:	46c2      	mov	sl, r8
 8016c4e:	f04f 0c00 	mov.w	ip, #0
 8016c52:	6927      	ldr	r7, [r4, #16]
 8016c54:	60c6      	str	r6, [r0, #12]
 8016c56:	692e      	ldr	r6, [r5, #16]
 8016c58:	f104 0014 	add.w	r0, r4, #20
 8016c5c:	f105 0914 	add.w	r9, r5, #20
 8016c60:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8016c64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016c68:	3410      	adds	r4, #16
 8016c6a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8016c6e:	f859 3b04 	ldr.w	r3, [r9], #4
 8016c72:	fa1f f18b 	uxth.w	r1, fp
 8016c76:	448c      	add	ip, r1
 8016c78:	b299      	uxth	r1, r3
 8016c7a:	0c1b      	lsrs	r3, r3, #16
 8016c7c:	ebac 0101 	sub.w	r1, ip, r1
 8016c80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016c84:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016c88:	b289      	uxth	r1, r1
 8016c8a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8016c8e:	454e      	cmp	r6, r9
 8016c90:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016c94:	f84a 3b04 	str.w	r3, [sl], #4
 8016c98:	d8e7      	bhi.n	8016c6a <__mdiff+0x7e>
 8016c9a:	1b73      	subs	r3, r6, r5
 8016c9c:	3b15      	subs	r3, #21
 8016c9e:	f023 0303 	bic.w	r3, r3, #3
 8016ca2:	3515      	adds	r5, #21
 8016ca4:	3304      	adds	r3, #4
 8016ca6:	42ae      	cmp	r6, r5
 8016ca8:	bf38      	it	cc
 8016caa:	2304      	movcc	r3, #4
 8016cac:	4418      	add	r0, r3
 8016cae:	4443      	add	r3, r8
 8016cb0:	461e      	mov	r6, r3
 8016cb2:	4605      	mov	r5, r0
 8016cb4:	4575      	cmp	r5, lr
 8016cb6:	d30e      	bcc.n	8016cd6 <__mdiff+0xea>
 8016cb8:	f10e 0103 	add.w	r1, lr, #3
 8016cbc:	1a09      	subs	r1, r1, r0
 8016cbe:	f021 0103 	bic.w	r1, r1, #3
 8016cc2:	3803      	subs	r0, #3
 8016cc4:	4586      	cmp	lr, r0
 8016cc6:	bf38      	it	cc
 8016cc8:	2100      	movcc	r1, #0
 8016cca:	4419      	add	r1, r3
 8016ccc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8016cd0:	b18b      	cbz	r3, 8016cf6 <__mdiff+0x10a>
 8016cd2:	6117      	str	r7, [r2, #16]
 8016cd4:	e7a4      	b.n	8016c20 <__mdiff+0x34>
 8016cd6:	f855 8b04 	ldr.w	r8, [r5], #4
 8016cda:	fa1f f188 	uxth.w	r1, r8
 8016cde:	4461      	add	r1, ip
 8016ce0:	140c      	asrs	r4, r1, #16
 8016ce2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016ce6:	b289      	uxth	r1, r1
 8016ce8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016cec:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8016cf0:	f846 1b04 	str.w	r1, [r6], #4
 8016cf4:	e7de      	b.n	8016cb4 <__mdiff+0xc8>
 8016cf6:	3f01      	subs	r7, #1
 8016cf8:	e7e8      	b.n	8016ccc <__mdiff+0xe0>
 8016cfa:	bf00      	nop
 8016cfc:	08017cb0 	.word	0x08017cb0
 8016d00:	08017da0 	.word	0x08017da0

08016d04 <__ulp>:
 8016d04:	4b11      	ldr	r3, [pc, #68]	; (8016d4c <__ulp+0x48>)
 8016d06:	400b      	ands	r3, r1
 8016d08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	dd02      	ble.n	8016d16 <__ulp+0x12>
 8016d10:	2000      	movs	r0, #0
 8016d12:	4619      	mov	r1, r3
 8016d14:	4770      	bx	lr
 8016d16:	425b      	negs	r3, r3
 8016d18:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016d1c:	f04f 0000 	mov.w	r0, #0
 8016d20:	f04f 0100 	mov.w	r1, #0
 8016d24:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016d28:	da04      	bge.n	8016d34 <__ulp+0x30>
 8016d2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016d2e:	fa43 f102 	asr.w	r1, r3, r2
 8016d32:	4770      	bx	lr
 8016d34:	f1a2 0314 	sub.w	r3, r2, #20
 8016d38:	2b1e      	cmp	r3, #30
 8016d3a:	bfd6      	itet	le
 8016d3c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016d40:	2301      	movgt	r3, #1
 8016d42:	fa22 f303 	lsrle.w	r3, r2, r3
 8016d46:	4618      	mov	r0, r3
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop
 8016d4c:	7ff00000 	.word	0x7ff00000

08016d50 <__b2d>:
 8016d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d54:	6907      	ldr	r7, [r0, #16]
 8016d56:	f100 0914 	add.w	r9, r0, #20
 8016d5a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8016d5e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8016d62:	f1a7 0804 	sub.w	r8, r7, #4
 8016d66:	4630      	mov	r0, r6
 8016d68:	f7ff fd4e 	bl	8016808 <__hi0bits>
 8016d6c:	f1c0 0320 	rsb	r3, r0, #32
 8016d70:	280a      	cmp	r0, #10
 8016d72:	600b      	str	r3, [r1, #0]
 8016d74:	491f      	ldr	r1, [pc, #124]	; (8016df4 <__b2d+0xa4>)
 8016d76:	dc17      	bgt.n	8016da8 <__b2d+0x58>
 8016d78:	45c1      	cmp	r9, r8
 8016d7a:	bf28      	it	cs
 8016d7c:	2200      	movcs	r2, #0
 8016d7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8016d82:	fa26 f30c 	lsr.w	r3, r6, ip
 8016d86:	bf38      	it	cc
 8016d88:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8016d8c:	ea43 0501 	orr.w	r5, r3, r1
 8016d90:	f100 0315 	add.w	r3, r0, #21
 8016d94:	fa06 f303 	lsl.w	r3, r6, r3
 8016d98:	fa22 f20c 	lsr.w	r2, r2, ip
 8016d9c:	ea43 0402 	orr.w	r4, r3, r2
 8016da0:	4620      	mov	r0, r4
 8016da2:	4629      	mov	r1, r5
 8016da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016da8:	45c1      	cmp	r9, r8
 8016daa:	bf2e      	itee	cs
 8016dac:	2200      	movcs	r2, #0
 8016dae:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8016db2:	f1a7 0808 	subcc.w	r8, r7, #8
 8016db6:	f1b0 030b 	subs.w	r3, r0, #11
 8016dba:	d016      	beq.n	8016dea <__b2d+0x9a>
 8016dbc:	f1c3 0720 	rsb	r7, r3, #32
 8016dc0:	fa22 f107 	lsr.w	r1, r2, r7
 8016dc4:	45c8      	cmp	r8, r9
 8016dc6:	fa06 f603 	lsl.w	r6, r6, r3
 8016dca:	ea46 0601 	orr.w	r6, r6, r1
 8016dce:	bf94      	ite	ls
 8016dd0:	2100      	movls	r1, #0
 8016dd2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8016dd6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8016dda:	fa02 f003 	lsl.w	r0, r2, r3
 8016dde:	40f9      	lsrs	r1, r7
 8016de0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016de4:	ea40 0401 	orr.w	r4, r0, r1
 8016de8:	e7da      	b.n	8016da0 <__b2d+0x50>
 8016dea:	4614      	mov	r4, r2
 8016dec:	ea46 0501 	orr.w	r5, r6, r1
 8016df0:	e7d6      	b.n	8016da0 <__b2d+0x50>
 8016df2:	bf00      	nop
 8016df4:	3ff00000 	.word	0x3ff00000

08016df8 <__d2b>:
 8016df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016dfc:	2101      	movs	r1, #1
 8016dfe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8016e02:	4690      	mov	r8, r2
 8016e04:	461d      	mov	r5, r3
 8016e06:	f7ff fc0d 	bl	8016624 <_Balloc>
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	b930      	cbnz	r0, 8016e1c <__d2b+0x24>
 8016e0e:	4602      	mov	r2, r0
 8016e10:	f240 310a 	movw	r1, #778	; 0x30a
 8016e14:	4b24      	ldr	r3, [pc, #144]	; (8016ea8 <__d2b+0xb0>)
 8016e16:	4825      	ldr	r0, [pc, #148]	; (8016eac <__d2b+0xb4>)
 8016e18:	f000 fb94 	bl	8017544 <__assert_func>
 8016e1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8016e20:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8016e24:	bb2d      	cbnz	r5, 8016e72 <__d2b+0x7a>
 8016e26:	9301      	str	r3, [sp, #4]
 8016e28:	f1b8 0300 	subs.w	r3, r8, #0
 8016e2c:	d026      	beq.n	8016e7c <__d2b+0x84>
 8016e2e:	4668      	mov	r0, sp
 8016e30:	9300      	str	r3, [sp, #0]
 8016e32:	f7ff fd09 	bl	8016848 <__lo0bits>
 8016e36:	9900      	ldr	r1, [sp, #0]
 8016e38:	b1f0      	cbz	r0, 8016e78 <__d2b+0x80>
 8016e3a:	9a01      	ldr	r2, [sp, #4]
 8016e3c:	f1c0 0320 	rsb	r3, r0, #32
 8016e40:	fa02 f303 	lsl.w	r3, r2, r3
 8016e44:	430b      	orrs	r3, r1
 8016e46:	40c2      	lsrs	r2, r0
 8016e48:	6163      	str	r3, [r4, #20]
 8016e4a:	9201      	str	r2, [sp, #4]
 8016e4c:	9b01      	ldr	r3, [sp, #4]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	bf14      	ite	ne
 8016e52:	2102      	movne	r1, #2
 8016e54:	2101      	moveq	r1, #1
 8016e56:	61a3      	str	r3, [r4, #24]
 8016e58:	6121      	str	r1, [r4, #16]
 8016e5a:	b1c5      	cbz	r5, 8016e8e <__d2b+0x96>
 8016e5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016e60:	4405      	add	r5, r0
 8016e62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016e66:	603d      	str	r5, [r7, #0]
 8016e68:	6030      	str	r0, [r6, #0]
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	b002      	add	sp, #8
 8016e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e76:	e7d6      	b.n	8016e26 <__d2b+0x2e>
 8016e78:	6161      	str	r1, [r4, #20]
 8016e7a:	e7e7      	b.n	8016e4c <__d2b+0x54>
 8016e7c:	a801      	add	r0, sp, #4
 8016e7e:	f7ff fce3 	bl	8016848 <__lo0bits>
 8016e82:	2101      	movs	r1, #1
 8016e84:	9b01      	ldr	r3, [sp, #4]
 8016e86:	6121      	str	r1, [r4, #16]
 8016e88:	6163      	str	r3, [r4, #20]
 8016e8a:	3020      	adds	r0, #32
 8016e8c:	e7e5      	b.n	8016e5a <__d2b+0x62>
 8016e8e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8016e92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016e96:	6038      	str	r0, [r7, #0]
 8016e98:	6918      	ldr	r0, [r3, #16]
 8016e9a:	f7ff fcb5 	bl	8016808 <__hi0bits>
 8016e9e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8016ea2:	6031      	str	r1, [r6, #0]
 8016ea4:	e7e1      	b.n	8016e6a <__d2b+0x72>
 8016ea6:	bf00      	nop
 8016ea8:	08017cb0 	.word	0x08017cb0
 8016eac:	08017da0 	.word	0x08017da0

08016eb0 <__ratio>:
 8016eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eb4:	4688      	mov	r8, r1
 8016eb6:	4669      	mov	r1, sp
 8016eb8:	4681      	mov	r9, r0
 8016eba:	f7ff ff49 	bl	8016d50 <__b2d>
 8016ebe:	460f      	mov	r7, r1
 8016ec0:	4604      	mov	r4, r0
 8016ec2:	460d      	mov	r5, r1
 8016ec4:	4640      	mov	r0, r8
 8016ec6:	a901      	add	r1, sp, #4
 8016ec8:	f7ff ff42 	bl	8016d50 <__b2d>
 8016ecc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ed0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016ed4:	468b      	mov	fp, r1
 8016ed6:	eba3 0c02 	sub.w	ip, r3, r2
 8016eda:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016ede:	1a9b      	subs	r3, r3, r2
 8016ee0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	bfd5      	itete	le
 8016ee8:	460a      	movle	r2, r1
 8016eea:	462a      	movgt	r2, r5
 8016eec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ef0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016ef4:	bfd8      	it	le
 8016ef6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016efa:	465b      	mov	r3, fp
 8016efc:	4602      	mov	r2, r0
 8016efe:	4639      	mov	r1, r7
 8016f00:	4620      	mov	r0, r4
 8016f02:	f7f9 fc7f 	bl	8010804 <__aeabi_ddiv>
 8016f06:	b003      	add	sp, #12
 8016f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f0c <__copybits>:
 8016f0c:	3901      	subs	r1, #1
 8016f0e:	b570      	push	{r4, r5, r6, lr}
 8016f10:	1149      	asrs	r1, r1, #5
 8016f12:	6914      	ldr	r4, [r2, #16]
 8016f14:	3101      	adds	r1, #1
 8016f16:	f102 0314 	add.w	r3, r2, #20
 8016f1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016f1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016f22:	1f05      	subs	r5, r0, #4
 8016f24:	42a3      	cmp	r3, r4
 8016f26:	d30c      	bcc.n	8016f42 <__copybits+0x36>
 8016f28:	1aa3      	subs	r3, r4, r2
 8016f2a:	3b11      	subs	r3, #17
 8016f2c:	f023 0303 	bic.w	r3, r3, #3
 8016f30:	3211      	adds	r2, #17
 8016f32:	42a2      	cmp	r2, r4
 8016f34:	bf88      	it	hi
 8016f36:	2300      	movhi	r3, #0
 8016f38:	4418      	add	r0, r3
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	4288      	cmp	r0, r1
 8016f3e:	d305      	bcc.n	8016f4c <__copybits+0x40>
 8016f40:	bd70      	pop	{r4, r5, r6, pc}
 8016f42:	f853 6b04 	ldr.w	r6, [r3], #4
 8016f46:	f845 6f04 	str.w	r6, [r5, #4]!
 8016f4a:	e7eb      	b.n	8016f24 <__copybits+0x18>
 8016f4c:	f840 3b04 	str.w	r3, [r0], #4
 8016f50:	e7f4      	b.n	8016f3c <__copybits+0x30>

08016f52 <__any_on>:
 8016f52:	f100 0214 	add.w	r2, r0, #20
 8016f56:	6900      	ldr	r0, [r0, #16]
 8016f58:	114b      	asrs	r3, r1, #5
 8016f5a:	4298      	cmp	r0, r3
 8016f5c:	b510      	push	{r4, lr}
 8016f5e:	db11      	blt.n	8016f84 <__any_on+0x32>
 8016f60:	dd0a      	ble.n	8016f78 <__any_on+0x26>
 8016f62:	f011 011f 	ands.w	r1, r1, #31
 8016f66:	d007      	beq.n	8016f78 <__any_on+0x26>
 8016f68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016f6c:	fa24 f001 	lsr.w	r0, r4, r1
 8016f70:	fa00 f101 	lsl.w	r1, r0, r1
 8016f74:	428c      	cmp	r4, r1
 8016f76:	d10b      	bne.n	8016f90 <__any_on+0x3e>
 8016f78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016f7c:	4293      	cmp	r3, r2
 8016f7e:	d803      	bhi.n	8016f88 <__any_on+0x36>
 8016f80:	2000      	movs	r0, #0
 8016f82:	bd10      	pop	{r4, pc}
 8016f84:	4603      	mov	r3, r0
 8016f86:	e7f7      	b.n	8016f78 <__any_on+0x26>
 8016f88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016f8c:	2900      	cmp	r1, #0
 8016f8e:	d0f5      	beq.n	8016f7c <__any_on+0x2a>
 8016f90:	2001      	movs	r0, #1
 8016f92:	e7f6      	b.n	8016f82 <__any_on+0x30>

08016f94 <_calloc_r>:
 8016f94:	b570      	push	{r4, r5, r6, lr}
 8016f96:	fba1 5402 	umull	r5, r4, r1, r2
 8016f9a:	b934      	cbnz	r4, 8016faa <_calloc_r+0x16>
 8016f9c:	4629      	mov	r1, r5
 8016f9e:	f000 f875 	bl	801708c <_malloc_r>
 8016fa2:	4606      	mov	r6, r0
 8016fa4:	b928      	cbnz	r0, 8016fb2 <_calloc_r+0x1e>
 8016fa6:	4630      	mov	r0, r6
 8016fa8:	bd70      	pop	{r4, r5, r6, pc}
 8016faa:	220c      	movs	r2, #12
 8016fac:	2600      	movs	r6, #0
 8016fae:	6002      	str	r2, [r0, #0]
 8016fb0:	e7f9      	b.n	8016fa6 <_calloc_r+0x12>
 8016fb2:	462a      	mov	r2, r5
 8016fb4:	4621      	mov	r1, r4
 8016fb6:	f7fc f89f 	bl	80130f8 <memset>
 8016fba:	e7f4      	b.n	8016fa6 <_calloc_r+0x12>

08016fbc <_free_r>:
 8016fbc:	b538      	push	{r3, r4, r5, lr}
 8016fbe:	4605      	mov	r5, r0
 8016fc0:	2900      	cmp	r1, #0
 8016fc2:	d040      	beq.n	8017046 <_free_r+0x8a>
 8016fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fc8:	1f0c      	subs	r4, r1, #4
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	bfb8      	it	lt
 8016fce:	18e4      	addlt	r4, r4, r3
 8016fd0:	f000 fb46 	bl	8017660 <__malloc_lock>
 8016fd4:	4a1c      	ldr	r2, [pc, #112]	; (8017048 <_free_r+0x8c>)
 8016fd6:	6813      	ldr	r3, [r2, #0]
 8016fd8:	b933      	cbnz	r3, 8016fe8 <_free_r+0x2c>
 8016fda:	6063      	str	r3, [r4, #4]
 8016fdc:	6014      	str	r4, [r2, #0]
 8016fde:	4628      	mov	r0, r5
 8016fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fe4:	f000 bb42 	b.w	801766c <__malloc_unlock>
 8016fe8:	42a3      	cmp	r3, r4
 8016fea:	d908      	bls.n	8016ffe <_free_r+0x42>
 8016fec:	6820      	ldr	r0, [r4, #0]
 8016fee:	1821      	adds	r1, r4, r0
 8016ff0:	428b      	cmp	r3, r1
 8016ff2:	bf01      	itttt	eq
 8016ff4:	6819      	ldreq	r1, [r3, #0]
 8016ff6:	685b      	ldreq	r3, [r3, #4]
 8016ff8:	1809      	addeq	r1, r1, r0
 8016ffa:	6021      	streq	r1, [r4, #0]
 8016ffc:	e7ed      	b.n	8016fda <_free_r+0x1e>
 8016ffe:	461a      	mov	r2, r3
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	b10b      	cbz	r3, 8017008 <_free_r+0x4c>
 8017004:	42a3      	cmp	r3, r4
 8017006:	d9fa      	bls.n	8016ffe <_free_r+0x42>
 8017008:	6811      	ldr	r1, [r2, #0]
 801700a:	1850      	adds	r0, r2, r1
 801700c:	42a0      	cmp	r0, r4
 801700e:	d10b      	bne.n	8017028 <_free_r+0x6c>
 8017010:	6820      	ldr	r0, [r4, #0]
 8017012:	4401      	add	r1, r0
 8017014:	1850      	adds	r0, r2, r1
 8017016:	4283      	cmp	r3, r0
 8017018:	6011      	str	r1, [r2, #0]
 801701a:	d1e0      	bne.n	8016fde <_free_r+0x22>
 801701c:	6818      	ldr	r0, [r3, #0]
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	4401      	add	r1, r0
 8017022:	6011      	str	r1, [r2, #0]
 8017024:	6053      	str	r3, [r2, #4]
 8017026:	e7da      	b.n	8016fde <_free_r+0x22>
 8017028:	d902      	bls.n	8017030 <_free_r+0x74>
 801702a:	230c      	movs	r3, #12
 801702c:	602b      	str	r3, [r5, #0]
 801702e:	e7d6      	b.n	8016fde <_free_r+0x22>
 8017030:	6820      	ldr	r0, [r4, #0]
 8017032:	1821      	adds	r1, r4, r0
 8017034:	428b      	cmp	r3, r1
 8017036:	bf01      	itttt	eq
 8017038:	6819      	ldreq	r1, [r3, #0]
 801703a:	685b      	ldreq	r3, [r3, #4]
 801703c:	1809      	addeq	r1, r1, r0
 801703e:	6021      	streq	r1, [r4, #0]
 8017040:	6063      	str	r3, [r4, #4]
 8017042:	6054      	str	r4, [r2, #4]
 8017044:	e7cb      	b.n	8016fde <_free_r+0x22>
 8017046:	bd38      	pop	{r3, r4, r5, pc}
 8017048:	20000254 	.word	0x20000254

0801704c <sbrk_aligned>:
 801704c:	b570      	push	{r4, r5, r6, lr}
 801704e:	4e0e      	ldr	r6, [pc, #56]	; (8017088 <sbrk_aligned+0x3c>)
 8017050:	460c      	mov	r4, r1
 8017052:	6831      	ldr	r1, [r6, #0]
 8017054:	4605      	mov	r5, r0
 8017056:	b911      	cbnz	r1, 801705e <sbrk_aligned+0x12>
 8017058:	f000 f9ee 	bl	8017438 <_sbrk_r>
 801705c:	6030      	str	r0, [r6, #0]
 801705e:	4621      	mov	r1, r4
 8017060:	4628      	mov	r0, r5
 8017062:	f000 f9e9 	bl	8017438 <_sbrk_r>
 8017066:	1c43      	adds	r3, r0, #1
 8017068:	d00a      	beq.n	8017080 <sbrk_aligned+0x34>
 801706a:	1cc4      	adds	r4, r0, #3
 801706c:	f024 0403 	bic.w	r4, r4, #3
 8017070:	42a0      	cmp	r0, r4
 8017072:	d007      	beq.n	8017084 <sbrk_aligned+0x38>
 8017074:	1a21      	subs	r1, r4, r0
 8017076:	4628      	mov	r0, r5
 8017078:	f000 f9de 	bl	8017438 <_sbrk_r>
 801707c:	3001      	adds	r0, #1
 801707e:	d101      	bne.n	8017084 <sbrk_aligned+0x38>
 8017080:	f04f 34ff 	mov.w	r4, #4294967295
 8017084:	4620      	mov	r0, r4
 8017086:	bd70      	pop	{r4, r5, r6, pc}
 8017088:	20000258 	.word	0x20000258

0801708c <_malloc_r>:
 801708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017090:	1ccd      	adds	r5, r1, #3
 8017092:	f025 0503 	bic.w	r5, r5, #3
 8017096:	3508      	adds	r5, #8
 8017098:	2d0c      	cmp	r5, #12
 801709a:	bf38      	it	cc
 801709c:	250c      	movcc	r5, #12
 801709e:	2d00      	cmp	r5, #0
 80170a0:	4607      	mov	r7, r0
 80170a2:	db01      	blt.n	80170a8 <_malloc_r+0x1c>
 80170a4:	42a9      	cmp	r1, r5
 80170a6:	d905      	bls.n	80170b4 <_malloc_r+0x28>
 80170a8:	230c      	movs	r3, #12
 80170aa:	2600      	movs	r6, #0
 80170ac:	603b      	str	r3, [r7, #0]
 80170ae:	4630      	mov	r0, r6
 80170b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170b4:	4e2e      	ldr	r6, [pc, #184]	; (8017170 <_malloc_r+0xe4>)
 80170b6:	f000 fad3 	bl	8017660 <__malloc_lock>
 80170ba:	6833      	ldr	r3, [r6, #0]
 80170bc:	461c      	mov	r4, r3
 80170be:	bb34      	cbnz	r4, 801710e <_malloc_r+0x82>
 80170c0:	4629      	mov	r1, r5
 80170c2:	4638      	mov	r0, r7
 80170c4:	f7ff ffc2 	bl	801704c <sbrk_aligned>
 80170c8:	1c43      	adds	r3, r0, #1
 80170ca:	4604      	mov	r4, r0
 80170cc:	d14d      	bne.n	801716a <_malloc_r+0xde>
 80170ce:	6834      	ldr	r4, [r6, #0]
 80170d0:	4626      	mov	r6, r4
 80170d2:	2e00      	cmp	r6, #0
 80170d4:	d140      	bne.n	8017158 <_malloc_r+0xcc>
 80170d6:	6823      	ldr	r3, [r4, #0]
 80170d8:	4631      	mov	r1, r6
 80170da:	4638      	mov	r0, r7
 80170dc:	eb04 0803 	add.w	r8, r4, r3
 80170e0:	f000 f9aa 	bl	8017438 <_sbrk_r>
 80170e4:	4580      	cmp	r8, r0
 80170e6:	d13a      	bne.n	801715e <_malloc_r+0xd2>
 80170e8:	6821      	ldr	r1, [r4, #0]
 80170ea:	3503      	adds	r5, #3
 80170ec:	1a6d      	subs	r5, r5, r1
 80170ee:	f025 0503 	bic.w	r5, r5, #3
 80170f2:	3508      	adds	r5, #8
 80170f4:	2d0c      	cmp	r5, #12
 80170f6:	bf38      	it	cc
 80170f8:	250c      	movcc	r5, #12
 80170fa:	4638      	mov	r0, r7
 80170fc:	4629      	mov	r1, r5
 80170fe:	f7ff ffa5 	bl	801704c <sbrk_aligned>
 8017102:	3001      	adds	r0, #1
 8017104:	d02b      	beq.n	801715e <_malloc_r+0xd2>
 8017106:	6823      	ldr	r3, [r4, #0]
 8017108:	442b      	add	r3, r5
 801710a:	6023      	str	r3, [r4, #0]
 801710c:	e00e      	b.n	801712c <_malloc_r+0xa0>
 801710e:	6822      	ldr	r2, [r4, #0]
 8017110:	1b52      	subs	r2, r2, r5
 8017112:	d41e      	bmi.n	8017152 <_malloc_r+0xc6>
 8017114:	2a0b      	cmp	r2, #11
 8017116:	d916      	bls.n	8017146 <_malloc_r+0xba>
 8017118:	1961      	adds	r1, r4, r5
 801711a:	42a3      	cmp	r3, r4
 801711c:	6025      	str	r5, [r4, #0]
 801711e:	bf18      	it	ne
 8017120:	6059      	strne	r1, [r3, #4]
 8017122:	6863      	ldr	r3, [r4, #4]
 8017124:	bf08      	it	eq
 8017126:	6031      	streq	r1, [r6, #0]
 8017128:	5162      	str	r2, [r4, r5]
 801712a:	604b      	str	r3, [r1, #4]
 801712c:	4638      	mov	r0, r7
 801712e:	f104 060b 	add.w	r6, r4, #11
 8017132:	f000 fa9b 	bl	801766c <__malloc_unlock>
 8017136:	f026 0607 	bic.w	r6, r6, #7
 801713a:	1d23      	adds	r3, r4, #4
 801713c:	1af2      	subs	r2, r6, r3
 801713e:	d0b6      	beq.n	80170ae <_malloc_r+0x22>
 8017140:	1b9b      	subs	r3, r3, r6
 8017142:	50a3      	str	r3, [r4, r2]
 8017144:	e7b3      	b.n	80170ae <_malloc_r+0x22>
 8017146:	6862      	ldr	r2, [r4, #4]
 8017148:	42a3      	cmp	r3, r4
 801714a:	bf0c      	ite	eq
 801714c:	6032      	streq	r2, [r6, #0]
 801714e:	605a      	strne	r2, [r3, #4]
 8017150:	e7ec      	b.n	801712c <_malloc_r+0xa0>
 8017152:	4623      	mov	r3, r4
 8017154:	6864      	ldr	r4, [r4, #4]
 8017156:	e7b2      	b.n	80170be <_malloc_r+0x32>
 8017158:	4634      	mov	r4, r6
 801715a:	6876      	ldr	r6, [r6, #4]
 801715c:	e7b9      	b.n	80170d2 <_malloc_r+0x46>
 801715e:	230c      	movs	r3, #12
 8017160:	4638      	mov	r0, r7
 8017162:	603b      	str	r3, [r7, #0]
 8017164:	f000 fa82 	bl	801766c <__malloc_unlock>
 8017168:	e7a1      	b.n	80170ae <_malloc_r+0x22>
 801716a:	6025      	str	r5, [r4, #0]
 801716c:	e7de      	b.n	801712c <_malloc_r+0xa0>
 801716e:	bf00      	nop
 8017170:	20000254 	.word	0x20000254

08017174 <__ssputs_r>:
 8017174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017178:	688e      	ldr	r6, [r1, #8]
 801717a:	4682      	mov	sl, r0
 801717c:	429e      	cmp	r6, r3
 801717e:	460c      	mov	r4, r1
 8017180:	4690      	mov	r8, r2
 8017182:	461f      	mov	r7, r3
 8017184:	d838      	bhi.n	80171f8 <__ssputs_r+0x84>
 8017186:	898a      	ldrh	r2, [r1, #12]
 8017188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801718c:	d032      	beq.n	80171f4 <__ssputs_r+0x80>
 801718e:	6825      	ldr	r5, [r4, #0]
 8017190:	6909      	ldr	r1, [r1, #16]
 8017192:	3301      	adds	r3, #1
 8017194:	eba5 0901 	sub.w	r9, r5, r1
 8017198:	6965      	ldr	r5, [r4, #20]
 801719a:	444b      	add	r3, r9
 801719c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80171a4:	106d      	asrs	r5, r5, #1
 80171a6:	429d      	cmp	r5, r3
 80171a8:	bf38      	it	cc
 80171aa:	461d      	movcc	r5, r3
 80171ac:	0553      	lsls	r3, r2, #21
 80171ae:	d531      	bpl.n	8017214 <__ssputs_r+0xa0>
 80171b0:	4629      	mov	r1, r5
 80171b2:	f7ff ff6b 	bl	801708c <_malloc_r>
 80171b6:	4606      	mov	r6, r0
 80171b8:	b950      	cbnz	r0, 80171d0 <__ssputs_r+0x5c>
 80171ba:	230c      	movs	r3, #12
 80171bc:	f04f 30ff 	mov.w	r0, #4294967295
 80171c0:	f8ca 3000 	str.w	r3, [sl]
 80171c4:	89a3      	ldrh	r3, [r4, #12]
 80171c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171ca:	81a3      	strh	r3, [r4, #12]
 80171cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171d0:	464a      	mov	r2, r9
 80171d2:	6921      	ldr	r1, [r4, #16]
 80171d4:	f7ff fa18 	bl	8016608 <memcpy>
 80171d8:	89a3      	ldrh	r3, [r4, #12]
 80171da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80171de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171e2:	81a3      	strh	r3, [r4, #12]
 80171e4:	6126      	str	r6, [r4, #16]
 80171e6:	444e      	add	r6, r9
 80171e8:	6026      	str	r6, [r4, #0]
 80171ea:	463e      	mov	r6, r7
 80171ec:	6165      	str	r5, [r4, #20]
 80171ee:	eba5 0509 	sub.w	r5, r5, r9
 80171f2:	60a5      	str	r5, [r4, #8]
 80171f4:	42be      	cmp	r6, r7
 80171f6:	d900      	bls.n	80171fa <__ssputs_r+0x86>
 80171f8:	463e      	mov	r6, r7
 80171fa:	4632      	mov	r2, r6
 80171fc:	4641      	mov	r1, r8
 80171fe:	6820      	ldr	r0, [r4, #0]
 8017200:	f000 fa14 	bl	801762c <memmove>
 8017204:	68a3      	ldr	r3, [r4, #8]
 8017206:	2000      	movs	r0, #0
 8017208:	1b9b      	subs	r3, r3, r6
 801720a:	60a3      	str	r3, [r4, #8]
 801720c:	6823      	ldr	r3, [r4, #0]
 801720e:	4433      	add	r3, r6
 8017210:	6023      	str	r3, [r4, #0]
 8017212:	e7db      	b.n	80171cc <__ssputs_r+0x58>
 8017214:	462a      	mov	r2, r5
 8017216:	f000 fa2f 	bl	8017678 <_realloc_r>
 801721a:	4606      	mov	r6, r0
 801721c:	2800      	cmp	r0, #0
 801721e:	d1e1      	bne.n	80171e4 <__ssputs_r+0x70>
 8017220:	4650      	mov	r0, sl
 8017222:	6921      	ldr	r1, [r4, #16]
 8017224:	f7ff feca 	bl	8016fbc <_free_r>
 8017228:	e7c7      	b.n	80171ba <__ssputs_r+0x46>
	...

0801722c <_svfiprintf_r>:
 801722c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017230:	4698      	mov	r8, r3
 8017232:	898b      	ldrh	r3, [r1, #12]
 8017234:	4607      	mov	r7, r0
 8017236:	061b      	lsls	r3, r3, #24
 8017238:	460d      	mov	r5, r1
 801723a:	4614      	mov	r4, r2
 801723c:	b09d      	sub	sp, #116	; 0x74
 801723e:	d50e      	bpl.n	801725e <_svfiprintf_r+0x32>
 8017240:	690b      	ldr	r3, [r1, #16]
 8017242:	b963      	cbnz	r3, 801725e <_svfiprintf_r+0x32>
 8017244:	2140      	movs	r1, #64	; 0x40
 8017246:	f7ff ff21 	bl	801708c <_malloc_r>
 801724a:	6028      	str	r0, [r5, #0]
 801724c:	6128      	str	r0, [r5, #16]
 801724e:	b920      	cbnz	r0, 801725a <_svfiprintf_r+0x2e>
 8017250:	230c      	movs	r3, #12
 8017252:	603b      	str	r3, [r7, #0]
 8017254:	f04f 30ff 	mov.w	r0, #4294967295
 8017258:	e0d1      	b.n	80173fe <_svfiprintf_r+0x1d2>
 801725a:	2340      	movs	r3, #64	; 0x40
 801725c:	616b      	str	r3, [r5, #20]
 801725e:	2300      	movs	r3, #0
 8017260:	9309      	str	r3, [sp, #36]	; 0x24
 8017262:	2320      	movs	r3, #32
 8017264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017268:	2330      	movs	r3, #48	; 0x30
 801726a:	f04f 0901 	mov.w	r9, #1
 801726e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017418 <_svfiprintf_r+0x1ec>
 8017276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801727a:	4623      	mov	r3, r4
 801727c:	469a      	mov	sl, r3
 801727e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017282:	b10a      	cbz	r2, 8017288 <_svfiprintf_r+0x5c>
 8017284:	2a25      	cmp	r2, #37	; 0x25
 8017286:	d1f9      	bne.n	801727c <_svfiprintf_r+0x50>
 8017288:	ebba 0b04 	subs.w	fp, sl, r4
 801728c:	d00b      	beq.n	80172a6 <_svfiprintf_r+0x7a>
 801728e:	465b      	mov	r3, fp
 8017290:	4622      	mov	r2, r4
 8017292:	4629      	mov	r1, r5
 8017294:	4638      	mov	r0, r7
 8017296:	f7ff ff6d 	bl	8017174 <__ssputs_r>
 801729a:	3001      	adds	r0, #1
 801729c:	f000 80aa 	beq.w	80173f4 <_svfiprintf_r+0x1c8>
 80172a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172a2:	445a      	add	r2, fp
 80172a4:	9209      	str	r2, [sp, #36]	; 0x24
 80172a6:	f89a 3000 	ldrb.w	r3, [sl]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f000 80a2 	beq.w	80173f4 <_svfiprintf_r+0x1c8>
 80172b0:	2300      	movs	r3, #0
 80172b2:	f04f 32ff 	mov.w	r2, #4294967295
 80172b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172ba:	f10a 0a01 	add.w	sl, sl, #1
 80172be:	9304      	str	r3, [sp, #16]
 80172c0:	9307      	str	r3, [sp, #28]
 80172c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80172c6:	931a      	str	r3, [sp, #104]	; 0x68
 80172c8:	4654      	mov	r4, sl
 80172ca:	2205      	movs	r2, #5
 80172cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172d0:	4851      	ldr	r0, [pc, #324]	; (8017418 <_svfiprintf_r+0x1ec>)
 80172d2:	f7ff f98b 	bl	80165ec <memchr>
 80172d6:	9a04      	ldr	r2, [sp, #16]
 80172d8:	b9d8      	cbnz	r0, 8017312 <_svfiprintf_r+0xe6>
 80172da:	06d0      	lsls	r0, r2, #27
 80172dc:	bf44      	itt	mi
 80172de:	2320      	movmi	r3, #32
 80172e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172e4:	0711      	lsls	r1, r2, #28
 80172e6:	bf44      	itt	mi
 80172e8:	232b      	movmi	r3, #43	; 0x2b
 80172ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172ee:	f89a 3000 	ldrb.w	r3, [sl]
 80172f2:	2b2a      	cmp	r3, #42	; 0x2a
 80172f4:	d015      	beq.n	8017322 <_svfiprintf_r+0xf6>
 80172f6:	4654      	mov	r4, sl
 80172f8:	2000      	movs	r0, #0
 80172fa:	f04f 0c0a 	mov.w	ip, #10
 80172fe:	9a07      	ldr	r2, [sp, #28]
 8017300:	4621      	mov	r1, r4
 8017302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017306:	3b30      	subs	r3, #48	; 0x30
 8017308:	2b09      	cmp	r3, #9
 801730a:	d94e      	bls.n	80173aa <_svfiprintf_r+0x17e>
 801730c:	b1b0      	cbz	r0, 801733c <_svfiprintf_r+0x110>
 801730e:	9207      	str	r2, [sp, #28]
 8017310:	e014      	b.n	801733c <_svfiprintf_r+0x110>
 8017312:	eba0 0308 	sub.w	r3, r0, r8
 8017316:	fa09 f303 	lsl.w	r3, r9, r3
 801731a:	4313      	orrs	r3, r2
 801731c:	46a2      	mov	sl, r4
 801731e:	9304      	str	r3, [sp, #16]
 8017320:	e7d2      	b.n	80172c8 <_svfiprintf_r+0x9c>
 8017322:	9b03      	ldr	r3, [sp, #12]
 8017324:	1d19      	adds	r1, r3, #4
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	9103      	str	r1, [sp, #12]
 801732a:	2b00      	cmp	r3, #0
 801732c:	bfbb      	ittet	lt
 801732e:	425b      	neglt	r3, r3
 8017330:	f042 0202 	orrlt.w	r2, r2, #2
 8017334:	9307      	strge	r3, [sp, #28]
 8017336:	9307      	strlt	r3, [sp, #28]
 8017338:	bfb8      	it	lt
 801733a:	9204      	strlt	r2, [sp, #16]
 801733c:	7823      	ldrb	r3, [r4, #0]
 801733e:	2b2e      	cmp	r3, #46	; 0x2e
 8017340:	d10c      	bne.n	801735c <_svfiprintf_r+0x130>
 8017342:	7863      	ldrb	r3, [r4, #1]
 8017344:	2b2a      	cmp	r3, #42	; 0x2a
 8017346:	d135      	bne.n	80173b4 <_svfiprintf_r+0x188>
 8017348:	9b03      	ldr	r3, [sp, #12]
 801734a:	3402      	adds	r4, #2
 801734c:	1d1a      	adds	r2, r3, #4
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	9203      	str	r2, [sp, #12]
 8017352:	2b00      	cmp	r3, #0
 8017354:	bfb8      	it	lt
 8017356:	f04f 33ff 	movlt.w	r3, #4294967295
 801735a:	9305      	str	r3, [sp, #20]
 801735c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801741c <_svfiprintf_r+0x1f0>
 8017360:	2203      	movs	r2, #3
 8017362:	4650      	mov	r0, sl
 8017364:	7821      	ldrb	r1, [r4, #0]
 8017366:	f7ff f941 	bl	80165ec <memchr>
 801736a:	b140      	cbz	r0, 801737e <_svfiprintf_r+0x152>
 801736c:	2340      	movs	r3, #64	; 0x40
 801736e:	eba0 000a 	sub.w	r0, r0, sl
 8017372:	fa03 f000 	lsl.w	r0, r3, r0
 8017376:	9b04      	ldr	r3, [sp, #16]
 8017378:	3401      	adds	r4, #1
 801737a:	4303      	orrs	r3, r0
 801737c:	9304      	str	r3, [sp, #16]
 801737e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017382:	2206      	movs	r2, #6
 8017384:	4826      	ldr	r0, [pc, #152]	; (8017420 <_svfiprintf_r+0x1f4>)
 8017386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801738a:	f7ff f92f 	bl	80165ec <memchr>
 801738e:	2800      	cmp	r0, #0
 8017390:	d038      	beq.n	8017404 <_svfiprintf_r+0x1d8>
 8017392:	4b24      	ldr	r3, [pc, #144]	; (8017424 <_svfiprintf_r+0x1f8>)
 8017394:	bb1b      	cbnz	r3, 80173de <_svfiprintf_r+0x1b2>
 8017396:	9b03      	ldr	r3, [sp, #12]
 8017398:	3307      	adds	r3, #7
 801739a:	f023 0307 	bic.w	r3, r3, #7
 801739e:	3308      	adds	r3, #8
 80173a0:	9303      	str	r3, [sp, #12]
 80173a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173a4:	4433      	add	r3, r6
 80173a6:	9309      	str	r3, [sp, #36]	; 0x24
 80173a8:	e767      	b.n	801727a <_svfiprintf_r+0x4e>
 80173aa:	460c      	mov	r4, r1
 80173ac:	2001      	movs	r0, #1
 80173ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80173b2:	e7a5      	b.n	8017300 <_svfiprintf_r+0xd4>
 80173b4:	2300      	movs	r3, #0
 80173b6:	f04f 0c0a 	mov.w	ip, #10
 80173ba:	4619      	mov	r1, r3
 80173bc:	3401      	adds	r4, #1
 80173be:	9305      	str	r3, [sp, #20]
 80173c0:	4620      	mov	r0, r4
 80173c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173c6:	3a30      	subs	r2, #48	; 0x30
 80173c8:	2a09      	cmp	r2, #9
 80173ca:	d903      	bls.n	80173d4 <_svfiprintf_r+0x1a8>
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d0c5      	beq.n	801735c <_svfiprintf_r+0x130>
 80173d0:	9105      	str	r1, [sp, #20]
 80173d2:	e7c3      	b.n	801735c <_svfiprintf_r+0x130>
 80173d4:	4604      	mov	r4, r0
 80173d6:	2301      	movs	r3, #1
 80173d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80173dc:	e7f0      	b.n	80173c0 <_svfiprintf_r+0x194>
 80173de:	ab03      	add	r3, sp, #12
 80173e0:	9300      	str	r3, [sp, #0]
 80173e2:	462a      	mov	r2, r5
 80173e4:	4638      	mov	r0, r7
 80173e6:	4b10      	ldr	r3, [pc, #64]	; (8017428 <_svfiprintf_r+0x1fc>)
 80173e8:	a904      	add	r1, sp, #16
 80173ea:	f7fb ff2b 	bl	8013244 <_printf_float>
 80173ee:	1c42      	adds	r2, r0, #1
 80173f0:	4606      	mov	r6, r0
 80173f2:	d1d6      	bne.n	80173a2 <_svfiprintf_r+0x176>
 80173f4:	89ab      	ldrh	r3, [r5, #12]
 80173f6:	065b      	lsls	r3, r3, #25
 80173f8:	f53f af2c 	bmi.w	8017254 <_svfiprintf_r+0x28>
 80173fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173fe:	b01d      	add	sp, #116	; 0x74
 8017400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017404:	ab03      	add	r3, sp, #12
 8017406:	9300      	str	r3, [sp, #0]
 8017408:	462a      	mov	r2, r5
 801740a:	4638      	mov	r0, r7
 801740c:	4b06      	ldr	r3, [pc, #24]	; (8017428 <_svfiprintf_r+0x1fc>)
 801740e:	a904      	add	r1, sp, #16
 8017410:	f7fc f9b4 	bl	801377c <_printf_i>
 8017414:	e7eb      	b.n	80173ee <_svfiprintf_r+0x1c2>
 8017416:	bf00      	nop
 8017418:	08017efc 	.word	0x08017efc
 801741c:	08017f02 	.word	0x08017f02
 8017420:	08017f06 	.word	0x08017f06
 8017424:	08013245 	.word	0x08013245
 8017428:	08017175 	.word	0x08017175

0801742c <nan>:
 801742c:	2000      	movs	r0, #0
 801742e:	4901      	ldr	r1, [pc, #4]	; (8017434 <nan+0x8>)
 8017430:	4770      	bx	lr
 8017432:	bf00      	nop
 8017434:	7ff80000 	.word	0x7ff80000

08017438 <_sbrk_r>:
 8017438:	b538      	push	{r3, r4, r5, lr}
 801743a:	2300      	movs	r3, #0
 801743c:	4d05      	ldr	r5, [pc, #20]	; (8017454 <_sbrk_r+0x1c>)
 801743e:	4604      	mov	r4, r0
 8017440:	4608      	mov	r0, r1
 8017442:	602b      	str	r3, [r5, #0]
 8017444:	f7f9 fde8 	bl	8011018 <_sbrk>
 8017448:	1c43      	adds	r3, r0, #1
 801744a:	d102      	bne.n	8017452 <_sbrk_r+0x1a>
 801744c:	682b      	ldr	r3, [r5, #0]
 801744e:	b103      	cbz	r3, 8017452 <_sbrk_r+0x1a>
 8017450:	6023      	str	r3, [r4, #0]
 8017452:	bd38      	pop	{r3, r4, r5, pc}
 8017454:	2000025c 	.word	0x2000025c

08017458 <__sread>:
 8017458:	b510      	push	{r4, lr}
 801745a:	460c      	mov	r4, r1
 801745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017460:	f000 fa90 	bl	8017984 <_read_r>
 8017464:	2800      	cmp	r0, #0
 8017466:	bfab      	itete	ge
 8017468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801746a:	89a3      	ldrhlt	r3, [r4, #12]
 801746c:	181b      	addge	r3, r3, r0
 801746e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017472:	bfac      	ite	ge
 8017474:	6563      	strge	r3, [r4, #84]	; 0x54
 8017476:	81a3      	strhlt	r3, [r4, #12]
 8017478:	bd10      	pop	{r4, pc}

0801747a <__swrite>:
 801747a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801747e:	461f      	mov	r7, r3
 8017480:	898b      	ldrh	r3, [r1, #12]
 8017482:	4605      	mov	r5, r0
 8017484:	05db      	lsls	r3, r3, #23
 8017486:	460c      	mov	r4, r1
 8017488:	4616      	mov	r6, r2
 801748a:	d505      	bpl.n	8017498 <__swrite+0x1e>
 801748c:	2302      	movs	r3, #2
 801748e:	2200      	movs	r2, #0
 8017490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017494:	f000 f8b8 	bl	8017608 <_lseek_r>
 8017498:	89a3      	ldrh	r3, [r4, #12]
 801749a:	4632      	mov	r2, r6
 801749c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80174a0:	81a3      	strh	r3, [r4, #12]
 80174a2:	4628      	mov	r0, r5
 80174a4:	463b      	mov	r3, r7
 80174a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174ae:	f000 b837 	b.w	8017520 <_write_r>

080174b2 <__sseek>:
 80174b2:	b510      	push	{r4, lr}
 80174b4:	460c      	mov	r4, r1
 80174b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174ba:	f000 f8a5 	bl	8017608 <_lseek_r>
 80174be:	1c43      	adds	r3, r0, #1
 80174c0:	89a3      	ldrh	r3, [r4, #12]
 80174c2:	bf15      	itete	ne
 80174c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80174c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80174ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80174ce:	81a3      	strheq	r3, [r4, #12]
 80174d0:	bf18      	it	ne
 80174d2:	81a3      	strhne	r3, [r4, #12]
 80174d4:	bd10      	pop	{r4, pc}

080174d6 <__sclose>:
 80174d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174da:	f000 b851 	b.w	8017580 <_close_r>

080174de <strncmp>:
 80174de:	4603      	mov	r3, r0
 80174e0:	b510      	push	{r4, lr}
 80174e2:	b172      	cbz	r2, 8017502 <strncmp+0x24>
 80174e4:	3901      	subs	r1, #1
 80174e6:	1884      	adds	r4, r0, r2
 80174e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80174ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80174f0:	4290      	cmp	r0, r2
 80174f2:	d101      	bne.n	80174f8 <strncmp+0x1a>
 80174f4:	42a3      	cmp	r3, r4
 80174f6:	d101      	bne.n	80174fc <strncmp+0x1e>
 80174f8:	1a80      	subs	r0, r0, r2
 80174fa:	bd10      	pop	{r4, pc}
 80174fc:	2800      	cmp	r0, #0
 80174fe:	d1f3      	bne.n	80174e8 <strncmp+0xa>
 8017500:	e7fa      	b.n	80174f8 <strncmp+0x1a>
 8017502:	4610      	mov	r0, r2
 8017504:	e7f9      	b.n	80174fa <strncmp+0x1c>

08017506 <__ascii_wctomb>:
 8017506:	4603      	mov	r3, r0
 8017508:	4608      	mov	r0, r1
 801750a:	b141      	cbz	r1, 801751e <__ascii_wctomb+0x18>
 801750c:	2aff      	cmp	r2, #255	; 0xff
 801750e:	d904      	bls.n	801751a <__ascii_wctomb+0x14>
 8017510:	228a      	movs	r2, #138	; 0x8a
 8017512:	f04f 30ff 	mov.w	r0, #4294967295
 8017516:	601a      	str	r2, [r3, #0]
 8017518:	4770      	bx	lr
 801751a:	2001      	movs	r0, #1
 801751c:	700a      	strb	r2, [r1, #0]
 801751e:	4770      	bx	lr

08017520 <_write_r>:
 8017520:	b538      	push	{r3, r4, r5, lr}
 8017522:	4604      	mov	r4, r0
 8017524:	4608      	mov	r0, r1
 8017526:	4611      	mov	r1, r2
 8017528:	2200      	movs	r2, #0
 801752a:	4d05      	ldr	r5, [pc, #20]	; (8017540 <_write_r+0x20>)
 801752c:	602a      	str	r2, [r5, #0]
 801752e:	461a      	mov	r2, r3
 8017530:	f7f9 fd26 	bl	8010f80 <_write>
 8017534:	1c43      	adds	r3, r0, #1
 8017536:	d102      	bne.n	801753e <_write_r+0x1e>
 8017538:	682b      	ldr	r3, [r5, #0]
 801753a:	b103      	cbz	r3, 801753e <_write_r+0x1e>
 801753c:	6023      	str	r3, [r4, #0]
 801753e:	bd38      	pop	{r3, r4, r5, pc}
 8017540:	2000025c 	.word	0x2000025c

08017544 <__assert_func>:
 8017544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017546:	4614      	mov	r4, r2
 8017548:	461a      	mov	r2, r3
 801754a:	4b09      	ldr	r3, [pc, #36]	; (8017570 <__assert_func+0x2c>)
 801754c:	4605      	mov	r5, r0
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	68d8      	ldr	r0, [r3, #12]
 8017552:	b14c      	cbz	r4, 8017568 <__assert_func+0x24>
 8017554:	4b07      	ldr	r3, [pc, #28]	; (8017574 <__assert_func+0x30>)
 8017556:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801755a:	9100      	str	r1, [sp, #0]
 801755c:	462b      	mov	r3, r5
 801755e:	4906      	ldr	r1, [pc, #24]	; (8017578 <__assert_func+0x34>)
 8017560:	f000 f81e 	bl	80175a0 <fiprintf>
 8017564:	f000 fa20 	bl	80179a8 <abort>
 8017568:	4b04      	ldr	r3, [pc, #16]	; (801757c <__assert_func+0x38>)
 801756a:	461c      	mov	r4, r3
 801756c:	e7f3      	b.n	8017556 <__assert_func+0x12>
 801756e:	bf00      	nop
 8017570:	2000000c 	.word	0x2000000c
 8017574:	08017f0d 	.word	0x08017f0d
 8017578:	08017f1a 	.word	0x08017f1a
 801757c:	08017f48 	.word	0x08017f48

08017580 <_close_r>:
 8017580:	b538      	push	{r3, r4, r5, lr}
 8017582:	2300      	movs	r3, #0
 8017584:	4d05      	ldr	r5, [pc, #20]	; (801759c <_close_r+0x1c>)
 8017586:	4604      	mov	r4, r0
 8017588:	4608      	mov	r0, r1
 801758a:	602b      	str	r3, [r5, #0]
 801758c:	f7f9 fd14 	bl	8010fb8 <_close>
 8017590:	1c43      	adds	r3, r0, #1
 8017592:	d102      	bne.n	801759a <_close_r+0x1a>
 8017594:	682b      	ldr	r3, [r5, #0]
 8017596:	b103      	cbz	r3, 801759a <_close_r+0x1a>
 8017598:	6023      	str	r3, [r4, #0]
 801759a:	bd38      	pop	{r3, r4, r5, pc}
 801759c:	2000025c 	.word	0x2000025c

080175a0 <fiprintf>:
 80175a0:	b40e      	push	{r1, r2, r3}
 80175a2:	b503      	push	{r0, r1, lr}
 80175a4:	4601      	mov	r1, r0
 80175a6:	ab03      	add	r3, sp, #12
 80175a8:	4805      	ldr	r0, [pc, #20]	; (80175c0 <fiprintf+0x20>)
 80175aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80175ae:	6800      	ldr	r0, [r0, #0]
 80175b0:	9301      	str	r3, [sp, #4]
 80175b2:	f000 f8b7 	bl	8017724 <_vfiprintf_r>
 80175b6:	b002      	add	sp, #8
 80175b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80175bc:	b003      	add	sp, #12
 80175be:	4770      	bx	lr
 80175c0:	2000000c 	.word	0x2000000c

080175c4 <_fstat_r>:
 80175c4:	b538      	push	{r3, r4, r5, lr}
 80175c6:	2300      	movs	r3, #0
 80175c8:	4d06      	ldr	r5, [pc, #24]	; (80175e4 <_fstat_r+0x20>)
 80175ca:	4604      	mov	r4, r0
 80175cc:	4608      	mov	r0, r1
 80175ce:	4611      	mov	r1, r2
 80175d0:	602b      	str	r3, [r5, #0]
 80175d2:	f7f9 fcfc 	bl	8010fce <_fstat>
 80175d6:	1c43      	adds	r3, r0, #1
 80175d8:	d102      	bne.n	80175e0 <_fstat_r+0x1c>
 80175da:	682b      	ldr	r3, [r5, #0]
 80175dc:	b103      	cbz	r3, 80175e0 <_fstat_r+0x1c>
 80175de:	6023      	str	r3, [r4, #0]
 80175e0:	bd38      	pop	{r3, r4, r5, pc}
 80175e2:	bf00      	nop
 80175e4:	2000025c 	.word	0x2000025c

080175e8 <_isatty_r>:
 80175e8:	b538      	push	{r3, r4, r5, lr}
 80175ea:	2300      	movs	r3, #0
 80175ec:	4d05      	ldr	r5, [pc, #20]	; (8017604 <_isatty_r+0x1c>)
 80175ee:	4604      	mov	r4, r0
 80175f0:	4608      	mov	r0, r1
 80175f2:	602b      	str	r3, [r5, #0]
 80175f4:	f7f9 fcfa 	bl	8010fec <_isatty>
 80175f8:	1c43      	adds	r3, r0, #1
 80175fa:	d102      	bne.n	8017602 <_isatty_r+0x1a>
 80175fc:	682b      	ldr	r3, [r5, #0]
 80175fe:	b103      	cbz	r3, 8017602 <_isatty_r+0x1a>
 8017600:	6023      	str	r3, [r4, #0]
 8017602:	bd38      	pop	{r3, r4, r5, pc}
 8017604:	2000025c 	.word	0x2000025c

08017608 <_lseek_r>:
 8017608:	b538      	push	{r3, r4, r5, lr}
 801760a:	4604      	mov	r4, r0
 801760c:	4608      	mov	r0, r1
 801760e:	4611      	mov	r1, r2
 8017610:	2200      	movs	r2, #0
 8017612:	4d05      	ldr	r5, [pc, #20]	; (8017628 <_lseek_r+0x20>)
 8017614:	602a      	str	r2, [r5, #0]
 8017616:	461a      	mov	r2, r3
 8017618:	f7f9 fcf2 	bl	8011000 <_lseek>
 801761c:	1c43      	adds	r3, r0, #1
 801761e:	d102      	bne.n	8017626 <_lseek_r+0x1e>
 8017620:	682b      	ldr	r3, [r5, #0]
 8017622:	b103      	cbz	r3, 8017626 <_lseek_r+0x1e>
 8017624:	6023      	str	r3, [r4, #0]
 8017626:	bd38      	pop	{r3, r4, r5, pc}
 8017628:	2000025c 	.word	0x2000025c

0801762c <memmove>:
 801762c:	4288      	cmp	r0, r1
 801762e:	b510      	push	{r4, lr}
 8017630:	eb01 0402 	add.w	r4, r1, r2
 8017634:	d902      	bls.n	801763c <memmove+0x10>
 8017636:	4284      	cmp	r4, r0
 8017638:	4623      	mov	r3, r4
 801763a:	d807      	bhi.n	801764c <memmove+0x20>
 801763c:	1e43      	subs	r3, r0, #1
 801763e:	42a1      	cmp	r1, r4
 8017640:	d008      	beq.n	8017654 <memmove+0x28>
 8017642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017646:	f803 2f01 	strb.w	r2, [r3, #1]!
 801764a:	e7f8      	b.n	801763e <memmove+0x12>
 801764c:	4601      	mov	r1, r0
 801764e:	4402      	add	r2, r0
 8017650:	428a      	cmp	r2, r1
 8017652:	d100      	bne.n	8017656 <memmove+0x2a>
 8017654:	bd10      	pop	{r4, pc}
 8017656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801765a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801765e:	e7f7      	b.n	8017650 <memmove+0x24>

08017660 <__malloc_lock>:
 8017660:	4801      	ldr	r0, [pc, #4]	; (8017668 <__malloc_lock+0x8>)
 8017662:	f7fe bf42 	b.w	80164ea <__retarget_lock_acquire_recursive>
 8017666:	bf00      	nop
 8017668:	20000250 	.word	0x20000250

0801766c <__malloc_unlock>:
 801766c:	4801      	ldr	r0, [pc, #4]	; (8017674 <__malloc_unlock+0x8>)
 801766e:	f7fe bf3d 	b.w	80164ec <__retarget_lock_release_recursive>
 8017672:	bf00      	nop
 8017674:	20000250 	.word	0x20000250

08017678 <_realloc_r>:
 8017678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801767c:	4680      	mov	r8, r0
 801767e:	4614      	mov	r4, r2
 8017680:	460e      	mov	r6, r1
 8017682:	b921      	cbnz	r1, 801768e <_realloc_r+0x16>
 8017684:	4611      	mov	r1, r2
 8017686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801768a:	f7ff bcff 	b.w	801708c <_malloc_r>
 801768e:	b92a      	cbnz	r2, 801769c <_realloc_r+0x24>
 8017690:	f7ff fc94 	bl	8016fbc <_free_r>
 8017694:	4625      	mov	r5, r4
 8017696:	4628      	mov	r0, r5
 8017698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801769c:	f000 f98b 	bl	80179b6 <_malloc_usable_size_r>
 80176a0:	4284      	cmp	r4, r0
 80176a2:	4607      	mov	r7, r0
 80176a4:	d802      	bhi.n	80176ac <_realloc_r+0x34>
 80176a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80176aa:	d812      	bhi.n	80176d2 <_realloc_r+0x5a>
 80176ac:	4621      	mov	r1, r4
 80176ae:	4640      	mov	r0, r8
 80176b0:	f7ff fcec 	bl	801708c <_malloc_r>
 80176b4:	4605      	mov	r5, r0
 80176b6:	2800      	cmp	r0, #0
 80176b8:	d0ed      	beq.n	8017696 <_realloc_r+0x1e>
 80176ba:	42bc      	cmp	r4, r7
 80176bc:	4622      	mov	r2, r4
 80176be:	4631      	mov	r1, r6
 80176c0:	bf28      	it	cs
 80176c2:	463a      	movcs	r2, r7
 80176c4:	f7fe ffa0 	bl	8016608 <memcpy>
 80176c8:	4631      	mov	r1, r6
 80176ca:	4640      	mov	r0, r8
 80176cc:	f7ff fc76 	bl	8016fbc <_free_r>
 80176d0:	e7e1      	b.n	8017696 <_realloc_r+0x1e>
 80176d2:	4635      	mov	r5, r6
 80176d4:	e7df      	b.n	8017696 <_realloc_r+0x1e>

080176d6 <__sfputc_r>:
 80176d6:	6893      	ldr	r3, [r2, #8]
 80176d8:	b410      	push	{r4}
 80176da:	3b01      	subs	r3, #1
 80176dc:	2b00      	cmp	r3, #0
 80176de:	6093      	str	r3, [r2, #8]
 80176e0:	da07      	bge.n	80176f2 <__sfputc_r+0x1c>
 80176e2:	6994      	ldr	r4, [r2, #24]
 80176e4:	42a3      	cmp	r3, r4
 80176e6:	db01      	blt.n	80176ec <__sfputc_r+0x16>
 80176e8:	290a      	cmp	r1, #10
 80176ea:	d102      	bne.n	80176f2 <__sfputc_r+0x1c>
 80176ec:	bc10      	pop	{r4}
 80176ee:	f7fd baa3 	b.w	8014c38 <__swbuf_r>
 80176f2:	6813      	ldr	r3, [r2, #0]
 80176f4:	1c58      	adds	r0, r3, #1
 80176f6:	6010      	str	r0, [r2, #0]
 80176f8:	7019      	strb	r1, [r3, #0]
 80176fa:	4608      	mov	r0, r1
 80176fc:	bc10      	pop	{r4}
 80176fe:	4770      	bx	lr

08017700 <__sfputs_r>:
 8017700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017702:	4606      	mov	r6, r0
 8017704:	460f      	mov	r7, r1
 8017706:	4614      	mov	r4, r2
 8017708:	18d5      	adds	r5, r2, r3
 801770a:	42ac      	cmp	r4, r5
 801770c:	d101      	bne.n	8017712 <__sfputs_r+0x12>
 801770e:	2000      	movs	r0, #0
 8017710:	e007      	b.n	8017722 <__sfputs_r+0x22>
 8017712:	463a      	mov	r2, r7
 8017714:	4630      	mov	r0, r6
 8017716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801771a:	f7ff ffdc 	bl	80176d6 <__sfputc_r>
 801771e:	1c43      	adds	r3, r0, #1
 8017720:	d1f3      	bne.n	801770a <__sfputs_r+0xa>
 8017722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017724 <_vfiprintf_r>:
 8017724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017728:	460d      	mov	r5, r1
 801772a:	4614      	mov	r4, r2
 801772c:	4698      	mov	r8, r3
 801772e:	4606      	mov	r6, r0
 8017730:	b09d      	sub	sp, #116	; 0x74
 8017732:	b118      	cbz	r0, 801773c <_vfiprintf_r+0x18>
 8017734:	6983      	ldr	r3, [r0, #24]
 8017736:	b90b      	cbnz	r3, 801773c <_vfiprintf_r+0x18>
 8017738:	f7fe face 	bl	8015cd8 <__sinit>
 801773c:	4b89      	ldr	r3, [pc, #548]	; (8017964 <_vfiprintf_r+0x240>)
 801773e:	429d      	cmp	r5, r3
 8017740:	d11b      	bne.n	801777a <_vfiprintf_r+0x56>
 8017742:	6875      	ldr	r5, [r6, #4]
 8017744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017746:	07d9      	lsls	r1, r3, #31
 8017748:	d405      	bmi.n	8017756 <_vfiprintf_r+0x32>
 801774a:	89ab      	ldrh	r3, [r5, #12]
 801774c:	059a      	lsls	r2, r3, #22
 801774e:	d402      	bmi.n	8017756 <_vfiprintf_r+0x32>
 8017750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017752:	f7fe feca 	bl	80164ea <__retarget_lock_acquire_recursive>
 8017756:	89ab      	ldrh	r3, [r5, #12]
 8017758:	071b      	lsls	r3, r3, #28
 801775a:	d501      	bpl.n	8017760 <_vfiprintf_r+0x3c>
 801775c:	692b      	ldr	r3, [r5, #16]
 801775e:	b9eb      	cbnz	r3, 801779c <_vfiprintf_r+0x78>
 8017760:	4629      	mov	r1, r5
 8017762:	4630      	mov	r0, r6
 8017764:	f7fd faba 	bl	8014cdc <__swsetup_r>
 8017768:	b1c0      	cbz	r0, 801779c <_vfiprintf_r+0x78>
 801776a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801776c:	07dc      	lsls	r4, r3, #31
 801776e:	d50e      	bpl.n	801778e <_vfiprintf_r+0x6a>
 8017770:	f04f 30ff 	mov.w	r0, #4294967295
 8017774:	b01d      	add	sp, #116	; 0x74
 8017776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801777a:	4b7b      	ldr	r3, [pc, #492]	; (8017968 <_vfiprintf_r+0x244>)
 801777c:	429d      	cmp	r5, r3
 801777e:	d101      	bne.n	8017784 <_vfiprintf_r+0x60>
 8017780:	68b5      	ldr	r5, [r6, #8]
 8017782:	e7df      	b.n	8017744 <_vfiprintf_r+0x20>
 8017784:	4b79      	ldr	r3, [pc, #484]	; (801796c <_vfiprintf_r+0x248>)
 8017786:	429d      	cmp	r5, r3
 8017788:	bf08      	it	eq
 801778a:	68f5      	ldreq	r5, [r6, #12]
 801778c:	e7da      	b.n	8017744 <_vfiprintf_r+0x20>
 801778e:	89ab      	ldrh	r3, [r5, #12]
 8017790:	0598      	lsls	r0, r3, #22
 8017792:	d4ed      	bmi.n	8017770 <_vfiprintf_r+0x4c>
 8017794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017796:	f7fe fea9 	bl	80164ec <__retarget_lock_release_recursive>
 801779a:	e7e9      	b.n	8017770 <_vfiprintf_r+0x4c>
 801779c:	2300      	movs	r3, #0
 801779e:	9309      	str	r3, [sp, #36]	; 0x24
 80177a0:	2320      	movs	r3, #32
 80177a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80177a6:	2330      	movs	r3, #48	; 0x30
 80177a8:	f04f 0901 	mov.w	r9, #1
 80177ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80177b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8017970 <_vfiprintf_r+0x24c>
 80177b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80177b8:	4623      	mov	r3, r4
 80177ba:	469a      	mov	sl, r3
 80177bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177c0:	b10a      	cbz	r2, 80177c6 <_vfiprintf_r+0xa2>
 80177c2:	2a25      	cmp	r2, #37	; 0x25
 80177c4:	d1f9      	bne.n	80177ba <_vfiprintf_r+0x96>
 80177c6:	ebba 0b04 	subs.w	fp, sl, r4
 80177ca:	d00b      	beq.n	80177e4 <_vfiprintf_r+0xc0>
 80177cc:	465b      	mov	r3, fp
 80177ce:	4622      	mov	r2, r4
 80177d0:	4629      	mov	r1, r5
 80177d2:	4630      	mov	r0, r6
 80177d4:	f7ff ff94 	bl	8017700 <__sfputs_r>
 80177d8:	3001      	adds	r0, #1
 80177da:	f000 80aa 	beq.w	8017932 <_vfiprintf_r+0x20e>
 80177de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177e0:	445a      	add	r2, fp
 80177e2:	9209      	str	r2, [sp, #36]	; 0x24
 80177e4:	f89a 3000 	ldrb.w	r3, [sl]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	f000 80a2 	beq.w	8017932 <_vfiprintf_r+0x20e>
 80177ee:	2300      	movs	r3, #0
 80177f0:	f04f 32ff 	mov.w	r2, #4294967295
 80177f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177f8:	f10a 0a01 	add.w	sl, sl, #1
 80177fc:	9304      	str	r3, [sp, #16]
 80177fe:	9307      	str	r3, [sp, #28]
 8017800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017804:	931a      	str	r3, [sp, #104]	; 0x68
 8017806:	4654      	mov	r4, sl
 8017808:	2205      	movs	r2, #5
 801780a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801780e:	4858      	ldr	r0, [pc, #352]	; (8017970 <_vfiprintf_r+0x24c>)
 8017810:	f7fe feec 	bl	80165ec <memchr>
 8017814:	9a04      	ldr	r2, [sp, #16]
 8017816:	b9d8      	cbnz	r0, 8017850 <_vfiprintf_r+0x12c>
 8017818:	06d1      	lsls	r1, r2, #27
 801781a:	bf44      	itt	mi
 801781c:	2320      	movmi	r3, #32
 801781e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017822:	0713      	lsls	r3, r2, #28
 8017824:	bf44      	itt	mi
 8017826:	232b      	movmi	r3, #43	; 0x2b
 8017828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801782c:	f89a 3000 	ldrb.w	r3, [sl]
 8017830:	2b2a      	cmp	r3, #42	; 0x2a
 8017832:	d015      	beq.n	8017860 <_vfiprintf_r+0x13c>
 8017834:	4654      	mov	r4, sl
 8017836:	2000      	movs	r0, #0
 8017838:	f04f 0c0a 	mov.w	ip, #10
 801783c:	9a07      	ldr	r2, [sp, #28]
 801783e:	4621      	mov	r1, r4
 8017840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017844:	3b30      	subs	r3, #48	; 0x30
 8017846:	2b09      	cmp	r3, #9
 8017848:	d94e      	bls.n	80178e8 <_vfiprintf_r+0x1c4>
 801784a:	b1b0      	cbz	r0, 801787a <_vfiprintf_r+0x156>
 801784c:	9207      	str	r2, [sp, #28]
 801784e:	e014      	b.n	801787a <_vfiprintf_r+0x156>
 8017850:	eba0 0308 	sub.w	r3, r0, r8
 8017854:	fa09 f303 	lsl.w	r3, r9, r3
 8017858:	4313      	orrs	r3, r2
 801785a:	46a2      	mov	sl, r4
 801785c:	9304      	str	r3, [sp, #16]
 801785e:	e7d2      	b.n	8017806 <_vfiprintf_r+0xe2>
 8017860:	9b03      	ldr	r3, [sp, #12]
 8017862:	1d19      	adds	r1, r3, #4
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	9103      	str	r1, [sp, #12]
 8017868:	2b00      	cmp	r3, #0
 801786a:	bfbb      	ittet	lt
 801786c:	425b      	neglt	r3, r3
 801786e:	f042 0202 	orrlt.w	r2, r2, #2
 8017872:	9307      	strge	r3, [sp, #28]
 8017874:	9307      	strlt	r3, [sp, #28]
 8017876:	bfb8      	it	lt
 8017878:	9204      	strlt	r2, [sp, #16]
 801787a:	7823      	ldrb	r3, [r4, #0]
 801787c:	2b2e      	cmp	r3, #46	; 0x2e
 801787e:	d10c      	bne.n	801789a <_vfiprintf_r+0x176>
 8017880:	7863      	ldrb	r3, [r4, #1]
 8017882:	2b2a      	cmp	r3, #42	; 0x2a
 8017884:	d135      	bne.n	80178f2 <_vfiprintf_r+0x1ce>
 8017886:	9b03      	ldr	r3, [sp, #12]
 8017888:	3402      	adds	r4, #2
 801788a:	1d1a      	adds	r2, r3, #4
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	9203      	str	r2, [sp, #12]
 8017890:	2b00      	cmp	r3, #0
 8017892:	bfb8      	it	lt
 8017894:	f04f 33ff 	movlt.w	r3, #4294967295
 8017898:	9305      	str	r3, [sp, #20]
 801789a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8017974 <_vfiprintf_r+0x250>
 801789e:	2203      	movs	r2, #3
 80178a0:	4650      	mov	r0, sl
 80178a2:	7821      	ldrb	r1, [r4, #0]
 80178a4:	f7fe fea2 	bl	80165ec <memchr>
 80178a8:	b140      	cbz	r0, 80178bc <_vfiprintf_r+0x198>
 80178aa:	2340      	movs	r3, #64	; 0x40
 80178ac:	eba0 000a 	sub.w	r0, r0, sl
 80178b0:	fa03 f000 	lsl.w	r0, r3, r0
 80178b4:	9b04      	ldr	r3, [sp, #16]
 80178b6:	3401      	adds	r4, #1
 80178b8:	4303      	orrs	r3, r0
 80178ba:	9304      	str	r3, [sp, #16]
 80178bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178c0:	2206      	movs	r2, #6
 80178c2:	482d      	ldr	r0, [pc, #180]	; (8017978 <_vfiprintf_r+0x254>)
 80178c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80178c8:	f7fe fe90 	bl	80165ec <memchr>
 80178cc:	2800      	cmp	r0, #0
 80178ce:	d03f      	beq.n	8017950 <_vfiprintf_r+0x22c>
 80178d0:	4b2a      	ldr	r3, [pc, #168]	; (801797c <_vfiprintf_r+0x258>)
 80178d2:	bb1b      	cbnz	r3, 801791c <_vfiprintf_r+0x1f8>
 80178d4:	9b03      	ldr	r3, [sp, #12]
 80178d6:	3307      	adds	r3, #7
 80178d8:	f023 0307 	bic.w	r3, r3, #7
 80178dc:	3308      	adds	r3, #8
 80178de:	9303      	str	r3, [sp, #12]
 80178e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178e2:	443b      	add	r3, r7
 80178e4:	9309      	str	r3, [sp, #36]	; 0x24
 80178e6:	e767      	b.n	80177b8 <_vfiprintf_r+0x94>
 80178e8:	460c      	mov	r4, r1
 80178ea:	2001      	movs	r0, #1
 80178ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80178f0:	e7a5      	b.n	801783e <_vfiprintf_r+0x11a>
 80178f2:	2300      	movs	r3, #0
 80178f4:	f04f 0c0a 	mov.w	ip, #10
 80178f8:	4619      	mov	r1, r3
 80178fa:	3401      	adds	r4, #1
 80178fc:	9305      	str	r3, [sp, #20]
 80178fe:	4620      	mov	r0, r4
 8017900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017904:	3a30      	subs	r2, #48	; 0x30
 8017906:	2a09      	cmp	r2, #9
 8017908:	d903      	bls.n	8017912 <_vfiprintf_r+0x1ee>
 801790a:	2b00      	cmp	r3, #0
 801790c:	d0c5      	beq.n	801789a <_vfiprintf_r+0x176>
 801790e:	9105      	str	r1, [sp, #20]
 8017910:	e7c3      	b.n	801789a <_vfiprintf_r+0x176>
 8017912:	4604      	mov	r4, r0
 8017914:	2301      	movs	r3, #1
 8017916:	fb0c 2101 	mla	r1, ip, r1, r2
 801791a:	e7f0      	b.n	80178fe <_vfiprintf_r+0x1da>
 801791c:	ab03      	add	r3, sp, #12
 801791e:	9300      	str	r3, [sp, #0]
 8017920:	462a      	mov	r2, r5
 8017922:	4630      	mov	r0, r6
 8017924:	4b16      	ldr	r3, [pc, #88]	; (8017980 <_vfiprintf_r+0x25c>)
 8017926:	a904      	add	r1, sp, #16
 8017928:	f7fb fc8c 	bl	8013244 <_printf_float>
 801792c:	4607      	mov	r7, r0
 801792e:	1c78      	adds	r0, r7, #1
 8017930:	d1d6      	bne.n	80178e0 <_vfiprintf_r+0x1bc>
 8017932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017934:	07d9      	lsls	r1, r3, #31
 8017936:	d405      	bmi.n	8017944 <_vfiprintf_r+0x220>
 8017938:	89ab      	ldrh	r3, [r5, #12]
 801793a:	059a      	lsls	r2, r3, #22
 801793c:	d402      	bmi.n	8017944 <_vfiprintf_r+0x220>
 801793e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017940:	f7fe fdd4 	bl	80164ec <__retarget_lock_release_recursive>
 8017944:	89ab      	ldrh	r3, [r5, #12]
 8017946:	065b      	lsls	r3, r3, #25
 8017948:	f53f af12 	bmi.w	8017770 <_vfiprintf_r+0x4c>
 801794c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801794e:	e711      	b.n	8017774 <_vfiprintf_r+0x50>
 8017950:	ab03      	add	r3, sp, #12
 8017952:	9300      	str	r3, [sp, #0]
 8017954:	462a      	mov	r2, r5
 8017956:	4630      	mov	r0, r6
 8017958:	4b09      	ldr	r3, [pc, #36]	; (8017980 <_vfiprintf_r+0x25c>)
 801795a:	a904      	add	r1, sp, #16
 801795c:	f7fb ff0e 	bl	801377c <_printf_i>
 8017960:	e7e4      	b.n	801792c <_vfiprintf_r+0x208>
 8017962:	bf00      	nop
 8017964:	08017ce4 	.word	0x08017ce4
 8017968:	08017d04 	.word	0x08017d04
 801796c:	08017cc4 	.word	0x08017cc4
 8017970:	08017efc 	.word	0x08017efc
 8017974:	08017f02 	.word	0x08017f02
 8017978:	08017f06 	.word	0x08017f06
 801797c:	08013245 	.word	0x08013245
 8017980:	08017701 	.word	0x08017701

08017984 <_read_r>:
 8017984:	b538      	push	{r3, r4, r5, lr}
 8017986:	4604      	mov	r4, r0
 8017988:	4608      	mov	r0, r1
 801798a:	4611      	mov	r1, r2
 801798c:	2200      	movs	r2, #0
 801798e:	4d05      	ldr	r5, [pc, #20]	; (80179a4 <_read_r+0x20>)
 8017990:	602a      	str	r2, [r5, #0]
 8017992:	461a      	mov	r2, r3
 8017994:	f7f9 fad7 	bl	8010f46 <_read>
 8017998:	1c43      	adds	r3, r0, #1
 801799a:	d102      	bne.n	80179a2 <_read_r+0x1e>
 801799c:	682b      	ldr	r3, [r5, #0]
 801799e:	b103      	cbz	r3, 80179a2 <_read_r+0x1e>
 80179a0:	6023      	str	r3, [r4, #0]
 80179a2:	bd38      	pop	{r3, r4, r5, pc}
 80179a4:	2000025c 	.word	0x2000025c

080179a8 <abort>:
 80179a8:	2006      	movs	r0, #6
 80179aa:	b508      	push	{r3, lr}
 80179ac:	f000 f834 	bl	8017a18 <raise>
 80179b0:	2001      	movs	r0, #1
 80179b2:	f7f9 fabe 	bl	8010f32 <_exit>

080179b6 <_malloc_usable_size_r>:
 80179b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179ba:	1f18      	subs	r0, r3, #4
 80179bc:	2b00      	cmp	r3, #0
 80179be:	bfbc      	itt	lt
 80179c0:	580b      	ldrlt	r3, [r1, r0]
 80179c2:	18c0      	addlt	r0, r0, r3
 80179c4:	4770      	bx	lr

080179c6 <_raise_r>:
 80179c6:	291f      	cmp	r1, #31
 80179c8:	b538      	push	{r3, r4, r5, lr}
 80179ca:	4604      	mov	r4, r0
 80179cc:	460d      	mov	r5, r1
 80179ce:	d904      	bls.n	80179da <_raise_r+0x14>
 80179d0:	2316      	movs	r3, #22
 80179d2:	6003      	str	r3, [r0, #0]
 80179d4:	f04f 30ff 	mov.w	r0, #4294967295
 80179d8:	bd38      	pop	{r3, r4, r5, pc}
 80179da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80179dc:	b112      	cbz	r2, 80179e4 <_raise_r+0x1e>
 80179de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80179e2:	b94b      	cbnz	r3, 80179f8 <_raise_r+0x32>
 80179e4:	4620      	mov	r0, r4
 80179e6:	f000 f831 	bl	8017a4c <_getpid_r>
 80179ea:	462a      	mov	r2, r5
 80179ec:	4601      	mov	r1, r0
 80179ee:	4620      	mov	r0, r4
 80179f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179f4:	f000 b818 	b.w	8017a28 <_kill_r>
 80179f8:	2b01      	cmp	r3, #1
 80179fa:	d00a      	beq.n	8017a12 <_raise_r+0x4c>
 80179fc:	1c59      	adds	r1, r3, #1
 80179fe:	d103      	bne.n	8017a08 <_raise_r+0x42>
 8017a00:	2316      	movs	r3, #22
 8017a02:	6003      	str	r3, [r0, #0]
 8017a04:	2001      	movs	r0, #1
 8017a06:	e7e7      	b.n	80179d8 <_raise_r+0x12>
 8017a08:	2400      	movs	r4, #0
 8017a0a:	4628      	mov	r0, r5
 8017a0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017a10:	4798      	blx	r3
 8017a12:	2000      	movs	r0, #0
 8017a14:	e7e0      	b.n	80179d8 <_raise_r+0x12>
	...

08017a18 <raise>:
 8017a18:	4b02      	ldr	r3, [pc, #8]	; (8017a24 <raise+0xc>)
 8017a1a:	4601      	mov	r1, r0
 8017a1c:	6818      	ldr	r0, [r3, #0]
 8017a1e:	f7ff bfd2 	b.w	80179c6 <_raise_r>
 8017a22:	bf00      	nop
 8017a24:	2000000c 	.word	0x2000000c

08017a28 <_kill_r>:
 8017a28:	b538      	push	{r3, r4, r5, lr}
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	4d06      	ldr	r5, [pc, #24]	; (8017a48 <_kill_r+0x20>)
 8017a2e:	4604      	mov	r4, r0
 8017a30:	4608      	mov	r0, r1
 8017a32:	4611      	mov	r1, r2
 8017a34:	602b      	str	r3, [r5, #0]
 8017a36:	f7f9 fa6c 	bl	8010f12 <_kill>
 8017a3a:	1c43      	adds	r3, r0, #1
 8017a3c:	d102      	bne.n	8017a44 <_kill_r+0x1c>
 8017a3e:	682b      	ldr	r3, [r5, #0]
 8017a40:	b103      	cbz	r3, 8017a44 <_kill_r+0x1c>
 8017a42:	6023      	str	r3, [r4, #0]
 8017a44:	bd38      	pop	{r3, r4, r5, pc}
 8017a46:	bf00      	nop
 8017a48:	2000025c 	.word	0x2000025c

08017a4c <_getpid_r>:
 8017a4c:	f7f9 ba5a 	b.w	8010f04 <_getpid>

08017a50 <_init>:
 8017a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a52:	bf00      	nop
 8017a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a56:	bc08      	pop	{r3}
 8017a58:	469e      	mov	lr, r3
 8017a5a:	4770      	bx	lr

08017a5c <_fini>:
 8017a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a5e:	bf00      	nop
 8017a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a62:	bc08      	pop	{r3}
 8017a64:	469e      	mov	lr, r3
 8017a66:	4770      	bx	lr
