
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007848  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08007a30  08007a30  00017a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f14  08007f14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007f14  08007f14  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f14  08007f14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200001e0  080080fc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080080fc  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e6d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197f  00000000  00000000  00028076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  000299f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002a178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dd8  00000000  00000000  0002a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e72  00000000  00000000  00044618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fac  00000000  00000000  0004e48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  000e0488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	08007a18 	.word	0x08007a18

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	08007a18 	.word	0x08007a18

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a2b      	ldr	r2, [pc, #172]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a25      	ldr	r2, [pc, #148]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_GPIO_Init+0xc8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2120      	movs	r1, #32
 8000d28:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_GPIO_Init+0xcc>)
 8000d2a:	f000 fee5 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	4813      	ldr	r0, [pc, #76]	; (8000d80 <MX_GPIO_Init+0xd0>)
 8000d34:	f000 fee0 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000d38:	2320      	movs	r3, #32
 8000d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480b      	ldr	r0, [pc, #44]	; (8000d7c <MX_GPIO_Init+0xcc>)
 8000d50:	f000 fd3e 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000d54:	2320      	movs	r3, #32
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_GPIO_Init+0xd0>)
 8000d6c:	f000 fd30 	bl	80017d0 <HAL_GPIO_Init>

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40011800 	.word	0x40011800
 8000d80:	40010c00 	.word	0x40010c00

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f000 fa4c 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 f826 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f7ff ff8e 	bl	8000cb0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d94:	f000 f97c 	bl	8001090 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000d98:	2120      	movs	r1, #32
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <main+0x4c>)
 8000d9c:	f000 fec4 	bl	8001b28 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000da0:	2120      	movs	r1, #32
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <main+0x50>)
 8000da4:	f000 fec0 	bl	8001b28 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f000 fa9c 	bl	80012e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000db0:	2120      	movs	r1, #32
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <main+0x4c>)
 8000db4:	f000 feb8 	bl	8001b28 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000db8:	2120      	movs	r1, #32
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <main+0x50>)
 8000dbc:	f000 feb4 	bl	8001b28 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000dc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc4:	f000 fa90 	bl	80012e8 <HAL_Delay>
	  printf("test\r\n");
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <main+0x54>)
 8000dca:	f003 f85d 	bl	8003e88 <puts>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000dce:	e7e3      	b.n	8000d98 <main+0x14>
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	40011800 	.word	0x40011800
 8000dd8:	08007a30 	.word	0x08007a30

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b090      	sub	sp, #64	; 0x40
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	2228      	movs	r2, #40	; 0x28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 f968 	bl	80030c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e02:	2301      	movs	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e06:	2310      	movs	r3, #16
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fea2 	bl	8001b5c <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f818 	bl	8000e52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 f910 	bl	8002060 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e46:	f000 f804 	bl	8000e52 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3740      	adds	r7, #64	; 0x40
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e56:	b672      	cpsid	i
}
 8000e58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <Error_Handler+0x8>

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_MspInit+0x40>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <HAL_MspInit+0x40>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_MspInit+0x40>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_MspInit+0x40>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_MspInit+0x40>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_MspInit+0x40>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f000 f9e3 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <USART1_IRQHandler+0x10>)
 8000ef6:	f001 fb39 	bl	800256c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000204 	.word	0x20000204

08000f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return 1;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <_kill>:

int _kill(int pid, int sig)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f1c:	f002 f8a6 	bl	800306c <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2216      	movs	r2, #22
 8000f24:	601a      	str	r2, [r3, #0]
  return -1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_exit>:

void _exit (int status)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffe7 	bl	8000f12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f44:	e7fe      	b.n	8000f44 <_exit+0x12>

08000f46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e00a      	b.n	8000f6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f58:	f3af 8000 	nop.w
 8000f5c:	4601      	mov	r1, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	60ba      	str	r2, [r7, #8]
 8000f64:	b2ca      	uxtb	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbf0      	blt.n	8000f58 <_read+0x12>
  }

  return len;
 8000f76:	687b      	ldr	r3, [r7, #4]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	e009      	b.n	8000fa6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f8fc 	bl	8001198 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	dbf1      	blt.n	8000f92 <_write+0x12>
  }
  return len;
 8000fae:	687b      	ldr	r3, [r7, #4]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_close>:

int _close(int file)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fde:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <_isatty>:

int _isatty(int file)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ff4:	2301      	movs	r3, #1
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f002 f810 	bl	800306c <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20010000 	.word	0x20010000
 8001078:	00000400 	.word	0x00000400
 800107c:	200001fc 	.word	0x200001fc
 8001080:	20000260 	.word	0x20000260

08001084 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 8001096:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 8001098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 80010c8:	f001 f958 	bl	800237c <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010d2:	f7ff febe 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, (u8 *)aRxBuffer, RXBUFFERSIZE);//该函数会开启接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量
 80010d6:	2201      	movs	r2, #1
 80010d8:	4904      	ldr	r1, [pc, #16]	; (80010ec <MX_USART1_UART_Init+0x5c>)
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <MX_USART1_UART_Init+0x54>)
 80010dc:	f001 fa21 	bl	8002522 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000204 	.word	0x20000204
 80010e8:	40013800 	.word	0x40013800
 80010ec:	20000200 	.word	0x20000200

080010f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a20      	ldr	r2, [pc, #128]	; (800118c <HAL_UART_MspInit+0x9c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d139      	bne.n	8001184 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <HAL_UART_MspInit+0xa0>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <HAL_UART_MspInit+0xa0>)
 8001116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_UART_MspInit+0xa0>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_UART_MspInit+0xa0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_UART_MspInit+0xa0>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_UART_MspInit+0xa0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4619      	mov	r1, r3
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <HAL_UART_MspInit+0xa4>)
 8001156:	f000 fb3b 	bl	80017d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800115a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	4809      	ldr	r0, [pc, #36]	; (8001194 <HAL_UART_MspInit+0xa4>)
 8001170:	f000 fb2e 	bl	80017d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2025      	movs	r0, #37	; 0x25
 800117a:	f000 f9b0 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800117e:	2025      	movs	r0, #37	; 0x25
 8001180:	f000 f9c9 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40013800 	.word	0x40013800
 8001190:	40021000 	.word	0x40021000
 8001194:	40010800 	.word	0x40010800

08001198 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	uint8_t c=ch;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 80011a6:	f107 010f 	add.w	r1, r7, #15
 80011aa:	2364      	movs	r3, #100	; 0x64
 80011ac:	2201      	movs	r2, #1
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <__io_putchar+0x28>)
 80011b0:	f001 f934 	bl	800241c <HAL_UART_Transmit>
	return ch;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000204 	.word	0x20000204

080011c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
//	{
//		//printf("OK\r\n");
//		HAL_UART_Receive_IT(&huart1, (u8 *)aRxBuffer, RXBUFFERSIZE);
//		HAL_UART_Transmit(&huart1, (u8 *)aRxBuffer, 1, 100);
//	}
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
	...

080011d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d8:	f7ff ff54 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011de:	490c      	ldr	r1, [pc, #48]	; (8001210 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011f4:	4c09      	ldr	r4, [pc, #36]	; (800121c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f001 ff39 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001206:	f7ff fdbd 	bl	8000d84 <main>
  bx lr
 800120a:	4770      	bx	lr
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001214:	08007f1c 	.word	0x08007f1c
  ldr r2, =_sbss
 8001218:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800121c:	20000260 	.word	0x20000260

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x28>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x28>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f947 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	200f      	movs	r0, #15
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fe0c 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f95f 	bl	8001532 <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f000 f927 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_IncTick+0x20>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_IncTick+0x20>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	20000008 	.word	0x20000008
 80012d0:	2000024c 	.word	0x2000024c

080012d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <HAL_GetTick+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	2000024c 	.word	0x2000024c

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff fff0 	bl	80012d4 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffe0 	bl	80012d4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <__NVIC_EnableIRQ+0x34>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff90 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff2d 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff42 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff35 	bl	8001394 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa2 	bl	8001484 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d008      	beq.n	8001574 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2204      	movs	r2, #4
 8001566:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e020      	b.n	80015b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 020e 	bic.w	r2, r2, #14
 8001582:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	2101      	movs	r1, #1
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d005      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2204      	movs	r2, #4
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	e0d6      	b.n	8001792 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 020e 	bic.w	r2, r2, #14
 80015f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b64      	ldr	r3, [pc, #400]	; (800179c <HAL_DMA_Abort_IT+0x1dc>)
 800160c:	429a      	cmp	r2, r3
 800160e:	d958      	bls.n	80016c2 <HAL_DMA_Abort_IT+0x102>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a62      	ldr	r2, [pc, #392]	; (80017a0 <HAL_DMA_Abort_IT+0x1e0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d04f      	beq.n	80016ba <HAL_DMA_Abort_IT+0xfa>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a61      	ldr	r2, [pc, #388]	; (80017a4 <HAL_DMA_Abort_IT+0x1e4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d048      	beq.n	80016b6 <HAL_DMA_Abort_IT+0xf6>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a5f      	ldr	r2, [pc, #380]	; (80017a8 <HAL_DMA_Abort_IT+0x1e8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d040      	beq.n	80016b0 <HAL_DMA_Abort_IT+0xf0>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a5e      	ldr	r2, [pc, #376]	; (80017ac <HAL_DMA_Abort_IT+0x1ec>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d038      	beq.n	80016aa <HAL_DMA_Abort_IT+0xea>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a5c      	ldr	r2, [pc, #368]	; (80017b0 <HAL_DMA_Abort_IT+0x1f0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d030      	beq.n	80016a4 <HAL_DMA_Abort_IT+0xe4>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a5b      	ldr	r2, [pc, #364]	; (80017b4 <HAL_DMA_Abort_IT+0x1f4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d028      	beq.n	800169e <HAL_DMA_Abort_IT+0xde>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_DMA_Abort_IT+0x1dc>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d020      	beq.n	8001698 <HAL_DMA_Abort_IT+0xd8>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a57      	ldr	r2, [pc, #348]	; (80017b8 <HAL_DMA_Abort_IT+0x1f8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d019      	beq.n	8001694 <HAL_DMA_Abort_IT+0xd4>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a55      	ldr	r2, [pc, #340]	; (80017bc <HAL_DMA_Abort_IT+0x1fc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d012      	beq.n	8001690 <HAL_DMA_Abort_IT+0xd0>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a54      	ldr	r2, [pc, #336]	; (80017c0 <HAL_DMA_Abort_IT+0x200>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00a      	beq.n	800168a <HAL_DMA_Abort_IT+0xca>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_DMA_Abort_IT+0x204>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d102      	bne.n	8001684 <HAL_DMA_Abort_IT+0xc4>
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	e01b      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	e018      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	e015      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 8001690:	2310      	movs	r3, #16
 8001692:	e013      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 8001694:	2301      	movs	r3, #1
 8001696:	e011      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 8001698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169c:	e00e      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 800169e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016a2:	e00b      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 80016a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a8:	e008      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	e005      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	e002      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 80016b6:	2310      	movs	r3, #16
 80016b8:	e000      	b.n	80016bc <HAL_DMA_Abort_IT+0xfc>
 80016ba:	2301      	movs	r3, #1
 80016bc:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <HAL_DMA_Abort_IT+0x208>)
 80016be:	6053      	str	r3, [r2, #4]
 80016c0:	e057      	b.n	8001772 <HAL_DMA_Abort_IT+0x1b2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a36      	ldr	r2, [pc, #216]	; (80017a0 <HAL_DMA_Abort_IT+0x1e0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04f      	beq.n	800176c <HAL_DMA_Abort_IT+0x1ac>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <HAL_DMA_Abort_IT+0x1e4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d048      	beq.n	8001768 <HAL_DMA_Abort_IT+0x1a8>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a33      	ldr	r2, [pc, #204]	; (80017a8 <HAL_DMA_Abort_IT+0x1e8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d040      	beq.n	8001762 <HAL_DMA_Abort_IT+0x1a2>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a31      	ldr	r2, [pc, #196]	; (80017ac <HAL_DMA_Abort_IT+0x1ec>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d038      	beq.n	800175c <HAL_DMA_Abort_IT+0x19c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <HAL_DMA_Abort_IT+0x1f0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d030      	beq.n	8001756 <HAL_DMA_Abort_IT+0x196>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <HAL_DMA_Abort_IT+0x1f4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d028      	beq.n	8001750 <HAL_DMA_Abort_IT+0x190>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a26      	ldr	r2, [pc, #152]	; (800179c <HAL_DMA_Abort_IT+0x1dc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d020      	beq.n	800174a <HAL_DMA_Abort_IT+0x18a>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a2a      	ldr	r2, [pc, #168]	; (80017b8 <HAL_DMA_Abort_IT+0x1f8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_DMA_Abort_IT+0x186>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a29      	ldr	r2, [pc, #164]	; (80017bc <HAL_DMA_Abort_IT+0x1fc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d012      	beq.n	8001742 <HAL_DMA_Abort_IT+0x182>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_DMA_Abort_IT+0x200>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00a      	beq.n	800173c <HAL_DMA_Abort_IT+0x17c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <HAL_DMA_Abort_IT+0x204>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d102      	bne.n	8001736 <HAL_DMA_Abort_IT+0x176>
 8001730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001734:	e01b      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 8001736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173a:	e018      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 800173c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001740:	e015      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 8001742:	2310      	movs	r3, #16
 8001744:	e013      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 8001746:	2301      	movs	r3, #1
 8001748:	e011      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 800174a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174e:	e00e      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 8001750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001754:	e00b      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 8001756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175a:	e008      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	e005      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 8001762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001766:	e002      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 8001768:	2310      	movs	r3, #16
 800176a:	e000      	b.n	800176e <HAL_DMA_Abort_IT+0x1ae>
 800176c:	2301      	movs	r3, #1
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_DMA_Abort_IT+0x20c>)
 8001770:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
    } 
  }
  return status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020080 	.word	0x40020080
 80017a0:	40020008 	.word	0x40020008
 80017a4:	4002001c 	.word	0x4002001c
 80017a8:	40020030 	.word	0x40020030
 80017ac:	40020044 	.word	0x40020044
 80017b0:	40020058 	.word	0x40020058
 80017b4:	4002006c 	.word	0x4002006c
 80017b8:	40020408 	.word	0x40020408
 80017bc:	4002041c 	.word	0x4002041c
 80017c0:	40020430 	.word	0x40020430
 80017c4:	40020444 	.word	0x40020444
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020000 	.word	0x40020000

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b08b      	sub	sp, #44	; 0x2c
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e2:	e179      	b.n	8001ad8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e4:	2201      	movs	r2, #1
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	f040 8168 	bne.w	8001ad2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a96      	ldr	r2, [pc, #600]	; (8001a60 <HAL_GPIO_Init+0x290>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d05e      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 800180c:	4a94      	ldr	r2, [pc, #592]	; (8001a60 <HAL_GPIO_Init+0x290>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d875      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 8001812:	4a94      	ldr	r2, [pc, #592]	; (8001a64 <HAL_GPIO_Init+0x294>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d058      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 8001818:	4a92      	ldr	r2, [pc, #584]	; (8001a64 <HAL_GPIO_Init+0x294>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d86f      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 800181e:	4a92      	ldr	r2, [pc, #584]	; (8001a68 <HAL_GPIO_Init+0x298>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d052      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 8001824:	4a90      	ldr	r2, [pc, #576]	; (8001a68 <HAL_GPIO_Init+0x298>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d869      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 800182a:	4a90      	ldr	r2, [pc, #576]	; (8001a6c <HAL_GPIO_Init+0x29c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d04c      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 8001830:	4a8e      	ldr	r2, [pc, #568]	; (8001a6c <HAL_GPIO_Init+0x29c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d863      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 8001836:	4a8e      	ldr	r2, [pc, #568]	; (8001a70 <HAL_GPIO_Init+0x2a0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d046      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 800183c:	4a8c      	ldr	r2, [pc, #560]	; (8001a70 <HAL_GPIO_Init+0x2a0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d85d      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 8001842:	2b12      	cmp	r3, #18
 8001844:	d82a      	bhi.n	800189c <HAL_GPIO_Init+0xcc>
 8001846:	2b12      	cmp	r3, #18
 8001848:	d859      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 800184a:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <HAL_GPIO_Init+0x80>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	080018cb 	.word	0x080018cb
 8001854:	080018a5 	.word	0x080018a5
 8001858:	080018b7 	.word	0x080018b7
 800185c:	080018f9 	.word	0x080018f9
 8001860:	080018ff 	.word	0x080018ff
 8001864:	080018ff 	.word	0x080018ff
 8001868:	080018ff 	.word	0x080018ff
 800186c:	080018ff 	.word	0x080018ff
 8001870:	080018ff 	.word	0x080018ff
 8001874:	080018ff 	.word	0x080018ff
 8001878:	080018ff 	.word	0x080018ff
 800187c:	080018ff 	.word	0x080018ff
 8001880:	080018ff 	.word	0x080018ff
 8001884:	080018ff 	.word	0x080018ff
 8001888:	080018ff 	.word	0x080018ff
 800188c:	080018ff 	.word	0x080018ff
 8001890:	080018ff 	.word	0x080018ff
 8001894:	080018ad 	.word	0x080018ad
 8001898:	080018c1 	.word	0x080018c1
 800189c:	4a75      	ldr	r2, [pc, #468]	; (8001a74 <HAL_GPIO_Init+0x2a4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018a2:	e02c      	b.n	80018fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e029      	b.n	8001900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	3304      	adds	r3, #4
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e024      	b.n	8001900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	3308      	adds	r3, #8
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e01f      	b.n	8001900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	330c      	adds	r3, #12
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	e01a      	b.n	8001900 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018d2:	2304      	movs	r3, #4
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e013      	b.n	8001900 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e0:	2308      	movs	r3, #8
 80018e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	611a      	str	r2, [r3, #16]
          break;
 80018ea:	e009      	b.n	8001900 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ec:	2308      	movs	r3, #8
 80018ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	615a      	str	r2, [r3, #20]
          break;
 80018f6:	e003      	b.n	8001900 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x130>
          break;
 80018fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2bff      	cmp	r3, #255	; 0xff
 8001904:	d801      	bhi.n	800190a <HAL_GPIO_Init+0x13a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	e001      	b.n	800190e <HAL_GPIO_Init+0x13e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3304      	adds	r3, #4
 800190e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2bff      	cmp	r3, #255	; 0xff
 8001914:	d802      	bhi.n	800191c <HAL_GPIO_Init+0x14c>
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x152>
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	3b08      	subs	r3, #8
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	210f      	movs	r1, #15
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	401a      	ands	r2, r3
 8001934:	6a39      	ldr	r1, [r7, #32]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80c1 	beq.w	8001ad2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001950:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <HAL_GPIO_Init+0x2a8>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2a8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_GPIO_Init+0x2a8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001968:	4a44      	ldr	r2, [pc, #272]	; (8001a7c <HAL_GPIO_Init+0x2ac>)
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a3c      	ldr	r2, [pc, #240]	; (8001a80 <HAL_GPIO_Init+0x2b0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d01f      	beq.n	80019d4 <HAL_GPIO_Init+0x204>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a3b      	ldr	r2, [pc, #236]	; (8001a84 <HAL_GPIO_Init+0x2b4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d019      	beq.n	80019d0 <HAL_GPIO_Init+0x200>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a3a      	ldr	r2, [pc, #232]	; (8001a88 <HAL_GPIO_Init+0x2b8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_GPIO_Init+0x1fc>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a39      	ldr	r2, [pc, #228]	; (8001a8c <HAL_GPIO_Init+0x2bc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00d      	beq.n	80019c8 <HAL_GPIO_Init+0x1f8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <HAL_GPIO_Init+0x2c0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_Init+0x1f4>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a37      	ldr	r2, [pc, #220]	; (8001a94 <HAL_GPIO_Init+0x2c4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d101      	bne.n	80019c0 <HAL_GPIO_Init+0x1f0>
 80019bc:	2305      	movs	r3, #5
 80019be:	e00a      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c0:	2306      	movs	r3, #6
 80019c2:	e008      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c4:	2304      	movs	r3, #4
 80019c6:	e006      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c8:	2303      	movs	r3, #3
 80019ca:	e004      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019d4:	2300      	movs	r3, #0
 80019d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d8:	f002 0203 	and.w	r2, r2, #3
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	4093      	lsls	r3, r2
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e6:	4925      	ldr	r1, [pc, #148]	; (8001a7c <HAL_GPIO_Init+0x2ac>)
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	4924      	ldr	r1, [pc, #144]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4920      	ldr	r1, [pc, #128]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	491a      	ldr	r1, [pc, #104]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60cb      	str	r3, [r1, #12]
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4916      	ldr	r1, [pc, #88]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d025      	beq.n	8001a9c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4910      	ldr	r1, [pc, #64]	; (8001a98 <HAL_GPIO_Init+0x2c8>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
 8001a5c:	e025      	b.n	8001aaa <HAL_GPIO_Init+0x2da>
 8001a5e:	bf00      	nop
 8001a60:	10320000 	.word	0x10320000
 8001a64:	10310000 	.word	0x10310000
 8001a68:	10220000 	.word	0x10220000
 8001a6c:	10210000 	.word	0x10210000
 8001a70:	10120000 	.word	0x10120000
 8001a74:	10110000 	.word	0x10110000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40010800 	.word	0x40010800
 8001a84:	40010c00 	.word	0x40010c00
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40011400 	.word	0x40011400
 8001a90:	40011800 	.word	0x40011800
 8001a94:	40011c00 	.word	0x40011c00
 8001a98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_GPIO_Init+0x324>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4913      	ldr	r1, [pc, #76]	; (8001af4 <HAL_GPIO_Init+0x324>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_GPIO_Init+0x324>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	490e      	ldr	r1, [pc, #56]	; (8001af4 <HAL_GPIO_Init+0x324>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
 8001ac2:	e006      	b.n	8001ad2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_GPIO_Init+0x324>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4909      	ldr	r1, [pc, #36]	; (8001af4 <HAL_GPIO_Init+0x324>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f ae7e 	bne.w	80017e4 <HAL_GPIO_Init+0x14>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	372c      	adds	r7, #44	; 0x2c
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b14:	e003      	b.n	8001b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	041a      	lsls	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	611a      	str	r2, [r3, #16]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	43d9      	mvns	r1, r3
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	400b      	ands	r3, r1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	611a      	str	r2, [r3, #16]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e272      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8087 	beq.w	8001c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d00c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b88:	4b8f      	ldr	r3, [pc, #572]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d112      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
 8001b94:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d10b      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d06c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x12c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d168      	bne.n	8001c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e24c      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x76>
 8001bc4:	4b80      	ldr	r3, [pc, #512]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a7f      	ldr	r2, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e02e      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7a      	ldr	r2, [pc, #488]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0xbc>
 8001bfe:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001c18:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a67      	ldr	r2, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fb4c 	bl	80012d4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fb48 	bl	80012d4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e200      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe4>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb38 	bl	80012d4 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fb34 	bl	80012d4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1ec      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x10c>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c96:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca2:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e1c0      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4939      	ldr	r1, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e03a      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf0:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff faed 	bl	80012d4 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fae9 	bl	80012d4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1a1      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff facc 	bl	80012d4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff fac8 	bl	80012d4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e180      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03a      	beq.n	8001de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d019      	beq.n	8001da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7ff faac 	bl	80012d4 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff faa8 	bl	80012d4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e160      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 face 	bl	8002340 <RCC_Delay>
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7ff fa92 	bl	80012d4 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db2:	e00f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff fa8e 	bl	80012d4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d908      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e146      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	42420000 	.word	0x42420000
 8001dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b92      	ldr	r3, [pc, #584]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e9      	bne.n	8001db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a6 	beq.w	8001f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b8b      	ldr	r3, [pc, #556]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a87      	ldr	r2, [pc, #540]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b85      	ldr	r3, [pc, #532]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b82      	ldr	r3, [pc, #520]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b7f      	ldr	r3, [pc, #508]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7e      	ldr	r2, [pc, #504]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fa4f 	bl	80012d4 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7ff fa4b 	bl	80012d4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e103      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b75      	ldr	r3, [pc, #468]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x312>
 8001e60:	4b6f      	ldr	r3, [pc, #444]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a6e      	ldr	r2, [pc, #440]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e02d      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x334>
 8001e76:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a69      	ldr	r2, [pc, #420]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a66      	ldr	r2, [pc, #408]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	e01c      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x356>
 8001e98:	4b61      	ldr	r3, [pc, #388]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a60      	ldr	r2, [pc, #384]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	4b5e      	ldr	r3, [pc, #376]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a5d      	ldr	r2, [pc, #372]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e00b      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a5a      	ldr	r2, [pc, #360]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a57      	ldr	r2, [pc, #348]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d015      	beq.n	8001efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f9ff 	bl	80012d4 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff f9fb 	bl	80012d4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e0b1      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ee      	beq.n	8001eda <HAL_RCC_OscConfig+0x37e>
 8001efc:	e014      	b.n	8001f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f9e9 	bl	80012d4 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff f9e5 	bl	80012d4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e09b      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	4b40      	ldr	r3, [pc, #256]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d105      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8087 	beq.w	8002052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d061      	beq.n	8002014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d146      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f9b9 	bl	80012d4 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff f9b5 	bl	80012d4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e06d      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4921      	ldr	r1, [pc, #132]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a19      	ldr	r1, [r3, #32]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	491b      	ldr	r1, [pc, #108]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f989 	bl	80012d4 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff f985 	bl	80012d4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e03d      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x46a>
 8001fe4:	e035      	b.n	8002052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff f972 	bl	80012d4 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7ff f96e 	bl	80012d4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e026      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x498>
 8002012:	e01e      	b.n	8002052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e019      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
 8002028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x500>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	429a      	cmp	r2, r3
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0d0      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4965      	ldr	r1, [pc, #404]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d040      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e073      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4936      	ldr	r1, [pc, #216]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7ff f8c0 	bl	80012d4 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7ff f8bc 	bl	80012d4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e053      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d210      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e032      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f821 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	490a      	ldr	r1, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	5ccb      	ldrb	r3, [r1, r3]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1cc>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f81e 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	08007a38 	.word	0x08007a38
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b04      	cmp	r3, #4
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x30>
 800225e:	2b08      	cmp	r3, #8
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x36>
 8002262:	e027      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002266:	613b      	str	r3, [r7, #16]
      break;
 8002268:	e027      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0c9b      	lsrs	r3, r3, #18
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002274:	5cd3      	ldrb	r3, [r2, r3]
 8002276:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0c5b      	lsrs	r3, r3, #17
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002296:	fb03 f202 	mul.w	r2, r3, r2
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	e004      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	613b      	str	r3, [r7, #16]
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetSysClockFreq+0x98>)
 80022b6:	613b      	str	r3, [r7, #16]
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	693b      	ldr	r3, [r7, #16]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	007a1200 	.word	0x007a1200
 80022d0:	08007a50 	.word	0x08007a50
 80022d4:	08007a60 	.word	0x08007a60
 80022d8:	003d0900 	.word	0x003d0900

080022dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <HAL_RCC_GetHCLKFreq+0x10>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000000 	.word	0x20000000

080022f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f4:	f7ff fff2 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	08007a48 	.word	0x08007a48

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff ffde 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	0adb      	lsrs	r3, r3, #11
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08007a48 	.word	0x08007a48

08002340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <RCC_Delay+0x34>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <RCC_Delay+0x38>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a5b      	lsrs	r3, r3, #9
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800235c:	bf00      	nop
  }
  while (Delay --);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	60fa      	str	r2, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <RCC_Delay+0x1c>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	20000000 	.word	0x20000000
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e042      	b.n	8002414 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fea4 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fdc5 	bl	8002f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	d16d      	bne.n	8002518 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_UART_Transmit+0x2c>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e066      	b.n	800251a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2221      	movs	r2, #33	; 0x21
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800245a:	f7fe ff3b 	bl	80012d4 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d108      	bne.n	8002488 <HAL_UART_Transmit+0x6c>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	e003      	b.n	8002490 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002490:	e02a      	b.n	80024e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fb14 	bl	8002aca <UART_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e036      	b.n	800251a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10b      	bne.n	80024ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	3302      	adds	r3, #2
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	e007      	b.n	80024da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3301      	adds	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1cf      	bne.n	8002492 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fae4 	bl	8002aca <UART_WaitOnFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	4613      	mov	r3, r2
 800252e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b20      	cmp	r3, #32
 800253a:	d112      	bne.n	8002562 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_UART_Receive_IT+0x26>
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e00b      	b.n	8002564 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	461a      	mov	r2, r3
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fb24 	bl	8002ba6 <UART_Start_Receive_IT>
 800255e:	4603      	mov	r3, r0
 8002560:	e000      	b.n	8002564 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0ba      	sub	sp, #232	; 0xe8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_UART_IRQHandler+0x66>
 80025be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fc01 	bl	8002dd2 <UART_Receive_IT>
      return;
 80025d0:	e25b      	b.n	8002a8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80de 	beq.w	8002798 <HAL_UART_IRQHandler+0x22c>
 80025dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80d1 	beq.w	8002798 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_UART_IRQHandler+0xae>
 8002602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800261a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_UART_IRQHandler+0xd2>
 8002626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800263e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_UART_IRQHandler+0xf6>
 800264a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f043 0204 	orr.w	r2, r3, #4
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d011      	beq.n	8002692 <HAL_UART_IRQHandler+0x126>
 800266e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800267a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f043 0208 	orr.w	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 81f2 	beq.w	8002a80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800269c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_UART_IRQHandler+0x14e>
 80026a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fb8c 	bl	8002dd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <HAL_UART_IRQHandler+0x17a>
 80026de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04f      	beq.n	8002786 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa96 	bl	8002c18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d041      	beq.n	800277e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3314      	adds	r3, #20
 8002700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002708:	e853 3f00 	ldrex	r3, [r3]
 800270c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3314      	adds	r3, #20
 8002722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800272a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002736:	e841 2300 	strex	r3, r2, [r1]
 800273a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800273e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1d9      	bne.n	80026fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d013      	beq.n	8002776 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	4a7e      	ldr	r2, [pc, #504]	; (800294c <HAL_UART_IRQHandler+0x3e0>)
 8002754:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe ff30 	bl	80015c0 <HAL_DMA_Abort_IT>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d016      	beq.n	8002794 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002770:	4610      	mov	r0, r2
 8002772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002774:	e00e      	b.n	8002794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f993 	bl	8002aa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	e00a      	b.n	8002794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f98f 	bl	8002aa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002784:	e006      	b.n	8002794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f98b 	bl	8002aa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002792:	e175      	b.n	8002a80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002794:	bf00      	nop
    return;
 8002796:	e173      	b.n	8002a80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	2b01      	cmp	r3, #1
 800279e:	f040 814f 	bne.w	8002a40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8148 	beq.w	8002a40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8141 	beq.w	8002a40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80b6 	beq.w	8002950 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8145 	beq.w	8002a84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002802:	429a      	cmp	r2, r3
 8002804:	f080 813e 	bcs.w	8002a84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800280e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b20      	cmp	r3, #32
 8002818:	f000 8088 	beq.w	800292c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800282a:	e853 3f00 	ldrex	r3, [r3]
 800282e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002832:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800283a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002848:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800284c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002850:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002854:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002858:	e841 2300 	strex	r3, r2, [r1]
 800285c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002860:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1d9      	bne.n	800281c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3314      	adds	r3, #20
 800286e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800288c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002890:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002894:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002898:	e841 2300 	strex	r3, r2, [r1]
 800289c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800289e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1e1      	bne.n	8002868 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3314      	adds	r3, #20
 80028c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028d0:	e841 2300 	strex	r3, r2, [r1]
 80028d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e3      	bne.n	80028a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f4:	e853 3f00 	ldrex	r3, [r3]
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fc:	f023 0310 	bic.w	r3, r3, #16
 8002900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800290e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002910:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800291c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e3      	bne.n	80028ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fe0f 	bl	800154a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800293a:	b29b      	uxth	r3, r3
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	b29b      	uxth	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f8b6 	bl	8002ab4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002948:	e09c      	b.n	8002a84 <HAL_UART_IRQHandler+0x518>
 800294a:	bf00      	nop
 800294c:	08002cdd 	.word	0x08002cdd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002958:	b29b      	uxth	r3, r3
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 808e 	beq.w	8002a88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800296c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8089 	beq.w	8002a88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	e853 3f00 	ldrex	r3, [r3]
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800298c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800299a:	647a      	str	r2, [r7, #68]	; 0x44
 800299c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029a2:	e841 2300 	strex	r3, r2, [r1]
 80029a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1e3      	bne.n	8002976 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3314      	adds	r3, #20
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	e853 3f00 	ldrex	r3, [r3]
 80029bc:	623b      	str	r3, [r7, #32]
   return(result);
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3314      	adds	r3, #20
 80029ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029d2:	633a      	str	r2, [r7, #48]	; 0x30
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e3      	bne.n	80029ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	e853 3f00 	ldrex	r3, [r3]
 8002a02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0310 	bic.w	r3, r3, #16
 8002a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a18:	61fa      	str	r2, [r7, #28]
 8002a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1c:	69b9      	ldr	r1, [r7, #24]
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	e841 2300 	strex	r3, r2, [r1]
 8002a24:	617b      	str	r3, [r7, #20]
   return(result);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e3      	bne.n	80029f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a36:	4619      	mov	r1, r3
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f83b 	bl	8002ab4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a3e:	e023      	b.n	8002a88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_UART_IRQHandler+0x4f4>
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f953 	bl	8002d04 <UART_Transmit_IT>
    return;
 8002a5e:	e014      	b.n	8002a8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <HAL_UART_IRQHandler+0x51e>
 8002a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f992 	bl	8002da2 <UART_EndTransmit_IT>
    return;
 8002a7e:	e004      	b.n	8002a8a <HAL_UART_IRQHandler+0x51e>
    return;
 8002a80:	bf00      	nop
 8002a82:	e002      	b.n	8002a8a <HAL_UART_IRQHandler+0x51e>
      return;
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <HAL_UART_IRQHandler+0x51e>
      return;
 8002a88:	bf00      	nop
  }
}
 8002a8a:	37e8      	adds	r7, #232	; 0xe8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b090      	sub	sp, #64	; 0x40
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ada:	e050      	b.n	8002b7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae2:	d04c      	beq.n	8002b7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0x30>
 8002aea:	f7fe fbf3 	bl	80012d4 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d241      	bcs.n	8002b7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b1a:	637a      	str	r2, [r7, #52]	; 0x34
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1e5      	bne.n	8002afa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3314      	adds	r3, #20
 8002b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b4e:	623a      	str	r2, [r7, #32]
 8002b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	69f9      	ldr	r1, [r7, #28]
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e5      	bne.n	8002b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e00f      	b.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4013      	ands	r3, r2
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	bf0c      	ite	eq
 8002b8e:	2301      	moveq	r3, #1
 8002b90:	2300      	movne	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d09f      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3740      	adds	r7, #64	; 0x40
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2222      	movs	r2, #34	; 0x22
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0220 	orr.w	r2, r2, #32
 8002c0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b095      	sub	sp, #84	; 0x54
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2a:	e853 3f00 	ldrex	r3, [r3]
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c40:	643a      	str	r2, [r7, #64]	; 0x40
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c48:	e841 2300 	strex	r3, r2, [r1]
 8002c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e5      	bne.n	8002c20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3314      	adds	r3, #20
 8002c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	e853 3f00 	ldrex	r3, [r3]
 8002c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3314      	adds	r3, #20
 8002c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7c:	e841 2300 	strex	r3, r2, [r1]
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e5      	bne.n	8002c54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d119      	bne.n	8002cc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	e853 3f00 	ldrex	r3, [r3]
 8002c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f023 0310 	bic.w	r3, r3, #16
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	330c      	adds	r3, #12
 8002cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cb0:	61ba      	str	r2, [r7, #24]
 8002cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb4:	6979      	ldr	r1, [r7, #20]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e5      	bne.n	8002c90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cd2:	bf00      	nop
 8002cd4:	3754      	adds	r7, #84	; 0x54
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff fed3 	bl	8002aa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b21      	cmp	r3, #33	; 0x21
 8002d16:	d13e      	bne.n	8002d96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d20:	d114      	bne.n	8002d4c <UART_Transmit_IT+0x48>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d110      	bne.n	8002d4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	621a      	str	r2, [r3, #32]
 8002d4a:	e008      	b.n	8002d5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	1c59      	adds	r1, r3, #1
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6211      	str	r1, [r2, #32]
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fe64 	bl	8002a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b08c      	sub	sp, #48	; 0x30
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b22      	cmp	r3, #34	; 0x22
 8002de4:	f040 80ae 	bne.w	8002f44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df0:	d117      	bne.n	8002e22 <UART_Receive_IT+0x50>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d113      	bne.n	8002e22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	1c9a      	adds	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e20:	e026      	b.n	8002e70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e34:	d007      	beq.n	8002e46 <UART_Receive_IT+0x74>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <UART_Receive_IT+0x82>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e008      	b.n	8002e66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d15d      	bne.n	8002f40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0220 	bic.w	r2, r2, #32
 8002e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d135      	bne.n	8002f36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f023 0310 	bic.w	r3, r3, #16
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	623a      	str	r2, [r7, #32]
 8002ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	69f9      	ldr	r1, [r7, #28]
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e5      	bne.n	8002ed0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d10a      	bne.n	8002f28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fdc0 	bl	8002ab4 <HAL_UARTEx_RxEventCallback>
 8002f34:	e002      	b.n	8002f3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe f944 	bl	80011c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e002      	b.n	8002f46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3730      	adds	r7, #48	; 0x30
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f8a:	f023 030c 	bic.w	r3, r3, #12
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <UART_SetConfig+0x114>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7ff f9ae 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	e002      	b.n	8002fc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fc0:	f7ff f996 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 8002fc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009a      	lsls	r2, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	4a22      	ldr	r2, [pc, #136]	; (8003068 <UART_SetConfig+0x118>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	0119      	lsls	r1, r3, #4
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009a      	lsls	r2, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <UART_SetConfig+0x118>)
 8002ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2064      	movs	r0, #100	; 0x64
 8003006:	fb00 f303 	mul.w	r3, r0, r3
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	3332      	adds	r3, #50	; 0x32
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <UART_SetConfig+0x118>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800301c:	4419      	add	r1, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009a      	lsls	r2, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fbb2 f2f3 	udiv	r2, r2, r3
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <UART_SetConfig+0x118>)
 8003036:	fba3 0302 	umull	r0, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2064      	movs	r0, #100	; 0x64
 800303e:	fb00 f303 	mul.w	r3, r0, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	3332      	adds	r3, #50	; 0x32
 8003048:	4a07      	ldr	r2, [pc, #28]	; (8003068 <UART_SetConfig+0x118>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	440a      	add	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40013800 	.word	0x40013800
 8003068:	51eb851f 	.word	0x51eb851f

0800306c <__errno>:
 800306c:	4b01      	ldr	r3, [pc, #4]	; (8003074 <__errno+0x8>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	2000000c 	.word	0x2000000c

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	2600      	movs	r6, #0
 800307c:	4d0c      	ldr	r5, [pc, #48]	; (80030b0 <__libc_init_array+0x38>)
 800307e:	4c0d      	ldr	r4, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 8003080:	1b64      	subs	r4, r4, r5
 8003082:	10a4      	asrs	r4, r4, #2
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	f004 fcc6 	bl	8007a18 <_init>
 800308c:	2600      	movs	r6, #0
 800308e:	4d0a      	ldr	r5, [pc, #40]	; (80030b8 <__libc_init_array+0x40>)
 8003090:	4c0a      	ldr	r4, [pc, #40]	; (80030bc <__libc_init_array+0x44>)
 8003092:	1b64      	subs	r4, r4, r5
 8003094:	10a4      	asrs	r4, r4, #2
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	08007f14 	.word	0x08007f14
 80030b4:	08007f14 	.word	0x08007f14
 80030b8:	08007f14 	.word	0x08007f14
 80030bc:	08007f18 	.word	0x08007f18

080030c0 <memset>:
 80030c0:	4603      	mov	r3, r0
 80030c2:	4402      	add	r2, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
 80030c8:	4770      	bx	lr
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <__cvt>:
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d6:	461f      	mov	r7, r3
 80030d8:	bfbb      	ittet	lt
 80030da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80030de:	461f      	movlt	r7, r3
 80030e0:	2300      	movge	r3, #0
 80030e2:	232d      	movlt	r3, #45	; 0x2d
 80030e4:	b088      	sub	sp, #32
 80030e6:	4614      	mov	r4, r2
 80030e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80030ec:	7013      	strb	r3, [r2, #0]
 80030ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80030f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80030f4:	f023 0820 	bic.w	r8, r3, #32
 80030f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030fc:	d005      	beq.n	800310a <__cvt+0x3a>
 80030fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003102:	d100      	bne.n	8003106 <__cvt+0x36>
 8003104:	3501      	adds	r5, #1
 8003106:	2302      	movs	r3, #2
 8003108:	e000      	b.n	800310c <__cvt+0x3c>
 800310a:	2303      	movs	r3, #3
 800310c:	aa07      	add	r2, sp, #28
 800310e:	9204      	str	r2, [sp, #16]
 8003110:	aa06      	add	r2, sp, #24
 8003112:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003116:	e9cd 3500 	strd	r3, r5, [sp]
 800311a:	4622      	mov	r2, r4
 800311c:	463b      	mov	r3, r7
 800311e:	f001 febb 	bl	8004e98 <_dtoa_r>
 8003122:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003126:	4606      	mov	r6, r0
 8003128:	d102      	bne.n	8003130 <__cvt+0x60>
 800312a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800312c:	07db      	lsls	r3, r3, #31
 800312e:	d522      	bpl.n	8003176 <__cvt+0xa6>
 8003130:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003134:	eb06 0905 	add.w	r9, r6, r5
 8003138:	d110      	bne.n	800315c <__cvt+0x8c>
 800313a:	7833      	ldrb	r3, [r6, #0]
 800313c:	2b30      	cmp	r3, #48	; 0x30
 800313e:	d10a      	bne.n	8003156 <__cvt+0x86>
 8003140:	2200      	movs	r2, #0
 8003142:	2300      	movs	r3, #0
 8003144:	4620      	mov	r0, r4
 8003146:	4639      	mov	r1, r7
 8003148:	f7fd fc9a 	bl	8000a80 <__aeabi_dcmpeq>
 800314c:	b918      	cbnz	r0, 8003156 <__cvt+0x86>
 800314e:	f1c5 0501 	rsb	r5, r5, #1
 8003152:	f8ca 5000 	str.w	r5, [sl]
 8003156:	f8da 3000 	ldr.w	r3, [sl]
 800315a:	4499      	add	r9, r3
 800315c:	2200      	movs	r2, #0
 800315e:	2300      	movs	r3, #0
 8003160:	4620      	mov	r0, r4
 8003162:	4639      	mov	r1, r7
 8003164:	f7fd fc8c 	bl	8000a80 <__aeabi_dcmpeq>
 8003168:	b108      	cbz	r0, 800316e <__cvt+0x9e>
 800316a:	f8cd 901c 	str.w	r9, [sp, #28]
 800316e:	2230      	movs	r2, #48	; 0x30
 8003170:	9b07      	ldr	r3, [sp, #28]
 8003172:	454b      	cmp	r3, r9
 8003174:	d307      	bcc.n	8003186 <__cvt+0xb6>
 8003176:	4630      	mov	r0, r6
 8003178:	9b07      	ldr	r3, [sp, #28]
 800317a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800317c:	1b9b      	subs	r3, r3, r6
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	b008      	add	sp, #32
 8003182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003186:	1c59      	adds	r1, r3, #1
 8003188:	9107      	str	r1, [sp, #28]
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	e7f0      	b.n	8003170 <__cvt+0xa0>

0800318e <__exponent>:
 800318e:	4603      	mov	r3, r0
 8003190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003192:	2900      	cmp	r1, #0
 8003194:	f803 2b02 	strb.w	r2, [r3], #2
 8003198:	bfb6      	itet	lt
 800319a:	222d      	movlt	r2, #45	; 0x2d
 800319c:	222b      	movge	r2, #43	; 0x2b
 800319e:	4249      	neglt	r1, r1
 80031a0:	2909      	cmp	r1, #9
 80031a2:	7042      	strb	r2, [r0, #1]
 80031a4:	dd2b      	ble.n	80031fe <__exponent+0x70>
 80031a6:	f10d 0407 	add.w	r4, sp, #7
 80031aa:	46a4      	mov	ip, r4
 80031ac:	270a      	movs	r7, #10
 80031ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80031b2:	460a      	mov	r2, r1
 80031b4:	46a6      	mov	lr, r4
 80031b6:	fb07 1516 	mls	r5, r7, r6, r1
 80031ba:	2a63      	cmp	r2, #99	; 0x63
 80031bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80031c0:	4631      	mov	r1, r6
 80031c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80031c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80031ca:	dcf0      	bgt.n	80031ae <__exponent+0x20>
 80031cc:	3130      	adds	r1, #48	; 0x30
 80031ce:	f1ae 0502 	sub.w	r5, lr, #2
 80031d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80031d6:	4629      	mov	r1, r5
 80031d8:	1c44      	adds	r4, r0, #1
 80031da:	4561      	cmp	r1, ip
 80031dc:	d30a      	bcc.n	80031f4 <__exponent+0x66>
 80031de:	f10d 0209 	add.w	r2, sp, #9
 80031e2:	eba2 020e 	sub.w	r2, r2, lr
 80031e6:	4565      	cmp	r5, ip
 80031e8:	bf88      	it	hi
 80031ea:	2200      	movhi	r2, #0
 80031ec:	4413      	add	r3, r2
 80031ee:	1a18      	subs	r0, r3, r0
 80031f0:	b003      	add	sp, #12
 80031f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80031fc:	e7ed      	b.n	80031da <__exponent+0x4c>
 80031fe:	2330      	movs	r3, #48	; 0x30
 8003200:	3130      	adds	r1, #48	; 0x30
 8003202:	7083      	strb	r3, [r0, #2]
 8003204:	70c1      	strb	r1, [r0, #3]
 8003206:	1d03      	adds	r3, r0, #4
 8003208:	e7f1      	b.n	80031ee <__exponent+0x60>
	...

0800320c <_printf_float>:
 800320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003210:	b091      	sub	sp, #68	; 0x44
 8003212:	460c      	mov	r4, r1
 8003214:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003218:	4616      	mov	r6, r2
 800321a:	461f      	mov	r7, r3
 800321c:	4605      	mov	r5, r0
 800321e:	f003 f943 	bl	80064a8 <_localeconv_r>
 8003222:	6803      	ldr	r3, [r0, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	9309      	str	r3, [sp, #36]	; 0x24
 8003228:	f7fc fffe 	bl	8000228 <strlen>
 800322c:	2300      	movs	r3, #0
 800322e:	930e      	str	r3, [sp, #56]	; 0x38
 8003230:	f8d8 3000 	ldr.w	r3, [r8]
 8003234:	900a      	str	r0, [sp, #40]	; 0x28
 8003236:	3307      	adds	r3, #7
 8003238:	f023 0307 	bic.w	r3, r3, #7
 800323c:	f103 0208 	add.w	r2, r3, #8
 8003240:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003244:	f8d4 b000 	ldr.w	fp, [r4]
 8003248:	f8c8 2000 	str.w	r2, [r8]
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003254:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003258:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800325c:	930b      	str	r3, [sp, #44]	; 0x2c
 800325e:	f04f 32ff 	mov.w	r2, #4294967295
 8003262:	4640      	mov	r0, r8
 8003264:	4b9c      	ldr	r3, [pc, #624]	; (80034d8 <_printf_float+0x2cc>)
 8003266:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003268:	f7fd fc3c 	bl	8000ae4 <__aeabi_dcmpun>
 800326c:	bb70      	cbnz	r0, 80032cc <_printf_float+0xc0>
 800326e:	f04f 32ff 	mov.w	r2, #4294967295
 8003272:	4640      	mov	r0, r8
 8003274:	4b98      	ldr	r3, [pc, #608]	; (80034d8 <_printf_float+0x2cc>)
 8003276:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003278:	f7fd fc16 	bl	8000aa8 <__aeabi_dcmple>
 800327c:	bb30      	cbnz	r0, 80032cc <_printf_float+0xc0>
 800327e:	2200      	movs	r2, #0
 8003280:	2300      	movs	r3, #0
 8003282:	4640      	mov	r0, r8
 8003284:	4651      	mov	r1, sl
 8003286:	f7fd fc05 	bl	8000a94 <__aeabi_dcmplt>
 800328a:	b110      	cbz	r0, 8003292 <_printf_float+0x86>
 800328c:	232d      	movs	r3, #45	; 0x2d
 800328e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003292:	4b92      	ldr	r3, [pc, #584]	; (80034dc <_printf_float+0x2d0>)
 8003294:	4892      	ldr	r0, [pc, #584]	; (80034e0 <_printf_float+0x2d4>)
 8003296:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800329a:	bf94      	ite	ls
 800329c:	4698      	movls	r8, r3
 800329e:	4680      	movhi	r8, r0
 80032a0:	2303      	movs	r3, #3
 80032a2:	f04f 0a00 	mov.w	sl, #0
 80032a6:	6123      	str	r3, [r4, #16]
 80032a8:	f02b 0304 	bic.w	r3, fp, #4
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	4633      	mov	r3, r6
 80032b0:	4621      	mov	r1, r4
 80032b2:	4628      	mov	r0, r5
 80032b4:	9700      	str	r7, [sp, #0]
 80032b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80032b8:	f000 f9d4 	bl	8003664 <_printf_common>
 80032bc:	3001      	adds	r0, #1
 80032be:	f040 8090 	bne.w	80033e2 <_printf_float+0x1d6>
 80032c2:	f04f 30ff 	mov.w	r0, #4294967295
 80032c6:	b011      	add	sp, #68	; 0x44
 80032c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032cc:	4642      	mov	r2, r8
 80032ce:	4653      	mov	r3, sl
 80032d0:	4640      	mov	r0, r8
 80032d2:	4651      	mov	r1, sl
 80032d4:	f7fd fc06 	bl	8000ae4 <__aeabi_dcmpun>
 80032d8:	b148      	cbz	r0, 80032ee <_printf_float+0xe2>
 80032da:	f1ba 0f00 	cmp.w	sl, #0
 80032de:	bfb8      	it	lt
 80032e0:	232d      	movlt	r3, #45	; 0x2d
 80032e2:	4880      	ldr	r0, [pc, #512]	; (80034e4 <_printf_float+0x2d8>)
 80032e4:	bfb8      	it	lt
 80032e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80032ea:	4b7f      	ldr	r3, [pc, #508]	; (80034e8 <_printf_float+0x2dc>)
 80032ec:	e7d3      	b.n	8003296 <_printf_float+0x8a>
 80032ee:	6863      	ldr	r3, [r4, #4]
 80032f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	d142      	bne.n	800337e <_printf_float+0x172>
 80032f8:	2306      	movs	r3, #6
 80032fa:	6063      	str	r3, [r4, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	9206      	str	r2, [sp, #24]
 8003300:	aa0e      	add	r2, sp, #56	; 0x38
 8003302:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003306:	aa0d      	add	r2, sp, #52	; 0x34
 8003308:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800330c:	9203      	str	r2, [sp, #12]
 800330e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003312:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003316:	6023      	str	r3, [r4, #0]
 8003318:	6863      	ldr	r3, [r4, #4]
 800331a:	4642      	mov	r2, r8
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4628      	mov	r0, r5
 8003320:	4653      	mov	r3, sl
 8003322:	910b      	str	r1, [sp, #44]	; 0x2c
 8003324:	f7ff fed4 	bl	80030d0 <__cvt>
 8003328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800332a:	4680      	mov	r8, r0
 800332c:	2947      	cmp	r1, #71	; 0x47
 800332e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003330:	d108      	bne.n	8003344 <_printf_float+0x138>
 8003332:	1cc8      	adds	r0, r1, #3
 8003334:	db02      	blt.n	800333c <_printf_float+0x130>
 8003336:	6863      	ldr	r3, [r4, #4]
 8003338:	4299      	cmp	r1, r3
 800333a:	dd40      	ble.n	80033be <_printf_float+0x1b2>
 800333c:	f1a9 0902 	sub.w	r9, r9, #2
 8003340:	fa5f f989 	uxtb.w	r9, r9
 8003344:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003348:	d81f      	bhi.n	800338a <_printf_float+0x17e>
 800334a:	464a      	mov	r2, r9
 800334c:	3901      	subs	r1, #1
 800334e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003352:	910d      	str	r1, [sp, #52]	; 0x34
 8003354:	f7ff ff1b 	bl	800318e <__exponent>
 8003358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800335a:	4682      	mov	sl, r0
 800335c:	1813      	adds	r3, r2, r0
 800335e:	2a01      	cmp	r2, #1
 8003360:	6123      	str	r3, [r4, #16]
 8003362:	dc02      	bgt.n	800336a <_printf_float+0x15e>
 8003364:	6822      	ldr	r2, [r4, #0]
 8003366:	07d2      	lsls	r2, r2, #31
 8003368:	d501      	bpl.n	800336e <_printf_float+0x162>
 800336a:	3301      	adds	r3, #1
 800336c:	6123      	str	r3, [r4, #16]
 800336e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003372:	2b00      	cmp	r3, #0
 8003374:	d09b      	beq.n	80032ae <_printf_float+0xa2>
 8003376:	232d      	movs	r3, #45	; 0x2d
 8003378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800337c:	e797      	b.n	80032ae <_printf_float+0xa2>
 800337e:	2947      	cmp	r1, #71	; 0x47
 8003380:	d1bc      	bne.n	80032fc <_printf_float+0xf0>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ba      	bne.n	80032fc <_printf_float+0xf0>
 8003386:	2301      	movs	r3, #1
 8003388:	e7b7      	b.n	80032fa <_printf_float+0xee>
 800338a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800338e:	d118      	bne.n	80033c2 <_printf_float+0x1b6>
 8003390:	2900      	cmp	r1, #0
 8003392:	6863      	ldr	r3, [r4, #4]
 8003394:	dd0b      	ble.n	80033ae <_printf_float+0x1a2>
 8003396:	6121      	str	r1, [r4, #16]
 8003398:	b913      	cbnz	r3, 80033a0 <_printf_float+0x194>
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	07d0      	lsls	r0, r2, #31
 800339e:	d502      	bpl.n	80033a6 <_printf_float+0x19a>
 80033a0:	3301      	adds	r3, #1
 80033a2:	440b      	add	r3, r1
 80033a4:	6123      	str	r3, [r4, #16]
 80033a6:	f04f 0a00 	mov.w	sl, #0
 80033aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80033ac:	e7df      	b.n	800336e <_printf_float+0x162>
 80033ae:	b913      	cbnz	r3, 80033b6 <_printf_float+0x1aa>
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	07d2      	lsls	r2, r2, #31
 80033b4:	d501      	bpl.n	80033ba <_printf_float+0x1ae>
 80033b6:	3302      	adds	r3, #2
 80033b8:	e7f4      	b.n	80033a4 <_printf_float+0x198>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e7f2      	b.n	80033a4 <_printf_float+0x198>
 80033be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80033c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033c4:	4299      	cmp	r1, r3
 80033c6:	db05      	blt.n	80033d4 <_printf_float+0x1c8>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	6121      	str	r1, [r4, #16]
 80033cc:	07d8      	lsls	r0, r3, #31
 80033ce:	d5ea      	bpl.n	80033a6 <_printf_float+0x19a>
 80033d0:	1c4b      	adds	r3, r1, #1
 80033d2:	e7e7      	b.n	80033a4 <_printf_float+0x198>
 80033d4:	2900      	cmp	r1, #0
 80033d6:	bfcc      	ite	gt
 80033d8:	2201      	movgt	r2, #1
 80033da:	f1c1 0202 	rsble	r2, r1, #2
 80033de:	4413      	add	r3, r2
 80033e0:	e7e0      	b.n	80033a4 <_printf_float+0x198>
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	055a      	lsls	r2, r3, #21
 80033e6:	d407      	bmi.n	80033f8 <_printf_float+0x1ec>
 80033e8:	6923      	ldr	r3, [r4, #16]
 80033ea:	4642      	mov	r2, r8
 80033ec:	4631      	mov	r1, r6
 80033ee:	4628      	mov	r0, r5
 80033f0:	47b8      	blx	r7
 80033f2:	3001      	adds	r0, #1
 80033f4:	d12b      	bne.n	800344e <_printf_float+0x242>
 80033f6:	e764      	b.n	80032c2 <_printf_float+0xb6>
 80033f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80033fc:	f240 80dd 	bls.w	80035ba <_printf_float+0x3ae>
 8003400:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003404:	2200      	movs	r2, #0
 8003406:	2300      	movs	r3, #0
 8003408:	f7fd fb3a 	bl	8000a80 <__aeabi_dcmpeq>
 800340c:	2800      	cmp	r0, #0
 800340e:	d033      	beq.n	8003478 <_printf_float+0x26c>
 8003410:	2301      	movs	r3, #1
 8003412:	4631      	mov	r1, r6
 8003414:	4628      	mov	r0, r5
 8003416:	4a35      	ldr	r2, [pc, #212]	; (80034ec <_printf_float+0x2e0>)
 8003418:	47b8      	blx	r7
 800341a:	3001      	adds	r0, #1
 800341c:	f43f af51 	beq.w	80032c2 <_printf_float+0xb6>
 8003420:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003424:	429a      	cmp	r2, r3
 8003426:	db02      	blt.n	800342e <_printf_float+0x222>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	07d8      	lsls	r0, r3, #31
 800342c:	d50f      	bpl.n	800344e <_printf_float+0x242>
 800342e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003432:	4631      	mov	r1, r6
 8003434:	4628      	mov	r0, r5
 8003436:	47b8      	blx	r7
 8003438:	3001      	adds	r0, #1
 800343a:	f43f af42 	beq.w	80032c2 <_printf_float+0xb6>
 800343e:	f04f 0800 	mov.w	r8, #0
 8003442:	f104 091a 	add.w	r9, r4, #26
 8003446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003448:	3b01      	subs	r3, #1
 800344a:	4543      	cmp	r3, r8
 800344c:	dc09      	bgt.n	8003462 <_printf_float+0x256>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	079b      	lsls	r3, r3, #30
 8003452:	f100 8102 	bmi.w	800365a <_printf_float+0x44e>
 8003456:	68e0      	ldr	r0, [r4, #12]
 8003458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800345a:	4298      	cmp	r0, r3
 800345c:	bfb8      	it	lt
 800345e:	4618      	movlt	r0, r3
 8003460:	e731      	b.n	80032c6 <_printf_float+0xba>
 8003462:	2301      	movs	r3, #1
 8003464:	464a      	mov	r2, r9
 8003466:	4631      	mov	r1, r6
 8003468:	4628      	mov	r0, r5
 800346a:	47b8      	blx	r7
 800346c:	3001      	adds	r0, #1
 800346e:	f43f af28 	beq.w	80032c2 <_printf_float+0xb6>
 8003472:	f108 0801 	add.w	r8, r8, #1
 8003476:	e7e6      	b.n	8003446 <_printf_float+0x23a>
 8003478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800347a:	2b00      	cmp	r3, #0
 800347c:	dc38      	bgt.n	80034f0 <_printf_float+0x2e4>
 800347e:	2301      	movs	r3, #1
 8003480:	4631      	mov	r1, r6
 8003482:	4628      	mov	r0, r5
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <_printf_float+0x2e0>)
 8003486:	47b8      	blx	r7
 8003488:	3001      	adds	r0, #1
 800348a:	f43f af1a 	beq.w	80032c2 <_printf_float+0xb6>
 800348e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003492:	4313      	orrs	r3, r2
 8003494:	d102      	bne.n	800349c <_printf_float+0x290>
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	07d9      	lsls	r1, r3, #31
 800349a:	d5d8      	bpl.n	800344e <_printf_float+0x242>
 800349c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034a0:	4631      	mov	r1, r6
 80034a2:	4628      	mov	r0, r5
 80034a4:	47b8      	blx	r7
 80034a6:	3001      	adds	r0, #1
 80034a8:	f43f af0b 	beq.w	80032c2 <_printf_float+0xb6>
 80034ac:	f04f 0900 	mov.w	r9, #0
 80034b0:	f104 0a1a 	add.w	sl, r4, #26
 80034b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034b6:	425b      	negs	r3, r3
 80034b8:	454b      	cmp	r3, r9
 80034ba:	dc01      	bgt.n	80034c0 <_printf_float+0x2b4>
 80034bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034be:	e794      	b.n	80033ea <_printf_float+0x1de>
 80034c0:	2301      	movs	r3, #1
 80034c2:	4652      	mov	r2, sl
 80034c4:	4631      	mov	r1, r6
 80034c6:	4628      	mov	r0, r5
 80034c8:	47b8      	blx	r7
 80034ca:	3001      	adds	r0, #1
 80034cc:	f43f aef9 	beq.w	80032c2 <_printf_float+0xb6>
 80034d0:	f109 0901 	add.w	r9, r9, #1
 80034d4:	e7ee      	b.n	80034b4 <_printf_float+0x2a8>
 80034d6:	bf00      	nop
 80034d8:	7fefffff 	.word	0x7fefffff
 80034dc:	08007a68 	.word	0x08007a68
 80034e0:	08007a6c 	.word	0x08007a6c
 80034e4:	08007a74 	.word	0x08007a74
 80034e8:	08007a70 	.word	0x08007a70
 80034ec:	08007a78 	.word	0x08007a78
 80034f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034f4:	429a      	cmp	r2, r3
 80034f6:	bfa8      	it	ge
 80034f8:	461a      	movge	r2, r3
 80034fa:	2a00      	cmp	r2, #0
 80034fc:	4691      	mov	r9, r2
 80034fe:	dc37      	bgt.n	8003570 <_printf_float+0x364>
 8003500:	f04f 0b00 	mov.w	fp, #0
 8003504:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003508:	f104 021a 	add.w	r2, r4, #26
 800350c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003510:	ebaa 0309 	sub.w	r3, sl, r9
 8003514:	455b      	cmp	r3, fp
 8003516:	dc33      	bgt.n	8003580 <_printf_float+0x374>
 8003518:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800351c:	429a      	cmp	r2, r3
 800351e:	db3b      	blt.n	8003598 <_printf_float+0x38c>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	07da      	lsls	r2, r3, #31
 8003524:	d438      	bmi.n	8003598 <_printf_float+0x38c>
 8003526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003528:	990d      	ldr	r1, [sp, #52]	; 0x34
 800352a:	eba3 020a 	sub.w	r2, r3, sl
 800352e:	eba3 0901 	sub.w	r9, r3, r1
 8003532:	4591      	cmp	r9, r2
 8003534:	bfa8      	it	ge
 8003536:	4691      	movge	r9, r2
 8003538:	f1b9 0f00 	cmp.w	r9, #0
 800353c:	dc34      	bgt.n	80035a8 <_printf_float+0x39c>
 800353e:	f04f 0800 	mov.w	r8, #0
 8003542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003546:	f104 0a1a 	add.w	sl, r4, #26
 800354a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	eba3 0309 	sub.w	r3, r3, r9
 8003554:	4543      	cmp	r3, r8
 8003556:	f77f af7a 	ble.w	800344e <_printf_float+0x242>
 800355a:	2301      	movs	r3, #1
 800355c:	4652      	mov	r2, sl
 800355e:	4631      	mov	r1, r6
 8003560:	4628      	mov	r0, r5
 8003562:	47b8      	blx	r7
 8003564:	3001      	adds	r0, #1
 8003566:	f43f aeac 	beq.w	80032c2 <_printf_float+0xb6>
 800356a:	f108 0801 	add.w	r8, r8, #1
 800356e:	e7ec      	b.n	800354a <_printf_float+0x33e>
 8003570:	4613      	mov	r3, r2
 8003572:	4631      	mov	r1, r6
 8003574:	4642      	mov	r2, r8
 8003576:	4628      	mov	r0, r5
 8003578:	47b8      	blx	r7
 800357a:	3001      	adds	r0, #1
 800357c:	d1c0      	bne.n	8003500 <_printf_float+0x2f4>
 800357e:	e6a0      	b.n	80032c2 <_printf_float+0xb6>
 8003580:	2301      	movs	r3, #1
 8003582:	4631      	mov	r1, r6
 8003584:	4628      	mov	r0, r5
 8003586:	920b      	str	r2, [sp, #44]	; 0x2c
 8003588:	47b8      	blx	r7
 800358a:	3001      	adds	r0, #1
 800358c:	f43f ae99 	beq.w	80032c2 <_printf_float+0xb6>
 8003590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003592:	f10b 0b01 	add.w	fp, fp, #1
 8003596:	e7b9      	b.n	800350c <_printf_float+0x300>
 8003598:	4631      	mov	r1, r6
 800359a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800359e:	4628      	mov	r0, r5
 80035a0:	47b8      	blx	r7
 80035a2:	3001      	adds	r0, #1
 80035a4:	d1bf      	bne.n	8003526 <_printf_float+0x31a>
 80035a6:	e68c      	b.n	80032c2 <_printf_float+0xb6>
 80035a8:	464b      	mov	r3, r9
 80035aa:	4631      	mov	r1, r6
 80035ac:	4628      	mov	r0, r5
 80035ae:	eb08 020a 	add.w	r2, r8, sl
 80035b2:	47b8      	blx	r7
 80035b4:	3001      	adds	r0, #1
 80035b6:	d1c2      	bne.n	800353e <_printf_float+0x332>
 80035b8:	e683      	b.n	80032c2 <_printf_float+0xb6>
 80035ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035bc:	2a01      	cmp	r2, #1
 80035be:	dc01      	bgt.n	80035c4 <_printf_float+0x3b8>
 80035c0:	07db      	lsls	r3, r3, #31
 80035c2:	d537      	bpl.n	8003634 <_printf_float+0x428>
 80035c4:	2301      	movs	r3, #1
 80035c6:	4642      	mov	r2, r8
 80035c8:	4631      	mov	r1, r6
 80035ca:	4628      	mov	r0, r5
 80035cc:	47b8      	blx	r7
 80035ce:	3001      	adds	r0, #1
 80035d0:	f43f ae77 	beq.w	80032c2 <_printf_float+0xb6>
 80035d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035d8:	4631      	mov	r1, r6
 80035da:	4628      	mov	r0, r5
 80035dc:	47b8      	blx	r7
 80035de:	3001      	adds	r0, #1
 80035e0:	f43f ae6f 	beq.w	80032c2 <_printf_float+0xb6>
 80035e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035e8:	2200      	movs	r2, #0
 80035ea:	2300      	movs	r3, #0
 80035ec:	f7fd fa48 	bl	8000a80 <__aeabi_dcmpeq>
 80035f0:	b9d8      	cbnz	r0, 800362a <_printf_float+0x41e>
 80035f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035f4:	f108 0201 	add.w	r2, r8, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	4631      	mov	r1, r6
 80035fc:	4628      	mov	r0, r5
 80035fe:	47b8      	blx	r7
 8003600:	3001      	adds	r0, #1
 8003602:	d10e      	bne.n	8003622 <_printf_float+0x416>
 8003604:	e65d      	b.n	80032c2 <_printf_float+0xb6>
 8003606:	2301      	movs	r3, #1
 8003608:	464a      	mov	r2, r9
 800360a:	4631      	mov	r1, r6
 800360c:	4628      	mov	r0, r5
 800360e:	47b8      	blx	r7
 8003610:	3001      	adds	r0, #1
 8003612:	f43f ae56 	beq.w	80032c2 <_printf_float+0xb6>
 8003616:	f108 0801 	add.w	r8, r8, #1
 800361a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800361c:	3b01      	subs	r3, #1
 800361e:	4543      	cmp	r3, r8
 8003620:	dcf1      	bgt.n	8003606 <_printf_float+0x3fa>
 8003622:	4653      	mov	r3, sl
 8003624:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003628:	e6e0      	b.n	80033ec <_printf_float+0x1e0>
 800362a:	f04f 0800 	mov.w	r8, #0
 800362e:	f104 091a 	add.w	r9, r4, #26
 8003632:	e7f2      	b.n	800361a <_printf_float+0x40e>
 8003634:	2301      	movs	r3, #1
 8003636:	4642      	mov	r2, r8
 8003638:	e7df      	b.n	80035fa <_printf_float+0x3ee>
 800363a:	2301      	movs	r3, #1
 800363c:	464a      	mov	r2, r9
 800363e:	4631      	mov	r1, r6
 8003640:	4628      	mov	r0, r5
 8003642:	47b8      	blx	r7
 8003644:	3001      	adds	r0, #1
 8003646:	f43f ae3c 	beq.w	80032c2 <_printf_float+0xb6>
 800364a:	f108 0801 	add.w	r8, r8, #1
 800364e:	68e3      	ldr	r3, [r4, #12]
 8003650:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003652:	1a5b      	subs	r3, r3, r1
 8003654:	4543      	cmp	r3, r8
 8003656:	dcf0      	bgt.n	800363a <_printf_float+0x42e>
 8003658:	e6fd      	b.n	8003456 <_printf_float+0x24a>
 800365a:	f04f 0800 	mov.w	r8, #0
 800365e:	f104 0919 	add.w	r9, r4, #25
 8003662:	e7f4      	b.n	800364e <_printf_float+0x442>

08003664 <_printf_common>:
 8003664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003668:	4616      	mov	r6, r2
 800366a:	4699      	mov	r9, r3
 800366c:	688a      	ldr	r2, [r1, #8]
 800366e:	690b      	ldr	r3, [r1, #16]
 8003670:	4607      	mov	r7, r0
 8003672:	4293      	cmp	r3, r2
 8003674:	bfb8      	it	lt
 8003676:	4613      	movlt	r3, r2
 8003678:	6033      	str	r3, [r6, #0]
 800367a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800367e:	460c      	mov	r4, r1
 8003680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003684:	b10a      	cbz	r2, 800368a <_printf_common+0x26>
 8003686:	3301      	adds	r3, #1
 8003688:	6033      	str	r3, [r6, #0]
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	0699      	lsls	r1, r3, #26
 800368e:	bf42      	ittt	mi
 8003690:	6833      	ldrmi	r3, [r6, #0]
 8003692:	3302      	addmi	r3, #2
 8003694:	6033      	strmi	r3, [r6, #0]
 8003696:	6825      	ldr	r5, [r4, #0]
 8003698:	f015 0506 	ands.w	r5, r5, #6
 800369c:	d106      	bne.n	80036ac <_printf_common+0x48>
 800369e:	f104 0a19 	add.w	sl, r4, #25
 80036a2:	68e3      	ldr	r3, [r4, #12]
 80036a4:	6832      	ldr	r2, [r6, #0]
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	42ab      	cmp	r3, r5
 80036aa:	dc28      	bgt.n	80036fe <_printf_common+0x9a>
 80036ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036b0:	1e13      	subs	r3, r2, #0
 80036b2:	6822      	ldr	r2, [r4, #0]
 80036b4:	bf18      	it	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	0692      	lsls	r2, r2, #26
 80036ba:	d42d      	bmi.n	8003718 <_printf_common+0xb4>
 80036bc:	4649      	mov	r1, r9
 80036be:	4638      	mov	r0, r7
 80036c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036c4:	47c0      	blx	r8
 80036c6:	3001      	adds	r0, #1
 80036c8:	d020      	beq.n	800370c <_printf_common+0xa8>
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	68e5      	ldr	r5, [r4, #12]
 80036ce:	f003 0306 	and.w	r3, r3, #6
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf18      	it	ne
 80036d6:	2500      	movne	r5, #0
 80036d8:	6832      	ldr	r2, [r6, #0]
 80036da:	f04f 0600 	mov.w	r6, #0
 80036de:	68a3      	ldr	r3, [r4, #8]
 80036e0:	bf08      	it	eq
 80036e2:	1aad      	subeq	r5, r5, r2
 80036e4:	6922      	ldr	r2, [r4, #16]
 80036e6:	bf08      	it	eq
 80036e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036ec:	4293      	cmp	r3, r2
 80036ee:	bfc4      	itt	gt
 80036f0:	1a9b      	subgt	r3, r3, r2
 80036f2:	18ed      	addgt	r5, r5, r3
 80036f4:	341a      	adds	r4, #26
 80036f6:	42b5      	cmp	r5, r6
 80036f8:	d11a      	bne.n	8003730 <_printf_common+0xcc>
 80036fa:	2000      	movs	r0, #0
 80036fc:	e008      	b.n	8003710 <_printf_common+0xac>
 80036fe:	2301      	movs	r3, #1
 8003700:	4652      	mov	r2, sl
 8003702:	4649      	mov	r1, r9
 8003704:	4638      	mov	r0, r7
 8003706:	47c0      	blx	r8
 8003708:	3001      	adds	r0, #1
 800370a:	d103      	bne.n	8003714 <_printf_common+0xb0>
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003714:	3501      	adds	r5, #1
 8003716:	e7c4      	b.n	80036a2 <_printf_common+0x3e>
 8003718:	2030      	movs	r0, #48	; 0x30
 800371a:	18e1      	adds	r1, r4, r3
 800371c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003726:	4422      	add	r2, r4
 8003728:	3302      	adds	r3, #2
 800372a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800372e:	e7c5      	b.n	80036bc <_printf_common+0x58>
 8003730:	2301      	movs	r3, #1
 8003732:	4622      	mov	r2, r4
 8003734:	4649      	mov	r1, r9
 8003736:	4638      	mov	r0, r7
 8003738:	47c0      	blx	r8
 800373a:	3001      	adds	r0, #1
 800373c:	d0e6      	beq.n	800370c <_printf_common+0xa8>
 800373e:	3601      	adds	r6, #1
 8003740:	e7d9      	b.n	80036f6 <_printf_common+0x92>
	...

08003744 <_printf_i>:
 8003744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003748:	7e0f      	ldrb	r7, [r1, #24]
 800374a:	4691      	mov	r9, r2
 800374c:	2f78      	cmp	r7, #120	; 0x78
 800374e:	4680      	mov	r8, r0
 8003750:	460c      	mov	r4, r1
 8003752:	469a      	mov	sl, r3
 8003754:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003756:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800375a:	d807      	bhi.n	800376c <_printf_i+0x28>
 800375c:	2f62      	cmp	r7, #98	; 0x62
 800375e:	d80a      	bhi.n	8003776 <_printf_i+0x32>
 8003760:	2f00      	cmp	r7, #0
 8003762:	f000 80d9 	beq.w	8003918 <_printf_i+0x1d4>
 8003766:	2f58      	cmp	r7, #88	; 0x58
 8003768:	f000 80a4 	beq.w	80038b4 <_printf_i+0x170>
 800376c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003774:	e03a      	b.n	80037ec <_printf_i+0xa8>
 8003776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800377a:	2b15      	cmp	r3, #21
 800377c:	d8f6      	bhi.n	800376c <_printf_i+0x28>
 800377e:	a101      	add	r1, pc, #4	; (adr r1, 8003784 <_printf_i+0x40>)
 8003780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003784:	080037dd 	.word	0x080037dd
 8003788:	080037f1 	.word	0x080037f1
 800378c:	0800376d 	.word	0x0800376d
 8003790:	0800376d 	.word	0x0800376d
 8003794:	0800376d 	.word	0x0800376d
 8003798:	0800376d 	.word	0x0800376d
 800379c:	080037f1 	.word	0x080037f1
 80037a0:	0800376d 	.word	0x0800376d
 80037a4:	0800376d 	.word	0x0800376d
 80037a8:	0800376d 	.word	0x0800376d
 80037ac:	0800376d 	.word	0x0800376d
 80037b0:	080038ff 	.word	0x080038ff
 80037b4:	08003821 	.word	0x08003821
 80037b8:	080038e1 	.word	0x080038e1
 80037bc:	0800376d 	.word	0x0800376d
 80037c0:	0800376d 	.word	0x0800376d
 80037c4:	08003921 	.word	0x08003921
 80037c8:	0800376d 	.word	0x0800376d
 80037cc:	08003821 	.word	0x08003821
 80037d0:	0800376d 	.word	0x0800376d
 80037d4:	0800376d 	.word	0x0800376d
 80037d8:	080038e9 	.word	0x080038e9
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	1d1a      	adds	r2, r3, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	602a      	str	r2, [r5, #0]
 80037e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0a4      	b.n	800393a <_printf_i+0x1f6>
 80037f0:	6820      	ldr	r0, [r4, #0]
 80037f2:	6829      	ldr	r1, [r5, #0]
 80037f4:	0606      	lsls	r6, r0, #24
 80037f6:	f101 0304 	add.w	r3, r1, #4
 80037fa:	d50a      	bpl.n	8003812 <_printf_i+0xce>
 80037fc:	680e      	ldr	r6, [r1, #0]
 80037fe:	602b      	str	r3, [r5, #0]
 8003800:	2e00      	cmp	r6, #0
 8003802:	da03      	bge.n	800380c <_printf_i+0xc8>
 8003804:	232d      	movs	r3, #45	; 0x2d
 8003806:	4276      	negs	r6, r6
 8003808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800380c:	230a      	movs	r3, #10
 800380e:	485e      	ldr	r0, [pc, #376]	; (8003988 <_printf_i+0x244>)
 8003810:	e019      	b.n	8003846 <_printf_i+0x102>
 8003812:	680e      	ldr	r6, [r1, #0]
 8003814:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	bf18      	it	ne
 800381c:	b236      	sxthne	r6, r6
 800381e:	e7ef      	b.n	8003800 <_printf_i+0xbc>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	1d19      	adds	r1, r3, #4
 8003826:	6029      	str	r1, [r5, #0]
 8003828:	0601      	lsls	r1, r0, #24
 800382a:	d501      	bpl.n	8003830 <_printf_i+0xec>
 800382c:	681e      	ldr	r6, [r3, #0]
 800382e:	e002      	b.n	8003836 <_printf_i+0xf2>
 8003830:	0646      	lsls	r6, r0, #25
 8003832:	d5fb      	bpl.n	800382c <_printf_i+0xe8>
 8003834:	881e      	ldrh	r6, [r3, #0]
 8003836:	2f6f      	cmp	r7, #111	; 0x6f
 8003838:	bf0c      	ite	eq
 800383a:	2308      	moveq	r3, #8
 800383c:	230a      	movne	r3, #10
 800383e:	4852      	ldr	r0, [pc, #328]	; (8003988 <_printf_i+0x244>)
 8003840:	2100      	movs	r1, #0
 8003842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003846:	6865      	ldr	r5, [r4, #4]
 8003848:	2d00      	cmp	r5, #0
 800384a:	bfa8      	it	ge
 800384c:	6821      	ldrge	r1, [r4, #0]
 800384e:	60a5      	str	r5, [r4, #8]
 8003850:	bfa4      	itt	ge
 8003852:	f021 0104 	bicge.w	r1, r1, #4
 8003856:	6021      	strge	r1, [r4, #0]
 8003858:	b90e      	cbnz	r6, 800385e <_printf_i+0x11a>
 800385a:	2d00      	cmp	r5, #0
 800385c:	d04d      	beq.n	80038fa <_printf_i+0x1b6>
 800385e:	4615      	mov	r5, r2
 8003860:	fbb6 f1f3 	udiv	r1, r6, r3
 8003864:	fb03 6711 	mls	r7, r3, r1, r6
 8003868:	5dc7      	ldrb	r7, [r0, r7]
 800386a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800386e:	4637      	mov	r7, r6
 8003870:	42bb      	cmp	r3, r7
 8003872:	460e      	mov	r6, r1
 8003874:	d9f4      	bls.n	8003860 <_printf_i+0x11c>
 8003876:	2b08      	cmp	r3, #8
 8003878:	d10b      	bne.n	8003892 <_printf_i+0x14e>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	07de      	lsls	r6, r3, #31
 800387e:	d508      	bpl.n	8003892 <_printf_i+0x14e>
 8003880:	6923      	ldr	r3, [r4, #16]
 8003882:	6861      	ldr	r1, [r4, #4]
 8003884:	4299      	cmp	r1, r3
 8003886:	bfde      	ittt	le
 8003888:	2330      	movle	r3, #48	; 0x30
 800388a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800388e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003892:	1b52      	subs	r2, r2, r5
 8003894:	6122      	str	r2, [r4, #16]
 8003896:	464b      	mov	r3, r9
 8003898:	4621      	mov	r1, r4
 800389a:	4640      	mov	r0, r8
 800389c:	f8cd a000 	str.w	sl, [sp]
 80038a0:	aa03      	add	r2, sp, #12
 80038a2:	f7ff fedf 	bl	8003664 <_printf_common>
 80038a6:	3001      	adds	r0, #1
 80038a8:	d14c      	bne.n	8003944 <_printf_i+0x200>
 80038aa:	f04f 30ff 	mov.w	r0, #4294967295
 80038ae:	b004      	add	sp, #16
 80038b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b4:	4834      	ldr	r0, [pc, #208]	; (8003988 <_printf_i+0x244>)
 80038b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038ba:	6829      	ldr	r1, [r5, #0]
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	f851 6b04 	ldr.w	r6, [r1], #4
 80038c2:	6029      	str	r1, [r5, #0]
 80038c4:	061d      	lsls	r5, r3, #24
 80038c6:	d514      	bpl.n	80038f2 <_printf_i+0x1ae>
 80038c8:	07df      	lsls	r7, r3, #31
 80038ca:	bf44      	itt	mi
 80038cc:	f043 0320 	orrmi.w	r3, r3, #32
 80038d0:	6023      	strmi	r3, [r4, #0]
 80038d2:	b91e      	cbnz	r6, 80038dc <_printf_i+0x198>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	f023 0320 	bic.w	r3, r3, #32
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	2310      	movs	r3, #16
 80038de:	e7af      	b.n	8003840 <_printf_i+0xfc>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	f043 0320 	orr.w	r3, r3, #32
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	2378      	movs	r3, #120	; 0x78
 80038ea:	4828      	ldr	r0, [pc, #160]	; (800398c <_printf_i+0x248>)
 80038ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038f0:	e7e3      	b.n	80038ba <_printf_i+0x176>
 80038f2:	0659      	lsls	r1, r3, #25
 80038f4:	bf48      	it	mi
 80038f6:	b2b6      	uxthmi	r6, r6
 80038f8:	e7e6      	b.n	80038c8 <_printf_i+0x184>
 80038fa:	4615      	mov	r5, r2
 80038fc:	e7bb      	b.n	8003876 <_printf_i+0x132>
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	6826      	ldr	r6, [r4, #0]
 8003902:	1d18      	adds	r0, r3, #4
 8003904:	6961      	ldr	r1, [r4, #20]
 8003906:	6028      	str	r0, [r5, #0]
 8003908:	0635      	lsls	r5, r6, #24
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	d501      	bpl.n	8003912 <_printf_i+0x1ce>
 800390e:	6019      	str	r1, [r3, #0]
 8003910:	e002      	b.n	8003918 <_printf_i+0x1d4>
 8003912:	0670      	lsls	r0, r6, #25
 8003914:	d5fb      	bpl.n	800390e <_printf_i+0x1ca>
 8003916:	8019      	strh	r1, [r3, #0]
 8003918:	2300      	movs	r3, #0
 800391a:	4615      	mov	r5, r2
 800391c:	6123      	str	r3, [r4, #16]
 800391e:	e7ba      	b.n	8003896 <_printf_i+0x152>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	2100      	movs	r1, #0
 8003924:	1d1a      	adds	r2, r3, #4
 8003926:	602a      	str	r2, [r5, #0]
 8003928:	681d      	ldr	r5, [r3, #0]
 800392a:	6862      	ldr	r2, [r4, #4]
 800392c:	4628      	mov	r0, r5
 800392e:	f002 fe41 	bl	80065b4 <memchr>
 8003932:	b108      	cbz	r0, 8003938 <_printf_i+0x1f4>
 8003934:	1b40      	subs	r0, r0, r5
 8003936:	6060      	str	r0, [r4, #4]
 8003938:	6863      	ldr	r3, [r4, #4]
 800393a:	6123      	str	r3, [r4, #16]
 800393c:	2300      	movs	r3, #0
 800393e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003942:	e7a8      	b.n	8003896 <_printf_i+0x152>
 8003944:	462a      	mov	r2, r5
 8003946:	4649      	mov	r1, r9
 8003948:	4640      	mov	r0, r8
 800394a:	6923      	ldr	r3, [r4, #16]
 800394c:	47d0      	blx	sl
 800394e:	3001      	adds	r0, #1
 8003950:	d0ab      	beq.n	80038aa <_printf_i+0x166>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	079b      	lsls	r3, r3, #30
 8003956:	d413      	bmi.n	8003980 <_printf_i+0x23c>
 8003958:	68e0      	ldr	r0, [r4, #12]
 800395a:	9b03      	ldr	r3, [sp, #12]
 800395c:	4298      	cmp	r0, r3
 800395e:	bfb8      	it	lt
 8003960:	4618      	movlt	r0, r3
 8003962:	e7a4      	b.n	80038ae <_printf_i+0x16a>
 8003964:	2301      	movs	r3, #1
 8003966:	4632      	mov	r2, r6
 8003968:	4649      	mov	r1, r9
 800396a:	4640      	mov	r0, r8
 800396c:	47d0      	blx	sl
 800396e:	3001      	adds	r0, #1
 8003970:	d09b      	beq.n	80038aa <_printf_i+0x166>
 8003972:	3501      	adds	r5, #1
 8003974:	68e3      	ldr	r3, [r4, #12]
 8003976:	9903      	ldr	r1, [sp, #12]
 8003978:	1a5b      	subs	r3, r3, r1
 800397a:	42ab      	cmp	r3, r5
 800397c:	dcf2      	bgt.n	8003964 <_printf_i+0x220>
 800397e:	e7eb      	b.n	8003958 <_printf_i+0x214>
 8003980:	2500      	movs	r5, #0
 8003982:	f104 0619 	add.w	r6, r4, #25
 8003986:	e7f5      	b.n	8003974 <_printf_i+0x230>
 8003988:	08007a7a 	.word	0x08007a7a
 800398c:	08007a8b 	.word	0x08007a8b

08003990 <_scanf_float>:
 8003990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003994:	b087      	sub	sp, #28
 8003996:	9303      	str	r3, [sp, #12]
 8003998:	688b      	ldr	r3, [r1, #8]
 800399a:	4617      	mov	r7, r2
 800399c:	1e5a      	subs	r2, r3, #1
 800399e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80039a2:	bf85      	ittet	hi
 80039a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80039a8:	195b      	addhi	r3, r3, r5
 80039aa:	2300      	movls	r3, #0
 80039ac:	9302      	strhi	r3, [sp, #8]
 80039ae:	bf88      	it	hi
 80039b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80039b4:	468b      	mov	fp, r1
 80039b6:	f04f 0500 	mov.w	r5, #0
 80039ba:	bf8c      	ite	hi
 80039bc:	608b      	strhi	r3, [r1, #8]
 80039be:	9302      	strls	r3, [sp, #8]
 80039c0:	680b      	ldr	r3, [r1, #0]
 80039c2:	4680      	mov	r8, r0
 80039c4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80039c8:	f84b 3b1c 	str.w	r3, [fp], #28
 80039cc:	460c      	mov	r4, r1
 80039ce:	465e      	mov	r6, fp
 80039d0:	46aa      	mov	sl, r5
 80039d2:	46a9      	mov	r9, r5
 80039d4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80039d8:	9501      	str	r5, [sp, #4]
 80039da:	68a2      	ldr	r2, [r4, #8]
 80039dc:	b152      	cbz	r2, 80039f4 <_scanf_float+0x64>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b4e      	cmp	r3, #78	; 0x4e
 80039e4:	d864      	bhi.n	8003ab0 <_scanf_float+0x120>
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d83c      	bhi.n	8003a64 <_scanf_float+0xd4>
 80039ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80039ee:	b2c8      	uxtb	r0, r1
 80039f0:	280e      	cmp	r0, #14
 80039f2:	d93a      	bls.n	8003a6a <_scanf_float+0xda>
 80039f4:	f1b9 0f00 	cmp.w	r9, #0
 80039f8:	d003      	beq.n	8003a02 <_scanf_float+0x72>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a06:	f1ba 0f01 	cmp.w	sl, #1
 8003a0a:	f200 8113 	bhi.w	8003c34 <_scanf_float+0x2a4>
 8003a0e:	455e      	cmp	r6, fp
 8003a10:	f200 8105 	bhi.w	8003c1e <_scanf_float+0x28e>
 8003a14:	2501      	movs	r5, #1
 8003a16:	4628      	mov	r0, r5
 8003a18:	b007      	add	sp, #28
 8003a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003a22:	2a0d      	cmp	r2, #13
 8003a24:	d8e6      	bhi.n	80039f4 <_scanf_float+0x64>
 8003a26:	a101      	add	r1, pc, #4	; (adr r1, 8003a2c <_scanf_float+0x9c>)
 8003a28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a2c:	08003b6b 	.word	0x08003b6b
 8003a30:	080039f5 	.word	0x080039f5
 8003a34:	080039f5 	.word	0x080039f5
 8003a38:	080039f5 	.word	0x080039f5
 8003a3c:	08003bcb 	.word	0x08003bcb
 8003a40:	08003ba3 	.word	0x08003ba3
 8003a44:	080039f5 	.word	0x080039f5
 8003a48:	080039f5 	.word	0x080039f5
 8003a4c:	08003b79 	.word	0x08003b79
 8003a50:	080039f5 	.word	0x080039f5
 8003a54:	080039f5 	.word	0x080039f5
 8003a58:	080039f5 	.word	0x080039f5
 8003a5c:	080039f5 	.word	0x080039f5
 8003a60:	08003b31 	.word	0x08003b31
 8003a64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003a68:	e7db      	b.n	8003a22 <_scanf_float+0x92>
 8003a6a:	290e      	cmp	r1, #14
 8003a6c:	d8c2      	bhi.n	80039f4 <_scanf_float+0x64>
 8003a6e:	a001      	add	r0, pc, #4	; (adr r0, 8003a74 <_scanf_float+0xe4>)
 8003a70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003a74:	08003b23 	.word	0x08003b23
 8003a78:	080039f5 	.word	0x080039f5
 8003a7c:	08003b23 	.word	0x08003b23
 8003a80:	08003bb7 	.word	0x08003bb7
 8003a84:	080039f5 	.word	0x080039f5
 8003a88:	08003ad1 	.word	0x08003ad1
 8003a8c:	08003b0d 	.word	0x08003b0d
 8003a90:	08003b0d 	.word	0x08003b0d
 8003a94:	08003b0d 	.word	0x08003b0d
 8003a98:	08003b0d 	.word	0x08003b0d
 8003a9c:	08003b0d 	.word	0x08003b0d
 8003aa0:	08003b0d 	.word	0x08003b0d
 8003aa4:	08003b0d 	.word	0x08003b0d
 8003aa8:	08003b0d 	.word	0x08003b0d
 8003aac:	08003b0d 	.word	0x08003b0d
 8003ab0:	2b6e      	cmp	r3, #110	; 0x6e
 8003ab2:	d809      	bhi.n	8003ac8 <_scanf_float+0x138>
 8003ab4:	2b60      	cmp	r3, #96	; 0x60
 8003ab6:	d8b2      	bhi.n	8003a1e <_scanf_float+0x8e>
 8003ab8:	2b54      	cmp	r3, #84	; 0x54
 8003aba:	d077      	beq.n	8003bac <_scanf_float+0x21c>
 8003abc:	2b59      	cmp	r3, #89	; 0x59
 8003abe:	d199      	bne.n	80039f4 <_scanf_float+0x64>
 8003ac0:	2d07      	cmp	r5, #7
 8003ac2:	d197      	bne.n	80039f4 <_scanf_float+0x64>
 8003ac4:	2508      	movs	r5, #8
 8003ac6:	e029      	b.n	8003b1c <_scanf_float+0x18c>
 8003ac8:	2b74      	cmp	r3, #116	; 0x74
 8003aca:	d06f      	beq.n	8003bac <_scanf_float+0x21c>
 8003acc:	2b79      	cmp	r3, #121	; 0x79
 8003ace:	e7f6      	b.n	8003abe <_scanf_float+0x12e>
 8003ad0:	6821      	ldr	r1, [r4, #0]
 8003ad2:	05c8      	lsls	r0, r1, #23
 8003ad4:	d51a      	bpl.n	8003b0c <_scanf_float+0x17c>
 8003ad6:	9b02      	ldr	r3, [sp, #8]
 8003ad8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003adc:	6021      	str	r1, [r4, #0]
 8003ade:	f109 0901 	add.w	r9, r9, #1
 8003ae2:	b11b      	cbz	r3, 8003aec <_scanf_float+0x15c>
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	3201      	adds	r2, #1
 8003ae8:	9302      	str	r3, [sp, #8]
 8003aea:	60a2      	str	r2, [r4, #8]
 8003aec:	68a3      	ldr	r3, [r4, #8]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	60a3      	str	r3, [r4, #8]
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	3301      	adds	r3, #1
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	f340 8084 	ble.w	8003c0c <_scanf_float+0x27c>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	3301      	adds	r3, #1
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	e766      	b.n	80039da <_scanf_float+0x4a>
 8003b0c:	eb1a 0f05 	cmn.w	sl, r5
 8003b10:	f47f af70 	bne.w	80039f4 <_scanf_float+0x64>
 8003b14:	6822      	ldr	r2, [r4, #0]
 8003b16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003b1a:	6022      	str	r2, [r4, #0]
 8003b1c:	f806 3b01 	strb.w	r3, [r6], #1
 8003b20:	e7e4      	b.n	8003aec <_scanf_float+0x15c>
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	0610      	lsls	r0, r2, #24
 8003b26:	f57f af65 	bpl.w	80039f4 <_scanf_float+0x64>
 8003b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b2e:	e7f4      	b.n	8003b1a <_scanf_float+0x18a>
 8003b30:	f1ba 0f00 	cmp.w	sl, #0
 8003b34:	d10e      	bne.n	8003b54 <_scanf_float+0x1c4>
 8003b36:	f1b9 0f00 	cmp.w	r9, #0
 8003b3a:	d10e      	bne.n	8003b5a <_scanf_float+0x1ca>
 8003b3c:	6822      	ldr	r2, [r4, #0]
 8003b3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003b42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003b46:	d108      	bne.n	8003b5a <_scanf_float+0x1ca>
 8003b48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003b4c:	f04f 0a01 	mov.w	sl, #1
 8003b50:	6022      	str	r2, [r4, #0]
 8003b52:	e7e3      	b.n	8003b1c <_scanf_float+0x18c>
 8003b54:	f1ba 0f02 	cmp.w	sl, #2
 8003b58:	d055      	beq.n	8003c06 <_scanf_float+0x276>
 8003b5a:	2d01      	cmp	r5, #1
 8003b5c:	d002      	beq.n	8003b64 <_scanf_float+0x1d4>
 8003b5e:	2d04      	cmp	r5, #4
 8003b60:	f47f af48 	bne.w	80039f4 <_scanf_float+0x64>
 8003b64:	3501      	adds	r5, #1
 8003b66:	b2ed      	uxtb	r5, r5
 8003b68:	e7d8      	b.n	8003b1c <_scanf_float+0x18c>
 8003b6a:	f1ba 0f01 	cmp.w	sl, #1
 8003b6e:	f47f af41 	bne.w	80039f4 <_scanf_float+0x64>
 8003b72:	f04f 0a02 	mov.w	sl, #2
 8003b76:	e7d1      	b.n	8003b1c <_scanf_float+0x18c>
 8003b78:	b97d      	cbnz	r5, 8003b9a <_scanf_float+0x20a>
 8003b7a:	f1b9 0f00 	cmp.w	r9, #0
 8003b7e:	f47f af3c 	bne.w	80039fa <_scanf_float+0x6a>
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003b88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003b8c:	f47f af39 	bne.w	8003a02 <_scanf_float+0x72>
 8003b90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003b94:	2501      	movs	r5, #1
 8003b96:	6022      	str	r2, [r4, #0]
 8003b98:	e7c0      	b.n	8003b1c <_scanf_float+0x18c>
 8003b9a:	2d03      	cmp	r5, #3
 8003b9c:	d0e2      	beq.n	8003b64 <_scanf_float+0x1d4>
 8003b9e:	2d05      	cmp	r5, #5
 8003ba0:	e7de      	b.n	8003b60 <_scanf_float+0x1d0>
 8003ba2:	2d02      	cmp	r5, #2
 8003ba4:	f47f af26 	bne.w	80039f4 <_scanf_float+0x64>
 8003ba8:	2503      	movs	r5, #3
 8003baa:	e7b7      	b.n	8003b1c <_scanf_float+0x18c>
 8003bac:	2d06      	cmp	r5, #6
 8003bae:	f47f af21 	bne.w	80039f4 <_scanf_float+0x64>
 8003bb2:	2507      	movs	r5, #7
 8003bb4:	e7b2      	b.n	8003b1c <_scanf_float+0x18c>
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	0591      	lsls	r1, r2, #22
 8003bba:	f57f af1b 	bpl.w	80039f4 <_scanf_float+0x64>
 8003bbe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003bc2:	6022      	str	r2, [r4, #0]
 8003bc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bc8:	e7a8      	b.n	8003b1c <_scanf_float+0x18c>
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003bd0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003bd4:	d006      	beq.n	8003be4 <_scanf_float+0x254>
 8003bd6:	0550      	lsls	r0, r2, #21
 8003bd8:	f57f af0c 	bpl.w	80039f4 <_scanf_float+0x64>
 8003bdc:	f1b9 0f00 	cmp.w	r9, #0
 8003be0:	f43f af0f 	beq.w	8003a02 <_scanf_float+0x72>
 8003be4:	0591      	lsls	r1, r2, #22
 8003be6:	bf58      	it	pl
 8003be8:	9901      	ldrpl	r1, [sp, #4]
 8003bea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003bee:	bf58      	it	pl
 8003bf0:	eba9 0101 	subpl.w	r1, r9, r1
 8003bf4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003bf8:	f04f 0900 	mov.w	r9, #0
 8003bfc:	bf58      	it	pl
 8003bfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c02:	6022      	str	r2, [r4, #0]
 8003c04:	e78a      	b.n	8003b1c <_scanf_float+0x18c>
 8003c06:	f04f 0a03 	mov.w	sl, #3
 8003c0a:	e787      	b.n	8003b1c <_scanf_float+0x18c>
 8003c0c:	4639      	mov	r1, r7
 8003c0e:	4640      	mov	r0, r8
 8003c10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c14:	4798      	blx	r3
 8003c16:	2800      	cmp	r0, #0
 8003c18:	f43f aedf 	beq.w	80039da <_scanf_float+0x4a>
 8003c1c:	e6ea      	b.n	80039f4 <_scanf_float+0x64>
 8003c1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c22:	463a      	mov	r2, r7
 8003c24:	4640      	mov	r0, r8
 8003c26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c2a:	4798      	blx	r3
 8003c2c:	6923      	ldr	r3, [r4, #16]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	6123      	str	r3, [r4, #16]
 8003c32:	e6ec      	b.n	8003a0e <_scanf_float+0x7e>
 8003c34:	1e6b      	subs	r3, r5, #1
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d825      	bhi.n	8003c86 <_scanf_float+0x2f6>
 8003c3a:	2d02      	cmp	r5, #2
 8003c3c:	d836      	bhi.n	8003cac <_scanf_float+0x31c>
 8003c3e:	455e      	cmp	r6, fp
 8003c40:	f67f aee8 	bls.w	8003a14 <_scanf_float+0x84>
 8003c44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c48:	463a      	mov	r2, r7
 8003c4a:	4640      	mov	r0, r8
 8003c4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c50:	4798      	blx	r3
 8003c52:	6923      	ldr	r3, [r4, #16]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	6123      	str	r3, [r4, #16]
 8003c58:	e7f1      	b.n	8003c3e <_scanf_float+0x2ae>
 8003c5a:	9802      	ldr	r0, [sp, #8]
 8003c5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003c64:	463a      	mov	r2, r7
 8003c66:	9002      	str	r0, [sp, #8]
 8003c68:	4640      	mov	r0, r8
 8003c6a:	4798      	blx	r3
 8003c6c:	6923      	ldr	r3, [r4, #16]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	6123      	str	r3, [r4, #16]
 8003c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c76:	fa5f fa8a 	uxtb.w	sl, sl
 8003c7a:	f1ba 0f02 	cmp.w	sl, #2
 8003c7e:	d1ec      	bne.n	8003c5a <_scanf_float+0x2ca>
 8003c80:	3d03      	subs	r5, #3
 8003c82:	b2ed      	uxtb	r5, r5
 8003c84:	1b76      	subs	r6, r6, r5
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	05da      	lsls	r2, r3, #23
 8003c8a:	d52f      	bpl.n	8003cec <_scanf_float+0x35c>
 8003c8c:	055b      	lsls	r3, r3, #21
 8003c8e:	d510      	bpl.n	8003cb2 <_scanf_float+0x322>
 8003c90:	455e      	cmp	r6, fp
 8003c92:	f67f aebf 	bls.w	8003a14 <_scanf_float+0x84>
 8003c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c9a:	463a      	mov	r2, r7
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ca2:	4798      	blx	r3
 8003ca4:	6923      	ldr	r3, [r4, #16]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	6123      	str	r3, [r4, #16]
 8003caa:	e7f1      	b.n	8003c90 <_scanf_float+0x300>
 8003cac:	46aa      	mov	sl, r5
 8003cae:	9602      	str	r6, [sp, #8]
 8003cb0:	e7df      	b.n	8003c72 <_scanf_float+0x2e2>
 8003cb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003cb6:	6923      	ldr	r3, [r4, #16]
 8003cb8:	2965      	cmp	r1, #101	; 0x65
 8003cba:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8003cc2:	6123      	str	r3, [r4, #16]
 8003cc4:	d00c      	beq.n	8003ce0 <_scanf_float+0x350>
 8003cc6:	2945      	cmp	r1, #69	; 0x45
 8003cc8:	d00a      	beq.n	8003ce0 <_scanf_float+0x350>
 8003cca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cce:	463a      	mov	r2, r7
 8003cd0:	4640      	mov	r0, r8
 8003cd2:	4798      	blx	r3
 8003cd4:	6923      	ldr	r3, [r4, #16]
 8003cd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	1eb5      	subs	r5, r6, #2
 8003cde:	6123      	str	r3, [r4, #16]
 8003ce0:	463a      	mov	r2, r7
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ce8:	4798      	blx	r3
 8003cea:	462e      	mov	r6, r5
 8003cec:	6825      	ldr	r5, [r4, #0]
 8003cee:	f015 0510 	ands.w	r5, r5, #16
 8003cf2:	d155      	bne.n	8003da0 <_scanf_float+0x410>
 8003cf4:	7035      	strb	r5, [r6, #0]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d00:	d11b      	bne.n	8003d3a <_scanf_float+0x3aa>
 8003d02:	9b01      	ldr	r3, [sp, #4]
 8003d04:	454b      	cmp	r3, r9
 8003d06:	eba3 0209 	sub.w	r2, r3, r9
 8003d0a:	d123      	bne.n	8003d54 <_scanf_float+0x3c4>
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4659      	mov	r1, fp
 8003d10:	4640      	mov	r0, r8
 8003d12:	f000 fef1 	bl	8004af8 <_strtod_r>
 8003d16:	6822      	ldr	r2, [r4, #0]
 8003d18:	9b03      	ldr	r3, [sp, #12]
 8003d1a:	f012 0f02 	tst.w	r2, #2
 8003d1e:	4606      	mov	r6, r0
 8003d20:	460f      	mov	r7, r1
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	d021      	beq.n	8003d6a <_scanf_float+0x3da>
 8003d26:	1d1a      	adds	r2, r3, #4
 8003d28:	9903      	ldr	r1, [sp, #12]
 8003d2a:	600a      	str	r2, [r1, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	e9c3 6700 	strd	r6, r7, [r3]
 8003d32:	68e3      	ldr	r3, [r4, #12]
 8003d34:	3301      	adds	r3, #1
 8003d36:	60e3      	str	r3, [r4, #12]
 8003d38:	e66d      	b.n	8003a16 <_scanf_float+0x86>
 8003d3a:	9b04      	ldr	r3, [sp, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0e5      	beq.n	8003d0c <_scanf_float+0x37c>
 8003d40:	9905      	ldr	r1, [sp, #20]
 8003d42:	230a      	movs	r3, #10
 8003d44:	462a      	mov	r2, r5
 8003d46:	4640      	mov	r0, r8
 8003d48:	3101      	adds	r1, #1
 8003d4a:	f000 ff57 	bl	8004bfc <_strtol_r>
 8003d4e:	9b04      	ldr	r3, [sp, #16]
 8003d50:	9e05      	ldr	r6, [sp, #20]
 8003d52:	1ac2      	subs	r2, r0, r3
 8003d54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003d58:	429e      	cmp	r6, r3
 8003d5a:	bf28      	it	cs
 8003d5c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003d60:	4630      	mov	r0, r6
 8003d62:	4910      	ldr	r1, [pc, #64]	; (8003da4 <_scanf_float+0x414>)
 8003d64:	f000 f89c 	bl	8003ea0 <siprintf>
 8003d68:	e7d0      	b.n	8003d0c <_scanf_float+0x37c>
 8003d6a:	f012 0f04 	tst.w	r2, #4
 8003d6e:	f103 0204 	add.w	r2, r3, #4
 8003d72:	d1d9      	bne.n	8003d28 <_scanf_float+0x398>
 8003d74:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003d78:	f8cc 2000 	str.w	r2, [ip]
 8003d7c:	f8d3 8000 	ldr.w	r8, [r3]
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	f7fc feae 	bl	8000ae4 <__aeabi_dcmpun>
 8003d88:	b128      	cbz	r0, 8003d96 <_scanf_float+0x406>
 8003d8a:	4807      	ldr	r0, [pc, #28]	; (8003da8 <_scanf_float+0x418>)
 8003d8c:	f000 f884 	bl	8003e98 <nanf>
 8003d90:	f8c8 0000 	str.w	r0, [r8]
 8003d94:	e7cd      	b.n	8003d32 <_scanf_float+0x3a2>
 8003d96:	4630      	mov	r0, r6
 8003d98:	4639      	mov	r1, r7
 8003d9a:	f7fc ff01 	bl	8000ba0 <__aeabi_d2f>
 8003d9e:	e7f7      	b.n	8003d90 <_scanf_float+0x400>
 8003da0:	2500      	movs	r5, #0
 8003da2:	e638      	b.n	8003a16 <_scanf_float+0x86>
 8003da4:	08007a9c 	.word	0x08007a9c
 8003da8:	08007f10 	.word	0x08007f10

08003dac <_puts_r>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	460e      	mov	r6, r1
 8003db0:	4605      	mov	r5, r0
 8003db2:	b118      	cbz	r0, 8003dbc <_puts_r+0x10>
 8003db4:	6983      	ldr	r3, [r0, #24]
 8003db6:	b90b      	cbnz	r3, 8003dbc <_puts_r+0x10>
 8003db8:	f001 ff72 	bl	8005ca0 <__sinit>
 8003dbc:	69ab      	ldr	r3, [r5, #24]
 8003dbe:	68ac      	ldr	r4, [r5, #8]
 8003dc0:	b913      	cbnz	r3, 8003dc8 <_puts_r+0x1c>
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f001 ff6c 	bl	8005ca0 <__sinit>
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <_puts_r+0xd0>)
 8003dca:	429c      	cmp	r4, r3
 8003dcc:	d120      	bne.n	8003e10 <_puts_r+0x64>
 8003dce:	686c      	ldr	r4, [r5, #4]
 8003dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dd2:	07db      	lsls	r3, r3, #31
 8003dd4:	d405      	bmi.n	8003de2 <_puts_r+0x36>
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	0598      	lsls	r0, r3, #22
 8003dda:	d402      	bmi.n	8003de2 <_puts_r+0x36>
 8003ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dde:	f002 fb68 	bl	80064b2 <__retarget_lock_acquire_recursive>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	0719      	lsls	r1, r3, #28
 8003de6:	d51d      	bpl.n	8003e24 <_puts_r+0x78>
 8003de8:	6923      	ldr	r3, [r4, #16]
 8003dea:	b1db      	cbz	r3, 8003e24 <_puts_r+0x78>
 8003dec:	3e01      	subs	r6, #1
 8003dee:	68a3      	ldr	r3, [r4, #8]
 8003df0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003df4:	3b01      	subs	r3, #1
 8003df6:	60a3      	str	r3, [r4, #8]
 8003df8:	bb39      	cbnz	r1, 8003e4a <_puts_r+0x9e>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da38      	bge.n	8003e70 <_puts_r+0xc4>
 8003dfe:	4622      	mov	r2, r4
 8003e00:	210a      	movs	r1, #10
 8003e02:	4628      	mov	r0, r5
 8003e04:	f000 fefc 	bl	8004c00 <__swbuf_r>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d011      	beq.n	8003e30 <_puts_r+0x84>
 8003e0c:	250a      	movs	r5, #10
 8003e0e:	e011      	b.n	8003e34 <_puts_r+0x88>
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <_puts_r+0xd4>)
 8003e12:	429c      	cmp	r4, r3
 8003e14:	d101      	bne.n	8003e1a <_puts_r+0x6e>
 8003e16:	68ac      	ldr	r4, [r5, #8]
 8003e18:	e7da      	b.n	8003dd0 <_puts_r+0x24>
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <_puts_r+0xd8>)
 8003e1c:	429c      	cmp	r4, r3
 8003e1e:	bf08      	it	eq
 8003e20:	68ec      	ldreq	r4, [r5, #12]
 8003e22:	e7d5      	b.n	8003dd0 <_puts_r+0x24>
 8003e24:	4621      	mov	r1, r4
 8003e26:	4628      	mov	r0, r5
 8003e28:	f000 ff3c 	bl	8004ca4 <__swsetup_r>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d0dd      	beq.n	8003dec <_puts_r+0x40>
 8003e30:	f04f 35ff 	mov.w	r5, #4294967295
 8003e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e36:	07da      	lsls	r2, r3, #31
 8003e38:	d405      	bmi.n	8003e46 <_puts_r+0x9a>
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	059b      	lsls	r3, r3, #22
 8003e3e:	d402      	bmi.n	8003e46 <_puts_r+0x9a>
 8003e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e42:	f002 fb37 	bl	80064b4 <__retarget_lock_release_recursive>
 8003e46:	4628      	mov	r0, r5
 8003e48:	bd70      	pop	{r4, r5, r6, pc}
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	da04      	bge.n	8003e58 <_puts_r+0xac>
 8003e4e:	69a2      	ldr	r2, [r4, #24]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	dc06      	bgt.n	8003e62 <_puts_r+0xb6>
 8003e54:	290a      	cmp	r1, #10
 8003e56:	d004      	beq.n	8003e62 <_puts_r+0xb6>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	6022      	str	r2, [r4, #0]
 8003e5e:	7019      	strb	r1, [r3, #0]
 8003e60:	e7c5      	b.n	8003dee <_puts_r+0x42>
 8003e62:	4622      	mov	r2, r4
 8003e64:	4628      	mov	r0, r5
 8003e66:	f000 fecb 	bl	8004c00 <__swbuf_r>
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d1bf      	bne.n	8003dee <_puts_r+0x42>
 8003e6e:	e7df      	b.n	8003e30 <_puts_r+0x84>
 8003e70:	250a      	movs	r5, #10
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	6022      	str	r2, [r4, #0]
 8003e78:	701d      	strb	r5, [r3, #0]
 8003e7a:	e7db      	b.n	8003e34 <_puts_r+0x88>
 8003e7c:	08007cac 	.word	0x08007cac
 8003e80:	08007ccc 	.word	0x08007ccc
 8003e84:	08007c8c 	.word	0x08007c8c

08003e88 <puts>:
 8003e88:	4b02      	ldr	r3, [pc, #8]	; (8003e94 <puts+0xc>)
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f7ff bf8d 	b.w	8003dac <_puts_r>
 8003e92:	bf00      	nop
 8003e94:	2000000c 	.word	0x2000000c

08003e98 <nanf>:
 8003e98:	4800      	ldr	r0, [pc, #0]	; (8003e9c <nanf+0x4>)
 8003e9a:	4770      	bx	lr
 8003e9c:	7fc00000 	.word	0x7fc00000

08003ea0 <siprintf>:
 8003ea0:	b40e      	push	{r1, r2, r3}
 8003ea2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ea6:	b500      	push	{lr}
 8003ea8:	b09c      	sub	sp, #112	; 0x70
 8003eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8003eac:	9002      	str	r0, [sp, #8]
 8003eae:	9006      	str	r0, [sp, #24]
 8003eb0:	9107      	str	r1, [sp, #28]
 8003eb2:	9104      	str	r1, [sp, #16]
 8003eb4:	4808      	ldr	r0, [pc, #32]	; (8003ed8 <siprintf+0x38>)
 8003eb6:	4909      	ldr	r1, [pc, #36]	; (8003edc <siprintf+0x3c>)
 8003eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ebc:	9105      	str	r1, [sp, #20]
 8003ebe:	6800      	ldr	r0, [r0, #0]
 8003ec0:	a902      	add	r1, sp, #8
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	f003 f996 	bl	80071f4 <_svfiprintf_r>
 8003ec8:	2200      	movs	r2, #0
 8003eca:	9b02      	ldr	r3, [sp, #8]
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	b01c      	add	sp, #112	; 0x70
 8003ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed4:	b003      	add	sp, #12
 8003ed6:	4770      	bx	lr
 8003ed8:	2000000c 	.word	0x2000000c
 8003edc:	ffff0208 	.word	0xffff0208

08003ee0 <sulp>:
 8003ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee4:	460f      	mov	r7, r1
 8003ee6:	4690      	mov	r8, r2
 8003ee8:	f002 fef0 	bl	8006ccc <__ulp>
 8003eec:	4604      	mov	r4, r0
 8003eee:	460d      	mov	r5, r1
 8003ef0:	f1b8 0f00 	cmp.w	r8, #0
 8003ef4:	d011      	beq.n	8003f1a <sulp+0x3a>
 8003ef6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003efa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	dd0b      	ble.n	8003f1a <sulp+0x3a>
 8003f02:	2400      	movs	r4, #0
 8003f04:	051b      	lsls	r3, r3, #20
 8003f06:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003f0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003f0e:	4622      	mov	r2, r4
 8003f10:	462b      	mov	r3, r5
 8003f12:	f7fc fb4d 	bl	80005b0 <__aeabi_dmul>
 8003f16:	4604      	mov	r4, r0
 8003f18:	460d      	mov	r5, r1
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f22:	0000      	movs	r0, r0
 8003f24:	0000      	movs	r0, r0
	...

08003f28 <_strtod_l>:
 8003f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2c:	469b      	mov	fp, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	b09f      	sub	sp, #124	; 0x7c
 8003f32:	931a      	str	r3, [sp, #104]	; 0x68
 8003f34:	4b9e      	ldr	r3, [pc, #632]	; (80041b0 <_strtod_l+0x288>)
 8003f36:	4682      	mov	sl, r0
 8003f38:	681f      	ldr	r7, [r3, #0]
 8003f3a:	460e      	mov	r6, r1
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	9215      	str	r2, [sp, #84]	; 0x54
 8003f40:	f7fc f972 	bl	8000228 <strlen>
 8003f44:	f04f 0800 	mov.w	r8, #0
 8003f48:	4604      	mov	r4, r0
 8003f4a:	f04f 0900 	mov.w	r9, #0
 8003f4e:	9619      	str	r6, [sp, #100]	; 0x64
 8003f50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	2a2b      	cmp	r2, #43	; 0x2b
 8003f56:	d04c      	beq.n	8003ff2 <_strtod_l+0xca>
 8003f58:	d83a      	bhi.n	8003fd0 <_strtod_l+0xa8>
 8003f5a:	2a0d      	cmp	r2, #13
 8003f5c:	d833      	bhi.n	8003fc6 <_strtod_l+0x9e>
 8003f5e:	2a08      	cmp	r2, #8
 8003f60:	d833      	bhi.n	8003fca <_strtod_l+0xa2>
 8003f62:	2a00      	cmp	r2, #0
 8003f64:	d03d      	beq.n	8003fe2 <_strtod_l+0xba>
 8003f66:	2300      	movs	r3, #0
 8003f68:	930a      	str	r3, [sp, #40]	; 0x28
 8003f6a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003f6c:	782b      	ldrb	r3, [r5, #0]
 8003f6e:	2b30      	cmp	r3, #48	; 0x30
 8003f70:	f040 80aa 	bne.w	80040c8 <_strtod_l+0x1a0>
 8003f74:	786b      	ldrb	r3, [r5, #1]
 8003f76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f7a:	2b58      	cmp	r3, #88	; 0x58
 8003f7c:	d166      	bne.n	800404c <_strtod_l+0x124>
 8003f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f80:	4650      	mov	r0, sl
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	ab1a      	add	r3, sp, #104	; 0x68
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	4a8a      	ldr	r2, [pc, #552]	; (80041b4 <_strtod_l+0x28c>)
 8003f8a:	f8cd b008 	str.w	fp, [sp, #8]
 8003f8e:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f90:	a919      	add	r1, sp, #100	; 0x64
 8003f92:	f001 ff8b 	bl	8005eac <__gethex>
 8003f96:	f010 0607 	ands.w	r6, r0, #7
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	d005      	beq.n	8003faa <_strtod_l+0x82>
 8003f9e:	2e06      	cmp	r6, #6
 8003fa0:	d129      	bne.n	8003ff6 <_strtod_l+0xce>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	3501      	adds	r5, #1
 8003fa6:	9519      	str	r5, [sp, #100]	; 0x64
 8003fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8003faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 858a 	bne.w	8004ac6 <_strtod_l+0xb9e>
 8003fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fb4:	b1d3      	cbz	r3, 8003fec <_strtod_l+0xc4>
 8003fb6:	4642      	mov	r2, r8
 8003fb8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	b01f      	add	sp, #124	; 0x7c
 8003fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	2a20      	cmp	r2, #32
 8003fc8:	d1cd      	bne.n	8003f66 <_strtod_l+0x3e>
 8003fca:	3301      	adds	r3, #1
 8003fcc:	9319      	str	r3, [sp, #100]	; 0x64
 8003fce:	e7bf      	b.n	8003f50 <_strtod_l+0x28>
 8003fd0:	2a2d      	cmp	r2, #45	; 0x2d
 8003fd2:	d1c8      	bne.n	8003f66 <_strtod_l+0x3e>
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	920a      	str	r2, [sp, #40]	; 0x28
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	9219      	str	r2, [sp, #100]	; 0x64
 8003fdc:	785b      	ldrb	r3, [r3, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1c3      	bne.n	8003f6a <_strtod_l+0x42>
 8003fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003fe4:	9619      	str	r6, [sp, #100]	; 0x64
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 856b 	bne.w	8004ac2 <_strtod_l+0xb9a>
 8003fec:	4642      	mov	r2, r8
 8003fee:	464b      	mov	r3, r9
 8003ff0:	e7e4      	b.n	8003fbc <_strtod_l+0x94>
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	e7ef      	b.n	8003fd6 <_strtod_l+0xae>
 8003ff6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003ff8:	b13a      	cbz	r2, 800400a <_strtod_l+0xe2>
 8003ffa:	2135      	movs	r1, #53	; 0x35
 8003ffc:	a81c      	add	r0, sp, #112	; 0x70
 8003ffe:	f002 ff69 	bl	8006ed4 <__copybits>
 8004002:	4650      	mov	r0, sl
 8004004:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004006:	f002 fb31 	bl	800666c <_Bfree>
 800400a:	3e01      	subs	r6, #1
 800400c:	2e04      	cmp	r6, #4
 800400e:	d806      	bhi.n	800401e <_strtod_l+0xf6>
 8004010:	e8df f006 	tbb	[pc, r6]
 8004014:	1714030a 	.word	0x1714030a
 8004018:	0a          	.byte	0x0a
 8004019:	00          	.byte	0x00
 800401a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800401e:	0721      	lsls	r1, r4, #28
 8004020:	d5c3      	bpl.n	8003faa <_strtod_l+0x82>
 8004022:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004026:	e7c0      	b.n	8003faa <_strtod_l+0x82>
 8004028:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800402a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800402e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004032:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004036:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800403a:	e7f0      	b.n	800401e <_strtod_l+0xf6>
 800403c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80041b8 <_strtod_l+0x290>
 8004040:	e7ed      	b.n	800401e <_strtod_l+0xf6>
 8004042:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004046:	f04f 38ff 	mov.w	r8, #4294967295
 800404a:	e7e8      	b.n	800401e <_strtod_l+0xf6>
 800404c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	9219      	str	r2, [sp, #100]	; 0x64
 8004052:	785b      	ldrb	r3, [r3, #1]
 8004054:	2b30      	cmp	r3, #48	; 0x30
 8004056:	d0f9      	beq.n	800404c <_strtod_l+0x124>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0a6      	beq.n	8003faa <_strtod_l+0x82>
 800405c:	2301      	movs	r3, #1
 800405e:	9307      	str	r3, [sp, #28]
 8004060:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004062:	220a      	movs	r2, #10
 8004064:	9308      	str	r3, [sp, #32]
 8004066:	2300      	movs	r3, #0
 8004068:	469b      	mov	fp, r3
 800406a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800406e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004070:	7805      	ldrb	r5, [r0, #0]
 8004072:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004076:	b2d9      	uxtb	r1, r3
 8004078:	2909      	cmp	r1, #9
 800407a:	d927      	bls.n	80040cc <_strtod_l+0x1a4>
 800407c:	4622      	mov	r2, r4
 800407e:	4639      	mov	r1, r7
 8004080:	f003 fa11 	bl	80074a6 <strncmp>
 8004084:	2800      	cmp	r0, #0
 8004086:	d033      	beq.n	80040f0 <_strtod_l+0x1c8>
 8004088:	2000      	movs	r0, #0
 800408a:	462a      	mov	r2, r5
 800408c:	465c      	mov	r4, fp
 800408e:	4603      	mov	r3, r0
 8004090:	9004      	str	r0, [sp, #16]
 8004092:	2a65      	cmp	r2, #101	; 0x65
 8004094:	d001      	beq.n	800409a <_strtod_l+0x172>
 8004096:	2a45      	cmp	r2, #69	; 0x45
 8004098:	d114      	bne.n	80040c4 <_strtod_l+0x19c>
 800409a:	b91c      	cbnz	r4, 80040a4 <_strtod_l+0x17c>
 800409c:	9a07      	ldr	r2, [sp, #28]
 800409e:	4302      	orrs	r2, r0
 80040a0:	d09f      	beq.n	8003fe2 <_strtod_l+0xba>
 80040a2:	2400      	movs	r4, #0
 80040a4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80040a6:	1c72      	adds	r2, r6, #1
 80040a8:	9219      	str	r2, [sp, #100]	; 0x64
 80040aa:	7872      	ldrb	r2, [r6, #1]
 80040ac:	2a2b      	cmp	r2, #43	; 0x2b
 80040ae:	d079      	beq.n	80041a4 <_strtod_l+0x27c>
 80040b0:	2a2d      	cmp	r2, #45	; 0x2d
 80040b2:	f000 8083 	beq.w	80041bc <_strtod_l+0x294>
 80040b6:	2700      	movs	r7, #0
 80040b8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80040bc:	2909      	cmp	r1, #9
 80040be:	f240 8083 	bls.w	80041c8 <_strtod_l+0x2a0>
 80040c2:	9619      	str	r6, [sp, #100]	; 0x64
 80040c4:	2500      	movs	r5, #0
 80040c6:	e09f      	b.n	8004208 <_strtod_l+0x2e0>
 80040c8:	2300      	movs	r3, #0
 80040ca:	e7c8      	b.n	800405e <_strtod_l+0x136>
 80040cc:	f1bb 0f08 	cmp.w	fp, #8
 80040d0:	bfd5      	itete	le
 80040d2:	9906      	ldrle	r1, [sp, #24]
 80040d4:	9905      	ldrgt	r1, [sp, #20]
 80040d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80040da:	fb02 3301 	mlagt	r3, r2, r1, r3
 80040de:	f100 0001 	add.w	r0, r0, #1
 80040e2:	bfd4      	ite	le
 80040e4:	9306      	strle	r3, [sp, #24]
 80040e6:	9305      	strgt	r3, [sp, #20]
 80040e8:	f10b 0b01 	add.w	fp, fp, #1
 80040ec:	9019      	str	r0, [sp, #100]	; 0x64
 80040ee:	e7be      	b.n	800406e <_strtod_l+0x146>
 80040f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040f2:	191a      	adds	r2, r3, r4
 80040f4:	9219      	str	r2, [sp, #100]	; 0x64
 80040f6:	5d1a      	ldrb	r2, [r3, r4]
 80040f8:	f1bb 0f00 	cmp.w	fp, #0
 80040fc:	d036      	beq.n	800416c <_strtod_l+0x244>
 80040fe:	465c      	mov	r4, fp
 8004100:	9004      	str	r0, [sp, #16]
 8004102:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004106:	2b09      	cmp	r3, #9
 8004108:	d912      	bls.n	8004130 <_strtod_l+0x208>
 800410a:	2301      	movs	r3, #1
 800410c:	e7c1      	b.n	8004092 <_strtod_l+0x16a>
 800410e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004110:	3001      	adds	r0, #1
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	9219      	str	r2, [sp, #100]	; 0x64
 8004116:	785a      	ldrb	r2, [r3, #1]
 8004118:	2a30      	cmp	r2, #48	; 0x30
 800411a:	d0f8      	beq.n	800410e <_strtod_l+0x1e6>
 800411c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004120:	2b08      	cmp	r3, #8
 8004122:	f200 84d5 	bhi.w	8004ad0 <_strtod_l+0xba8>
 8004126:	9004      	str	r0, [sp, #16]
 8004128:	2000      	movs	r0, #0
 800412a:	4604      	mov	r4, r0
 800412c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800412e:	9308      	str	r3, [sp, #32]
 8004130:	3a30      	subs	r2, #48	; 0x30
 8004132:	f100 0301 	add.w	r3, r0, #1
 8004136:	d013      	beq.n	8004160 <_strtod_l+0x238>
 8004138:	9904      	ldr	r1, [sp, #16]
 800413a:	1905      	adds	r5, r0, r4
 800413c:	4419      	add	r1, r3
 800413e:	9104      	str	r1, [sp, #16]
 8004140:	4623      	mov	r3, r4
 8004142:	210a      	movs	r1, #10
 8004144:	42ab      	cmp	r3, r5
 8004146:	d113      	bne.n	8004170 <_strtod_l+0x248>
 8004148:	1823      	adds	r3, r4, r0
 800414a:	2b08      	cmp	r3, #8
 800414c:	f104 0401 	add.w	r4, r4, #1
 8004150:	4404      	add	r4, r0
 8004152:	dc1b      	bgt.n	800418c <_strtod_l+0x264>
 8004154:	230a      	movs	r3, #10
 8004156:	9906      	ldr	r1, [sp, #24]
 8004158:	fb03 2301 	mla	r3, r3, r1, r2
 800415c:	9306      	str	r3, [sp, #24]
 800415e:	2300      	movs	r3, #0
 8004160:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004162:	4618      	mov	r0, r3
 8004164:	1c51      	adds	r1, r2, #1
 8004166:	9119      	str	r1, [sp, #100]	; 0x64
 8004168:	7852      	ldrb	r2, [r2, #1]
 800416a:	e7ca      	b.n	8004102 <_strtod_l+0x1da>
 800416c:	4658      	mov	r0, fp
 800416e:	e7d3      	b.n	8004118 <_strtod_l+0x1f0>
 8004170:	2b08      	cmp	r3, #8
 8004172:	dc04      	bgt.n	800417e <_strtod_l+0x256>
 8004174:	9f06      	ldr	r7, [sp, #24]
 8004176:	434f      	muls	r7, r1
 8004178:	9706      	str	r7, [sp, #24]
 800417a:	3301      	adds	r3, #1
 800417c:	e7e2      	b.n	8004144 <_strtod_l+0x21c>
 800417e:	1c5f      	adds	r7, r3, #1
 8004180:	2f10      	cmp	r7, #16
 8004182:	bfde      	ittt	le
 8004184:	9f05      	ldrle	r7, [sp, #20]
 8004186:	434f      	mulle	r7, r1
 8004188:	9705      	strle	r7, [sp, #20]
 800418a:	e7f6      	b.n	800417a <_strtod_l+0x252>
 800418c:	2c10      	cmp	r4, #16
 800418e:	bfdf      	itttt	le
 8004190:	230a      	movle	r3, #10
 8004192:	9905      	ldrle	r1, [sp, #20]
 8004194:	fb03 2301 	mlale	r3, r3, r1, r2
 8004198:	9305      	strle	r3, [sp, #20]
 800419a:	e7e0      	b.n	800415e <_strtod_l+0x236>
 800419c:	2300      	movs	r3, #0
 800419e:	9304      	str	r3, [sp, #16]
 80041a0:	2301      	movs	r3, #1
 80041a2:	e77b      	b.n	800409c <_strtod_l+0x174>
 80041a4:	2700      	movs	r7, #0
 80041a6:	1cb2      	adds	r2, r6, #2
 80041a8:	9219      	str	r2, [sp, #100]	; 0x64
 80041aa:	78b2      	ldrb	r2, [r6, #2]
 80041ac:	e784      	b.n	80040b8 <_strtod_l+0x190>
 80041ae:	bf00      	nop
 80041b0:	08007d54 	.word	0x08007d54
 80041b4:	08007aa4 	.word	0x08007aa4
 80041b8:	7ff00000 	.word	0x7ff00000
 80041bc:	2701      	movs	r7, #1
 80041be:	e7f2      	b.n	80041a6 <_strtod_l+0x27e>
 80041c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80041c2:	1c51      	adds	r1, r2, #1
 80041c4:	9119      	str	r1, [sp, #100]	; 0x64
 80041c6:	7852      	ldrb	r2, [r2, #1]
 80041c8:	2a30      	cmp	r2, #48	; 0x30
 80041ca:	d0f9      	beq.n	80041c0 <_strtod_l+0x298>
 80041cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80041d0:	2908      	cmp	r1, #8
 80041d2:	f63f af77 	bhi.w	80040c4 <_strtod_l+0x19c>
 80041d6:	f04f 0e0a 	mov.w	lr, #10
 80041da:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80041de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80041e0:	9209      	str	r2, [sp, #36]	; 0x24
 80041e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80041e4:	1c51      	adds	r1, r2, #1
 80041e6:	9119      	str	r1, [sp, #100]	; 0x64
 80041e8:	7852      	ldrb	r2, [r2, #1]
 80041ea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80041ee:	2d09      	cmp	r5, #9
 80041f0:	d935      	bls.n	800425e <_strtod_l+0x336>
 80041f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80041f4:	1b49      	subs	r1, r1, r5
 80041f6:	2908      	cmp	r1, #8
 80041f8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80041fc:	dc02      	bgt.n	8004204 <_strtod_l+0x2dc>
 80041fe:	4565      	cmp	r5, ip
 8004200:	bfa8      	it	ge
 8004202:	4665      	movge	r5, ip
 8004204:	b107      	cbz	r7, 8004208 <_strtod_l+0x2e0>
 8004206:	426d      	negs	r5, r5
 8004208:	2c00      	cmp	r4, #0
 800420a:	d14c      	bne.n	80042a6 <_strtod_l+0x37e>
 800420c:	9907      	ldr	r1, [sp, #28]
 800420e:	4301      	orrs	r1, r0
 8004210:	f47f aecb 	bne.w	8003faa <_strtod_l+0x82>
 8004214:	2b00      	cmp	r3, #0
 8004216:	f47f aee4 	bne.w	8003fe2 <_strtod_l+0xba>
 800421a:	2a69      	cmp	r2, #105	; 0x69
 800421c:	d026      	beq.n	800426c <_strtod_l+0x344>
 800421e:	dc23      	bgt.n	8004268 <_strtod_l+0x340>
 8004220:	2a49      	cmp	r2, #73	; 0x49
 8004222:	d023      	beq.n	800426c <_strtod_l+0x344>
 8004224:	2a4e      	cmp	r2, #78	; 0x4e
 8004226:	f47f aedc 	bne.w	8003fe2 <_strtod_l+0xba>
 800422a:	499d      	ldr	r1, [pc, #628]	; (80044a0 <_strtod_l+0x578>)
 800422c:	a819      	add	r0, sp, #100	; 0x64
 800422e:	f002 f88b 	bl	8006348 <__match>
 8004232:	2800      	cmp	r0, #0
 8004234:	f43f aed5 	beq.w	8003fe2 <_strtod_l+0xba>
 8004238:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b28      	cmp	r3, #40	; 0x28
 800423e:	d12c      	bne.n	800429a <_strtod_l+0x372>
 8004240:	4998      	ldr	r1, [pc, #608]	; (80044a4 <_strtod_l+0x57c>)
 8004242:	aa1c      	add	r2, sp, #112	; 0x70
 8004244:	a819      	add	r0, sp, #100	; 0x64
 8004246:	f002 f893 	bl	8006370 <__hexnan>
 800424a:	2805      	cmp	r0, #5
 800424c:	d125      	bne.n	800429a <_strtod_l+0x372>
 800424e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004250:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004254:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004258:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800425c:	e6a5      	b.n	8003faa <_strtod_l+0x82>
 800425e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004262:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004266:	e7bc      	b.n	80041e2 <_strtod_l+0x2ba>
 8004268:	2a6e      	cmp	r2, #110	; 0x6e
 800426a:	e7dc      	b.n	8004226 <_strtod_l+0x2fe>
 800426c:	498e      	ldr	r1, [pc, #568]	; (80044a8 <_strtod_l+0x580>)
 800426e:	a819      	add	r0, sp, #100	; 0x64
 8004270:	f002 f86a 	bl	8006348 <__match>
 8004274:	2800      	cmp	r0, #0
 8004276:	f43f aeb4 	beq.w	8003fe2 <_strtod_l+0xba>
 800427a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800427c:	498b      	ldr	r1, [pc, #556]	; (80044ac <_strtod_l+0x584>)
 800427e:	3b01      	subs	r3, #1
 8004280:	a819      	add	r0, sp, #100	; 0x64
 8004282:	9319      	str	r3, [sp, #100]	; 0x64
 8004284:	f002 f860 	bl	8006348 <__match>
 8004288:	b910      	cbnz	r0, 8004290 <_strtod_l+0x368>
 800428a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800428c:	3301      	adds	r3, #1
 800428e:	9319      	str	r3, [sp, #100]	; 0x64
 8004290:	f04f 0800 	mov.w	r8, #0
 8004294:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80044b0 <_strtod_l+0x588>
 8004298:	e687      	b.n	8003faa <_strtod_l+0x82>
 800429a:	4886      	ldr	r0, [pc, #536]	; (80044b4 <_strtod_l+0x58c>)
 800429c:	f003 f8aa 	bl	80073f4 <nan>
 80042a0:	4680      	mov	r8, r0
 80042a2:	4689      	mov	r9, r1
 80042a4:	e681      	b.n	8003faa <_strtod_l+0x82>
 80042a6:	9b04      	ldr	r3, [sp, #16]
 80042a8:	f1bb 0f00 	cmp.w	fp, #0
 80042ac:	bf08      	it	eq
 80042ae:	46a3      	moveq	fp, r4
 80042b0:	1aeb      	subs	r3, r5, r3
 80042b2:	2c10      	cmp	r4, #16
 80042b4:	9806      	ldr	r0, [sp, #24]
 80042b6:	4626      	mov	r6, r4
 80042b8:	9307      	str	r3, [sp, #28]
 80042ba:	bfa8      	it	ge
 80042bc:	2610      	movge	r6, #16
 80042be:	f7fc f8fd 	bl	80004bc <__aeabi_ui2d>
 80042c2:	2c09      	cmp	r4, #9
 80042c4:	4680      	mov	r8, r0
 80042c6:	4689      	mov	r9, r1
 80042c8:	dd13      	ble.n	80042f2 <_strtod_l+0x3ca>
 80042ca:	4b7b      	ldr	r3, [pc, #492]	; (80044b8 <_strtod_l+0x590>)
 80042cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80042d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80042d4:	f7fc f96c 	bl	80005b0 <__aeabi_dmul>
 80042d8:	4680      	mov	r8, r0
 80042da:	9805      	ldr	r0, [sp, #20]
 80042dc:	4689      	mov	r9, r1
 80042de:	f7fc f8ed 	bl	80004bc <__aeabi_ui2d>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4640      	mov	r0, r8
 80042e8:	4649      	mov	r1, r9
 80042ea:	f7fb ffab 	bl	8000244 <__adddf3>
 80042ee:	4680      	mov	r8, r0
 80042f0:	4689      	mov	r9, r1
 80042f2:	2c0f      	cmp	r4, #15
 80042f4:	dc36      	bgt.n	8004364 <_strtod_l+0x43c>
 80042f6:	9b07      	ldr	r3, [sp, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f43f ae56 	beq.w	8003faa <_strtod_l+0x82>
 80042fe:	dd22      	ble.n	8004346 <_strtod_l+0x41e>
 8004300:	2b16      	cmp	r3, #22
 8004302:	dc09      	bgt.n	8004318 <_strtod_l+0x3f0>
 8004304:	496c      	ldr	r1, [pc, #432]	; (80044b8 <_strtod_l+0x590>)
 8004306:	4642      	mov	r2, r8
 8004308:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800430c:	464b      	mov	r3, r9
 800430e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004312:	f7fc f94d 	bl	80005b0 <__aeabi_dmul>
 8004316:	e7c3      	b.n	80042a0 <_strtod_l+0x378>
 8004318:	9a07      	ldr	r2, [sp, #28]
 800431a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800431e:	4293      	cmp	r3, r2
 8004320:	db20      	blt.n	8004364 <_strtod_l+0x43c>
 8004322:	4d65      	ldr	r5, [pc, #404]	; (80044b8 <_strtod_l+0x590>)
 8004324:	f1c4 040f 	rsb	r4, r4, #15
 8004328:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800432c:	4642      	mov	r2, r8
 800432e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004332:	464b      	mov	r3, r9
 8004334:	f7fc f93c 	bl	80005b0 <__aeabi_dmul>
 8004338:	9b07      	ldr	r3, [sp, #28]
 800433a:	1b1c      	subs	r4, r3, r4
 800433c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004340:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004344:	e7e5      	b.n	8004312 <_strtod_l+0x3ea>
 8004346:	9b07      	ldr	r3, [sp, #28]
 8004348:	3316      	adds	r3, #22
 800434a:	db0b      	blt.n	8004364 <_strtod_l+0x43c>
 800434c:	9b04      	ldr	r3, [sp, #16]
 800434e:	4640      	mov	r0, r8
 8004350:	1b5d      	subs	r5, r3, r5
 8004352:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <_strtod_l+0x590>)
 8004354:	4649      	mov	r1, r9
 8004356:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800435a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800435e:	f7fc fa51 	bl	8000804 <__aeabi_ddiv>
 8004362:	e79d      	b.n	80042a0 <_strtod_l+0x378>
 8004364:	9b07      	ldr	r3, [sp, #28]
 8004366:	1ba6      	subs	r6, r4, r6
 8004368:	441e      	add	r6, r3
 800436a:	2e00      	cmp	r6, #0
 800436c:	dd74      	ble.n	8004458 <_strtod_l+0x530>
 800436e:	f016 030f 	ands.w	r3, r6, #15
 8004372:	d00a      	beq.n	800438a <_strtod_l+0x462>
 8004374:	4950      	ldr	r1, [pc, #320]	; (80044b8 <_strtod_l+0x590>)
 8004376:	4642      	mov	r2, r8
 8004378:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800437c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004380:	464b      	mov	r3, r9
 8004382:	f7fc f915 	bl	80005b0 <__aeabi_dmul>
 8004386:	4680      	mov	r8, r0
 8004388:	4689      	mov	r9, r1
 800438a:	f036 060f 	bics.w	r6, r6, #15
 800438e:	d052      	beq.n	8004436 <_strtod_l+0x50e>
 8004390:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004394:	dd27      	ble.n	80043e6 <_strtod_l+0x4be>
 8004396:	f04f 0b00 	mov.w	fp, #0
 800439a:	f8cd b010 	str.w	fp, [sp, #16]
 800439e:	f8cd b020 	str.w	fp, [sp, #32]
 80043a2:	f8cd b018 	str.w	fp, [sp, #24]
 80043a6:	2322      	movs	r3, #34	; 0x22
 80043a8:	f04f 0800 	mov.w	r8, #0
 80043ac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80044b0 <_strtod_l+0x588>
 80043b0:	f8ca 3000 	str.w	r3, [sl]
 80043b4:	9b08      	ldr	r3, [sp, #32]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f43f adf7 	beq.w	8003faa <_strtod_l+0x82>
 80043bc:	4650      	mov	r0, sl
 80043be:	991a      	ldr	r1, [sp, #104]	; 0x68
 80043c0:	f002 f954 	bl	800666c <_Bfree>
 80043c4:	4650      	mov	r0, sl
 80043c6:	9906      	ldr	r1, [sp, #24]
 80043c8:	f002 f950 	bl	800666c <_Bfree>
 80043cc:	4650      	mov	r0, sl
 80043ce:	9904      	ldr	r1, [sp, #16]
 80043d0:	f002 f94c 	bl	800666c <_Bfree>
 80043d4:	4650      	mov	r0, sl
 80043d6:	9908      	ldr	r1, [sp, #32]
 80043d8:	f002 f948 	bl	800666c <_Bfree>
 80043dc:	4659      	mov	r1, fp
 80043de:	4650      	mov	r0, sl
 80043e0:	f002 f944 	bl	800666c <_Bfree>
 80043e4:	e5e1      	b.n	8003faa <_strtod_l+0x82>
 80043e6:	4b35      	ldr	r3, [pc, #212]	; (80044bc <_strtod_l+0x594>)
 80043e8:	4640      	mov	r0, r8
 80043ea:	9305      	str	r3, [sp, #20]
 80043ec:	2300      	movs	r3, #0
 80043ee:	4649      	mov	r1, r9
 80043f0:	461f      	mov	r7, r3
 80043f2:	1136      	asrs	r6, r6, #4
 80043f4:	2e01      	cmp	r6, #1
 80043f6:	dc21      	bgt.n	800443c <_strtod_l+0x514>
 80043f8:	b10b      	cbz	r3, 80043fe <_strtod_l+0x4d6>
 80043fa:	4680      	mov	r8, r0
 80043fc:	4689      	mov	r9, r1
 80043fe:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <_strtod_l+0x594>)
 8004400:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004404:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004408:	4642      	mov	r2, r8
 800440a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800440e:	464b      	mov	r3, r9
 8004410:	f7fc f8ce 	bl	80005b0 <__aeabi_dmul>
 8004414:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <_strtod_l+0x588>)
 8004416:	460a      	mov	r2, r1
 8004418:	400b      	ands	r3, r1
 800441a:	4929      	ldr	r1, [pc, #164]	; (80044c0 <_strtod_l+0x598>)
 800441c:	4680      	mov	r8, r0
 800441e:	428b      	cmp	r3, r1
 8004420:	d8b9      	bhi.n	8004396 <_strtod_l+0x46e>
 8004422:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004426:	428b      	cmp	r3, r1
 8004428:	bf86      	itte	hi
 800442a:	f04f 38ff 	movhi.w	r8, #4294967295
 800442e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80044c4 <_strtod_l+0x59c>
 8004432:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004436:	2300      	movs	r3, #0
 8004438:	9305      	str	r3, [sp, #20]
 800443a:	e07f      	b.n	800453c <_strtod_l+0x614>
 800443c:	07f2      	lsls	r2, r6, #31
 800443e:	d505      	bpl.n	800444c <_strtod_l+0x524>
 8004440:	9b05      	ldr	r3, [sp, #20]
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f7fc f8b3 	bl	80005b0 <__aeabi_dmul>
 800444a:	2301      	movs	r3, #1
 800444c:	9a05      	ldr	r2, [sp, #20]
 800444e:	3701      	adds	r7, #1
 8004450:	3208      	adds	r2, #8
 8004452:	1076      	asrs	r6, r6, #1
 8004454:	9205      	str	r2, [sp, #20]
 8004456:	e7cd      	b.n	80043f4 <_strtod_l+0x4cc>
 8004458:	d0ed      	beq.n	8004436 <_strtod_l+0x50e>
 800445a:	4276      	negs	r6, r6
 800445c:	f016 020f 	ands.w	r2, r6, #15
 8004460:	d00a      	beq.n	8004478 <_strtod_l+0x550>
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <_strtod_l+0x590>)
 8004464:	4640      	mov	r0, r8
 8004466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800446a:	4649      	mov	r1, r9
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fc f9c8 	bl	8000804 <__aeabi_ddiv>
 8004474:	4680      	mov	r8, r0
 8004476:	4689      	mov	r9, r1
 8004478:	1136      	asrs	r6, r6, #4
 800447a:	d0dc      	beq.n	8004436 <_strtod_l+0x50e>
 800447c:	2e1f      	cmp	r6, #31
 800447e:	dd23      	ble.n	80044c8 <_strtod_l+0x5a0>
 8004480:	f04f 0b00 	mov.w	fp, #0
 8004484:	f8cd b010 	str.w	fp, [sp, #16]
 8004488:	f8cd b020 	str.w	fp, [sp, #32]
 800448c:	f8cd b018 	str.w	fp, [sp, #24]
 8004490:	2322      	movs	r3, #34	; 0x22
 8004492:	f04f 0800 	mov.w	r8, #0
 8004496:	f04f 0900 	mov.w	r9, #0
 800449a:	f8ca 3000 	str.w	r3, [sl]
 800449e:	e789      	b.n	80043b4 <_strtod_l+0x48c>
 80044a0:	08007a75 	.word	0x08007a75
 80044a4:	08007ab8 	.word	0x08007ab8
 80044a8:	08007a6d 	.word	0x08007a6d
 80044ac:	08007bfc 	.word	0x08007bfc
 80044b0:	7ff00000 	.word	0x7ff00000
 80044b4:	08007f10 	.word	0x08007f10
 80044b8:	08007df0 	.word	0x08007df0
 80044bc:	08007dc8 	.word	0x08007dc8
 80044c0:	7ca00000 	.word	0x7ca00000
 80044c4:	7fefffff 	.word	0x7fefffff
 80044c8:	f016 0310 	ands.w	r3, r6, #16
 80044cc:	bf18      	it	ne
 80044ce:	236a      	movne	r3, #106	; 0x6a
 80044d0:	4640      	mov	r0, r8
 80044d2:	9305      	str	r3, [sp, #20]
 80044d4:	4649      	mov	r1, r9
 80044d6:	2300      	movs	r3, #0
 80044d8:	4fb0      	ldr	r7, [pc, #704]	; (800479c <_strtod_l+0x874>)
 80044da:	07f2      	lsls	r2, r6, #31
 80044dc:	d504      	bpl.n	80044e8 <_strtod_l+0x5c0>
 80044de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e2:	f7fc f865 	bl	80005b0 <__aeabi_dmul>
 80044e6:	2301      	movs	r3, #1
 80044e8:	1076      	asrs	r6, r6, #1
 80044ea:	f107 0708 	add.w	r7, r7, #8
 80044ee:	d1f4      	bne.n	80044da <_strtod_l+0x5b2>
 80044f0:	b10b      	cbz	r3, 80044f6 <_strtod_l+0x5ce>
 80044f2:	4680      	mov	r8, r0
 80044f4:	4689      	mov	r9, r1
 80044f6:	9b05      	ldr	r3, [sp, #20]
 80044f8:	b1c3      	cbz	r3, 800452c <_strtod_l+0x604>
 80044fa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80044fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004502:	2b00      	cmp	r3, #0
 8004504:	4649      	mov	r1, r9
 8004506:	dd11      	ble.n	800452c <_strtod_l+0x604>
 8004508:	2b1f      	cmp	r3, #31
 800450a:	f340 8127 	ble.w	800475c <_strtod_l+0x834>
 800450e:	2b34      	cmp	r3, #52	; 0x34
 8004510:	bfd8      	it	le
 8004512:	f04f 33ff 	movle.w	r3, #4294967295
 8004516:	f04f 0800 	mov.w	r8, #0
 800451a:	bfcf      	iteee	gt
 800451c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004520:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004524:	fa03 f202 	lslle.w	r2, r3, r2
 8004528:	ea02 0901 	andle.w	r9, r2, r1
 800452c:	2200      	movs	r2, #0
 800452e:	2300      	movs	r3, #0
 8004530:	4640      	mov	r0, r8
 8004532:	4649      	mov	r1, r9
 8004534:	f7fc faa4 	bl	8000a80 <__aeabi_dcmpeq>
 8004538:	2800      	cmp	r0, #0
 800453a:	d1a1      	bne.n	8004480 <_strtod_l+0x558>
 800453c:	9b06      	ldr	r3, [sp, #24]
 800453e:	465a      	mov	r2, fp
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	4650      	mov	r0, sl
 8004544:	4623      	mov	r3, r4
 8004546:	9908      	ldr	r1, [sp, #32]
 8004548:	f002 f8f8 	bl	800673c <__s2b>
 800454c:	9008      	str	r0, [sp, #32]
 800454e:	2800      	cmp	r0, #0
 8004550:	f43f af21 	beq.w	8004396 <_strtod_l+0x46e>
 8004554:	9b04      	ldr	r3, [sp, #16]
 8004556:	f04f 0b00 	mov.w	fp, #0
 800455a:	1b5d      	subs	r5, r3, r5
 800455c:	9b07      	ldr	r3, [sp, #28]
 800455e:	f8cd b010 	str.w	fp, [sp, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	bfb4      	ite	lt
 8004566:	462b      	movlt	r3, r5
 8004568:	2300      	movge	r3, #0
 800456a:	930e      	str	r3, [sp, #56]	; 0x38
 800456c:	9b07      	ldr	r3, [sp, #28]
 800456e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004572:	9314      	str	r3, [sp, #80]	; 0x50
 8004574:	9b08      	ldr	r3, [sp, #32]
 8004576:	4650      	mov	r0, sl
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	f002 f837 	bl	80065ec <_Balloc>
 800457e:	9006      	str	r0, [sp, #24]
 8004580:	2800      	cmp	r0, #0
 8004582:	f43f af10 	beq.w	80043a6 <_strtod_l+0x47e>
 8004586:	9b08      	ldr	r3, [sp, #32]
 8004588:	300c      	adds	r0, #12
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	f103 010c 	add.w	r1, r3, #12
 8004590:	3202      	adds	r2, #2
 8004592:	0092      	lsls	r2, r2, #2
 8004594:	f002 f81c 	bl	80065d0 <memcpy>
 8004598:	ab1c      	add	r3, sp, #112	; 0x70
 800459a:	9301      	str	r3, [sp, #4]
 800459c:	ab1b      	add	r3, sp, #108	; 0x6c
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	4642      	mov	r2, r8
 80045a2:	464b      	mov	r3, r9
 80045a4:	4650      	mov	r0, sl
 80045a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80045aa:	f002 fc09 	bl	8006dc0 <__d2b>
 80045ae:	901a      	str	r0, [sp, #104]	; 0x68
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f43f aef8 	beq.w	80043a6 <_strtod_l+0x47e>
 80045b6:	2101      	movs	r1, #1
 80045b8:	4650      	mov	r0, sl
 80045ba:	f002 f957 	bl	800686c <__i2b>
 80045be:	4603      	mov	r3, r0
 80045c0:	9004      	str	r0, [sp, #16]
 80045c2:	2800      	cmp	r0, #0
 80045c4:	f43f aeef 	beq.w	80043a6 <_strtod_l+0x47e>
 80045c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80045ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	bfab      	itete	ge
 80045d0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80045d2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80045d4:	18ee      	addge	r6, r5, r3
 80045d6:	1b5c      	sublt	r4, r3, r5
 80045d8:	9b05      	ldr	r3, [sp, #20]
 80045da:	bfa8      	it	ge
 80045dc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80045de:	eba5 0503 	sub.w	r5, r5, r3
 80045e2:	4415      	add	r5, r2
 80045e4:	4b6e      	ldr	r3, [pc, #440]	; (80047a0 <_strtod_l+0x878>)
 80045e6:	f105 35ff 	add.w	r5, r5, #4294967295
 80045ea:	bfb8      	it	lt
 80045ec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80045ee:	429d      	cmp	r5, r3
 80045f0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80045f4:	f280 80c4 	bge.w	8004780 <_strtod_l+0x858>
 80045f8:	1b5b      	subs	r3, r3, r5
 80045fa:	2b1f      	cmp	r3, #31
 80045fc:	f04f 0701 	mov.w	r7, #1
 8004600:	eba2 0203 	sub.w	r2, r2, r3
 8004604:	f300 80b1 	bgt.w	800476a <_strtod_l+0x842>
 8004608:	2500      	movs	r5, #0
 800460a:	fa07 f303 	lsl.w	r3, r7, r3
 800460e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004610:	18b7      	adds	r7, r6, r2
 8004612:	9b05      	ldr	r3, [sp, #20]
 8004614:	42be      	cmp	r6, r7
 8004616:	4414      	add	r4, r2
 8004618:	441c      	add	r4, r3
 800461a:	4633      	mov	r3, r6
 800461c:	bfa8      	it	ge
 800461e:	463b      	movge	r3, r7
 8004620:	42a3      	cmp	r3, r4
 8004622:	bfa8      	it	ge
 8004624:	4623      	movge	r3, r4
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfc2      	ittt	gt
 800462a:	1aff      	subgt	r7, r7, r3
 800462c:	1ae4      	subgt	r4, r4, r3
 800462e:	1af6      	subgt	r6, r6, r3
 8004630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004632:	2b00      	cmp	r3, #0
 8004634:	dd17      	ble.n	8004666 <_strtod_l+0x73e>
 8004636:	461a      	mov	r2, r3
 8004638:	4650      	mov	r0, sl
 800463a:	9904      	ldr	r1, [sp, #16]
 800463c:	f002 f9d4 	bl	80069e8 <__pow5mult>
 8004640:	9004      	str	r0, [sp, #16]
 8004642:	2800      	cmp	r0, #0
 8004644:	f43f aeaf 	beq.w	80043a6 <_strtod_l+0x47e>
 8004648:	4601      	mov	r1, r0
 800464a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800464c:	4650      	mov	r0, sl
 800464e:	f002 f923 	bl	8006898 <__multiply>
 8004652:	9009      	str	r0, [sp, #36]	; 0x24
 8004654:	2800      	cmp	r0, #0
 8004656:	f43f aea6 	beq.w	80043a6 <_strtod_l+0x47e>
 800465a:	4650      	mov	r0, sl
 800465c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800465e:	f002 f805 	bl	800666c <_Bfree>
 8004662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004664:	931a      	str	r3, [sp, #104]	; 0x68
 8004666:	2f00      	cmp	r7, #0
 8004668:	f300 808e 	bgt.w	8004788 <_strtod_l+0x860>
 800466c:	9b07      	ldr	r3, [sp, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	dd08      	ble.n	8004684 <_strtod_l+0x75c>
 8004672:	4650      	mov	r0, sl
 8004674:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004676:	9906      	ldr	r1, [sp, #24]
 8004678:	f002 f9b6 	bl	80069e8 <__pow5mult>
 800467c:	9006      	str	r0, [sp, #24]
 800467e:	2800      	cmp	r0, #0
 8004680:	f43f ae91 	beq.w	80043a6 <_strtod_l+0x47e>
 8004684:	2c00      	cmp	r4, #0
 8004686:	dd08      	ble.n	800469a <_strtod_l+0x772>
 8004688:	4622      	mov	r2, r4
 800468a:	4650      	mov	r0, sl
 800468c:	9906      	ldr	r1, [sp, #24]
 800468e:	f002 fa05 	bl	8006a9c <__lshift>
 8004692:	9006      	str	r0, [sp, #24]
 8004694:	2800      	cmp	r0, #0
 8004696:	f43f ae86 	beq.w	80043a6 <_strtod_l+0x47e>
 800469a:	2e00      	cmp	r6, #0
 800469c:	dd08      	ble.n	80046b0 <_strtod_l+0x788>
 800469e:	4632      	mov	r2, r6
 80046a0:	4650      	mov	r0, sl
 80046a2:	9904      	ldr	r1, [sp, #16]
 80046a4:	f002 f9fa 	bl	8006a9c <__lshift>
 80046a8:	9004      	str	r0, [sp, #16]
 80046aa:	2800      	cmp	r0, #0
 80046ac:	f43f ae7b 	beq.w	80043a6 <_strtod_l+0x47e>
 80046b0:	4650      	mov	r0, sl
 80046b2:	9a06      	ldr	r2, [sp, #24]
 80046b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80046b6:	f002 fa7d 	bl	8006bb4 <__mdiff>
 80046ba:	4683      	mov	fp, r0
 80046bc:	2800      	cmp	r0, #0
 80046be:	f43f ae72 	beq.w	80043a6 <_strtod_l+0x47e>
 80046c2:	2400      	movs	r4, #0
 80046c4:	68c3      	ldr	r3, [r0, #12]
 80046c6:	9904      	ldr	r1, [sp, #16]
 80046c8:	60c4      	str	r4, [r0, #12]
 80046ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80046cc:	f002 fa56 	bl	8006b7c <__mcmp>
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	da6b      	bge.n	80047ac <_strtod_l+0x884>
 80046d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046d6:	ea53 0308 	orrs.w	r3, r3, r8
 80046da:	f040 8091 	bne.w	8004800 <_strtod_l+0x8d8>
 80046de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 808c 	bne.w	8004800 <_strtod_l+0x8d8>
 80046e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046ec:	0d1b      	lsrs	r3, r3, #20
 80046ee:	051b      	lsls	r3, r3, #20
 80046f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80046f4:	f240 8084 	bls.w	8004800 <_strtod_l+0x8d8>
 80046f8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80046fc:	b91b      	cbnz	r3, 8004706 <_strtod_l+0x7de>
 80046fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004702:	2b01      	cmp	r3, #1
 8004704:	dd7c      	ble.n	8004800 <_strtod_l+0x8d8>
 8004706:	4659      	mov	r1, fp
 8004708:	2201      	movs	r2, #1
 800470a:	4650      	mov	r0, sl
 800470c:	f002 f9c6 	bl	8006a9c <__lshift>
 8004710:	9904      	ldr	r1, [sp, #16]
 8004712:	4683      	mov	fp, r0
 8004714:	f002 fa32 	bl	8006b7c <__mcmp>
 8004718:	2800      	cmp	r0, #0
 800471a:	dd71      	ble.n	8004800 <_strtod_l+0x8d8>
 800471c:	9905      	ldr	r1, [sp, #20]
 800471e:	464b      	mov	r3, r9
 8004720:	4a20      	ldr	r2, [pc, #128]	; (80047a4 <_strtod_l+0x87c>)
 8004722:	2900      	cmp	r1, #0
 8004724:	f000 808c 	beq.w	8004840 <_strtod_l+0x918>
 8004728:	ea02 0109 	and.w	r1, r2, r9
 800472c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004730:	f300 8086 	bgt.w	8004840 <_strtod_l+0x918>
 8004734:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004738:	f77f aeaa 	ble.w	8004490 <_strtod_l+0x568>
 800473c:	4640      	mov	r0, r8
 800473e:	4649      	mov	r1, r9
 8004740:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <_strtod_l+0x880>)
 8004742:	2200      	movs	r2, #0
 8004744:	f7fb ff34 	bl	80005b0 <__aeabi_dmul>
 8004748:	460b      	mov	r3, r1
 800474a:	4303      	orrs	r3, r0
 800474c:	bf08      	it	eq
 800474e:	2322      	moveq	r3, #34	; 0x22
 8004750:	4680      	mov	r8, r0
 8004752:	4689      	mov	r9, r1
 8004754:	bf08      	it	eq
 8004756:	f8ca 3000 	streq.w	r3, [sl]
 800475a:	e62f      	b.n	80043bc <_strtod_l+0x494>
 800475c:	f04f 32ff 	mov.w	r2, #4294967295
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	ea03 0808 	and.w	r8, r3, r8
 8004768:	e6e0      	b.n	800452c <_strtod_l+0x604>
 800476a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800476e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004772:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004776:	35e2      	adds	r5, #226	; 0xe2
 8004778:	fa07 f505 	lsl.w	r5, r7, r5
 800477c:	970f      	str	r7, [sp, #60]	; 0x3c
 800477e:	e747      	b.n	8004610 <_strtod_l+0x6e8>
 8004780:	2301      	movs	r3, #1
 8004782:	2500      	movs	r5, #0
 8004784:	930f      	str	r3, [sp, #60]	; 0x3c
 8004786:	e743      	b.n	8004610 <_strtod_l+0x6e8>
 8004788:	463a      	mov	r2, r7
 800478a:	4650      	mov	r0, sl
 800478c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800478e:	f002 f985 	bl	8006a9c <__lshift>
 8004792:	901a      	str	r0, [sp, #104]	; 0x68
 8004794:	2800      	cmp	r0, #0
 8004796:	f47f af69 	bne.w	800466c <_strtod_l+0x744>
 800479a:	e604      	b.n	80043a6 <_strtod_l+0x47e>
 800479c:	08007ad0 	.word	0x08007ad0
 80047a0:	fffffc02 	.word	0xfffffc02
 80047a4:	7ff00000 	.word	0x7ff00000
 80047a8:	39500000 	.word	0x39500000
 80047ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80047b0:	d165      	bne.n	800487e <_strtod_l+0x956>
 80047b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047b8:	b35a      	cbz	r2, 8004812 <_strtod_l+0x8ea>
 80047ba:	4a99      	ldr	r2, [pc, #612]	; (8004a20 <_strtod_l+0xaf8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d12b      	bne.n	8004818 <_strtod_l+0x8f0>
 80047c0:	9b05      	ldr	r3, [sp, #20]
 80047c2:	4641      	mov	r1, r8
 80047c4:	b303      	cbz	r3, 8004808 <_strtod_l+0x8e0>
 80047c6:	464a      	mov	r2, r9
 80047c8:	4b96      	ldr	r3, [pc, #600]	; (8004a24 <_strtod_l+0xafc>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80047d0:	f04f 32ff 	mov.w	r2, #4294967295
 80047d4:	d81b      	bhi.n	800480e <_strtod_l+0x8e6>
 80047d6:	0d1b      	lsrs	r3, r3, #20
 80047d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	4299      	cmp	r1, r3
 80047e2:	d119      	bne.n	8004818 <_strtod_l+0x8f0>
 80047e4:	4b90      	ldr	r3, [pc, #576]	; (8004a28 <_strtod_l+0xb00>)
 80047e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d102      	bne.n	80047f2 <_strtod_l+0x8ca>
 80047ec:	3101      	adds	r1, #1
 80047ee:	f43f adda 	beq.w	80043a6 <_strtod_l+0x47e>
 80047f2:	f04f 0800 	mov.w	r8, #0
 80047f6:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <_strtod_l+0xafc>)
 80047f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047fa:	401a      	ands	r2, r3
 80047fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004800:	9b05      	ldr	r3, [sp, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d19a      	bne.n	800473c <_strtod_l+0x814>
 8004806:	e5d9      	b.n	80043bc <_strtod_l+0x494>
 8004808:	f04f 33ff 	mov.w	r3, #4294967295
 800480c:	e7e8      	b.n	80047e0 <_strtod_l+0x8b8>
 800480e:	4613      	mov	r3, r2
 8004810:	e7e6      	b.n	80047e0 <_strtod_l+0x8b8>
 8004812:	ea53 0308 	orrs.w	r3, r3, r8
 8004816:	d081      	beq.n	800471c <_strtod_l+0x7f4>
 8004818:	b1e5      	cbz	r5, 8004854 <_strtod_l+0x92c>
 800481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481c:	421d      	tst	r5, r3
 800481e:	d0ef      	beq.n	8004800 <_strtod_l+0x8d8>
 8004820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004822:	4640      	mov	r0, r8
 8004824:	4649      	mov	r1, r9
 8004826:	9a05      	ldr	r2, [sp, #20]
 8004828:	b1c3      	cbz	r3, 800485c <_strtod_l+0x934>
 800482a:	f7ff fb59 	bl	8003ee0 <sulp>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004836:	f7fb fd05 	bl	8000244 <__adddf3>
 800483a:	4680      	mov	r8, r0
 800483c:	4689      	mov	r9, r1
 800483e:	e7df      	b.n	8004800 <_strtod_l+0x8d8>
 8004840:	4013      	ands	r3, r2
 8004842:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004846:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800484a:	f04f 38ff 	mov.w	r8, #4294967295
 800484e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004852:	e7d5      	b.n	8004800 <_strtod_l+0x8d8>
 8004854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004856:	ea13 0f08 	tst.w	r3, r8
 800485a:	e7e0      	b.n	800481e <_strtod_l+0x8f6>
 800485c:	f7ff fb40 	bl	8003ee0 <sulp>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004868:	f7fb fcea 	bl	8000240 <__aeabi_dsub>
 800486c:	2200      	movs	r2, #0
 800486e:	2300      	movs	r3, #0
 8004870:	4680      	mov	r8, r0
 8004872:	4689      	mov	r9, r1
 8004874:	f7fc f904 	bl	8000a80 <__aeabi_dcmpeq>
 8004878:	2800      	cmp	r0, #0
 800487a:	d0c1      	beq.n	8004800 <_strtod_l+0x8d8>
 800487c:	e608      	b.n	8004490 <_strtod_l+0x568>
 800487e:	4658      	mov	r0, fp
 8004880:	9904      	ldr	r1, [sp, #16]
 8004882:	f002 faf9 	bl	8006e78 <__ratio>
 8004886:	2200      	movs	r2, #0
 8004888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800488c:	4606      	mov	r6, r0
 800488e:	460f      	mov	r7, r1
 8004890:	f7fc f90a 	bl	8000aa8 <__aeabi_dcmple>
 8004894:	2800      	cmp	r0, #0
 8004896:	d070      	beq.n	800497a <_strtod_l+0xa52>
 8004898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d042      	beq.n	8004924 <_strtod_l+0x9fc>
 800489e:	2600      	movs	r6, #0
 80048a0:	4f62      	ldr	r7, [pc, #392]	; (8004a2c <_strtod_l+0xb04>)
 80048a2:	4d62      	ldr	r5, [pc, #392]	; (8004a2c <_strtod_l+0xb04>)
 80048a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048aa:	0d1b      	lsrs	r3, r3, #20
 80048ac:	051b      	lsls	r3, r3, #20
 80048ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80048b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048b2:	4b5f      	ldr	r3, [pc, #380]	; (8004a30 <_strtod_l+0xb08>)
 80048b4:	429a      	cmp	r2, r3
 80048b6:	f040 80c3 	bne.w	8004a40 <_strtod_l+0xb18>
 80048ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048bc:	4640      	mov	r0, r8
 80048be:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80048c2:	4649      	mov	r1, r9
 80048c4:	f002 fa02 	bl	8006ccc <__ulp>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4630      	mov	r0, r6
 80048ce:	4639      	mov	r1, r7
 80048d0:	f7fb fe6e 	bl	80005b0 <__aeabi_dmul>
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	f7fb fcb4 	bl	8000244 <__adddf3>
 80048dc:	460b      	mov	r3, r1
 80048de:	4951      	ldr	r1, [pc, #324]	; (8004a24 <_strtod_l+0xafc>)
 80048e0:	4a54      	ldr	r2, [pc, #336]	; (8004a34 <_strtod_l+0xb0c>)
 80048e2:	4019      	ands	r1, r3
 80048e4:	4291      	cmp	r1, r2
 80048e6:	4680      	mov	r8, r0
 80048e8:	d95d      	bls.n	80049a6 <_strtod_l+0xa7e>
 80048ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048ec:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <_strtod_l+0xb00>)
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d103      	bne.n	80048fa <_strtod_l+0x9d2>
 80048f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048f4:	3301      	adds	r3, #1
 80048f6:	f43f ad56 	beq.w	80043a6 <_strtod_l+0x47e>
 80048fa:	f04f 38ff 	mov.w	r8, #4294967295
 80048fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004a28 <_strtod_l+0xb00>
 8004902:	4650      	mov	r0, sl
 8004904:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004906:	f001 feb1 	bl	800666c <_Bfree>
 800490a:	4650      	mov	r0, sl
 800490c:	9906      	ldr	r1, [sp, #24]
 800490e:	f001 fead 	bl	800666c <_Bfree>
 8004912:	4650      	mov	r0, sl
 8004914:	9904      	ldr	r1, [sp, #16]
 8004916:	f001 fea9 	bl	800666c <_Bfree>
 800491a:	4659      	mov	r1, fp
 800491c:	4650      	mov	r0, sl
 800491e:	f001 fea5 	bl	800666c <_Bfree>
 8004922:	e627      	b.n	8004574 <_strtod_l+0x64c>
 8004924:	f1b8 0f00 	cmp.w	r8, #0
 8004928:	d119      	bne.n	800495e <_strtod_l+0xa36>
 800492a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800492c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004930:	b9e3      	cbnz	r3, 800496c <_strtod_l+0xa44>
 8004932:	2200      	movs	r2, #0
 8004934:	4630      	mov	r0, r6
 8004936:	4639      	mov	r1, r7
 8004938:	4b3c      	ldr	r3, [pc, #240]	; (8004a2c <_strtod_l+0xb04>)
 800493a:	f7fc f8ab 	bl	8000a94 <__aeabi_dcmplt>
 800493e:	b9c8      	cbnz	r0, 8004974 <_strtod_l+0xa4c>
 8004940:	2200      	movs	r2, #0
 8004942:	4630      	mov	r0, r6
 8004944:	4639      	mov	r1, r7
 8004946:	4b3c      	ldr	r3, [pc, #240]	; (8004a38 <_strtod_l+0xb10>)
 8004948:	f7fb fe32 	bl	80005b0 <__aeabi_dmul>
 800494c:	4604      	mov	r4, r0
 800494e:	460d      	mov	r5, r1
 8004950:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004954:	9416      	str	r4, [sp, #88]	; 0x58
 8004956:	9317      	str	r3, [sp, #92]	; 0x5c
 8004958:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800495c:	e7a2      	b.n	80048a4 <_strtod_l+0x97c>
 800495e:	f1b8 0f01 	cmp.w	r8, #1
 8004962:	d103      	bne.n	800496c <_strtod_l+0xa44>
 8004964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	f43f ad92 	beq.w	8004490 <_strtod_l+0x568>
 800496c:	2600      	movs	r6, #0
 800496e:	2400      	movs	r4, #0
 8004970:	4f32      	ldr	r7, [pc, #200]	; (8004a3c <_strtod_l+0xb14>)
 8004972:	e796      	b.n	80048a2 <_strtod_l+0x97a>
 8004974:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004976:	4d30      	ldr	r5, [pc, #192]	; (8004a38 <_strtod_l+0xb10>)
 8004978:	e7ea      	b.n	8004950 <_strtod_l+0xa28>
 800497a:	4b2f      	ldr	r3, [pc, #188]	; (8004a38 <_strtod_l+0xb10>)
 800497c:	2200      	movs	r2, #0
 800497e:	4630      	mov	r0, r6
 8004980:	4639      	mov	r1, r7
 8004982:	f7fb fe15 	bl	80005b0 <__aeabi_dmul>
 8004986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004988:	4604      	mov	r4, r0
 800498a:	460d      	mov	r5, r1
 800498c:	b933      	cbnz	r3, 800499c <_strtod_l+0xa74>
 800498e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004992:	9010      	str	r0, [sp, #64]	; 0x40
 8004994:	9311      	str	r3, [sp, #68]	; 0x44
 8004996:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800499a:	e783      	b.n	80048a4 <_strtod_l+0x97c>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80049a4:	e7f7      	b.n	8004996 <_strtod_l+0xa6e>
 80049a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80049aa:	9b05      	ldr	r3, [sp, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1a8      	bne.n	8004902 <_strtod_l+0x9da>
 80049b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049b6:	0d1b      	lsrs	r3, r3, #20
 80049b8:	051b      	lsls	r3, r3, #20
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d1a1      	bne.n	8004902 <_strtod_l+0x9da>
 80049be:	4620      	mov	r0, r4
 80049c0:	4629      	mov	r1, r5
 80049c2:	f7fc f93d 	bl	8000c40 <__aeabi_d2lz>
 80049c6:	f7fb fdc5 	bl	8000554 <__aeabi_l2d>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4620      	mov	r0, r4
 80049d0:	4629      	mov	r1, r5
 80049d2:	f7fb fc35 	bl	8000240 <__aeabi_dsub>
 80049d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049dc:	ea43 0308 	orr.w	r3, r3, r8
 80049e0:	4313      	orrs	r3, r2
 80049e2:	4604      	mov	r4, r0
 80049e4:	460d      	mov	r5, r1
 80049e6:	d066      	beq.n	8004ab6 <_strtod_l+0xb8e>
 80049e8:	a309      	add	r3, pc, #36	; (adr r3, 8004a10 <_strtod_l+0xae8>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fc f851 	bl	8000a94 <__aeabi_dcmplt>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	f47f ace2 	bne.w	80043bc <_strtod_l+0x494>
 80049f8:	a307      	add	r3, pc, #28	; (adr r3, 8004a18 <_strtod_l+0xaf0>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	4620      	mov	r0, r4
 8004a00:	4629      	mov	r1, r5
 8004a02:	f7fc f865 	bl	8000ad0 <__aeabi_dcmpgt>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	f43f af7b 	beq.w	8004902 <_strtod_l+0x9da>
 8004a0c:	e4d6      	b.n	80043bc <_strtod_l+0x494>
 8004a0e:	bf00      	nop
 8004a10:	94a03595 	.word	0x94a03595
 8004a14:	3fdfffff 	.word	0x3fdfffff
 8004a18:	35afe535 	.word	0x35afe535
 8004a1c:	3fe00000 	.word	0x3fe00000
 8004a20:	000fffff 	.word	0x000fffff
 8004a24:	7ff00000 	.word	0x7ff00000
 8004a28:	7fefffff 	.word	0x7fefffff
 8004a2c:	3ff00000 	.word	0x3ff00000
 8004a30:	7fe00000 	.word	0x7fe00000
 8004a34:	7c9fffff 	.word	0x7c9fffff
 8004a38:	3fe00000 	.word	0x3fe00000
 8004a3c:	bff00000 	.word	0xbff00000
 8004a40:	9b05      	ldr	r3, [sp, #20]
 8004a42:	b313      	cbz	r3, 8004a8a <_strtod_l+0xb62>
 8004a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a4a:	d81e      	bhi.n	8004a8a <_strtod_l+0xb62>
 8004a4c:	a326      	add	r3, pc, #152	; (adr r3, 8004ae8 <_strtod_l+0xbc0>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	4620      	mov	r0, r4
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7fc f827 	bl	8000aa8 <__aeabi_dcmple>
 8004a5a:	b190      	cbz	r0, 8004a82 <_strtod_l+0xb5a>
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f7fc f87e 	bl	8000b60 <__aeabi_d2uiz>
 8004a64:	2801      	cmp	r0, #1
 8004a66:	bf38      	it	cc
 8004a68:	2001      	movcc	r0, #1
 8004a6a:	f7fb fd27 	bl	80004bc <__aeabi_ui2d>
 8004a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a70:	4604      	mov	r4, r0
 8004a72:	460d      	mov	r5, r1
 8004a74:	b9d3      	cbnz	r3, 8004aac <_strtod_l+0xb84>
 8004a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a7a:	9012      	str	r0, [sp, #72]	; 0x48
 8004a7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a7e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a84:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004a88:	1a9f      	subs	r7, r3, r2
 8004a8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a8e:	f002 f91d 	bl	8006ccc <__ulp>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4630      	mov	r0, r6
 8004a98:	4639      	mov	r1, r7
 8004a9a:	f7fb fd89 	bl	80005b0 <__aeabi_dmul>
 8004a9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004aa2:	f7fb fbcf 	bl	8000244 <__adddf3>
 8004aa6:	4680      	mov	r8, r0
 8004aa8:	4689      	mov	r9, r1
 8004aaa:	e77e      	b.n	80049aa <_strtod_l+0xa82>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004ab4:	e7e3      	b.n	8004a7e <_strtod_l+0xb56>
 8004ab6:	a30e      	add	r3, pc, #56	; (adr r3, 8004af0 <_strtod_l+0xbc8>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f7fb ffea 	bl	8000a94 <__aeabi_dcmplt>
 8004ac0:	e7a1      	b.n	8004a06 <_strtod_l+0xade>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ac8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	f7ff ba71 	b.w	8003fb2 <_strtod_l+0x8a>
 8004ad0:	2a65      	cmp	r2, #101	; 0x65
 8004ad2:	f43f ab63 	beq.w	800419c <_strtod_l+0x274>
 8004ad6:	2a45      	cmp	r2, #69	; 0x45
 8004ad8:	f43f ab60 	beq.w	800419c <_strtod_l+0x274>
 8004adc:	2301      	movs	r3, #1
 8004ade:	f7ff bb95 	b.w	800420c <_strtod_l+0x2e4>
 8004ae2:	bf00      	nop
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	ffc00000 	.word	0xffc00000
 8004aec:	41dfffff 	.word	0x41dfffff
 8004af0:	94a03595 	.word	0x94a03595
 8004af4:	3fcfffff 	.word	0x3fcfffff

08004af8 <_strtod_r>:
 8004af8:	4b01      	ldr	r3, [pc, #4]	; (8004b00 <_strtod_r+0x8>)
 8004afa:	f7ff ba15 	b.w	8003f28 <_strtod_l>
 8004afe:	bf00      	nop
 8004b00:	20000074 	.word	0x20000074

08004b04 <_strtol_l.constprop.0>:
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	d001      	beq.n	8004b12 <_strtol_l.constprop.0+0xe>
 8004b0e:	2b24      	cmp	r3, #36	; 0x24
 8004b10:	d906      	bls.n	8004b20 <_strtol_l.constprop.0+0x1c>
 8004b12:	f7fe faab 	bl	800306c <__errno>
 8004b16:	2316      	movs	r3, #22
 8004b18:	6003      	str	r3, [r0, #0]
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b20:	460d      	mov	r5, r1
 8004b22:	4f35      	ldr	r7, [pc, #212]	; (8004bf8 <_strtol_l.constprop.0+0xf4>)
 8004b24:	4628      	mov	r0, r5
 8004b26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b2a:	5de6      	ldrb	r6, [r4, r7]
 8004b2c:	f016 0608 	ands.w	r6, r6, #8
 8004b30:	d1f8      	bne.n	8004b24 <_strtol_l.constprop.0+0x20>
 8004b32:	2c2d      	cmp	r4, #45	; 0x2d
 8004b34:	d12f      	bne.n	8004b96 <_strtol_l.constprop.0+0x92>
 8004b36:	2601      	movs	r6, #1
 8004b38:	782c      	ldrb	r4, [r5, #0]
 8004b3a:	1c85      	adds	r5, r0, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d057      	beq.n	8004bf0 <_strtol_l.constprop.0+0xec>
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d109      	bne.n	8004b58 <_strtol_l.constprop.0+0x54>
 8004b44:	2c30      	cmp	r4, #48	; 0x30
 8004b46:	d107      	bne.n	8004b58 <_strtol_l.constprop.0+0x54>
 8004b48:	7828      	ldrb	r0, [r5, #0]
 8004b4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004b4e:	2858      	cmp	r0, #88	; 0x58
 8004b50:	d149      	bne.n	8004be6 <_strtol_l.constprop.0+0xe2>
 8004b52:	2310      	movs	r3, #16
 8004b54:	786c      	ldrb	r4, [r5, #1]
 8004b56:	3502      	adds	r5, #2
 8004b58:	2700      	movs	r7, #0
 8004b5a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004b5e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004b62:	fbbe f9f3 	udiv	r9, lr, r3
 8004b66:	4638      	mov	r0, r7
 8004b68:	fb03 ea19 	mls	sl, r3, r9, lr
 8004b6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004b70:	f1bc 0f09 	cmp.w	ip, #9
 8004b74:	d814      	bhi.n	8004ba0 <_strtol_l.constprop.0+0x9c>
 8004b76:	4664      	mov	r4, ip
 8004b78:	42a3      	cmp	r3, r4
 8004b7a:	dd22      	ble.n	8004bc2 <_strtol_l.constprop.0+0xbe>
 8004b7c:	2f00      	cmp	r7, #0
 8004b7e:	db1d      	blt.n	8004bbc <_strtol_l.constprop.0+0xb8>
 8004b80:	4581      	cmp	r9, r0
 8004b82:	d31b      	bcc.n	8004bbc <_strtol_l.constprop.0+0xb8>
 8004b84:	d101      	bne.n	8004b8a <_strtol_l.constprop.0+0x86>
 8004b86:	45a2      	cmp	sl, r4
 8004b88:	db18      	blt.n	8004bbc <_strtol_l.constprop.0+0xb8>
 8004b8a:	2701      	movs	r7, #1
 8004b8c:	fb00 4003 	mla	r0, r0, r3, r4
 8004b90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b94:	e7ea      	b.n	8004b6c <_strtol_l.constprop.0+0x68>
 8004b96:	2c2b      	cmp	r4, #43	; 0x2b
 8004b98:	bf04      	itt	eq
 8004b9a:	782c      	ldrbeq	r4, [r5, #0]
 8004b9c:	1c85      	addeq	r5, r0, #2
 8004b9e:	e7cd      	b.n	8004b3c <_strtol_l.constprop.0+0x38>
 8004ba0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004ba4:	f1bc 0f19 	cmp.w	ip, #25
 8004ba8:	d801      	bhi.n	8004bae <_strtol_l.constprop.0+0xaa>
 8004baa:	3c37      	subs	r4, #55	; 0x37
 8004bac:	e7e4      	b.n	8004b78 <_strtol_l.constprop.0+0x74>
 8004bae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004bb2:	f1bc 0f19 	cmp.w	ip, #25
 8004bb6:	d804      	bhi.n	8004bc2 <_strtol_l.constprop.0+0xbe>
 8004bb8:	3c57      	subs	r4, #87	; 0x57
 8004bba:	e7dd      	b.n	8004b78 <_strtol_l.constprop.0+0x74>
 8004bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8004bc0:	e7e6      	b.n	8004b90 <_strtol_l.constprop.0+0x8c>
 8004bc2:	2f00      	cmp	r7, #0
 8004bc4:	da07      	bge.n	8004bd6 <_strtol_l.constprop.0+0xd2>
 8004bc6:	2322      	movs	r3, #34	; 0x22
 8004bc8:	4670      	mov	r0, lr
 8004bca:	f8c8 3000 	str.w	r3, [r8]
 8004bce:	2a00      	cmp	r2, #0
 8004bd0:	d0a4      	beq.n	8004b1c <_strtol_l.constprop.0+0x18>
 8004bd2:	1e69      	subs	r1, r5, #1
 8004bd4:	e005      	b.n	8004be2 <_strtol_l.constprop.0+0xde>
 8004bd6:	b106      	cbz	r6, 8004bda <_strtol_l.constprop.0+0xd6>
 8004bd8:	4240      	negs	r0, r0
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	d09e      	beq.n	8004b1c <_strtol_l.constprop.0+0x18>
 8004bde:	2f00      	cmp	r7, #0
 8004be0:	d1f7      	bne.n	8004bd2 <_strtol_l.constprop.0+0xce>
 8004be2:	6011      	str	r1, [r2, #0]
 8004be4:	e79a      	b.n	8004b1c <_strtol_l.constprop.0+0x18>
 8004be6:	2430      	movs	r4, #48	; 0x30
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1b5      	bne.n	8004b58 <_strtol_l.constprop.0+0x54>
 8004bec:	2308      	movs	r3, #8
 8004bee:	e7b3      	b.n	8004b58 <_strtol_l.constprop.0+0x54>
 8004bf0:	2c30      	cmp	r4, #48	; 0x30
 8004bf2:	d0a9      	beq.n	8004b48 <_strtol_l.constprop.0+0x44>
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	e7af      	b.n	8004b58 <_strtol_l.constprop.0+0x54>
 8004bf8:	08007af9 	.word	0x08007af9

08004bfc <_strtol_r>:
 8004bfc:	f7ff bf82 	b.w	8004b04 <_strtol_l.constprop.0>

08004c00 <__swbuf_r>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	460e      	mov	r6, r1
 8004c04:	4614      	mov	r4, r2
 8004c06:	4605      	mov	r5, r0
 8004c08:	b118      	cbz	r0, 8004c12 <__swbuf_r+0x12>
 8004c0a:	6983      	ldr	r3, [r0, #24]
 8004c0c:	b90b      	cbnz	r3, 8004c12 <__swbuf_r+0x12>
 8004c0e:	f001 f847 	bl	8005ca0 <__sinit>
 8004c12:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <__swbuf_r+0x98>)
 8004c14:	429c      	cmp	r4, r3
 8004c16:	d12b      	bne.n	8004c70 <__swbuf_r+0x70>
 8004c18:	686c      	ldr	r4, [r5, #4]
 8004c1a:	69a3      	ldr	r3, [r4, #24]
 8004c1c:	60a3      	str	r3, [r4, #8]
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	071a      	lsls	r2, r3, #28
 8004c22:	d52f      	bpl.n	8004c84 <__swbuf_r+0x84>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	b36b      	cbz	r3, 8004c84 <__swbuf_r+0x84>
 8004c28:	6923      	ldr	r3, [r4, #16]
 8004c2a:	6820      	ldr	r0, [r4, #0]
 8004c2c:	b2f6      	uxtb	r6, r6
 8004c2e:	1ac0      	subs	r0, r0, r3
 8004c30:	6963      	ldr	r3, [r4, #20]
 8004c32:	4637      	mov	r7, r6
 8004c34:	4283      	cmp	r3, r0
 8004c36:	dc04      	bgt.n	8004c42 <__swbuf_r+0x42>
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 ff9c 	bl	8005b78 <_fflush_r>
 8004c40:	bb30      	cbnz	r0, 8004c90 <__swbuf_r+0x90>
 8004c42:	68a3      	ldr	r3, [r4, #8]
 8004c44:	3001      	adds	r0, #1
 8004c46:	3b01      	subs	r3, #1
 8004c48:	60a3      	str	r3, [r4, #8]
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	701e      	strb	r6, [r3, #0]
 8004c52:	6963      	ldr	r3, [r4, #20]
 8004c54:	4283      	cmp	r3, r0
 8004c56:	d004      	beq.n	8004c62 <__swbuf_r+0x62>
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	07db      	lsls	r3, r3, #31
 8004c5c:	d506      	bpl.n	8004c6c <__swbuf_r+0x6c>
 8004c5e:	2e0a      	cmp	r6, #10
 8004c60:	d104      	bne.n	8004c6c <__swbuf_r+0x6c>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 ff87 	bl	8005b78 <_fflush_r>
 8004c6a:	b988      	cbnz	r0, 8004c90 <__swbuf_r+0x90>
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <__swbuf_r+0x9c>)
 8004c72:	429c      	cmp	r4, r3
 8004c74:	d101      	bne.n	8004c7a <__swbuf_r+0x7a>
 8004c76:	68ac      	ldr	r4, [r5, #8]
 8004c78:	e7cf      	b.n	8004c1a <__swbuf_r+0x1a>
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <__swbuf_r+0xa0>)
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	bf08      	it	eq
 8004c80:	68ec      	ldreq	r4, [r5, #12]
 8004c82:	e7ca      	b.n	8004c1a <__swbuf_r+0x1a>
 8004c84:	4621      	mov	r1, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f80c 	bl	8004ca4 <__swsetup_r>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d0cb      	beq.n	8004c28 <__swbuf_r+0x28>
 8004c90:	f04f 37ff 	mov.w	r7, #4294967295
 8004c94:	e7ea      	b.n	8004c6c <__swbuf_r+0x6c>
 8004c96:	bf00      	nop
 8004c98:	08007cac 	.word	0x08007cac
 8004c9c:	08007ccc 	.word	0x08007ccc
 8004ca0:	08007c8c 	.word	0x08007c8c

08004ca4 <__swsetup_r>:
 8004ca4:	4b32      	ldr	r3, [pc, #200]	; (8004d70 <__swsetup_r+0xcc>)
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	681d      	ldr	r5, [r3, #0]
 8004caa:	4606      	mov	r6, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	b125      	cbz	r5, 8004cba <__swsetup_r+0x16>
 8004cb0:	69ab      	ldr	r3, [r5, #24]
 8004cb2:	b913      	cbnz	r3, 8004cba <__swsetup_r+0x16>
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 fff3 	bl	8005ca0 <__sinit>
 8004cba:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <__swsetup_r+0xd0>)
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	d10f      	bne.n	8004ce0 <__swsetup_r+0x3c>
 8004cc0:	686c      	ldr	r4, [r5, #4]
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cc8:	0719      	lsls	r1, r3, #28
 8004cca:	d42c      	bmi.n	8004d26 <__swsetup_r+0x82>
 8004ccc:	06dd      	lsls	r5, r3, #27
 8004cce:	d411      	bmi.n	8004cf4 <__swsetup_r+0x50>
 8004cd0:	2309      	movs	r3, #9
 8004cd2:	6033      	str	r3, [r6, #0]
 8004cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	81a3      	strh	r3, [r4, #12]
 8004cde:	e03e      	b.n	8004d5e <__swsetup_r+0xba>
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <__swsetup_r+0xd4>)
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d101      	bne.n	8004cea <__swsetup_r+0x46>
 8004ce6:	68ac      	ldr	r4, [r5, #8]
 8004ce8:	e7eb      	b.n	8004cc2 <__swsetup_r+0x1e>
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <__swsetup_r+0xd8>)
 8004cec:	429c      	cmp	r4, r3
 8004cee:	bf08      	it	eq
 8004cf0:	68ec      	ldreq	r4, [r5, #12]
 8004cf2:	e7e6      	b.n	8004cc2 <__swsetup_r+0x1e>
 8004cf4:	0758      	lsls	r0, r3, #29
 8004cf6:	d512      	bpl.n	8004d1e <__swsetup_r+0x7a>
 8004cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cfa:	b141      	cbz	r1, 8004d0e <__swsetup_r+0x6a>
 8004cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d00:	4299      	cmp	r1, r3
 8004d02:	d002      	beq.n	8004d0a <__swsetup_r+0x66>
 8004d04:	4630      	mov	r0, r6
 8004d06:	f002 f93d 	bl	8006f84 <_free_r>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	2300      	movs	r3, #0
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	f043 0308 	orr.w	r3, r3, #8
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	b94b      	cbnz	r3, 8004d3e <__swsetup_r+0x9a>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d34:	d003      	beq.n	8004d3e <__swsetup_r+0x9a>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f001 fbe1 	bl	8006500 <__smakebuf_r>
 8004d3e:	89a0      	ldrh	r0, [r4, #12]
 8004d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d44:	f010 0301 	ands.w	r3, r0, #1
 8004d48:	d00a      	beq.n	8004d60 <__swsetup_r+0xbc>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60a3      	str	r3, [r4, #8]
 8004d4e:	6963      	ldr	r3, [r4, #20]
 8004d50:	425b      	negs	r3, r3
 8004d52:	61a3      	str	r3, [r4, #24]
 8004d54:	6923      	ldr	r3, [r4, #16]
 8004d56:	b943      	cbnz	r3, 8004d6a <__swsetup_r+0xc6>
 8004d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d5c:	d1ba      	bne.n	8004cd4 <__swsetup_r+0x30>
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	0781      	lsls	r1, r0, #30
 8004d62:	bf58      	it	pl
 8004d64:	6963      	ldrpl	r3, [r4, #20]
 8004d66:	60a3      	str	r3, [r4, #8]
 8004d68:	e7f4      	b.n	8004d54 <__swsetup_r+0xb0>
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e7f7      	b.n	8004d5e <__swsetup_r+0xba>
 8004d6e:	bf00      	nop
 8004d70:	2000000c 	.word	0x2000000c
 8004d74:	08007cac 	.word	0x08007cac
 8004d78:	08007ccc 	.word	0x08007ccc
 8004d7c:	08007c8c 	.word	0x08007c8c

08004d80 <quorem>:
 8004d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	6903      	ldr	r3, [r0, #16]
 8004d86:	690c      	ldr	r4, [r1, #16]
 8004d88:	4607      	mov	r7, r0
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	f2c0 8082 	blt.w	8004e94 <quorem+0x114>
 8004d90:	3c01      	subs	r4, #1
 8004d92:	f100 0514 	add.w	r5, r0, #20
 8004d96:	f101 0814 	add.w	r8, r1, #20
 8004d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004da4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004da8:	3301      	adds	r3, #1
 8004daa:	429a      	cmp	r2, r3
 8004dac:	fbb2 f6f3 	udiv	r6, r2, r3
 8004db0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004db4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004db8:	d331      	bcc.n	8004e1e <quorem+0x9e>
 8004dba:	f04f 0e00 	mov.w	lr, #0
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	46ac      	mov	ip, r5
 8004dc2:	46f2      	mov	sl, lr
 8004dc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004dc8:	b293      	uxth	r3, r2
 8004dca:	fb06 e303 	mla	r3, r6, r3, lr
 8004dce:	0c12      	lsrs	r2, r2, #16
 8004dd0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	fb06 e202 	mla	r2, r6, r2, lr
 8004dda:	ebaa 0303 	sub.w	r3, sl, r3
 8004dde:	f8dc a000 	ldr.w	sl, [ip]
 8004de2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004de6:	fa1f fa8a 	uxth.w	sl, sl
 8004dea:	4453      	add	r3, sl
 8004dec:	f8dc a000 	ldr.w	sl, [ip]
 8004df0:	b292      	uxth	r2, r2
 8004df2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004df6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e00:	4581      	cmp	r9, r0
 8004e02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e06:	f84c 3b04 	str.w	r3, [ip], #4
 8004e0a:	d2db      	bcs.n	8004dc4 <quorem+0x44>
 8004e0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e10:	b92b      	cbnz	r3, 8004e1e <quorem+0x9e>
 8004e12:	9b01      	ldr	r3, [sp, #4]
 8004e14:	3b04      	subs	r3, #4
 8004e16:	429d      	cmp	r5, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	d32f      	bcc.n	8004e7c <quorem+0xfc>
 8004e1c:	613c      	str	r4, [r7, #16]
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f001 feac 	bl	8006b7c <__mcmp>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	db25      	blt.n	8004e74 <quorem+0xf4>
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f04f 0c00 	mov.w	ip, #0
 8004e2e:	3601      	adds	r6, #1
 8004e30:	f858 1b04 	ldr.w	r1, [r8], #4
 8004e34:	f8d0 e000 	ldr.w	lr, [r0]
 8004e38:	b28b      	uxth	r3, r1
 8004e3a:	ebac 0303 	sub.w	r3, ip, r3
 8004e3e:	fa1f f28e 	uxth.w	r2, lr
 8004e42:	4413      	add	r3, r2
 8004e44:	0c0a      	lsrs	r2, r1, #16
 8004e46:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e54:	45c1      	cmp	r9, r8
 8004e56:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e5a:	f840 3b04 	str.w	r3, [r0], #4
 8004e5e:	d2e7      	bcs.n	8004e30 <quorem+0xb0>
 8004e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e68:	b922      	cbnz	r2, 8004e74 <quorem+0xf4>
 8004e6a:	3b04      	subs	r3, #4
 8004e6c:	429d      	cmp	r5, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	d30a      	bcc.n	8004e88 <quorem+0x108>
 8004e72:	613c      	str	r4, [r7, #16]
 8004e74:	4630      	mov	r0, r6
 8004e76:	b003      	add	sp, #12
 8004e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	3b04      	subs	r3, #4
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	d1cb      	bne.n	8004e1c <quorem+0x9c>
 8004e84:	3c01      	subs	r4, #1
 8004e86:	e7c6      	b.n	8004e16 <quorem+0x96>
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	3b04      	subs	r3, #4
 8004e8c:	2a00      	cmp	r2, #0
 8004e8e:	d1f0      	bne.n	8004e72 <quorem+0xf2>
 8004e90:	3c01      	subs	r4, #1
 8004e92:	e7eb      	b.n	8004e6c <quorem+0xec>
 8004e94:	2000      	movs	r0, #0
 8004e96:	e7ee      	b.n	8004e76 <quorem+0xf6>

08004e98 <_dtoa_r>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	461f      	mov	r7, r3
 8004ea0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ea2:	b099      	sub	sp, #100	; 0x64
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004eaa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004eae:	b974      	cbnz	r4, 8004ece <_dtoa_r+0x36>
 8004eb0:	2010      	movs	r0, #16
 8004eb2:	f001 fb65 	bl	8006580 <malloc>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6268      	str	r0, [r5, #36]	; 0x24
 8004eba:	b920      	cbnz	r0, 8004ec6 <_dtoa_r+0x2e>
 8004ebc:	21ea      	movs	r1, #234	; 0xea
 8004ebe:	4ba8      	ldr	r3, [pc, #672]	; (8005160 <_dtoa_r+0x2c8>)
 8004ec0:	48a8      	ldr	r0, [pc, #672]	; (8005164 <_dtoa_r+0x2cc>)
 8004ec2:	f002 fb23 	bl	800750c <__assert_func>
 8004ec6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004eca:	6004      	str	r4, [r0, #0]
 8004ecc:	60c4      	str	r4, [r0, #12]
 8004ece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ed0:	6819      	ldr	r1, [r3, #0]
 8004ed2:	b151      	cbz	r1, 8004eea <_dtoa_r+0x52>
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4093      	lsls	r3, r2
 8004eda:	604a      	str	r2, [r1, #4]
 8004edc:	608b      	str	r3, [r1, #8]
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f001 fbc4 	bl	800666c <_Bfree>
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	1e3b      	subs	r3, r7, #0
 8004eec:	bfaf      	iteee	ge
 8004eee:	2300      	movge	r3, #0
 8004ef0:	2201      	movlt	r2, #1
 8004ef2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ef6:	9305      	strlt	r3, [sp, #20]
 8004ef8:	bfa8      	it	ge
 8004efa:	f8c8 3000 	strge.w	r3, [r8]
 8004efe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004f02:	4b99      	ldr	r3, [pc, #612]	; (8005168 <_dtoa_r+0x2d0>)
 8004f04:	bfb8      	it	lt
 8004f06:	f8c8 2000 	strlt.w	r2, [r8]
 8004f0a:	ea33 0309 	bics.w	r3, r3, r9
 8004f0e:	d119      	bne.n	8004f44 <_dtoa_r+0xac>
 8004f10:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f1c:	4333      	orrs	r3, r6
 8004f1e:	f000 857f 	beq.w	8005a20 <_dtoa_r+0xb88>
 8004f22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f24:	b953      	cbnz	r3, 8004f3c <_dtoa_r+0xa4>
 8004f26:	4b91      	ldr	r3, [pc, #580]	; (800516c <_dtoa_r+0x2d4>)
 8004f28:	e022      	b.n	8004f70 <_dtoa_r+0xd8>
 8004f2a:	4b91      	ldr	r3, [pc, #580]	; (8005170 <_dtoa_r+0x2d8>)
 8004f2c:	9303      	str	r3, [sp, #12]
 8004f2e:	3308      	adds	r3, #8
 8004f30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	9803      	ldr	r0, [sp, #12]
 8004f36:	b019      	add	sp, #100	; 0x64
 8004f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3c:	4b8b      	ldr	r3, [pc, #556]	; (800516c <_dtoa_r+0x2d4>)
 8004f3e:	9303      	str	r3, [sp, #12]
 8004f40:	3303      	adds	r3, #3
 8004f42:	e7f5      	b.n	8004f30 <_dtoa_r+0x98>
 8004f44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f50:	2200      	movs	r2, #0
 8004f52:	2300      	movs	r3, #0
 8004f54:	f7fb fd94 	bl	8000a80 <__aeabi_dcmpeq>
 8004f58:	4680      	mov	r8, r0
 8004f5a:	b158      	cbz	r0, 8004f74 <_dtoa_r+0xdc>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8558 	beq.w	8005a1a <_dtoa_r+0xb82>
 8004f6a:	4882      	ldr	r0, [pc, #520]	; (8005174 <_dtoa_r+0x2dc>)
 8004f6c:	6018      	str	r0, [r3, #0]
 8004f6e:	1e43      	subs	r3, r0, #1
 8004f70:	9303      	str	r3, [sp, #12]
 8004f72:	e7df      	b.n	8004f34 <_dtoa_r+0x9c>
 8004f74:	ab16      	add	r3, sp, #88	; 0x58
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	ab17      	add	r3, sp, #92	; 0x5c
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f82:	f001 ff1d 	bl	8006dc0 <__d2b>
 8004f86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f8a:	4683      	mov	fp, r0
 8004f8c:	2c00      	cmp	r4, #0
 8004f8e:	d07f      	beq.n	8005090 <_dtoa_r+0x1f8>
 8004f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004fa2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004fa6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004faa:	2200      	movs	r2, #0
 8004fac:	4b72      	ldr	r3, [pc, #456]	; (8005178 <_dtoa_r+0x2e0>)
 8004fae:	f7fb f947 	bl	8000240 <__aeabi_dsub>
 8004fb2:	a365      	add	r3, pc, #404	; (adr r3, 8005148 <_dtoa_r+0x2b0>)
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f7fb fafa 	bl	80005b0 <__aeabi_dmul>
 8004fbc:	a364      	add	r3, pc, #400	; (adr r3, 8005150 <_dtoa_r+0x2b8>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb f93f 	bl	8000244 <__adddf3>
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	4620      	mov	r0, r4
 8004fca:	460f      	mov	r7, r1
 8004fcc:	f7fb fa86 	bl	80004dc <__aeabi_i2d>
 8004fd0:	a361      	add	r3, pc, #388	; (adr r3, 8005158 <_dtoa_r+0x2c0>)
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	f7fb faeb 	bl	80005b0 <__aeabi_dmul>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4630      	mov	r0, r6
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	f7fb f92f 	bl	8000244 <__adddf3>
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	460f      	mov	r7, r1
 8004fea:	f7fb fd91 	bl	8000b10 <__aeabi_d2iz>
 8004fee:	2200      	movs	r2, #0
 8004ff0:	4682      	mov	sl, r0
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	f7fb fd4c 	bl	8000a94 <__aeabi_dcmplt>
 8004ffc:	b148      	cbz	r0, 8005012 <_dtoa_r+0x17a>
 8004ffe:	4650      	mov	r0, sl
 8005000:	f7fb fa6c 	bl	80004dc <__aeabi_i2d>
 8005004:	4632      	mov	r2, r6
 8005006:	463b      	mov	r3, r7
 8005008:	f7fb fd3a 	bl	8000a80 <__aeabi_dcmpeq>
 800500c:	b908      	cbnz	r0, 8005012 <_dtoa_r+0x17a>
 800500e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005012:	f1ba 0f16 	cmp.w	sl, #22
 8005016:	d858      	bhi.n	80050ca <_dtoa_r+0x232>
 8005018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800501c:	4b57      	ldr	r3, [pc, #348]	; (800517c <_dtoa_r+0x2e4>)
 800501e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f7fb fd35 	bl	8000a94 <__aeabi_dcmplt>
 800502a:	2800      	cmp	r0, #0
 800502c:	d04f      	beq.n	80050ce <_dtoa_r+0x236>
 800502e:	2300      	movs	r3, #0
 8005030:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005034:	930f      	str	r3, [sp, #60]	; 0x3c
 8005036:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005038:	1b1c      	subs	r4, r3, r4
 800503a:	1e63      	subs	r3, r4, #1
 800503c:	9309      	str	r3, [sp, #36]	; 0x24
 800503e:	bf49      	itett	mi
 8005040:	f1c4 0301 	rsbmi	r3, r4, #1
 8005044:	2300      	movpl	r3, #0
 8005046:	9306      	strmi	r3, [sp, #24]
 8005048:	2300      	movmi	r3, #0
 800504a:	bf54      	ite	pl
 800504c:	9306      	strpl	r3, [sp, #24]
 800504e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005050:	f1ba 0f00 	cmp.w	sl, #0
 8005054:	db3d      	blt.n	80050d2 <_dtoa_r+0x23a>
 8005056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005058:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800505c:	4453      	add	r3, sl
 800505e:	9309      	str	r3, [sp, #36]	; 0x24
 8005060:	2300      	movs	r3, #0
 8005062:	930a      	str	r3, [sp, #40]	; 0x28
 8005064:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005066:	2b09      	cmp	r3, #9
 8005068:	f200 808c 	bhi.w	8005184 <_dtoa_r+0x2ec>
 800506c:	2b05      	cmp	r3, #5
 800506e:	bfc4      	itt	gt
 8005070:	3b04      	subgt	r3, #4
 8005072:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005076:	bfc8      	it	gt
 8005078:	2400      	movgt	r4, #0
 800507a:	f1a3 0302 	sub.w	r3, r3, #2
 800507e:	bfd8      	it	le
 8005080:	2401      	movle	r4, #1
 8005082:	2b03      	cmp	r3, #3
 8005084:	f200 808a 	bhi.w	800519c <_dtoa_r+0x304>
 8005088:	e8df f003 	tbb	[pc, r3]
 800508c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005090:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005094:	441c      	add	r4, r3
 8005096:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800509a:	2b20      	cmp	r3, #32
 800509c:	bfc3      	ittte	gt
 800509e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80050a6:	fa09 f303 	lslgt.w	r3, r9, r3
 80050aa:	f1c3 0320 	rsble	r3, r3, #32
 80050ae:	bfc6      	itte	gt
 80050b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80050b4:	4318      	orrgt	r0, r3
 80050b6:	fa06 f003 	lslle.w	r0, r6, r3
 80050ba:	f7fb f9ff 	bl	80004bc <__aeabi_ui2d>
 80050be:	2301      	movs	r3, #1
 80050c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80050c4:	3c01      	subs	r4, #1
 80050c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80050c8:	e76f      	b.n	8004faa <_dtoa_r+0x112>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e7b2      	b.n	8005034 <_dtoa_r+0x19c>
 80050ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80050d0:	e7b1      	b.n	8005036 <_dtoa_r+0x19e>
 80050d2:	9b06      	ldr	r3, [sp, #24]
 80050d4:	eba3 030a 	sub.w	r3, r3, sl
 80050d8:	9306      	str	r3, [sp, #24]
 80050da:	f1ca 0300 	rsb	r3, sl, #0
 80050de:	930a      	str	r3, [sp, #40]	; 0x28
 80050e0:	2300      	movs	r3, #0
 80050e2:	930e      	str	r3, [sp, #56]	; 0x38
 80050e4:	e7be      	b.n	8005064 <_dtoa_r+0x1cc>
 80050e6:	2300      	movs	r3, #0
 80050e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	dc58      	bgt.n	80051a2 <_dtoa_r+0x30a>
 80050f0:	f04f 0901 	mov.w	r9, #1
 80050f4:	464b      	mov	r3, r9
 80050f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80050fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80050fe:	2200      	movs	r2, #0
 8005100:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005102:	6042      	str	r2, [r0, #4]
 8005104:	2204      	movs	r2, #4
 8005106:	f102 0614 	add.w	r6, r2, #20
 800510a:	429e      	cmp	r6, r3
 800510c:	6841      	ldr	r1, [r0, #4]
 800510e:	d94e      	bls.n	80051ae <_dtoa_r+0x316>
 8005110:	4628      	mov	r0, r5
 8005112:	f001 fa6b 	bl	80065ec <_Balloc>
 8005116:	9003      	str	r0, [sp, #12]
 8005118:	2800      	cmp	r0, #0
 800511a:	d14c      	bne.n	80051b6 <_dtoa_r+0x31e>
 800511c:	4602      	mov	r2, r0
 800511e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <_dtoa_r+0x2e8>)
 8005124:	e6cc      	b.n	8004ec0 <_dtoa_r+0x28>
 8005126:	2301      	movs	r3, #1
 8005128:	e7de      	b.n	80050e8 <_dtoa_r+0x250>
 800512a:	2300      	movs	r3, #0
 800512c:	930b      	str	r3, [sp, #44]	; 0x2c
 800512e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005130:	eb0a 0903 	add.w	r9, sl, r3
 8005134:	f109 0301 	add.w	r3, r9, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	9308      	str	r3, [sp, #32]
 800513c:	bfb8      	it	lt
 800513e:	2301      	movlt	r3, #1
 8005140:	e7dd      	b.n	80050fe <_dtoa_r+0x266>
 8005142:	2301      	movs	r3, #1
 8005144:	e7f2      	b.n	800512c <_dtoa_r+0x294>
 8005146:	bf00      	nop
 8005148:	636f4361 	.word	0x636f4361
 800514c:	3fd287a7 	.word	0x3fd287a7
 8005150:	8b60c8b3 	.word	0x8b60c8b3
 8005154:	3fc68a28 	.word	0x3fc68a28
 8005158:	509f79fb 	.word	0x509f79fb
 800515c:	3fd34413 	.word	0x3fd34413
 8005160:	08007c06 	.word	0x08007c06
 8005164:	08007c1d 	.word	0x08007c1d
 8005168:	7ff00000 	.word	0x7ff00000
 800516c:	08007c02 	.word	0x08007c02
 8005170:	08007bf9 	.word	0x08007bf9
 8005174:	08007a79 	.word	0x08007a79
 8005178:	3ff80000 	.word	0x3ff80000
 800517c:	08007df0 	.word	0x08007df0
 8005180:	08007c78 	.word	0x08007c78
 8005184:	2401      	movs	r4, #1
 8005186:	2300      	movs	r3, #0
 8005188:	940b      	str	r4, [sp, #44]	; 0x2c
 800518a:	9322      	str	r3, [sp, #136]	; 0x88
 800518c:	f04f 39ff 	mov.w	r9, #4294967295
 8005190:	2200      	movs	r2, #0
 8005192:	2312      	movs	r3, #18
 8005194:	f8cd 9020 	str.w	r9, [sp, #32]
 8005198:	9223      	str	r2, [sp, #140]	; 0x8c
 800519a:	e7b0      	b.n	80050fe <_dtoa_r+0x266>
 800519c:	2301      	movs	r3, #1
 800519e:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a0:	e7f4      	b.n	800518c <_dtoa_r+0x2f4>
 80051a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80051a6:	464b      	mov	r3, r9
 80051a8:	f8cd 9020 	str.w	r9, [sp, #32]
 80051ac:	e7a7      	b.n	80050fe <_dtoa_r+0x266>
 80051ae:	3101      	adds	r1, #1
 80051b0:	6041      	str	r1, [r0, #4]
 80051b2:	0052      	lsls	r2, r2, #1
 80051b4:	e7a7      	b.n	8005106 <_dtoa_r+0x26e>
 80051b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051b8:	9a03      	ldr	r2, [sp, #12]
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	9b08      	ldr	r3, [sp, #32]
 80051be:	2b0e      	cmp	r3, #14
 80051c0:	f200 80a8 	bhi.w	8005314 <_dtoa_r+0x47c>
 80051c4:	2c00      	cmp	r4, #0
 80051c6:	f000 80a5 	beq.w	8005314 <_dtoa_r+0x47c>
 80051ca:	f1ba 0f00 	cmp.w	sl, #0
 80051ce:	dd34      	ble.n	800523a <_dtoa_r+0x3a2>
 80051d0:	4a9a      	ldr	r2, [pc, #616]	; (800543c <_dtoa_r+0x5a4>)
 80051d2:	f00a 030f 	and.w	r3, sl, #15
 80051d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80051de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80051ea:	d016      	beq.n	800521a <_dtoa_r+0x382>
 80051ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051f0:	4b93      	ldr	r3, [pc, #588]	; (8005440 <_dtoa_r+0x5a8>)
 80051f2:	2703      	movs	r7, #3
 80051f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051f8:	f7fb fb04 	bl	8000804 <__aeabi_ddiv>
 80051fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005200:	f004 040f 	and.w	r4, r4, #15
 8005204:	4e8e      	ldr	r6, [pc, #568]	; (8005440 <_dtoa_r+0x5a8>)
 8005206:	b954      	cbnz	r4, 800521e <_dtoa_r+0x386>
 8005208:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800520c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005210:	f7fb faf8 	bl	8000804 <__aeabi_ddiv>
 8005214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005218:	e029      	b.n	800526e <_dtoa_r+0x3d6>
 800521a:	2702      	movs	r7, #2
 800521c:	e7f2      	b.n	8005204 <_dtoa_r+0x36c>
 800521e:	07e1      	lsls	r1, r4, #31
 8005220:	d508      	bpl.n	8005234 <_dtoa_r+0x39c>
 8005222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005226:	e9d6 2300 	ldrd	r2, r3, [r6]
 800522a:	f7fb f9c1 	bl	80005b0 <__aeabi_dmul>
 800522e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005232:	3701      	adds	r7, #1
 8005234:	1064      	asrs	r4, r4, #1
 8005236:	3608      	adds	r6, #8
 8005238:	e7e5      	b.n	8005206 <_dtoa_r+0x36e>
 800523a:	f000 80a5 	beq.w	8005388 <_dtoa_r+0x4f0>
 800523e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005242:	f1ca 0400 	rsb	r4, sl, #0
 8005246:	4b7d      	ldr	r3, [pc, #500]	; (800543c <_dtoa_r+0x5a4>)
 8005248:	f004 020f 	and.w	r2, r4, #15
 800524c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f7fb f9ac 	bl	80005b0 <__aeabi_dmul>
 8005258:	2702      	movs	r7, #2
 800525a:	2300      	movs	r3, #0
 800525c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005260:	4e77      	ldr	r6, [pc, #476]	; (8005440 <_dtoa_r+0x5a8>)
 8005262:	1124      	asrs	r4, r4, #4
 8005264:	2c00      	cmp	r4, #0
 8005266:	f040 8084 	bne.w	8005372 <_dtoa_r+0x4da>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1d2      	bne.n	8005214 <_dtoa_r+0x37c>
 800526e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 808b 	beq.w	800538c <_dtoa_r+0x4f4>
 8005276:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800527a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800527e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005282:	2200      	movs	r2, #0
 8005284:	4b6f      	ldr	r3, [pc, #444]	; (8005444 <_dtoa_r+0x5ac>)
 8005286:	f7fb fc05 	bl	8000a94 <__aeabi_dcmplt>
 800528a:	2800      	cmp	r0, #0
 800528c:	d07e      	beq.n	800538c <_dtoa_r+0x4f4>
 800528e:	9b08      	ldr	r3, [sp, #32]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d07b      	beq.n	800538c <_dtoa_r+0x4f4>
 8005294:	f1b9 0f00 	cmp.w	r9, #0
 8005298:	dd38      	ble.n	800530c <_dtoa_r+0x474>
 800529a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800529e:	2200      	movs	r2, #0
 80052a0:	4b69      	ldr	r3, [pc, #420]	; (8005448 <_dtoa_r+0x5b0>)
 80052a2:	f7fb f985 	bl	80005b0 <__aeabi_dmul>
 80052a6:	464c      	mov	r4, r9
 80052a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052ac:	f10a 38ff 	add.w	r8, sl, #4294967295
 80052b0:	3701      	adds	r7, #1
 80052b2:	4638      	mov	r0, r7
 80052b4:	f7fb f912 	bl	80004dc <__aeabi_i2d>
 80052b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052bc:	f7fb f978 	bl	80005b0 <__aeabi_dmul>
 80052c0:	2200      	movs	r2, #0
 80052c2:	4b62      	ldr	r3, [pc, #392]	; (800544c <_dtoa_r+0x5b4>)
 80052c4:	f7fa ffbe 	bl	8000244 <__adddf3>
 80052c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80052cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052d0:	9611      	str	r6, [sp, #68]	; 0x44
 80052d2:	2c00      	cmp	r4, #0
 80052d4:	d15d      	bne.n	8005392 <_dtoa_r+0x4fa>
 80052d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052da:	2200      	movs	r2, #0
 80052dc:	4b5c      	ldr	r3, [pc, #368]	; (8005450 <_dtoa_r+0x5b8>)
 80052de:	f7fa ffaf 	bl	8000240 <__aeabi_dsub>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052ea:	4633      	mov	r3, r6
 80052ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052ee:	f7fb fbef 	bl	8000ad0 <__aeabi_dcmpgt>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	f040 829c 	bne.w	8005830 <_dtoa_r+0x998>
 80052f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005302:	f7fb fbc7 	bl	8000a94 <__aeabi_dcmplt>
 8005306:	2800      	cmp	r0, #0
 8005308:	f040 8290 	bne.w	800582c <_dtoa_r+0x994>
 800530c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005310:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005314:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005316:	2b00      	cmp	r3, #0
 8005318:	f2c0 8152 	blt.w	80055c0 <_dtoa_r+0x728>
 800531c:	f1ba 0f0e 	cmp.w	sl, #14
 8005320:	f300 814e 	bgt.w	80055c0 <_dtoa_r+0x728>
 8005324:	4b45      	ldr	r3, [pc, #276]	; (800543c <_dtoa_r+0x5a4>)
 8005326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800532a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800532e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005332:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005334:	2b00      	cmp	r3, #0
 8005336:	f280 80db 	bge.w	80054f0 <_dtoa_r+0x658>
 800533a:	9b08      	ldr	r3, [sp, #32]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f300 80d7 	bgt.w	80054f0 <_dtoa_r+0x658>
 8005342:	f040 8272 	bne.w	800582a <_dtoa_r+0x992>
 8005346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800534a:	2200      	movs	r2, #0
 800534c:	4b40      	ldr	r3, [pc, #256]	; (8005450 <_dtoa_r+0x5b8>)
 800534e:	f7fb f92f 	bl	80005b0 <__aeabi_dmul>
 8005352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005356:	f7fb fbb1 	bl	8000abc <__aeabi_dcmpge>
 800535a:	9c08      	ldr	r4, [sp, #32]
 800535c:	4626      	mov	r6, r4
 800535e:	2800      	cmp	r0, #0
 8005360:	f040 8248 	bne.w	80057f4 <_dtoa_r+0x95c>
 8005364:	2331      	movs	r3, #49	; 0x31
 8005366:	9f03      	ldr	r7, [sp, #12]
 8005368:	f10a 0a01 	add.w	sl, sl, #1
 800536c:	f807 3b01 	strb.w	r3, [r7], #1
 8005370:	e244      	b.n	80057fc <_dtoa_r+0x964>
 8005372:	07e2      	lsls	r2, r4, #31
 8005374:	d505      	bpl.n	8005382 <_dtoa_r+0x4ea>
 8005376:	e9d6 2300 	ldrd	r2, r3, [r6]
 800537a:	f7fb f919 	bl	80005b0 <__aeabi_dmul>
 800537e:	2301      	movs	r3, #1
 8005380:	3701      	adds	r7, #1
 8005382:	1064      	asrs	r4, r4, #1
 8005384:	3608      	adds	r6, #8
 8005386:	e76d      	b.n	8005264 <_dtoa_r+0x3cc>
 8005388:	2702      	movs	r7, #2
 800538a:	e770      	b.n	800526e <_dtoa_r+0x3d6>
 800538c:	46d0      	mov	r8, sl
 800538e:	9c08      	ldr	r4, [sp, #32]
 8005390:	e78f      	b.n	80052b2 <_dtoa_r+0x41a>
 8005392:	9903      	ldr	r1, [sp, #12]
 8005394:	4b29      	ldr	r3, [pc, #164]	; (800543c <_dtoa_r+0x5a4>)
 8005396:	4421      	add	r1, r4
 8005398:	9112      	str	r1, [sp, #72]	; 0x48
 800539a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800539c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80053a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053a8:	2900      	cmp	r1, #0
 80053aa:	d055      	beq.n	8005458 <_dtoa_r+0x5c0>
 80053ac:	2000      	movs	r0, #0
 80053ae:	4929      	ldr	r1, [pc, #164]	; (8005454 <_dtoa_r+0x5bc>)
 80053b0:	f7fb fa28 	bl	8000804 <__aeabi_ddiv>
 80053b4:	463b      	mov	r3, r7
 80053b6:	4632      	mov	r2, r6
 80053b8:	f7fa ff42 	bl	8000240 <__aeabi_dsub>
 80053bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053c0:	9f03      	ldr	r7, [sp, #12]
 80053c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053c6:	f7fb fba3 	bl	8000b10 <__aeabi_d2iz>
 80053ca:	4604      	mov	r4, r0
 80053cc:	f7fb f886 	bl	80004dc <__aeabi_i2d>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053d8:	f7fa ff32 	bl	8000240 <__aeabi_dsub>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	3430      	adds	r4, #48	; 0x30
 80053e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053ea:	f807 4b01 	strb.w	r4, [r7], #1
 80053ee:	f7fb fb51 	bl	8000a94 <__aeabi_dcmplt>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d174      	bne.n	80054e0 <_dtoa_r+0x648>
 80053f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053fa:	2000      	movs	r0, #0
 80053fc:	4911      	ldr	r1, [pc, #68]	; (8005444 <_dtoa_r+0x5ac>)
 80053fe:	f7fa ff1f 	bl	8000240 <__aeabi_dsub>
 8005402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005406:	f7fb fb45 	bl	8000a94 <__aeabi_dcmplt>
 800540a:	2800      	cmp	r0, #0
 800540c:	f040 80b7 	bne.w	800557e <_dtoa_r+0x6e6>
 8005410:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005412:	429f      	cmp	r7, r3
 8005414:	f43f af7a 	beq.w	800530c <_dtoa_r+0x474>
 8005418:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800541c:	2200      	movs	r2, #0
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <_dtoa_r+0x5b0>)
 8005420:	f7fb f8c6 	bl	80005b0 <__aeabi_dmul>
 8005424:	2200      	movs	r2, #0
 8005426:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800542a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <_dtoa_r+0x5b0>)
 8005430:	f7fb f8be 	bl	80005b0 <__aeabi_dmul>
 8005434:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005438:	e7c3      	b.n	80053c2 <_dtoa_r+0x52a>
 800543a:	bf00      	nop
 800543c:	08007df0 	.word	0x08007df0
 8005440:	08007dc8 	.word	0x08007dc8
 8005444:	3ff00000 	.word	0x3ff00000
 8005448:	40240000 	.word	0x40240000
 800544c:	401c0000 	.word	0x401c0000
 8005450:	40140000 	.word	0x40140000
 8005454:	3fe00000 	.word	0x3fe00000
 8005458:	4630      	mov	r0, r6
 800545a:	4639      	mov	r1, r7
 800545c:	f7fb f8a8 	bl	80005b0 <__aeabi_dmul>
 8005460:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005462:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005466:	9c03      	ldr	r4, [sp, #12]
 8005468:	9314      	str	r3, [sp, #80]	; 0x50
 800546a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800546e:	f7fb fb4f 	bl	8000b10 <__aeabi_d2iz>
 8005472:	9015      	str	r0, [sp, #84]	; 0x54
 8005474:	f7fb f832 	bl	80004dc <__aeabi_i2d>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005480:	f7fa fede 	bl	8000240 <__aeabi_dsub>
 8005484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005486:	4606      	mov	r6, r0
 8005488:	3330      	adds	r3, #48	; 0x30
 800548a:	f804 3b01 	strb.w	r3, [r4], #1
 800548e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005490:	460f      	mov	r7, r1
 8005492:	429c      	cmp	r4, r3
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	d124      	bne.n	80054e4 <_dtoa_r+0x64c>
 800549a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800549e:	4bb0      	ldr	r3, [pc, #704]	; (8005760 <_dtoa_r+0x8c8>)
 80054a0:	f7fa fed0 	bl	8000244 <__adddf3>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4630      	mov	r0, r6
 80054aa:	4639      	mov	r1, r7
 80054ac:	f7fb fb10 	bl	8000ad0 <__aeabi_dcmpgt>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d163      	bne.n	800557c <_dtoa_r+0x6e4>
 80054b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054b8:	2000      	movs	r0, #0
 80054ba:	49a9      	ldr	r1, [pc, #676]	; (8005760 <_dtoa_r+0x8c8>)
 80054bc:	f7fa fec0 	bl	8000240 <__aeabi_dsub>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4630      	mov	r0, r6
 80054c6:	4639      	mov	r1, r7
 80054c8:	f7fb fae4 	bl	8000a94 <__aeabi_dcmplt>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	f43f af1d 	beq.w	800530c <_dtoa_r+0x474>
 80054d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054d4:	1e7b      	subs	r3, r7, #1
 80054d6:	9314      	str	r3, [sp, #80]	; 0x50
 80054d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80054dc:	2b30      	cmp	r3, #48	; 0x30
 80054de:	d0f8      	beq.n	80054d2 <_dtoa_r+0x63a>
 80054e0:	46c2      	mov	sl, r8
 80054e2:	e03b      	b.n	800555c <_dtoa_r+0x6c4>
 80054e4:	4b9f      	ldr	r3, [pc, #636]	; (8005764 <_dtoa_r+0x8cc>)
 80054e6:	f7fb f863 	bl	80005b0 <__aeabi_dmul>
 80054ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054ee:	e7bc      	b.n	800546a <_dtoa_r+0x5d2>
 80054f0:	9f03      	ldr	r7, [sp, #12]
 80054f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fb f981 	bl	8000804 <__aeabi_ddiv>
 8005502:	f7fb fb05 	bl	8000b10 <__aeabi_d2iz>
 8005506:	4604      	mov	r4, r0
 8005508:	f7fa ffe8 	bl	80004dc <__aeabi_i2d>
 800550c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005510:	f7fb f84e 	bl	80005b0 <__aeabi_dmul>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4640      	mov	r0, r8
 800551a:	4649      	mov	r1, r9
 800551c:	f7fa fe90 	bl	8000240 <__aeabi_dsub>
 8005520:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005524:	f807 6b01 	strb.w	r6, [r7], #1
 8005528:	9e03      	ldr	r6, [sp, #12]
 800552a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800552e:	1bbe      	subs	r6, r7, r6
 8005530:	45b4      	cmp	ip, r6
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	d136      	bne.n	80055a6 <_dtoa_r+0x70e>
 8005538:	f7fa fe84 	bl	8000244 <__adddf3>
 800553c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005540:	4680      	mov	r8, r0
 8005542:	4689      	mov	r9, r1
 8005544:	f7fb fac4 	bl	8000ad0 <__aeabi_dcmpgt>
 8005548:	bb58      	cbnz	r0, 80055a2 <_dtoa_r+0x70a>
 800554a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800554e:	4640      	mov	r0, r8
 8005550:	4649      	mov	r1, r9
 8005552:	f7fb fa95 	bl	8000a80 <__aeabi_dcmpeq>
 8005556:	b108      	cbz	r0, 800555c <_dtoa_r+0x6c4>
 8005558:	07e1      	lsls	r1, r4, #31
 800555a:	d422      	bmi.n	80055a2 <_dtoa_r+0x70a>
 800555c:	4628      	mov	r0, r5
 800555e:	4659      	mov	r1, fp
 8005560:	f001 f884 	bl	800666c <_Bfree>
 8005564:	2300      	movs	r3, #0
 8005566:	703b      	strb	r3, [r7, #0]
 8005568:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800556a:	f10a 0001 	add.w	r0, sl, #1
 800556e:	6018      	str	r0, [r3, #0]
 8005570:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005572:	2b00      	cmp	r3, #0
 8005574:	f43f acde 	beq.w	8004f34 <_dtoa_r+0x9c>
 8005578:	601f      	str	r7, [r3, #0]
 800557a:	e4db      	b.n	8004f34 <_dtoa_r+0x9c>
 800557c:	4627      	mov	r7, r4
 800557e:	463b      	mov	r3, r7
 8005580:	461f      	mov	r7, r3
 8005582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005586:	2a39      	cmp	r2, #57	; 0x39
 8005588:	d107      	bne.n	800559a <_dtoa_r+0x702>
 800558a:	9a03      	ldr	r2, [sp, #12]
 800558c:	429a      	cmp	r2, r3
 800558e:	d1f7      	bne.n	8005580 <_dtoa_r+0x6e8>
 8005590:	2230      	movs	r2, #48	; 0x30
 8005592:	9903      	ldr	r1, [sp, #12]
 8005594:	f108 0801 	add.w	r8, r8, #1
 8005598:	700a      	strb	r2, [r1, #0]
 800559a:	781a      	ldrb	r2, [r3, #0]
 800559c:	3201      	adds	r2, #1
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e79e      	b.n	80054e0 <_dtoa_r+0x648>
 80055a2:	46d0      	mov	r8, sl
 80055a4:	e7eb      	b.n	800557e <_dtoa_r+0x6e6>
 80055a6:	2200      	movs	r2, #0
 80055a8:	4b6e      	ldr	r3, [pc, #440]	; (8005764 <_dtoa_r+0x8cc>)
 80055aa:	f7fb f801 	bl	80005b0 <__aeabi_dmul>
 80055ae:	2200      	movs	r2, #0
 80055b0:	2300      	movs	r3, #0
 80055b2:	4680      	mov	r8, r0
 80055b4:	4689      	mov	r9, r1
 80055b6:	f7fb fa63 	bl	8000a80 <__aeabi_dcmpeq>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d09b      	beq.n	80054f6 <_dtoa_r+0x65e>
 80055be:	e7cd      	b.n	800555c <_dtoa_r+0x6c4>
 80055c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055c2:	2a00      	cmp	r2, #0
 80055c4:	f000 80d0 	beq.w	8005768 <_dtoa_r+0x8d0>
 80055c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80055ca:	2a01      	cmp	r2, #1
 80055cc:	f300 80ae 	bgt.w	800572c <_dtoa_r+0x894>
 80055d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	f000 80a6 	beq.w	8005724 <_dtoa_r+0x88c>
 80055d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055de:	9f06      	ldr	r7, [sp, #24]
 80055e0:	9a06      	ldr	r2, [sp, #24]
 80055e2:	2101      	movs	r1, #1
 80055e4:	441a      	add	r2, r3
 80055e6:	9206      	str	r2, [sp, #24]
 80055e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ea:	4628      	mov	r0, r5
 80055ec:	441a      	add	r2, r3
 80055ee:	9209      	str	r2, [sp, #36]	; 0x24
 80055f0:	f001 f93c 	bl	800686c <__i2b>
 80055f4:	4606      	mov	r6, r0
 80055f6:	2f00      	cmp	r7, #0
 80055f8:	dd0c      	ble.n	8005614 <_dtoa_r+0x77c>
 80055fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dd09      	ble.n	8005614 <_dtoa_r+0x77c>
 8005600:	42bb      	cmp	r3, r7
 8005602:	bfa8      	it	ge
 8005604:	463b      	movge	r3, r7
 8005606:	9a06      	ldr	r2, [sp, #24]
 8005608:	1aff      	subs	r7, r7, r3
 800560a:	1ad2      	subs	r2, r2, r3
 800560c:	9206      	str	r2, [sp, #24]
 800560e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	9309      	str	r3, [sp, #36]	; 0x24
 8005614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005616:	b1f3      	cbz	r3, 8005656 <_dtoa_r+0x7be>
 8005618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80a8 	beq.w	8005770 <_dtoa_r+0x8d8>
 8005620:	2c00      	cmp	r4, #0
 8005622:	dd10      	ble.n	8005646 <_dtoa_r+0x7ae>
 8005624:	4631      	mov	r1, r6
 8005626:	4622      	mov	r2, r4
 8005628:	4628      	mov	r0, r5
 800562a:	f001 f9dd 	bl	80069e8 <__pow5mult>
 800562e:	465a      	mov	r2, fp
 8005630:	4601      	mov	r1, r0
 8005632:	4606      	mov	r6, r0
 8005634:	4628      	mov	r0, r5
 8005636:	f001 f92f 	bl	8006898 <__multiply>
 800563a:	4680      	mov	r8, r0
 800563c:	4659      	mov	r1, fp
 800563e:	4628      	mov	r0, r5
 8005640:	f001 f814 	bl	800666c <_Bfree>
 8005644:	46c3      	mov	fp, r8
 8005646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005648:	1b1a      	subs	r2, r3, r4
 800564a:	d004      	beq.n	8005656 <_dtoa_r+0x7be>
 800564c:	4659      	mov	r1, fp
 800564e:	4628      	mov	r0, r5
 8005650:	f001 f9ca 	bl	80069e8 <__pow5mult>
 8005654:	4683      	mov	fp, r0
 8005656:	2101      	movs	r1, #1
 8005658:	4628      	mov	r0, r5
 800565a:	f001 f907 	bl	800686c <__i2b>
 800565e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005660:	4604      	mov	r4, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	f340 8086 	ble.w	8005774 <_dtoa_r+0x8dc>
 8005668:	461a      	mov	r2, r3
 800566a:	4601      	mov	r1, r0
 800566c:	4628      	mov	r0, r5
 800566e:	f001 f9bb 	bl	80069e8 <__pow5mult>
 8005672:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005674:	4604      	mov	r4, r0
 8005676:	2b01      	cmp	r3, #1
 8005678:	dd7f      	ble.n	800577a <_dtoa_r+0x8e2>
 800567a:	f04f 0800 	mov.w	r8, #0
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005684:	6918      	ldr	r0, [r3, #16]
 8005686:	f001 f8a3 	bl	80067d0 <__hi0bits>
 800568a:	f1c0 0020 	rsb	r0, r0, #32
 800568e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005690:	4418      	add	r0, r3
 8005692:	f010 001f 	ands.w	r0, r0, #31
 8005696:	f000 8092 	beq.w	80057be <_dtoa_r+0x926>
 800569a:	f1c0 0320 	rsb	r3, r0, #32
 800569e:	2b04      	cmp	r3, #4
 80056a0:	f340 808a 	ble.w	80057b8 <_dtoa_r+0x920>
 80056a4:	f1c0 001c 	rsb	r0, r0, #28
 80056a8:	9b06      	ldr	r3, [sp, #24]
 80056aa:	4407      	add	r7, r0
 80056ac:	4403      	add	r3, r0
 80056ae:	9306      	str	r3, [sp, #24]
 80056b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b2:	4403      	add	r3, r0
 80056b4:	9309      	str	r3, [sp, #36]	; 0x24
 80056b6:	9b06      	ldr	r3, [sp, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	dd05      	ble.n	80056c8 <_dtoa_r+0x830>
 80056bc:	4659      	mov	r1, fp
 80056be:	461a      	mov	r2, r3
 80056c0:	4628      	mov	r0, r5
 80056c2:	f001 f9eb 	bl	8006a9c <__lshift>
 80056c6:	4683      	mov	fp, r0
 80056c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dd05      	ble.n	80056da <_dtoa_r+0x842>
 80056ce:	4621      	mov	r1, r4
 80056d0:	461a      	mov	r2, r3
 80056d2:	4628      	mov	r0, r5
 80056d4:	f001 f9e2 	bl	8006a9c <__lshift>
 80056d8:	4604      	mov	r4, r0
 80056da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d070      	beq.n	80057c2 <_dtoa_r+0x92a>
 80056e0:	4621      	mov	r1, r4
 80056e2:	4658      	mov	r0, fp
 80056e4:	f001 fa4a 	bl	8006b7c <__mcmp>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	da6a      	bge.n	80057c2 <_dtoa_r+0x92a>
 80056ec:	2300      	movs	r3, #0
 80056ee:	4659      	mov	r1, fp
 80056f0:	220a      	movs	r2, #10
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 ffdc 	bl	80066b0 <__multadd>
 80056f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056fa:	4683      	mov	fp, r0
 80056fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8194 	beq.w	8005a2e <_dtoa_r+0xb96>
 8005706:	4631      	mov	r1, r6
 8005708:	2300      	movs	r3, #0
 800570a:	220a      	movs	r2, #10
 800570c:	4628      	mov	r0, r5
 800570e:	f000 ffcf 	bl	80066b0 <__multadd>
 8005712:	f1b9 0f00 	cmp.w	r9, #0
 8005716:	4606      	mov	r6, r0
 8005718:	f300 8093 	bgt.w	8005842 <_dtoa_r+0x9aa>
 800571c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800571e:	2b02      	cmp	r3, #2
 8005720:	dc57      	bgt.n	80057d2 <_dtoa_r+0x93a>
 8005722:	e08e      	b.n	8005842 <_dtoa_r+0x9aa>
 8005724:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800572a:	e757      	b.n	80055dc <_dtoa_r+0x744>
 800572c:	9b08      	ldr	r3, [sp, #32]
 800572e:	1e5c      	subs	r4, r3, #1
 8005730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005732:	42a3      	cmp	r3, r4
 8005734:	bfb7      	itett	lt
 8005736:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005738:	1b1c      	subge	r4, r3, r4
 800573a:	1ae2      	sublt	r2, r4, r3
 800573c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800573e:	bfbe      	ittt	lt
 8005740:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005742:	189b      	addlt	r3, r3, r2
 8005744:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005746:	9b08      	ldr	r3, [sp, #32]
 8005748:	bfb8      	it	lt
 800574a:	2400      	movlt	r4, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfbb      	ittet	lt
 8005750:	9b06      	ldrlt	r3, [sp, #24]
 8005752:	9a08      	ldrlt	r2, [sp, #32]
 8005754:	9f06      	ldrge	r7, [sp, #24]
 8005756:	1a9f      	sublt	r7, r3, r2
 8005758:	bfac      	ite	ge
 800575a:	9b08      	ldrge	r3, [sp, #32]
 800575c:	2300      	movlt	r3, #0
 800575e:	e73f      	b.n	80055e0 <_dtoa_r+0x748>
 8005760:	3fe00000 	.word	0x3fe00000
 8005764:	40240000 	.word	0x40240000
 8005768:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800576a:	9f06      	ldr	r7, [sp, #24]
 800576c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800576e:	e742      	b.n	80055f6 <_dtoa_r+0x75e>
 8005770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005772:	e76b      	b.n	800564c <_dtoa_r+0x7b4>
 8005774:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005776:	2b01      	cmp	r3, #1
 8005778:	dc19      	bgt.n	80057ae <_dtoa_r+0x916>
 800577a:	9b04      	ldr	r3, [sp, #16]
 800577c:	b9bb      	cbnz	r3, 80057ae <_dtoa_r+0x916>
 800577e:	9b05      	ldr	r3, [sp, #20]
 8005780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005784:	b99b      	cbnz	r3, 80057ae <_dtoa_r+0x916>
 8005786:	9b05      	ldr	r3, [sp, #20]
 8005788:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800578c:	0d1b      	lsrs	r3, r3, #20
 800578e:	051b      	lsls	r3, r3, #20
 8005790:	b183      	cbz	r3, 80057b4 <_dtoa_r+0x91c>
 8005792:	f04f 0801 	mov.w	r8, #1
 8005796:	9b06      	ldr	r3, [sp, #24]
 8005798:	3301      	adds	r3, #1
 800579a:	9306      	str	r3, [sp, #24]
 800579c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579e:	3301      	adds	r3, #1
 80057a0:	9309      	str	r3, [sp, #36]	; 0x24
 80057a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f47f af6a 	bne.w	800567e <_dtoa_r+0x7e6>
 80057aa:	2001      	movs	r0, #1
 80057ac:	e76f      	b.n	800568e <_dtoa_r+0x7f6>
 80057ae:	f04f 0800 	mov.w	r8, #0
 80057b2:	e7f6      	b.n	80057a2 <_dtoa_r+0x90a>
 80057b4:	4698      	mov	r8, r3
 80057b6:	e7f4      	b.n	80057a2 <_dtoa_r+0x90a>
 80057b8:	f43f af7d 	beq.w	80056b6 <_dtoa_r+0x81e>
 80057bc:	4618      	mov	r0, r3
 80057be:	301c      	adds	r0, #28
 80057c0:	e772      	b.n	80056a8 <_dtoa_r+0x810>
 80057c2:	9b08      	ldr	r3, [sp, #32]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	dc36      	bgt.n	8005836 <_dtoa_r+0x99e>
 80057c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	dd33      	ble.n	8005836 <_dtoa_r+0x99e>
 80057ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057d2:	f1b9 0f00 	cmp.w	r9, #0
 80057d6:	d10d      	bne.n	80057f4 <_dtoa_r+0x95c>
 80057d8:	4621      	mov	r1, r4
 80057da:	464b      	mov	r3, r9
 80057dc:	2205      	movs	r2, #5
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 ff66 	bl	80066b0 <__multadd>
 80057e4:	4601      	mov	r1, r0
 80057e6:	4604      	mov	r4, r0
 80057e8:	4658      	mov	r0, fp
 80057ea:	f001 f9c7 	bl	8006b7c <__mcmp>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f73f adb8 	bgt.w	8005364 <_dtoa_r+0x4cc>
 80057f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057f6:	9f03      	ldr	r7, [sp, #12]
 80057f8:	ea6f 0a03 	mvn.w	sl, r3
 80057fc:	f04f 0800 	mov.w	r8, #0
 8005800:	4621      	mov	r1, r4
 8005802:	4628      	mov	r0, r5
 8005804:	f000 ff32 	bl	800666c <_Bfree>
 8005808:	2e00      	cmp	r6, #0
 800580a:	f43f aea7 	beq.w	800555c <_dtoa_r+0x6c4>
 800580e:	f1b8 0f00 	cmp.w	r8, #0
 8005812:	d005      	beq.n	8005820 <_dtoa_r+0x988>
 8005814:	45b0      	cmp	r8, r6
 8005816:	d003      	beq.n	8005820 <_dtoa_r+0x988>
 8005818:	4641      	mov	r1, r8
 800581a:	4628      	mov	r0, r5
 800581c:	f000 ff26 	bl	800666c <_Bfree>
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	f000 ff22 	bl	800666c <_Bfree>
 8005828:	e698      	b.n	800555c <_dtoa_r+0x6c4>
 800582a:	2400      	movs	r4, #0
 800582c:	4626      	mov	r6, r4
 800582e:	e7e1      	b.n	80057f4 <_dtoa_r+0x95c>
 8005830:	46c2      	mov	sl, r8
 8005832:	4626      	mov	r6, r4
 8005834:	e596      	b.n	8005364 <_dtoa_r+0x4cc>
 8005836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005838:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80fd 	beq.w	8005a3c <_dtoa_r+0xba4>
 8005842:	2f00      	cmp	r7, #0
 8005844:	dd05      	ble.n	8005852 <_dtoa_r+0x9ba>
 8005846:	4631      	mov	r1, r6
 8005848:	463a      	mov	r2, r7
 800584a:	4628      	mov	r0, r5
 800584c:	f001 f926 	bl	8006a9c <__lshift>
 8005850:	4606      	mov	r6, r0
 8005852:	f1b8 0f00 	cmp.w	r8, #0
 8005856:	d05c      	beq.n	8005912 <_dtoa_r+0xa7a>
 8005858:	4628      	mov	r0, r5
 800585a:	6871      	ldr	r1, [r6, #4]
 800585c:	f000 fec6 	bl	80065ec <_Balloc>
 8005860:	4607      	mov	r7, r0
 8005862:	b928      	cbnz	r0, 8005870 <_dtoa_r+0x9d8>
 8005864:	4602      	mov	r2, r0
 8005866:	f240 21ea 	movw	r1, #746	; 0x2ea
 800586a:	4b7f      	ldr	r3, [pc, #508]	; (8005a68 <_dtoa_r+0xbd0>)
 800586c:	f7ff bb28 	b.w	8004ec0 <_dtoa_r+0x28>
 8005870:	6932      	ldr	r2, [r6, #16]
 8005872:	f106 010c 	add.w	r1, r6, #12
 8005876:	3202      	adds	r2, #2
 8005878:	0092      	lsls	r2, r2, #2
 800587a:	300c      	adds	r0, #12
 800587c:	f000 fea8 	bl	80065d0 <memcpy>
 8005880:	2201      	movs	r2, #1
 8005882:	4639      	mov	r1, r7
 8005884:	4628      	mov	r0, r5
 8005886:	f001 f909 	bl	8006a9c <__lshift>
 800588a:	46b0      	mov	r8, r6
 800588c:	4606      	mov	r6, r0
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	3301      	adds	r3, #1
 8005892:	9308      	str	r3, [sp, #32]
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	444b      	add	r3, r9
 8005898:	930a      	str	r3, [sp, #40]	; 0x28
 800589a:	9b04      	ldr	r3, [sp, #16]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	9309      	str	r3, [sp, #36]	; 0x24
 80058a2:	9b08      	ldr	r3, [sp, #32]
 80058a4:	4621      	mov	r1, r4
 80058a6:	3b01      	subs	r3, #1
 80058a8:	4658      	mov	r0, fp
 80058aa:	9304      	str	r3, [sp, #16]
 80058ac:	f7ff fa68 	bl	8004d80 <quorem>
 80058b0:	4603      	mov	r3, r0
 80058b2:	4641      	mov	r1, r8
 80058b4:	3330      	adds	r3, #48	; 0x30
 80058b6:	9006      	str	r0, [sp, #24]
 80058b8:	4658      	mov	r0, fp
 80058ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80058bc:	f001 f95e 	bl	8006b7c <__mcmp>
 80058c0:	4632      	mov	r2, r6
 80058c2:	4681      	mov	r9, r0
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	f001 f974 	bl	8006bb4 <__mdiff>
 80058cc:	68c2      	ldr	r2, [r0, #12]
 80058ce:	4607      	mov	r7, r0
 80058d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058d2:	bb02      	cbnz	r2, 8005916 <_dtoa_r+0xa7e>
 80058d4:	4601      	mov	r1, r0
 80058d6:	4658      	mov	r0, fp
 80058d8:	f001 f950 	bl	8006b7c <__mcmp>
 80058dc:	4602      	mov	r2, r0
 80058de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058e0:	4639      	mov	r1, r7
 80058e2:	4628      	mov	r0, r5
 80058e4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80058e8:	f000 fec0 	bl	800666c <_Bfree>
 80058ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058f0:	9f08      	ldr	r7, [sp, #32]
 80058f2:	ea43 0102 	orr.w	r1, r3, r2
 80058f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f8:	430b      	orrs	r3, r1
 80058fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058fc:	d10d      	bne.n	800591a <_dtoa_r+0xa82>
 80058fe:	2b39      	cmp	r3, #57	; 0x39
 8005900:	d029      	beq.n	8005956 <_dtoa_r+0xabe>
 8005902:	f1b9 0f00 	cmp.w	r9, #0
 8005906:	dd01      	ble.n	800590c <_dtoa_r+0xa74>
 8005908:	9b06      	ldr	r3, [sp, #24]
 800590a:	3331      	adds	r3, #49	; 0x31
 800590c:	9a04      	ldr	r2, [sp, #16]
 800590e:	7013      	strb	r3, [r2, #0]
 8005910:	e776      	b.n	8005800 <_dtoa_r+0x968>
 8005912:	4630      	mov	r0, r6
 8005914:	e7b9      	b.n	800588a <_dtoa_r+0x9f2>
 8005916:	2201      	movs	r2, #1
 8005918:	e7e2      	b.n	80058e0 <_dtoa_r+0xa48>
 800591a:	f1b9 0f00 	cmp.w	r9, #0
 800591e:	db06      	blt.n	800592e <_dtoa_r+0xa96>
 8005920:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005922:	ea41 0909 	orr.w	r9, r1, r9
 8005926:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005928:	ea59 0101 	orrs.w	r1, r9, r1
 800592c:	d120      	bne.n	8005970 <_dtoa_r+0xad8>
 800592e:	2a00      	cmp	r2, #0
 8005930:	ddec      	ble.n	800590c <_dtoa_r+0xa74>
 8005932:	4659      	mov	r1, fp
 8005934:	2201      	movs	r2, #1
 8005936:	4628      	mov	r0, r5
 8005938:	9308      	str	r3, [sp, #32]
 800593a:	f001 f8af 	bl	8006a9c <__lshift>
 800593e:	4621      	mov	r1, r4
 8005940:	4683      	mov	fp, r0
 8005942:	f001 f91b 	bl	8006b7c <__mcmp>
 8005946:	2800      	cmp	r0, #0
 8005948:	9b08      	ldr	r3, [sp, #32]
 800594a:	dc02      	bgt.n	8005952 <_dtoa_r+0xaba>
 800594c:	d1de      	bne.n	800590c <_dtoa_r+0xa74>
 800594e:	07da      	lsls	r2, r3, #31
 8005950:	d5dc      	bpl.n	800590c <_dtoa_r+0xa74>
 8005952:	2b39      	cmp	r3, #57	; 0x39
 8005954:	d1d8      	bne.n	8005908 <_dtoa_r+0xa70>
 8005956:	2339      	movs	r3, #57	; 0x39
 8005958:	9a04      	ldr	r2, [sp, #16]
 800595a:	7013      	strb	r3, [r2, #0]
 800595c:	463b      	mov	r3, r7
 800595e:	461f      	mov	r7, r3
 8005960:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005964:	3b01      	subs	r3, #1
 8005966:	2a39      	cmp	r2, #57	; 0x39
 8005968:	d050      	beq.n	8005a0c <_dtoa_r+0xb74>
 800596a:	3201      	adds	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	e747      	b.n	8005800 <_dtoa_r+0x968>
 8005970:	2a00      	cmp	r2, #0
 8005972:	dd03      	ble.n	800597c <_dtoa_r+0xae4>
 8005974:	2b39      	cmp	r3, #57	; 0x39
 8005976:	d0ee      	beq.n	8005956 <_dtoa_r+0xabe>
 8005978:	3301      	adds	r3, #1
 800597a:	e7c7      	b.n	800590c <_dtoa_r+0xa74>
 800597c:	9a08      	ldr	r2, [sp, #32]
 800597e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005980:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005984:	428a      	cmp	r2, r1
 8005986:	d02a      	beq.n	80059de <_dtoa_r+0xb46>
 8005988:	4659      	mov	r1, fp
 800598a:	2300      	movs	r3, #0
 800598c:	220a      	movs	r2, #10
 800598e:	4628      	mov	r0, r5
 8005990:	f000 fe8e 	bl	80066b0 <__multadd>
 8005994:	45b0      	cmp	r8, r6
 8005996:	4683      	mov	fp, r0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	f04f 020a 	mov.w	r2, #10
 80059a0:	4641      	mov	r1, r8
 80059a2:	4628      	mov	r0, r5
 80059a4:	d107      	bne.n	80059b6 <_dtoa_r+0xb1e>
 80059a6:	f000 fe83 	bl	80066b0 <__multadd>
 80059aa:	4680      	mov	r8, r0
 80059ac:	4606      	mov	r6, r0
 80059ae:	9b08      	ldr	r3, [sp, #32]
 80059b0:	3301      	adds	r3, #1
 80059b2:	9308      	str	r3, [sp, #32]
 80059b4:	e775      	b.n	80058a2 <_dtoa_r+0xa0a>
 80059b6:	f000 fe7b 	bl	80066b0 <__multadd>
 80059ba:	4631      	mov	r1, r6
 80059bc:	4680      	mov	r8, r0
 80059be:	2300      	movs	r3, #0
 80059c0:	220a      	movs	r2, #10
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 fe74 	bl	80066b0 <__multadd>
 80059c8:	4606      	mov	r6, r0
 80059ca:	e7f0      	b.n	80059ae <_dtoa_r+0xb16>
 80059cc:	f1b9 0f00 	cmp.w	r9, #0
 80059d0:	bfcc      	ite	gt
 80059d2:	464f      	movgt	r7, r9
 80059d4:	2701      	movle	r7, #1
 80059d6:	f04f 0800 	mov.w	r8, #0
 80059da:	9a03      	ldr	r2, [sp, #12]
 80059dc:	4417      	add	r7, r2
 80059de:	4659      	mov	r1, fp
 80059e0:	2201      	movs	r2, #1
 80059e2:	4628      	mov	r0, r5
 80059e4:	9308      	str	r3, [sp, #32]
 80059e6:	f001 f859 	bl	8006a9c <__lshift>
 80059ea:	4621      	mov	r1, r4
 80059ec:	4683      	mov	fp, r0
 80059ee:	f001 f8c5 	bl	8006b7c <__mcmp>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	dcb2      	bgt.n	800595c <_dtoa_r+0xac4>
 80059f6:	d102      	bne.n	80059fe <_dtoa_r+0xb66>
 80059f8:	9b08      	ldr	r3, [sp, #32]
 80059fa:	07db      	lsls	r3, r3, #31
 80059fc:	d4ae      	bmi.n	800595c <_dtoa_r+0xac4>
 80059fe:	463b      	mov	r3, r7
 8005a00:	461f      	mov	r7, r3
 8005a02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a06:	2a30      	cmp	r2, #48	; 0x30
 8005a08:	d0fa      	beq.n	8005a00 <_dtoa_r+0xb68>
 8005a0a:	e6f9      	b.n	8005800 <_dtoa_r+0x968>
 8005a0c:	9a03      	ldr	r2, [sp, #12]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d1a5      	bne.n	800595e <_dtoa_r+0xac6>
 8005a12:	2331      	movs	r3, #49	; 0x31
 8005a14:	f10a 0a01 	add.w	sl, sl, #1
 8005a18:	e779      	b.n	800590e <_dtoa_r+0xa76>
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <_dtoa_r+0xbd4>)
 8005a1c:	f7ff baa8 	b.w	8004f70 <_dtoa_r+0xd8>
 8005a20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f47f aa81 	bne.w	8004f2a <_dtoa_r+0x92>
 8005a28:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <_dtoa_r+0xbd8>)
 8005a2a:	f7ff baa1 	b.w	8004f70 <_dtoa_r+0xd8>
 8005a2e:	f1b9 0f00 	cmp.w	r9, #0
 8005a32:	dc03      	bgt.n	8005a3c <_dtoa_r+0xba4>
 8005a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	f73f aecb 	bgt.w	80057d2 <_dtoa_r+0x93a>
 8005a3c:	9f03      	ldr	r7, [sp, #12]
 8005a3e:	4621      	mov	r1, r4
 8005a40:	4658      	mov	r0, fp
 8005a42:	f7ff f99d 	bl	8004d80 <quorem>
 8005a46:	9a03      	ldr	r2, [sp, #12]
 8005a48:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005a4c:	f807 3b01 	strb.w	r3, [r7], #1
 8005a50:	1aba      	subs	r2, r7, r2
 8005a52:	4591      	cmp	r9, r2
 8005a54:	ddba      	ble.n	80059cc <_dtoa_r+0xb34>
 8005a56:	4659      	mov	r1, fp
 8005a58:	2300      	movs	r3, #0
 8005a5a:	220a      	movs	r2, #10
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 fe27 	bl	80066b0 <__multadd>
 8005a62:	4683      	mov	fp, r0
 8005a64:	e7eb      	b.n	8005a3e <_dtoa_r+0xba6>
 8005a66:	bf00      	nop
 8005a68:	08007c78 	.word	0x08007c78
 8005a6c:	08007a78 	.word	0x08007a78
 8005a70:	08007bf9 	.word	0x08007bf9

08005a74 <__sflush_r>:
 8005a74:	898a      	ldrh	r2, [r1, #12]
 8005a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a78:	4605      	mov	r5, r0
 8005a7a:	0710      	lsls	r0, r2, #28
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	d457      	bmi.n	8005b30 <__sflush_r+0xbc>
 8005a80:	684b      	ldr	r3, [r1, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	dc04      	bgt.n	8005a90 <__sflush_r+0x1c>
 8005a86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dc01      	bgt.n	8005a90 <__sflush_r+0x1c>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a92:	2e00      	cmp	r6, #0
 8005a94:	d0fa      	beq.n	8005a8c <__sflush_r+0x18>
 8005a96:	2300      	movs	r3, #0
 8005a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a9c:	682f      	ldr	r7, [r5, #0]
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	d032      	beq.n	8005b08 <__sflush_r+0x94>
 8005aa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	075a      	lsls	r2, r3, #29
 8005aa8:	d505      	bpl.n	8005ab6 <__sflush_r+0x42>
 8005aaa:	6863      	ldr	r3, [r4, #4]
 8005aac:	1ac0      	subs	r0, r0, r3
 8005aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ab0:	b10b      	cbz	r3, 8005ab6 <__sflush_r+0x42>
 8005ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ab4:	1ac0      	subs	r0, r0, r3
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	4602      	mov	r2, r0
 8005aba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005abc:	4628      	mov	r0, r5
 8005abe:	6a21      	ldr	r1, [r4, #32]
 8005ac0:	47b0      	blx	r6
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	d106      	bne.n	8005ad6 <__sflush_r+0x62>
 8005ac8:	6829      	ldr	r1, [r5, #0]
 8005aca:	291d      	cmp	r1, #29
 8005acc:	d82c      	bhi.n	8005b28 <__sflush_r+0xb4>
 8005ace:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <__sflush_r+0x100>)
 8005ad0:	40ca      	lsrs	r2, r1
 8005ad2:	07d6      	lsls	r6, r2, #31
 8005ad4:	d528      	bpl.n	8005b28 <__sflush_r+0xb4>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	6062      	str	r2, [r4, #4]
 8005ada:	6922      	ldr	r2, [r4, #16]
 8005adc:	04d9      	lsls	r1, r3, #19
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	d504      	bpl.n	8005aec <__sflush_r+0x78>
 8005ae2:	1c42      	adds	r2, r0, #1
 8005ae4:	d101      	bne.n	8005aea <__sflush_r+0x76>
 8005ae6:	682b      	ldr	r3, [r5, #0]
 8005ae8:	b903      	cbnz	r3, 8005aec <__sflush_r+0x78>
 8005aea:	6560      	str	r0, [r4, #84]	; 0x54
 8005aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aee:	602f      	str	r7, [r5, #0]
 8005af0:	2900      	cmp	r1, #0
 8005af2:	d0cb      	beq.n	8005a8c <__sflush_r+0x18>
 8005af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005af8:	4299      	cmp	r1, r3
 8005afa:	d002      	beq.n	8005b02 <__sflush_r+0x8e>
 8005afc:	4628      	mov	r0, r5
 8005afe:	f001 fa41 	bl	8006f84 <_free_r>
 8005b02:	2000      	movs	r0, #0
 8005b04:	6360      	str	r0, [r4, #52]	; 0x34
 8005b06:	e7c2      	b.n	8005a8e <__sflush_r+0x1a>
 8005b08:	6a21      	ldr	r1, [r4, #32]
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b0      	blx	r6
 8005b10:	1c41      	adds	r1, r0, #1
 8005b12:	d1c7      	bne.n	8005aa4 <__sflush_r+0x30>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0c4      	beq.n	8005aa4 <__sflush_r+0x30>
 8005b1a:	2b1d      	cmp	r3, #29
 8005b1c:	d001      	beq.n	8005b22 <__sflush_r+0xae>
 8005b1e:	2b16      	cmp	r3, #22
 8005b20:	d101      	bne.n	8005b26 <__sflush_r+0xb2>
 8005b22:	602f      	str	r7, [r5, #0]
 8005b24:	e7b2      	b.n	8005a8c <__sflush_r+0x18>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b2c:	81a3      	strh	r3, [r4, #12]
 8005b2e:	e7ae      	b.n	8005a8e <__sflush_r+0x1a>
 8005b30:	690f      	ldr	r7, [r1, #16]
 8005b32:	2f00      	cmp	r7, #0
 8005b34:	d0aa      	beq.n	8005a8c <__sflush_r+0x18>
 8005b36:	0793      	lsls	r3, r2, #30
 8005b38:	bf18      	it	ne
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	680e      	ldr	r6, [r1, #0]
 8005b3e:	bf08      	it	eq
 8005b40:	694b      	ldreq	r3, [r1, #20]
 8005b42:	1bf6      	subs	r6, r6, r7
 8005b44:	600f      	str	r7, [r1, #0]
 8005b46:	608b      	str	r3, [r1, #8]
 8005b48:	2e00      	cmp	r6, #0
 8005b4a:	dd9f      	ble.n	8005a8c <__sflush_r+0x18>
 8005b4c:	4633      	mov	r3, r6
 8005b4e:	463a      	mov	r2, r7
 8005b50:	4628      	mov	r0, r5
 8005b52:	6a21      	ldr	r1, [r4, #32]
 8005b54:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005b58:	47e0      	blx	ip
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	dc06      	bgt.n	8005b6c <__sflush_r+0xf8>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	e790      	b.n	8005a8e <__sflush_r+0x1a>
 8005b6c:	4407      	add	r7, r0
 8005b6e:	1a36      	subs	r6, r6, r0
 8005b70:	e7ea      	b.n	8005b48 <__sflush_r+0xd4>
 8005b72:	bf00      	nop
 8005b74:	20400001 	.word	0x20400001

08005b78 <_fflush_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	690b      	ldr	r3, [r1, #16]
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	b913      	cbnz	r3, 8005b88 <_fflush_r+0x10>
 8005b82:	2500      	movs	r5, #0
 8005b84:	4628      	mov	r0, r5
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	b118      	cbz	r0, 8005b92 <_fflush_r+0x1a>
 8005b8a:	6983      	ldr	r3, [r0, #24]
 8005b8c:	b90b      	cbnz	r3, 8005b92 <_fflush_r+0x1a>
 8005b8e:	f000 f887 	bl	8005ca0 <__sinit>
 8005b92:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <_fflush_r+0x6c>)
 8005b94:	429c      	cmp	r4, r3
 8005b96:	d11b      	bne.n	8005bd0 <_fflush_r+0x58>
 8005b98:	686c      	ldr	r4, [r5, #4]
 8005b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ef      	beq.n	8005b82 <_fflush_r+0xa>
 8005ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ba4:	07d0      	lsls	r0, r2, #31
 8005ba6:	d404      	bmi.n	8005bb2 <_fflush_r+0x3a>
 8005ba8:	0599      	lsls	r1, r3, #22
 8005baa:	d402      	bmi.n	8005bb2 <_fflush_r+0x3a>
 8005bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bae:	f000 fc80 	bl	80064b2 <__retarget_lock_acquire_recursive>
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	f7ff ff5d 	bl	8005a74 <__sflush_r>
 8005bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	07da      	lsls	r2, r3, #31
 8005bc0:	d4e0      	bmi.n	8005b84 <_fflush_r+0xc>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	059b      	lsls	r3, r3, #22
 8005bc6:	d4dd      	bmi.n	8005b84 <_fflush_r+0xc>
 8005bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bca:	f000 fc73 	bl	80064b4 <__retarget_lock_release_recursive>
 8005bce:	e7d9      	b.n	8005b84 <_fflush_r+0xc>
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <_fflush_r+0x70>)
 8005bd2:	429c      	cmp	r4, r3
 8005bd4:	d101      	bne.n	8005bda <_fflush_r+0x62>
 8005bd6:	68ac      	ldr	r4, [r5, #8]
 8005bd8:	e7df      	b.n	8005b9a <_fflush_r+0x22>
 8005bda:	4b04      	ldr	r3, [pc, #16]	; (8005bec <_fflush_r+0x74>)
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	bf08      	it	eq
 8005be0:	68ec      	ldreq	r4, [r5, #12]
 8005be2:	e7da      	b.n	8005b9a <_fflush_r+0x22>
 8005be4:	08007cac 	.word	0x08007cac
 8005be8:	08007ccc 	.word	0x08007ccc
 8005bec:	08007c8c 	.word	0x08007c8c

08005bf0 <std>:
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	b510      	push	{r4, lr}
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bfe:	6083      	str	r3, [r0, #8]
 8005c00:	8181      	strh	r1, [r0, #12]
 8005c02:	6643      	str	r3, [r0, #100]	; 0x64
 8005c04:	81c2      	strh	r2, [r0, #14]
 8005c06:	6183      	str	r3, [r0, #24]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	305c      	adds	r0, #92	; 0x5c
 8005c0e:	f7fd fa57 	bl	80030c0 <memset>
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <std+0x38>)
 8005c14:	6224      	str	r4, [r4, #32]
 8005c16:	6263      	str	r3, [r4, #36]	; 0x24
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <std+0x3c>)
 8005c1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <std+0x40>)
 8005c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <std+0x44>)
 8005c22:	6323      	str	r3, [r4, #48]	; 0x30
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	08007421 	.word	0x08007421
 8005c2c:	08007443 	.word	0x08007443
 8005c30:	0800747b 	.word	0x0800747b
 8005c34:	0800749f 	.word	0x0800749f

08005c38 <_cleanup_r>:
 8005c38:	4901      	ldr	r1, [pc, #4]	; (8005c40 <_cleanup_r+0x8>)
 8005c3a:	f000 b8af 	b.w	8005d9c <_fwalk_reent>
 8005c3e:	bf00      	nop
 8005c40:	08005b79 	.word	0x08005b79

08005c44 <__sfmoreglue>:
 8005c44:	2268      	movs	r2, #104	; 0x68
 8005c46:	b570      	push	{r4, r5, r6, lr}
 8005c48:	1e4d      	subs	r5, r1, #1
 8005c4a:	4355      	muls	r5, r2
 8005c4c:	460e      	mov	r6, r1
 8005c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c52:	f001 f9ff 	bl	8007054 <_malloc_r>
 8005c56:	4604      	mov	r4, r0
 8005c58:	b140      	cbz	r0, 8005c6c <__sfmoreglue+0x28>
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c60:	300c      	adds	r0, #12
 8005c62:	60a0      	str	r0, [r4, #8]
 8005c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c68:	f7fd fa2a 	bl	80030c0 <memset>
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}

08005c70 <__sfp_lock_acquire>:
 8005c70:	4801      	ldr	r0, [pc, #4]	; (8005c78 <__sfp_lock_acquire+0x8>)
 8005c72:	f000 bc1e 	b.w	80064b2 <__retarget_lock_acquire_recursive>
 8005c76:	bf00      	nop
 8005c78:	20000251 	.word	0x20000251

08005c7c <__sfp_lock_release>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	; (8005c84 <__sfp_lock_release+0x8>)
 8005c7e:	f000 bc19 	b.w	80064b4 <__retarget_lock_release_recursive>
 8005c82:	bf00      	nop
 8005c84:	20000251 	.word	0x20000251

08005c88 <__sinit_lock_acquire>:
 8005c88:	4801      	ldr	r0, [pc, #4]	; (8005c90 <__sinit_lock_acquire+0x8>)
 8005c8a:	f000 bc12 	b.w	80064b2 <__retarget_lock_acquire_recursive>
 8005c8e:	bf00      	nop
 8005c90:	20000252 	.word	0x20000252

08005c94 <__sinit_lock_release>:
 8005c94:	4801      	ldr	r0, [pc, #4]	; (8005c9c <__sinit_lock_release+0x8>)
 8005c96:	f000 bc0d 	b.w	80064b4 <__retarget_lock_release_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	20000252 	.word	0x20000252

08005ca0 <__sinit>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	f7ff fff0 	bl	8005c88 <__sinit_lock_acquire>
 8005ca8:	69a3      	ldr	r3, [r4, #24]
 8005caa:	b11b      	cbz	r3, 8005cb4 <__sinit+0x14>
 8005cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb0:	f7ff bff0 	b.w	8005c94 <__sinit_lock_release>
 8005cb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005cb8:	6523      	str	r3, [r4, #80]	; 0x50
 8005cba:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <__sinit+0x68>)
 8005cbc:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <__sinit+0x6c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	bf08      	it	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	4620      	mov	r0, r4
 8005cca:	bf08      	it	eq
 8005ccc:	61a3      	streq	r3, [r4, #24]
 8005cce:	f000 f81f 	bl	8005d10 <__sfp>
 8005cd2:	6060      	str	r0, [r4, #4]
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 f81b 	bl	8005d10 <__sfp>
 8005cda:	60a0      	str	r0, [r4, #8]
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 f817 	bl	8005d10 <__sfp>
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2104      	movs	r1, #4
 8005ce6:	60e0      	str	r0, [r4, #12]
 8005ce8:	6860      	ldr	r0, [r4, #4]
 8005cea:	f7ff ff81 	bl	8005bf0 <std>
 8005cee:	2201      	movs	r2, #1
 8005cf0:	2109      	movs	r1, #9
 8005cf2:	68a0      	ldr	r0, [r4, #8]
 8005cf4:	f7ff ff7c 	bl	8005bf0 <std>
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	2112      	movs	r1, #18
 8005cfc:	68e0      	ldr	r0, [r4, #12]
 8005cfe:	f7ff ff77 	bl	8005bf0 <std>
 8005d02:	2301      	movs	r3, #1
 8005d04:	61a3      	str	r3, [r4, #24]
 8005d06:	e7d1      	b.n	8005cac <__sinit+0xc>
 8005d08:	08007a64 	.word	0x08007a64
 8005d0c:	08005c39 	.word	0x08005c39

08005d10 <__sfp>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	4607      	mov	r7, r0
 8005d14:	f7ff ffac 	bl	8005c70 <__sfp_lock_acquire>
 8005d18:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <__sfp+0x84>)
 8005d1a:	681e      	ldr	r6, [r3, #0]
 8005d1c:	69b3      	ldr	r3, [r6, #24]
 8005d1e:	b913      	cbnz	r3, 8005d26 <__sfp+0x16>
 8005d20:	4630      	mov	r0, r6
 8005d22:	f7ff ffbd 	bl	8005ca0 <__sinit>
 8005d26:	3648      	adds	r6, #72	; 0x48
 8005d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	d503      	bpl.n	8005d38 <__sfp+0x28>
 8005d30:	6833      	ldr	r3, [r6, #0]
 8005d32:	b30b      	cbz	r3, 8005d78 <__sfp+0x68>
 8005d34:	6836      	ldr	r6, [r6, #0]
 8005d36:	e7f7      	b.n	8005d28 <__sfp+0x18>
 8005d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d3c:	b9d5      	cbnz	r5, 8005d74 <__sfp+0x64>
 8005d3e:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <__sfp+0x88>)
 8005d40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d44:	60e3      	str	r3, [r4, #12]
 8005d46:	6665      	str	r5, [r4, #100]	; 0x64
 8005d48:	f000 fbb2 	bl	80064b0 <__retarget_lock_init_recursive>
 8005d4c:	f7ff ff96 	bl	8005c7c <__sfp_lock_release>
 8005d50:	2208      	movs	r2, #8
 8005d52:	4629      	mov	r1, r5
 8005d54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d5c:	6025      	str	r5, [r4, #0]
 8005d5e:	61a5      	str	r5, [r4, #24]
 8005d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d64:	f7fd f9ac 	bl	80030c0 <memset>
 8005d68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d70:	4620      	mov	r0, r4
 8005d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d74:	3468      	adds	r4, #104	; 0x68
 8005d76:	e7d9      	b.n	8005d2c <__sfp+0x1c>
 8005d78:	2104      	movs	r1, #4
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	f7ff ff62 	bl	8005c44 <__sfmoreglue>
 8005d80:	4604      	mov	r4, r0
 8005d82:	6030      	str	r0, [r6, #0]
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d1d5      	bne.n	8005d34 <__sfp+0x24>
 8005d88:	f7ff ff78 	bl	8005c7c <__sfp_lock_release>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	e7ee      	b.n	8005d70 <__sfp+0x60>
 8005d92:	bf00      	nop
 8005d94:	08007a64 	.word	0x08007a64
 8005d98:	ffff0001 	.word	0xffff0001

08005d9c <_fwalk_reent>:
 8005d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da0:	4606      	mov	r6, r0
 8005da2:	4688      	mov	r8, r1
 8005da4:	2700      	movs	r7, #0
 8005da6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005daa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dae:	f1b9 0901 	subs.w	r9, r9, #1
 8005db2:	d505      	bpl.n	8005dc0 <_fwalk_reent+0x24>
 8005db4:	6824      	ldr	r4, [r4, #0]
 8005db6:	2c00      	cmp	r4, #0
 8005db8:	d1f7      	bne.n	8005daa <_fwalk_reent+0xe>
 8005dba:	4638      	mov	r0, r7
 8005dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dc0:	89ab      	ldrh	r3, [r5, #12]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d907      	bls.n	8005dd6 <_fwalk_reent+0x3a>
 8005dc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	d003      	beq.n	8005dd6 <_fwalk_reent+0x3a>
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	47c0      	blx	r8
 8005dd4:	4307      	orrs	r7, r0
 8005dd6:	3568      	adds	r5, #104	; 0x68
 8005dd8:	e7e9      	b.n	8005dae <_fwalk_reent+0x12>

08005dda <rshift>:
 8005dda:	6903      	ldr	r3, [r0, #16]
 8005ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005de0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005de4:	f100 0414 	add.w	r4, r0, #20
 8005de8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005dec:	dd46      	ble.n	8005e7c <rshift+0xa2>
 8005dee:	f011 011f 	ands.w	r1, r1, #31
 8005df2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005df6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005dfa:	d10c      	bne.n	8005e16 <rshift+0x3c>
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f100 0710 	add.w	r7, r0, #16
 8005e02:	42b1      	cmp	r1, r6
 8005e04:	d335      	bcc.n	8005e72 <rshift+0x98>
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	1eea      	subs	r2, r5, #3
 8005e0c:	4296      	cmp	r6, r2
 8005e0e:	bf38      	it	cc
 8005e10:	2300      	movcc	r3, #0
 8005e12:	4423      	add	r3, r4
 8005e14:	e015      	b.n	8005e42 <rshift+0x68>
 8005e16:	46a1      	mov	r9, r4
 8005e18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005e1c:	f1c1 0820 	rsb	r8, r1, #32
 8005e20:	40cf      	lsrs	r7, r1
 8005e22:	f105 0e04 	add.w	lr, r5, #4
 8005e26:	4576      	cmp	r6, lr
 8005e28:	46f4      	mov	ip, lr
 8005e2a:	d816      	bhi.n	8005e5a <rshift+0x80>
 8005e2c:	1a9a      	subs	r2, r3, r2
 8005e2e:	0092      	lsls	r2, r2, #2
 8005e30:	3a04      	subs	r2, #4
 8005e32:	3501      	adds	r5, #1
 8005e34:	42ae      	cmp	r6, r5
 8005e36:	bf38      	it	cc
 8005e38:	2200      	movcc	r2, #0
 8005e3a:	18a3      	adds	r3, r4, r2
 8005e3c:	50a7      	str	r7, [r4, r2]
 8005e3e:	b107      	cbz	r7, 8005e42 <rshift+0x68>
 8005e40:	3304      	adds	r3, #4
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	eba3 0204 	sub.w	r2, r3, r4
 8005e48:	bf08      	it	eq
 8005e4a:	2300      	moveq	r3, #0
 8005e4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005e50:	6102      	str	r2, [r0, #16]
 8005e52:	bf08      	it	eq
 8005e54:	6143      	streq	r3, [r0, #20]
 8005e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e5a:	f8dc c000 	ldr.w	ip, [ip]
 8005e5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8005e62:	ea4c 0707 	orr.w	r7, ip, r7
 8005e66:	f849 7b04 	str.w	r7, [r9], #4
 8005e6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005e6e:	40cf      	lsrs	r7, r1
 8005e70:	e7d9      	b.n	8005e26 <rshift+0x4c>
 8005e72:	f851 cb04 	ldr.w	ip, [r1], #4
 8005e76:	f847 cf04 	str.w	ip, [r7, #4]!
 8005e7a:	e7c2      	b.n	8005e02 <rshift+0x28>
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	e7e0      	b.n	8005e42 <rshift+0x68>

08005e80 <__hexdig_fun>:
 8005e80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005e84:	2b09      	cmp	r3, #9
 8005e86:	d802      	bhi.n	8005e8e <__hexdig_fun+0xe>
 8005e88:	3820      	subs	r0, #32
 8005e8a:	b2c0      	uxtb	r0, r0
 8005e8c:	4770      	bx	lr
 8005e8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d801      	bhi.n	8005e9a <__hexdig_fun+0x1a>
 8005e96:	3847      	subs	r0, #71	; 0x47
 8005e98:	e7f7      	b.n	8005e8a <__hexdig_fun+0xa>
 8005e9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	d801      	bhi.n	8005ea6 <__hexdig_fun+0x26>
 8005ea2:	3827      	subs	r0, #39	; 0x27
 8005ea4:	e7f1      	b.n	8005e8a <__hexdig_fun+0xa>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	4770      	bx	lr
	...

08005eac <__gethex>:
 8005eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb0:	b08b      	sub	sp, #44	; 0x2c
 8005eb2:	9305      	str	r3, [sp, #20]
 8005eb4:	4bb2      	ldr	r3, [pc, #712]	; (8006180 <__gethex+0x2d4>)
 8005eb6:	9002      	str	r0, [sp, #8]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	468b      	mov	fp, r1
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	4690      	mov	r8, r2
 8005ec0:	9303      	str	r3, [sp, #12]
 8005ec2:	f7fa f9b1 	bl	8000228 <strlen>
 8005ec6:	4682      	mov	sl, r0
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	f8db 2000 	ldr.w	r2, [fp]
 8005ece:	4403      	add	r3, r0
 8005ed0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005ed4:	9306      	str	r3, [sp, #24]
 8005ed6:	1c93      	adds	r3, r2, #2
 8005ed8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005edc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005ee0:	32fe      	adds	r2, #254	; 0xfe
 8005ee2:	18d1      	adds	r1, r2, r3
 8005ee4:	461f      	mov	r7, r3
 8005ee6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005eea:	9101      	str	r1, [sp, #4]
 8005eec:	2830      	cmp	r0, #48	; 0x30
 8005eee:	d0f8      	beq.n	8005ee2 <__gethex+0x36>
 8005ef0:	f7ff ffc6 	bl	8005e80 <__hexdig_fun>
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d13a      	bne.n	8005f70 <__gethex+0xc4>
 8005efa:	4652      	mov	r2, sl
 8005efc:	4638      	mov	r0, r7
 8005efe:	9903      	ldr	r1, [sp, #12]
 8005f00:	f001 fad1 	bl	80074a6 <strncmp>
 8005f04:	4605      	mov	r5, r0
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d166      	bne.n	8005fd8 <__gethex+0x12c>
 8005f0a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005f0e:	eb07 060a 	add.w	r6, r7, sl
 8005f12:	f7ff ffb5 	bl	8005e80 <__hexdig_fun>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d060      	beq.n	8005fdc <__gethex+0x130>
 8005f1a:	4633      	mov	r3, r6
 8005f1c:	7818      	ldrb	r0, [r3, #0]
 8005f1e:	461f      	mov	r7, r3
 8005f20:	2830      	cmp	r0, #48	; 0x30
 8005f22:	f103 0301 	add.w	r3, r3, #1
 8005f26:	d0f9      	beq.n	8005f1c <__gethex+0x70>
 8005f28:	f7ff ffaa 	bl	8005e80 <__hexdig_fun>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	fab0 f480 	clz	r4, r0
 8005f32:	4635      	mov	r5, r6
 8005f34:	0964      	lsrs	r4, r4, #5
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	463a      	mov	r2, r7
 8005f3a:	4616      	mov	r6, r2
 8005f3c:	7830      	ldrb	r0, [r6, #0]
 8005f3e:	3201      	adds	r2, #1
 8005f40:	f7ff ff9e 	bl	8005e80 <__hexdig_fun>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d1f8      	bne.n	8005f3a <__gethex+0x8e>
 8005f48:	4652      	mov	r2, sl
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	9903      	ldr	r1, [sp, #12]
 8005f4e:	f001 faaa 	bl	80074a6 <strncmp>
 8005f52:	b980      	cbnz	r0, 8005f76 <__gethex+0xca>
 8005f54:	b94d      	cbnz	r5, 8005f6a <__gethex+0xbe>
 8005f56:	eb06 050a 	add.w	r5, r6, sl
 8005f5a:	462a      	mov	r2, r5
 8005f5c:	4616      	mov	r6, r2
 8005f5e:	7830      	ldrb	r0, [r6, #0]
 8005f60:	3201      	adds	r2, #1
 8005f62:	f7ff ff8d 	bl	8005e80 <__hexdig_fun>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d1f8      	bne.n	8005f5c <__gethex+0xb0>
 8005f6a:	1bad      	subs	r5, r5, r6
 8005f6c:	00ad      	lsls	r5, r5, #2
 8005f6e:	e004      	b.n	8005f7a <__gethex+0xce>
 8005f70:	2400      	movs	r4, #0
 8005f72:	4625      	mov	r5, r4
 8005f74:	e7e0      	b.n	8005f38 <__gethex+0x8c>
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	d1f7      	bne.n	8005f6a <__gethex+0xbe>
 8005f7a:	7833      	ldrb	r3, [r6, #0]
 8005f7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d139      	bne.n	8005ff8 <__gethex+0x14c>
 8005f84:	7873      	ldrb	r3, [r6, #1]
 8005f86:	2b2b      	cmp	r3, #43	; 0x2b
 8005f88:	d02a      	beq.n	8005fe0 <__gethex+0x134>
 8005f8a:	2b2d      	cmp	r3, #45	; 0x2d
 8005f8c:	d02c      	beq.n	8005fe8 <__gethex+0x13c>
 8005f8e:	f04f 0900 	mov.w	r9, #0
 8005f92:	1c71      	adds	r1, r6, #1
 8005f94:	7808      	ldrb	r0, [r1, #0]
 8005f96:	f7ff ff73 	bl	8005e80 <__hexdig_fun>
 8005f9a:	1e43      	subs	r3, r0, #1
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b18      	cmp	r3, #24
 8005fa0:	d82a      	bhi.n	8005ff8 <__gethex+0x14c>
 8005fa2:	f1a0 0210 	sub.w	r2, r0, #16
 8005fa6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005faa:	f7ff ff69 	bl	8005e80 <__hexdig_fun>
 8005fae:	1e43      	subs	r3, r0, #1
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b18      	cmp	r3, #24
 8005fb4:	d91b      	bls.n	8005fee <__gethex+0x142>
 8005fb6:	f1b9 0f00 	cmp.w	r9, #0
 8005fba:	d000      	beq.n	8005fbe <__gethex+0x112>
 8005fbc:	4252      	negs	r2, r2
 8005fbe:	4415      	add	r5, r2
 8005fc0:	f8cb 1000 	str.w	r1, [fp]
 8005fc4:	b1d4      	cbz	r4, 8005ffc <__gethex+0x150>
 8005fc6:	9b01      	ldr	r3, [sp, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bf14      	ite	ne
 8005fcc:	2700      	movne	r7, #0
 8005fce:	2706      	moveq	r7, #6
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	b00b      	add	sp, #44	; 0x2c
 8005fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd8:	463e      	mov	r6, r7
 8005fda:	4625      	mov	r5, r4
 8005fdc:	2401      	movs	r4, #1
 8005fde:	e7cc      	b.n	8005f7a <__gethex+0xce>
 8005fe0:	f04f 0900 	mov.w	r9, #0
 8005fe4:	1cb1      	adds	r1, r6, #2
 8005fe6:	e7d5      	b.n	8005f94 <__gethex+0xe8>
 8005fe8:	f04f 0901 	mov.w	r9, #1
 8005fec:	e7fa      	b.n	8005fe4 <__gethex+0x138>
 8005fee:	230a      	movs	r3, #10
 8005ff0:	fb03 0202 	mla	r2, r3, r2, r0
 8005ff4:	3a10      	subs	r2, #16
 8005ff6:	e7d6      	b.n	8005fa6 <__gethex+0xfa>
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	e7e1      	b.n	8005fc0 <__gethex+0x114>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	1bf3      	subs	r3, r6, r7
 8006000:	3b01      	subs	r3, #1
 8006002:	2b07      	cmp	r3, #7
 8006004:	dc0a      	bgt.n	800601c <__gethex+0x170>
 8006006:	9802      	ldr	r0, [sp, #8]
 8006008:	f000 faf0 	bl	80065ec <_Balloc>
 800600c:	4604      	mov	r4, r0
 800600e:	b940      	cbnz	r0, 8006022 <__gethex+0x176>
 8006010:	4602      	mov	r2, r0
 8006012:	21de      	movs	r1, #222	; 0xde
 8006014:	4b5b      	ldr	r3, [pc, #364]	; (8006184 <__gethex+0x2d8>)
 8006016:	485c      	ldr	r0, [pc, #368]	; (8006188 <__gethex+0x2dc>)
 8006018:	f001 fa78 	bl	800750c <__assert_func>
 800601c:	3101      	adds	r1, #1
 800601e:	105b      	asrs	r3, r3, #1
 8006020:	e7ef      	b.n	8006002 <__gethex+0x156>
 8006022:	f04f 0b00 	mov.w	fp, #0
 8006026:	f100 0914 	add.w	r9, r0, #20
 800602a:	f1ca 0301 	rsb	r3, sl, #1
 800602e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006032:	f8cd b004 	str.w	fp, [sp, #4]
 8006036:	9308      	str	r3, [sp, #32]
 8006038:	42b7      	cmp	r7, r6
 800603a:	d33f      	bcc.n	80060bc <__gethex+0x210>
 800603c:	9f04      	ldr	r7, [sp, #16]
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	f847 3b04 	str.w	r3, [r7], #4
 8006044:	eba7 0709 	sub.w	r7, r7, r9
 8006048:	10bf      	asrs	r7, r7, #2
 800604a:	6127      	str	r7, [r4, #16]
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fbbf 	bl	80067d0 <__hi0bits>
 8006052:	017f      	lsls	r7, r7, #5
 8006054:	f8d8 6000 	ldr.w	r6, [r8]
 8006058:	1a3f      	subs	r7, r7, r0
 800605a:	42b7      	cmp	r7, r6
 800605c:	dd62      	ble.n	8006124 <__gethex+0x278>
 800605e:	1bbf      	subs	r7, r7, r6
 8006060:	4639      	mov	r1, r7
 8006062:	4620      	mov	r0, r4
 8006064:	f000 ff59 	bl	8006f1a <__any_on>
 8006068:	4682      	mov	sl, r0
 800606a:	b1a8      	cbz	r0, 8006098 <__gethex+0x1ec>
 800606c:	f04f 0a01 	mov.w	sl, #1
 8006070:	1e7b      	subs	r3, r7, #1
 8006072:	1159      	asrs	r1, r3, #5
 8006074:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006078:	f003 021f 	and.w	r2, r3, #31
 800607c:	fa0a f202 	lsl.w	r2, sl, r2
 8006080:	420a      	tst	r2, r1
 8006082:	d009      	beq.n	8006098 <__gethex+0x1ec>
 8006084:	4553      	cmp	r3, sl
 8006086:	dd05      	ble.n	8006094 <__gethex+0x1e8>
 8006088:	4620      	mov	r0, r4
 800608a:	1eb9      	subs	r1, r7, #2
 800608c:	f000 ff45 	bl	8006f1a <__any_on>
 8006090:	2800      	cmp	r0, #0
 8006092:	d144      	bne.n	800611e <__gethex+0x272>
 8006094:	f04f 0a02 	mov.w	sl, #2
 8006098:	4639      	mov	r1, r7
 800609a:	4620      	mov	r0, r4
 800609c:	f7ff fe9d 	bl	8005dda <rshift>
 80060a0:	443d      	add	r5, r7
 80060a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060a6:	42ab      	cmp	r3, r5
 80060a8:	da4a      	bge.n	8006140 <__gethex+0x294>
 80060aa:	4621      	mov	r1, r4
 80060ac:	9802      	ldr	r0, [sp, #8]
 80060ae:	f000 fadd 	bl	800666c <_Bfree>
 80060b2:	2300      	movs	r3, #0
 80060b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060b6:	27a3      	movs	r7, #163	; 0xa3
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	e789      	b.n	8005fd0 <__gethex+0x124>
 80060bc:	1e73      	subs	r3, r6, #1
 80060be:	9a06      	ldr	r2, [sp, #24]
 80060c0:	9307      	str	r3, [sp, #28]
 80060c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d019      	beq.n	80060fe <__gethex+0x252>
 80060ca:	f1bb 0f20 	cmp.w	fp, #32
 80060ce:	d107      	bne.n	80060e0 <__gethex+0x234>
 80060d0:	9b04      	ldr	r3, [sp, #16]
 80060d2:	9a01      	ldr	r2, [sp, #4]
 80060d4:	f843 2b04 	str.w	r2, [r3], #4
 80060d8:	9304      	str	r3, [sp, #16]
 80060da:	2300      	movs	r3, #0
 80060dc:	469b      	mov	fp, r3
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80060e4:	f7ff fecc 	bl	8005e80 <__hexdig_fun>
 80060e8:	9b01      	ldr	r3, [sp, #4]
 80060ea:	f000 000f 	and.w	r0, r0, #15
 80060ee:	fa00 f00b 	lsl.w	r0, r0, fp
 80060f2:	4303      	orrs	r3, r0
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	f10b 0b04 	add.w	fp, fp, #4
 80060fa:	9b07      	ldr	r3, [sp, #28]
 80060fc:	e00d      	b.n	800611a <__gethex+0x26e>
 80060fe:	9a08      	ldr	r2, [sp, #32]
 8006100:	1e73      	subs	r3, r6, #1
 8006102:	4413      	add	r3, r2
 8006104:	42bb      	cmp	r3, r7
 8006106:	d3e0      	bcc.n	80060ca <__gethex+0x21e>
 8006108:	4618      	mov	r0, r3
 800610a:	4652      	mov	r2, sl
 800610c:	9903      	ldr	r1, [sp, #12]
 800610e:	9309      	str	r3, [sp, #36]	; 0x24
 8006110:	f001 f9c9 	bl	80074a6 <strncmp>
 8006114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006116:	2800      	cmp	r0, #0
 8006118:	d1d7      	bne.n	80060ca <__gethex+0x21e>
 800611a:	461e      	mov	r6, r3
 800611c:	e78c      	b.n	8006038 <__gethex+0x18c>
 800611e:	f04f 0a03 	mov.w	sl, #3
 8006122:	e7b9      	b.n	8006098 <__gethex+0x1ec>
 8006124:	da09      	bge.n	800613a <__gethex+0x28e>
 8006126:	1bf7      	subs	r7, r6, r7
 8006128:	4621      	mov	r1, r4
 800612a:	463a      	mov	r2, r7
 800612c:	9802      	ldr	r0, [sp, #8]
 800612e:	f000 fcb5 	bl	8006a9c <__lshift>
 8006132:	4604      	mov	r4, r0
 8006134:	1bed      	subs	r5, r5, r7
 8006136:	f100 0914 	add.w	r9, r0, #20
 800613a:	f04f 0a00 	mov.w	sl, #0
 800613e:	e7b0      	b.n	80060a2 <__gethex+0x1f6>
 8006140:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006144:	42a8      	cmp	r0, r5
 8006146:	dd72      	ble.n	800622e <__gethex+0x382>
 8006148:	1b45      	subs	r5, r0, r5
 800614a:	42ae      	cmp	r6, r5
 800614c:	dc35      	bgt.n	80061ba <__gethex+0x30e>
 800614e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d029      	beq.n	80061aa <__gethex+0x2fe>
 8006156:	2b03      	cmp	r3, #3
 8006158:	d02b      	beq.n	80061b2 <__gethex+0x306>
 800615a:	2b01      	cmp	r3, #1
 800615c:	d11c      	bne.n	8006198 <__gethex+0x2ec>
 800615e:	42ae      	cmp	r6, r5
 8006160:	d11a      	bne.n	8006198 <__gethex+0x2ec>
 8006162:	2e01      	cmp	r6, #1
 8006164:	d112      	bne.n	800618c <__gethex+0x2e0>
 8006166:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800616a:	9a05      	ldr	r2, [sp, #20]
 800616c:	2762      	movs	r7, #98	; 0x62
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	2301      	movs	r3, #1
 8006172:	6123      	str	r3, [r4, #16]
 8006174:	f8c9 3000 	str.w	r3, [r9]
 8006178:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800617a:	601c      	str	r4, [r3, #0]
 800617c:	e728      	b.n	8005fd0 <__gethex+0x124>
 800617e:	bf00      	nop
 8006180:	08007d54 	.word	0x08007d54
 8006184:	08007c78 	.word	0x08007c78
 8006188:	08007cec 	.word	0x08007cec
 800618c:	4620      	mov	r0, r4
 800618e:	1e71      	subs	r1, r6, #1
 8006190:	f000 fec3 	bl	8006f1a <__any_on>
 8006194:	2800      	cmp	r0, #0
 8006196:	d1e6      	bne.n	8006166 <__gethex+0x2ba>
 8006198:	4621      	mov	r1, r4
 800619a:	9802      	ldr	r0, [sp, #8]
 800619c:	f000 fa66 	bl	800666c <_Bfree>
 80061a0:	2300      	movs	r3, #0
 80061a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061a4:	2750      	movs	r7, #80	; 0x50
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e712      	b.n	8005fd0 <__gethex+0x124>
 80061aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1f3      	bne.n	8006198 <__gethex+0x2ec>
 80061b0:	e7d9      	b.n	8006166 <__gethex+0x2ba>
 80061b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1d6      	bne.n	8006166 <__gethex+0x2ba>
 80061b8:	e7ee      	b.n	8006198 <__gethex+0x2ec>
 80061ba:	1e6f      	subs	r7, r5, #1
 80061bc:	f1ba 0f00 	cmp.w	sl, #0
 80061c0:	d132      	bne.n	8006228 <__gethex+0x37c>
 80061c2:	b127      	cbz	r7, 80061ce <__gethex+0x322>
 80061c4:	4639      	mov	r1, r7
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 fea7 	bl	8006f1a <__any_on>
 80061cc:	4682      	mov	sl, r0
 80061ce:	2101      	movs	r1, #1
 80061d0:	117b      	asrs	r3, r7, #5
 80061d2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80061d6:	f007 071f 	and.w	r7, r7, #31
 80061da:	fa01 f707 	lsl.w	r7, r1, r7
 80061de:	421f      	tst	r7, r3
 80061e0:	f04f 0702 	mov.w	r7, #2
 80061e4:	4629      	mov	r1, r5
 80061e6:	4620      	mov	r0, r4
 80061e8:	bf18      	it	ne
 80061ea:	f04a 0a02 	orrne.w	sl, sl, #2
 80061ee:	1b76      	subs	r6, r6, r5
 80061f0:	f7ff fdf3 	bl	8005dda <rshift>
 80061f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80061f8:	f1ba 0f00 	cmp.w	sl, #0
 80061fc:	d048      	beq.n	8006290 <__gethex+0x3e4>
 80061fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d015      	beq.n	8006232 <__gethex+0x386>
 8006206:	2b03      	cmp	r3, #3
 8006208:	d017      	beq.n	800623a <__gethex+0x38e>
 800620a:	2b01      	cmp	r3, #1
 800620c:	d109      	bne.n	8006222 <__gethex+0x376>
 800620e:	f01a 0f02 	tst.w	sl, #2
 8006212:	d006      	beq.n	8006222 <__gethex+0x376>
 8006214:	f8d9 0000 	ldr.w	r0, [r9]
 8006218:	ea4a 0a00 	orr.w	sl, sl, r0
 800621c:	f01a 0f01 	tst.w	sl, #1
 8006220:	d10e      	bne.n	8006240 <__gethex+0x394>
 8006222:	f047 0710 	orr.w	r7, r7, #16
 8006226:	e033      	b.n	8006290 <__gethex+0x3e4>
 8006228:	f04f 0a01 	mov.w	sl, #1
 800622c:	e7cf      	b.n	80061ce <__gethex+0x322>
 800622e:	2701      	movs	r7, #1
 8006230:	e7e2      	b.n	80061f8 <__gethex+0x34c>
 8006232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006234:	f1c3 0301 	rsb	r3, r3, #1
 8006238:	9315      	str	r3, [sp, #84]	; 0x54
 800623a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <__gethex+0x376>
 8006240:	f04f 0c00 	mov.w	ip, #0
 8006244:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006248:	f104 0314 	add.w	r3, r4, #20
 800624c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006250:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006254:	4618      	mov	r0, r3
 8006256:	f853 2b04 	ldr.w	r2, [r3], #4
 800625a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800625e:	d01c      	beq.n	800629a <__gethex+0x3ee>
 8006260:	3201      	adds	r2, #1
 8006262:	6002      	str	r2, [r0, #0]
 8006264:	2f02      	cmp	r7, #2
 8006266:	f104 0314 	add.w	r3, r4, #20
 800626a:	d13d      	bne.n	80062e8 <__gethex+0x43c>
 800626c:	f8d8 2000 	ldr.w	r2, [r8]
 8006270:	3a01      	subs	r2, #1
 8006272:	42b2      	cmp	r2, r6
 8006274:	d10a      	bne.n	800628c <__gethex+0x3e0>
 8006276:	2201      	movs	r2, #1
 8006278:	1171      	asrs	r1, r6, #5
 800627a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800627e:	f006 061f 	and.w	r6, r6, #31
 8006282:	fa02 f606 	lsl.w	r6, r2, r6
 8006286:	421e      	tst	r6, r3
 8006288:	bf18      	it	ne
 800628a:	4617      	movne	r7, r2
 800628c:	f047 0720 	orr.w	r7, r7, #32
 8006290:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006292:	601c      	str	r4, [r3, #0]
 8006294:	9b05      	ldr	r3, [sp, #20]
 8006296:	601d      	str	r5, [r3, #0]
 8006298:	e69a      	b.n	8005fd0 <__gethex+0x124>
 800629a:	4299      	cmp	r1, r3
 800629c:	f843 cc04 	str.w	ip, [r3, #-4]
 80062a0:	d8d8      	bhi.n	8006254 <__gethex+0x3a8>
 80062a2:	68a3      	ldr	r3, [r4, #8]
 80062a4:	459b      	cmp	fp, r3
 80062a6:	db17      	blt.n	80062d8 <__gethex+0x42c>
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	9802      	ldr	r0, [sp, #8]
 80062ac:	3101      	adds	r1, #1
 80062ae:	f000 f99d 	bl	80065ec <_Balloc>
 80062b2:	4681      	mov	r9, r0
 80062b4:	b918      	cbnz	r0, 80062be <__gethex+0x412>
 80062b6:	4602      	mov	r2, r0
 80062b8:	2184      	movs	r1, #132	; 0x84
 80062ba:	4b19      	ldr	r3, [pc, #100]	; (8006320 <__gethex+0x474>)
 80062bc:	e6ab      	b.n	8006016 <__gethex+0x16a>
 80062be:	6922      	ldr	r2, [r4, #16]
 80062c0:	f104 010c 	add.w	r1, r4, #12
 80062c4:	3202      	adds	r2, #2
 80062c6:	0092      	lsls	r2, r2, #2
 80062c8:	300c      	adds	r0, #12
 80062ca:	f000 f981 	bl	80065d0 <memcpy>
 80062ce:	4621      	mov	r1, r4
 80062d0:	9802      	ldr	r0, [sp, #8]
 80062d2:	f000 f9cb 	bl	800666c <_Bfree>
 80062d6:	464c      	mov	r4, r9
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	6122      	str	r2, [r4, #16]
 80062de:	2201      	movs	r2, #1
 80062e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062e4:	615a      	str	r2, [r3, #20]
 80062e6:	e7bd      	b.n	8006264 <__gethex+0x3b8>
 80062e8:	6922      	ldr	r2, [r4, #16]
 80062ea:	455a      	cmp	r2, fp
 80062ec:	dd0b      	ble.n	8006306 <__gethex+0x45a>
 80062ee:	2101      	movs	r1, #1
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7ff fd72 	bl	8005dda <rshift>
 80062f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80062fa:	3501      	adds	r5, #1
 80062fc:	42ab      	cmp	r3, r5
 80062fe:	f6ff aed4 	blt.w	80060aa <__gethex+0x1fe>
 8006302:	2701      	movs	r7, #1
 8006304:	e7c2      	b.n	800628c <__gethex+0x3e0>
 8006306:	f016 061f 	ands.w	r6, r6, #31
 800630a:	d0fa      	beq.n	8006302 <__gethex+0x456>
 800630c:	4453      	add	r3, sl
 800630e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006312:	f000 fa5d 	bl	80067d0 <__hi0bits>
 8006316:	f1c6 0620 	rsb	r6, r6, #32
 800631a:	42b0      	cmp	r0, r6
 800631c:	dbe7      	blt.n	80062ee <__gethex+0x442>
 800631e:	e7f0      	b.n	8006302 <__gethex+0x456>
 8006320:	08007c78 	.word	0x08007c78

08006324 <L_shift>:
 8006324:	f1c2 0208 	rsb	r2, r2, #8
 8006328:	0092      	lsls	r2, r2, #2
 800632a:	b570      	push	{r4, r5, r6, lr}
 800632c:	f1c2 0620 	rsb	r6, r2, #32
 8006330:	6843      	ldr	r3, [r0, #4]
 8006332:	6804      	ldr	r4, [r0, #0]
 8006334:	fa03 f506 	lsl.w	r5, r3, r6
 8006338:	432c      	orrs	r4, r5
 800633a:	40d3      	lsrs	r3, r2
 800633c:	6004      	str	r4, [r0, #0]
 800633e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006342:	4288      	cmp	r0, r1
 8006344:	d3f4      	bcc.n	8006330 <L_shift+0xc>
 8006346:	bd70      	pop	{r4, r5, r6, pc}

08006348 <__match>:
 8006348:	b530      	push	{r4, r5, lr}
 800634a:	6803      	ldr	r3, [r0, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006352:	b914      	cbnz	r4, 800635a <__match+0x12>
 8006354:	6003      	str	r3, [r0, #0]
 8006356:	2001      	movs	r0, #1
 8006358:	bd30      	pop	{r4, r5, pc}
 800635a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800635e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006362:	2d19      	cmp	r5, #25
 8006364:	bf98      	it	ls
 8006366:	3220      	addls	r2, #32
 8006368:	42a2      	cmp	r2, r4
 800636a:	d0f0      	beq.n	800634e <__match+0x6>
 800636c:	2000      	movs	r0, #0
 800636e:	e7f3      	b.n	8006358 <__match+0x10>

08006370 <__hexnan>:
 8006370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	2500      	movs	r5, #0
 8006376:	680b      	ldr	r3, [r1, #0]
 8006378:	4682      	mov	sl, r0
 800637a:	115e      	asrs	r6, r3, #5
 800637c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006380:	f013 031f 	ands.w	r3, r3, #31
 8006384:	bf18      	it	ne
 8006386:	3604      	addne	r6, #4
 8006388:	1f37      	subs	r7, r6, #4
 800638a:	46b9      	mov	r9, r7
 800638c:	463c      	mov	r4, r7
 800638e:	46ab      	mov	fp, r5
 8006390:	b087      	sub	sp, #28
 8006392:	4690      	mov	r8, r2
 8006394:	6802      	ldr	r2, [r0, #0]
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	f846 5c04 	str.w	r5, [r6, #-4]
 800639c:	9502      	str	r5, [sp, #8]
 800639e:	7851      	ldrb	r1, [r2, #1]
 80063a0:	1c53      	adds	r3, r2, #1
 80063a2:	9303      	str	r3, [sp, #12]
 80063a4:	b341      	cbz	r1, 80063f8 <__hexnan+0x88>
 80063a6:	4608      	mov	r0, r1
 80063a8:	9205      	str	r2, [sp, #20]
 80063aa:	9104      	str	r1, [sp, #16]
 80063ac:	f7ff fd68 	bl	8005e80 <__hexdig_fun>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d14f      	bne.n	8006454 <__hexnan+0xe4>
 80063b4:	9904      	ldr	r1, [sp, #16]
 80063b6:	9a05      	ldr	r2, [sp, #20]
 80063b8:	2920      	cmp	r1, #32
 80063ba:	d818      	bhi.n	80063ee <__hexnan+0x7e>
 80063bc:	9b02      	ldr	r3, [sp, #8]
 80063be:	459b      	cmp	fp, r3
 80063c0:	dd13      	ble.n	80063ea <__hexnan+0x7a>
 80063c2:	454c      	cmp	r4, r9
 80063c4:	d206      	bcs.n	80063d4 <__hexnan+0x64>
 80063c6:	2d07      	cmp	r5, #7
 80063c8:	dc04      	bgt.n	80063d4 <__hexnan+0x64>
 80063ca:	462a      	mov	r2, r5
 80063cc:	4649      	mov	r1, r9
 80063ce:	4620      	mov	r0, r4
 80063d0:	f7ff ffa8 	bl	8006324 <L_shift>
 80063d4:	4544      	cmp	r4, r8
 80063d6:	d950      	bls.n	800647a <__hexnan+0x10a>
 80063d8:	2300      	movs	r3, #0
 80063da:	f1a4 0904 	sub.w	r9, r4, #4
 80063de:	f844 3c04 	str.w	r3, [r4, #-4]
 80063e2:	461d      	mov	r5, r3
 80063e4:	464c      	mov	r4, r9
 80063e6:	f8cd b008 	str.w	fp, [sp, #8]
 80063ea:	9a03      	ldr	r2, [sp, #12]
 80063ec:	e7d7      	b.n	800639e <__hexnan+0x2e>
 80063ee:	2929      	cmp	r1, #41	; 0x29
 80063f0:	d156      	bne.n	80064a0 <__hexnan+0x130>
 80063f2:	3202      	adds	r2, #2
 80063f4:	f8ca 2000 	str.w	r2, [sl]
 80063f8:	f1bb 0f00 	cmp.w	fp, #0
 80063fc:	d050      	beq.n	80064a0 <__hexnan+0x130>
 80063fe:	454c      	cmp	r4, r9
 8006400:	d206      	bcs.n	8006410 <__hexnan+0xa0>
 8006402:	2d07      	cmp	r5, #7
 8006404:	dc04      	bgt.n	8006410 <__hexnan+0xa0>
 8006406:	462a      	mov	r2, r5
 8006408:	4649      	mov	r1, r9
 800640a:	4620      	mov	r0, r4
 800640c:	f7ff ff8a 	bl	8006324 <L_shift>
 8006410:	4544      	cmp	r4, r8
 8006412:	d934      	bls.n	800647e <__hexnan+0x10e>
 8006414:	4623      	mov	r3, r4
 8006416:	f1a8 0204 	sub.w	r2, r8, #4
 800641a:	f853 1b04 	ldr.w	r1, [r3], #4
 800641e:	429f      	cmp	r7, r3
 8006420:	f842 1f04 	str.w	r1, [r2, #4]!
 8006424:	d2f9      	bcs.n	800641a <__hexnan+0xaa>
 8006426:	1b3b      	subs	r3, r7, r4
 8006428:	f023 0303 	bic.w	r3, r3, #3
 800642c:	3304      	adds	r3, #4
 800642e:	3401      	adds	r4, #1
 8006430:	3e03      	subs	r6, #3
 8006432:	42b4      	cmp	r4, r6
 8006434:	bf88      	it	hi
 8006436:	2304      	movhi	r3, #4
 8006438:	2200      	movs	r2, #0
 800643a:	4443      	add	r3, r8
 800643c:	f843 2b04 	str.w	r2, [r3], #4
 8006440:	429f      	cmp	r7, r3
 8006442:	d2fb      	bcs.n	800643c <__hexnan+0xcc>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	b91b      	cbnz	r3, 8006450 <__hexnan+0xe0>
 8006448:	4547      	cmp	r7, r8
 800644a:	d127      	bne.n	800649c <__hexnan+0x12c>
 800644c:	2301      	movs	r3, #1
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	2005      	movs	r0, #5
 8006452:	e026      	b.n	80064a2 <__hexnan+0x132>
 8006454:	3501      	adds	r5, #1
 8006456:	2d08      	cmp	r5, #8
 8006458:	f10b 0b01 	add.w	fp, fp, #1
 800645c:	dd06      	ble.n	800646c <__hexnan+0xfc>
 800645e:	4544      	cmp	r4, r8
 8006460:	d9c3      	bls.n	80063ea <__hexnan+0x7a>
 8006462:	2300      	movs	r3, #0
 8006464:	2501      	movs	r5, #1
 8006466:	f844 3c04 	str.w	r3, [r4, #-4]
 800646a:	3c04      	subs	r4, #4
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	f000 000f 	and.w	r0, r0, #15
 8006472:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006476:	6022      	str	r2, [r4, #0]
 8006478:	e7b7      	b.n	80063ea <__hexnan+0x7a>
 800647a:	2508      	movs	r5, #8
 800647c:	e7b5      	b.n	80063ea <__hexnan+0x7a>
 800647e:	9b01      	ldr	r3, [sp, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0df      	beq.n	8006444 <__hexnan+0xd4>
 8006484:	f04f 32ff 	mov.w	r2, #4294967295
 8006488:	f1c3 0320 	rsb	r3, r3, #32
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006494:	401a      	ands	r2, r3
 8006496:	f846 2c04 	str.w	r2, [r6, #-4]
 800649a:	e7d3      	b.n	8006444 <__hexnan+0xd4>
 800649c:	3f04      	subs	r7, #4
 800649e:	e7d1      	b.n	8006444 <__hexnan+0xd4>
 80064a0:	2004      	movs	r0, #4
 80064a2:	b007      	add	sp, #28
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064a8 <_localeconv_r>:
 80064a8:	4800      	ldr	r0, [pc, #0]	; (80064ac <_localeconv_r+0x4>)
 80064aa:	4770      	bx	lr
 80064ac:	20000164 	.word	0x20000164

080064b0 <__retarget_lock_init_recursive>:
 80064b0:	4770      	bx	lr

080064b2 <__retarget_lock_acquire_recursive>:
 80064b2:	4770      	bx	lr

080064b4 <__retarget_lock_release_recursive>:
 80064b4:	4770      	bx	lr

080064b6 <__swhatbuf_r>:
 80064b6:	b570      	push	{r4, r5, r6, lr}
 80064b8:	460e      	mov	r6, r1
 80064ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064be:	4614      	mov	r4, r2
 80064c0:	2900      	cmp	r1, #0
 80064c2:	461d      	mov	r5, r3
 80064c4:	b096      	sub	sp, #88	; 0x58
 80064c6:	da08      	bge.n	80064da <__swhatbuf_r+0x24>
 80064c8:	2200      	movs	r2, #0
 80064ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064ce:	602a      	str	r2, [r5, #0]
 80064d0:	061a      	lsls	r2, r3, #24
 80064d2:	d410      	bmi.n	80064f6 <__swhatbuf_r+0x40>
 80064d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064d8:	e00e      	b.n	80064f8 <__swhatbuf_r+0x42>
 80064da:	466a      	mov	r2, sp
 80064dc:	f001 f856 	bl	800758c <_fstat_r>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	dbf1      	blt.n	80064c8 <__swhatbuf_r+0x12>
 80064e4:	9a01      	ldr	r2, [sp, #4]
 80064e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064ee:	425a      	negs	r2, r3
 80064f0:	415a      	adcs	r2, r3
 80064f2:	602a      	str	r2, [r5, #0]
 80064f4:	e7ee      	b.n	80064d4 <__swhatbuf_r+0x1e>
 80064f6:	2340      	movs	r3, #64	; 0x40
 80064f8:	2000      	movs	r0, #0
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	b016      	add	sp, #88	; 0x58
 80064fe:	bd70      	pop	{r4, r5, r6, pc}

08006500 <__smakebuf_r>:
 8006500:	898b      	ldrh	r3, [r1, #12]
 8006502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006504:	079d      	lsls	r5, r3, #30
 8006506:	4606      	mov	r6, r0
 8006508:	460c      	mov	r4, r1
 800650a:	d507      	bpl.n	800651c <__smakebuf_r+0x1c>
 800650c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	6123      	str	r3, [r4, #16]
 8006514:	2301      	movs	r3, #1
 8006516:	6163      	str	r3, [r4, #20]
 8006518:	b002      	add	sp, #8
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	466a      	mov	r2, sp
 800651e:	ab01      	add	r3, sp, #4
 8006520:	f7ff ffc9 	bl	80064b6 <__swhatbuf_r>
 8006524:	9900      	ldr	r1, [sp, #0]
 8006526:	4605      	mov	r5, r0
 8006528:	4630      	mov	r0, r6
 800652a:	f000 fd93 	bl	8007054 <_malloc_r>
 800652e:	b948      	cbnz	r0, 8006544 <__smakebuf_r+0x44>
 8006530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006534:	059a      	lsls	r2, r3, #22
 8006536:	d4ef      	bmi.n	8006518 <__smakebuf_r+0x18>
 8006538:	f023 0303 	bic.w	r3, r3, #3
 800653c:	f043 0302 	orr.w	r3, r3, #2
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	e7e3      	b.n	800650c <__smakebuf_r+0xc>
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <__smakebuf_r+0x7c>)
 8006546:	62b3      	str	r3, [r6, #40]	; 0x28
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	6020      	str	r0, [r4, #0]
 800654c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006550:	81a3      	strh	r3, [r4, #12]
 8006552:	9b00      	ldr	r3, [sp, #0]
 8006554:	6120      	str	r0, [r4, #16]
 8006556:	6163      	str	r3, [r4, #20]
 8006558:	9b01      	ldr	r3, [sp, #4]
 800655a:	b15b      	cbz	r3, 8006574 <__smakebuf_r+0x74>
 800655c:	4630      	mov	r0, r6
 800655e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006562:	f001 f825 	bl	80075b0 <_isatty_r>
 8006566:	b128      	cbz	r0, 8006574 <__smakebuf_r+0x74>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	89a0      	ldrh	r0, [r4, #12]
 8006576:	4305      	orrs	r5, r0
 8006578:	81a5      	strh	r5, [r4, #12]
 800657a:	e7cd      	b.n	8006518 <__smakebuf_r+0x18>
 800657c:	08005c39 	.word	0x08005c39

08006580 <malloc>:
 8006580:	4b02      	ldr	r3, [pc, #8]	; (800658c <malloc+0xc>)
 8006582:	4601      	mov	r1, r0
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	f000 bd65 	b.w	8007054 <_malloc_r>
 800658a:	bf00      	nop
 800658c:	2000000c 	.word	0x2000000c

08006590 <__ascii_mbtowc>:
 8006590:	b082      	sub	sp, #8
 8006592:	b901      	cbnz	r1, 8006596 <__ascii_mbtowc+0x6>
 8006594:	a901      	add	r1, sp, #4
 8006596:	b142      	cbz	r2, 80065aa <__ascii_mbtowc+0x1a>
 8006598:	b14b      	cbz	r3, 80065ae <__ascii_mbtowc+0x1e>
 800659a:	7813      	ldrb	r3, [r2, #0]
 800659c:	600b      	str	r3, [r1, #0]
 800659e:	7812      	ldrb	r2, [r2, #0]
 80065a0:	1e10      	subs	r0, r2, #0
 80065a2:	bf18      	it	ne
 80065a4:	2001      	movne	r0, #1
 80065a6:	b002      	add	sp, #8
 80065a8:	4770      	bx	lr
 80065aa:	4610      	mov	r0, r2
 80065ac:	e7fb      	b.n	80065a6 <__ascii_mbtowc+0x16>
 80065ae:	f06f 0001 	mvn.w	r0, #1
 80065b2:	e7f8      	b.n	80065a6 <__ascii_mbtowc+0x16>

080065b4 <memchr>:
 80065b4:	4603      	mov	r3, r0
 80065b6:	b510      	push	{r4, lr}
 80065b8:	b2c9      	uxtb	r1, r1
 80065ba:	4402      	add	r2, r0
 80065bc:	4293      	cmp	r3, r2
 80065be:	4618      	mov	r0, r3
 80065c0:	d101      	bne.n	80065c6 <memchr+0x12>
 80065c2:	2000      	movs	r0, #0
 80065c4:	e003      	b.n	80065ce <memchr+0x1a>
 80065c6:	7804      	ldrb	r4, [r0, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	428c      	cmp	r4, r1
 80065cc:	d1f6      	bne.n	80065bc <memchr+0x8>
 80065ce:	bd10      	pop	{r4, pc}

080065d0 <memcpy>:
 80065d0:	440a      	add	r2, r1
 80065d2:	4291      	cmp	r1, r2
 80065d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065d8:	d100      	bne.n	80065dc <memcpy+0xc>
 80065da:	4770      	bx	lr
 80065dc:	b510      	push	{r4, lr}
 80065de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e2:	4291      	cmp	r1, r2
 80065e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e8:	d1f9      	bne.n	80065de <memcpy+0xe>
 80065ea:	bd10      	pop	{r4, pc}

080065ec <_Balloc>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065f0:	4604      	mov	r4, r0
 80065f2:	460d      	mov	r5, r1
 80065f4:	b976      	cbnz	r6, 8006614 <_Balloc+0x28>
 80065f6:	2010      	movs	r0, #16
 80065f8:	f7ff ffc2 	bl	8006580 <malloc>
 80065fc:	4602      	mov	r2, r0
 80065fe:	6260      	str	r0, [r4, #36]	; 0x24
 8006600:	b920      	cbnz	r0, 800660c <_Balloc+0x20>
 8006602:	2166      	movs	r1, #102	; 0x66
 8006604:	4b17      	ldr	r3, [pc, #92]	; (8006664 <_Balloc+0x78>)
 8006606:	4818      	ldr	r0, [pc, #96]	; (8006668 <_Balloc+0x7c>)
 8006608:	f000 ff80 	bl	800750c <__assert_func>
 800660c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006610:	6006      	str	r6, [r0, #0]
 8006612:	60c6      	str	r6, [r0, #12]
 8006614:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006616:	68f3      	ldr	r3, [r6, #12]
 8006618:	b183      	cbz	r3, 800663c <_Balloc+0x50>
 800661a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006622:	b9b8      	cbnz	r0, 8006654 <_Balloc+0x68>
 8006624:	2101      	movs	r1, #1
 8006626:	fa01 f605 	lsl.w	r6, r1, r5
 800662a:	1d72      	adds	r2, r6, #5
 800662c:	4620      	mov	r0, r4
 800662e:	0092      	lsls	r2, r2, #2
 8006630:	f000 fc94 	bl	8006f5c <_calloc_r>
 8006634:	b160      	cbz	r0, 8006650 <_Balloc+0x64>
 8006636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800663a:	e00e      	b.n	800665a <_Balloc+0x6e>
 800663c:	2221      	movs	r2, #33	; 0x21
 800663e:	2104      	movs	r1, #4
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fc8b 	bl	8006f5c <_calloc_r>
 8006646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006648:	60f0      	str	r0, [r6, #12]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e4      	bne.n	800661a <_Balloc+0x2e>
 8006650:	2000      	movs	r0, #0
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	6802      	ldr	r2, [r0, #0]
 8006656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800665a:	2300      	movs	r3, #0
 800665c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006660:	e7f7      	b.n	8006652 <_Balloc+0x66>
 8006662:	bf00      	nop
 8006664:	08007c06 	.word	0x08007c06
 8006668:	08007d68 	.word	0x08007d68

0800666c <_Bfree>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006670:	4605      	mov	r5, r0
 8006672:	460c      	mov	r4, r1
 8006674:	b976      	cbnz	r6, 8006694 <_Bfree+0x28>
 8006676:	2010      	movs	r0, #16
 8006678:	f7ff ff82 	bl	8006580 <malloc>
 800667c:	4602      	mov	r2, r0
 800667e:	6268      	str	r0, [r5, #36]	; 0x24
 8006680:	b920      	cbnz	r0, 800668c <_Bfree+0x20>
 8006682:	218a      	movs	r1, #138	; 0x8a
 8006684:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <_Bfree+0x3c>)
 8006686:	4809      	ldr	r0, [pc, #36]	; (80066ac <_Bfree+0x40>)
 8006688:	f000 ff40 	bl	800750c <__assert_func>
 800668c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006690:	6006      	str	r6, [r0, #0]
 8006692:	60c6      	str	r6, [r0, #12]
 8006694:	b13c      	cbz	r4, 80066a6 <_Bfree+0x3a>
 8006696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006698:	6862      	ldr	r2, [r4, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066a0:	6021      	str	r1, [r4, #0]
 80066a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	08007c06 	.word	0x08007c06
 80066ac:	08007d68 	.word	0x08007d68

080066b0 <__multadd>:
 80066b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b4:	4607      	mov	r7, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	461e      	mov	r6, r3
 80066ba:	2000      	movs	r0, #0
 80066bc:	690d      	ldr	r5, [r1, #16]
 80066be:	f101 0c14 	add.w	ip, r1, #20
 80066c2:	f8dc 3000 	ldr.w	r3, [ip]
 80066c6:	3001      	adds	r0, #1
 80066c8:	b299      	uxth	r1, r3
 80066ca:	fb02 6101 	mla	r1, r2, r1, r6
 80066ce:	0c1e      	lsrs	r6, r3, #16
 80066d0:	0c0b      	lsrs	r3, r1, #16
 80066d2:	fb02 3306 	mla	r3, r2, r6, r3
 80066d6:	b289      	uxth	r1, r1
 80066d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066dc:	4285      	cmp	r5, r0
 80066de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066e2:	f84c 1b04 	str.w	r1, [ip], #4
 80066e6:	dcec      	bgt.n	80066c2 <__multadd+0x12>
 80066e8:	b30e      	cbz	r6, 800672e <__multadd+0x7e>
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	42ab      	cmp	r3, r5
 80066ee:	dc19      	bgt.n	8006724 <__multadd+0x74>
 80066f0:	6861      	ldr	r1, [r4, #4]
 80066f2:	4638      	mov	r0, r7
 80066f4:	3101      	adds	r1, #1
 80066f6:	f7ff ff79 	bl	80065ec <_Balloc>
 80066fa:	4680      	mov	r8, r0
 80066fc:	b928      	cbnz	r0, 800670a <__multadd+0x5a>
 80066fe:	4602      	mov	r2, r0
 8006700:	21b5      	movs	r1, #181	; 0xb5
 8006702:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <__multadd+0x84>)
 8006704:	480c      	ldr	r0, [pc, #48]	; (8006738 <__multadd+0x88>)
 8006706:	f000 ff01 	bl	800750c <__assert_func>
 800670a:	6922      	ldr	r2, [r4, #16]
 800670c:	f104 010c 	add.w	r1, r4, #12
 8006710:	3202      	adds	r2, #2
 8006712:	0092      	lsls	r2, r2, #2
 8006714:	300c      	adds	r0, #12
 8006716:	f7ff ff5b 	bl	80065d0 <memcpy>
 800671a:	4621      	mov	r1, r4
 800671c:	4638      	mov	r0, r7
 800671e:	f7ff ffa5 	bl	800666c <_Bfree>
 8006722:	4644      	mov	r4, r8
 8006724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006728:	3501      	adds	r5, #1
 800672a:	615e      	str	r6, [r3, #20]
 800672c:	6125      	str	r5, [r4, #16]
 800672e:	4620      	mov	r0, r4
 8006730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006734:	08007c78 	.word	0x08007c78
 8006738:	08007d68 	.word	0x08007d68

0800673c <__s2b>:
 800673c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006740:	4615      	mov	r5, r2
 8006742:	2209      	movs	r2, #9
 8006744:	461f      	mov	r7, r3
 8006746:	3308      	adds	r3, #8
 8006748:	460c      	mov	r4, r1
 800674a:	fb93 f3f2 	sdiv	r3, r3, r2
 800674e:	4606      	mov	r6, r0
 8006750:	2201      	movs	r2, #1
 8006752:	2100      	movs	r1, #0
 8006754:	429a      	cmp	r2, r3
 8006756:	db09      	blt.n	800676c <__s2b+0x30>
 8006758:	4630      	mov	r0, r6
 800675a:	f7ff ff47 	bl	80065ec <_Balloc>
 800675e:	b940      	cbnz	r0, 8006772 <__s2b+0x36>
 8006760:	4602      	mov	r2, r0
 8006762:	21ce      	movs	r1, #206	; 0xce
 8006764:	4b18      	ldr	r3, [pc, #96]	; (80067c8 <__s2b+0x8c>)
 8006766:	4819      	ldr	r0, [pc, #100]	; (80067cc <__s2b+0x90>)
 8006768:	f000 fed0 	bl	800750c <__assert_func>
 800676c:	0052      	lsls	r2, r2, #1
 800676e:	3101      	adds	r1, #1
 8006770:	e7f0      	b.n	8006754 <__s2b+0x18>
 8006772:	9b08      	ldr	r3, [sp, #32]
 8006774:	2d09      	cmp	r5, #9
 8006776:	6143      	str	r3, [r0, #20]
 8006778:	f04f 0301 	mov.w	r3, #1
 800677c:	6103      	str	r3, [r0, #16]
 800677e:	dd16      	ble.n	80067ae <__s2b+0x72>
 8006780:	f104 0909 	add.w	r9, r4, #9
 8006784:	46c8      	mov	r8, r9
 8006786:	442c      	add	r4, r5
 8006788:	f818 3b01 	ldrb.w	r3, [r8], #1
 800678c:	4601      	mov	r1, r0
 800678e:	220a      	movs	r2, #10
 8006790:	4630      	mov	r0, r6
 8006792:	3b30      	subs	r3, #48	; 0x30
 8006794:	f7ff ff8c 	bl	80066b0 <__multadd>
 8006798:	45a0      	cmp	r8, r4
 800679a:	d1f5      	bne.n	8006788 <__s2b+0x4c>
 800679c:	f1a5 0408 	sub.w	r4, r5, #8
 80067a0:	444c      	add	r4, r9
 80067a2:	1b2d      	subs	r5, r5, r4
 80067a4:	1963      	adds	r3, r4, r5
 80067a6:	42bb      	cmp	r3, r7
 80067a8:	db04      	blt.n	80067b4 <__s2b+0x78>
 80067aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ae:	2509      	movs	r5, #9
 80067b0:	340a      	adds	r4, #10
 80067b2:	e7f6      	b.n	80067a2 <__s2b+0x66>
 80067b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80067b8:	4601      	mov	r1, r0
 80067ba:	220a      	movs	r2, #10
 80067bc:	4630      	mov	r0, r6
 80067be:	3b30      	subs	r3, #48	; 0x30
 80067c0:	f7ff ff76 	bl	80066b0 <__multadd>
 80067c4:	e7ee      	b.n	80067a4 <__s2b+0x68>
 80067c6:	bf00      	nop
 80067c8:	08007c78 	.word	0x08007c78
 80067cc:	08007d68 	.word	0x08007d68

080067d0 <__hi0bits>:
 80067d0:	0c02      	lsrs	r2, r0, #16
 80067d2:	0412      	lsls	r2, r2, #16
 80067d4:	4603      	mov	r3, r0
 80067d6:	b9ca      	cbnz	r2, 800680c <__hi0bits+0x3c>
 80067d8:	0403      	lsls	r3, r0, #16
 80067da:	2010      	movs	r0, #16
 80067dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067e0:	bf04      	itt	eq
 80067e2:	021b      	lsleq	r3, r3, #8
 80067e4:	3008      	addeq	r0, #8
 80067e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067ea:	bf04      	itt	eq
 80067ec:	011b      	lsleq	r3, r3, #4
 80067ee:	3004      	addeq	r0, #4
 80067f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80067f4:	bf04      	itt	eq
 80067f6:	009b      	lsleq	r3, r3, #2
 80067f8:	3002      	addeq	r0, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	db05      	blt.n	800680a <__hi0bits+0x3a>
 80067fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006802:	f100 0001 	add.w	r0, r0, #1
 8006806:	bf08      	it	eq
 8006808:	2020      	moveq	r0, #32
 800680a:	4770      	bx	lr
 800680c:	2000      	movs	r0, #0
 800680e:	e7e5      	b.n	80067dc <__hi0bits+0xc>

08006810 <__lo0bits>:
 8006810:	6803      	ldr	r3, [r0, #0]
 8006812:	4602      	mov	r2, r0
 8006814:	f013 0007 	ands.w	r0, r3, #7
 8006818:	d00b      	beq.n	8006832 <__lo0bits+0x22>
 800681a:	07d9      	lsls	r1, r3, #31
 800681c:	d421      	bmi.n	8006862 <__lo0bits+0x52>
 800681e:	0798      	lsls	r0, r3, #30
 8006820:	bf49      	itett	mi
 8006822:	085b      	lsrmi	r3, r3, #1
 8006824:	089b      	lsrpl	r3, r3, #2
 8006826:	2001      	movmi	r0, #1
 8006828:	6013      	strmi	r3, [r2, #0]
 800682a:	bf5c      	itt	pl
 800682c:	2002      	movpl	r0, #2
 800682e:	6013      	strpl	r3, [r2, #0]
 8006830:	4770      	bx	lr
 8006832:	b299      	uxth	r1, r3
 8006834:	b909      	cbnz	r1, 800683a <__lo0bits+0x2a>
 8006836:	2010      	movs	r0, #16
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	b2d9      	uxtb	r1, r3
 800683c:	b909      	cbnz	r1, 8006842 <__lo0bits+0x32>
 800683e:	3008      	adds	r0, #8
 8006840:	0a1b      	lsrs	r3, r3, #8
 8006842:	0719      	lsls	r1, r3, #28
 8006844:	bf04      	itt	eq
 8006846:	091b      	lsreq	r3, r3, #4
 8006848:	3004      	addeq	r0, #4
 800684a:	0799      	lsls	r1, r3, #30
 800684c:	bf04      	itt	eq
 800684e:	089b      	lsreq	r3, r3, #2
 8006850:	3002      	addeq	r0, #2
 8006852:	07d9      	lsls	r1, r3, #31
 8006854:	d403      	bmi.n	800685e <__lo0bits+0x4e>
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	f100 0001 	add.w	r0, r0, #1
 800685c:	d003      	beq.n	8006866 <__lo0bits+0x56>
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	4770      	bx	lr
 8006862:	2000      	movs	r0, #0
 8006864:	4770      	bx	lr
 8006866:	2020      	movs	r0, #32
 8006868:	4770      	bx	lr
	...

0800686c <__i2b>:
 800686c:	b510      	push	{r4, lr}
 800686e:	460c      	mov	r4, r1
 8006870:	2101      	movs	r1, #1
 8006872:	f7ff febb 	bl	80065ec <_Balloc>
 8006876:	4602      	mov	r2, r0
 8006878:	b928      	cbnz	r0, 8006886 <__i2b+0x1a>
 800687a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800687e:	4b04      	ldr	r3, [pc, #16]	; (8006890 <__i2b+0x24>)
 8006880:	4804      	ldr	r0, [pc, #16]	; (8006894 <__i2b+0x28>)
 8006882:	f000 fe43 	bl	800750c <__assert_func>
 8006886:	2301      	movs	r3, #1
 8006888:	6144      	str	r4, [r0, #20]
 800688a:	6103      	str	r3, [r0, #16]
 800688c:	bd10      	pop	{r4, pc}
 800688e:	bf00      	nop
 8006890:	08007c78 	.word	0x08007c78
 8006894:	08007d68 	.word	0x08007d68

08006898 <__multiply>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	4691      	mov	r9, r2
 800689e:	690a      	ldr	r2, [r1, #16]
 80068a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068a4:	460c      	mov	r4, r1
 80068a6:	429a      	cmp	r2, r3
 80068a8:	bfbe      	ittt	lt
 80068aa:	460b      	movlt	r3, r1
 80068ac:	464c      	movlt	r4, r9
 80068ae:	4699      	movlt	r9, r3
 80068b0:	6927      	ldr	r7, [r4, #16]
 80068b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068b6:	68a3      	ldr	r3, [r4, #8]
 80068b8:	6861      	ldr	r1, [r4, #4]
 80068ba:	eb07 060a 	add.w	r6, r7, sl
 80068be:	42b3      	cmp	r3, r6
 80068c0:	b085      	sub	sp, #20
 80068c2:	bfb8      	it	lt
 80068c4:	3101      	addlt	r1, #1
 80068c6:	f7ff fe91 	bl	80065ec <_Balloc>
 80068ca:	b930      	cbnz	r0, 80068da <__multiply+0x42>
 80068cc:	4602      	mov	r2, r0
 80068ce:	f240 115d 	movw	r1, #349	; 0x15d
 80068d2:	4b43      	ldr	r3, [pc, #268]	; (80069e0 <__multiply+0x148>)
 80068d4:	4843      	ldr	r0, [pc, #268]	; (80069e4 <__multiply+0x14c>)
 80068d6:	f000 fe19 	bl	800750c <__assert_func>
 80068da:	f100 0514 	add.w	r5, r0, #20
 80068de:	462b      	mov	r3, r5
 80068e0:	2200      	movs	r2, #0
 80068e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068e6:	4543      	cmp	r3, r8
 80068e8:	d321      	bcc.n	800692e <__multiply+0x96>
 80068ea:	f104 0314 	add.w	r3, r4, #20
 80068ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068f2:	f109 0314 	add.w	r3, r9, #20
 80068f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068fa:	9202      	str	r2, [sp, #8]
 80068fc:	1b3a      	subs	r2, r7, r4
 80068fe:	3a15      	subs	r2, #21
 8006900:	f022 0203 	bic.w	r2, r2, #3
 8006904:	3204      	adds	r2, #4
 8006906:	f104 0115 	add.w	r1, r4, #21
 800690a:	428f      	cmp	r7, r1
 800690c:	bf38      	it	cc
 800690e:	2204      	movcc	r2, #4
 8006910:	9201      	str	r2, [sp, #4]
 8006912:	9a02      	ldr	r2, [sp, #8]
 8006914:	9303      	str	r3, [sp, #12]
 8006916:	429a      	cmp	r2, r3
 8006918:	d80c      	bhi.n	8006934 <__multiply+0x9c>
 800691a:	2e00      	cmp	r6, #0
 800691c:	dd03      	ble.n	8006926 <__multiply+0x8e>
 800691e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006922:	2b00      	cmp	r3, #0
 8006924:	d059      	beq.n	80069da <__multiply+0x142>
 8006926:	6106      	str	r6, [r0, #16]
 8006928:	b005      	add	sp, #20
 800692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692e:	f843 2b04 	str.w	r2, [r3], #4
 8006932:	e7d8      	b.n	80068e6 <__multiply+0x4e>
 8006934:	f8b3 a000 	ldrh.w	sl, [r3]
 8006938:	f1ba 0f00 	cmp.w	sl, #0
 800693c:	d023      	beq.n	8006986 <__multiply+0xee>
 800693e:	46a9      	mov	r9, r5
 8006940:	f04f 0c00 	mov.w	ip, #0
 8006944:	f104 0e14 	add.w	lr, r4, #20
 8006948:	f85e 2b04 	ldr.w	r2, [lr], #4
 800694c:	f8d9 1000 	ldr.w	r1, [r9]
 8006950:	fa1f fb82 	uxth.w	fp, r2
 8006954:	b289      	uxth	r1, r1
 8006956:	fb0a 110b 	mla	r1, sl, fp, r1
 800695a:	4461      	add	r1, ip
 800695c:	f8d9 c000 	ldr.w	ip, [r9]
 8006960:	0c12      	lsrs	r2, r2, #16
 8006962:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006966:	fb0a c202 	mla	r2, sl, r2, ip
 800696a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800696e:	b289      	uxth	r1, r1
 8006970:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006974:	4577      	cmp	r7, lr
 8006976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800697a:	f849 1b04 	str.w	r1, [r9], #4
 800697e:	d8e3      	bhi.n	8006948 <__multiply+0xb0>
 8006980:	9a01      	ldr	r2, [sp, #4]
 8006982:	f845 c002 	str.w	ip, [r5, r2]
 8006986:	9a03      	ldr	r2, [sp, #12]
 8006988:	3304      	adds	r3, #4
 800698a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800698e:	f1b9 0f00 	cmp.w	r9, #0
 8006992:	d020      	beq.n	80069d6 <__multiply+0x13e>
 8006994:	46ae      	mov	lr, r5
 8006996:	f04f 0a00 	mov.w	sl, #0
 800699a:	6829      	ldr	r1, [r5, #0]
 800699c:	f104 0c14 	add.w	ip, r4, #20
 80069a0:	f8bc b000 	ldrh.w	fp, [ip]
 80069a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069a8:	b289      	uxth	r1, r1
 80069aa:	fb09 220b 	mla	r2, r9, fp, r2
 80069ae:	4492      	add	sl, r2
 80069b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80069b4:	f84e 1b04 	str.w	r1, [lr], #4
 80069b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069bc:	f8be 1000 	ldrh.w	r1, [lr]
 80069c0:	0c12      	lsrs	r2, r2, #16
 80069c2:	fb09 1102 	mla	r1, r9, r2, r1
 80069c6:	4567      	cmp	r7, ip
 80069c8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80069cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069d0:	d8e6      	bhi.n	80069a0 <__multiply+0x108>
 80069d2:	9a01      	ldr	r2, [sp, #4]
 80069d4:	50a9      	str	r1, [r5, r2]
 80069d6:	3504      	adds	r5, #4
 80069d8:	e79b      	b.n	8006912 <__multiply+0x7a>
 80069da:	3e01      	subs	r6, #1
 80069dc:	e79d      	b.n	800691a <__multiply+0x82>
 80069de:	bf00      	nop
 80069e0:	08007c78 	.word	0x08007c78
 80069e4:	08007d68 	.word	0x08007d68

080069e8 <__pow5mult>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	4615      	mov	r5, r2
 80069ee:	f012 0203 	ands.w	r2, r2, #3
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	d007      	beq.n	8006a08 <__pow5mult+0x20>
 80069f8:	4c25      	ldr	r4, [pc, #148]	; (8006a90 <__pow5mult+0xa8>)
 80069fa:	3a01      	subs	r2, #1
 80069fc:	2300      	movs	r3, #0
 80069fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a02:	f7ff fe55 	bl	80066b0 <__multadd>
 8006a06:	4607      	mov	r7, r0
 8006a08:	10ad      	asrs	r5, r5, #2
 8006a0a:	d03d      	beq.n	8006a88 <__pow5mult+0xa0>
 8006a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a0e:	b97c      	cbnz	r4, 8006a30 <__pow5mult+0x48>
 8006a10:	2010      	movs	r0, #16
 8006a12:	f7ff fdb5 	bl	8006580 <malloc>
 8006a16:	4602      	mov	r2, r0
 8006a18:	6270      	str	r0, [r6, #36]	; 0x24
 8006a1a:	b928      	cbnz	r0, 8006a28 <__pow5mult+0x40>
 8006a1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a20:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <__pow5mult+0xac>)
 8006a22:	481d      	ldr	r0, [pc, #116]	; (8006a98 <__pow5mult+0xb0>)
 8006a24:	f000 fd72 	bl	800750c <__assert_func>
 8006a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a2c:	6004      	str	r4, [r0, #0]
 8006a2e:	60c4      	str	r4, [r0, #12]
 8006a30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a38:	b94c      	cbnz	r4, 8006a4e <__pow5mult+0x66>
 8006a3a:	f240 2171 	movw	r1, #625	; 0x271
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff ff14 	bl	800686c <__i2b>
 8006a44:	2300      	movs	r3, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a4c:	6003      	str	r3, [r0, #0]
 8006a4e:	f04f 0900 	mov.w	r9, #0
 8006a52:	07eb      	lsls	r3, r5, #31
 8006a54:	d50a      	bpl.n	8006a6c <__pow5mult+0x84>
 8006a56:	4639      	mov	r1, r7
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7ff ff1c 	bl	8006898 <__multiply>
 8006a60:	4680      	mov	r8, r0
 8006a62:	4639      	mov	r1, r7
 8006a64:	4630      	mov	r0, r6
 8006a66:	f7ff fe01 	bl	800666c <_Bfree>
 8006a6a:	4647      	mov	r7, r8
 8006a6c:	106d      	asrs	r5, r5, #1
 8006a6e:	d00b      	beq.n	8006a88 <__pow5mult+0xa0>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	b938      	cbnz	r0, 8006a84 <__pow5mult+0x9c>
 8006a74:	4622      	mov	r2, r4
 8006a76:	4621      	mov	r1, r4
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f7ff ff0d 	bl	8006898 <__multiply>
 8006a7e:	6020      	str	r0, [r4, #0]
 8006a80:	f8c0 9000 	str.w	r9, [r0]
 8006a84:	4604      	mov	r4, r0
 8006a86:	e7e4      	b.n	8006a52 <__pow5mult+0x6a>
 8006a88:	4638      	mov	r0, r7
 8006a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a8e:	bf00      	nop
 8006a90:	08007eb8 	.word	0x08007eb8
 8006a94:	08007c06 	.word	0x08007c06
 8006a98:	08007d68 	.word	0x08007d68

08006a9c <__lshift>:
 8006a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	4691      	mov	r9, r2
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	6849      	ldr	r1, [r1, #4]
 8006aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ab4:	f108 0601 	add.w	r6, r8, #1
 8006ab8:	42b3      	cmp	r3, r6
 8006aba:	db0b      	blt.n	8006ad4 <__lshift+0x38>
 8006abc:	4638      	mov	r0, r7
 8006abe:	f7ff fd95 	bl	80065ec <_Balloc>
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	b948      	cbnz	r0, 8006ada <__lshift+0x3e>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006acc:	4b29      	ldr	r3, [pc, #164]	; (8006b74 <__lshift+0xd8>)
 8006ace:	482a      	ldr	r0, [pc, #168]	; (8006b78 <__lshift+0xdc>)
 8006ad0:	f000 fd1c 	bl	800750c <__assert_func>
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__lshift+0x1c>
 8006ada:	2300      	movs	r3, #0
 8006adc:	f100 0114 	add.w	r1, r0, #20
 8006ae0:	f100 0210 	add.w	r2, r0, #16
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	4553      	cmp	r3, sl
 8006ae8:	db37      	blt.n	8006b5a <__lshift+0xbe>
 8006aea:	6920      	ldr	r0, [r4, #16]
 8006aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006af0:	f104 0314 	add.w	r3, r4, #20
 8006af4:	f019 091f 	ands.w	r9, r9, #31
 8006af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006afc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b00:	d02f      	beq.n	8006b62 <__lshift+0xc6>
 8006b02:	468a      	mov	sl, r1
 8006b04:	f04f 0c00 	mov.w	ip, #0
 8006b08:	f1c9 0e20 	rsb	lr, r9, #32
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	fa02 f209 	lsl.w	r2, r2, r9
 8006b12:	ea42 020c 	orr.w	r2, r2, ip
 8006b16:	f84a 2b04 	str.w	r2, [sl], #4
 8006b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1e:	4298      	cmp	r0, r3
 8006b20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b24:	d8f2      	bhi.n	8006b0c <__lshift+0x70>
 8006b26:	1b03      	subs	r3, r0, r4
 8006b28:	3b15      	subs	r3, #21
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	3304      	adds	r3, #4
 8006b30:	f104 0215 	add.w	r2, r4, #21
 8006b34:	4290      	cmp	r0, r2
 8006b36:	bf38      	it	cc
 8006b38:	2304      	movcc	r3, #4
 8006b3a:	f841 c003 	str.w	ip, [r1, r3]
 8006b3e:	f1bc 0f00 	cmp.w	ip, #0
 8006b42:	d001      	beq.n	8006b48 <__lshift+0xac>
 8006b44:	f108 0602 	add.w	r6, r8, #2
 8006b48:	3e01      	subs	r6, #1
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	612e      	str	r6, [r5, #16]
 8006b50:	f7ff fd8c 	bl	800666c <_Bfree>
 8006b54:	4628      	mov	r0, r5
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b5e:	3301      	adds	r3, #1
 8006b60:	e7c1      	b.n	8006ae6 <__lshift+0x4a>
 8006b62:	3904      	subs	r1, #4
 8006b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b6e:	d8f9      	bhi.n	8006b64 <__lshift+0xc8>
 8006b70:	e7ea      	b.n	8006b48 <__lshift+0xac>
 8006b72:	bf00      	nop
 8006b74:	08007c78 	.word	0x08007c78
 8006b78:	08007d68 	.word	0x08007d68

08006b7c <__mcmp>:
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	690a      	ldr	r2, [r1, #16]
 8006b80:	6900      	ldr	r0, [r0, #16]
 8006b82:	b530      	push	{r4, r5, lr}
 8006b84:	1a80      	subs	r0, r0, r2
 8006b86:	d10d      	bne.n	8006ba4 <__mcmp+0x28>
 8006b88:	3314      	adds	r3, #20
 8006b8a:	3114      	adds	r1, #20
 8006b8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b9c:	4295      	cmp	r5, r2
 8006b9e:	d002      	beq.n	8006ba6 <__mcmp+0x2a>
 8006ba0:	d304      	bcc.n	8006bac <__mcmp+0x30>
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	bd30      	pop	{r4, r5, pc}
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	d3f4      	bcc.n	8006b94 <__mcmp+0x18>
 8006baa:	e7fb      	b.n	8006ba4 <__mcmp+0x28>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	e7f8      	b.n	8006ba4 <__mcmp+0x28>
	...

08006bb4 <__mdiff>:
 8006bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	460d      	mov	r5, r1
 8006bba:	4607      	mov	r7, r0
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	f7ff ffdb 	bl	8006b7c <__mcmp>
 8006bc6:	1e06      	subs	r6, r0, #0
 8006bc8:	d111      	bne.n	8006bee <__mdiff+0x3a>
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f7ff fd0d 	bl	80065ec <_Balloc>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	b928      	cbnz	r0, 8006be2 <__mdiff+0x2e>
 8006bd6:	f240 2132 	movw	r1, #562	; 0x232
 8006bda:	4b3a      	ldr	r3, [pc, #232]	; (8006cc4 <__mdiff+0x110>)
 8006bdc:	483a      	ldr	r0, [pc, #232]	; (8006cc8 <__mdiff+0x114>)
 8006bde:	f000 fc95 	bl	800750c <__assert_func>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006be8:	4610      	mov	r0, r2
 8006bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bee:	bfa4      	itt	ge
 8006bf0:	4623      	movge	r3, r4
 8006bf2:	462c      	movge	r4, r5
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	6861      	ldr	r1, [r4, #4]
 8006bf8:	bfa6      	itte	ge
 8006bfa:	461d      	movge	r5, r3
 8006bfc:	2600      	movge	r6, #0
 8006bfe:	2601      	movlt	r6, #1
 8006c00:	f7ff fcf4 	bl	80065ec <_Balloc>
 8006c04:	4602      	mov	r2, r0
 8006c06:	b918      	cbnz	r0, 8006c10 <__mdiff+0x5c>
 8006c08:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c0c:	4b2d      	ldr	r3, [pc, #180]	; (8006cc4 <__mdiff+0x110>)
 8006c0e:	e7e5      	b.n	8006bdc <__mdiff+0x28>
 8006c10:	f102 0814 	add.w	r8, r2, #20
 8006c14:	46c2      	mov	sl, r8
 8006c16:	f04f 0c00 	mov.w	ip, #0
 8006c1a:	6927      	ldr	r7, [r4, #16]
 8006c1c:	60c6      	str	r6, [r0, #12]
 8006c1e:	692e      	ldr	r6, [r5, #16]
 8006c20:	f104 0014 	add.w	r0, r4, #20
 8006c24:	f105 0914 	add.w	r9, r5, #20
 8006c28:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006c2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c30:	3410      	adds	r4, #16
 8006c32:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006c36:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c3a:	fa1f f18b 	uxth.w	r1, fp
 8006c3e:	448c      	add	ip, r1
 8006c40:	b299      	uxth	r1, r3
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	ebac 0101 	sub.w	r1, ip, r1
 8006c48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c4c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c50:	b289      	uxth	r1, r1
 8006c52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c56:	454e      	cmp	r6, r9
 8006c58:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c5c:	f84a 3b04 	str.w	r3, [sl], #4
 8006c60:	d8e7      	bhi.n	8006c32 <__mdiff+0x7e>
 8006c62:	1b73      	subs	r3, r6, r5
 8006c64:	3b15      	subs	r3, #21
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	3515      	adds	r5, #21
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	42ae      	cmp	r6, r5
 8006c70:	bf38      	it	cc
 8006c72:	2304      	movcc	r3, #4
 8006c74:	4418      	add	r0, r3
 8006c76:	4443      	add	r3, r8
 8006c78:	461e      	mov	r6, r3
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	4575      	cmp	r5, lr
 8006c7e:	d30e      	bcc.n	8006c9e <__mdiff+0xea>
 8006c80:	f10e 0103 	add.w	r1, lr, #3
 8006c84:	1a09      	subs	r1, r1, r0
 8006c86:	f021 0103 	bic.w	r1, r1, #3
 8006c8a:	3803      	subs	r0, #3
 8006c8c:	4586      	cmp	lr, r0
 8006c8e:	bf38      	it	cc
 8006c90:	2100      	movcc	r1, #0
 8006c92:	4419      	add	r1, r3
 8006c94:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006c98:	b18b      	cbz	r3, 8006cbe <__mdiff+0x10a>
 8006c9a:	6117      	str	r7, [r2, #16]
 8006c9c:	e7a4      	b.n	8006be8 <__mdiff+0x34>
 8006c9e:	f855 8b04 	ldr.w	r8, [r5], #4
 8006ca2:	fa1f f188 	uxth.w	r1, r8
 8006ca6:	4461      	add	r1, ip
 8006ca8:	140c      	asrs	r4, r1, #16
 8006caa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006cae:	b289      	uxth	r1, r1
 8006cb0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006cb4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006cb8:	f846 1b04 	str.w	r1, [r6], #4
 8006cbc:	e7de      	b.n	8006c7c <__mdiff+0xc8>
 8006cbe:	3f01      	subs	r7, #1
 8006cc0:	e7e8      	b.n	8006c94 <__mdiff+0xe0>
 8006cc2:	bf00      	nop
 8006cc4:	08007c78 	.word	0x08007c78
 8006cc8:	08007d68 	.word	0x08007d68

08006ccc <__ulp>:
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <__ulp+0x48>)
 8006cce:	400b      	ands	r3, r1
 8006cd0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	dd02      	ble.n	8006cde <__ulp+0x12>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4770      	bx	lr
 8006cde:	425b      	negs	r3, r3
 8006ce0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006ce4:	f04f 0000 	mov.w	r0, #0
 8006ce8:	f04f 0100 	mov.w	r1, #0
 8006cec:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006cf0:	da04      	bge.n	8006cfc <__ulp+0x30>
 8006cf2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006cf6:	fa43 f102 	asr.w	r1, r3, r2
 8006cfa:	4770      	bx	lr
 8006cfc:	f1a2 0314 	sub.w	r3, r2, #20
 8006d00:	2b1e      	cmp	r3, #30
 8006d02:	bfd6      	itet	le
 8006d04:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006d08:	2301      	movgt	r3, #1
 8006d0a:	fa22 f303 	lsrle.w	r3, r2, r3
 8006d0e:	4618      	mov	r0, r3
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	7ff00000 	.word	0x7ff00000

08006d18 <__b2d>:
 8006d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d1c:	6907      	ldr	r7, [r0, #16]
 8006d1e:	f100 0914 	add.w	r9, r0, #20
 8006d22:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006d26:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006d2a:	f1a7 0804 	sub.w	r8, r7, #4
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f7ff fd4e 	bl	80067d0 <__hi0bits>
 8006d34:	f1c0 0320 	rsb	r3, r0, #32
 8006d38:	280a      	cmp	r0, #10
 8006d3a:	600b      	str	r3, [r1, #0]
 8006d3c:	491f      	ldr	r1, [pc, #124]	; (8006dbc <__b2d+0xa4>)
 8006d3e:	dc17      	bgt.n	8006d70 <__b2d+0x58>
 8006d40:	45c1      	cmp	r9, r8
 8006d42:	bf28      	it	cs
 8006d44:	2200      	movcs	r2, #0
 8006d46:	f1c0 0c0b 	rsb	ip, r0, #11
 8006d4a:	fa26 f30c 	lsr.w	r3, r6, ip
 8006d4e:	bf38      	it	cc
 8006d50:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006d54:	ea43 0501 	orr.w	r5, r3, r1
 8006d58:	f100 0315 	add.w	r3, r0, #21
 8006d5c:	fa06 f303 	lsl.w	r3, r6, r3
 8006d60:	fa22 f20c 	lsr.w	r2, r2, ip
 8006d64:	ea43 0402 	orr.w	r4, r3, r2
 8006d68:	4620      	mov	r0, r4
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d70:	45c1      	cmp	r9, r8
 8006d72:	bf2e      	itee	cs
 8006d74:	2200      	movcs	r2, #0
 8006d76:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006d7a:	f1a7 0808 	subcc.w	r8, r7, #8
 8006d7e:	f1b0 030b 	subs.w	r3, r0, #11
 8006d82:	d016      	beq.n	8006db2 <__b2d+0x9a>
 8006d84:	f1c3 0720 	rsb	r7, r3, #32
 8006d88:	fa22 f107 	lsr.w	r1, r2, r7
 8006d8c:	45c8      	cmp	r8, r9
 8006d8e:	fa06 f603 	lsl.w	r6, r6, r3
 8006d92:	ea46 0601 	orr.w	r6, r6, r1
 8006d96:	bf94      	ite	ls
 8006d98:	2100      	movls	r1, #0
 8006d9a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006d9e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006da2:	fa02 f003 	lsl.w	r0, r2, r3
 8006da6:	40f9      	lsrs	r1, r7
 8006da8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006dac:	ea40 0401 	orr.w	r4, r0, r1
 8006db0:	e7da      	b.n	8006d68 <__b2d+0x50>
 8006db2:	4614      	mov	r4, r2
 8006db4:	ea46 0501 	orr.w	r5, r6, r1
 8006db8:	e7d6      	b.n	8006d68 <__b2d+0x50>
 8006dba:	bf00      	nop
 8006dbc:	3ff00000 	.word	0x3ff00000

08006dc0 <__d2b>:
 8006dc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006dca:	4690      	mov	r8, r2
 8006dcc:	461d      	mov	r5, r3
 8006dce:	f7ff fc0d 	bl	80065ec <_Balloc>
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	b930      	cbnz	r0, 8006de4 <__d2b+0x24>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	f240 310a 	movw	r1, #778	; 0x30a
 8006ddc:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <__d2b+0xb0>)
 8006dde:	4825      	ldr	r0, [pc, #148]	; (8006e74 <__d2b+0xb4>)
 8006de0:	f000 fb94 	bl	800750c <__assert_func>
 8006de4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006de8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006dec:	bb2d      	cbnz	r5, 8006e3a <__d2b+0x7a>
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	f1b8 0300 	subs.w	r3, r8, #0
 8006df4:	d026      	beq.n	8006e44 <__d2b+0x84>
 8006df6:	4668      	mov	r0, sp
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	f7ff fd09 	bl	8006810 <__lo0bits>
 8006dfe:	9900      	ldr	r1, [sp, #0]
 8006e00:	b1f0      	cbz	r0, 8006e40 <__d2b+0x80>
 8006e02:	9a01      	ldr	r2, [sp, #4]
 8006e04:	f1c0 0320 	rsb	r3, r0, #32
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	40c2      	lsrs	r2, r0
 8006e10:	6163      	str	r3, [r4, #20]
 8006e12:	9201      	str	r2, [sp, #4]
 8006e14:	9b01      	ldr	r3, [sp, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bf14      	ite	ne
 8006e1a:	2102      	movne	r1, #2
 8006e1c:	2101      	moveq	r1, #1
 8006e1e:	61a3      	str	r3, [r4, #24]
 8006e20:	6121      	str	r1, [r4, #16]
 8006e22:	b1c5      	cbz	r5, 8006e56 <__d2b+0x96>
 8006e24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e28:	4405      	add	r5, r0
 8006e2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e2e:	603d      	str	r5, [r7, #0]
 8006e30:	6030      	str	r0, [r6, #0]
 8006e32:	4620      	mov	r0, r4
 8006e34:	b002      	add	sp, #8
 8006e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e3e:	e7d6      	b.n	8006dee <__d2b+0x2e>
 8006e40:	6161      	str	r1, [r4, #20]
 8006e42:	e7e7      	b.n	8006e14 <__d2b+0x54>
 8006e44:	a801      	add	r0, sp, #4
 8006e46:	f7ff fce3 	bl	8006810 <__lo0bits>
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	9b01      	ldr	r3, [sp, #4]
 8006e4e:	6121      	str	r1, [r4, #16]
 8006e50:	6163      	str	r3, [r4, #20]
 8006e52:	3020      	adds	r0, #32
 8006e54:	e7e5      	b.n	8006e22 <__d2b+0x62>
 8006e56:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006e5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e5e:	6038      	str	r0, [r7, #0]
 8006e60:	6918      	ldr	r0, [r3, #16]
 8006e62:	f7ff fcb5 	bl	80067d0 <__hi0bits>
 8006e66:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006e6a:	6031      	str	r1, [r6, #0]
 8006e6c:	e7e1      	b.n	8006e32 <__d2b+0x72>
 8006e6e:	bf00      	nop
 8006e70:	08007c78 	.word	0x08007c78
 8006e74:	08007d68 	.word	0x08007d68

08006e78 <__ratio>:
 8006e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	4688      	mov	r8, r1
 8006e7e:	4669      	mov	r1, sp
 8006e80:	4681      	mov	r9, r0
 8006e82:	f7ff ff49 	bl	8006d18 <__b2d>
 8006e86:	460f      	mov	r7, r1
 8006e88:	4604      	mov	r4, r0
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	a901      	add	r1, sp, #4
 8006e90:	f7ff ff42 	bl	8006d18 <__b2d>
 8006e94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e98:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006e9c:	468b      	mov	fp, r1
 8006e9e:	eba3 0c02 	sub.w	ip, r3, r2
 8006ea2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bfd5      	itete	le
 8006eb0:	460a      	movle	r2, r1
 8006eb2:	462a      	movgt	r2, r5
 8006eb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006eb8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006ebc:	bfd8      	it	le
 8006ebe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006ec2:	465b      	mov	r3, fp
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f7f9 fc9b 	bl	8000804 <__aeabi_ddiv>
 8006ece:	b003      	add	sp, #12
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ed4 <__copybits>:
 8006ed4:	3901      	subs	r1, #1
 8006ed6:	b570      	push	{r4, r5, r6, lr}
 8006ed8:	1149      	asrs	r1, r1, #5
 8006eda:	6914      	ldr	r4, [r2, #16]
 8006edc:	3101      	adds	r1, #1
 8006ede:	f102 0314 	add.w	r3, r2, #20
 8006ee2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ee6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006eea:	1f05      	subs	r5, r0, #4
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	d30c      	bcc.n	8006f0a <__copybits+0x36>
 8006ef0:	1aa3      	subs	r3, r4, r2
 8006ef2:	3b11      	subs	r3, #17
 8006ef4:	f023 0303 	bic.w	r3, r3, #3
 8006ef8:	3211      	adds	r2, #17
 8006efa:	42a2      	cmp	r2, r4
 8006efc:	bf88      	it	hi
 8006efe:	2300      	movhi	r3, #0
 8006f00:	4418      	add	r0, r3
 8006f02:	2300      	movs	r3, #0
 8006f04:	4288      	cmp	r0, r1
 8006f06:	d305      	bcc.n	8006f14 <__copybits+0x40>
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
 8006f0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006f0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006f12:	e7eb      	b.n	8006eec <__copybits+0x18>
 8006f14:	f840 3b04 	str.w	r3, [r0], #4
 8006f18:	e7f4      	b.n	8006f04 <__copybits+0x30>

08006f1a <__any_on>:
 8006f1a:	f100 0214 	add.w	r2, r0, #20
 8006f1e:	6900      	ldr	r0, [r0, #16]
 8006f20:	114b      	asrs	r3, r1, #5
 8006f22:	4298      	cmp	r0, r3
 8006f24:	b510      	push	{r4, lr}
 8006f26:	db11      	blt.n	8006f4c <__any_on+0x32>
 8006f28:	dd0a      	ble.n	8006f40 <__any_on+0x26>
 8006f2a:	f011 011f 	ands.w	r1, r1, #31
 8006f2e:	d007      	beq.n	8006f40 <__any_on+0x26>
 8006f30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006f34:	fa24 f001 	lsr.w	r0, r4, r1
 8006f38:	fa00 f101 	lsl.w	r1, r0, r1
 8006f3c:	428c      	cmp	r4, r1
 8006f3e:	d10b      	bne.n	8006f58 <__any_on+0x3e>
 8006f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d803      	bhi.n	8006f50 <__any_on+0x36>
 8006f48:	2000      	movs	r0, #0
 8006f4a:	bd10      	pop	{r4, pc}
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	e7f7      	b.n	8006f40 <__any_on+0x26>
 8006f50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f54:	2900      	cmp	r1, #0
 8006f56:	d0f5      	beq.n	8006f44 <__any_on+0x2a>
 8006f58:	2001      	movs	r0, #1
 8006f5a:	e7f6      	b.n	8006f4a <__any_on+0x30>

08006f5c <_calloc_r>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	fba1 5402 	umull	r5, r4, r1, r2
 8006f62:	b934      	cbnz	r4, 8006f72 <_calloc_r+0x16>
 8006f64:	4629      	mov	r1, r5
 8006f66:	f000 f875 	bl	8007054 <_malloc_r>
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	b928      	cbnz	r0, 8006f7a <_calloc_r+0x1e>
 8006f6e:	4630      	mov	r0, r6
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	220c      	movs	r2, #12
 8006f74:	2600      	movs	r6, #0
 8006f76:	6002      	str	r2, [r0, #0]
 8006f78:	e7f9      	b.n	8006f6e <_calloc_r+0x12>
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	f7fc f89f 	bl	80030c0 <memset>
 8006f82:	e7f4      	b.n	8006f6e <_calloc_r+0x12>

08006f84 <_free_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4605      	mov	r5, r0
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	d040      	beq.n	800700e <_free_r+0x8a>
 8006f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f90:	1f0c      	subs	r4, r1, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bfb8      	it	lt
 8006f96:	18e4      	addlt	r4, r4, r3
 8006f98:	f000 fb46 	bl	8007628 <__malloc_lock>
 8006f9c:	4a1c      	ldr	r2, [pc, #112]	; (8007010 <_free_r+0x8c>)
 8006f9e:	6813      	ldr	r3, [r2, #0]
 8006fa0:	b933      	cbnz	r3, 8006fb0 <_free_r+0x2c>
 8006fa2:	6063      	str	r3, [r4, #4]
 8006fa4:	6014      	str	r4, [r2, #0]
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fac:	f000 bb42 	b.w	8007634 <__malloc_unlock>
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	d908      	bls.n	8006fc6 <_free_r+0x42>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	1821      	adds	r1, r4, r0
 8006fb8:	428b      	cmp	r3, r1
 8006fba:	bf01      	itttt	eq
 8006fbc:	6819      	ldreq	r1, [r3, #0]
 8006fbe:	685b      	ldreq	r3, [r3, #4]
 8006fc0:	1809      	addeq	r1, r1, r0
 8006fc2:	6021      	streq	r1, [r4, #0]
 8006fc4:	e7ed      	b.n	8006fa2 <_free_r+0x1e>
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	b10b      	cbz	r3, 8006fd0 <_free_r+0x4c>
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d9fa      	bls.n	8006fc6 <_free_r+0x42>
 8006fd0:	6811      	ldr	r1, [r2, #0]
 8006fd2:	1850      	adds	r0, r2, r1
 8006fd4:	42a0      	cmp	r0, r4
 8006fd6:	d10b      	bne.n	8006ff0 <_free_r+0x6c>
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	4401      	add	r1, r0
 8006fdc:	1850      	adds	r0, r2, r1
 8006fde:	4283      	cmp	r3, r0
 8006fe0:	6011      	str	r1, [r2, #0]
 8006fe2:	d1e0      	bne.n	8006fa6 <_free_r+0x22>
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	4401      	add	r1, r0
 8006fea:	6011      	str	r1, [r2, #0]
 8006fec:	6053      	str	r3, [r2, #4]
 8006fee:	e7da      	b.n	8006fa6 <_free_r+0x22>
 8006ff0:	d902      	bls.n	8006ff8 <_free_r+0x74>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	e7d6      	b.n	8006fa6 <_free_r+0x22>
 8006ff8:	6820      	ldr	r0, [r4, #0]
 8006ffa:	1821      	adds	r1, r4, r0
 8006ffc:	428b      	cmp	r3, r1
 8006ffe:	bf01      	itttt	eq
 8007000:	6819      	ldreq	r1, [r3, #0]
 8007002:	685b      	ldreq	r3, [r3, #4]
 8007004:	1809      	addeq	r1, r1, r0
 8007006:	6021      	streq	r1, [r4, #0]
 8007008:	6063      	str	r3, [r4, #4]
 800700a:	6054      	str	r4, [r2, #4]
 800700c:	e7cb      	b.n	8006fa6 <_free_r+0x22>
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20000254 	.word	0x20000254

08007014 <sbrk_aligned>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	4e0e      	ldr	r6, [pc, #56]	; (8007050 <sbrk_aligned+0x3c>)
 8007018:	460c      	mov	r4, r1
 800701a:	6831      	ldr	r1, [r6, #0]
 800701c:	4605      	mov	r5, r0
 800701e:	b911      	cbnz	r1, 8007026 <sbrk_aligned+0x12>
 8007020:	f000 f9ee 	bl	8007400 <_sbrk_r>
 8007024:	6030      	str	r0, [r6, #0]
 8007026:	4621      	mov	r1, r4
 8007028:	4628      	mov	r0, r5
 800702a:	f000 f9e9 	bl	8007400 <_sbrk_r>
 800702e:	1c43      	adds	r3, r0, #1
 8007030:	d00a      	beq.n	8007048 <sbrk_aligned+0x34>
 8007032:	1cc4      	adds	r4, r0, #3
 8007034:	f024 0403 	bic.w	r4, r4, #3
 8007038:	42a0      	cmp	r0, r4
 800703a:	d007      	beq.n	800704c <sbrk_aligned+0x38>
 800703c:	1a21      	subs	r1, r4, r0
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f9de 	bl	8007400 <_sbrk_r>
 8007044:	3001      	adds	r0, #1
 8007046:	d101      	bne.n	800704c <sbrk_aligned+0x38>
 8007048:	f04f 34ff 	mov.w	r4, #4294967295
 800704c:	4620      	mov	r0, r4
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	20000258 	.word	0x20000258

08007054 <_malloc_r>:
 8007054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007058:	1ccd      	adds	r5, r1, #3
 800705a:	f025 0503 	bic.w	r5, r5, #3
 800705e:	3508      	adds	r5, #8
 8007060:	2d0c      	cmp	r5, #12
 8007062:	bf38      	it	cc
 8007064:	250c      	movcc	r5, #12
 8007066:	2d00      	cmp	r5, #0
 8007068:	4607      	mov	r7, r0
 800706a:	db01      	blt.n	8007070 <_malloc_r+0x1c>
 800706c:	42a9      	cmp	r1, r5
 800706e:	d905      	bls.n	800707c <_malloc_r+0x28>
 8007070:	230c      	movs	r3, #12
 8007072:	2600      	movs	r6, #0
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	4630      	mov	r0, r6
 8007078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800707c:	4e2e      	ldr	r6, [pc, #184]	; (8007138 <_malloc_r+0xe4>)
 800707e:	f000 fad3 	bl	8007628 <__malloc_lock>
 8007082:	6833      	ldr	r3, [r6, #0]
 8007084:	461c      	mov	r4, r3
 8007086:	bb34      	cbnz	r4, 80070d6 <_malloc_r+0x82>
 8007088:	4629      	mov	r1, r5
 800708a:	4638      	mov	r0, r7
 800708c:	f7ff ffc2 	bl	8007014 <sbrk_aligned>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	4604      	mov	r4, r0
 8007094:	d14d      	bne.n	8007132 <_malloc_r+0xde>
 8007096:	6834      	ldr	r4, [r6, #0]
 8007098:	4626      	mov	r6, r4
 800709a:	2e00      	cmp	r6, #0
 800709c:	d140      	bne.n	8007120 <_malloc_r+0xcc>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	4631      	mov	r1, r6
 80070a2:	4638      	mov	r0, r7
 80070a4:	eb04 0803 	add.w	r8, r4, r3
 80070a8:	f000 f9aa 	bl	8007400 <_sbrk_r>
 80070ac:	4580      	cmp	r8, r0
 80070ae:	d13a      	bne.n	8007126 <_malloc_r+0xd2>
 80070b0:	6821      	ldr	r1, [r4, #0]
 80070b2:	3503      	adds	r5, #3
 80070b4:	1a6d      	subs	r5, r5, r1
 80070b6:	f025 0503 	bic.w	r5, r5, #3
 80070ba:	3508      	adds	r5, #8
 80070bc:	2d0c      	cmp	r5, #12
 80070be:	bf38      	it	cc
 80070c0:	250c      	movcc	r5, #12
 80070c2:	4638      	mov	r0, r7
 80070c4:	4629      	mov	r1, r5
 80070c6:	f7ff ffa5 	bl	8007014 <sbrk_aligned>
 80070ca:	3001      	adds	r0, #1
 80070cc:	d02b      	beq.n	8007126 <_malloc_r+0xd2>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	442b      	add	r3, r5
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	e00e      	b.n	80070f4 <_malloc_r+0xa0>
 80070d6:	6822      	ldr	r2, [r4, #0]
 80070d8:	1b52      	subs	r2, r2, r5
 80070da:	d41e      	bmi.n	800711a <_malloc_r+0xc6>
 80070dc:	2a0b      	cmp	r2, #11
 80070de:	d916      	bls.n	800710e <_malloc_r+0xba>
 80070e0:	1961      	adds	r1, r4, r5
 80070e2:	42a3      	cmp	r3, r4
 80070e4:	6025      	str	r5, [r4, #0]
 80070e6:	bf18      	it	ne
 80070e8:	6059      	strne	r1, [r3, #4]
 80070ea:	6863      	ldr	r3, [r4, #4]
 80070ec:	bf08      	it	eq
 80070ee:	6031      	streq	r1, [r6, #0]
 80070f0:	5162      	str	r2, [r4, r5]
 80070f2:	604b      	str	r3, [r1, #4]
 80070f4:	4638      	mov	r0, r7
 80070f6:	f104 060b 	add.w	r6, r4, #11
 80070fa:	f000 fa9b 	bl	8007634 <__malloc_unlock>
 80070fe:	f026 0607 	bic.w	r6, r6, #7
 8007102:	1d23      	adds	r3, r4, #4
 8007104:	1af2      	subs	r2, r6, r3
 8007106:	d0b6      	beq.n	8007076 <_malloc_r+0x22>
 8007108:	1b9b      	subs	r3, r3, r6
 800710a:	50a3      	str	r3, [r4, r2]
 800710c:	e7b3      	b.n	8007076 <_malloc_r+0x22>
 800710e:	6862      	ldr	r2, [r4, #4]
 8007110:	42a3      	cmp	r3, r4
 8007112:	bf0c      	ite	eq
 8007114:	6032      	streq	r2, [r6, #0]
 8007116:	605a      	strne	r2, [r3, #4]
 8007118:	e7ec      	b.n	80070f4 <_malloc_r+0xa0>
 800711a:	4623      	mov	r3, r4
 800711c:	6864      	ldr	r4, [r4, #4]
 800711e:	e7b2      	b.n	8007086 <_malloc_r+0x32>
 8007120:	4634      	mov	r4, r6
 8007122:	6876      	ldr	r6, [r6, #4]
 8007124:	e7b9      	b.n	800709a <_malloc_r+0x46>
 8007126:	230c      	movs	r3, #12
 8007128:	4638      	mov	r0, r7
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	f000 fa82 	bl	8007634 <__malloc_unlock>
 8007130:	e7a1      	b.n	8007076 <_malloc_r+0x22>
 8007132:	6025      	str	r5, [r4, #0]
 8007134:	e7de      	b.n	80070f4 <_malloc_r+0xa0>
 8007136:	bf00      	nop
 8007138:	20000254 	.word	0x20000254

0800713c <__ssputs_r>:
 800713c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	688e      	ldr	r6, [r1, #8]
 8007142:	4682      	mov	sl, r0
 8007144:	429e      	cmp	r6, r3
 8007146:	460c      	mov	r4, r1
 8007148:	4690      	mov	r8, r2
 800714a:	461f      	mov	r7, r3
 800714c:	d838      	bhi.n	80071c0 <__ssputs_r+0x84>
 800714e:	898a      	ldrh	r2, [r1, #12]
 8007150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007154:	d032      	beq.n	80071bc <__ssputs_r+0x80>
 8007156:	6825      	ldr	r5, [r4, #0]
 8007158:	6909      	ldr	r1, [r1, #16]
 800715a:	3301      	adds	r3, #1
 800715c:	eba5 0901 	sub.w	r9, r5, r1
 8007160:	6965      	ldr	r5, [r4, #20]
 8007162:	444b      	add	r3, r9
 8007164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800716c:	106d      	asrs	r5, r5, #1
 800716e:	429d      	cmp	r5, r3
 8007170:	bf38      	it	cc
 8007172:	461d      	movcc	r5, r3
 8007174:	0553      	lsls	r3, r2, #21
 8007176:	d531      	bpl.n	80071dc <__ssputs_r+0xa0>
 8007178:	4629      	mov	r1, r5
 800717a:	f7ff ff6b 	bl	8007054 <_malloc_r>
 800717e:	4606      	mov	r6, r0
 8007180:	b950      	cbnz	r0, 8007198 <__ssputs_r+0x5c>
 8007182:	230c      	movs	r3, #12
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	f8ca 3000 	str.w	r3, [sl]
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007198:	464a      	mov	r2, r9
 800719a:	6921      	ldr	r1, [r4, #16]
 800719c:	f7ff fa18 	bl	80065d0 <memcpy>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	6126      	str	r6, [r4, #16]
 80071ae:	444e      	add	r6, r9
 80071b0:	6026      	str	r6, [r4, #0]
 80071b2:	463e      	mov	r6, r7
 80071b4:	6165      	str	r5, [r4, #20]
 80071b6:	eba5 0509 	sub.w	r5, r5, r9
 80071ba:	60a5      	str	r5, [r4, #8]
 80071bc:	42be      	cmp	r6, r7
 80071be:	d900      	bls.n	80071c2 <__ssputs_r+0x86>
 80071c0:	463e      	mov	r6, r7
 80071c2:	4632      	mov	r2, r6
 80071c4:	4641      	mov	r1, r8
 80071c6:	6820      	ldr	r0, [r4, #0]
 80071c8:	f000 fa14 	bl	80075f4 <memmove>
 80071cc:	68a3      	ldr	r3, [r4, #8]
 80071ce:	2000      	movs	r0, #0
 80071d0:	1b9b      	subs	r3, r3, r6
 80071d2:	60a3      	str	r3, [r4, #8]
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	4433      	add	r3, r6
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	e7db      	b.n	8007194 <__ssputs_r+0x58>
 80071dc:	462a      	mov	r2, r5
 80071de:	f000 fa2f 	bl	8007640 <_realloc_r>
 80071e2:	4606      	mov	r6, r0
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d1e1      	bne.n	80071ac <__ssputs_r+0x70>
 80071e8:	4650      	mov	r0, sl
 80071ea:	6921      	ldr	r1, [r4, #16]
 80071ec:	f7ff feca 	bl	8006f84 <_free_r>
 80071f0:	e7c7      	b.n	8007182 <__ssputs_r+0x46>
	...

080071f4 <_svfiprintf_r>:
 80071f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f8:	4698      	mov	r8, r3
 80071fa:	898b      	ldrh	r3, [r1, #12]
 80071fc:	4607      	mov	r7, r0
 80071fe:	061b      	lsls	r3, r3, #24
 8007200:	460d      	mov	r5, r1
 8007202:	4614      	mov	r4, r2
 8007204:	b09d      	sub	sp, #116	; 0x74
 8007206:	d50e      	bpl.n	8007226 <_svfiprintf_r+0x32>
 8007208:	690b      	ldr	r3, [r1, #16]
 800720a:	b963      	cbnz	r3, 8007226 <_svfiprintf_r+0x32>
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	f7ff ff21 	bl	8007054 <_malloc_r>
 8007212:	6028      	str	r0, [r5, #0]
 8007214:	6128      	str	r0, [r5, #16]
 8007216:	b920      	cbnz	r0, 8007222 <_svfiprintf_r+0x2e>
 8007218:	230c      	movs	r3, #12
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	f04f 30ff 	mov.w	r0, #4294967295
 8007220:	e0d1      	b.n	80073c6 <_svfiprintf_r+0x1d2>
 8007222:	2340      	movs	r3, #64	; 0x40
 8007224:	616b      	str	r3, [r5, #20]
 8007226:	2300      	movs	r3, #0
 8007228:	9309      	str	r3, [sp, #36]	; 0x24
 800722a:	2320      	movs	r3, #32
 800722c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007230:	2330      	movs	r3, #48	; 0x30
 8007232:	f04f 0901 	mov.w	r9, #1
 8007236:	f8cd 800c 	str.w	r8, [sp, #12]
 800723a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80073e0 <_svfiprintf_r+0x1ec>
 800723e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007242:	4623      	mov	r3, r4
 8007244:	469a      	mov	sl, r3
 8007246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800724a:	b10a      	cbz	r2, 8007250 <_svfiprintf_r+0x5c>
 800724c:	2a25      	cmp	r2, #37	; 0x25
 800724e:	d1f9      	bne.n	8007244 <_svfiprintf_r+0x50>
 8007250:	ebba 0b04 	subs.w	fp, sl, r4
 8007254:	d00b      	beq.n	800726e <_svfiprintf_r+0x7a>
 8007256:	465b      	mov	r3, fp
 8007258:	4622      	mov	r2, r4
 800725a:	4629      	mov	r1, r5
 800725c:	4638      	mov	r0, r7
 800725e:	f7ff ff6d 	bl	800713c <__ssputs_r>
 8007262:	3001      	adds	r0, #1
 8007264:	f000 80aa 	beq.w	80073bc <_svfiprintf_r+0x1c8>
 8007268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800726a:	445a      	add	r2, fp
 800726c:	9209      	str	r2, [sp, #36]	; 0x24
 800726e:	f89a 3000 	ldrb.w	r3, [sl]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80a2 	beq.w	80073bc <_svfiprintf_r+0x1c8>
 8007278:	2300      	movs	r3, #0
 800727a:	f04f 32ff 	mov.w	r2, #4294967295
 800727e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007282:	f10a 0a01 	add.w	sl, sl, #1
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	9307      	str	r3, [sp, #28]
 800728a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800728e:	931a      	str	r3, [sp, #104]	; 0x68
 8007290:	4654      	mov	r4, sl
 8007292:	2205      	movs	r2, #5
 8007294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007298:	4851      	ldr	r0, [pc, #324]	; (80073e0 <_svfiprintf_r+0x1ec>)
 800729a:	f7ff f98b 	bl	80065b4 <memchr>
 800729e:	9a04      	ldr	r2, [sp, #16]
 80072a0:	b9d8      	cbnz	r0, 80072da <_svfiprintf_r+0xe6>
 80072a2:	06d0      	lsls	r0, r2, #27
 80072a4:	bf44      	itt	mi
 80072a6:	2320      	movmi	r3, #32
 80072a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ac:	0711      	lsls	r1, r2, #28
 80072ae:	bf44      	itt	mi
 80072b0:	232b      	movmi	r3, #43	; 0x2b
 80072b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ba:	2b2a      	cmp	r3, #42	; 0x2a
 80072bc:	d015      	beq.n	80072ea <_svfiprintf_r+0xf6>
 80072be:	4654      	mov	r4, sl
 80072c0:	2000      	movs	r0, #0
 80072c2:	f04f 0c0a 	mov.w	ip, #10
 80072c6:	9a07      	ldr	r2, [sp, #28]
 80072c8:	4621      	mov	r1, r4
 80072ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ce:	3b30      	subs	r3, #48	; 0x30
 80072d0:	2b09      	cmp	r3, #9
 80072d2:	d94e      	bls.n	8007372 <_svfiprintf_r+0x17e>
 80072d4:	b1b0      	cbz	r0, 8007304 <_svfiprintf_r+0x110>
 80072d6:	9207      	str	r2, [sp, #28]
 80072d8:	e014      	b.n	8007304 <_svfiprintf_r+0x110>
 80072da:	eba0 0308 	sub.w	r3, r0, r8
 80072de:	fa09 f303 	lsl.w	r3, r9, r3
 80072e2:	4313      	orrs	r3, r2
 80072e4:	46a2      	mov	sl, r4
 80072e6:	9304      	str	r3, [sp, #16]
 80072e8:	e7d2      	b.n	8007290 <_svfiprintf_r+0x9c>
 80072ea:	9b03      	ldr	r3, [sp, #12]
 80072ec:	1d19      	adds	r1, r3, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	9103      	str	r1, [sp, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfbb      	ittet	lt
 80072f6:	425b      	neglt	r3, r3
 80072f8:	f042 0202 	orrlt.w	r2, r2, #2
 80072fc:	9307      	strge	r3, [sp, #28]
 80072fe:	9307      	strlt	r3, [sp, #28]
 8007300:	bfb8      	it	lt
 8007302:	9204      	strlt	r2, [sp, #16]
 8007304:	7823      	ldrb	r3, [r4, #0]
 8007306:	2b2e      	cmp	r3, #46	; 0x2e
 8007308:	d10c      	bne.n	8007324 <_svfiprintf_r+0x130>
 800730a:	7863      	ldrb	r3, [r4, #1]
 800730c:	2b2a      	cmp	r3, #42	; 0x2a
 800730e:	d135      	bne.n	800737c <_svfiprintf_r+0x188>
 8007310:	9b03      	ldr	r3, [sp, #12]
 8007312:	3402      	adds	r4, #2
 8007314:	1d1a      	adds	r2, r3, #4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	9203      	str	r2, [sp, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	bfb8      	it	lt
 800731e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007322:	9305      	str	r3, [sp, #20]
 8007324:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80073e4 <_svfiprintf_r+0x1f0>
 8007328:	2203      	movs	r2, #3
 800732a:	4650      	mov	r0, sl
 800732c:	7821      	ldrb	r1, [r4, #0]
 800732e:	f7ff f941 	bl	80065b4 <memchr>
 8007332:	b140      	cbz	r0, 8007346 <_svfiprintf_r+0x152>
 8007334:	2340      	movs	r3, #64	; 0x40
 8007336:	eba0 000a 	sub.w	r0, r0, sl
 800733a:	fa03 f000 	lsl.w	r0, r3, r0
 800733e:	9b04      	ldr	r3, [sp, #16]
 8007340:	3401      	adds	r4, #1
 8007342:	4303      	orrs	r3, r0
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800734a:	2206      	movs	r2, #6
 800734c:	4826      	ldr	r0, [pc, #152]	; (80073e8 <_svfiprintf_r+0x1f4>)
 800734e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007352:	f7ff f92f 	bl	80065b4 <memchr>
 8007356:	2800      	cmp	r0, #0
 8007358:	d038      	beq.n	80073cc <_svfiprintf_r+0x1d8>
 800735a:	4b24      	ldr	r3, [pc, #144]	; (80073ec <_svfiprintf_r+0x1f8>)
 800735c:	bb1b      	cbnz	r3, 80073a6 <_svfiprintf_r+0x1b2>
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	3307      	adds	r3, #7
 8007362:	f023 0307 	bic.w	r3, r3, #7
 8007366:	3308      	adds	r3, #8
 8007368:	9303      	str	r3, [sp, #12]
 800736a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736c:	4433      	add	r3, r6
 800736e:	9309      	str	r3, [sp, #36]	; 0x24
 8007370:	e767      	b.n	8007242 <_svfiprintf_r+0x4e>
 8007372:	460c      	mov	r4, r1
 8007374:	2001      	movs	r0, #1
 8007376:	fb0c 3202 	mla	r2, ip, r2, r3
 800737a:	e7a5      	b.n	80072c8 <_svfiprintf_r+0xd4>
 800737c:	2300      	movs	r3, #0
 800737e:	f04f 0c0a 	mov.w	ip, #10
 8007382:	4619      	mov	r1, r3
 8007384:	3401      	adds	r4, #1
 8007386:	9305      	str	r3, [sp, #20]
 8007388:	4620      	mov	r0, r4
 800738a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800738e:	3a30      	subs	r2, #48	; 0x30
 8007390:	2a09      	cmp	r2, #9
 8007392:	d903      	bls.n	800739c <_svfiprintf_r+0x1a8>
 8007394:	2b00      	cmp	r3, #0
 8007396:	d0c5      	beq.n	8007324 <_svfiprintf_r+0x130>
 8007398:	9105      	str	r1, [sp, #20]
 800739a:	e7c3      	b.n	8007324 <_svfiprintf_r+0x130>
 800739c:	4604      	mov	r4, r0
 800739e:	2301      	movs	r3, #1
 80073a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80073a4:	e7f0      	b.n	8007388 <_svfiprintf_r+0x194>
 80073a6:	ab03      	add	r3, sp, #12
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	462a      	mov	r2, r5
 80073ac:	4638      	mov	r0, r7
 80073ae:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <_svfiprintf_r+0x1fc>)
 80073b0:	a904      	add	r1, sp, #16
 80073b2:	f7fb ff2b 	bl	800320c <_printf_float>
 80073b6:	1c42      	adds	r2, r0, #1
 80073b8:	4606      	mov	r6, r0
 80073ba:	d1d6      	bne.n	800736a <_svfiprintf_r+0x176>
 80073bc:	89ab      	ldrh	r3, [r5, #12]
 80073be:	065b      	lsls	r3, r3, #25
 80073c0:	f53f af2c 	bmi.w	800721c <_svfiprintf_r+0x28>
 80073c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073c6:	b01d      	add	sp, #116	; 0x74
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073cc:	ab03      	add	r3, sp, #12
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	462a      	mov	r2, r5
 80073d2:	4638      	mov	r0, r7
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <_svfiprintf_r+0x1fc>)
 80073d6:	a904      	add	r1, sp, #16
 80073d8:	f7fc f9b4 	bl	8003744 <_printf_i>
 80073dc:	e7eb      	b.n	80073b6 <_svfiprintf_r+0x1c2>
 80073de:	bf00      	nop
 80073e0:	08007ec4 	.word	0x08007ec4
 80073e4:	08007eca 	.word	0x08007eca
 80073e8:	08007ece 	.word	0x08007ece
 80073ec:	0800320d 	.word	0x0800320d
 80073f0:	0800713d 	.word	0x0800713d

080073f4 <nan>:
 80073f4:	2000      	movs	r0, #0
 80073f6:	4901      	ldr	r1, [pc, #4]	; (80073fc <nan+0x8>)
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	7ff80000 	.word	0x7ff80000

08007400 <_sbrk_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	2300      	movs	r3, #0
 8007404:	4d05      	ldr	r5, [pc, #20]	; (800741c <_sbrk_r+0x1c>)
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	f7f9 fe04 	bl	8001018 <_sbrk>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_sbrk_r+0x1a>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_sbrk_r+0x1a>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	2000025c 	.word	0x2000025c

08007420 <__sread>:
 8007420:	b510      	push	{r4, lr}
 8007422:	460c      	mov	r4, r1
 8007424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007428:	f000 fa90 	bl	800794c <_read_r>
 800742c:	2800      	cmp	r0, #0
 800742e:	bfab      	itete	ge
 8007430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007432:	89a3      	ldrhlt	r3, [r4, #12]
 8007434:	181b      	addge	r3, r3, r0
 8007436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800743a:	bfac      	ite	ge
 800743c:	6563      	strge	r3, [r4, #84]	; 0x54
 800743e:	81a3      	strhlt	r3, [r4, #12]
 8007440:	bd10      	pop	{r4, pc}

08007442 <__swrite>:
 8007442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007446:	461f      	mov	r7, r3
 8007448:	898b      	ldrh	r3, [r1, #12]
 800744a:	4605      	mov	r5, r0
 800744c:	05db      	lsls	r3, r3, #23
 800744e:	460c      	mov	r4, r1
 8007450:	4616      	mov	r6, r2
 8007452:	d505      	bpl.n	8007460 <__swrite+0x1e>
 8007454:	2302      	movs	r3, #2
 8007456:	2200      	movs	r2, #0
 8007458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745c:	f000 f8b8 	bl	80075d0 <_lseek_r>
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	4632      	mov	r2, r6
 8007464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007468:	81a3      	strh	r3, [r4, #12]
 800746a:	4628      	mov	r0, r5
 800746c:	463b      	mov	r3, r7
 800746e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007476:	f000 b837 	b.w	80074e8 <_write_r>

0800747a <__sseek>:
 800747a:	b510      	push	{r4, lr}
 800747c:	460c      	mov	r4, r1
 800747e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007482:	f000 f8a5 	bl	80075d0 <_lseek_r>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	bf15      	itete	ne
 800748c:	6560      	strne	r0, [r4, #84]	; 0x54
 800748e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007496:	81a3      	strheq	r3, [r4, #12]
 8007498:	bf18      	it	ne
 800749a:	81a3      	strhne	r3, [r4, #12]
 800749c:	bd10      	pop	{r4, pc}

0800749e <__sclose>:
 800749e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a2:	f000 b851 	b.w	8007548 <_close_r>

080074a6 <strncmp>:
 80074a6:	4603      	mov	r3, r0
 80074a8:	b510      	push	{r4, lr}
 80074aa:	b172      	cbz	r2, 80074ca <strncmp+0x24>
 80074ac:	3901      	subs	r1, #1
 80074ae:	1884      	adds	r4, r0, r2
 80074b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80074b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80074b8:	4290      	cmp	r0, r2
 80074ba:	d101      	bne.n	80074c0 <strncmp+0x1a>
 80074bc:	42a3      	cmp	r3, r4
 80074be:	d101      	bne.n	80074c4 <strncmp+0x1e>
 80074c0:	1a80      	subs	r0, r0, r2
 80074c2:	bd10      	pop	{r4, pc}
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d1f3      	bne.n	80074b0 <strncmp+0xa>
 80074c8:	e7fa      	b.n	80074c0 <strncmp+0x1a>
 80074ca:	4610      	mov	r0, r2
 80074cc:	e7f9      	b.n	80074c2 <strncmp+0x1c>

080074ce <__ascii_wctomb>:
 80074ce:	4603      	mov	r3, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	b141      	cbz	r1, 80074e6 <__ascii_wctomb+0x18>
 80074d4:	2aff      	cmp	r2, #255	; 0xff
 80074d6:	d904      	bls.n	80074e2 <__ascii_wctomb+0x14>
 80074d8:	228a      	movs	r2, #138	; 0x8a
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	4770      	bx	lr
 80074e2:	2001      	movs	r0, #1
 80074e4:	700a      	strb	r2, [r1, #0]
 80074e6:	4770      	bx	lr

080074e8 <_write_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	2200      	movs	r2, #0
 80074f2:	4d05      	ldr	r5, [pc, #20]	; (8007508 <_write_r+0x20>)
 80074f4:	602a      	str	r2, [r5, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	f7f9 fd42 	bl	8000f80 <_write>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_write_r+0x1e>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_write_r+0x1e>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	2000025c 	.word	0x2000025c

0800750c <__assert_func>:
 800750c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800750e:	4614      	mov	r4, r2
 8007510:	461a      	mov	r2, r3
 8007512:	4b09      	ldr	r3, [pc, #36]	; (8007538 <__assert_func+0x2c>)
 8007514:	4605      	mov	r5, r0
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68d8      	ldr	r0, [r3, #12]
 800751a:	b14c      	cbz	r4, 8007530 <__assert_func+0x24>
 800751c:	4b07      	ldr	r3, [pc, #28]	; (800753c <__assert_func+0x30>)
 800751e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007522:	9100      	str	r1, [sp, #0]
 8007524:	462b      	mov	r3, r5
 8007526:	4906      	ldr	r1, [pc, #24]	; (8007540 <__assert_func+0x34>)
 8007528:	f000 f81e 	bl	8007568 <fiprintf>
 800752c:	f000 fa20 	bl	8007970 <abort>
 8007530:	4b04      	ldr	r3, [pc, #16]	; (8007544 <__assert_func+0x38>)
 8007532:	461c      	mov	r4, r3
 8007534:	e7f3      	b.n	800751e <__assert_func+0x12>
 8007536:	bf00      	nop
 8007538:	2000000c 	.word	0x2000000c
 800753c:	08007ed5 	.word	0x08007ed5
 8007540:	08007ee2 	.word	0x08007ee2
 8007544:	08007f10 	.word	0x08007f10

08007548 <_close_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	2300      	movs	r3, #0
 800754c:	4d05      	ldr	r5, [pc, #20]	; (8007564 <_close_r+0x1c>)
 800754e:	4604      	mov	r4, r0
 8007550:	4608      	mov	r0, r1
 8007552:	602b      	str	r3, [r5, #0]
 8007554:	f7f9 fd30 	bl	8000fb8 <_close>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d102      	bne.n	8007562 <_close_r+0x1a>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	b103      	cbz	r3, 8007562 <_close_r+0x1a>
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	2000025c 	.word	0x2000025c

08007568 <fiprintf>:
 8007568:	b40e      	push	{r1, r2, r3}
 800756a:	b503      	push	{r0, r1, lr}
 800756c:	4601      	mov	r1, r0
 800756e:	ab03      	add	r3, sp, #12
 8007570:	4805      	ldr	r0, [pc, #20]	; (8007588 <fiprintf+0x20>)
 8007572:	f853 2b04 	ldr.w	r2, [r3], #4
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	f000 f8b7 	bl	80076ec <_vfiprintf_r>
 800757e:	b002      	add	sp, #8
 8007580:	f85d eb04 	ldr.w	lr, [sp], #4
 8007584:	b003      	add	sp, #12
 8007586:	4770      	bx	lr
 8007588:	2000000c 	.word	0x2000000c

0800758c <_fstat_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	2300      	movs	r3, #0
 8007590:	4d06      	ldr	r5, [pc, #24]	; (80075ac <_fstat_r+0x20>)
 8007592:	4604      	mov	r4, r0
 8007594:	4608      	mov	r0, r1
 8007596:	4611      	mov	r1, r2
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	f7f9 fd18 	bl	8000fce <_fstat>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	d102      	bne.n	80075a8 <_fstat_r+0x1c>
 80075a2:	682b      	ldr	r3, [r5, #0]
 80075a4:	b103      	cbz	r3, 80075a8 <_fstat_r+0x1c>
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	bd38      	pop	{r3, r4, r5, pc}
 80075aa:	bf00      	nop
 80075ac:	2000025c 	.word	0x2000025c

080075b0 <_isatty_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	2300      	movs	r3, #0
 80075b4:	4d05      	ldr	r5, [pc, #20]	; (80075cc <_isatty_r+0x1c>)
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	602b      	str	r3, [r5, #0]
 80075bc:	f7f9 fd16 	bl	8000fec <_isatty>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_isatty_r+0x1a>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_isatty_r+0x1a>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	2000025c 	.word	0x2000025c

080075d0 <_lseek_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	2200      	movs	r2, #0
 80075da:	4d05      	ldr	r5, [pc, #20]	; (80075f0 <_lseek_r+0x20>)
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f7f9 fd0e 	bl	8001000 <_lseek>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_lseek_r+0x1e>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_lseek_r+0x1e>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	2000025c 	.word	0x2000025c

080075f4 <memmove>:
 80075f4:	4288      	cmp	r0, r1
 80075f6:	b510      	push	{r4, lr}
 80075f8:	eb01 0402 	add.w	r4, r1, r2
 80075fc:	d902      	bls.n	8007604 <memmove+0x10>
 80075fe:	4284      	cmp	r4, r0
 8007600:	4623      	mov	r3, r4
 8007602:	d807      	bhi.n	8007614 <memmove+0x20>
 8007604:	1e43      	subs	r3, r0, #1
 8007606:	42a1      	cmp	r1, r4
 8007608:	d008      	beq.n	800761c <memmove+0x28>
 800760a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800760e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007612:	e7f8      	b.n	8007606 <memmove+0x12>
 8007614:	4601      	mov	r1, r0
 8007616:	4402      	add	r2, r0
 8007618:	428a      	cmp	r2, r1
 800761a:	d100      	bne.n	800761e <memmove+0x2a>
 800761c:	bd10      	pop	{r4, pc}
 800761e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007626:	e7f7      	b.n	8007618 <memmove+0x24>

08007628 <__malloc_lock>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__malloc_lock+0x8>)
 800762a:	f7fe bf42 	b.w	80064b2 <__retarget_lock_acquire_recursive>
 800762e:	bf00      	nop
 8007630:	20000250 	.word	0x20000250

08007634 <__malloc_unlock>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__malloc_unlock+0x8>)
 8007636:	f7fe bf3d 	b.w	80064b4 <__retarget_lock_release_recursive>
 800763a:	bf00      	nop
 800763c:	20000250 	.word	0x20000250

08007640 <_realloc_r>:
 8007640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007644:	4680      	mov	r8, r0
 8007646:	4614      	mov	r4, r2
 8007648:	460e      	mov	r6, r1
 800764a:	b921      	cbnz	r1, 8007656 <_realloc_r+0x16>
 800764c:	4611      	mov	r1, r2
 800764e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	f7ff bcff 	b.w	8007054 <_malloc_r>
 8007656:	b92a      	cbnz	r2, 8007664 <_realloc_r+0x24>
 8007658:	f7ff fc94 	bl	8006f84 <_free_r>
 800765c:	4625      	mov	r5, r4
 800765e:	4628      	mov	r0, r5
 8007660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007664:	f000 f98b 	bl	800797e <_malloc_usable_size_r>
 8007668:	4284      	cmp	r4, r0
 800766a:	4607      	mov	r7, r0
 800766c:	d802      	bhi.n	8007674 <_realloc_r+0x34>
 800766e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007672:	d812      	bhi.n	800769a <_realloc_r+0x5a>
 8007674:	4621      	mov	r1, r4
 8007676:	4640      	mov	r0, r8
 8007678:	f7ff fcec 	bl	8007054 <_malloc_r>
 800767c:	4605      	mov	r5, r0
 800767e:	2800      	cmp	r0, #0
 8007680:	d0ed      	beq.n	800765e <_realloc_r+0x1e>
 8007682:	42bc      	cmp	r4, r7
 8007684:	4622      	mov	r2, r4
 8007686:	4631      	mov	r1, r6
 8007688:	bf28      	it	cs
 800768a:	463a      	movcs	r2, r7
 800768c:	f7fe ffa0 	bl	80065d0 <memcpy>
 8007690:	4631      	mov	r1, r6
 8007692:	4640      	mov	r0, r8
 8007694:	f7ff fc76 	bl	8006f84 <_free_r>
 8007698:	e7e1      	b.n	800765e <_realloc_r+0x1e>
 800769a:	4635      	mov	r5, r6
 800769c:	e7df      	b.n	800765e <_realloc_r+0x1e>

0800769e <__sfputc_r>:
 800769e:	6893      	ldr	r3, [r2, #8]
 80076a0:	b410      	push	{r4}
 80076a2:	3b01      	subs	r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	6093      	str	r3, [r2, #8]
 80076a8:	da07      	bge.n	80076ba <__sfputc_r+0x1c>
 80076aa:	6994      	ldr	r4, [r2, #24]
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	db01      	blt.n	80076b4 <__sfputc_r+0x16>
 80076b0:	290a      	cmp	r1, #10
 80076b2:	d102      	bne.n	80076ba <__sfputc_r+0x1c>
 80076b4:	bc10      	pop	{r4}
 80076b6:	f7fd baa3 	b.w	8004c00 <__swbuf_r>
 80076ba:	6813      	ldr	r3, [r2, #0]
 80076bc:	1c58      	adds	r0, r3, #1
 80076be:	6010      	str	r0, [r2, #0]
 80076c0:	7019      	strb	r1, [r3, #0]
 80076c2:	4608      	mov	r0, r1
 80076c4:	bc10      	pop	{r4}
 80076c6:	4770      	bx	lr

080076c8 <__sfputs_r>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	4614      	mov	r4, r2
 80076d0:	18d5      	adds	r5, r2, r3
 80076d2:	42ac      	cmp	r4, r5
 80076d4:	d101      	bne.n	80076da <__sfputs_r+0x12>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e007      	b.n	80076ea <__sfputs_r+0x22>
 80076da:	463a      	mov	r2, r7
 80076dc:	4630      	mov	r0, r6
 80076de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e2:	f7ff ffdc 	bl	800769e <__sfputc_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d1f3      	bne.n	80076d2 <__sfputs_r+0xa>
 80076ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076ec <_vfiprintf_r>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	460d      	mov	r5, r1
 80076f2:	4614      	mov	r4, r2
 80076f4:	4698      	mov	r8, r3
 80076f6:	4606      	mov	r6, r0
 80076f8:	b09d      	sub	sp, #116	; 0x74
 80076fa:	b118      	cbz	r0, 8007704 <_vfiprintf_r+0x18>
 80076fc:	6983      	ldr	r3, [r0, #24]
 80076fe:	b90b      	cbnz	r3, 8007704 <_vfiprintf_r+0x18>
 8007700:	f7fe face 	bl	8005ca0 <__sinit>
 8007704:	4b89      	ldr	r3, [pc, #548]	; (800792c <_vfiprintf_r+0x240>)
 8007706:	429d      	cmp	r5, r3
 8007708:	d11b      	bne.n	8007742 <_vfiprintf_r+0x56>
 800770a:	6875      	ldr	r5, [r6, #4]
 800770c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800770e:	07d9      	lsls	r1, r3, #31
 8007710:	d405      	bmi.n	800771e <_vfiprintf_r+0x32>
 8007712:	89ab      	ldrh	r3, [r5, #12]
 8007714:	059a      	lsls	r2, r3, #22
 8007716:	d402      	bmi.n	800771e <_vfiprintf_r+0x32>
 8007718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800771a:	f7fe feca 	bl	80064b2 <__retarget_lock_acquire_recursive>
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	071b      	lsls	r3, r3, #28
 8007722:	d501      	bpl.n	8007728 <_vfiprintf_r+0x3c>
 8007724:	692b      	ldr	r3, [r5, #16]
 8007726:	b9eb      	cbnz	r3, 8007764 <_vfiprintf_r+0x78>
 8007728:	4629      	mov	r1, r5
 800772a:	4630      	mov	r0, r6
 800772c:	f7fd faba 	bl	8004ca4 <__swsetup_r>
 8007730:	b1c0      	cbz	r0, 8007764 <_vfiprintf_r+0x78>
 8007732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007734:	07dc      	lsls	r4, r3, #31
 8007736:	d50e      	bpl.n	8007756 <_vfiprintf_r+0x6a>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	b01d      	add	sp, #116	; 0x74
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	4b7b      	ldr	r3, [pc, #492]	; (8007930 <_vfiprintf_r+0x244>)
 8007744:	429d      	cmp	r5, r3
 8007746:	d101      	bne.n	800774c <_vfiprintf_r+0x60>
 8007748:	68b5      	ldr	r5, [r6, #8]
 800774a:	e7df      	b.n	800770c <_vfiprintf_r+0x20>
 800774c:	4b79      	ldr	r3, [pc, #484]	; (8007934 <_vfiprintf_r+0x248>)
 800774e:	429d      	cmp	r5, r3
 8007750:	bf08      	it	eq
 8007752:	68f5      	ldreq	r5, [r6, #12]
 8007754:	e7da      	b.n	800770c <_vfiprintf_r+0x20>
 8007756:	89ab      	ldrh	r3, [r5, #12]
 8007758:	0598      	lsls	r0, r3, #22
 800775a:	d4ed      	bmi.n	8007738 <_vfiprintf_r+0x4c>
 800775c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800775e:	f7fe fea9 	bl	80064b4 <__retarget_lock_release_recursive>
 8007762:	e7e9      	b.n	8007738 <_vfiprintf_r+0x4c>
 8007764:	2300      	movs	r3, #0
 8007766:	9309      	str	r3, [sp, #36]	; 0x24
 8007768:	2320      	movs	r3, #32
 800776a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800776e:	2330      	movs	r3, #48	; 0x30
 8007770:	f04f 0901 	mov.w	r9, #1
 8007774:	f8cd 800c 	str.w	r8, [sp, #12]
 8007778:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007938 <_vfiprintf_r+0x24c>
 800777c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007780:	4623      	mov	r3, r4
 8007782:	469a      	mov	sl, r3
 8007784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007788:	b10a      	cbz	r2, 800778e <_vfiprintf_r+0xa2>
 800778a:	2a25      	cmp	r2, #37	; 0x25
 800778c:	d1f9      	bne.n	8007782 <_vfiprintf_r+0x96>
 800778e:	ebba 0b04 	subs.w	fp, sl, r4
 8007792:	d00b      	beq.n	80077ac <_vfiprintf_r+0xc0>
 8007794:	465b      	mov	r3, fp
 8007796:	4622      	mov	r2, r4
 8007798:	4629      	mov	r1, r5
 800779a:	4630      	mov	r0, r6
 800779c:	f7ff ff94 	bl	80076c8 <__sfputs_r>
 80077a0:	3001      	adds	r0, #1
 80077a2:	f000 80aa 	beq.w	80078fa <_vfiprintf_r+0x20e>
 80077a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a8:	445a      	add	r2, fp
 80077aa:	9209      	str	r2, [sp, #36]	; 0x24
 80077ac:	f89a 3000 	ldrb.w	r3, [sl]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 80a2 	beq.w	80078fa <_vfiprintf_r+0x20e>
 80077b6:	2300      	movs	r3, #0
 80077b8:	f04f 32ff 	mov.w	r2, #4294967295
 80077bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077c0:	f10a 0a01 	add.w	sl, sl, #1
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	9307      	str	r3, [sp, #28]
 80077c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077cc:	931a      	str	r3, [sp, #104]	; 0x68
 80077ce:	4654      	mov	r4, sl
 80077d0:	2205      	movs	r2, #5
 80077d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d6:	4858      	ldr	r0, [pc, #352]	; (8007938 <_vfiprintf_r+0x24c>)
 80077d8:	f7fe feec 	bl	80065b4 <memchr>
 80077dc:	9a04      	ldr	r2, [sp, #16]
 80077de:	b9d8      	cbnz	r0, 8007818 <_vfiprintf_r+0x12c>
 80077e0:	06d1      	lsls	r1, r2, #27
 80077e2:	bf44      	itt	mi
 80077e4:	2320      	movmi	r3, #32
 80077e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ea:	0713      	lsls	r3, r2, #28
 80077ec:	bf44      	itt	mi
 80077ee:	232b      	movmi	r3, #43	; 0x2b
 80077f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f4:	f89a 3000 	ldrb.w	r3, [sl]
 80077f8:	2b2a      	cmp	r3, #42	; 0x2a
 80077fa:	d015      	beq.n	8007828 <_vfiprintf_r+0x13c>
 80077fc:	4654      	mov	r4, sl
 80077fe:	2000      	movs	r0, #0
 8007800:	f04f 0c0a 	mov.w	ip, #10
 8007804:	9a07      	ldr	r2, [sp, #28]
 8007806:	4621      	mov	r1, r4
 8007808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800780c:	3b30      	subs	r3, #48	; 0x30
 800780e:	2b09      	cmp	r3, #9
 8007810:	d94e      	bls.n	80078b0 <_vfiprintf_r+0x1c4>
 8007812:	b1b0      	cbz	r0, 8007842 <_vfiprintf_r+0x156>
 8007814:	9207      	str	r2, [sp, #28]
 8007816:	e014      	b.n	8007842 <_vfiprintf_r+0x156>
 8007818:	eba0 0308 	sub.w	r3, r0, r8
 800781c:	fa09 f303 	lsl.w	r3, r9, r3
 8007820:	4313      	orrs	r3, r2
 8007822:	46a2      	mov	sl, r4
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	e7d2      	b.n	80077ce <_vfiprintf_r+0xe2>
 8007828:	9b03      	ldr	r3, [sp, #12]
 800782a:	1d19      	adds	r1, r3, #4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	9103      	str	r1, [sp, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	bfbb      	ittet	lt
 8007834:	425b      	neglt	r3, r3
 8007836:	f042 0202 	orrlt.w	r2, r2, #2
 800783a:	9307      	strge	r3, [sp, #28]
 800783c:	9307      	strlt	r3, [sp, #28]
 800783e:	bfb8      	it	lt
 8007840:	9204      	strlt	r2, [sp, #16]
 8007842:	7823      	ldrb	r3, [r4, #0]
 8007844:	2b2e      	cmp	r3, #46	; 0x2e
 8007846:	d10c      	bne.n	8007862 <_vfiprintf_r+0x176>
 8007848:	7863      	ldrb	r3, [r4, #1]
 800784a:	2b2a      	cmp	r3, #42	; 0x2a
 800784c:	d135      	bne.n	80078ba <_vfiprintf_r+0x1ce>
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	3402      	adds	r4, #2
 8007852:	1d1a      	adds	r2, r3, #4
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	9203      	str	r2, [sp, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	bfb8      	it	lt
 800785c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007860:	9305      	str	r3, [sp, #20]
 8007862:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800793c <_vfiprintf_r+0x250>
 8007866:	2203      	movs	r2, #3
 8007868:	4650      	mov	r0, sl
 800786a:	7821      	ldrb	r1, [r4, #0]
 800786c:	f7fe fea2 	bl	80065b4 <memchr>
 8007870:	b140      	cbz	r0, 8007884 <_vfiprintf_r+0x198>
 8007872:	2340      	movs	r3, #64	; 0x40
 8007874:	eba0 000a 	sub.w	r0, r0, sl
 8007878:	fa03 f000 	lsl.w	r0, r3, r0
 800787c:	9b04      	ldr	r3, [sp, #16]
 800787e:	3401      	adds	r4, #1
 8007880:	4303      	orrs	r3, r0
 8007882:	9304      	str	r3, [sp, #16]
 8007884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007888:	2206      	movs	r2, #6
 800788a:	482d      	ldr	r0, [pc, #180]	; (8007940 <_vfiprintf_r+0x254>)
 800788c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007890:	f7fe fe90 	bl	80065b4 <memchr>
 8007894:	2800      	cmp	r0, #0
 8007896:	d03f      	beq.n	8007918 <_vfiprintf_r+0x22c>
 8007898:	4b2a      	ldr	r3, [pc, #168]	; (8007944 <_vfiprintf_r+0x258>)
 800789a:	bb1b      	cbnz	r3, 80078e4 <_vfiprintf_r+0x1f8>
 800789c:	9b03      	ldr	r3, [sp, #12]
 800789e:	3307      	adds	r3, #7
 80078a0:	f023 0307 	bic.w	r3, r3, #7
 80078a4:	3308      	adds	r3, #8
 80078a6:	9303      	str	r3, [sp, #12]
 80078a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078aa:	443b      	add	r3, r7
 80078ac:	9309      	str	r3, [sp, #36]	; 0x24
 80078ae:	e767      	b.n	8007780 <_vfiprintf_r+0x94>
 80078b0:	460c      	mov	r4, r1
 80078b2:	2001      	movs	r0, #1
 80078b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b8:	e7a5      	b.n	8007806 <_vfiprintf_r+0x11a>
 80078ba:	2300      	movs	r3, #0
 80078bc:	f04f 0c0a 	mov.w	ip, #10
 80078c0:	4619      	mov	r1, r3
 80078c2:	3401      	adds	r4, #1
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	4620      	mov	r0, r4
 80078c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078cc:	3a30      	subs	r2, #48	; 0x30
 80078ce:	2a09      	cmp	r2, #9
 80078d0:	d903      	bls.n	80078da <_vfiprintf_r+0x1ee>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0c5      	beq.n	8007862 <_vfiprintf_r+0x176>
 80078d6:	9105      	str	r1, [sp, #20]
 80078d8:	e7c3      	b.n	8007862 <_vfiprintf_r+0x176>
 80078da:	4604      	mov	r4, r0
 80078dc:	2301      	movs	r3, #1
 80078de:	fb0c 2101 	mla	r1, ip, r1, r2
 80078e2:	e7f0      	b.n	80078c6 <_vfiprintf_r+0x1da>
 80078e4:	ab03      	add	r3, sp, #12
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	462a      	mov	r2, r5
 80078ea:	4630      	mov	r0, r6
 80078ec:	4b16      	ldr	r3, [pc, #88]	; (8007948 <_vfiprintf_r+0x25c>)
 80078ee:	a904      	add	r1, sp, #16
 80078f0:	f7fb fc8c 	bl	800320c <_printf_float>
 80078f4:	4607      	mov	r7, r0
 80078f6:	1c78      	adds	r0, r7, #1
 80078f8:	d1d6      	bne.n	80078a8 <_vfiprintf_r+0x1bc>
 80078fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078fc:	07d9      	lsls	r1, r3, #31
 80078fe:	d405      	bmi.n	800790c <_vfiprintf_r+0x220>
 8007900:	89ab      	ldrh	r3, [r5, #12]
 8007902:	059a      	lsls	r2, r3, #22
 8007904:	d402      	bmi.n	800790c <_vfiprintf_r+0x220>
 8007906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007908:	f7fe fdd4 	bl	80064b4 <__retarget_lock_release_recursive>
 800790c:	89ab      	ldrh	r3, [r5, #12]
 800790e:	065b      	lsls	r3, r3, #25
 8007910:	f53f af12 	bmi.w	8007738 <_vfiprintf_r+0x4c>
 8007914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007916:	e711      	b.n	800773c <_vfiprintf_r+0x50>
 8007918:	ab03      	add	r3, sp, #12
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	462a      	mov	r2, r5
 800791e:	4630      	mov	r0, r6
 8007920:	4b09      	ldr	r3, [pc, #36]	; (8007948 <_vfiprintf_r+0x25c>)
 8007922:	a904      	add	r1, sp, #16
 8007924:	f7fb ff0e 	bl	8003744 <_printf_i>
 8007928:	e7e4      	b.n	80078f4 <_vfiprintf_r+0x208>
 800792a:	bf00      	nop
 800792c:	08007cac 	.word	0x08007cac
 8007930:	08007ccc 	.word	0x08007ccc
 8007934:	08007c8c 	.word	0x08007c8c
 8007938:	08007ec4 	.word	0x08007ec4
 800793c:	08007eca 	.word	0x08007eca
 8007940:	08007ece 	.word	0x08007ece
 8007944:	0800320d 	.word	0x0800320d
 8007948:	080076c9 	.word	0x080076c9

0800794c <_read_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	2200      	movs	r2, #0
 8007956:	4d05      	ldr	r5, [pc, #20]	; (800796c <_read_r+0x20>)
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f7f9 faf3 	bl	8000f46 <_read>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_read_r+0x1e>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_read_r+0x1e>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	2000025c 	.word	0x2000025c

08007970 <abort>:
 8007970:	2006      	movs	r0, #6
 8007972:	b508      	push	{r3, lr}
 8007974:	f000 f834 	bl	80079e0 <raise>
 8007978:	2001      	movs	r0, #1
 800797a:	f7f9 fada 	bl	8000f32 <_exit>

0800797e <_malloc_usable_size_r>:
 800797e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007982:	1f18      	subs	r0, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	bfbc      	itt	lt
 8007988:	580b      	ldrlt	r3, [r1, r0]
 800798a:	18c0      	addlt	r0, r0, r3
 800798c:	4770      	bx	lr

0800798e <_raise_r>:
 800798e:	291f      	cmp	r1, #31
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4604      	mov	r4, r0
 8007994:	460d      	mov	r5, r1
 8007996:	d904      	bls.n	80079a2 <_raise_r+0x14>
 8007998:	2316      	movs	r3, #22
 800799a:	6003      	str	r3, [r0, #0]
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	bd38      	pop	{r3, r4, r5, pc}
 80079a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079a4:	b112      	cbz	r2, 80079ac <_raise_r+0x1e>
 80079a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079aa:	b94b      	cbnz	r3, 80079c0 <_raise_r+0x32>
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 f831 	bl	8007a14 <_getpid_r>
 80079b2:	462a      	mov	r2, r5
 80079b4:	4601      	mov	r1, r0
 80079b6:	4620      	mov	r0, r4
 80079b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079bc:	f000 b818 	b.w	80079f0 <_kill_r>
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d00a      	beq.n	80079da <_raise_r+0x4c>
 80079c4:	1c59      	adds	r1, r3, #1
 80079c6:	d103      	bne.n	80079d0 <_raise_r+0x42>
 80079c8:	2316      	movs	r3, #22
 80079ca:	6003      	str	r3, [r0, #0]
 80079cc:	2001      	movs	r0, #1
 80079ce:	e7e7      	b.n	80079a0 <_raise_r+0x12>
 80079d0:	2400      	movs	r4, #0
 80079d2:	4628      	mov	r0, r5
 80079d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079d8:	4798      	blx	r3
 80079da:	2000      	movs	r0, #0
 80079dc:	e7e0      	b.n	80079a0 <_raise_r+0x12>
	...

080079e0 <raise>:
 80079e0:	4b02      	ldr	r3, [pc, #8]	; (80079ec <raise+0xc>)
 80079e2:	4601      	mov	r1, r0
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	f7ff bfd2 	b.w	800798e <_raise_r>
 80079ea:	bf00      	nop
 80079ec:	2000000c 	.word	0x2000000c

080079f0 <_kill_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	2300      	movs	r3, #0
 80079f4:	4d06      	ldr	r5, [pc, #24]	; (8007a10 <_kill_r+0x20>)
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	f7f9 fa88 	bl	8000f12 <_kill>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d102      	bne.n	8007a0c <_kill_r+0x1c>
 8007a06:	682b      	ldr	r3, [r5, #0]
 8007a08:	b103      	cbz	r3, 8007a0c <_kill_r+0x1c>
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	bf00      	nop
 8007a10:	2000025c 	.word	0x2000025c

08007a14 <_getpid_r>:
 8007a14:	f7f9 ba76 	b.w	8000f04 <_getpid>

08007a18 <_init>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	bf00      	nop
 8007a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1e:	bc08      	pop	{r3}
 8007a20:	469e      	mov	lr, r3
 8007a22:	4770      	bx	lr

08007a24 <_fini>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	bf00      	nop
 8007a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2a:	bc08      	pop	{r3}
 8007a2c:	469e      	mov	lr, r3
 8007a2e:	4770      	bx	lr
