
API_BOOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cec  0800a3c0  0800a3c0  0001a3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0ac  0800c0ac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0ac  0800c0ac  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0ac  0800c0ac  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0ac  0800c0ac  0001c0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0b0  0800c0b0  0001c0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  200001e8  0800c29c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  0800c29c  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a53d  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed4  00000000  00000000  0002a74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aad7  00000000  00000000  0002d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c289  00000000  00000000  000482c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009538e  00000000  00000000  00054550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e98de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000e9930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a3a4 	.word	0x0800a3a4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800a3a4 	.word	0x0800a3a4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	; 0x38
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	615a      	str	r2, [r3, #20]
 8000cda:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000cde:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ce2:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000ce6:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <MX_FSMC_Init+0xf4>)
 8000ce8:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000cec:	2206      	movs	r2, #6
 8000cee:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000cfe:	2210      	movs	r2, #16
 8000d00:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d0e:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 6;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000d40:	230f      	movs	r3, #15
 8000d42:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 26;
 8000d44:	231a      	movs	r3, #26
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000d50:	2311      	movs	r3, #17
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d54:	2300      	movs	r3, #0
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 3;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 6;
 8000d60:	2306      	movs	r3, #6
 8000d62:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000d6c:	2311      	movs	r3, #17
 8000d6e:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8000d74:	463a      	mov	r2, r7
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4808      	ldr	r0, [pc, #32]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000d7e:	f001 fadd 	bl	800233c <HAL_SRAM_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8000d88:	f000 f9f3 	bl	8001172 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_FSMC_Init+0xf8>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <MX_FSMC_Init+0xf8>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d98:	bf00      	nop
 8000d9a:	3738      	adds	r7, #56	; 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000204 	.word	0x20000204
 8000da4:	a0000104 	.word	0xa0000104
 8000da8:	40010000 	.word	0x40010000

08000dac <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <HAL_FSMC_MspInit+0x94>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d136      	bne.n	8000e36 <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_FSMC_MspInit+0x94>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_FSMC_MspInit+0x98>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <HAL_FSMC_MspInit+0x98>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_FSMC_MspInit+0x98>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8000de6:	f241 0301 	movw	r3, #4097	; 0x1001
 8000dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4813      	ldr	r0, [pc, #76]	; (8000e48 <HAL_FSMC_MspInit+0x9c>)
 8000dfc:	f000 fce2 	bl	80017c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e00:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000e04:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4619      	mov	r1, r3
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <HAL_FSMC_MspInit+0xa0>)
 8000e16:	f000 fcd5 	bl	80017c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e1a:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000e1e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4808      	ldr	r0, [pc, #32]	; (8000e50 <HAL_FSMC_MspInit+0xa4>)
 8000e30:	f000 fcc8 	bl	80017c4 <HAL_GPIO_Init>
 8000e34:	e000      	b.n	8000e38 <HAL_FSMC_MspInit+0x8c>
    return;
 8000e36:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000024c 	.word	0x2000024c
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	40011800 	.word	0x40011800
 8000e50:	40011400 	.word	0x40011400

08000e54 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000e5c:	f7ff ffa6 	bl	8000dac <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a37      	ldr	r2, [pc, #220]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a31      	ldr	r2, [pc, #196]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a25      	ldr	r2, [pc, #148]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4814      	ldr	r0, [pc, #80]	; (8000f64 <MX_GPIO_Init+0xfc>)
 8000f12:	f000 fdeb 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4813      	ldr	r0, [pc, #76]	; (8000f68 <MX_GPIO_Init+0x100>)
 8000f1c:	f000 fde6 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000f20:	2320      	movs	r3, #32
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4619      	mov	r1, r3
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <MX_GPIO_Init+0xfc>)
 8000f38:	f000 fc44 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_GPIO_Init+0x100>)
 8000f54:	f000 fc36 	bl	80017c4 <HAL_GPIO_Init>

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40011800 	.word	0x40011800
 8000f68:	40010c00 	.word	0x40010c00

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int x = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f000 faa3 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f8bf 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f7ff ff73 	bl	8000e68 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f82:	f000 f9e3 	bl	800134c <MX_USART1_UART_Init>
  MX_FSMC_Init();
 8000f86:	f7ff fe93 	bl	8000cb0 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000f8a:	f002 f971 	bl	8003270 <LCD_Init>
  POINT_COLOR=RED;     				//画笔颜色：红�?
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <main+0x170>)
 8000f90:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000f94:	601a      	str	r2, [r3, #0]
  sprintf((char*)lcd_id,"LCD ID:%04X",lcddev.id);//将LCD ID打印到lcd_id数组�?
 8000f96:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <main+0x174>)
 8000f98:	889b      	ldrh	r3, [r3, #4]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4951      	ldr	r1, [pc, #324]	; (80010e4 <main+0x178>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 fc3f 	bl	8006824 <siprintf>
//		HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
//		HAL_Delay(500);
//		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
//		HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
//		HAL_Delay(500);
		switch(x)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b0b      	cmp	r3, #11
 8000faa:	d855      	bhi.n	8001058 <main+0xec>
 8000fac:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <main+0x48>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fe5 	.word	0x08000fe5
 8000fb8:	08000fef 	.word	0x08000fef
 8000fbc:	08000ff7 	.word	0x08000ff7
 8000fc0:	08000fff 	.word	0x08000fff
 8000fc4:	08001009 	.word	0x08001009
 8000fc8:	08001013 	.word	0x08001013
 8000fcc:	0800101d 	.word	0x0800101d
 8000fd0:	08001027 	.word	0x08001027
 8000fd4:	08001031 	.word	0x08001031
 8000fd8:	0800103b 	.word	0x0800103b
 8000fdc:	08001045 	.word	0x08001045
 8000fe0:	0800104f 	.word	0x0800104f
		{
			case 0:LCD_Clear(WHITE);break;
 8000fe4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fe8:	f004 fc34 	bl	8005854 <LCD_Clear>
 8000fec:	e034      	b.n	8001058 <main+0xec>
			case 1:LCD_Clear(BLACK);break;
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f004 fc30 	bl	8005854 <LCD_Clear>
 8000ff4:	e030      	b.n	8001058 <main+0xec>
			case 2:LCD_Clear(BLUE);break;
 8000ff6:	201f      	movs	r0, #31
 8000ff8:	f004 fc2c 	bl	8005854 <LCD_Clear>
 8000ffc:	e02c      	b.n	8001058 <main+0xec>
			case 3:LCD_Clear(RED);break;
 8000ffe:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001002:	f004 fc27 	bl	8005854 <LCD_Clear>
 8001006:	e027      	b.n	8001058 <main+0xec>
			case 4:LCD_Clear(MAGENTA);break;
 8001008:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800100c:	f004 fc22 	bl	8005854 <LCD_Clear>
 8001010:	e022      	b.n	8001058 <main+0xec>
			case 5:LCD_Clear(GREEN);break;
 8001012:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001016:	f004 fc1d 	bl	8005854 <LCD_Clear>
 800101a:	e01d      	b.n	8001058 <main+0xec>
			case 6:LCD_Clear(CYAN);break;
 800101c:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001020:	f004 fc18 	bl	8005854 <LCD_Clear>
 8001024:	e018      	b.n	8001058 <main+0xec>
			case 7:LCD_Clear(YELLOW);break;
 8001026:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800102a:	f004 fc13 	bl	8005854 <LCD_Clear>
 800102e:	e013      	b.n	8001058 <main+0xec>
			case 8:LCD_Clear(BRRED);break;
 8001030:	f64f 4007 	movw	r0, #64519	; 0xfc07
 8001034:	f004 fc0e 	bl	8005854 <LCD_Clear>
 8001038:	e00e      	b.n	8001058 <main+0xec>
			case 9:LCD_Clear(GRAY);break;
 800103a:	f248 4030 	movw	r0, #33840	; 0x8430
 800103e:	f004 fc09 	bl	8005854 <LCD_Clear>
 8001042:	e009      	b.n	8001058 <main+0xec>
			case 10:LCD_Clear(LGRAY);break;
 8001044:	f24c 6018 	movw	r0, #50712	; 0xc618
 8001048:	f004 fc04 	bl	8005854 <LCD_Clear>
 800104c:	e004      	b.n	8001058 <main+0xec>
			case 11:LCD_Clear(BROWN);break;
 800104e:	f64b 4040 	movw	r0, #48192	; 0xbc40
 8001052:	f004 fbff 	bl	8005854 <LCD_Clear>
 8001056:	bf00      	nop
		}
		POINT_COLOR=RED;
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <main+0x170>)
 800105a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800105e:	601a      	str	r2, [r3, #0]
		LCD_ShowString(30,40,210,24,24,"WarShip STM32 ^_^");
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <main+0x17c>)
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	2318      	movs	r3, #24
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2318      	movs	r3, #24
 800106a:	22d2      	movs	r2, #210	; 0xd2
 800106c:	2128      	movs	r1, #40	; 0x28
 800106e:	201e      	movs	r0, #30
 8001070:	f004 fcce 	bl	8005a10 <LCD_ShowString>
		LCD_ShowString(30,70,200,16,16,"TFTLCD TEST");
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <main+0x180>)
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2310      	movs	r3, #16
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2310      	movs	r3, #16
 800107e:	22c8      	movs	r2, #200	; 0xc8
 8001080:	2146      	movs	r1, #70	; 0x46
 8001082:	201e      	movs	r0, #30
 8001084:	f004 fcc4 	bl	8005a10 <LCD_ShowString>
		LCD_ShowString(30,90,200,16,16,"ATOM@ALIENTEK");
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <main+0x184>)
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	2310      	movs	r3, #16
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2310      	movs	r3, #16
 8001092:	22c8      	movs	r2, #200	; 0xc8
 8001094:	215a      	movs	r1, #90	; 0x5a
 8001096:	201e      	movs	r0, #30
 8001098:	f004 fcba 	bl	8005a10 <LCD_ShowString>
		LCD_ShowString(30,110,200,16,16,lcd_id);		//显示LCD ID
 800109c:	463b      	mov	r3, r7
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	2310      	movs	r3, #16
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2310      	movs	r3, #16
 80010a6:	22c8      	movs	r2, #200	; 0xc8
 80010a8:	216e      	movs	r1, #110	; 0x6e
 80010aa:	201e      	movs	r0, #30
 80010ac:	f004 fcb0 	bl	8005a10 <LCD_ShowString>
		LCD_ShowString(30,130,200,12,12,"2017/5/27");
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <main+0x188>)
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	230c      	movs	r3, #12
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	230c      	movs	r3, #12
 80010ba:	22c8      	movs	r2, #200	; 0xc8
 80010bc:	2182      	movs	r1, #130	; 0x82
 80010be:	201e      	movs	r0, #30
 80010c0:	f004 fca6 	bl	8005a10 <LCD_ShowString>
		x++;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
		if(x==12)x=0;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b0c      	cmp	r3, #12
 80010ce:	d101      	bne.n	80010d4 <main+0x168>
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
		printf("test\n\r");
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <main+0x18c>)
 80010d6:	f005 fb89 	bl	80067ec <iprintf>
		switch(x)
 80010da:	e764      	b.n	8000fa6 <main+0x3a>
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	200002a0 	.word	0x200002a0
 80010e4:	0800a3c0 	.word	0x0800a3c0
 80010e8:	0800a3cc 	.word	0x0800a3cc
 80010ec:	0800a3e0 	.word	0x0800a3e0
 80010f0:	0800a3ec 	.word	0x0800a3ec
 80010f4:	0800a3fc 	.word	0x0800a3fc
 80010f8:	0800a408 	.word	0x0800a408

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b090      	sub	sp, #64	; 0x40
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fcf8 	bl	8005b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001122:	2301      	movs	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001126:	2310      	movs	r3, #16
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800112a:	2300      	movs	r3, #0
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fcf2 	bl	8001b1c <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800113e:	f000 f818 	bl	8001172 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f000 ff60 	bl	8002020 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001166:	f000 f804 	bl	8001172 <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3740      	adds	r7, #64	; 0x40
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001176:	b672      	cpsid	i
}
 8001178:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117a:	e7fe      	b.n	800117a <Error_Handler+0x8>

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_MspInit+0x40>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_MspInit+0x40>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_MspInit+0x40>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_MspInit+0x40>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_MspInit+0x40>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_MspInit+0x40>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40021000 	.word	0x40021000

080011c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return 1;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <_kill>:

int _kill(int pid, int sig)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011d8:	f004 fc68 	bl	8005aac <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	2216      	movs	r2, #22
 80011e0:	601a      	str	r2, [r3, #0]
  return -1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_exit>:

void _exit (int status)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011f6:	f04f 31ff 	mov.w	r1, #4294967295
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffe7 	bl	80011ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001200:	e7fe      	b.n	8001200 <_exit+0x12>

08001202 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e00a      	b.n	800122a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001214:	f3af 8000 	nop.w
 8001218:	4601      	mov	r1, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	b2ca      	uxtb	r2, r1
 8001222:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbf0      	blt.n	8001214 <_read+0x12>
  }

  return len;
 8001232:	687b      	ldr	r3, [r7, #4]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e009      	b.n	8001262 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	60ba      	str	r2, [r7, #8]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f8f6 	bl	8001448 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	429a      	cmp	r2, r3
 8001268:	dbf1      	blt.n	800124e <_write+0x12>
  }
  return len;
 800126a:	687b      	ldr	r3, [r7, #4]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_close>:

int _close(int file)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129a:	605a      	str	r2, [r3, #4]
  return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <_isatty>:

int _isatty(int file)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f004 fbd2 	bl	8005aac <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20010000 	.word	0x20010000
 8001334:	00000400 	.word	0x00000400
 8001338:	20000250 	.word	0x20000250
 800133c:	200002c0 	.word	0x200002c0

08001340 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART1_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001384:	f001 f827 	bl	80023d6 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800138e:	f7ff fef0 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000254 	.word	0x20000254
 800139c:	40013800 	.word	0x40013800

080013a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a20      	ldr	r2, [pc, #128]	; (800143c <HAL_UART_MspInit+0x9c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d139      	bne.n	8001434 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HAL_UART_MspInit+0xa0>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_UART_MspInit+0xa0>)
 80013c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_UART_MspInit+0xa0>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_UART_MspInit+0xa0>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a18      	ldr	r2, [pc, #96]	; (8001440 <HAL_UART_MspInit+0xa0>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_UART_MspInit+0xa0>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	480f      	ldr	r0, [pc, #60]	; (8001444 <HAL_UART_MspInit+0xa4>)
 8001406:	f000 f9dd 	bl	80017c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800140a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	4809      	ldr	r0, [pc, #36]	; (8001444 <HAL_UART_MspInit+0xa4>)
 8001420:	f000 f9d0 	bl	80017c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2025      	movs	r0, #37	; 0x25
 800142a:	f000 f994 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800142e:	2025      	movs	r0, #37	; 0x25
 8001430:	f000 f9ad 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40013800 	.word	0x40013800
 8001440:	40021000 	.word	0x40021000
 8001444:	40010800 	.word	0x40010800

08001448 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	uint8_t c=ch;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 8001456:	f107 010f 	add.w	r1, r7, #15
 800145a:	2364      	movs	r3, #100	; 0x64
 800145c:	2201      	movs	r2, #1
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <__io_putchar+0x28>)
 8001460:	f001 f809 	bl	8002476 <HAL_UART_Transmit>
	return ch;
 8001464:	687b      	ldr	r3, [r7, #4]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000254 	.word	0x20000254

08001474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001474:	f7ff ff64 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800147a:	490c      	ldr	r1, [pc, #48]	; (80014ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800147c:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001490:	4c09      	ldr	r4, [pc, #36]	; (80014b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f004 fb0b 	bl	8005ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a2:	f7ff fd63 	bl	8000f6c <main>
  bx lr
 80014a6:	4770      	bx	lr
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80014b0:	0800c0b4 	.word	0x0800c0b4
  ldr r2, =_sbss
 80014b4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80014b8:	200002c0 	.word	0x200002c0

080014bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_2_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_Init+0x28>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_Init+0x28>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f935 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	200f      	movs	r0, #15
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fe4e 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f94d 	bl	80017aa <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f915 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	20000008 	.word	0x20000008
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b02      	ldr	r3, [pc, #8]	; (800155c <HAL_GetTick+0x10>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	2000029c 	.word	0x2000029c

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff fff0 	bl	800154c <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffe0 	bl	800154c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4906      	ldr	r1, [pc, #24]	; (8001640 <__NVIC_EnableIRQ+0x34>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff90 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff2d 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff42 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff90 	bl	8001698 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5f 	bl	8001644 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff35 	bl	800160c <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	e179      	b.n	8001acc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d8:	2201      	movs	r2, #1
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8168 	bne.w	8001ac6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a96      	ldr	r2, [pc, #600]	; (8001a54 <HAL_GPIO_Init+0x290>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d05e      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001800:	4a94      	ldr	r2, [pc, #592]	; (8001a54 <HAL_GPIO_Init+0x290>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d875      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001806:	4a94      	ldr	r2, [pc, #592]	; (8001a58 <HAL_GPIO_Init+0x294>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d058      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 800180c:	4a92      	ldr	r2, [pc, #584]	; (8001a58 <HAL_GPIO_Init+0x294>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d86f      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001812:	4a92      	ldr	r2, [pc, #584]	; (8001a5c <HAL_GPIO_Init+0x298>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d052      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001818:	4a90      	ldr	r2, [pc, #576]	; (8001a5c <HAL_GPIO_Init+0x298>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d869      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800181e:	4a90      	ldr	r2, [pc, #576]	; (8001a60 <HAL_GPIO_Init+0x29c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d04c      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001824:	4a8e      	ldr	r2, [pc, #568]	; (8001a60 <HAL_GPIO_Init+0x29c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d863      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800182a:	4a8e      	ldr	r2, [pc, #568]	; (8001a64 <HAL_GPIO_Init+0x2a0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d046      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001830:	4a8c      	ldr	r2, [pc, #560]	; (8001a64 <HAL_GPIO_Init+0x2a0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d85d      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d82a      	bhi.n	8001890 <HAL_GPIO_Init+0xcc>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d859      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <HAL_GPIO_Init+0x80>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	080018bf 	.word	0x080018bf
 8001848:	08001899 	.word	0x08001899
 800184c:	080018ab 	.word	0x080018ab
 8001850:	080018ed 	.word	0x080018ed
 8001854:	080018f3 	.word	0x080018f3
 8001858:	080018f3 	.word	0x080018f3
 800185c:	080018f3 	.word	0x080018f3
 8001860:	080018f3 	.word	0x080018f3
 8001864:	080018f3 	.word	0x080018f3
 8001868:	080018f3 	.word	0x080018f3
 800186c:	080018f3 	.word	0x080018f3
 8001870:	080018f3 	.word	0x080018f3
 8001874:	080018f3 	.word	0x080018f3
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018f3 	.word	0x080018f3
 8001880:	080018f3 	.word	0x080018f3
 8001884:	080018f3 	.word	0x080018f3
 8001888:	080018a1 	.word	0x080018a1
 800188c:	080018b5 	.word	0x080018b5
 8001890:	4a75      	ldr	r2, [pc, #468]	; (8001a68 <HAL_GPIO_Init+0x2a4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001896:	e02c      	b.n	80018f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e029      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	3304      	adds	r3, #4
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e024      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	3308      	adds	r3, #8
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e01f      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	330c      	adds	r3, #12
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e01a      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c6:	2304      	movs	r3, #4
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e013      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	611a      	str	r2, [r3, #16]
          break;
 80018de:	e009      	b.n	80018f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e0:	2308      	movs	r3, #8
 80018e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	615a      	str	r2, [r3, #20]
          break;
 80018ea:	e003      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          break;
 80018f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d801      	bhi.n	80018fe <HAL_GPIO_Init+0x13a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_Init+0x13e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d802      	bhi.n	8001910 <HAL_GPIO_Init+0x14c>
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0x152>
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	3b08      	subs	r3, #8
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	210f      	movs	r1, #15
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	6a39      	ldr	r1, [r7, #32]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80c1 	beq.w	8001ac6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001944:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <HAL_GPIO_Init+0x2a8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a48      	ldr	r2, [pc, #288]	; (8001a6c <HAL_GPIO_Init+0x2a8>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <HAL_GPIO_Init+0x2a8>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800195c:	4a44      	ldr	r2, [pc, #272]	; (8001a70 <HAL_GPIO_Init+0x2ac>)
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3c      	ldr	r2, [pc, #240]	; (8001a74 <HAL_GPIO_Init+0x2b0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d01f      	beq.n	80019c8 <HAL_GPIO_Init+0x204>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3b      	ldr	r2, [pc, #236]	; (8001a78 <HAL_GPIO_Init+0x2b4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d019      	beq.n	80019c4 <HAL_GPIO_Init+0x200>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3a      	ldr	r2, [pc, #232]	; (8001a7c <HAL_GPIO_Init+0x2b8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <HAL_GPIO_Init+0x1fc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <HAL_GPIO_Init+0x2bc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_Init+0x1f8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a38      	ldr	r2, [pc, #224]	; (8001a84 <HAL_GPIO_Init+0x2c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x1f4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a37      	ldr	r2, [pc, #220]	; (8001a88 <HAL_GPIO_Init+0x2c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_Init+0x1f0>
 80019b0:	2305      	movs	r3, #5
 80019b2:	e00a      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019b4:	2306      	movs	r3, #6
 80019b6:	e008      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019bc:	2303      	movs	r3, #3
 80019be:	e004      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019c8:	2300      	movs	r3, #0
 80019ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	4093      	lsls	r3, r2
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019da:	4925      	ldr	r1, [pc, #148]	; (8001a70 <HAL_GPIO_Init+0x2ac>)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4924      	ldr	r1, [pc, #144]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4920      	ldr	r1, [pc, #128]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	491a      	ldr	r1, [pc, #104]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4916      	ldr	r1, [pc, #88]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d025      	beq.n	8001a90 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4910      	ldr	r1, [pc, #64]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e025      	b.n	8001a9e <HAL_GPIO_Init+0x2da>
 8001a52:	bf00      	nop
 8001a54:	10320000 	.word	0x10320000
 8001a58:	10310000 	.word	0x10310000
 8001a5c:	10220000 	.word	0x10220000
 8001a60:	10210000 	.word	0x10210000
 8001a64:	10120000 	.word	0x10120000
 8001a68:	10110000 	.word	0x10110000
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010000 	.word	0x40010000
 8001a74:	40010800 	.word	0x40010800
 8001a78:	40010c00 	.word	0x40010c00
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	40011400 	.word	0x40011400
 8001a84:	40011800 	.word	0x40011800
 8001a88:	40011c00 	.word	0x40011c00
 8001a8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_GPIO_Init+0x324>)
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	4913      	ldr	r1, [pc, #76]	; (8001ae8 <HAL_GPIO_Init+0x324>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_GPIO_Init+0x324>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <HAL_GPIO_Init+0x324>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
 8001ab6:	e006      	b.n	8001ac6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_GPIO_Init+0x324>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4909      	ldr	r1, [pc, #36]	; (8001ae8 <HAL_GPIO_Init+0x324>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	3301      	adds	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f47f ae7e 	bne.w	80017d8 <HAL_GPIO_Init+0x14>
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	372c      	adds	r7, #44	; 0x2c
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e272      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8087 	beq.w	8001c4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b3c:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d00c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b48:	4b8f      	ldr	r3, [pc, #572]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d112      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5e>
 8001b54:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b60:	d10b      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b62:	4b89      	ldr	r3, [pc, #548]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d06c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x12c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d168      	bne.n	8001c48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e24c      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x76>
 8001b84:	4b80      	ldr	r3, [pc, #512]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a7f      	ldr	r2, [pc, #508]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e02e      	b.n	8001bf0 <HAL_RCC_OscConfig+0xd4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x98>
 8001b9a:	4b7b      	ldr	r3, [pc, #492]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a7a      	ldr	r2, [pc, #488]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b78      	ldr	r3, [pc, #480]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a77      	ldr	r2, [pc, #476]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e01d      	b.n	8001bf0 <HAL_RCC_OscConfig+0xd4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xbc>
 8001bbe:	4b72      	ldr	r3, [pc, #456]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a71      	ldr	r2, [pc, #452]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b6f      	ldr	r3, [pc, #444]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6e      	ldr	r2, [pc, #440]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	4b6b      	ldr	r3, [pc, #428]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a6a      	ldr	r2, [pc, #424]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a67      	ldr	r2, [pc, #412]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fca8 	bl	800154c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fca4 	bl	800154c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e200      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0xe4>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fc94 	bl	800154c <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fc90 	bl	800154c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1ec      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x10c>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d063      	beq.n	8001d1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c56:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00b      	beq.n	8001c7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d11c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x18c>
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d116      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x176>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e1c0      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4939      	ldr	r1, [pc, #228]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	e03a      	b.n	8001d1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb0:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_RCC_OscConfig+0x270>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fc49 	bl	800154c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fc45 	bl	800154c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e1a1      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4927      	ldr	r1, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	e015      	b.n	8001d1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_RCC_OscConfig+0x270>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fc28 	bl	800154c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d00:	f7ff fc24 	bl	800154c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e180      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d03a      	beq.n	8001da0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d019      	beq.n	8001d66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff fc08 	bl	800154c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff fc04 	bl	800154c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e160      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f000 face 	bl	8002300 <RCC_Delay>
 8001d64:	e01c      	b.n	8001da0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fbee 	bl	800154c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d72:	e00f      	b.n	8001d94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d74:	f7ff fbea 	bl	800154c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d908      	bls.n	8001d94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e146      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	42420000 	.word	0x42420000
 8001d90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	4b92      	ldr	r3, [pc, #584]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1e9      	bne.n	8001d74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a6 	beq.w	8001efa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db2:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a87      	ldr	r2, [pc, #540]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b85      	ldr	r3, [pc, #532]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <HAL_RCC_OscConfig+0x4c8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b7f      	ldr	r3, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x4c8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7e      	ldr	r2, [pc, #504]	; (8001fe4 <HAL_RCC_OscConfig+0x4c8>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fbab 	bl	800154c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff fba7 	bl	800154c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b64      	cmp	r3, #100	; 0x64
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e103      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b75      	ldr	r3, [pc, #468]	; (8001fe4 <HAL_RCC_OscConfig+0x4c8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x312>
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a6e      	ldr	r2, [pc, #440]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	e02d      	b.n	8001e8a <HAL_RCC_OscConfig+0x36e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x334>
 8001e36:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a69      	ldr	r2, [pc, #420]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a66      	ldr	r2, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	6213      	str	r3, [r2, #32]
 8001e4e:	e01c      	b.n	8001e8a <HAL_RCC_OscConfig+0x36e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d10c      	bne.n	8001e72 <HAL_RCC_OscConfig+0x356>
 8001e58:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a60      	ldr	r2, [pc, #384]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a5d      	ldr	r2, [pc, #372]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6213      	str	r3, [r2, #32]
 8001e70:	e00b      	b.n	8001e8a <HAL_RCC_OscConfig+0x36e>
 8001e72:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a5a      	ldr	r2, [pc, #360]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6213      	str	r3, [r2, #32]
 8001e7e:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a57      	ldr	r2, [pc, #348]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0304 	bic.w	r3, r3, #4
 8001e88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d015      	beq.n	8001ebe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fb5b 	bl	800154c <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff fb57 	bl	800154c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e0b1      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	4b4b      	ldr	r3, [pc, #300]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ee      	beq.n	8001e9a <HAL_RCC_OscConfig+0x37e>
 8001ebc:	e014      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fb45 	bl	800154c <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff fb41 	bl	800154c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e09b      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ee      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d105      	bne.n	8001efa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eee:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	4a3b      	ldr	r2, [pc, #236]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8087 	beq.w	8002012 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f04:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d061      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d146      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fb15 	bl	800154c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fb11 	bl	800154c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e06d      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f38:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4921      	ldr	r1, [pc, #132]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a19      	ldr	r1, [r3, #32]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	430b      	orrs	r3, r1
 8001f72:	491b      	ldr	r1, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fae5 	bl	800154c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f86:	f7ff fae1 	bl	800154c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e03d      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x46a>
 8001fa4:	e035      	b.n	8002012 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff face 	bl	800154c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff faca 	bl	800154c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e026      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x498>
 8001fd2:	e01e      	b.n	8002012 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e019      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_OscConfig+0x500>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000

08002020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0d0      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	4965      	ldr	r1, [pc, #404]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b8      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002086:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800209e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d040      	beq.n	8002140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e073      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06b      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f023 0203 	bic.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4936      	ldr	r1, [pc, #216]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002110:	f7ff fa1c 	bl	800154c <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	e00a      	b.n	800212e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7ff fa18 	bl	800154c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e053      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 020c 	and.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	429a      	cmp	r2, r3
 800213e:	d1eb      	bne.n	8002118 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d210      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e032      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ae:	f000 f821 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1cc>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1d0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f98c 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	0800a410 	.word	0x0800a410
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <HAL_RCC_GetSysClockFreq+0x94>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b04      	cmp	r3, #4
 800221c:	d002      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x30>
 800221e:	2b08      	cmp	r3, #8
 8002220:	d003      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0x36>
 8002222:	e027      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_GetSysClockFreq+0x98>)
 8002226:	613b      	str	r3, [r7, #16]
      break;
 8002228:	e027      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	0c9b      	lsrs	r3, r3, #18
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	4a17      	ldr	r2, [pc, #92]	; (8002290 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002234:	5cd3      	ldrb	r3, [r2, r3]
 8002236:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_RCC_GetSysClockFreq+0x94>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	0c5b      	lsrs	r3, r3, #17
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HAL_RCC_GetSysClockFreq+0xa0>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a0d      	ldr	r2, [pc, #52]	; (800228c <HAL_RCC_GetSysClockFreq+0x98>)
 8002256:	fb03 f202 	mul.w	r2, r3, r2
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e004      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	613b      	str	r3, [r7, #16]
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetSysClockFreq+0x98>)
 8002276:	613b      	str	r3, [r7, #16]
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	693b      	ldr	r3, [r7, #16]
}
 800227c:	4618      	mov	r0, r3
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	007a1200 	.word	0x007a1200
 8002290:	0800a428 	.word	0x0800a428
 8002294:	0800a438 	.word	0x0800a438
 8002298:	003d0900 	.word	0x003d0900

0800229c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <HAL_RCC_GetHCLKFreq+0x10>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	20000000 	.word	0x20000000

080022b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b4:	f7ff fff2 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	4903      	ldr	r1, [pc, #12]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c6:	5ccb      	ldrb	r3, [r1, r3]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	0800a420 	.word	0x0800a420

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022dc:	f7ff ffde 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0adb      	lsrs	r3, r3, #11
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4903      	ldr	r1, [pc, #12]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	0800a420 	.word	0x0800a420

08002300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <RCC_Delay+0x34>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <RCC_Delay+0x38>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0a5b      	lsrs	r3, r3, #9
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800231c:	bf00      	nop
  }
  while (Delay --);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e5a      	subs	r2, r3, #1
 8002322:	60fa      	str	r2, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f9      	bne.n	800231c <RCC_Delay+0x1c>
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	20000000 	.word	0x20000000
 8002338:	10624dd3 	.word	0x10624dd3

0800233c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_SRAM_Init+0x1c>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002356:	d101      	bne.n	800235c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e038      	b.n	80023ce <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f7fe fd6f 	bl	8000e54 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3308      	adds	r3, #8
 800237e:	4619      	mov	r1, r3
 8002380:	4610      	mov	r0, r2
 8002382:	f000 f9f7 	bl	8002774 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	461a      	mov	r2, r3
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	f000 fa59 	bl	8002848 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6858      	ldr	r0, [r3, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	f000 fa84 	bl	80028b0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	6892      	ldr	r2, [r2, #8]
 80023b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	6892      	ldr	r2, [r2, #8]
 80023bc:	f041 0101 	orr.w	r1, r1, #1
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e042      	b.n	800246e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fe ffcf 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2224      	movs	r2, #36	; 0x24
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002418:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f91c 	bl	8002658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800242e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800243e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800244e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b08a      	sub	sp, #40	; 0x28
 800247a:	af02      	add	r7, sp, #8
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	d16d      	bne.n	8002572 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_UART_Transmit+0x2c>
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e066      	b.n	8002574 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2221      	movs	r2, #33	; 0x21
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024b4:	f7ff f84a 	bl	800154c <HAL_GetTick>
 80024b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	88fa      	ldrh	r2, [r7, #6]
 80024c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ce:	d108      	bne.n	80024e2 <HAL_UART_Transmit+0x6c>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d104      	bne.n	80024e2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	e003      	b.n	80024ea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024ea:	e02a      	b.n	8002542 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f840 	bl	800257c <UART_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e036      	b.n	8002574 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10b      	bne.n	8002524 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800251a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	3302      	adds	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	e007      	b.n	8002534 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1cf      	bne.n	80024ec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2200      	movs	r2, #0
 8002554:	2140      	movs	r1, #64	; 0x40
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f810 	bl	800257c <UART_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e006      	b.n	8002574 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002572:	2302      	movs	r3, #2
  }
}
 8002574:	4618      	mov	r0, r3
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b090      	sub	sp, #64	; 0x40
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258c:	e050      	b.n	8002630 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d04c      	beq.n	8002630 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <UART_WaitOnFlagUntilTimeout+0x30>
 800259c:	f7fe ffd6 	bl	800154c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d241      	bcs.n	8002630 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b6:	e853 3f00 	ldrex	r3, [r3]
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	330c      	adds	r3, #12
 80025ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025cc:	637a      	str	r2, [r7, #52]	; 0x34
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025d4:	e841 2300 	strex	r3, r2, [r1]
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e5      	bne.n	80025ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3314      	adds	r3, #20
 80025e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	e853 3f00 	ldrex	r3, [r3]
 80025ee:	613b      	str	r3, [r7, #16]
   return(result);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3314      	adds	r3, #20
 80025fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002600:	623a      	str	r2, [r7, #32]
 8002602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002604:	69f9      	ldr	r1, [r7, #28]
 8002606:	6a3a      	ldr	r2, [r7, #32]
 8002608:	e841 2300 	strex	r3, r2, [r1]
 800260c:	61bb      	str	r3, [r7, #24]
   return(result);
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1e5      	bne.n	80025e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e00f      	b.n	8002650 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4013      	ands	r3, r2
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	429a      	cmp	r2, r3
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	429a      	cmp	r2, r3
 800264c:	d09f      	beq.n	800258e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3740      	adds	r7, #64	; 0x40
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002692:	f023 030c 	bic.w	r3, r3, #12
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	430b      	orrs	r3, r1
 800269e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2c      	ldr	r2, [pc, #176]	; (800276c <UART_SetConfig+0x114>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026c0:	f7ff fe0a 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	e002      	b.n	80026ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026c8:	f7ff fdf2 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 80026cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	4a22      	ldr	r2, [pc, #136]	; (8002770 <UART_SetConfig+0x118>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	0119      	lsls	r1, r3, #4
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	009a      	lsls	r2, r3, #2
 80026f8:	441a      	add	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fbb2 f2f3 	udiv	r2, r2, r3
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <UART_SetConfig+0x118>)
 8002706:	fba3 0302 	umull	r0, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2064      	movs	r0, #100	; 0x64
 800270e:	fb00 f303 	mul.w	r3, r0, r3
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	3332      	adds	r3, #50	; 0x32
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <UART_SetConfig+0x118>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	4419      	add	r1, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009a      	lsls	r2, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	fbb2 f2f3 	udiv	r2, r2, r3
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <UART_SetConfig+0x118>)
 800273e:	fba3 0302 	umull	r0, r3, r3, r2
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	fb00 f303 	mul.w	r3, r0, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	3332      	adds	r3, #50	; 0x32
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <UART_SetConfig+0x118>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	440a      	add	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40013800 	.word	0x40013800
 8002770:	51eb851f 	.word	0x51eb851f

08002774 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	f023 0101 	bic.w	r1, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b08      	cmp	r3, #8
 800279c:	d102      	bne.n	80027a4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800279e:	2340      	movs	r3, #64	; 0x40
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e001      	b.n	80027a8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80027b4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80027ba:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80027c0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80027c6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80027cc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80027d2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80027d8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80027de:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80027e4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <FSMC_NORSRAM_Init+0xd0>)
 8002804:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800280c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002814:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43db      	mvns	r3, r3
 8002824:	ea02 0103 	and.w	r1, r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4319      	orrs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	0008fb7f 	.word	0x0008fb7f

08002848 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	431a      	orrs	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	431a      	orrs	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	431a      	orrs	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	3b01      	subs	r3, #1
 8002884:	051b      	lsls	r3, r3, #20
 8002886:	431a      	orrs	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	3b02      	subs	r3, #2
 800288e:	061b      	lsls	r3, r3, #24
 8002890:	431a      	orrs	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	3201      	adds	r2, #1
 800289c:	4319      	orrs	r1, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c4:	d11d      	bne.n	8002902 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	6811      	ldr	r1, [r2, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	6852      	ldr	r2, [r2, #4]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	4311      	orrs	r1, r2
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	6892      	ldr	r2, [r2, #8]
 80028e2:	0212      	lsls	r2, r2, #8
 80028e4:	4311      	orrs	r1, r2
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	6992      	ldr	r2, [r2, #24]
 80028ea:	4311      	orrs	r1, r2
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	68d2      	ldr	r2, [r2, #12]
 80028f0:	0412      	lsls	r2, r2, #16
 80028f2:	430a      	orrs	r2, r1
 80028f4:	ea43 0102 	orr.w	r1, r3, r2
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002900:	e005      	b.n	800290e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	cff00000 	.word	0xcff00000

08002920 <delay_us>:
//修改NT5510 ID读取方式,改为先发送秘钥,然后读取C500和C501,从而获取正确的ID(0X5510)
//////////////////////////////////////////////////////////////////////////////////


void delay_us(uint32_t udelay)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t startval,tickn,delays,wait;

  startval = SysTick->VAL;
 8002928:	4b1c      	ldr	r3, [pc, #112]	; (800299c <delay_us+0x7c>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 800292e:	f7fe fe0d 	bl	800154c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]
  //sysc = 72000;  //SystemCoreClock / (1000U / uwTickFreq);
  delays =udelay * 72; //sysc / 1000 * udelay;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	d915      	bls.n	8002974 <delay_us+0x54>
    {
      while(HAL_GetTick() == tickn)
 8002948:	bf00      	nop
 800294a:	f7fe fdff 	bl	800154c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4293      	cmp	r3, r2
 8002954:	d0f9      	beq.n	800294a <delay_us+0x2a>
        {

        }
      wait = 72000 + startval - delays;
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002960:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002964:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL)
 8002966:	bf00      	nop
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <delay_us+0x7c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	429a      	cmp	r2, r3
 8002970:	d3fa      	bcc.n	8002968 <delay_us+0x48>
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
        {

        }
    }
}
 8002972:	e00f      	b.n	8002994 <delay_us+0x74>
      wait = startval - delays;
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
 800297c:	bf00      	nop
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <delay_us+0x7c>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d205      	bcs.n	8002994 <delay_us+0x74>
 8002988:	f7fe fde0 	bl	800154c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4293      	cmp	r3, r2
 8002992:	d0f4      	beq.n	800297e <delay_us+0x5e>
}
 8002994:	bf00      	nop
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	e000e010 	.word	0xe000e010

080029a0 <delay_ms>:

void delay_ms(uint32_t udelay)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(udelay);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7fe fdd9 	bl	8001560 <HAL_Delay>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(vu16 regval)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
    regval = regval;        //使用-O2优化的时候,必须插入的延时
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regval;  //写入要写的寄存器序号
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <LCD_WR_REG+0x24>)
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	b292      	uxth	r2, r2
 80029ce:	801a      	strh	r2, [r3, #0]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	6c0007fe 	.word	0x6c0007fe

080029e0 <LCD_WR_DATA>:

//写LCD数据
//data:要写入的值
void LCD_WR_DATA(vu16 data)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	80fb      	strh	r3, [r7, #6]
    data = data;            //使用-O2优化的时候,必须插入的延时
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <LCD_WR_DATA+0x24>)
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	b292      	uxth	r2, r2
 80029f6:	805a      	strh	r2, [r3, #2]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	6c0007fe 	.word	0x6c0007fe

08002a08 <LCD_RD_DATA>:

//读LCD数据
//返回值:读到的值
u16 LCD_RD_DATA(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
    vu16 ram;               //防止被优化
    ram = LCD->LCD_RAM;
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <LCD_RD_DATA+0x1c>)
 8002a10:	885b      	ldrh	r3, [r3, #2]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	80fb      	strh	r3, [r7, #6]
    return ram;
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	b29b      	uxth	r3, r3
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	6c0007fe 	.word	0x6c0007fe

08002a28 <LCD_WriteReg>:

//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	460a      	mov	r2, r1
 8002a32:	80fb      	strh	r3, [r7, #6]
 8002a34:	4613      	mov	r3, r2
 8002a36:	80bb      	strh	r3, [r7, #4]
    LCD->LCD_REG = LCD_Reg;         //写入要写的寄存器序号
 8002a38:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <LCD_WriteReg+0x28>)
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	8013      	strh	r3, [r2, #0]
    LCD->LCD_RAM = LCD_RegValue;    //写入数据
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <LCD_WriteReg+0x28>)
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	8053      	strh	r3, [r2, #2]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	6c0007fe 	.word	0x6c0007fe

08002a54 <LCD_WriteRAM_Prepare>:
    return LCD_RD_DATA();           //返回读到的值
}

//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <LCD_WriteRAM_Prepare+0x14>)
 8002a5a:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <LCD_WriteRAM_Prepare+0x18>)
 8002a5c:	8912      	ldrh	r2, [r2, #8]
 8002a5e:	801a      	strh	r2, [r3, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	6c0007fe 	.word	0x6c0007fe
 8002a6c:	200002a0 	.word	0x200002a0

08002a70 <LCD_SetCursor>:

//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	460a      	mov	r2, r1
 8002a7a:	80fb      	strh	r3, [r7, #6]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8002a80:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002a82:	889b      	ldrh	r3, [r3, #4]
 8002a84:	f641 1263 	movw	r2, #6499	; 0x1963
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d167      	bne.n	8002b5c <LCD_SetCursor+0xec>
    {
        if (lcddev.dir == 0)   //x坐标需要变换
 8002a8c:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002a8e:	799b      	ldrb	r3, [r3, #6]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11e      	bne.n	8002ad2 <LCD_SetCursor+0x62>
        {
            Xpos = lcddev.width - 1 - Xpos;
 8002a94:	4b60      	ldr	r3, [pc, #384]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002a96:	881a      	ldrh	r2, [r3, #0]
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	80fb      	strh	r3, [r7, #6]
            LCD_WR_REG(lcddev.setxcmd);
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002aa4:	895b      	ldrh	r3, [r3, #10]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff86 	bl	80029b8 <LCD_WR_REG>
            LCD_WR_DATA(0);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff ff97 	bl	80029e0 <LCD_WR_DATA>
            LCD_WR_DATA(0);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7ff ff94 	bl	80029e0 <LCD_WR_DATA>
            LCD_WR_DATA(Xpos >> 8);
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff8e 	bl	80029e0 <LCD_WR_DATA>
            LCD_WR_DATA(Xpos & 0XFF);
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff88 	bl	80029e0 <LCD_WR_DATA>
 8002ad0:	e021      	b.n	8002b16 <LCD_SetCursor+0xa6>
        }
        else
        {
            LCD_WR_REG(lcddev.setxcmd);
 8002ad2:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002ad4:	895b      	ldrh	r3, [r3, #10]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff6e 	bl	80029b8 <LCD_WR_REG>
            LCD_WR_DATA(Xpos >> 8);
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff7c 	bl	80029e0 <LCD_WR_DATA>
            LCD_WR_DATA(Xpos & 0XFF);
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff76 	bl	80029e0 <LCD_WR_DATA>
            LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002af4:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	121b      	asrs	r3, r3, #8
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff6e 	bl	80029e0 <LCD_WR_DATA>
            LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8002b04:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff65 	bl	80029e0 <LCD_WR_DATA>
        }

        LCD_WR_REG(lcddev.setycmd);
 8002b16:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002b18:	899b      	ldrh	r3, [r3, #12]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff4c 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff5a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(Ypos & 0XFF);
 8002b2c:	88bb      	ldrh	r3, [r7, #4]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ff54 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002b38:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002b3a:	885b      	ldrh	r3, [r3, #2]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	121b      	asrs	r3, r3, #8
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff4c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8002b48:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002b4a:	885b      	ldrh	r3, [r3, #2]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff43 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(Xpos & 0XFF);
        LCD_WR_REG(lcddev.setycmd);
        LCD_WR_DATA(Ypos >> 8);
        LCD_WR_DATA(Ypos & 0XFF);
    }
}
 8002b5a:	e058      	b.n	8002c0e <LCD_SetCursor+0x19e>
    else if (lcddev.id == 0X5510)
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002b5e:	889b      	ldrh	r3, [r3, #4]
 8002b60:	f245 5210 	movw	r2, #21776	; 0x5510
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d130      	bne.n	8002bca <LCD_SetCursor+0x15a>
        LCD_WR_REG(lcddev.setxcmd);
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002b6a:	895b      	ldrh	r3, [r3, #10]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff23 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(Xpos >> 8);
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff31 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 1);
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002b80:	895b      	ldrh	r3, [r3, #10]
 8002b82:	3301      	adds	r3, #1
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff16 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(Xpos & 0XFF);
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff24 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8002b98:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002b9a:	899b      	ldrh	r3, [r3, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff0b 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8002ba2:	88bb      	ldrh	r3, [r7, #4]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff19 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 1);
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002bb0:	899b      	ldrh	r3, [r3, #12]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fefe 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(Ypos & 0XFF);
 8002bbc:	88bb      	ldrh	r3, [r7, #4]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff0c 	bl	80029e0 <LCD_WR_DATA>
}
 8002bc8:	e021      	b.n	8002c0e <LCD_SetCursor+0x19e>
        LCD_WR_REG(lcddev.setxcmd);
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002bcc:	895b      	ldrh	r3, [r3, #10]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fef2 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(Xpos >> 8);
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff00 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(Xpos & 0XFF);
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fefa 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8002bec:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <LCD_SetCursor+0x1a8>)
 8002bee:	899b      	ldrh	r3, [r3, #12]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fee1 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8002bf6:	88bb      	ldrh	r3, [r7, #4]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff feef 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(Ypos & 0XFF);
 8002c02:	88bb      	ldrh	r3, [r7, #4]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fee9 	bl	80029e0 <LCD_WR_DATA>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200002a0 	.word	0x200002a0

08002c1c <LCD_Scan_Dir>:
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963/7789等IC已经实际测试
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
void LCD_Scan_Dir(u8 dir)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
    u16 regval = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	81fb      	strh	r3, [r7, #14]
    u16 dirreg = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	81bb      	strh	r3, [r7, #12]
    u16 temp;

    //横屏时，对1963不改变扫描方向, 其他IC改变扫描方向！竖屏时1963改变方向, 其他IC不改变扫描方向
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 8002c2e:	4b9a      	ldr	r3, [pc, #616]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002c30:	799b      	ldrb	r3, [r3, #6]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <LCD_Scan_Dir+0x26>
 8002c36:	4b98      	ldr	r3, [pc, #608]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002c38:	889b      	ldrh	r3, [r3, #4]
 8002c3a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d109      	bne.n	8002c56 <LCD_Scan_Dir+0x3a>
 8002c42:	4b95      	ldr	r3, [pc, #596]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002c44:	799b      	ldrb	r3, [r3, #6]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d134      	bne.n	8002cb4 <LCD_Scan_Dir+0x98>
 8002c4a:	4b93      	ldr	r3, [pc, #588]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002c4c:	889b      	ldrh	r3, [r3, #4]
 8002c4e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d12e      	bne.n	8002cb4 <LCD_Scan_Dir+0x98>
    {
        switch (dir)   //方向转换
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	2b07      	cmp	r3, #7
 8002c5a:	d82c      	bhi.n	8002cb6 <LCD_Scan_Dir+0x9a>
 8002c5c:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <LCD_Scan_Dir+0x48>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c85 	.word	0x08002c85
 8002c68:	08002c8b 	.word	0x08002c8b
 8002c6c:	08002c91 	.word	0x08002c91
 8002c70:	08002c97 	.word	0x08002c97
 8002c74:	08002c9d 	.word	0x08002c9d
 8002c78:	08002ca3 	.word	0x08002ca3
 8002c7c:	08002ca9 	.word	0x08002ca9
 8002c80:	08002caf 	.word	0x08002caf
        {
            case 0:
                dir = 6;
 8002c84:	2306      	movs	r3, #6
 8002c86:	71fb      	strb	r3, [r7, #7]
                break;
 8002c88:	e015      	b.n	8002cb6 <LCD_Scan_Dir+0x9a>

            case 1:
                dir = 7;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	71fb      	strb	r3, [r7, #7]
                break;
 8002c8e:	e012      	b.n	8002cb6 <LCD_Scan_Dir+0x9a>

            case 2:
                dir = 4;
 8002c90:	2304      	movs	r3, #4
 8002c92:	71fb      	strb	r3, [r7, #7]
                break;
 8002c94:	e00f      	b.n	8002cb6 <LCD_Scan_Dir+0x9a>

            case 3:
                dir = 5;
 8002c96:	2305      	movs	r3, #5
 8002c98:	71fb      	strb	r3, [r7, #7]
                break;
 8002c9a:	e00c      	b.n	8002cb6 <LCD_Scan_Dir+0x9a>

            case 4:
                dir = 1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	71fb      	strb	r3, [r7, #7]
                break;
 8002ca0:	e009      	b.n	8002cb6 <LCD_Scan_Dir+0x9a>

            case 5:
                dir = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	71fb      	strb	r3, [r7, #7]
                break;
 8002ca6:	e006      	b.n	8002cb6 <LCD_Scan_Dir+0x9a>

            case 6:
                dir = 3;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	71fb      	strb	r3, [r7, #7]
                break;
 8002cac:	e003      	b.n	8002cb6 <LCD_Scan_Dir+0x9a>

            case 7:
                dir = 2;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	71fb      	strb	r3, [r7, #7]
                break;
 8002cb2:	e000      	b.n	8002cb6 <LCD_Scan_Dir+0x9a>
        }
    }
 8002cb4:	bf00      	nop

    switch (dir)
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b07      	cmp	r3, #7
 8002cba:	d836      	bhi.n	8002d2a <LCD_Scan_Dir+0x10e>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <LCD_Scan_Dir+0xa8>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002d2b 	.word	0x08002d2b
 8002cc8:	08002ce5 	.word	0x08002ce5
 8002ccc:	08002cef 	.word	0x08002cef
 8002cd0:	08002cf9 	.word	0x08002cf9
 8002cd4:	08002d03 	.word	0x08002d03
 8002cd8:	08002d0d 	.word	0x08002d0d
 8002cdc:	08002d17 	.word	0x08002d17
 8002ce0:	08002d21 	.word	0x08002d21
        case L2R_U2D://从左到右,从上到下
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U://从左到右,从下到上
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8002ce4:	89fb      	ldrh	r3, [r7, #14]
 8002ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cea:	81fb      	strh	r3, [r7, #14]
            break;
 8002cec:	e01d      	b.n	8002d2a <LCD_Scan_Dir+0x10e>

        case R2L_U2D://从右到左,从上到下
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8002cee:	89fb      	ldrh	r3, [r7, #14]
 8002cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf4:	81fb      	strh	r3, [r7, #14]
            break;
 8002cf6:	e018      	b.n	8002d2a <LCD_Scan_Dir+0x10e>

        case R2L_D2U://从右到左,从下到上
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8002cf8:	89fb      	ldrh	r3, [r7, #14]
 8002cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cfe:	81fb      	strh	r3, [r7, #14]
            break;
 8002d00:	e013      	b.n	8002d2a <LCD_Scan_Dir+0x10e>

        case U2D_L2R://从上到下,从左到右
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8002d02:	89fb      	ldrh	r3, [r7, #14]
 8002d04:	f043 0320 	orr.w	r3, r3, #32
 8002d08:	81fb      	strh	r3, [r7, #14]
            break;
 8002d0a:	e00e      	b.n	8002d2a <LCD_Scan_Dir+0x10e>

        case U2D_R2L://从上到下,从右到左
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8002d0c:	89fb      	ldrh	r3, [r7, #14]
 8002d0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d12:	81fb      	strh	r3, [r7, #14]
            break;
 8002d14:	e009      	b.n	8002d2a <LCD_Scan_Dir+0x10e>

        case D2U_L2R://从下到上,从左到右
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8002d16:	89fb      	ldrh	r3, [r7, #14]
 8002d18:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002d1c:	81fb      	strh	r3, [r7, #14]
            break;
 8002d1e:	e004      	b.n	8002d2a <LCD_Scan_Dir+0x10e>

        case D2U_R2L://从下到上,从右到左
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8002d20:	89fb      	ldrh	r3, [r7, #14]
 8002d22:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002d26:	81fb      	strh	r3, [r7, #14]
            break;
 8002d28:	bf00      	nop
    }

    if (lcddev.id == 0X5510)dirreg = 0X3600;
 8002d2a:	4b5b      	ldr	r3, [pc, #364]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002d2c:	889b      	ldrh	r3, [r3, #4]
 8002d2e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d103      	bne.n	8002d3e <LCD_Scan_Dir+0x122>
 8002d36:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8002d3a:	81bb      	strh	r3, [r7, #12]
 8002d3c:	e001      	b.n	8002d42 <LCD_Scan_Dir+0x126>
    else dirreg = 0X36;
 8002d3e:	2336      	movs	r3, #54	; 0x36
 8002d40:	81bb      	strh	r3, [r7, #12]

    if (lcddev.id == 0X9341 || lcddev.id == 0X7789)   //9341 & 7789 要设置BGR位
 8002d42:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002d44:	889b      	ldrh	r3, [r3, #4]
 8002d46:	f249 3241 	movw	r2, #37697	; 0x9341
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d005      	beq.n	8002d5a <LCD_Scan_Dir+0x13e>
 8002d4e:	4b52      	ldr	r3, [pc, #328]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002d50:	889b      	ldrh	r3, [r3, #4]
 8002d52:	f247 7289 	movw	r2, #30601	; 0x7789
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d103      	bne.n	8002d62 <LCD_Scan_Dir+0x146>
    {
        regval |= 0X08;
 8002d5a:	89fb      	ldrh	r3, [r7, #14]
 8002d5c:	f043 0308 	orr.w	r3, r3, #8
 8002d60:	81fb      	strh	r3, [r7, #14]
    }

    LCD_WriteReg(dirreg, regval);
 8002d62:	89fa      	ldrh	r2, [r7, #14]
 8002d64:	89bb      	ldrh	r3, [r7, #12]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fe5d 	bl	8002a28 <LCD_WriteReg>

    if (lcddev.id != 0X1963)   //1963不做坐标处理
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002d70:	889b      	ldrh	r3, [r3, #4]
 8002d72:	f641 1263 	movw	r2, #6499	; 0x1963
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d025      	beq.n	8002dc6 <LCD_Scan_Dir+0x1aa>
    {
        if (regval & 0X20)
 8002d7a:	89fb      	ldrh	r3, [r7, #14]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <LCD_Scan_Dir+0x18a>
        {
            if (lcddev.width < lcddev.height)   //交换X,Y
 8002d84:	4b44      	ldr	r3, [pc, #272]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002d86:	881a      	ldrh	r2, [r3, #0]
 8002d88:	4b43      	ldr	r3, [pc, #268]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002d8a:	885b      	ldrh	r3, [r3, #2]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d21a      	bcs.n	8002dc6 <LCD_Scan_Dir+0x1aa>
            {
                temp = lcddev.width;
 8002d90:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8002d96:	4b40      	ldr	r3, [pc, #256]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002d98:	885a      	ldrh	r2, [r3, #2]
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002d9c:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002da0:	897b      	ldrh	r3, [r7, #10]
 8002da2:	8053      	strh	r3, [r2, #2]
 8002da4:	e00f      	b.n	8002dc6 <LCD_Scan_Dir+0x1aa>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   //交换X,Y
 8002da6:	4b3c      	ldr	r3, [pc, #240]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002da8:	881a      	ldrh	r2, [r3, #0]
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002dac:	885b      	ldrh	r3, [r3, #2]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d909      	bls.n	8002dc6 <LCD_Scan_Dir+0x1aa>
            {
                temp = lcddev.width;
 8002db2:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8002db8:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002dba:	885a      	ldrh	r2, [r3, #2]
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002dbe:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    //设置显示区域(开窗)大小
    if (lcddev.id == 0X5510)
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002dc8:	889b      	ldrh	r3, [r3, #4]
 8002dca:	f245 5210 	movw	r2, #21776	; 0x5510
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d164      	bne.n	8002e9c <LCD_Scan_Dir+0x280>
    {
        LCD_WR_REG(lcddev.setxcmd);
 8002dd2:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002dd4:	895b      	ldrh	r3, [r3, #10]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fdee 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7ff fdff 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 1);
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002de4:	895b      	ldrh	r3, [r3, #10]
 8002de6:	3301      	adds	r3, #1
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fde4 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7ff fdf5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 2);
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002df8:	895b      	ldrh	r3, [r3, #10]
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fdda 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	121b      	asrs	r3, r3, #8
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fde6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 3);
 8002e14:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002e16:	895b      	ldrh	r3, [r3, #10]
 8002e18:	3303      	adds	r3, #3
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fdcb 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fdd6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002e36:	899b      	ldrh	r3, [r3, #12]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fdbd 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f7ff fdce 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 1);
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002e46:	899b      	ldrh	r3, [r3, #12]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fdb3 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7ff fdc4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 2);
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002e5a:	899b      	ldrh	r3, [r3, #12]
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fda9 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002e68:	885b      	ldrh	r3, [r3, #2]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	121b      	asrs	r3, r3, #8
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fdb5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 3);
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002e78:	899b      	ldrh	r3, [r3, #12]
 8002e7a:	3303      	adds	r3, #3
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fd9a 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <LCD_Scan_Dir+0x27c>)
 8002e86:	885b      	ldrh	r3, [r3, #2]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fda5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0);
        LCD_WR_DATA(0);
        LCD_WR_DATA((lcddev.height - 1) >> 8);
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
    }
}
 8002e96:	e039      	b.n	8002f0c <LCD_Scan_Dir+0x2f0>
 8002e98:	200002a0 	.word	0x200002a0
        LCD_WR_REG(lcddev.setxcmd);
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <LCD_Scan_Dir+0x2f8>)
 8002e9e:	895b      	ldrh	r3, [r3, #10]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fd89 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7ff fd9a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7ff fd97 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002eb2:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <LCD_Scan_Dir+0x2f8>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	121b      	asrs	r3, r3, #8
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fd8f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <LCD_Scan_Dir+0x2f8>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fd86 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <LCD_Scan_Dir+0x2f8>)
 8002ed6:	899b      	ldrh	r3, [r3, #12]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fd6d 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7ff fd7e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7ff fd7b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <LCD_Scan_Dir+0x2f8>)
 8002eec:	885b      	ldrh	r3, [r3, #2]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	121b      	asrs	r3, r3, #8
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fd73 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <LCD_Scan_Dir+0x2f8>)
 8002efc:	885b      	ldrh	r3, [r3, #2]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fd6a 	bl	80029e0 <LCD_WR_DATA>
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200002a0 	.word	0x200002a0

08002f18 <LCD_Fast_DrawPoint>:

//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(u16 x, u16 y, u16 color)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
 8002f22:	460b      	mov	r3, r1
 8002f24:	80bb      	strh	r3, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	807b      	strh	r3, [r7, #2]
    if (lcddev.id == 0X5510)
 8002f2a:	4b58      	ldr	r3, [pc, #352]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002f2c:	889b      	ldrh	r3, [r3, #4]
 8002f2e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d130      	bne.n	8002f98 <LCD_Fast_DrawPoint+0x80>
    {
        LCD_WR_REG(lcddev.setxcmd);
 8002f36:	4b55      	ldr	r3, [pc, #340]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002f38:	895b      	ldrh	r3, [r3, #10]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fd3c 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fd4a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 1);
 8002f4c:	4b4f      	ldr	r3, [pc, #316]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002f4e:	895b      	ldrh	r3, [r3, #10]
 8002f50:	3301      	adds	r3, #1
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fd2f 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(x & 0XFF);
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fd3d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8002f66:	4b49      	ldr	r3, [pc, #292]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002f68:	899b      	ldrh	r3, [r3, #12]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fd24 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 8002f70:	88bb      	ldrh	r3, [r7, #4]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fd32 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 1);
 8002f7c:	4b43      	ldr	r3, [pc, #268]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002f7e:	899b      	ldrh	r3, [r3, #12]
 8002f80:	3301      	adds	r3, #1
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fd17 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(y & 0XFF);
 8002f8a:	88bb      	ldrh	r3, [r7, #4]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fd25 	bl	80029e0 <LCD_WR_DATA>
 8002f96:	e06d      	b.n	8003074 <LCD_Fast_DrawPoint+0x15c>
    }
    else if (lcddev.id == 0X1963)
 8002f98:	4b3c      	ldr	r3, [pc, #240]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002f9a:	889b      	ldrh	r3, [r3, #4]
 8002f9c:	f641 1263 	movw	r2, #6499	; 0x1963
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d145      	bne.n	8003030 <LCD_Fast_DrawPoint+0x118>
    {
        if (lcddev.dir == 0)x = lcddev.width - 1 - x;
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002fa6:	799b      	ldrb	r3, [r3, #6]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <LCD_Fast_DrawPoint+0xa2>
 8002fac:	4b37      	ldr	r3, [pc, #220]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	80fb      	strh	r3, [r7, #6]

        LCD_WR_REG(lcddev.setxcmd);
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002fbc:	895b      	ldrh	r3, [r3, #10]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fcfa 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fd08 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(x & 0XFF);
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fd02 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(x >> 8);
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fcfc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(x & 0XFF);
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fcf6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8002ff4:	4b25      	ldr	r3, [pc, #148]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8002ff6:	899b      	ldrh	r3, [r3, #12]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fcdd 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 8002ffe:	88bb      	ldrh	r3, [r7, #4]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	b29b      	uxth	r3, r3
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fceb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(y & 0XFF);
 800300a:	88bb      	ldrh	r3, [r7, #4]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	b29b      	uxth	r3, r3
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fce5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(y >> 8);
 8003016:	88bb      	ldrh	r3, [r7, #4]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	b29b      	uxth	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fcdf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(y & 0XFF);
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	b29b      	uxth	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fcd9 	bl	80029e0 <LCD_WR_DATA>
 800302e:	e021      	b.n	8003074 <LCD_Fast_DrawPoint+0x15c>
    }
    else     //9341/5310/7789等设置坐标
    {
        LCD_WR_REG(lcddev.setxcmd);
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8003032:	895b      	ldrh	r3, [r3, #10]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fcbf 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	b29b      	uxth	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fccd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(x & 0XFF);
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	b29b      	uxth	r3, r3
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fcc7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8003054:	899b      	ldrh	r3, [r3, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fcae 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 800305c:	88bb      	ldrh	r3, [r7, #4]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	b29b      	uxth	r3, r3
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fcbc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(y & 0XFF);
 8003068:	88bb      	ldrh	r3, [r7, #4]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	b29b      	uxth	r3, r3
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fcb6 	bl	80029e0 <LCD_WR_DATA>
    }

    LCD->LCD_REG=lcddev.wramcmd; 
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <LCD_Fast_DrawPoint+0x178>)
 8003076:	4a05      	ldr	r2, [pc, #20]	; (800308c <LCD_Fast_DrawPoint+0x174>)
 8003078:	8912      	ldrh	r2, [r2, #8]
 800307a:	801a      	strh	r2, [r3, #0]
    LCD->LCD_RAM=color; 
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <LCD_Fast_DrawPoint+0x178>)
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	8053      	strh	r3, [r2, #2]
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200002a0 	.word	0x200002a0
 8003090:	6c0007fe 	.word	0x6c0007fe
 8003094:	00000000 	.word	0x00000000

08003098 <LCD_SSD_BackLightSet>:

//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(u8 pwm)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
    LCD_WR_REG(0xBE);           //配置PWM输出
 80030a2:	20be      	movs	r0, #190	; 0xbe
 80030a4:	f7ff fc88 	bl	80029b8 <LCD_WR_REG>
    LCD_WR_DATA(0x05);          //1设置PWM频率
 80030a8:	2005      	movs	r0, #5
 80030aa:	f7ff fc99 	bl	80029e0 <LCD_WR_DATA>
    LCD_WR_DATA(pwm * 2.55);    //2设置PWM占空比
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fa13 	bl	80004dc <__aeabi_i2d>
 80030b6:	a310      	add	r3, pc, #64	; (adr r3, 80030f8 <LCD_SSD_BackLightSet+0x60>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd fa78 	bl	80005b0 <__aeabi_dmul>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	f7fd fd4a 	bl	8000b60 <__aeabi_d2uiz>
 80030cc:	4603      	mov	r3, r0
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fc85 	bl	80029e0 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);          //3设置C
 80030d6:	2001      	movs	r0, #1
 80030d8:	f7ff fc82 	bl	80029e0 <LCD_WR_DATA>
    LCD_WR_DATA(0xFF);          //4设置D
 80030dc:	20ff      	movs	r0, #255	; 0xff
 80030de:	f7ff fc7f 	bl	80029e0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);          //5设置E
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7ff fc7c 	bl	80029e0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);          //6设置F
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7ff fc79 	bl	80029e0 <LCD_WR_DATA>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	66666666 	.word	0x66666666
 80030fc:	40046666 	.word	0x40046666

08003100 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(u8 dir)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;       //竖屏/横屏
 800310a:	4a58      	ldr	r2, [pc, #352]	; (800326c <LCD_Display_Dir+0x16c>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	7193      	strb	r3, [r2, #6]

    if (dir == 0)           //竖屏
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d151      	bne.n	80031ba <LCD_Display_Dir+0xba>
    {
        lcddev.width = 240;
 8003116:	4b55      	ldr	r3, [pc, #340]	; (800326c <LCD_Display_Dir+0x16c>)
 8003118:	22f0      	movs	r2, #240	; 0xf0
 800311a:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <LCD_Display_Dir+0x16c>)
 800311e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003122:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003124:	4b51      	ldr	r3, [pc, #324]	; (800326c <LCD_Display_Dir+0x16c>)
 8003126:	889b      	ldrh	r3, [r3, #4]
 8003128:	f245 5210 	movw	r2, #21776	; 0x5510
 800312c:	4293      	cmp	r3, r2
 800312e:	d114      	bne.n	800315a <LCD_Display_Dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8003130:	4b4e      	ldr	r3, [pc, #312]	; (800326c <LCD_Display_Dir+0x16c>)
 8003132:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003136:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8003138:	4b4c      	ldr	r3, [pc, #304]	; (800326c <LCD_Display_Dir+0x16c>)
 800313a:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800313e:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8003140:	4b4a      	ldr	r3, [pc, #296]	; (800326c <LCD_Display_Dir+0x16c>)
 8003142:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003146:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8003148:	4b48      	ldr	r3, [pc, #288]	; (800326c <LCD_Display_Dir+0x16c>)
 800314a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800314e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003150:	4b46      	ldr	r3, [pc, #280]	; (800326c <LCD_Display_Dir+0x16c>)
 8003152:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003156:	805a      	strh	r2, [r3, #2]
 8003158:	e020      	b.n	800319c <LCD_Display_Dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 800315a:	4b44      	ldr	r3, [pc, #272]	; (800326c <LCD_Display_Dir+0x16c>)
 800315c:	889b      	ldrh	r3, [r3, #4]
 800315e:	f641 1263 	movw	r2, #6499	; 0x1963
 8003162:	4293      	cmp	r3, r2
 8003164:	d111      	bne.n	800318a <LCD_Display_Dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  //设置写入GRAM的指令
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <LCD_Display_Dir+0x16c>)
 8003168:	222c      	movs	r2, #44	; 0x2c
 800316a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  //设置写X坐标指令
 800316c:	4b3f      	ldr	r3, [pc, #252]	; (800326c <LCD_Display_Dir+0x16c>)
 800316e:	222b      	movs	r2, #43	; 0x2b
 8003170:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  //设置写Y坐标指令
 8003172:	4b3e      	ldr	r3, [pc, #248]	; (800326c <LCD_Display_Dir+0x16c>)
 8003174:	222a      	movs	r2, #42	; 0x2a
 8003176:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     //设置宽度480
 8003178:	4b3c      	ldr	r3, [pc, #240]	; (800326c <LCD_Display_Dir+0x16c>)
 800317a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800317e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    //设置高度800
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <LCD_Display_Dir+0x16c>)
 8003182:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003186:	805a      	strh	r2, [r3, #2]
 8003188:	e008      	b.n	800319c <LCD_Display_Dir+0x9c>
        }
        else                        //其他IC, 包括: 9341 / 5310 / 7789等IC
        {
            lcddev.wramcmd = 0X2C;
 800318a:	4b38      	ldr	r3, [pc, #224]	; (800326c <LCD_Display_Dir+0x16c>)
 800318c:	222c      	movs	r2, #44	; 0x2c
 800318e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8003190:	4b36      	ldr	r3, [pc, #216]	; (800326c <LCD_Display_Dir+0x16c>)
 8003192:	222a      	movs	r2, #42	; 0x2a
 8003194:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8003196:	4b35      	ldr	r3, [pc, #212]	; (800326c <LCD_Display_Dir+0x16c>)
 8003198:	222b      	movs	r2, #43	; 0x2b
 800319a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310)    //如果是5310 则表示是 320*480分辨率
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <LCD_Display_Dir+0x16c>)
 800319e:	889b      	ldrh	r3, [r3, #4]
 80031a0:	f245 3210 	movw	r2, #21264	; 0x5310
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d159      	bne.n	800325c <LCD_Display_Dir+0x15c>
        {
            lcddev.width = 320;
 80031a8:	4b30      	ldr	r3, [pc, #192]	; (800326c <LCD_Display_Dir+0x16c>)
 80031aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031ae:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <LCD_Display_Dir+0x16c>)
 80031b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031b6:	805a      	strh	r2, [r3, #2]
 80031b8:	e050      	b.n	800325c <LCD_Display_Dir+0x15c>
        }
    }
    else     //横屏
    {
        lcddev.width = 320;
 80031ba:	4b2c      	ldr	r3, [pc, #176]	; (800326c <LCD_Display_Dir+0x16c>)
 80031bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031c0:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <LCD_Display_Dir+0x16c>)
 80031c4:	22f0      	movs	r2, #240	; 0xf0
 80031c6:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <LCD_Display_Dir+0x16c>)
 80031ca:	889b      	ldrh	r3, [r3, #4]
 80031cc:	f245 5210 	movw	r2, #21776	; 0x5510
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d114      	bne.n	80031fe <LCD_Display_Dir+0xfe>
        {
            lcddev.wramcmd = 0X2C00;
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <LCD_Display_Dir+0x16c>)
 80031d6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80031da:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <LCD_Display_Dir+0x16c>)
 80031de:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80031e2:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <LCD_Display_Dir+0x16c>)
 80031e6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80031ea:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 80031ec:	4b1f      	ldr	r3, [pc, #124]	; (800326c <LCD_Display_Dir+0x16c>)
 80031ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80031f2:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <LCD_Display_Dir+0x16c>)
 80031f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031fa:	805a      	strh	r2, [r3, #2]
 80031fc:	e020      	b.n	8003240 <LCD_Display_Dir+0x140>
        }
        else if (lcddev.id == 0X1963)
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <LCD_Display_Dir+0x16c>)
 8003200:	889b      	ldrh	r3, [r3, #4]
 8003202:	f641 1263 	movw	r2, #6499	; 0x1963
 8003206:	4293      	cmp	r3, r2
 8003208:	d111      	bne.n	800322e <LCD_Display_Dir+0x12e>
        {
            lcddev.wramcmd = 0X2C;  //设置写入GRAM的指令
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <LCD_Display_Dir+0x16c>)
 800320c:	222c      	movs	r2, #44	; 0x2c
 800320e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  //设置写X坐标指令
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <LCD_Display_Dir+0x16c>)
 8003212:	222a      	movs	r2, #42	; 0x2a
 8003214:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  //设置写Y坐标指令
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <LCD_Display_Dir+0x16c>)
 8003218:	222b      	movs	r2, #43	; 0x2b
 800321a:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     //设置宽度800
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <LCD_Display_Dir+0x16c>)
 800321e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003222:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    //设置高度480
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <LCD_Display_Dir+0x16c>)
 8003226:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800322a:	805a      	strh	r2, [r3, #2]
 800322c:	e008      	b.n	8003240 <LCD_Display_Dir+0x140>
        }
        else                        //其他IC, 包括: 9341 / 5310 / 7789等IC
        {
            lcddev.wramcmd = 0X2C;
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <LCD_Display_Dir+0x16c>)
 8003230:	222c      	movs	r2, #44	; 0x2c
 8003232:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <LCD_Display_Dir+0x16c>)
 8003236:	222a      	movs	r2, #42	; 0x2a
 8003238:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <LCD_Display_Dir+0x16c>)
 800323c:	222b      	movs	r2, #43	; 0x2b
 800323e:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310)    //如果是5310 则表示是 320*480分辨率
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <LCD_Display_Dir+0x16c>)
 8003242:	889b      	ldrh	r3, [r3, #4]
 8003244:	f245 3210 	movw	r2, #21264	; 0x5310
 8003248:	4293      	cmp	r3, r2
 800324a:	d107      	bne.n	800325c <LCD_Display_Dir+0x15c>
        {
            lcddev.width = 480;
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <LCD_Display_Dir+0x16c>)
 800324e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003252:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <LCD_Display_Dir+0x16c>)
 8003256:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800325a:	805a      	strh	r2, [r3, #2]
        }
    }

    LCD_Scan_Dir(DFT_SCAN_DIR);     //默认扫描方向
 800325c:	2000      	movs	r0, #0
 800325e:	f7ff fcdd 	bl	8002c1c <LCD_Scan_Dir>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200002a0 	.word	0x200002a0

08003270 <LCD_Init>:

//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
//    FSMC_NORSRAM_TimingTypeDef FSMC_ReadWriteTim;
//    FSMC_NORSRAM_TimingTypeDef FSMC_WriteTim;

    __HAL_RCC_GPIOB_CLK_ENABLE();           //开启GPIOB时钟
 8003276:	4b8c      	ldr	r3, [pc, #560]	; (80034a8 <LCD_Init+0x238>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	4a8b      	ldr	r2, [pc, #556]	; (80034a8 <LCD_Init+0x238>)
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	6193      	str	r3, [r2, #24]
 8003282:	4b89      	ldr	r3, [pc, #548]	; (80034a8 <LCD_Init+0x238>)
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
    GPIO_Initure.Pin=GPIO_PIN_0;            //PB0,背光控制
 800328e:	2301      	movs	r3, #1
 8003290:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
 8003292:	2301      	movs	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8003296:	2301      	movs	r3, #1
 8003298:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速
 800329a:	2303      	movs	r3, #3
 800329c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure); 
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	4619      	mov	r1, r3
 80032a4:	4881      	ldr	r0, [pc, #516]	; (80034ac <LCD_Init+0x23c>)
 80032a6:	f7fe fa8d 	bl	80017c4 <HAL_GPIO_Init>
//    FSMC_WriteTim.AddressHoldTime=0;
//    FSMC_WriteTim.DataSetupTime=0x06;               //数据保存时间为13.8ns*7个HCLK=96.6ns
//    FSMC_WriteTim.AccessMode=FSMC_ACCESS_MODE_A;    //模式A
//    HAL_SRAM_Init(&TFTSRAM_Handler,&FSMC_ReadWriteTim,&FSMC_WriteTim);

    delay_ms(50); // delay 50 ms 
 80032aa:	2032      	movs	r0, #50	; 0x32
 80032ac:	f7ff fb78 	bl	80029a0 <delay_ms>

    //尝试9341 ID的读取
    LCD_WR_REG(0XD3);
 80032b0:	20d3      	movs	r0, #211	; 0xd3
 80032b2:	f7ff fb81 	bl	80029b8 <LCD_WR_REG>
    lcddev.id = LCD_RD_DATA();          //dummy read
 80032b6:	f7ff fba7 	bl	8002a08 <LCD_RD_DATA>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	4b7c      	ldr	r3, [pc, #496]	; (80034b0 <LCD_Init+0x240>)
 80032c0:	809a      	strh	r2, [r3, #4]
    lcddev.id = LCD_RD_DATA();          //读到0X00
 80032c2:	f7ff fba1 	bl	8002a08 <LCD_RD_DATA>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b79      	ldr	r3, [pc, #484]	; (80034b0 <LCD_Init+0x240>)
 80032cc:	809a      	strh	r2, [r3, #4]
    lcddev.id = LCD_RD_DATA();          //读取0X93
 80032ce:	f7ff fb9b 	bl	8002a08 <LCD_RD_DATA>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <LCD_Init+0x240>)
 80032d8:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 80032da:	4b75      	ldr	r3, [pc, #468]	; (80034b0 <LCD_Init+0x240>)
 80032dc:	889b      	ldrh	r3, [r3, #4]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <LCD_Init+0x240>)
 80032e4:	809a      	strh	r2, [r3, #4]
    lcddev.id |= LCD_RD_DATA();         //读取0X41
 80032e6:	f7ff fb8f 	bl	8002a08 <LCD_RD_DATA>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b70      	ldr	r3, [pc, #448]	; (80034b0 <LCD_Init+0x240>)
 80032f0:	889b      	ldrh	r3, [r3, #4]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	4b6e      	ldr	r3, [pc, #440]	; (80034b0 <LCD_Init+0x240>)
 80032f8:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)            //不是 9341 , 尝试看看是不是 ST7789
 80032fa:	4b6d      	ldr	r3, [pc, #436]	; (80034b0 <LCD_Init+0x240>)
 80032fc:	889b      	ldrh	r3, [r3, #4]
 80032fe:	f249 3241 	movw	r2, #37697	; 0x9341
 8003302:	4293      	cmp	r3, r2
 8003304:	f000 80c7 	beq.w	8003496 <LCD_Init+0x226>
    {
        LCD_WR_REG(0X04);
 8003308:	2004      	movs	r0, #4
 800330a:	f7ff fb55 	bl	80029b8 <LCD_WR_REG>
        lcddev.id = LCD_RD_DATA();      //dummy read
 800330e:	f7ff fb7b 	bl	8002a08 <LCD_RD_DATA>
 8003312:	4603      	mov	r3, r0
 8003314:	461a      	mov	r2, r3
 8003316:	4b66      	ldr	r3, [pc, #408]	; (80034b0 <LCD_Init+0x240>)
 8003318:	809a      	strh	r2, [r3, #4]
        lcddev.id = LCD_RD_DATA();      //读到0X85
 800331a:	f7ff fb75 	bl	8002a08 <LCD_RD_DATA>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	4b63      	ldr	r3, [pc, #396]	; (80034b0 <LCD_Init+0x240>)
 8003324:	809a      	strh	r2, [r3, #4]
        lcddev.id = LCD_RD_DATA();      //读取0X85
 8003326:	f7ff fb6f 	bl	8002a08 <LCD_RD_DATA>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	4b60      	ldr	r3, [pc, #384]	; (80034b0 <LCD_Init+0x240>)
 8003330:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <LCD_Init+0x240>)
 8003334:	889b      	ldrh	r3, [r3, #4]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	b29a      	uxth	r2, r3
 800333a:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <LCD_Init+0x240>)
 800333c:	809a      	strh	r2, [r3, #4]
        lcddev.id |= LCD_RD_DATA();     //读取0X52
 800333e:	f7ff fb63 	bl	8002a08 <LCD_RD_DATA>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	4b5a      	ldr	r3, [pc, #360]	; (80034b0 <LCD_Init+0x240>)
 8003348:	889b      	ldrh	r3, [r3, #4]
 800334a:	4313      	orrs	r3, r2
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <LCD_Init+0x240>)
 8003350:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        //将8552的ID转换成7789
 8003352:	4b57      	ldr	r3, [pc, #348]	; (80034b0 <LCD_Init+0x240>)
 8003354:	889b      	ldrh	r3, [r3, #4]
 8003356:	f248 5252 	movw	r2, #34130	; 0x8552
 800335a:	4293      	cmp	r3, r2
 800335c:	d103      	bne.n	8003366 <LCD_Init+0xf6>
        {
            lcddev.id = 0x7789;
 800335e:	4b54      	ldr	r3, [pc, #336]	; (80034b0 <LCD_Init+0x240>)
 8003360:	f247 7289 	movw	r2, #30601	; 0x7789
 8003364:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        //也不是ST7789, 尝试是不是 NT35310
 8003366:	4b52      	ldr	r3, [pc, #328]	; (80034b0 <LCD_Init+0x240>)
 8003368:	889b      	ldrh	r3, [r3, #4]
 800336a:	f247 7289 	movw	r2, #30601	; 0x7789
 800336e:	4293      	cmp	r3, r2
 8003370:	f000 8091 	beq.w	8003496 <LCD_Init+0x226>
        {
            LCD_WR_REG(0XD4);
 8003374:	20d4      	movs	r0, #212	; 0xd4
 8003376:	f7ff fb1f 	bl	80029b8 <LCD_WR_REG>
            lcddev.id = LCD_RD_DATA();  //dummy read
 800337a:	f7ff fb45 	bl	8002a08 <LCD_RD_DATA>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <LCD_Init+0x240>)
 8003384:	809a      	strh	r2, [r3, #4]
            lcddev.id = LCD_RD_DATA();  //读回0X01
 8003386:	f7ff fb3f 	bl	8002a08 <LCD_RD_DATA>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	4b48      	ldr	r3, [pc, #288]	; (80034b0 <LCD_Init+0x240>)
 8003390:	809a      	strh	r2, [r3, #4]
            lcddev.id = LCD_RD_DATA();  //读回0X53
 8003392:	f7ff fb39 	bl	8002a08 <LCD_RD_DATA>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	4b45      	ldr	r3, [pc, #276]	; (80034b0 <LCD_Init+0x240>)
 800339c:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 800339e:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <LCD_Init+0x240>)
 80033a0:	889b      	ldrh	r3, [r3, #4]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	4b42      	ldr	r3, [pc, #264]	; (80034b0 <LCD_Init+0x240>)
 80033a8:	809a      	strh	r2, [r3, #4]
            lcddev.id |= LCD_RD_DATA(); //这里读回0X10
 80033aa:	f7ff fb2d 	bl	8002a08 <LCD_RD_DATA>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b3f      	ldr	r3, [pc, #252]	; (80034b0 <LCD_Init+0x240>)
 80033b4:	889b      	ldrh	r3, [r3, #4]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <LCD_Init+0x240>)
 80033bc:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0X5310)    //也不是NT35310,尝试看看是不是NT35510
 80033be:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <LCD_Init+0x240>)
 80033c0:	889b      	ldrh	r3, [r3, #4]
 80033c2:	f245 3210 	movw	r2, #21264	; 0x5310
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d065      	beq.n	8003496 <LCD_Init+0x226>
            {
                //发送秘钥（厂家提供,照搬即可）
                LCD_WriteReg(0xF000, 0x0055);
 80033ca:	2155      	movs	r1, #85	; 0x55
 80033cc:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80033d0:	f7ff fb2a 	bl	8002a28 <LCD_WriteReg>
                LCD_WriteReg(0xF001, 0x00AA);
 80033d4:	21aa      	movs	r1, #170	; 0xaa
 80033d6:	f24f 0001 	movw	r0, #61441	; 0xf001
 80033da:	f7ff fb25 	bl	8002a28 <LCD_WriteReg>
                LCD_WriteReg(0xF002, 0x0052);
 80033de:	2152      	movs	r1, #82	; 0x52
 80033e0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80033e4:	f7ff fb20 	bl	8002a28 <LCD_WriteReg>
                LCD_WriteReg(0xF003, 0x0008);
 80033e8:	2108      	movs	r1, #8
 80033ea:	f24f 0003 	movw	r0, #61443	; 0xf003
 80033ee:	f7ff fb1b 	bl	8002a28 <LCD_WriteReg>
                LCD_WriteReg(0xF004, 0x0001);
 80033f2:	2101      	movs	r1, #1
 80033f4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80033f8:	f7ff fb16 	bl	8002a28 <LCD_WriteReg>

                LCD_WR_REG(0xC500);             //读取ID高8位
 80033fc:	f44f 4045 	mov.w	r0, #50432	; 0xc500
 8003400:	f7ff fada 	bl	80029b8 <LCD_WR_REG>
                lcddev.id = LCD_RD_DATA();      //读回0X55
 8003404:	f7ff fb00 	bl	8002a08 <LCD_RD_DATA>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <LCD_Init+0x240>)
 800340e:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <LCD_Init+0x240>)
 8003412:	889b      	ldrh	r3, [r3, #4]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	b29a      	uxth	r2, r3
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <LCD_Init+0x240>)
 800341a:	809a      	strh	r2, [r3, #4]

                LCD_WR_REG(0xC501);             //读取ID低8位
 800341c:	f24c 5001 	movw	r0, #50433	; 0xc501
 8003420:	f7ff faca 	bl	80029b8 <LCD_WR_REG>
                lcddev.id |= LCD_RD_DATA();     //读回0X10
 8003424:	f7ff faf0 	bl	8002a08 <LCD_RD_DATA>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <LCD_Init+0x240>)
 800342e:	889b      	ldrh	r3, [r3, #4]
 8003430:	4313      	orrs	r3, r2
 8003432:	b29a      	uxth	r2, r3
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <LCD_Init+0x240>)
 8003436:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0X5510)        //也不是NT5510,尝试看看是不是SSD1963
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <LCD_Init+0x240>)
 800343a:	889b      	ldrh	r3, [r3, #4]
 800343c:	f245 5210 	movw	r2, #21776	; 0x5510
 8003440:	4293      	cmp	r3, r2
 8003442:	d028      	beq.n	8003496 <LCD_Init+0x226>
                {
                    LCD_WR_REG(0XA1);
 8003444:	20a1      	movs	r0, #161	; 0xa1
 8003446:	f7ff fab7 	bl	80029b8 <LCD_WR_REG>
                    lcddev.id = LCD_RD_DATA();
 800344a:	f7ff fadd 	bl	8002a08 <LCD_RD_DATA>
 800344e:	4603      	mov	r3, r0
 8003450:	461a      	mov	r2, r3
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <LCD_Init+0x240>)
 8003454:	809a      	strh	r2, [r3, #4]
                    lcddev.id = LCD_RD_DATA();  //读回0X57
 8003456:	f7ff fad7 	bl	8002a08 <LCD_RD_DATA>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <LCD_Init+0x240>)
 8003460:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8003462:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <LCD_Init+0x240>)
 8003464:	889b      	ldrh	r3, [r3, #4]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	b29a      	uxth	r2, r3
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <LCD_Init+0x240>)
 800346c:	809a      	strh	r2, [r3, #4]
                    lcddev.id |= LCD_RD_DATA(); //读回0X61
 800346e:	f7ff facb 	bl	8002a08 <LCD_RD_DATA>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <LCD_Init+0x240>)
 8003478:	889b      	ldrh	r3, [r3, #4]
 800347a:	4313      	orrs	r3, r2
 800347c:	b29a      	uxth	r2, r3
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <LCD_Init+0x240>)
 8003480:	809a      	strh	r2, [r3, #4]

                    if (lcddev.id == 0X5761)lcddev.id = 0X1963; //SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <LCD_Init+0x240>)
 8003484:	889b      	ldrh	r3, [r3, #4]
 8003486:	f245 7261 	movw	r2, #22369	; 0x5761
 800348a:	4293      	cmp	r3, r2
 800348c:	d103      	bne.n	8003496 <LCD_Init+0x226>
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <LCD_Init+0x240>)
 8003490:	f641 1263 	movw	r2, #6499	; 0x1963
 8003494:	809a      	strh	r2, [r3, #4]
        }
    }

    //printf(" LCD ID:%x\r\n", lcddev.id); //打印LCD ID

    if (lcddev.id == 0X9341)    //9341初始化
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <LCD_Init+0x240>)
 8003498:	889b      	ldrh	r3, [r3, #4]
 800349a:	f249 3241 	movw	r2, #37697	; 0x9341
 800349e:	4293      	cmp	r3, r2
 80034a0:	f040 811e 	bne.w	80036e0 <LCD_Init+0x470>
 80034a4:	e006      	b.n	80034b4 <LCD_Init+0x244>
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40010c00 	.word	0x40010c00
 80034b0:	200002a0 	.word	0x200002a0
    {
        LCD_WR_REG(0xCF);
 80034b4:	20cf      	movs	r0, #207	; 0xcf
 80034b6:	f7ff fa7f 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7ff fa90 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC1);
 80034c0:	20c1      	movs	r0, #193	; 0xc1
 80034c2:	f7ff fa8d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0X30);
 80034c6:	2030      	movs	r0, #48	; 0x30
 80034c8:	f7ff fa8a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xED);
 80034cc:	20ed      	movs	r0, #237	; 0xed
 80034ce:	f7ff fa73 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x64);
 80034d2:	2064      	movs	r0, #100	; 0x64
 80034d4:	f7ff fa84 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 80034d8:	2003      	movs	r0, #3
 80034da:	f7ff fa81 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0X12);
 80034de:	2012      	movs	r0, #18
 80034e0:	f7ff fa7e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0X81);
 80034e4:	2081      	movs	r0, #129	; 0x81
 80034e6:	f7ff fa7b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xE8);
 80034ea:	20e8      	movs	r0, #232	; 0xe8
 80034ec:	f7ff fa64 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x85);
 80034f0:	2085      	movs	r0, #133	; 0x85
 80034f2:	f7ff fa75 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 80034f6:	2010      	movs	r0, #16
 80034f8:	f7ff fa72 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 80034fc:	207a      	movs	r0, #122	; 0x7a
 80034fe:	f7ff fa6f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xCB);
 8003502:	20cb      	movs	r0, #203	; 0xcb
 8003504:	f7ff fa58 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x39);
 8003508:	2039      	movs	r0, #57	; 0x39
 800350a:	f7ff fa69 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 800350e:	202c      	movs	r0, #44	; 0x2c
 8003510:	f7ff fa66 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003514:	2000      	movs	r0, #0
 8003516:	f7ff fa63 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 800351a:	2034      	movs	r0, #52	; 0x34
 800351c:	f7ff fa60 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8003520:	2002      	movs	r0, #2
 8003522:	f7ff fa5d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xF7);
 8003526:	20f7      	movs	r0, #247	; 0xf7
 8003528:	f7ff fa46 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);
 800352c:	2020      	movs	r0, #32
 800352e:	f7ff fa57 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xEA);
 8003532:	20ea      	movs	r0, #234	; 0xea
 8003534:	f7ff fa40 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003538:	2000      	movs	r0, #0
 800353a:	f7ff fa51 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800353e:	2000      	movs	r0, #0
 8003540:	f7ff fa4e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xC0);       //Power control
 8003544:	20c0      	movs	r0, #192	; 0xc0
 8003546:	f7ff fa37 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x1B);      //VRH[5:0]
 800354a:	201b      	movs	r0, #27
 800354c:	f7ff fa48 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xC1);       //Power control
 8003550:	20c1      	movs	r0, #193	; 0xc1
 8003552:	f7ff fa31 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);      //SAP[2:0];BT[3:0]
 8003556:	2001      	movs	r0, #1
 8003558:	f7ff fa42 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xC5);       //VCM control
 800355c:	20c5      	movs	r0, #197	; 0xc5
 800355e:	f7ff fa2b 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x30);      //3F
 8003562:	2030      	movs	r0, #48	; 0x30
 8003564:	f7ff fa3c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x30);      //3C
 8003568:	2030      	movs	r0, #48	; 0x30
 800356a:	f7ff fa39 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xC7);       //VCM control2
 800356e:	20c7      	movs	r0, #199	; 0xc7
 8003570:	f7ff fa22 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0XB7);
 8003574:	20b7      	movs	r0, #183	; 0xb7
 8003576:	f7ff fa33 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0x36);       // Memory Access Control
 800357a:	2036      	movs	r0, #54	; 0x36
 800357c:	f7ff fa1c 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x48);
 8003580:	2048      	movs	r0, #72	; 0x48
 8003582:	f7ff fa2d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0x3A);
 8003586:	203a      	movs	r0, #58	; 0x3a
 8003588:	f7ff fa16 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x55);
 800358c:	2055      	movs	r0, #85	; 0x55
 800358e:	f7ff fa27 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xB1);
 8003592:	20b1      	movs	r0, #177	; 0xb1
 8003594:	f7ff fa10 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003598:	2000      	movs	r0, #0
 800359a:	f7ff fa21 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1A);
 800359e:	201a      	movs	r0, #26
 80035a0:	f7ff fa1e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xB6);       // Display Function Control
 80035a4:	20b6      	movs	r0, #182	; 0xb6
 80035a6:	f7ff fa07 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x0A);
 80035aa:	200a      	movs	r0, #10
 80035ac:	f7ff fa18 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 80035b0:	20a2      	movs	r0, #162	; 0xa2
 80035b2:	f7ff fa15 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xF2);       // 3Gamma Function Disable
 80035b6:	20f2      	movs	r0, #242	; 0xf2
 80035b8:	f7ff f9fe 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7ff fa0f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0x26);       //Gamma curve selected
 80035c2:	2026      	movs	r0, #38	; 0x26
 80035c4:	f7ff f9f8 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 80035c8:	2001      	movs	r0, #1
 80035ca:	f7ff fa09 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xE0);       //Set Gamma
 80035ce:	20e0      	movs	r0, #224	; 0xe0
 80035d0:	f7ff f9f2 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x0F);
 80035d4:	200f      	movs	r0, #15
 80035d6:	f7ff fa03 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 80035da:	202a      	movs	r0, #42	; 0x2a
 80035dc:	f7ff fa00 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 80035e0:	2028      	movs	r0, #40	; 0x28
 80035e2:	f7ff f9fd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 80035e6:	2008      	movs	r0, #8
 80035e8:	f7ff f9fa 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0E);
 80035ec:	200e      	movs	r0, #14
 80035ee:	f7ff f9f7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 80035f2:	2008      	movs	r0, #8
 80035f4:	f7ff f9f4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 80035f8:	2054      	movs	r0, #84	; 0x54
 80035fa:	f7ff f9f1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0XA9);
 80035fe:	20a9      	movs	r0, #169	; 0xa9
 8003600:	f7ff f9ee 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 8003604:	2043      	movs	r0, #67	; 0x43
 8003606:	f7ff f9eb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0A);
 800360a:	200a      	movs	r0, #10
 800360c:	f7ff f9e8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 8003610:	200f      	movs	r0, #15
 8003612:	f7ff f9e5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003616:	2000      	movs	r0, #0
 8003618:	f7ff f9e2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800361c:	2000      	movs	r0, #0
 800361e:	f7ff f9df 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003622:	2000      	movs	r0, #0
 8003624:	f7ff f9dc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003628:	2000      	movs	r0, #0
 800362a:	f7ff f9d9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0XE1);       //Set Gamma
 800362e:	20e1      	movs	r0, #225	; 0xe1
 8003630:	f7ff f9c2 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003634:	2000      	movs	r0, #0
 8003636:	f7ff f9d3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x15);
 800363a:	2015      	movs	r0, #21
 800363c:	f7ff f9d0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8003640:	2017      	movs	r0, #23
 8003642:	f7ff f9cd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 8003646:	2007      	movs	r0, #7
 8003648:	f7ff f9ca 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 800364c:	2011      	movs	r0, #17
 800364e:	f7ff f9c7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x06);
 8003652:	2006      	movs	r0, #6
 8003654:	f7ff f9c4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2B);
 8003658:	202b      	movs	r0, #43	; 0x2b
 800365a:	f7ff f9c1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 800365e:	2056      	movs	r0, #86	; 0x56
 8003660:	f7ff f9be 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 8003664:	203c      	movs	r0, #60	; 0x3c
 8003666:	f7ff f9bb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 800366a:	2005      	movs	r0, #5
 800366c:	f7ff f9b8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 8003670:	2010      	movs	r0, #16
 8003672:	f7ff f9b5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 8003676:	200f      	movs	r0, #15
 8003678:	f7ff f9b2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 800367c:	203f      	movs	r0, #63	; 0x3f
 800367e:	f7ff f9af 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 8003682:	203f      	movs	r0, #63	; 0x3f
 8003684:	f7ff f9ac 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 8003688:	200f      	movs	r0, #15
 800368a:	f7ff f9a9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0x2B);
 800368e:	202b      	movs	r0, #43	; 0x2b
 8003690:	f7ff f992 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003694:	2000      	movs	r0, #0
 8003696:	f7ff f9a3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800369a:	2000      	movs	r0, #0
 800369c:	f7ff f9a0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 80036a0:	2001      	movs	r0, #1
 80036a2:	f7ff f99d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3f);
 80036a6:	203f      	movs	r0, #63	; 0x3f
 80036a8:	f7ff f99a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0x2A);
 80036ac:	202a      	movs	r0, #42	; 0x2a
 80036ae:	f7ff f983 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f7ff f994 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80036b8:	2000      	movs	r0, #0
 80036ba:	f7ff f991 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80036be:	2000      	movs	r0, #0
 80036c0:	f7ff f98e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xef);
 80036c4:	20ef      	movs	r0, #239	; 0xef
 80036c6:	f7ff f98b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0x11);       //Exit Sleep
 80036ca:	2011      	movs	r0, #17
 80036cc:	f7ff f974 	bl	80029b8 <LCD_WR_REG>
        delay_ms(120);
 80036d0:	2078      	movs	r0, #120	; 0x78
 80036d2:	f7ff f965 	bl	80029a0 <delay_ms>
        LCD_WR_REG(0x29);       //display on
 80036d6:	2029      	movs	r0, #41	; 0x29
 80036d8:	f7ff f96e 	bl	80029b8 <LCD_WR_REG>
 80036dc:	f002 b8a8 	b.w	8005830 <LCD_Init+0x25c0>
    }
    else if (lcddev.id == 0x7789)   //7789初始化
 80036e0:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <LCD_Init+0x628>)
 80036e2:	889b      	ldrh	r3, [r3, #4]
 80036e4:	f247 7289 	movw	r2, #30601	; 0x7789
 80036e8:	4293      	cmp	r3, r2
 80036ea:	f040 80d7 	bne.w	800389c <LCD_Init+0x62c>
    {
        LCD_WR_REG(0x11);
 80036ee:	2011      	movs	r0, #17
 80036f0:	f7ff f962 	bl	80029b8 <LCD_WR_REG>

        delay_ms(120);
 80036f4:	2078      	movs	r0, #120	; 0x78
 80036f6:	f7ff f953 	bl	80029a0 <delay_ms>

        LCD_WR_REG(0x36);
 80036fa:	2036      	movs	r0, #54	; 0x36
 80036fc:	f7ff f95c 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003700:	2000      	movs	r0, #0
 8003702:	f7ff f96d 	bl	80029e0 <LCD_WR_DATA>


        LCD_WR_REG(0x3A);
 8003706:	203a      	movs	r0, #58	; 0x3a
 8003708:	f7ff f956 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0X05);
 800370c:	2005      	movs	r0, #5
 800370e:	f7ff f967 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB2);
 8003712:	20b2      	movs	r0, #178	; 0xb2
 8003714:	f7ff f950 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x0C);
 8003718:	200c      	movs	r0, #12
 800371a:	f7ff f961 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0C);
 800371e:	200c      	movs	r0, #12
 8003720:	f7ff f95e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003724:	2000      	movs	r0, #0
 8003726:	f7ff f95b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 800372a:	2033      	movs	r0, #51	; 0x33
 800372c:	f7ff f958 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 8003730:	2033      	movs	r0, #51	; 0x33
 8003732:	f7ff f955 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB7);
 8003736:	20b7      	movs	r0, #183	; 0xb7
 8003738:	f7ff f93e 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x35);
 800373c:	2035      	movs	r0, #53	; 0x35
 800373e:	f7ff f94f 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xBB);       //vcom
 8003742:	20bb      	movs	r0, #187	; 0xbb
 8003744:	f7ff f938 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x32);      //30
 8003748:	2032      	movs	r0, #50	; 0x32
 800374a:	f7ff f949 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC0);
 800374e:	20c0      	movs	r0, #192	; 0xc0
 8003750:	f7ff f932 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x0C);
 8003754:	200c      	movs	r0, #12
 8003756:	f7ff f943 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC2);
 800375a:	20c2      	movs	r0, #194	; 0xc2
 800375c:	f7ff f92c 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 8003760:	2001      	movs	r0, #1
 8003762:	f7ff f93d 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC3);       //vrh
 8003766:	20c3      	movs	r0, #195	; 0xc3
 8003768:	f7ff f926 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x10);      //17 0D
 800376c:	2010      	movs	r0, #16
 800376e:	f7ff f937 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC4);       //vdv
 8003772:	20c4      	movs	r0, #196	; 0xc4
 8003774:	f7ff f920 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);      //20
 8003778:	2020      	movs	r0, #32
 800377a:	f7ff f931 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC6);
 800377e:	20c6      	movs	r0, #198	; 0xc6
 8003780:	f7ff f91a 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x0f);
 8003784:	200f      	movs	r0, #15
 8003786:	f7ff f92b 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xD0);
 800378a:	20d0      	movs	r0, #208	; 0xd0
 800378c:	f7ff f914 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0xA4);
 8003790:	20a4      	movs	r0, #164	; 0xa4
 8003792:	f7ff f925 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA1);
 8003796:	20a1      	movs	r0, #161	; 0xa1
 8003798:	f7ff f922 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xE0);       //Set Gamma
 800379c:	20e0      	movs	r0, #224	; 0xe0
 800379e:	f7ff f90b 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0xd0);
 80037a2:	20d0      	movs	r0, #208	; 0xd0
 80037a4:	f7ff f91c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7ff f919 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 80037ae:	2002      	movs	r0, #2
 80037b0:	f7ff f916 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 80037b4:	2007      	movs	r0, #7
 80037b6:	f7ff f913 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0a);
 80037ba:	200a      	movs	r0, #10
 80037bc:	f7ff f910 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 80037c0:	2028      	movs	r0, #40	; 0x28
 80037c2:	f7ff f90d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 80037c6:	2032      	movs	r0, #50	; 0x32
 80037c8:	f7ff f90a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0X44);
 80037cc:	2044      	movs	r0, #68	; 0x44
 80037ce:	f7ff f907 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x42);
 80037d2:	2042      	movs	r0, #66	; 0x42
 80037d4:	f7ff f904 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x06);
 80037d8:	2006      	movs	r0, #6
 80037da:	f7ff f901 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0e);
 80037de:	200e      	movs	r0, #14
 80037e0:	f7ff f8fe 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x12);
 80037e4:	2012      	movs	r0, #18
 80037e6:	f7ff f8fb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x14);
 80037ea:	2014      	movs	r0, #20
 80037ec:	f7ff f8f8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 80037f0:	2017      	movs	r0, #23
 80037f2:	f7ff f8f5 	bl	80029e0 <LCD_WR_DATA>


        LCD_WR_REG(0XE1);       //Set Gamma
 80037f6:	20e1      	movs	r0, #225	; 0xe1
 80037f8:	f7ff f8de 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0xd0);
 80037fc:	20d0      	movs	r0, #208	; 0xd0
 80037fe:	f7ff f8ef 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003802:	2000      	movs	r0, #0
 8003804:	f7ff f8ec 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8003808:	2002      	movs	r0, #2
 800380a:	f7ff f8e9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 800380e:	2007      	movs	r0, #7
 8003810:	f7ff f8e6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0a);
 8003814:	200a      	movs	r0, #10
 8003816:	f7ff f8e3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 800381a:	2028      	movs	r0, #40	; 0x28
 800381c:	f7ff f8e0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x31);
 8003820:	2031      	movs	r0, #49	; 0x31
 8003822:	f7ff f8dd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 8003826:	2054      	movs	r0, #84	; 0x54
 8003828:	f7ff f8da 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x47);
 800382c:	2047      	movs	r0, #71	; 0x47
 800382e:	f7ff f8d7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0e);
 8003832:	200e      	movs	r0, #14
 8003834:	f7ff f8d4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1c);
 8003838:	201c      	movs	r0, #28
 800383a:	f7ff f8d1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 800383e:	2017      	movs	r0, #23
 8003840:	f7ff f8ce 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1b);
 8003844:	201b      	movs	r0, #27
 8003846:	f7ff f8cb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1e);
 800384a:	201e      	movs	r0, #30
 800384c:	f7ff f8c8 	bl	80029e0 <LCD_WR_DATA>


        LCD_WR_REG(0x2A);
 8003850:	202a      	movs	r0, #42	; 0x2a
 8003852:	f7ff f8b1 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003856:	2000      	movs	r0, #0
 8003858:	f7ff f8c2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800385c:	2000      	movs	r0, #0
 800385e:	f7ff f8bf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003862:	2000      	movs	r0, #0
 8003864:	f7ff f8bc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xef);
 8003868:	20ef      	movs	r0, #239	; 0xef
 800386a:	f7ff f8b9 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0x2B);
 800386e:	202b      	movs	r0, #43	; 0x2b
 8003870:	f7ff f8a2 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003874:	2000      	movs	r0, #0
 8003876:	f7ff f8b3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800387a:	2000      	movs	r0, #0
 800387c:	f7ff f8b0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 8003880:	2001      	movs	r0, #1
 8003882:	f7ff f8ad 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3f);
 8003886:	203f      	movs	r0, #63	; 0x3f
 8003888:	f7ff f8aa 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0x29);       //display on
 800388c:	2029      	movs	r0, #41	; 0x29
 800388e:	f7ff f893 	bl	80029b8 <LCD_WR_REG>
 8003892:	f001 bfcd 	b.w	8005830 <LCD_Init+0x25c0>
 8003896:	bf00      	nop
 8003898:	200002a0 	.word	0x200002a0
    }
    else if (lcddev.id == 0x5310)
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <LCD_Init+0x63c>)
 800389e:	889b      	ldrh	r3, [r3, #4]
 80038a0:	f245 3210 	movw	r2, #21264	; 0x5310
 80038a4:	4293      	cmp	r3, r2
 80038a6:	f040 877c 	bne.w	80047a2 <LCD_Init+0x1532>
 80038aa:	e001      	b.n	80038b0 <LCD_Init+0x640>
 80038ac:	200002a0 	.word	0x200002a0
    {
        LCD_WR_REG(0xED);
 80038b0:	20ed      	movs	r0, #237	; 0xed
 80038b2:	f7ff f881 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 80038b6:	2001      	movs	r0, #1
 80038b8:	f7ff f892 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);
 80038bc:	20fe      	movs	r0, #254	; 0xfe
 80038be:	f7ff f88f 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xEE);
 80038c2:	20ee      	movs	r0, #238	; 0xee
 80038c4:	f7ff f878 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0xDE);
 80038c8:	20de      	movs	r0, #222	; 0xde
 80038ca:	f7ff f889 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 80038ce:	2021      	movs	r0, #33	; 0x21
 80038d0:	f7ff f886 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xF1);
 80038d4:	20f1      	movs	r0, #241	; 0xf1
 80038d6:	f7ff f86f 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 80038da:	2001      	movs	r0, #1
 80038dc:	f7ff f880 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xDF);
 80038e0:	20df      	movs	r0, #223	; 0xdf
 80038e2:	f7ff f869 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x10);
 80038e6:	2010      	movs	r0, #16
 80038e8:	f7ff f87a 	bl	80029e0 <LCD_WR_DATA>

        //VCOMvoltage//
        LCD_WR_REG(0xC4);
 80038ec:	20c4      	movs	r0, #196	; 0xc4
 80038ee:	f7ff f863 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x8F);      //5f
 80038f2:	208f      	movs	r0, #143	; 0x8f
 80038f4:	f7ff f874 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC6);
 80038f8:	20c6      	movs	r0, #198	; 0xc6
 80038fa:	f7ff f85d 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80038fe:	2000      	movs	r0, #0
 8003900:	f7ff f86e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 8003904:	20e2      	movs	r0, #226	; 0xe2
 8003906:	f7ff f86b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 800390a:	20e2      	movs	r0, #226	; 0xe2
 800390c:	f7ff f868 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 8003910:	20e2      	movs	r0, #226	; 0xe2
 8003912:	f7ff f865 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xBF);
 8003916:	20bf      	movs	r0, #191	; 0xbf
 8003918:	f7ff f84e 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0xAA);
 800391c:	20aa      	movs	r0, #170	; 0xaa
 800391e:	f7ff f85f 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB0);
 8003922:	20b0      	movs	r0, #176	; 0xb0
 8003924:	f7ff f848 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x0D);
 8003928:	200d      	movs	r0, #13
 800392a:	f7ff f859 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800392e:	2000      	movs	r0, #0
 8003930:	f7ff f856 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0D);
 8003934:	200d      	movs	r0, #13
 8003936:	f7ff f853 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800393a:	2000      	movs	r0, #0
 800393c:	f7ff f850 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 8003940:	2011      	movs	r0, #17
 8003942:	f7ff f84d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003946:	2000      	movs	r0, #0
 8003948:	f7ff f84a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x19);
 800394c:	2019      	movs	r0, #25
 800394e:	f7ff f847 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003952:	2000      	movs	r0, #0
 8003954:	f7ff f844 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 8003958:	2021      	movs	r0, #33	; 0x21
 800395a:	f7ff f841 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800395e:	2000      	movs	r0, #0
 8003960:	f7ff f83e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2D);
 8003964:	202d      	movs	r0, #45	; 0x2d
 8003966:	f7ff f83b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800396a:	2000      	movs	r0, #0
 800396c:	f7ff f838 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3D);
 8003970:	203d      	movs	r0, #61	; 0x3d
 8003972:	f7ff f835 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003976:	2000      	movs	r0, #0
 8003978:	f7ff f832 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 800397c:	205d      	movs	r0, #93	; 0x5d
 800397e:	f7ff f82f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003982:	2000      	movs	r0, #0
 8003984:	f7ff f82c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 8003988:	205d      	movs	r0, #93	; 0x5d
 800398a:	f7ff f829 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800398e:	2000      	movs	r0, #0
 8003990:	f7ff f826 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB1);
 8003994:	20b1      	movs	r0, #177	; 0xb1
 8003996:	f7ff f80f 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x80);
 800399a:	2080      	movs	r0, #128	; 0x80
 800399c:	f7ff f820 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7ff f81d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 80039a6:	208b      	movs	r0, #139	; 0x8b
 80039a8:	f7ff f81a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7ff f817 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 80039b2:	2096      	movs	r0, #150	; 0x96
 80039b4:	f7ff f814 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f7ff f811 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB2);
 80039be:	20b2      	movs	r0, #178	; 0xb2
 80039c0:	f7fe fffa 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80039c4:	2000      	movs	r0, #0
 80039c6:	f7ff f80b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f7ff f808 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 80039d0:	2002      	movs	r0, #2
 80039d2:	f7ff f805 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7ff f802 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 80039dc:	2003      	movs	r0, #3
 80039de:	f7fe ffff 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fe fffc 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB3);
 80039e8:	20b3      	movs	r0, #179	; 0xb3
 80039ea:	f7fe ffe5 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80039ee:	2000      	movs	r0, #0
 80039f0:	f7fe fff6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80039f4:	2000      	movs	r0, #0
 80039f6:	f7fe fff3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f7fe fff0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a00:	2000      	movs	r0, #0
 8003a02:	f7fe ffed 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a06:	2000      	movs	r0, #0
 8003a08:	f7fe ffea 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f7fe ffe7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7fe ffe4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f7fe ffe1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7fe ffde 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a24:	2000      	movs	r0, #0
 8003a26:	f7fe ffdb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fe ffd8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a30:	2000      	movs	r0, #0
 8003a32:	f7fe ffd5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7fe ffd2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f7fe ffcf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a42:	2000      	movs	r0, #0
 8003a44:	f7fe ffcc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f7fe ffc9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7fe ffc6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a54:	2000      	movs	r0, #0
 8003a56:	f7fe ffc3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fe ffc0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a60:	2000      	movs	r0, #0
 8003a62:	f7fe ffbd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7fe ffba 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7fe ffb7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a72:	2000      	movs	r0, #0
 8003a74:	f7fe ffb4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f7fe ffb1 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB4);
 8003a7e:	20b4      	movs	r0, #180	; 0xb4
 8003a80:	f7fe ff9a 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x8B);
 8003a84:	208b      	movs	r0, #139	; 0x8b
 8003a86:	f7fe ffab 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7fe ffa8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 8003a90:	2096      	movs	r0, #150	; 0x96
 8003a92:	f7fe ffa5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a96:	2000      	movs	r0, #0
 8003a98:	f7fe ffa2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA1);
 8003a9c:	20a1      	movs	r0, #161	; 0xa1
 8003a9e:	f7fe ff9f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f7fe ff9c 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB5);
 8003aa8:	20b5      	movs	r0, #181	; 0xb5
 8003aaa:	f7fe ff85 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x02);
 8003aae:	2002      	movs	r0, #2
 8003ab0:	f7fe ff96 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7fe ff93 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 8003aba:	2003      	movs	r0, #3
 8003abc:	f7fe ff90 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f7fe ff8d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 8003ac6:	2004      	movs	r0, #4
 8003ac8:	f7fe ff8a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7fe ff87 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB6);
 8003ad2:	20b6      	movs	r0, #182	; 0xb6
 8003ad4:	f7fe ff70 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f7fe ff81 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f7fe ff7e 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB7);
 8003ae4:	20b7      	movs	r0, #183	; 0xb7
 8003ae6:	f7fe ff67 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003aea:	2000      	movs	r0, #0
 8003aec:	f7fe ff78 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f7fe ff75 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 8003af6:	203f      	movs	r0, #63	; 0x3f
 8003af8:	f7fe ff72 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7fe ff6f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5E);
 8003b02:	205e      	movs	r0, #94	; 0x5e
 8003b04:	f7fe ff6c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f7fe ff69 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 8003b0e:	2064      	movs	r0, #100	; 0x64
 8003b10:	f7fe ff66 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b14:	2000      	movs	r0, #0
 8003b16:	f7fe ff63 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8C);
 8003b1a:	208c      	movs	r0, #140	; 0x8c
 8003b1c:	f7fe ff60 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7fe ff5d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xAC);
 8003b26:	20ac      	movs	r0, #172	; 0xac
 8003b28:	f7fe ff5a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7fe ff57 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 8003b32:	20dc      	movs	r0, #220	; 0xdc
 8003b34:	f7fe ff54 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7fe ff51 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x70);
 8003b3e:	2070      	movs	r0, #112	; 0x70
 8003b40:	f7fe ff4e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7fe ff4b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x90);
 8003b4a:	2090      	movs	r0, #144	; 0x90
 8003b4c:	f7fe ff48 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fe ff45 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xEB);
 8003b56:	20eb      	movs	r0, #235	; 0xeb
 8003b58:	f7fe ff42 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7fe ff3f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 8003b62:	20dc      	movs	r0, #220	; 0xdc
 8003b64:	f7fe ff3c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f7fe ff39 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB8);
 8003b6e:	20b8      	movs	r0, #184	; 0xb8
 8003b70:	f7fe ff22 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7fe ff33 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f7fe ff30 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b80:	2000      	movs	r0, #0
 8003b82:	f7fe ff2d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b86:	2000      	movs	r0, #0
 8003b88:	f7fe ff2a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7fe ff27 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b92:	2000      	movs	r0, #0
 8003b94:	f7fe ff24 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f7fe ff21 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f7fe ff1e 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xBA);
 8003ba4:	20ba      	movs	r0, #186	; 0xba
 8003ba6:	f7fe ff07 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x24);
 8003baa:	2024      	movs	r0, #36	; 0x24
 8003bac:	f7fe ff18 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f7fe ff15 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f7fe ff12 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f7fe ff0f 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC1);
 8003bc2:	20c1      	movs	r0, #193	; 0xc1
 8003bc4:	f7fe fef8 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);
 8003bc8:	2020      	movs	r0, #32
 8003bca:	f7fe ff09 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fe ff06 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 8003bd4:	2054      	movs	r0, #84	; 0x54
 8003bd6:	f7fe ff03 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7fe ff00 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 8003be0:	20ff      	movs	r0, #255	; 0xff
 8003be2:	f7fe fefd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7fe fefa 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC2);
 8003bec:	20c2      	movs	r0, #194	; 0xc2
 8003bee:	f7fe fee3 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x0A);
 8003bf2:	200a      	movs	r0, #10
 8003bf4:	f7fe fef4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f7fe fef1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 8003bfe:	2004      	movs	r0, #4
 8003c00:	f7fe feee 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7fe feeb 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC3);
 8003c0a:	20c3      	movs	r0, #195	; 0xc3
 8003c0c:	f7fe fed4 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x3C);
 8003c10:	203c      	movs	r0, #60	; 0x3c
 8003c12:	f7fe fee5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c16:	2000      	movs	r0, #0
 8003c18:	f7fe fee2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3A);
 8003c1c:	203a      	movs	r0, #58	; 0x3a
 8003c1e:	f7fe fedf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c22:	2000      	movs	r0, #0
 8003c24:	f7fe fedc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x39);
 8003c28:	2039      	movs	r0, #57	; 0x39
 8003c2a:	f7fe fed9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c2e:	2000      	movs	r0, #0
 8003c30:	f7fe fed6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x37);
 8003c34:	2037      	movs	r0, #55	; 0x37
 8003c36:	f7fe fed3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7fe fed0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 8003c40:	203c      	movs	r0, #60	; 0x3c
 8003c42:	f7fe fecd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c46:	2000      	movs	r0, #0
 8003c48:	f7fe feca 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 8003c4c:	2036      	movs	r0, #54	; 0x36
 8003c4e:	f7fe fec7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7fe fec4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 8003c58:	2032      	movs	r0, #50	; 0x32
 8003c5a:	f7fe fec1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c5e:	2000      	movs	r0, #0
 8003c60:	f7fe febe 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 8003c64:	202f      	movs	r0, #47	; 0x2f
 8003c66:	f7fe febb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f7fe feb8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 8003c70:	202c      	movs	r0, #44	; 0x2c
 8003c72:	f7fe feb5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7fe feb2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 8003c7c:	2029      	movs	r0, #41	; 0x29
 8003c7e:	f7fe feaf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f7fe feac 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 8003c88:	2026      	movs	r0, #38	; 0x26
 8003c8a:	f7fe fea9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f7fe fea6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 8003c94:	2024      	movs	r0, #36	; 0x24
 8003c96:	f7fe fea3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f7fe fea0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 8003ca0:	2024      	movs	r0, #36	; 0x24
 8003ca2:	f7fe fe9d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f7fe fe9a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 8003cac:	2023      	movs	r0, #35	; 0x23
 8003cae:	f7fe fe97 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fe fe94 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 8003cb8:	203c      	movs	r0, #60	; 0x3c
 8003cba:	f7fe fe91 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f7fe fe8e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 8003cc4:	2036      	movs	r0, #54	; 0x36
 8003cc6:	f7fe fe8b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7fe fe88 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 8003cd0:	2032      	movs	r0, #50	; 0x32
 8003cd2:	f7fe fe85 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f7fe fe82 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 8003cdc:	202f      	movs	r0, #47	; 0x2f
 8003cde:	f7fe fe7f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7fe fe7c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 8003ce8:	202c      	movs	r0, #44	; 0x2c
 8003cea:	f7fe fe79 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fe fe76 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 8003cf4:	2029      	movs	r0, #41	; 0x29
 8003cf6:	f7fe fe73 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fe fe70 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 8003d00:	2026      	movs	r0, #38	; 0x26
 8003d02:	f7fe fe6d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7fe fe6a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 8003d0c:	2024      	movs	r0, #36	; 0x24
 8003d0e:	f7fe fe67 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7fe fe64 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 8003d18:	2024      	movs	r0, #36	; 0x24
 8003d1a:	f7fe fe61 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f7fe fe5e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 8003d24:	2023      	movs	r0, #35	; 0x23
 8003d26:	f7fe fe5b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f7fe fe58 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC4);
 8003d30:	20c4      	movs	r0, #196	; 0xc4
 8003d32:	f7fe fe41 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x62);
 8003d36:	2062      	movs	r0, #98	; 0x62
 8003d38:	f7fe fe52 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7fe fe4f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 8003d42:	2005      	movs	r0, #5
 8003d44:	f7fe fe4c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f7fe fe49 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 8003d4e:	2084      	movs	r0, #132	; 0x84
 8003d50:	f7fe fe46 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7fe fe43 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF0);
 8003d5a:	20f0      	movs	r0, #240	; 0xf0
 8003d5c:	f7fe fe40 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7fe fe3d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 8003d66:	2018      	movs	r0, #24
 8003d68:	f7fe fe3a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f7fe fe37 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA4);
 8003d72:	20a4      	movs	r0, #164	; 0xa4
 8003d74:	f7fe fe34 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7fe fe31 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 8003d7e:	2018      	movs	r0, #24
 8003d80:	f7fe fe2e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7fe fe2b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 8003d8a:	2050      	movs	r0, #80	; 0x50
 8003d8c:	f7fe fe28 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7fe fe25 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0C);
 8003d96:	200c      	movs	r0, #12
 8003d98:	f7fe fe22 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7fe fe1f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8003da2:	2017      	movs	r0, #23
 8003da4:	f7fe fe1c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f7fe fe19 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x95);
 8003dae:	2095      	movs	r0, #149	; 0x95
 8003db0:	f7fe fe16 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003db4:	2000      	movs	r0, #0
 8003db6:	f7fe fe13 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 8003dba:	20f3      	movs	r0, #243	; 0xf3
 8003dbc:	f7fe fe10 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f7fe fe0d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE6);
 8003dc6:	20e6      	movs	r0, #230	; 0xe6
 8003dc8:	f7fe fe0a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7fe fe07 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC5);
 8003dd2:	20c5      	movs	r0, #197	; 0xc5
 8003dd4:	f7fe fdf0 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x32);
 8003dd8:	2032      	movs	r0, #50	; 0x32
 8003dda:	f7fe fe01 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003dde:	2000      	movs	r0, #0
 8003de0:	f7fe fdfe 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 8003de4:	2044      	movs	r0, #68	; 0x44
 8003de6:	f7fe fdfb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003dea:	2000      	movs	r0, #0
 8003dec:	f7fe fdf8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x65);
 8003df0:	2065      	movs	r0, #101	; 0x65
 8003df2:	f7fe fdf5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003df6:	2000      	movs	r0, #0
 8003df8:	f7fe fdf2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 8003dfc:	2076      	movs	r0, #118	; 0x76
 8003dfe:	f7fe fdef 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e02:	2000      	movs	r0, #0
 8003e04:	f7fe fdec 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 8003e08:	2088      	movs	r0, #136	; 0x88
 8003e0a:	f7fe fde9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f7fe fde6 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC6);
 8003e14:	20c6      	movs	r0, #198	; 0xc6
 8003e16:	f7fe fdcf 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);
 8003e1a:	2020      	movs	r0, #32
 8003e1c:	f7fe fde0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e20:	2000      	movs	r0, #0
 8003e22:	f7fe fddd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8003e26:	2017      	movs	r0, #23
 8003e28:	f7fe fdda 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f7fe fdd7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f7fe fdd4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7fe fdd1 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC7);
 8003e3e:	20c7      	movs	r0, #199	; 0xc7
 8003e40:	f7fe fdba 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003e44:	2000      	movs	r0, #0
 8003e46:	f7fe fdcb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	f7fe fdc8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e50:	2000      	movs	r0, #0
 8003e52:	f7fe fdc5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e56:	2000      	movs	r0, #0
 8003e58:	f7fe fdc2 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC8);
 8003e5c:	20c8      	movs	r0, #200	; 0xc8
 8003e5e:	f7fe fdab 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003e62:	2000      	movs	r0, #0
 8003e64:	f7fe fdbc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fe fdb9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7fe fdb6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fe fdb3 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xC9);
 8003e7a:	20c9      	movs	r0, #201	; 0xc9
 8003e7c:	f7fe fd9c 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7fe fdad 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e86:	2000      	movs	r0, #0
 8003e88:	f7fe fdaa 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fe fda7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e92:	2000      	movs	r0, #0
 8003e94:	f7fe fda4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7fe fda1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f7fe fd9e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fe fd9b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f7fe fd98 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7fe fd95 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f7fe fd92 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7fe fd8f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f7fe fd8c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7fe fd89 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f7fe fd86 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7fe fd83 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003eda:	2000      	movs	r0, #0
 8003edc:	f7fe fd80 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xE0);
 8003ee0:	20e0      	movs	r0, #224	; 0xe0
 8003ee2:	f7fe fd69 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x16);
 8003ee6:	2016      	movs	r0, #22
 8003ee8:	f7fe fd7a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7fe fd77 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 8003ef2:	201c      	movs	r0, #28
 8003ef4:	f7fe fd74 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fe fd71 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 8003efe:	2021      	movs	r0, #33	; 0x21
 8003f00:	f7fe fd6e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7fe fd6b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 8003f0a:	2036      	movs	r0, #54	; 0x36
 8003f0c:	f7fe fd68 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7fe fd65 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x46);
 8003f16:	2046      	movs	r0, #70	; 0x46
 8003f18:	f7fe fd62 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fe fd5f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 8003f22:	2052      	movs	r0, #82	; 0x52
 8003f24:	f7fe fd5c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f7fe fd59 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 8003f2e:	2064      	movs	r0, #100	; 0x64
 8003f30:	f7fe fd56 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f34:	2000      	movs	r0, #0
 8003f36:	f7fe fd53 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 8003f3a:	207a      	movs	r0, #122	; 0x7a
 8003f3c:	f7fe fd50 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f40:	2000      	movs	r0, #0
 8003f42:	f7fe fd4d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 8003f46:	208b      	movs	r0, #139	; 0x8b
 8003f48:	f7fe fd4a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f7fe fd47 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8003f52:	2099      	movs	r0, #153	; 0x99
 8003f54:	f7fe fd44 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7fe fd41 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 8003f5e:	20a8      	movs	r0, #168	; 0xa8
 8003f60:	f7fe fd3e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f64:	2000      	movs	r0, #0
 8003f66:	f7fe fd3b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 8003f6a:	20b9      	movs	r0, #185	; 0xb9
 8003f6c:	f7fe fd38 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f70:	2000      	movs	r0, #0
 8003f72:	f7fe fd35 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 8003f76:	20c4      	movs	r0, #196	; 0xc4
 8003f78:	f7fe fd32 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f7fe fd2f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 8003f82:	20ca      	movs	r0, #202	; 0xca
 8003f84:	f7fe fd2c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7fe fd29 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 8003f8e:	20d2      	movs	r0, #210	; 0xd2
 8003f90:	f7fe fd26 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003f94:	2000      	movs	r0, #0
 8003f96:	f7fe fd23 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD9);
 8003f9a:	20d9      	movs	r0, #217	; 0xd9
 8003f9c:	f7fe fd20 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f7fe fd1d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 8003fa6:	20e0      	movs	r0, #224	; 0xe0
 8003fa8:	f7fe fd1a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f7fe fd17 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 8003fb2:	20f3      	movs	r0, #243	; 0xf3
 8003fb4:	f7fe fd14 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f7fe fd11 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xE1);
 8003fbe:	20e1      	movs	r0, #225	; 0xe1
 8003fc0:	f7fe fcfa 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x16);
 8003fc4:	2016      	movs	r0, #22
 8003fc6:	f7fe fd0b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f7fe fd08 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 8003fd0:	201c      	movs	r0, #28
 8003fd2:	f7fe fd05 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f7fe fd02 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x22);
 8003fdc:	2022      	movs	r0, #34	; 0x22
 8003fde:	f7fe fcff 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f7fe fcfc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 8003fe8:	2036      	movs	r0, #54	; 0x36
 8003fea:	f7fe fcf9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f7fe fcf6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 8003ff4:	2045      	movs	r0, #69	; 0x45
 8003ff6:	f7fe fcf3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f7fe fcf0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 8004000:	2052      	movs	r0, #82	; 0x52
 8004002:	f7fe fced 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004006:	2000      	movs	r0, #0
 8004008:	f7fe fcea 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 800400c:	2064      	movs	r0, #100	; 0x64
 800400e:	f7fe fce7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004012:	2000      	movs	r0, #0
 8004014:	f7fe fce4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 8004018:	207a      	movs	r0, #122	; 0x7a
 800401a:	f7fe fce1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800401e:	2000      	movs	r0, #0
 8004020:	f7fe fcde 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 8004024:	208b      	movs	r0, #139	; 0x8b
 8004026:	f7fe fcdb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800402a:	2000      	movs	r0, #0
 800402c:	f7fe fcd8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8004030:	2099      	movs	r0, #153	; 0x99
 8004032:	f7fe fcd5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004036:	2000      	movs	r0, #0
 8004038:	f7fe fcd2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 800403c:	20a8      	movs	r0, #168	; 0xa8
 800403e:	f7fe fccf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004042:	2000      	movs	r0, #0
 8004044:	f7fe fccc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 8004048:	20b9      	movs	r0, #185	; 0xb9
 800404a:	f7fe fcc9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800404e:	2000      	movs	r0, #0
 8004050:	f7fe fcc6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 8004054:	20c4      	movs	r0, #196	; 0xc4
 8004056:	f7fe fcc3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800405a:	2000      	movs	r0, #0
 800405c:	f7fe fcc0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 8004060:	20ca      	movs	r0, #202	; 0xca
 8004062:	f7fe fcbd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004066:	2000      	movs	r0, #0
 8004068:	f7fe fcba 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 800406c:	20d2      	movs	r0, #210	; 0xd2
 800406e:	f7fe fcb7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004072:	2000      	movs	r0, #0
 8004074:	f7fe fcb4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD8);
 8004078:	20d8      	movs	r0, #216	; 0xd8
 800407a:	f7fe fcb1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800407e:	2000      	movs	r0, #0
 8004080:	f7fe fcae 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 8004084:	20e0      	movs	r0, #224	; 0xe0
 8004086:	f7fe fcab 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800408a:	2000      	movs	r0, #0
 800408c:	f7fe fca8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 8004090:	20f3      	movs	r0, #243	; 0xf3
 8004092:	f7fe fca5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004096:	2000      	movs	r0, #0
 8004098:	f7fe fca2 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xE2);
 800409c:	20e2      	movs	r0, #226	; 0xe2
 800409e:	f7fe fc8b 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x05);
 80040a2:	2005      	movs	r0, #5
 80040a4:	f7fe fc9c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80040a8:	2000      	movs	r0, #0
 80040aa:	f7fe fc99 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0B);
 80040ae:	200b      	movs	r0, #11
 80040b0:	f7fe fc96 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80040b4:	2000      	movs	r0, #0
 80040b6:	f7fe fc93 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1B);
 80040ba:	201b      	movs	r0, #27
 80040bc:	f7fe fc90 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80040c0:	2000      	movs	r0, #0
 80040c2:	f7fe fc8d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 80040c6:	2034      	movs	r0, #52	; 0x34
 80040c8:	f7fe fc8a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80040cc:	2000      	movs	r0, #0
 80040ce:	f7fe fc87 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80040d2:	2044      	movs	r0, #68	; 0x44
 80040d4:	f7fe fc84 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80040d8:	2000      	movs	r0, #0
 80040da:	f7fe fc81 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x4F);
 80040de:	204f      	movs	r0, #79	; 0x4f
 80040e0:	f7fe fc7e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80040e4:	2000      	movs	r0, #0
 80040e6:	f7fe fc7b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x61);
 80040ea:	2061      	movs	r0, #97	; 0x61
 80040ec:	f7fe fc78 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80040f0:	2000      	movs	r0, #0
 80040f2:	f7fe fc75 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x79);
 80040f6:	2079      	movs	r0, #121	; 0x79
 80040f8:	f7fe fc72 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80040fc:	2000      	movs	r0, #0
 80040fe:	f7fe fc6f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 8004102:	2088      	movs	r0, #136	; 0x88
 8004104:	f7fe fc6c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004108:	2000      	movs	r0, #0
 800410a:	f7fe fc69 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 800410e:	2097      	movs	r0, #151	; 0x97
 8004110:	f7fe fc66 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004114:	2000      	movs	r0, #0
 8004116:	f7fe fc63 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 800411a:	20a6      	movs	r0, #166	; 0xa6
 800411c:	f7fe fc60 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004120:	2000      	movs	r0, #0
 8004122:	f7fe fc5d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 8004126:	20b7      	movs	r0, #183	; 0xb7
 8004128:	f7fe fc5a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800412c:	2000      	movs	r0, #0
 800412e:	f7fe fc57 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 8004132:	20c2      	movs	r0, #194	; 0xc2
 8004134:	f7fe fc54 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004138:	2000      	movs	r0, #0
 800413a:	f7fe fc51 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 800413e:	20c7      	movs	r0, #199	; 0xc7
 8004140:	f7fe fc4e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004144:	2000      	movs	r0, #0
 8004146:	f7fe fc4b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 800414a:	20d1      	movs	r0, #209	; 0xd1
 800414c:	f7fe fc48 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004150:	2000      	movs	r0, #0
 8004152:	f7fe fc45 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD6);
 8004156:	20d6      	movs	r0, #214	; 0xd6
 8004158:	f7fe fc42 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800415c:	2000      	movs	r0, #0
 800415e:	f7fe fc3f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 8004162:	20dd      	movs	r0, #221	; 0xdd
 8004164:	f7fe fc3c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004168:	2000      	movs	r0, #0
 800416a:	f7fe fc39 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 800416e:	20f3      	movs	r0, #243	; 0xf3
 8004170:	f7fe fc36 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004174:	2000      	movs	r0, #0
 8004176:	f7fe fc33 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xE3);
 800417a:	20e3      	movs	r0, #227	; 0xe3
 800417c:	f7fe fc1c 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x05);
 8004180:	2005      	movs	r0, #5
 8004182:	f7fe fc2d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004186:	2000      	movs	r0, #0
 8004188:	f7fe fc2a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA);
 800418c:	200a      	movs	r0, #10
 800418e:	f7fe fc27 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004192:	2000      	movs	r0, #0
 8004194:	f7fe fc24 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 8004198:	201c      	movs	r0, #28
 800419a:	f7fe fc21 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800419e:	2000      	movs	r0, #0
 80041a0:	f7fe fc1e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 80041a4:	2033      	movs	r0, #51	; 0x33
 80041a6:	f7fe fc1b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80041aa:	2000      	movs	r0, #0
 80041ac:	f7fe fc18 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80041b0:	2044      	movs	r0, #68	; 0x44
 80041b2:	f7fe fc15 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7fe fc12 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 80041bc:	2050      	movs	r0, #80	; 0x50
 80041be:	f7fe fc0f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80041c2:	2000      	movs	r0, #0
 80041c4:	f7fe fc0c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x62);
 80041c8:	2062      	movs	r0, #98	; 0x62
 80041ca:	f7fe fc09 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7fe fc06 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x78);
 80041d4:	2078      	movs	r0, #120	; 0x78
 80041d6:	f7fe fc03 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80041da:	2000      	movs	r0, #0
 80041dc:	f7fe fc00 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 80041e0:	2088      	movs	r0, #136	; 0x88
 80041e2:	f7fe fbfd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80041e6:	2000      	movs	r0, #0
 80041e8:	f7fe fbfa 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 80041ec:	2097      	movs	r0, #151	; 0x97
 80041ee:	f7fe fbf7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7fe fbf4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 80041f8:	20a6      	movs	r0, #166	; 0xa6
 80041fa:	f7fe fbf1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80041fe:	2000      	movs	r0, #0
 8004200:	f7fe fbee 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 8004204:	20b7      	movs	r0, #183	; 0xb7
 8004206:	f7fe fbeb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800420a:	2000      	movs	r0, #0
 800420c:	f7fe fbe8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 8004210:	20c2      	movs	r0, #194	; 0xc2
 8004212:	f7fe fbe5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004216:	2000      	movs	r0, #0
 8004218:	f7fe fbe2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 800421c:	20c7      	movs	r0, #199	; 0xc7
 800421e:	f7fe fbdf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004222:	2000      	movs	r0, #0
 8004224:	f7fe fbdc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 8004228:	20d1      	movs	r0, #209	; 0xd1
 800422a:	f7fe fbd9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800422e:	2000      	movs	r0, #0
 8004230:	f7fe fbd6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD5);
 8004234:	20d5      	movs	r0, #213	; 0xd5
 8004236:	f7fe fbd3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800423a:	2000      	movs	r0, #0
 800423c:	f7fe fbd0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 8004240:	20dd      	movs	r0, #221	; 0xdd
 8004242:	f7fe fbcd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004246:	2000      	movs	r0, #0
 8004248:	f7fe fbca 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 800424c:	20f3      	movs	r0, #243	; 0xf3
 800424e:	f7fe fbc7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004252:	2000      	movs	r0, #0
 8004254:	f7fe fbc4 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xE4);
 8004258:	20e4      	movs	r0, #228	; 0xe4
 800425a:	f7fe fbad 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 800425e:	2001      	movs	r0, #1
 8004260:	f7fe fbbe 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004264:	2000      	movs	r0, #0
 8004266:	f7fe fbbb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 800426a:	2001      	movs	r0, #1
 800426c:	f7fe fbb8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004270:	2000      	movs	r0, #0
 8004272:	f7fe fbb5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8004276:	2002      	movs	r0, #2
 8004278:	f7fe fbb2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800427c:	2000      	movs	r0, #0
 800427e:	f7fe fbaf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 8004282:	202a      	movs	r0, #42	; 0x2a
 8004284:	f7fe fbac 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004288:	2000      	movs	r0, #0
 800428a:	f7fe fba9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 800428e:	203c      	movs	r0, #60	; 0x3c
 8004290:	f7fe fba6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004294:	2000      	movs	r0, #0
 8004296:	f7fe fba3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 800429a:	204b      	movs	r0, #75	; 0x4b
 800429c:	f7fe fba0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80042a0:	2000      	movs	r0, #0
 80042a2:	f7fe fb9d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 80042a6:	205d      	movs	r0, #93	; 0x5d
 80042a8:	f7fe fb9a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7fe fb97 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 80042b2:	2074      	movs	r0, #116	; 0x74
 80042b4:	f7fe fb94 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80042b8:	2000      	movs	r0, #0
 80042ba:	f7fe fb91 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 80042be:	2084      	movs	r0, #132	; 0x84
 80042c0:	f7fe fb8e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80042c4:	2000      	movs	r0, #0
 80042c6:	f7fe fb8b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 80042ca:	2093      	movs	r0, #147	; 0x93
 80042cc:	f7fe fb88 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80042d0:	2000      	movs	r0, #0
 80042d2:	f7fe fb85 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 80042d6:	20a2      	movs	r0, #162	; 0xa2
 80042d8:	f7fe fb82 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80042dc:	2000      	movs	r0, #0
 80042de:	f7fe fb7f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 80042e2:	20b3      	movs	r0, #179	; 0xb3
 80042e4:	f7fe fb7c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7fe fb79 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 80042ee:	20be      	movs	r0, #190	; 0xbe
 80042f0:	f7fe fb76 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80042f4:	2000      	movs	r0, #0
 80042f6:	f7fe fb73 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 80042fa:	20c4      	movs	r0, #196	; 0xc4
 80042fc:	f7fe fb70 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004300:	2000      	movs	r0, #0
 8004302:	f7fe fb6d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 8004306:	20cd      	movs	r0, #205	; 0xcd
 8004308:	f7fe fb6a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800430c:	2000      	movs	r0, #0
 800430e:	f7fe fb67 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 8004312:	20d3      	movs	r0, #211	; 0xd3
 8004314:	f7fe fb64 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004318:	2000      	movs	r0, #0
 800431a:	f7fe fb61 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 800431e:	20dd      	movs	r0, #221	; 0xdd
 8004320:	f7fe fb5e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004324:	2000      	movs	r0, #0
 8004326:	f7fe fb5b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 800432a:	20f3      	movs	r0, #243	; 0xf3
 800432c:	f7fe fb58 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004330:	2000      	movs	r0, #0
 8004332:	f7fe fb55 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xE5);
 8004336:	20e5      	movs	r0, #229	; 0xe5
 8004338:	f7fe fb3e 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 800433c:	2000      	movs	r0, #0
 800433e:	f7fe fb4f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004342:	2000      	movs	r0, #0
 8004344:	f7fe fb4c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004348:	2000      	movs	r0, #0
 800434a:	f7fe fb49 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800434e:	2000      	movs	r0, #0
 8004350:	f7fe fb46 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8004354:	2002      	movs	r0, #2
 8004356:	f7fe fb43 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800435a:	2000      	movs	r0, #0
 800435c:	f7fe fb40 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 8004360:	2029      	movs	r0, #41	; 0x29
 8004362:	f7fe fb3d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004366:	2000      	movs	r0, #0
 8004368:	f7fe fb3a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 800436c:	203c      	movs	r0, #60	; 0x3c
 800436e:	f7fe fb37 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004372:	2000      	movs	r0, #0
 8004374:	f7fe fb34 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 8004378:	204b      	movs	r0, #75	; 0x4b
 800437a:	f7fe fb31 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800437e:	2000      	movs	r0, #0
 8004380:	f7fe fb2e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 8004384:	205d      	movs	r0, #93	; 0x5d
 8004386:	f7fe fb2b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800438a:	2000      	movs	r0, #0
 800438c:	f7fe fb28 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 8004390:	2074      	movs	r0, #116	; 0x74
 8004392:	f7fe fb25 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004396:	2000      	movs	r0, #0
 8004398:	f7fe fb22 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 800439c:	2084      	movs	r0, #132	; 0x84
 800439e:	f7fe fb1f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80043a2:	2000      	movs	r0, #0
 80043a4:	f7fe fb1c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 80043a8:	2093      	movs	r0, #147	; 0x93
 80043aa:	f7fe fb19 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80043ae:	2000      	movs	r0, #0
 80043b0:	f7fe fb16 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 80043b4:	20a2      	movs	r0, #162	; 0xa2
 80043b6:	f7fe fb13 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80043ba:	2000      	movs	r0, #0
 80043bc:	f7fe fb10 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 80043c0:	20b3      	movs	r0, #179	; 0xb3
 80043c2:	f7fe fb0d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80043c6:	2000      	movs	r0, #0
 80043c8:	f7fe fb0a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 80043cc:	20be      	movs	r0, #190	; 0xbe
 80043ce:	f7fe fb07 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80043d2:	2000      	movs	r0, #0
 80043d4:	f7fe fb04 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 80043d8:	20c4      	movs	r0, #196	; 0xc4
 80043da:	f7fe fb01 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80043de:	2000      	movs	r0, #0
 80043e0:	f7fe fafe 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 80043e4:	20cd      	movs	r0, #205	; 0xcd
 80043e6:	f7fe fafb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80043ea:	2000      	movs	r0, #0
 80043ec:	f7fe faf8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 80043f0:	20d3      	movs	r0, #211	; 0xd3
 80043f2:	f7fe faf5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7fe faf2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 80043fc:	20dc      	movs	r0, #220	; 0xdc
 80043fe:	f7fe faef 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004402:	2000      	movs	r0, #0
 8004404:	f7fe faec 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 8004408:	20f3      	movs	r0, #243	; 0xf3
 800440a:	f7fe fae9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800440e:	2000      	movs	r0, #0
 8004410:	f7fe fae6 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xE6);
 8004414:	20e6      	movs	r0, #230	; 0xe6
 8004416:	f7fe facf 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x11);
 800441a:	2011      	movs	r0, #17
 800441c:	f7fe fae0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004420:	2000      	movs	r0, #0
 8004422:	f7fe fadd 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 8004426:	2034      	movs	r0, #52	; 0x34
 8004428:	f7fe fada 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800442c:	2000      	movs	r0, #0
 800442e:	f7fe fad7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 8004432:	2056      	movs	r0, #86	; 0x56
 8004434:	f7fe fad4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004438:	2000      	movs	r0, #0
 800443a:	f7fe fad1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 800443e:	2076      	movs	r0, #118	; 0x76
 8004440:	f7fe face 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004444:	2000      	movs	r0, #0
 8004446:	f7fe facb 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 800444a:	2077      	movs	r0, #119	; 0x77
 800444c:	f7fe fac8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004450:	2000      	movs	r0, #0
 8004452:	f7fe fac5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 8004456:	2066      	movs	r0, #102	; 0x66
 8004458:	f7fe fac2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800445c:	2000      	movs	r0, #0
 800445e:	f7fe fabf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 8004462:	2088      	movs	r0, #136	; 0x88
 8004464:	f7fe fabc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004468:	2000      	movs	r0, #0
 800446a:	f7fe fab9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 800446e:	2099      	movs	r0, #153	; 0x99
 8004470:	f7fe fab6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004474:	2000      	movs	r0, #0
 8004476:	f7fe fab3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 800447a:	20bb      	movs	r0, #187	; 0xbb
 800447c:	f7fe fab0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004480:	2000      	movs	r0, #0
 8004482:	f7fe faad 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8004486:	2099      	movs	r0, #153	; 0x99
 8004488:	f7fe faaa 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800448c:	2000      	movs	r0, #0
 800448e:	f7fe faa7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 8004492:	2066      	movs	r0, #102	; 0x66
 8004494:	f7fe faa4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004498:	2000      	movs	r0, #0
 800449a:	f7fe faa1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 800449e:	2055      	movs	r0, #85	; 0x55
 80044a0:	f7fe fa9e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80044a4:	2000      	movs	r0, #0
 80044a6:	f7fe fa9b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 80044aa:	2055      	movs	r0, #85	; 0x55
 80044ac:	f7fe fa98 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80044b0:	2000      	movs	r0, #0
 80044b2:	f7fe fa95 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 80044b6:	2045      	movs	r0, #69	; 0x45
 80044b8:	f7fe fa92 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80044bc:	2000      	movs	r0, #0
 80044be:	f7fe fa8f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 80044c2:	2043      	movs	r0, #67	; 0x43
 80044c4:	f7fe fa8c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80044c8:	2000      	movs	r0, #0
 80044ca:	f7fe fa89 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80044ce:	2044      	movs	r0, #68	; 0x44
 80044d0:	f7fe fa86 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80044d4:	2000      	movs	r0, #0
 80044d6:	f7fe fa83 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xE7);
 80044da:	20e7      	movs	r0, #231	; 0xe7
 80044dc:	f7fe fa6c 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x32);
 80044e0:	2032      	movs	r0, #50	; 0x32
 80044e2:	f7fe fa7d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80044e6:	2000      	movs	r0, #0
 80044e8:	f7fe fa7a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 80044ec:	2055      	movs	r0, #85	; 0x55
 80044ee:	f7fe fa77 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80044f2:	2000      	movs	r0, #0
 80044f4:	f7fe fa74 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 80044f8:	2076      	movs	r0, #118	; 0x76
 80044fa:	f7fe fa71 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80044fe:	2000      	movs	r0, #0
 8004500:	f7fe fa6e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 8004504:	2066      	movs	r0, #102	; 0x66
 8004506:	f7fe fa6b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800450a:	2000      	movs	r0, #0
 800450c:	f7fe fa68 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 8004510:	2067      	movs	r0, #103	; 0x67
 8004512:	f7fe fa65 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004516:	2000      	movs	r0, #0
 8004518:	f7fe fa62 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 800451c:	2067      	movs	r0, #103	; 0x67
 800451e:	f7fe fa5f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004522:	2000      	movs	r0, #0
 8004524:	f7fe fa5c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 8004528:	2087      	movs	r0, #135	; 0x87
 800452a:	f7fe fa59 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800452e:	2000      	movs	r0, #0
 8004530:	f7fe fa56 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8004534:	2099      	movs	r0, #153	; 0x99
 8004536:	f7fe fa53 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800453a:	2000      	movs	r0, #0
 800453c:	f7fe fa50 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 8004540:	20bb      	movs	r0, #187	; 0xbb
 8004542:	f7fe fa4d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004546:	2000      	movs	r0, #0
 8004548:	f7fe fa4a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 800454c:	2099      	movs	r0, #153	; 0x99
 800454e:	f7fe fa47 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004552:	2000      	movs	r0, #0
 8004554:	f7fe fa44 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 8004558:	2077      	movs	r0, #119	; 0x77
 800455a:	f7fe fa41 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800455e:	2000      	movs	r0, #0
 8004560:	f7fe fa3e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 8004564:	2044      	movs	r0, #68	; 0x44
 8004566:	f7fe fa3b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800456a:	2000      	movs	r0, #0
 800456c:	f7fe fa38 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 8004570:	2056      	movs	r0, #86	; 0x56
 8004572:	f7fe fa35 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004576:	2000      	movs	r0, #0
 8004578:	f7fe fa32 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 800457c:	2023      	movs	r0, #35	; 0x23
 800457e:	f7fe fa2f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004582:	2000      	movs	r0, #0
 8004584:	f7fe fa2c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 8004588:	2033      	movs	r0, #51	; 0x33
 800458a:	f7fe fa29 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800458e:	2000      	movs	r0, #0
 8004590:	f7fe fa26 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 8004594:	2045      	movs	r0, #69	; 0x45
 8004596:	f7fe fa23 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800459a:	2000      	movs	r0, #0
 800459c:	f7fe fa20 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xE8);
 80045a0:	20e8      	movs	r0, #232	; 0xe8
 80045a2:	f7fe fa09 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80045a6:	2000      	movs	r0, #0
 80045a8:	f7fe fa1a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80045ac:	2000      	movs	r0, #0
 80045ae:	f7fe fa17 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 80045b2:	2099      	movs	r0, #153	; 0x99
 80045b4:	f7fe fa14 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80045b8:	2000      	movs	r0, #0
 80045ba:	f7fe fa11 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 80045be:	2087      	movs	r0, #135	; 0x87
 80045c0:	f7fe fa0e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80045c4:	2000      	movs	r0, #0
 80045c6:	f7fe fa0b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 80045ca:	2088      	movs	r0, #136	; 0x88
 80045cc:	f7fe fa08 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7fe fa05 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 80045d6:	2077      	movs	r0, #119	; 0x77
 80045d8:	f7fe fa02 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80045dc:	2000      	movs	r0, #0
 80045de:	f7fe f9ff 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 80045e2:	2066      	movs	r0, #102	; 0x66
 80045e4:	f7fe f9fc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80045e8:	2000      	movs	r0, #0
 80045ea:	f7fe f9f9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 80045ee:	2088      	movs	r0, #136	; 0x88
 80045f0:	f7fe f9f6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80045f4:	2000      	movs	r0, #0
 80045f6:	f7fe f9f3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xAA);
 80045fa:	20aa      	movs	r0, #170	; 0xaa
 80045fc:	f7fe f9f0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004600:	2000      	movs	r0, #0
 8004602:	f7fe f9ed 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 8004606:	20bb      	movs	r0, #187	; 0xbb
 8004608:	f7fe f9ea 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800460c:	2000      	movs	r0, #0
 800460e:	f7fe f9e7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8004612:	2099      	movs	r0, #153	; 0x99
 8004614:	f7fe f9e4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004618:	2000      	movs	r0, #0
 800461a:	f7fe f9e1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 800461e:	2066      	movs	r0, #102	; 0x66
 8004620:	f7fe f9de 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004624:	2000      	movs	r0, #0
 8004626:	f7fe f9db 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 800462a:	2055      	movs	r0, #85	; 0x55
 800462c:	f7fe f9d8 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004630:	2000      	movs	r0, #0
 8004632:	f7fe f9d5 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 8004636:	2055      	movs	r0, #85	; 0x55
 8004638:	f7fe f9d2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800463c:	2000      	movs	r0, #0
 800463e:	f7fe f9cf 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 8004642:	2044      	movs	r0, #68	; 0x44
 8004644:	f7fe f9cc 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004648:	2000      	movs	r0, #0
 800464a:	f7fe f9c9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 800464e:	2044      	movs	r0, #68	; 0x44
 8004650:	f7fe f9c6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004654:	2000      	movs	r0, #0
 8004656:	f7fe f9c3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 800465a:	2055      	movs	r0, #85	; 0x55
 800465c:	f7fe f9c0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004660:	2000      	movs	r0, #0
 8004662:	f7fe f9bd 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xE9);
 8004666:	20e9      	movs	r0, #233	; 0xe9
 8004668:	f7fe f9a6 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0xAA);
 800466c:	20aa      	movs	r0, #170	; 0xaa
 800466e:	f7fe f9b7 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004672:	2000      	movs	r0, #0
 8004674:	f7fe f9b4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004678:	2000      	movs	r0, #0
 800467a:	f7fe f9b1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800467e:	2000      	movs	r0, #0
 8004680:	f7fe f9ae 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0x00);
 8004684:	2000      	movs	r0, #0
 8004686:	f7fe f997 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0xAA);
 800468a:	20aa      	movs	r0, #170	; 0xaa
 800468c:	f7fe f9a8 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xCF);
 8004690:	20cf      	movs	r0, #207	; 0xcf
 8004692:	f7fe f991 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8004696:	2000      	movs	r0, #0
 8004698:	f7fe f9a2 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800469c:	2000      	movs	r0, #0
 800469e:	f7fe f99f 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046a2:	2000      	movs	r0, #0
 80046a4:	f7fe f99c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046a8:	2000      	movs	r0, #0
 80046aa:	f7fe f999 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046ae:	2000      	movs	r0, #0
 80046b0:	f7fe f996 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046b4:	2000      	movs	r0, #0
 80046b6:	f7fe f993 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046ba:	2000      	movs	r0, #0
 80046bc:	f7fe f990 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7fe f98d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7fe f98a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046cc:	2000      	movs	r0, #0
 80046ce:	f7fe f987 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046d2:	2000      	movs	r0, #0
 80046d4:	f7fe f984 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046d8:	2000      	movs	r0, #0
 80046da:	f7fe f981 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046de:	2000      	movs	r0, #0
 80046e0:	f7fe f97e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046e4:	2000      	movs	r0, #0
 80046e6:	f7fe f97b 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046ea:	2000      	movs	r0, #0
 80046ec:	f7fe f978 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046f0:	2000      	movs	r0, #0
 80046f2:	f7fe f975 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80046f6:	2000      	movs	r0, #0
 80046f8:	f7fe f972 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xF0);
 80046fc:	20f0      	movs	r0, #240	; 0xf0
 80046fe:	f7fe f95b 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8004702:	2000      	movs	r0, #0
 8004704:	f7fe f96c 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 8004708:	2050      	movs	r0, #80	; 0x50
 800470a:	f7fe f969 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800470e:	2000      	movs	r0, #0
 8004710:	f7fe f966 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004714:	2000      	movs	r0, #0
 8004716:	f7fe f963 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800471a:	2000      	movs	r0, #0
 800471c:	f7fe f960 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xF3);
 8004720:	20f3      	movs	r0, #243	; 0xf3
 8004722:	f7fe f949 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8004726:	2000      	movs	r0, #0
 8004728:	f7fe f95a 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xF9);
 800472c:	20f9      	movs	r0, #249	; 0xf9
 800472e:	f7fe f943 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x06);
 8004732:	2006      	movs	r0, #6
 8004734:	f7fe f954 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 8004738:	2010      	movs	r0, #16
 800473a:	f7fe f951 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 800473e:	2029      	movs	r0, #41	; 0x29
 8004740:	f7fe f94e 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8004744:	2000      	movs	r0, #0
 8004746:	f7fe f94b 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0x3A);
 800474a:	203a      	movs	r0, #58	; 0x3a
 800474c:	f7fe f934 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x55);	//66
 8004750:	2055      	movs	r0, #85	; 0x55
 8004752:	f7fe f945 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0x11);
 8004756:	2011      	movs	r0, #17
 8004758:	f7fe f92e 	bl	80029b8 <LCD_WR_REG>
        delay_ms(100);
 800475c:	2064      	movs	r0, #100	; 0x64
 800475e:	f7fe f91f 	bl	80029a0 <delay_ms>
        LCD_WR_REG(0x29);
 8004762:	2029      	movs	r0, #41	; 0x29
 8004764:	f7fe f928 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_REG(0x35);
 8004768:	2035      	movs	r0, #53	; 0x35
 800476a:	f7fe f925 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 800476e:	2000      	movs	r0, #0
 8004770:	f7fe f936 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0x51);
 8004774:	2051      	movs	r0, #81	; 0x51
 8004776:	f7fe f91f 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0xFF);
 800477a:	20ff      	movs	r0, #255	; 0xff
 800477c:	f7fe f930 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0x53);
 8004780:	2053      	movs	r0, #83	; 0x53
 8004782:	f7fe f919 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x2C);
 8004786:	202c      	movs	r0, #44	; 0x2c
 8004788:	f7fe f92a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0x55);
 800478c:	2055      	movs	r0, #85	; 0x55
 800478e:	f7fe f913 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x82);
 8004792:	2082      	movs	r0, #130	; 0x82
 8004794:	f7fe f924 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0x2c);
 8004798:	202c      	movs	r0, #44	; 0x2c
 800479a:	f7fe f90d 	bl	80029b8 <LCD_WR_REG>
 800479e:	f001 b847 	b.w	8005830 <LCD_Init+0x25c0>
    }
    else if (lcddev.id == 0x5510)
 80047a2:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <LCD_Init+0x1544>)
 80047a4:	889b      	ldrh	r3, [r3, #4]
 80047a6:	f245 5210 	movw	r2, #21776	; 0x5510
 80047aa:	4293      	cmp	r3, r2
 80047ac:	f040 8781 	bne.w	80056b2 <LCD_Init+0x2442>
 80047b0:	e002      	b.n	80047b8 <LCD_Init+0x1548>
 80047b2:	bf00      	nop
 80047b4:	200002a0 	.word	0x200002a0
    {
        LCD_WriteReg(0xF000, 0x55);
 80047b8:	2155      	movs	r1, #85	; 0x55
 80047ba:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80047be:	f7fe f933 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xF001, 0xAA);
 80047c2:	21aa      	movs	r1, #170	; 0xaa
 80047c4:	f24f 0001 	movw	r0, #61441	; 0xf001
 80047c8:	f7fe f92e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xF002, 0x52);
 80047cc:	2152      	movs	r1, #82	; 0x52
 80047ce:	f24f 0002 	movw	r0, #61442	; 0xf002
 80047d2:	f7fe f929 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xF003, 0x08);
 80047d6:	2108      	movs	r1, #8
 80047d8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80047dc:	f7fe f924 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xF004, 0x01);
 80047e0:	2101      	movs	r1, #1
 80047e2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80047e6:	f7fe f91f 	bl	8002a28 <LCD_WriteReg>
        //AVDD Set AVDD 5.2V
        LCD_WriteReg(0xB000, 0x0D);
 80047ea:	210d      	movs	r1, #13
 80047ec:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80047f0:	f7fe f91a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB001, 0x0D);
 80047f4:	210d      	movs	r1, #13
 80047f6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80047fa:	f7fe f915 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB002, 0x0D);
 80047fe:	210d      	movs	r1, #13
 8004800:	f24b 0002 	movw	r0, #45058	; 0xb002
 8004804:	f7fe f910 	bl	8002a28 <LCD_WriteReg>
        //AVDD ratio
        LCD_WriteReg(0xB600, 0x34);
 8004808:	2134      	movs	r1, #52	; 0x34
 800480a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800480e:	f7fe f90b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB601, 0x34);
 8004812:	2134      	movs	r1, #52	; 0x34
 8004814:	f24b 6001 	movw	r0, #46593	; 0xb601
 8004818:	f7fe f906 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB602, 0x34);
 800481c:	2134      	movs	r1, #52	; 0x34
 800481e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8004822:	f7fe f901 	bl	8002a28 <LCD_WriteReg>
        //AVEE -5.2V
        LCD_WriteReg(0xB100, 0x0D);
 8004826:	210d      	movs	r1, #13
 8004828:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800482c:	f7fe f8fc 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x0D);
 8004830:	210d      	movs	r1, #13
 8004832:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004836:	f7fe f8f7 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB102, 0x0D);
 800483a:	210d      	movs	r1, #13
 800483c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8004840:	f7fe f8f2 	bl	8002a28 <LCD_WriteReg>
        //AVEE ratio
        LCD_WriteReg(0xB700, 0x34);
 8004844:	2134      	movs	r1, #52	; 0x34
 8004846:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800484a:	f7fe f8ed 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB701, 0x34);
 800484e:	2134      	movs	r1, #52	; 0x34
 8004850:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004854:	f7fe f8e8 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB702, 0x34);
 8004858:	2134      	movs	r1, #52	; 0x34
 800485a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800485e:	f7fe f8e3 	bl	8002a28 <LCD_WriteReg>
        //VCL -2.5V
        LCD_WriteReg(0xB200, 0x00);
 8004862:	2100      	movs	r1, #0
 8004864:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8004868:	f7fe f8de 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB201, 0x00);
 800486c:	2100      	movs	r1, #0
 800486e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8004872:	f7fe f8d9 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB202, 0x00);
 8004876:	2100      	movs	r1, #0
 8004878:	f24b 2002 	movw	r0, #45570	; 0xb202
 800487c:	f7fe f8d4 	bl	8002a28 <LCD_WriteReg>
        //VCL ratio
        LCD_WriteReg(0xB800, 0x24);
 8004880:	2124      	movs	r1, #36	; 0x24
 8004882:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004886:	f7fe f8cf 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB801, 0x24);
 800488a:	2124      	movs	r1, #36	; 0x24
 800488c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004890:	f7fe f8ca 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB802, 0x24);
 8004894:	2124      	movs	r1, #36	; 0x24
 8004896:	f64b 0002 	movw	r0, #47106	; 0xb802
 800489a:	f7fe f8c5 	bl	8002a28 <LCD_WriteReg>
        //VGH 15V (Free pump)
        LCD_WriteReg(0xBF00, 0x01);
 800489e:	2101      	movs	r1, #1
 80048a0:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80048a4:	f7fe f8c0 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB300, 0x0F);
 80048a8:	210f      	movs	r1, #15
 80048aa:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80048ae:	f7fe f8bb 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB301, 0x0F);
 80048b2:	210f      	movs	r1, #15
 80048b4:	f24b 3001 	movw	r0, #45825	; 0xb301
 80048b8:	f7fe f8b6 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB302, 0x0F);
 80048bc:	210f      	movs	r1, #15
 80048be:	f24b 3002 	movw	r0, #45826	; 0xb302
 80048c2:	f7fe f8b1 	bl	8002a28 <LCD_WriteReg>
        //VGH ratio
        LCD_WriteReg(0xB900, 0x34);
 80048c6:	2134      	movs	r1, #52	; 0x34
 80048c8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80048cc:	f7fe f8ac 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB901, 0x34);
 80048d0:	2134      	movs	r1, #52	; 0x34
 80048d2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80048d6:	f7fe f8a7 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB902, 0x34);
 80048da:	2134      	movs	r1, #52	; 0x34
 80048dc:	f64b 1002 	movw	r0, #47362	; 0xb902
 80048e0:	f7fe f8a2 	bl	8002a28 <LCD_WriteReg>
        //VGL_REG -10V
        LCD_WriteReg(0xB500, 0x08);
 80048e4:	2108      	movs	r1, #8
 80048e6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80048ea:	f7fe f89d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB501, 0x08);
 80048ee:	2108      	movs	r1, #8
 80048f0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80048f4:	f7fe f898 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB502, 0x08);
 80048f8:	2108      	movs	r1, #8
 80048fa:	f24b 5002 	movw	r0, #46338	; 0xb502
 80048fe:	f7fe f893 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xC200, 0x03);
 8004902:	2103      	movs	r1, #3
 8004904:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8004908:	f7fe f88e 	bl	8002a28 <LCD_WriteReg>
        //VGLX ratio
        LCD_WriteReg(0xBA00, 0x24);
 800490c:	2124      	movs	r1, #36	; 0x24
 800490e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8004912:	f7fe f889 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xBA01, 0x24);
 8004916:	2124      	movs	r1, #36	; 0x24
 8004918:	f64b 2001 	movw	r0, #47617	; 0xba01
 800491c:	f7fe f884 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xBA02, 0x24);
 8004920:	2124      	movs	r1, #36	; 0x24
 8004922:	f64b 2002 	movw	r0, #47618	; 0xba02
 8004926:	f7fe f87f 	bl	8002a28 <LCD_WriteReg>
        //VGMP/VGSP 4.5V/0V
        LCD_WriteReg(0xBC00, 0x00);
 800492a:	2100      	movs	r1, #0
 800492c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004930:	f7fe f87a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xBC01, 0x78);
 8004934:	2178      	movs	r1, #120	; 0x78
 8004936:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800493a:	f7fe f875 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xBC02, 0x00);
 800493e:	2100      	movs	r1, #0
 8004940:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004944:	f7fe f870 	bl	8002a28 <LCD_WriteReg>
        //VGMN/VGSN -4.5V/0V
        LCD_WriteReg(0xBD00, 0x00);
 8004948:	2100      	movs	r1, #0
 800494a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800494e:	f7fe f86b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xBD01, 0x78);
 8004952:	2178      	movs	r1, #120	; 0x78
 8004954:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8004958:	f7fe f866 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xBD02, 0x00);
 800495c:	2100      	movs	r1, #0
 800495e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8004962:	f7fe f861 	bl	8002a28 <LCD_WriteReg>
        //VCOM
        LCD_WriteReg(0xBE00, 0x00);
 8004966:	2100      	movs	r1, #0
 8004968:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800496c:	f7fe f85c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xBE01, 0x64);
 8004970:	2164      	movs	r1, #100	; 0x64
 8004972:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8004976:	f7fe f857 	bl	8002a28 <LCD_WriteReg>
        //Gamma Setting
        LCD_WriteReg(0xD100, 0x00);
 800497a:	2100      	movs	r1, #0
 800497c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8004980:	f7fe f852 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD101, 0x33);
 8004984:	2133      	movs	r1, #51	; 0x33
 8004986:	f24d 1001 	movw	r0, #53505	; 0xd101
 800498a:	f7fe f84d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD102, 0x00);
 800498e:	2100      	movs	r1, #0
 8004990:	f24d 1002 	movw	r0, #53506	; 0xd102
 8004994:	f7fe f848 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD103, 0x34);
 8004998:	2134      	movs	r1, #52	; 0x34
 800499a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800499e:	f7fe f843 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD104, 0x00);
 80049a2:	2100      	movs	r1, #0
 80049a4:	f24d 1004 	movw	r0, #53508	; 0xd104
 80049a8:	f7fe f83e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD105, 0x3A);
 80049ac:	213a      	movs	r1, #58	; 0x3a
 80049ae:	f24d 1005 	movw	r0, #53509	; 0xd105
 80049b2:	f7fe f839 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD106, 0x00);
 80049b6:	2100      	movs	r1, #0
 80049b8:	f24d 1006 	movw	r0, #53510	; 0xd106
 80049bc:	f7fe f834 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD107, 0x4A);
 80049c0:	214a      	movs	r1, #74	; 0x4a
 80049c2:	f24d 1007 	movw	r0, #53511	; 0xd107
 80049c6:	f7fe f82f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD108, 0x00);
 80049ca:	2100      	movs	r1, #0
 80049cc:	f24d 1008 	movw	r0, #53512	; 0xd108
 80049d0:	f7fe f82a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD109, 0x5C);
 80049d4:	215c      	movs	r1, #92	; 0x5c
 80049d6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80049da:	f7fe f825 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD10A, 0x00);
 80049de:	2100      	movs	r1, #0
 80049e0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80049e4:	f7fe f820 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD10B, 0x81);
 80049e8:	2181      	movs	r1, #129	; 0x81
 80049ea:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80049ee:	f7fe f81b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD10C, 0x00);
 80049f2:	2100      	movs	r1, #0
 80049f4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80049f8:	f7fe f816 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD10D, 0xA6);
 80049fc:	21a6      	movs	r1, #166	; 0xa6
 80049fe:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8004a02:	f7fe f811 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD10E, 0x00);
 8004a06:	2100      	movs	r1, #0
 8004a08:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8004a0c:	f7fe f80c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD10F, 0xE5);
 8004a10:	21e5      	movs	r1, #229	; 0xe5
 8004a12:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8004a16:	f7fe f807 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD110, 0x01);
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8004a20:	f7fe f802 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD111, 0x13);
 8004a24:	2113      	movs	r1, #19
 8004a26:	f24d 1011 	movw	r0, #53521	; 0xd111
 8004a2a:	f7fd fffd 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD112, 0x01);
 8004a2e:	2101      	movs	r1, #1
 8004a30:	f24d 1012 	movw	r0, #53522	; 0xd112
 8004a34:	f7fd fff8 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD113, 0x54);
 8004a38:	2154      	movs	r1, #84	; 0x54
 8004a3a:	f24d 1013 	movw	r0, #53523	; 0xd113
 8004a3e:	f7fd fff3 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD114, 0x01);
 8004a42:	2101      	movs	r1, #1
 8004a44:	f24d 1014 	movw	r0, #53524	; 0xd114
 8004a48:	f7fd ffee 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD115, 0x82);
 8004a4c:	2182      	movs	r1, #130	; 0x82
 8004a4e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8004a52:	f7fd ffe9 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD116, 0x01);
 8004a56:	2101      	movs	r1, #1
 8004a58:	f24d 1016 	movw	r0, #53526	; 0xd116
 8004a5c:	f7fd ffe4 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD117, 0xCA);
 8004a60:	21ca      	movs	r1, #202	; 0xca
 8004a62:	f24d 1017 	movw	r0, #53527	; 0xd117
 8004a66:	f7fd ffdf 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD118, 0x02);
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8004a70:	f7fd ffda 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD119, 0x00);
 8004a74:	2100      	movs	r1, #0
 8004a76:	f24d 1019 	movw	r0, #53529	; 0xd119
 8004a7a:	f7fd ffd5 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD11A, 0x02);
 8004a7e:	2102      	movs	r1, #2
 8004a80:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8004a84:	f7fd ffd0 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD11B, 0x01);
 8004a88:	2101      	movs	r1, #1
 8004a8a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8004a8e:	f7fd ffcb 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD11C, 0x02);
 8004a92:	2102      	movs	r1, #2
 8004a94:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8004a98:	f7fd ffc6 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD11D, 0x34);
 8004a9c:	2134      	movs	r1, #52	; 0x34
 8004a9e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8004aa2:	f7fd ffc1 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD11E, 0x02);
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8004aac:	f7fd ffbc 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD11F, 0x67);
 8004ab0:	2167      	movs	r1, #103	; 0x67
 8004ab2:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8004ab6:	f7fd ffb7 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD120, 0x02);
 8004aba:	2102      	movs	r1, #2
 8004abc:	f24d 1020 	movw	r0, #53536	; 0xd120
 8004ac0:	f7fd ffb2 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD121, 0x84);
 8004ac4:	2184      	movs	r1, #132	; 0x84
 8004ac6:	f24d 1021 	movw	r0, #53537	; 0xd121
 8004aca:	f7fd ffad 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD122, 0x02);
 8004ace:	2102      	movs	r1, #2
 8004ad0:	f24d 1022 	movw	r0, #53538	; 0xd122
 8004ad4:	f7fd ffa8 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD123, 0xA4);
 8004ad8:	21a4      	movs	r1, #164	; 0xa4
 8004ada:	f24d 1023 	movw	r0, #53539	; 0xd123
 8004ade:	f7fd ffa3 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD124, 0x02);
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	f24d 1024 	movw	r0, #53540	; 0xd124
 8004ae8:	f7fd ff9e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD125, 0xB7);
 8004aec:	21b7      	movs	r1, #183	; 0xb7
 8004aee:	f24d 1025 	movw	r0, #53541	; 0xd125
 8004af2:	f7fd ff99 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD126, 0x02);
 8004af6:	2102      	movs	r1, #2
 8004af8:	f24d 1026 	movw	r0, #53542	; 0xd126
 8004afc:	f7fd ff94 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD127, 0xCF);
 8004b00:	21cf      	movs	r1, #207	; 0xcf
 8004b02:	f24d 1027 	movw	r0, #53543	; 0xd127
 8004b06:	f7fd ff8f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD128, 0x02);
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8004b10:	f7fd ff8a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD129, 0xDE);
 8004b14:	21de      	movs	r1, #222	; 0xde
 8004b16:	f24d 1029 	movw	r0, #53545	; 0xd129
 8004b1a:	f7fd ff85 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD12A, 0x02);
 8004b1e:	2102      	movs	r1, #2
 8004b20:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8004b24:	f7fd ff80 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD12B, 0xF2);
 8004b28:	21f2      	movs	r1, #242	; 0xf2
 8004b2a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8004b2e:	f7fd ff7b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD12C, 0x02);
 8004b32:	2102      	movs	r1, #2
 8004b34:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8004b38:	f7fd ff76 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD12D, 0xFE);
 8004b3c:	21fe      	movs	r1, #254	; 0xfe
 8004b3e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8004b42:	f7fd ff71 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD12E, 0x03);
 8004b46:	2103      	movs	r1, #3
 8004b48:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8004b4c:	f7fd ff6c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD12F, 0x10);
 8004b50:	2110      	movs	r1, #16
 8004b52:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8004b56:	f7fd ff67 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD130, 0x03);
 8004b5a:	2103      	movs	r1, #3
 8004b5c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8004b60:	f7fd ff62 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD131, 0x33);
 8004b64:	2133      	movs	r1, #51	; 0x33
 8004b66:	f24d 1031 	movw	r0, #53553	; 0xd131
 8004b6a:	f7fd ff5d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD132, 0x03);
 8004b6e:	2103      	movs	r1, #3
 8004b70:	f24d 1032 	movw	r0, #53554	; 0xd132
 8004b74:	f7fd ff58 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD133, 0x6D);
 8004b78:	216d      	movs	r1, #109	; 0x6d
 8004b7a:	f24d 1033 	movw	r0, #53555	; 0xd133
 8004b7e:	f7fd ff53 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD200, 0x00);
 8004b82:	2100      	movs	r1, #0
 8004b84:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8004b88:	f7fd ff4e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD201, 0x33);
 8004b8c:	2133      	movs	r1, #51	; 0x33
 8004b8e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8004b92:	f7fd ff49 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD202, 0x00);
 8004b96:	2100      	movs	r1, #0
 8004b98:	f24d 2002 	movw	r0, #53762	; 0xd202
 8004b9c:	f7fd ff44 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD203, 0x34);
 8004ba0:	2134      	movs	r1, #52	; 0x34
 8004ba2:	f24d 2003 	movw	r0, #53763	; 0xd203
 8004ba6:	f7fd ff3f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD204, 0x00);
 8004baa:	2100      	movs	r1, #0
 8004bac:	f24d 2004 	movw	r0, #53764	; 0xd204
 8004bb0:	f7fd ff3a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD205, 0x3A);
 8004bb4:	213a      	movs	r1, #58	; 0x3a
 8004bb6:	f24d 2005 	movw	r0, #53765	; 0xd205
 8004bba:	f7fd ff35 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD206, 0x00);
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f24d 2006 	movw	r0, #53766	; 0xd206
 8004bc4:	f7fd ff30 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD207, 0x4A);
 8004bc8:	214a      	movs	r1, #74	; 0x4a
 8004bca:	f24d 2007 	movw	r0, #53767	; 0xd207
 8004bce:	f7fd ff2b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD208, 0x00);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	f24d 2008 	movw	r0, #53768	; 0xd208
 8004bd8:	f7fd ff26 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD209, 0x5C);
 8004bdc:	215c      	movs	r1, #92	; 0x5c
 8004bde:	f24d 2009 	movw	r0, #53769	; 0xd209
 8004be2:	f7fd ff21 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD20A, 0x00);
 8004be6:	2100      	movs	r1, #0
 8004be8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8004bec:	f7fd ff1c 	bl	8002a28 <LCD_WriteReg>

        LCD_WriteReg(0xD20B, 0x81);
 8004bf0:	2181      	movs	r1, #129	; 0x81
 8004bf2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8004bf6:	f7fd ff17 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD20C, 0x00);
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8004c00:	f7fd ff12 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD20D, 0xA6);
 8004c04:	21a6      	movs	r1, #166	; 0xa6
 8004c06:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8004c0a:	f7fd ff0d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD20E, 0x00);
 8004c0e:	2100      	movs	r1, #0
 8004c10:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8004c14:	f7fd ff08 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD20F, 0xE5);
 8004c18:	21e5      	movs	r1, #229	; 0xe5
 8004c1a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8004c1e:	f7fd ff03 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD210, 0x01);
 8004c22:	2101      	movs	r1, #1
 8004c24:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004c28:	f7fd fefe 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD211, 0x13);
 8004c2c:	2113      	movs	r1, #19
 8004c2e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8004c32:	f7fd fef9 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD212, 0x01);
 8004c36:	2101      	movs	r1, #1
 8004c38:	f24d 2012 	movw	r0, #53778	; 0xd212
 8004c3c:	f7fd fef4 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD213, 0x54);
 8004c40:	2154      	movs	r1, #84	; 0x54
 8004c42:	f24d 2013 	movw	r0, #53779	; 0xd213
 8004c46:	f7fd feef 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD214, 0x01);
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8004c50:	f7fd feea 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD215, 0x82);
 8004c54:	2182      	movs	r1, #130	; 0x82
 8004c56:	f24d 2015 	movw	r0, #53781	; 0xd215
 8004c5a:	f7fd fee5 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD216, 0x01);
 8004c5e:	2101      	movs	r1, #1
 8004c60:	f24d 2016 	movw	r0, #53782	; 0xd216
 8004c64:	f7fd fee0 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD217, 0xCA);
 8004c68:	21ca      	movs	r1, #202	; 0xca
 8004c6a:	f24d 2017 	movw	r0, #53783	; 0xd217
 8004c6e:	f7fd fedb 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD218, 0x02);
 8004c72:	2102      	movs	r1, #2
 8004c74:	f24d 2018 	movw	r0, #53784	; 0xd218
 8004c78:	f7fd fed6 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD219, 0x00);
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8004c82:	f7fd fed1 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD21A, 0x02);
 8004c86:	2102      	movs	r1, #2
 8004c88:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8004c8c:	f7fd fecc 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD21B, 0x01);
 8004c90:	2101      	movs	r1, #1
 8004c92:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8004c96:	f7fd fec7 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD21C, 0x02);
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8004ca0:	f7fd fec2 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD21D, 0x34);
 8004ca4:	2134      	movs	r1, #52	; 0x34
 8004ca6:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8004caa:	f7fd febd 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD21E, 0x02);
 8004cae:	2102      	movs	r1, #2
 8004cb0:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8004cb4:	f7fd feb8 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD21F, 0x67);
 8004cb8:	2167      	movs	r1, #103	; 0x67
 8004cba:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8004cbe:	f7fd feb3 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD220, 0x02);
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	f24d 2020 	movw	r0, #53792	; 0xd220
 8004cc8:	f7fd feae 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD221, 0x84);
 8004ccc:	2184      	movs	r1, #132	; 0x84
 8004cce:	f24d 2021 	movw	r0, #53793	; 0xd221
 8004cd2:	f7fd fea9 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD222, 0x02);
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	f24d 2022 	movw	r0, #53794	; 0xd222
 8004cdc:	f7fd fea4 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD223, 0xA4);
 8004ce0:	21a4      	movs	r1, #164	; 0xa4
 8004ce2:	f24d 2023 	movw	r0, #53795	; 0xd223
 8004ce6:	f7fd fe9f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD224, 0x02);
 8004cea:	2102      	movs	r1, #2
 8004cec:	f24d 2024 	movw	r0, #53796	; 0xd224
 8004cf0:	f7fd fe9a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD225, 0xB7);
 8004cf4:	21b7      	movs	r1, #183	; 0xb7
 8004cf6:	f24d 2025 	movw	r0, #53797	; 0xd225
 8004cfa:	f7fd fe95 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD226, 0x02);
 8004cfe:	2102      	movs	r1, #2
 8004d00:	f24d 2026 	movw	r0, #53798	; 0xd226
 8004d04:	f7fd fe90 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD227, 0xCF);
 8004d08:	21cf      	movs	r1, #207	; 0xcf
 8004d0a:	f24d 2027 	movw	r0, #53799	; 0xd227
 8004d0e:	f7fd fe8b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD228, 0x02);
 8004d12:	2102      	movs	r1, #2
 8004d14:	f24d 2028 	movw	r0, #53800	; 0xd228
 8004d18:	f7fd fe86 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD229, 0xDE);
 8004d1c:	21de      	movs	r1, #222	; 0xde
 8004d1e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8004d22:	f7fd fe81 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD22A, 0x02);
 8004d26:	2102      	movs	r1, #2
 8004d28:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8004d2c:	f7fd fe7c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD22B, 0xF2);
 8004d30:	21f2      	movs	r1, #242	; 0xf2
 8004d32:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8004d36:	f7fd fe77 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD22C, 0x02);
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8004d40:	f7fd fe72 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD22D, 0xFE);
 8004d44:	21fe      	movs	r1, #254	; 0xfe
 8004d46:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004d4a:	f7fd fe6d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD22E, 0x03);
 8004d4e:	2103      	movs	r1, #3
 8004d50:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8004d54:	f7fd fe68 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD22F, 0x10);
 8004d58:	2110      	movs	r1, #16
 8004d5a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8004d5e:	f7fd fe63 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD230, 0x03);
 8004d62:	2103      	movs	r1, #3
 8004d64:	f24d 2030 	movw	r0, #53808	; 0xd230
 8004d68:	f7fd fe5e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD231, 0x33);
 8004d6c:	2133      	movs	r1, #51	; 0x33
 8004d6e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8004d72:	f7fd fe59 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD232, 0x03);
 8004d76:	2103      	movs	r1, #3
 8004d78:	f24d 2032 	movw	r0, #53810	; 0xd232
 8004d7c:	f7fd fe54 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD233, 0x6D);
 8004d80:	216d      	movs	r1, #109	; 0x6d
 8004d82:	f24d 2033 	movw	r0, #53811	; 0xd233
 8004d86:	f7fd fe4f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD300, 0x00);
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8004d90:	f7fd fe4a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD301, 0x33);
 8004d94:	2133      	movs	r1, #51	; 0x33
 8004d96:	f24d 3001 	movw	r0, #54017	; 0xd301
 8004d9a:	f7fd fe45 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD302, 0x00);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	f24d 3002 	movw	r0, #54018	; 0xd302
 8004da4:	f7fd fe40 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD303, 0x34);
 8004da8:	2134      	movs	r1, #52	; 0x34
 8004daa:	f24d 3003 	movw	r0, #54019	; 0xd303
 8004dae:	f7fd fe3b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD304, 0x00);
 8004db2:	2100      	movs	r1, #0
 8004db4:	f24d 3004 	movw	r0, #54020	; 0xd304
 8004db8:	f7fd fe36 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD305, 0x3A);
 8004dbc:	213a      	movs	r1, #58	; 0x3a
 8004dbe:	f24d 3005 	movw	r0, #54021	; 0xd305
 8004dc2:	f7fd fe31 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD306, 0x00);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	f24d 3006 	movw	r0, #54022	; 0xd306
 8004dcc:	f7fd fe2c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD307, 0x4A);
 8004dd0:	214a      	movs	r1, #74	; 0x4a
 8004dd2:	f24d 3007 	movw	r0, #54023	; 0xd307
 8004dd6:	f7fd fe27 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD308, 0x00);
 8004dda:	2100      	movs	r1, #0
 8004ddc:	f24d 3008 	movw	r0, #54024	; 0xd308
 8004de0:	f7fd fe22 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD309, 0x5C);
 8004de4:	215c      	movs	r1, #92	; 0x5c
 8004de6:	f24d 3009 	movw	r0, #54025	; 0xd309
 8004dea:	f7fd fe1d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD30A, 0x00);
 8004dee:	2100      	movs	r1, #0
 8004df0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8004df4:	f7fd fe18 	bl	8002a28 <LCD_WriteReg>

        LCD_WriteReg(0xD30B, 0x81);
 8004df8:	2181      	movs	r1, #129	; 0x81
 8004dfa:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8004dfe:	f7fd fe13 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD30C, 0x00);
 8004e02:	2100      	movs	r1, #0
 8004e04:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8004e08:	f7fd fe0e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD30D, 0xA6);
 8004e0c:	21a6      	movs	r1, #166	; 0xa6
 8004e0e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8004e12:	f7fd fe09 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD30E, 0x00);
 8004e16:	2100      	movs	r1, #0
 8004e18:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8004e1c:	f7fd fe04 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD30F, 0xE5);
 8004e20:	21e5      	movs	r1, #229	; 0xe5
 8004e22:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8004e26:	f7fd fdff 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD310, 0x01);
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8004e30:	f7fd fdfa 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD311, 0x13);
 8004e34:	2113      	movs	r1, #19
 8004e36:	f24d 3011 	movw	r0, #54033	; 0xd311
 8004e3a:	f7fd fdf5 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD312, 0x01);
 8004e3e:	2101      	movs	r1, #1
 8004e40:	f24d 3012 	movw	r0, #54034	; 0xd312
 8004e44:	f7fd fdf0 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD313, 0x54);
 8004e48:	2154      	movs	r1, #84	; 0x54
 8004e4a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8004e4e:	f7fd fdeb 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD314, 0x01);
 8004e52:	2101      	movs	r1, #1
 8004e54:	f24d 3014 	movw	r0, #54036	; 0xd314
 8004e58:	f7fd fde6 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD315, 0x82);
 8004e5c:	2182      	movs	r1, #130	; 0x82
 8004e5e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8004e62:	f7fd fde1 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD316, 0x01);
 8004e66:	2101      	movs	r1, #1
 8004e68:	f24d 3016 	movw	r0, #54038	; 0xd316
 8004e6c:	f7fd fddc 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD317, 0xCA);
 8004e70:	21ca      	movs	r1, #202	; 0xca
 8004e72:	f24d 3017 	movw	r0, #54039	; 0xd317
 8004e76:	f7fd fdd7 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD318, 0x02);
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8004e80:	f7fd fdd2 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD319, 0x00);
 8004e84:	2100      	movs	r1, #0
 8004e86:	f24d 3019 	movw	r0, #54041	; 0xd319
 8004e8a:	f7fd fdcd 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD31A, 0x02);
 8004e8e:	2102      	movs	r1, #2
 8004e90:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8004e94:	f7fd fdc8 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD31B, 0x01);
 8004e98:	2101      	movs	r1, #1
 8004e9a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8004e9e:	f7fd fdc3 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD31C, 0x02);
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8004ea8:	f7fd fdbe 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD31D, 0x34);
 8004eac:	2134      	movs	r1, #52	; 0x34
 8004eae:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8004eb2:	f7fd fdb9 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD31E, 0x02);
 8004eb6:	2102      	movs	r1, #2
 8004eb8:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8004ebc:	f7fd fdb4 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD31F, 0x67);
 8004ec0:	2167      	movs	r1, #103	; 0x67
 8004ec2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8004ec6:	f7fd fdaf 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD320, 0x02);
 8004eca:	2102      	movs	r1, #2
 8004ecc:	f24d 3020 	movw	r0, #54048	; 0xd320
 8004ed0:	f7fd fdaa 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD321, 0x84);
 8004ed4:	2184      	movs	r1, #132	; 0x84
 8004ed6:	f24d 3021 	movw	r0, #54049	; 0xd321
 8004eda:	f7fd fda5 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD322, 0x02);
 8004ede:	2102      	movs	r1, #2
 8004ee0:	f24d 3022 	movw	r0, #54050	; 0xd322
 8004ee4:	f7fd fda0 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD323, 0xA4);
 8004ee8:	21a4      	movs	r1, #164	; 0xa4
 8004eea:	f24d 3023 	movw	r0, #54051	; 0xd323
 8004eee:	f7fd fd9b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD324, 0x02);
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8004ef8:	f7fd fd96 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD325, 0xB7);
 8004efc:	21b7      	movs	r1, #183	; 0xb7
 8004efe:	f24d 3025 	movw	r0, #54053	; 0xd325
 8004f02:	f7fd fd91 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD326, 0x02);
 8004f06:	2102      	movs	r1, #2
 8004f08:	f24d 3026 	movw	r0, #54054	; 0xd326
 8004f0c:	f7fd fd8c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD327, 0xCF);
 8004f10:	21cf      	movs	r1, #207	; 0xcf
 8004f12:	f24d 3027 	movw	r0, #54055	; 0xd327
 8004f16:	f7fd fd87 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD328, 0x02);
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8004f20:	f7fd fd82 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD329, 0xDE);
 8004f24:	21de      	movs	r1, #222	; 0xde
 8004f26:	f24d 3029 	movw	r0, #54057	; 0xd329
 8004f2a:	f7fd fd7d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD32A, 0x02);
 8004f2e:	2102      	movs	r1, #2
 8004f30:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8004f34:	f7fd fd78 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD32B, 0xF2);
 8004f38:	21f2      	movs	r1, #242	; 0xf2
 8004f3a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8004f3e:	f7fd fd73 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD32C, 0x02);
 8004f42:	2102      	movs	r1, #2
 8004f44:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8004f48:	f7fd fd6e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD32D, 0xFE);
 8004f4c:	21fe      	movs	r1, #254	; 0xfe
 8004f4e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8004f52:	f7fd fd69 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD32E, 0x03);
 8004f56:	2103      	movs	r1, #3
 8004f58:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8004f5c:	f7fd fd64 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD32F, 0x10);
 8004f60:	2110      	movs	r1, #16
 8004f62:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8004f66:	f7fd fd5f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD330, 0x03);
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8004f70:	f7fd fd5a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD331, 0x33);
 8004f74:	2133      	movs	r1, #51	; 0x33
 8004f76:	f24d 3031 	movw	r0, #54065	; 0xd331
 8004f7a:	f7fd fd55 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD332, 0x03);
 8004f7e:	2103      	movs	r1, #3
 8004f80:	f24d 3032 	movw	r0, #54066	; 0xd332
 8004f84:	f7fd fd50 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD333, 0x6D);
 8004f88:	216d      	movs	r1, #109	; 0x6d
 8004f8a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8004f8e:	f7fd fd4b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD400, 0x00);
 8004f92:	2100      	movs	r1, #0
 8004f94:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8004f98:	f7fd fd46 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD401, 0x33);
 8004f9c:	2133      	movs	r1, #51	; 0x33
 8004f9e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8004fa2:	f7fd fd41 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD402, 0x00);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	f24d 4002 	movw	r0, #54274	; 0xd402
 8004fac:	f7fd fd3c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD403, 0x34);
 8004fb0:	2134      	movs	r1, #52	; 0x34
 8004fb2:	f24d 4003 	movw	r0, #54275	; 0xd403
 8004fb6:	f7fd fd37 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD404, 0x00);
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f24d 4004 	movw	r0, #54276	; 0xd404
 8004fc0:	f7fd fd32 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD405, 0x3A);
 8004fc4:	213a      	movs	r1, #58	; 0x3a
 8004fc6:	f24d 4005 	movw	r0, #54277	; 0xd405
 8004fca:	f7fd fd2d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD406, 0x00);
 8004fce:	2100      	movs	r1, #0
 8004fd0:	f24d 4006 	movw	r0, #54278	; 0xd406
 8004fd4:	f7fd fd28 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD407, 0x4A);
 8004fd8:	214a      	movs	r1, #74	; 0x4a
 8004fda:	f24d 4007 	movw	r0, #54279	; 0xd407
 8004fde:	f7fd fd23 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD408, 0x00);
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	f24d 4008 	movw	r0, #54280	; 0xd408
 8004fe8:	f7fd fd1e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD409, 0x5C);
 8004fec:	215c      	movs	r1, #92	; 0x5c
 8004fee:	f24d 4009 	movw	r0, #54281	; 0xd409
 8004ff2:	f7fd fd19 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD40A, 0x00);
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8004ffc:	f7fd fd14 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD40B, 0x81);
 8005000:	2181      	movs	r1, #129	; 0x81
 8005002:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8005006:	f7fd fd0f 	bl	8002a28 <LCD_WriteReg>

        LCD_WriteReg(0xD40C, 0x00);
 800500a:	2100      	movs	r1, #0
 800500c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8005010:	f7fd fd0a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD40D, 0xA6);
 8005014:	21a6      	movs	r1, #166	; 0xa6
 8005016:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800501a:	f7fd fd05 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD40E, 0x00);
 800501e:	2100      	movs	r1, #0
 8005020:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8005024:	f7fd fd00 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD40F, 0xE5);
 8005028:	21e5      	movs	r1, #229	; 0xe5
 800502a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800502e:	f7fd fcfb 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD410, 0x01);
 8005032:	2101      	movs	r1, #1
 8005034:	f24d 4010 	movw	r0, #54288	; 0xd410
 8005038:	f7fd fcf6 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD411, 0x13);
 800503c:	2113      	movs	r1, #19
 800503e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8005042:	f7fd fcf1 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD412, 0x01);
 8005046:	2101      	movs	r1, #1
 8005048:	f24d 4012 	movw	r0, #54290	; 0xd412
 800504c:	f7fd fcec 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD413, 0x54);
 8005050:	2154      	movs	r1, #84	; 0x54
 8005052:	f24d 4013 	movw	r0, #54291	; 0xd413
 8005056:	f7fd fce7 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD414, 0x01);
 800505a:	2101      	movs	r1, #1
 800505c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8005060:	f7fd fce2 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD415, 0x82);
 8005064:	2182      	movs	r1, #130	; 0x82
 8005066:	f24d 4015 	movw	r0, #54293	; 0xd415
 800506a:	f7fd fcdd 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD416, 0x01);
 800506e:	2101      	movs	r1, #1
 8005070:	f24d 4016 	movw	r0, #54294	; 0xd416
 8005074:	f7fd fcd8 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD417, 0xCA);
 8005078:	21ca      	movs	r1, #202	; 0xca
 800507a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800507e:	f7fd fcd3 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD418, 0x02);
 8005082:	2102      	movs	r1, #2
 8005084:	f24d 4018 	movw	r0, #54296	; 0xd418
 8005088:	f7fd fcce 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD419, 0x00);
 800508c:	2100      	movs	r1, #0
 800508e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8005092:	f7fd fcc9 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD41A, 0x02);
 8005096:	2102      	movs	r1, #2
 8005098:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800509c:	f7fd fcc4 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD41B, 0x01);
 80050a0:	2101      	movs	r1, #1
 80050a2:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80050a6:	f7fd fcbf 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD41C, 0x02);
 80050aa:	2102      	movs	r1, #2
 80050ac:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80050b0:	f7fd fcba 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD41D, 0x34);
 80050b4:	2134      	movs	r1, #52	; 0x34
 80050b6:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80050ba:	f7fd fcb5 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD41E, 0x02);
 80050be:	2102      	movs	r1, #2
 80050c0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80050c4:	f7fd fcb0 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD41F, 0x67);
 80050c8:	2167      	movs	r1, #103	; 0x67
 80050ca:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80050ce:	f7fd fcab 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD420, 0x02);
 80050d2:	2102      	movs	r1, #2
 80050d4:	f24d 4020 	movw	r0, #54304	; 0xd420
 80050d8:	f7fd fca6 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD421, 0x84);
 80050dc:	2184      	movs	r1, #132	; 0x84
 80050de:	f24d 4021 	movw	r0, #54305	; 0xd421
 80050e2:	f7fd fca1 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD422, 0x02);
 80050e6:	2102      	movs	r1, #2
 80050e8:	f24d 4022 	movw	r0, #54306	; 0xd422
 80050ec:	f7fd fc9c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD423, 0xA4);
 80050f0:	21a4      	movs	r1, #164	; 0xa4
 80050f2:	f24d 4023 	movw	r0, #54307	; 0xd423
 80050f6:	f7fd fc97 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD424, 0x02);
 80050fa:	2102      	movs	r1, #2
 80050fc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8005100:	f7fd fc92 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD425, 0xB7);
 8005104:	21b7      	movs	r1, #183	; 0xb7
 8005106:	f24d 4025 	movw	r0, #54309	; 0xd425
 800510a:	f7fd fc8d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD426, 0x02);
 800510e:	2102      	movs	r1, #2
 8005110:	f24d 4026 	movw	r0, #54310	; 0xd426
 8005114:	f7fd fc88 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD427, 0xCF);
 8005118:	21cf      	movs	r1, #207	; 0xcf
 800511a:	f24d 4027 	movw	r0, #54311	; 0xd427
 800511e:	f7fd fc83 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD428, 0x02);
 8005122:	2102      	movs	r1, #2
 8005124:	f24d 4028 	movw	r0, #54312	; 0xd428
 8005128:	f7fd fc7e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD429, 0xDE);
 800512c:	21de      	movs	r1, #222	; 0xde
 800512e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8005132:	f7fd fc79 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD42A, 0x02);
 8005136:	2102      	movs	r1, #2
 8005138:	f24d 402a 	movw	r0, #54314	; 0xd42a
 800513c:	f7fd fc74 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD42B, 0xF2);
 8005140:	21f2      	movs	r1, #242	; 0xf2
 8005142:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8005146:	f7fd fc6f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD42C, 0x02);
 800514a:	2102      	movs	r1, #2
 800514c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8005150:	f7fd fc6a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD42D, 0xFE);
 8005154:	21fe      	movs	r1, #254	; 0xfe
 8005156:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800515a:	f7fd fc65 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD42E, 0x03);
 800515e:	2103      	movs	r1, #3
 8005160:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8005164:	f7fd fc60 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD42F, 0x10);
 8005168:	2110      	movs	r1, #16
 800516a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800516e:	f7fd fc5b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD430, 0x03);
 8005172:	2103      	movs	r1, #3
 8005174:	f24d 4030 	movw	r0, #54320	; 0xd430
 8005178:	f7fd fc56 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD431, 0x33);
 800517c:	2133      	movs	r1, #51	; 0x33
 800517e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8005182:	f7fd fc51 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD432, 0x03);
 8005186:	2103      	movs	r1, #3
 8005188:	f24d 4032 	movw	r0, #54322	; 0xd432
 800518c:	f7fd fc4c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD433, 0x6D);
 8005190:	216d      	movs	r1, #109	; 0x6d
 8005192:	f24d 4033 	movw	r0, #54323	; 0xd433
 8005196:	f7fd fc47 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD500, 0x00);
 800519a:	2100      	movs	r1, #0
 800519c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80051a0:	f7fd fc42 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD501, 0x33);
 80051a4:	2133      	movs	r1, #51	; 0x33
 80051a6:	f24d 5001 	movw	r0, #54529	; 0xd501
 80051aa:	f7fd fc3d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD502, 0x00);
 80051ae:	2100      	movs	r1, #0
 80051b0:	f24d 5002 	movw	r0, #54530	; 0xd502
 80051b4:	f7fd fc38 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD503, 0x34);
 80051b8:	2134      	movs	r1, #52	; 0x34
 80051ba:	f24d 5003 	movw	r0, #54531	; 0xd503
 80051be:	f7fd fc33 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD504, 0x00);
 80051c2:	2100      	movs	r1, #0
 80051c4:	f24d 5004 	movw	r0, #54532	; 0xd504
 80051c8:	f7fd fc2e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD505, 0x3A);
 80051cc:	213a      	movs	r1, #58	; 0x3a
 80051ce:	f24d 5005 	movw	r0, #54533	; 0xd505
 80051d2:	f7fd fc29 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD506, 0x00);
 80051d6:	2100      	movs	r1, #0
 80051d8:	f24d 5006 	movw	r0, #54534	; 0xd506
 80051dc:	f7fd fc24 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD507, 0x4A);
 80051e0:	214a      	movs	r1, #74	; 0x4a
 80051e2:	f24d 5007 	movw	r0, #54535	; 0xd507
 80051e6:	f7fd fc1f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD508, 0x00);
 80051ea:	2100      	movs	r1, #0
 80051ec:	f24d 5008 	movw	r0, #54536	; 0xd508
 80051f0:	f7fd fc1a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD509, 0x5C);
 80051f4:	215c      	movs	r1, #92	; 0x5c
 80051f6:	f24d 5009 	movw	r0, #54537	; 0xd509
 80051fa:	f7fd fc15 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD50A, 0x00);
 80051fe:	2100      	movs	r1, #0
 8005200:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8005204:	f7fd fc10 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD50B, 0x81);
 8005208:	2181      	movs	r1, #129	; 0x81
 800520a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 800520e:	f7fd fc0b 	bl	8002a28 <LCD_WriteReg>

        LCD_WriteReg(0xD50C, 0x00);
 8005212:	2100      	movs	r1, #0
 8005214:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8005218:	f7fd fc06 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD50D, 0xA6);
 800521c:	21a6      	movs	r1, #166	; 0xa6
 800521e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8005222:	f7fd fc01 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD50E, 0x00);
 8005226:	2100      	movs	r1, #0
 8005228:	f24d 500e 	movw	r0, #54542	; 0xd50e
 800522c:	f7fd fbfc 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD50F, 0xE5);
 8005230:	21e5      	movs	r1, #229	; 0xe5
 8005232:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8005236:	f7fd fbf7 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD510, 0x01);
 800523a:	2101      	movs	r1, #1
 800523c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8005240:	f7fd fbf2 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD511, 0x13);
 8005244:	2113      	movs	r1, #19
 8005246:	f24d 5011 	movw	r0, #54545	; 0xd511
 800524a:	f7fd fbed 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD512, 0x01);
 800524e:	2101      	movs	r1, #1
 8005250:	f24d 5012 	movw	r0, #54546	; 0xd512
 8005254:	f7fd fbe8 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD513, 0x54);
 8005258:	2154      	movs	r1, #84	; 0x54
 800525a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800525e:	f7fd fbe3 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD514, 0x01);
 8005262:	2101      	movs	r1, #1
 8005264:	f24d 5014 	movw	r0, #54548	; 0xd514
 8005268:	f7fd fbde 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD515, 0x82);
 800526c:	2182      	movs	r1, #130	; 0x82
 800526e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8005272:	f7fd fbd9 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD516, 0x01);
 8005276:	2101      	movs	r1, #1
 8005278:	f24d 5016 	movw	r0, #54550	; 0xd516
 800527c:	f7fd fbd4 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD517, 0xCA);
 8005280:	21ca      	movs	r1, #202	; 0xca
 8005282:	f24d 5017 	movw	r0, #54551	; 0xd517
 8005286:	f7fd fbcf 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD518, 0x02);
 800528a:	2102      	movs	r1, #2
 800528c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8005290:	f7fd fbca 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD519, 0x00);
 8005294:	2100      	movs	r1, #0
 8005296:	f24d 5019 	movw	r0, #54553	; 0xd519
 800529a:	f7fd fbc5 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD51A, 0x02);
 800529e:	2102      	movs	r1, #2
 80052a0:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80052a4:	f7fd fbc0 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD51B, 0x01);
 80052a8:	2101      	movs	r1, #1
 80052aa:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80052ae:	f7fd fbbb 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD51C, 0x02);
 80052b2:	2102      	movs	r1, #2
 80052b4:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80052b8:	f7fd fbb6 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD51D, 0x34);
 80052bc:	2134      	movs	r1, #52	; 0x34
 80052be:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80052c2:	f7fd fbb1 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD51E, 0x02);
 80052c6:	2102      	movs	r1, #2
 80052c8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80052cc:	f7fd fbac 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD51F, 0x67);
 80052d0:	2167      	movs	r1, #103	; 0x67
 80052d2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80052d6:	f7fd fba7 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD520, 0x02);
 80052da:	2102      	movs	r1, #2
 80052dc:	f24d 5020 	movw	r0, #54560	; 0xd520
 80052e0:	f7fd fba2 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD521, 0x84);
 80052e4:	2184      	movs	r1, #132	; 0x84
 80052e6:	f24d 5021 	movw	r0, #54561	; 0xd521
 80052ea:	f7fd fb9d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD522, 0x02);
 80052ee:	2102      	movs	r1, #2
 80052f0:	f24d 5022 	movw	r0, #54562	; 0xd522
 80052f4:	f7fd fb98 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD523, 0xA4);
 80052f8:	21a4      	movs	r1, #164	; 0xa4
 80052fa:	f24d 5023 	movw	r0, #54563	; 0xd523
 80052fe:	f7fd fb93 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD524, 0x02);
 8005302:	2102      	movs	r1, #2
 8005304:	f24d 5024 	movw	r0, #54564	; 0xd524
 8005308:	f7fd fb8e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD525, 0xB7);
 800530c:	21b7      	movs	r1, #183	; 0xb7
 800530e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8005312:	f7fd fb89 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD526, 0x02);
 8005316:	2102      	movs	r1, #2
 8005318:	f24d 5026 	movw	r0, #54566	; 0xd526
 800531c:	f7fd fb84 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD527, 0xCF);
 8005320:	21cf      	movs	r1, #207	; 0xcf
 8005322:	f24d 5027 	movw	r0, #54567	; 0xd527
 8005326:	f7fd fb7f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD528, 0x02);
 800532a:	2102      	movs	r1, #2
 800532c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8005330:	f7fd fb7a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD529, 0xDE);
 8005334:	21de      	movs	r1, #222	; 0xde
 8005336:	f24d 5029 	movw	r0, #54569	; 0xd529
 800533a:	f7fd fb75 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD52A, 0x02);
 800533e:	2102      	movs	r1, #2
 8005340:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8005344:	f7fd fb70 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD52B, 0xF2);
 8005348:	21f2      	movs	r1, #242	; 0xf2
 800534a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800534e:	f7fd fb6b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD52C, 0x02);
 8005352:	2102      	movs	r1, #2
 8005354:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8005358:	f7fd fb66 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD52D, 0xFE);
 800535c:	21fe      	movs	r1, #254	; 0xfe
 800535e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8005362:	f7fd fb61 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD52E, 0x03);
 8005366:	2103      	movs	r1, #3
 8005368:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800536c:	f7fd fb5c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD52F, 0x10);
 8005370:	2110      	movs	r1, #16
 8005372:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8005376:	f7fd fb57 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD530, 0x03);
 800537a:	2103      	movs	r1, #3
 800537c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8005380:	f7fd fb52 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD531, 0x33);
 8005384:	2133      	movs	r1, #51	; 0x33
 8005386:	f24d 5031 	movw	r0, #54577	; 0xd531
 800538a:	f7fd fb4d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD532, 0x03);
 800538e:	2103      	movs	r1, #3
 8005390:	f24d 5032 	movw	r0, #54578	; 0xd532
 8005394:	f7fd fb48 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD533, 0x6D);
 8005398:	216d      	movs	r1, #109	; 0x6d
 800539a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800539e:	f7fd fb43 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD600, 0x00);
 80053a2:	2100      	movs	r1, #0
 80053a4:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80053a8:	f7fd fb3e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD601, 0x33);
 80053ac:	2133      	movs	r1, #51	; 0x33
 80053ae:	f24d 6001 	movw	r0, #54785	; 0xd601
 80053b2:	f7fd fb39 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD602, 0x00);
 80053b6:	2100      	movs	r1, #0
 80053b8:	f24d 6002 	movw	r0, #54786	; 0xd602
 80053bc:	f7fd fb34 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD603, 0x34);
 80053c0:	2134      	movs	r1, #52	; 0x34
 80053c2:	f24d 6003 	movw	r0, #54787	; 0xd603
 80053c6:	f7fd fb2f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD604, 0x00);
 80053ca:	2100      	movs	r1, #0
 80053cc:	f24d 6004 	movw	r0, #54788	; 0xd604
 80053d0:	f7fd fb2a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD605, 0x3A);
 80053d4:	213a      	movs	r1, #58	; 0x3a
 80053d6:	f24d 6005 	movw	r0, #54789	; 0xd605
 80053da:	f7fd fb25 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD606, 0x00);
 80053de:	2100      	movs	r1, #0
 80053e0:	f24d 6006 	movw	r0, #54790	; 0xd606
 80053e4:	f7fd fb20 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD607, 0x4A);
 80053e8:	214a      	movs	r1, #74	; 0x4a
 80053ea:	f24d 6007 	movw	r0, #54791	; 0xd607
 80053ee:	f7fd fb1b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD608, 0x00);
 80053f2:	2100      	movs	r1, #0
 80053f4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80053f8:	f7fd fb16 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD609, 0x5C);
 80053fc:	215c      	movs	r1, #92	; 0x5c
 80053fe:	f24d 6009 	movw	r0, #54793	; 0xd609
 8005402:	f7fd fb11 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD60A, 0x00);
 8005406:	2100      	movs	r1, #0
 8005408:	f24d 600a 	movw	r0, #54794	; 0xd60a
 800540c:	f7fd fb0c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD60B, 0x81);
 8005410:	2181      	movs	r1, #129	; 0x81
 8005412:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8005416:	f7fd fb07 	bl	8002a28 <LCD_WriteReg>

        LCD_WriteReg(0xD60C, 0x00);
 800541a:	2100      	movs	r1, #0
 800541c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8005420:	f7fd fb02 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD60D, 0xA6);
 8005424:	21a6      	movs	r1, #166	; 0xa6
 8005426:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800542a:	f7fd fafd 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD60E, 0x00);
 800542e:	2100      	movs	r1, #0
 8005430:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8005434:	f7fd faf8 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD60F, 0xE5);
 8005438:	21e5      	movs	r1, #229	; 0xe5
 800543a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800543e:	f7fd faf3 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD610, 0x01);
 8005442:	2101      	movs	r1, #1
 8005444:	f24d 6010 	movw	r0, #54800	; 0xd610
 8005448:	f7fd faee 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD611, 0x13);
 800544c:	2113      	movs	r1, #19
 800544e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8005452:	f7fd fae9 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD612, 0x01);
 8005456:	2101      	movs	r1, #1
 8005458:	f24d 6012 	movw	r0, #54802	; 0xd612
 800545c:	f7fd fae4 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD613, 0x54);
 8005460:	2154      	movs	r1, #84	; 0x54
 8005462:	f24d 6013 	movw	r0, #54803	; 0xd613
 8005466:	f7fd fadf 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD614, 0x01);
 800546a:	2101      	movs	r1, #1
 800546c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8005470:	f7fd fada 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD615, 0x82);
 8005474:	2182      	movs	r1, #130	; 0x82
 8005476:	f24d 6015 	movw	r0, #54805	; 0xd615
 800547a:	f7fd fad5 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD616, 0x01);
 800547e:	2101      	movs	r1, #1
 8005480:	f24d 6016 	movw	r0, #54806	; 0xd616
 8005484:	f7fd fad0 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD617, 0xCA);
 8005488:	21ca      	movs	r1, #202	; 0xca
 800548a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800548e:	f7fd facb 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD618, 0x02);
 8005492:	2102      	movs	r1, #2
 8005494:	f24d 6018 	movw	r0, #54808	; 0xd618
 8005498:	f7fd fac6 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD619, 0x00);
 800549c:	2100      	movs	r1, #0
 800549e:	f24d 6019 	movw	r0, #54809	; 0xd619
 80054a2:	f7fd fac1 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD61A, 0x02);
 80054a6:	2102      	movs	r1, #2
 80054a8:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80054ac:	f7fd fabc 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD61B, 0x01);
 80054b0:	2101      	movs	r1, #1
 80054b2:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80054b6:	f7fd fab7 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD61C, 0x02);
 80054ba:	2102      	movs	r1, #2
 80054bc:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80054c0:	f7fd fab2 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD61D, 0x34);
 80054c4:	2134      	movs	r1, #52	; 0x34
 80054c6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80054ca:	f7fd faad 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD61E, 0x02);
 80054ce:	2102      	movs	r1, #2
 80054d0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80054d4:	f7fd faa8 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD61F, 0x67);
 80054d8:	2167      	movs	r1, #103	; 0x67
 80054da:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80054de:	f7fd faa3 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD620, 0x02);
 80054e2:	2102      	movs	r1, #2
 80054e4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80054e8:	f7fd fa9e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD621, 0x84);
 80054ec:	2184      	movs	r1, #132	; 0x84
 80054ee:	f24d 6021 	movw	r0, #54817	; 0xd621
 80054f2:	f7fd fa99 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD622, 0x02);
 80054f6:	2102      	movs	r1, #2
 80054f8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80054fc:	f7fd fa94 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD623, 0xA4);
 8005500:	21a4      	movs	r1, #164	; 0xa4
 8005502:	f24d 6023 	movw	r0, #54819	; 0xd623
 8005506:	f7fd fa8f 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD624, 0x02);
 800550a:	2102      	movs	r1, #2
 800550c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8005510:	f7fd fa8a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD625, 0xB7);
 8005514:	21b7      	movs	r1, #183	; 0xb7
 8005516:	f24d 6025 	movw	r0, #54821	; 0xd625
 800551a:	f7fd fa85 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD626, 0x02);
 800551e:	2102      	movs	r1, #2
 8005520:	f24d 6026 	movw	r0, #54822	; 0xd626
 8005524:	f7fd fa80 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD627, 0xCF);
 8005528:	21cf      	movs	r1, #207	; 0xcf
 800552a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800552e:	f7fd fa7b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD628, 0x02);
 8005532:	2102      	movs	r1, #2
 8005534:	f24d 6028 	movw	r0, #54824	; 0xd628
 8005538:	f7fd fa76 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD629, 0xDE);
 800553c:	21de      	movs	r1, #222	; 0xde
 800553e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8005542:	f7fd fa71 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD62A, 0x02);
 8005546:	2102      	movs	r1, #2
 8005548:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800554c:	f7fd fa6c 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD62B, 0xF2);
 8005550:	21f2      	movs	r1, #242	; 0xf2
 8005552:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8005556:	f7fd fa67 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD62C, 0x02);
 800555a:	2102      	movs	r1, #2
 800555c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8005560:	f7fd fa62 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD62D, 0xFE);
 8005564:	21fe      	movs	r1, #254	; 0xfe
 8005566:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800556a:	f7fd fa5d 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD62E, 0x03);
 800556e:	2103      	movs	r1, #3
 8005570:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8005574:	f7fd fa58 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD62F, 0x10);
 8005578:	2110      	movs	r1, #16
 800557a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800557e:	f7fd fa53 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD630, 0x03);
 8005582:	2103      	movs	r1, #3
 8005584:	f24d 6030 	movw	r0, #54832	; 0xd630
 8005588:	f7fd fa4e 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD631, 0x33);
 800558c:	2133      	movs	r1, #51	; 0x33
 800558e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8005592:	f7fd fa49 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD632, 0x03);
 8005596:	2103      	movs	r1, #3
 8005598:	f24d 6032 	movw	r0, #54834	; 0xd632
 800559c:	f7fd fa44 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xD633, 0x6D);
 80055a0:	216d      	movs	r1, #109	; 0x6d
 80055a2:	f24d 6033 	movw	r0, #54835	; 0xd633
 80055a6:	f7fd fa3f 	bl	8002a28 <LCD_WriteReg>
        //LV2 Page 0 enable
        LCD_WriteReg(0xF000, 0x55);
 80055aa:	2155      	movs	r1, #85	; 0x55
 80055ac:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80055b0:	f7fd fa3a 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xF001, 0xAA);
 80055b4:	21aa      	movs	r1, #170	; 0xaa
 80055b6:	f24f 0001 	movw	r0, #61441	; 0xf001
 80055ba:	f7fd fa35 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xF002, 0x52);
 80055be:	2152      	movs	r1, #82	; 0x52
 80055c0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80055c4:	f7fd fa30 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xF003, 0x08);
 80055c8:	2108      	movs	r1, #8
 80055ca:	f24f 0003 	movw	r0, #61443	; 0xf003
 80055ce:	f7fd fa2b 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xF004, 0x00);
 80055d2:	2100      	movs	r1, #0
 80055d4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80055d8:	f7fd fa26 	bl	8002a28 <LCD_WriteReg>
        //Display control
        LCD_WriteReg(0xB100, 0xCC);
 80055dc:	21cc      	movs	r1, #204	; 0xcc
 80055de:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80055e2:	f7fd fa21 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x00);
 80055e6:	2100      	movs	r1, #0
 80055e8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80055ec:	f7fd fa1c 	bl	8002a28 <LCD_WriteReg>
        //Source hold time
        LCD_WriteReg(0xB600, 0x05);
 80055f0:	2105      	movs	r1, #5
 80055f2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80055f6:	f7fd fa17 	bl	8002a28 <LCD_WriteReg>
        //Gate EQ control
        LCD_WriteReg(0xB700, 0x70);
 80055fa:	2170      	movs	r1, #112	; 0x70
 80055fc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005600:	f7fd fa12 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB701, 0x70);
 8005604:	2170      	movs	r1, #112	; 0x70
 8005606:	f24b 7001 	movw	r0, #46849	; 0xb701
 800560a:	f7fd fa0d 	bl	8002a28 <LCD_WriteReg>
        //Source EQ control (Mode 2)
        LCD_WriteReg(0xB800, 0x01);
 800560e:	2101      	movs	r1, #1
 8005610:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8005614:	f7fd fa08 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB801, 0x03);
 8005618:	2103      	movs	r1, #3
 800561a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800561e:	f7fd fa03 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB802, 0x03);
 8005622:	2103      	movs	r1, #3
 8005624:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005628:	f7fd f9fe 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xB803, 0x03);
 800562c:	2103      	movs	r1, #3
 800562e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8005632:	f7fd f9f9 	bl	8002a28 <LCD_WriteReg>
        //Inversion mode (2-dot)
        LCD_WriteReg(0xBC00, 0x02);
 8005636:	2102      	movs	r1, #2
 8005638:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800563c:	f7fd f9f4 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xBC01, 0x00);
 8005640:	2100      	movs	r1, #0
 8005642:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8005646:	f7fd f9ef 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xBC02, 0x00);
 800564a:	2100      	movs	r1, #0
 800564c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005650:	f7fd f9ea 	bl	8002a28 <LCD_WriteReg>
        //Timing control 4H w/ 4-delay
        LCD_WriteReg(0xC900, 0xD0);
 8005654:	21d0      	movs	r1, #208	; 0xd0
 8005656:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800565a:	f7fd f9e5 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xC901, 0x02);
 800565e:	2102      	movs	r1, #2
 8005660:	f64c 1001 	movw	r0, #51457	; 0xc901
 8005664:	f7fd f9e0 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xC902, 0x50);
 8005668:	2150      	movs	r1, #80	; 0x50
 800566a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800566e:	f7fd f9db 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xC903, 0x50);
 8005672:	2150      	movs	r1, #80	; 0x50
 8005674:	f64c 1003 	movw	r0, #51459	; 0xc903
 8005678:	f7fd f9d6 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0xC904, 0x50);
 800567c:	2150      	movs	r1, #80	; 0x50
 800567e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8005682:	f7fd f9d1 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0x3500, 0x00);
 8005686:	2100      	movs	r1, #0
 8005688:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800568c:	f7fd f9cc 	bl	8002a28 <LCD_WriteReg>
        LCD_WriteReg(0x3A00, 0x55); //16-bit/pixel
 8005690:	2155      	movs	r1, #85	; 0x55
 8005692:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8005696:	f7fd f9c7 	bl	8002a28 <LCD_WriteReg>
        LCD_WR_REG(0x1100);
 800569a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800569e:	f7fd f98b 	bl	80029b8 <LCD_WR_REG>
        delay_us(120);
 80056a2:	2078      	movs	r0, #120	; 0x78
 80056a4:	f7fd f93c 	bl	8002920 <delay_us>
        LCD_WR_REG(0x2900);
 80056a8:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80056ac:	f7fd f984 	bl	80029b8 <LCD_WR_REG>
 80056b0:	e0be      	b.n	8005830 <LCD_Init+0x25c0>
    }
    else if (lcddev.id == 0X1963)
 80056b2:	4b66      	ldr	r3, [pc, #408]	; (800584c <LCD_Init+0x25dc>)
 80056b4:	889b      	ldrh	r3, [r3, #4]
 80056b6:	f641 1263 	movw	r2, #6499	; 0x1963
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f040 80b8 	bne.w	8005830 <LCD_Init+0x25c0>
    {
        LCD_WR_REG(0xE2);       //Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80056c0:	20e2      	movs	r0, #226	; 0xe2
 80056c2:	f7fd f979 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x1D);      //参数1
 80056c6:	201d      	movs	r0, #29
 80056c8:	f7fd f98a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);      //参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80056cc:	2002      	movs	r0, #2
 80056ce:	f7fd f987 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);      //参数3 Validate M and N values
 80056d2:	2004      	movs	r0, #4
 80056d4:	f7fd f984 	bl	80029e0 <LCD_WR_DATA>
        delay_us(100);
 80056d8:	2064      	movs	r0, #100	; 0x64
 80056da:	f7fd f921 	bl	8002920 <delay_us>
        LCD_WR_REG(0xE0);       // Start PLL command
 80056de:	20e0      	movs	r0, #224	; 0xe0
 80056e0:	f7fd f96a 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);      // enable PLL
 80056e4:	2001      	movs	r0, #1
 80056e6:	f7fd f97b 	bl	80029e0 <LCD_WR_DATA>
        delay_ms(10);
 80056ea:	200a      	movs	r0, #10
 80056ec:	f7fd f958 	bl	80029a0 <delay_ms>
        LCD_WR_REG(0xE0);       // Start PLL command again
 80056f0:	20e0      	movs	r0, #224	; 0xe0
 80056f2:	f7fd f961 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x03);      // now, use PLL output as system clock
 80056f6:	2003      	movs	r0, #3
 80056f8:	f7fd f972 	bl	80029e0 <LCD_WR_DATA>
        delay_ms(12);
 80056fc:	200c      	movs	r0, #12
 80056fe:	f7fd f94f 	bl	80029a0 <delay_ms>
        LCD_WR_REG(0x01);       //软复位
 8005702:	2001      	movs	r0, #1
 8005704:	f7fd f958 	bl	80029b8 <LCD_WR_REG>
        delay_ms(10);
 8005708:	200a      	movs	r0, #10
 800570a:	f7fd f949 	bl	80029a0 <delay_ms>

        LCD_WR_REG(0xE6);       //设置像素频率,33Mhz
 800570e:	20e6      	movs	r0, #230	; 0xe6
 8005710:	f7fd f952 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x2F);
 8005714:	202f      	movs	r0, #47	; 0x2f
 8005716:	f7fd f963 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 800571a:	20ff      	movs	r0, #255	; 0xff
 800571c:	f7fd f960 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 8005720:	20ff      	movs	r0, #255	; 0xff
 8005722:	f7fd f95d 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB0);       //设置LCD模式
 8005726:	20b0      	movs	r0, #176	; 0xb0
 8005728:	f7fd f946 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);      //24位模式
 800572c:	2020      	movs	r0, #32
 800572e:	f7fd f957 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //TFT 模式
 8005732:	2000      	movs	r0, #0
 8005734:	f7fd f954 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_DATA((SSD_HOR_RESOLUTION - 1) >> 8); //设置LCD水平像素
 8005738:	2003      	movs	r0, #3
 800573a:	f7fd f951 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_RESOLUTION - 1);
 800573e:	f240 301f 	movw	r0, #799	; 0x31f
 8005742:	f7fd f94d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA((SSD_VER_RESOLUTION - 1) >> 8); //设置LCD垂直像素
 8005746:	2001      	movs	r0, #1
 8005748:	f7fd f94a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_RESOLUTION - 1);
 800574c:	f240 10df 	movw	r0, #479	; 0x1df
 8005750:	f7fd f946 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //RGB序列
 8005754:	2000      	movs	r0, #0
 8005756:	f7fd f943 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB4);       //Set horizontal period
 800575a:	20b4      	movs	r0, #180	; 0xb4
 800575c:	f7fd f92c 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA((SSD_HT - 1) >> 8);
 8005760:	2004      	movs	r0, #4
 8005762:	f7fd f93d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HT - 1);
 8005766:	f240 401f 	movw	r0, #1055	; 0x41f
 800576a:	f7fd f939 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS >> 8);
 800576e:	2000      	movs	r0, #0
 8005770:	f7fd f936 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS);
 8005774:	202e      	movs	r0, #46	; 0x2e
 8005776:	f7fd f933 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_PULSE_WIDTH - 1);
 800577a:	2000      	movs	r0, #0
 800577c:	f7fd f930 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8005780:	2000      	movs	r0, #0
 8005782:	f7fd f92d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8005786:	2000      	movs	r0, #0
 8005788:	f7fd f92a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800578c:	2000      	movs	r0, #0
 800578e:	f7fd f927 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xB6);       //Set vertical period
 8005792:	20b6      	movs	r0, #182	; 0xb6
 8005794:	f7fd f910 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA((SSD_VT - 1) >> 8);
 8005798:	2002      	movs	r0, #2
 800579a:	f7fd f921 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VT - 1);
 800579e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80057a2:	f7fd f91d 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS >> 8);
 80057a6:	2000      	movs	r0, #0
 80057a8:	f7fd f91a 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS);
 80057ac:	2017      	movs	r0, #23
 80057ae:	f7fd f917 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_FRONT_PORCH - 1);
 80057b2:	2015      	movs	r0, #21
 80057b4:	f7fd f914 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80057b8:	2000      	movs	r0, #0
 80057ba:	f7fd f911 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80057be:	2000      	movs	r0, #0
 80057c0:	f7fd f90e 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xF0);       //设置SSD1963与CPU接口为16bit
 80057c4:	20f0      	movs	r0, #240	; 0xf0
 80057c6:	f7fd f8f7 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x03);      //16-bit(565 format) data for 16bpp
 80057ca:	2003      	movs	r0, #3
 80057cc:	f7fd f908 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0x29);       //开启显示
 80057d0:	2029      	movs	r0, #41	; 0x29
 80057d2:	f7fd f8f1 	bl	80029b8 <LCD_WR_REG>
        //设置PWM输出  背光通过占空比可调
        LCD_WR_REG(0xD0);       //设置自动白平衡DBC
 80057d6:	20d0      	movs	r0, #208	; 0xd0
 80057d8:	f7fd f8ee 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);      //disable
 80057dc:	2000      	movs	r0, #0
 80057de:	f7fd f8ff 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xBE);       //配置PWM输出
 80057e2:	20be      	movs	r0, #190	; 0xbe
 80057e4:	f7fd f8e8 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x05);      //1设置PWM频率
 80057e8:	2005      	movs	r0, #5
 80057ea:	f7fd f8f9 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);      //2设置PWM占空比
 80057ee:	20fe      	movs	r0, #254	; 0xfe
 80057f0:	f7fd f8f6 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);      //3设置C
 80057f4:	2001      	movs	r0, #1
 80057f6:	f7fd f8f3 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //4设置D
 80057fa:	2000      	movs	r0, #0
 80057fc:	f7fd f8f0 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //5设置E
 8005800:	2000      	movs	r0, #0
 8005802:	f7fd f8ed 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //6设置F
 8005806:	2000      	movs	r0, #0
 8005808:	f7fd f8ea 	bl	80029e0 <LCD_WR_DATA>

        LCD_WR_REG(0xB8);       //设置GPIO配置
 800580c:	20b8      	movs	r0, #184	; 0xb8
 800580e:	f7fd f8d3 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0x03);      //2个IO口设置成输出
 8005812:	2003      	movs	r0, #3
 8005814:	f7fd f8e4 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);      //GPIO使用正常的IO功能
 8005818:	2001      	movs	r0, #1
 800581a:	f7fd f8e1 	bl	80029e0 <LCD_WR_DATA>
        LCD_WR_REG(0xBA);
 800581e:	20ba      	movs	r0, #186	; 0xba
 8005820:	f7fd f8ca 	bl	80029b8 <LCD_WR_REG>
        LCD_WR_DATA(0X01);      //GPIO[1:0]=01,控制LCD方向
 8005824:	2001      	movs	r0, #1
 8005826:	f7fd f8db 	bl	80029e0 <LCD_WR_DATA>

        LCD_SSD_BackLightSet(100);//背光设置为最亮
 800582a:	2064      	movs	r0, #100	; 0x64
 800582c:	f7fd fc34 	bl	8003098 <LCD_SSD_BackLightSet>
    }

    LCD_Display_Dir(0);         //默认为竖屏
 8005830:	2000      	movs	r0, #0
 8005832:	f7fd fc65 	bl	8003100 <LCD_Display_Dir>
    LCD_LED = 1;                //点亮背光
 8005836:	4b06      	ldr	r3, [pc, #24]	; (8005850 <LCD_Init+0x25e0>)
 8005838:	2201      	movs	r2, #1
 800583a:	601a      	str	r2, [r3, #0]
    LCD_Clear(WHITE);
 800583c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005840:	f000 f808 	bl	8005854 <LCD_Clear>
}  
 8005844:	bf00      	nop
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	200002a0 	.word	0x200002a0
 8005850:	42218180 	.word	0x42218180

08005854 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(u16 color)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	80fb      	strh	r3, [r7, #6]
    u32 index = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
    u32 totalpoint = lcddev.width;
 8005862:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <LCD_Clear+0x54>)
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	60bb      	str	r3, [r7, #8]
    totalpoint *= lcddev.height;    //得到总点数
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <LCD_Clear+0x54>)
 800586a:	885b      	ldrh	r3, [r3, #2]
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	60bb      	str	r3, [r7, #8]

    LCD_SetCursor(0x00, 0x0000);    //设置光标位置
 8005876:	2100      	movs	r1, #0
 8005878:	2000      	movs	r0, #0
 800587a:	f7fd f8f9 	bl	8002a70 <LCD_SetCursor>
    LCD_WriteRAM_Prepare();         //开始写入GRAM
 800587e:	f7fd f8e9 	bl	8002a54 <LCD_WriteRAM_Prepare>

    for (index = 0; index < totalpoint; index++)
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e005      	b.n	8005894 <LCD_Clear+0x40>
    {
        LCD->LCD_RAM = color;
 8005888:	4a08      	ldr	r2, [pc, #32]	; (80058ac <LCD_Clear+0x58>)
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	429a      	cmp	r2, r3
 800589a:	d3f5      	bcc.n	8005888 <LCD_Clear+0x34>
    }
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	200002a0 	.word	0x200002a0
 80058ac:	6c0007fe 	.word	0x6c0007fe

080058b0 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(u16 x, u16 y, u8 num, u8 size, u8 mode)
{
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4604      	mov	r4, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	4611      	mov	r1, r2
 80058bc:	461a      	mov	r2, r3
 80058be:	4623      	mov	r3, r4
 80058c0:	80fb      	strh	r3, [r7, #6]
 80058c2:	4603      	mov	r3, r0
 80058c4:	80bb      	strh	r3, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	70fb      	strb	r3, [r7, #3]
 80058ca:	4613      	mov	r3, r2
 80058cc:	70bb      	strb	r3, [r7, #2]
    u8 temp, t1, t;
    u16 y0 = y;
 80058ce:	88bb      	ldrh	r3, [r7, #4]
 80058d0:	817b      	strh	r3, [r7, #10]
    u8 csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);  //得到字体一个字符对应点阵集所占的字节数
 80058d2:	78bb      	ldrb	r3, [r7, #2]
 80058d4:	08db      	lsrs	r3, r3, #3
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	78bb      	ldrb	r3, [r7, #2]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bf14      	ite	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	2300      	moveq	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	4413      	add	r3, r2
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	78ba      	ldrb	r2, [r7, #2]
 80058f2:	0852      	lsrs	r2, r2, #1
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	fb02 f303 	mul.w	r3, r2, r3
 80058fa:	727b      	strb	r3, [r7, #9]
    num = num - ' ';    //得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	3b20      	subs	r3, #32
 8005900:	70fb      	strb	r3, [r7, #3]

    for (t = 0; t < csize; t++)
 8005902:	2300      	movs	r3, #0
 8005904:	737b      	strb	r3, [r7, #13]
 8005906:	e06b      	b.n	80059e0 <LCD_ShowChar+0x130>
    {
        if (size == 12)temp = asc2_1206[num][t];        //调用1206字体
 8005908:	78bb      	ldrb	r3, [r7, #2]
 800590a:	2b0c      	cmp	r3, #12
 800590c:	d10b      	bne.n	8005926 <LCD_ShowChar+0x76>
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	7b79      	ldrb	r1, [r7, #13]
 8005912:	4839      	ldr	r0, [pc, #228]	; (80059f8 <LCD_ShowChar+0x148>)
 8005914:	4613      	mov	r3, r2
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4403      	add	r3, r0
 800591e:	440b      	add	r3, r1
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	73fb      	strb	r3, [r7, #15]
 8005924:	e019      	b.n	800595a <LCD_ShowChar+0xaa>
        else if (size == 16)temp = asc2_1608[num][t];   //调用1608字体
 8005926:	78bb      	ldrb	r3, [r7, #2]
 8005928:	2b10      	cmp	r3, #16
 800592a:	d108      	bne.n	800593e <LCD_ShowChar+0x8e>
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	7b7b      	ldrb	r3, [r7, #13]
 8005930:	4932      	ldr	r1, [pc, #200]	; (80059fc <LCD_ShowChar+0x14c>)
 8005932:	0112      	lsls	r2, r2, #4
 8005934:	440a      	add	r2, r1
 8005936:	4413      	add	r3, r2
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	73fb      	strb	r3, [r7, #15]
 800593c:	e00d      	b.n	800595a <LCD_ShowChar+0xaa>
        else if (size == 24)temp = asc2_2412[num][t];   //调用2412字体
 800593e:	78bb      	ldrb	r3, [r7, #2]
 8005940:	2b18      	cmp	r3, #24
 8005942:	d152      	bne.n	80059ea <LCD_ShowChar+0x13a>
 8005944:	78fa      	ldrb	r2, [r7, #3]
 8005946:	7b79      	ldrb	r1, [r7, #13]
 8005948:	482d      	ldr	r0, [pc, #180]	; (8005a00 <LCD_ShowChar+0x150>)
 800594a:	4613      	mov	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4403      	add	r3, r0
 8005954:	440b      	add	r3, r1
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	73fb      	strb	r3, [r7, #15]
        else return;                                    //没有的字库

        for (t1 = 0; t1 < 8; t1++)
 800595a:	2300      	movs	r3, #0
 800595c:	73bb      	strb	r3, [r7, #14]
 800595e:	e037      	b.n	80059d0 <LCD_ShowChar+0x120>
        {
            if (temp & 0x80)LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005964:	2b00      	cmp	r3, #0
 8005966:	da08      	bge.n	800597a <LCD_ShowChar+0xca>
 8005968:	4b26      	ldr	r3, [pc, #152]	; (8005a04 <LCD_ShowChar+0x154>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	b29a      	uxth	r2, r3
 800596e:	88b9      	ldrh	r1, [r7, #4]
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd fad0 	bl	8002f18 <LCD_Fast_DrawPoint>
 8005978:	e00b      	b.n	8005992 <LCD_ShowChar+0xe2>
            else if (mode == 0)LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 800597a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d107      	bne.n	8005992 <LCD_ShowChar+0xe2>
 8005982:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <LCD_ShowChar+0x158>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	b29a      	uxth	r2, r3
 8005988:	88b9      	ldrh	r1, [r7, #4]
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	4618      	mov	r0, r3
 800598e:	f7fd fac3 	bl	8002f18 <LCD_Fast_DrawPoint>

            temp <<= 1;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
            y++;
 8005998:	88bb      	ldrh	r3, [r7, #4]
 800599a:	3301      	adds	r3, #1
 800599c:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;      //超区域了
 800599e:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <LCD_ShowChar+0x15c>)
 80059a0:	885b      	ldrh	r3, [r3, #2]
 80059a2:	88ba      	ldrh	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d222      	bcs.n	80059ee <LCD_ShowChar+0x13e>

            if ((y - y0) == size)
 80059a8:	88ba      	ldrh	r2, [r7, #4]
 80059aa:	897b      	ldrh	r3, [r7, #10]
 80059ac:	1ad2      	subs	r2, r2, r3
 80059ae:	78bb      	ldrb	r3, [r7, #2]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d10a      	bne.n	80059ca <LCD_ShowChar+0x11a>
            {
                y = y0;
 80059b4:	897b      	ldrh	r3, [r7, #10]
 80059b6:	80bb      	strh	r3, [r7, #4]
                x++;
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	3301      	adds	r3, #1
 80059bc:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   //超区域了
 80059be:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <LCD_ShowChar+0x15c>)
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	88fa      	ldrh	r2, [r7, #6]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d307      	bcc.n	80059d8 <LCD_ShowChar+0x128>
 80059c8:	e012      	b.n	80059f0 <LCD_ShowChar+0x140>
        for (t1 = 0; t1 < 8; t1++)
 80059ca:	7bbb      	ldrb	r3, [r7, #14]
 80059cc:	3301      	adds	r3, #1
 80059ce:	73bb      	strb	r3, [r7, #14]
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	2b07      	cmp	r3, #7
 80059d4:	d9c4      	bls.n	8005960 <LCD_ShowChar+0xb0>
 80059d6:	e000      	b.n	80059da <LCD_ShowChar+0x12a>

                break;
 80059d8:	bf00      	nop
    for (t = 0; t < csize; t++)
 80059da:	7b7b      	ldrb	r3, [r7, #13]
 80059dc:	3301      	adds	r3, #1
 80059de:	737b      	strb	r3, [r7, #13]
 80059e0:	7b7a      	ldrb	r2, [r7, #13]
 80059e2:	7a7b      	ldrb	r3, [r7, #9]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d38f      	bcc.n	8005908 <LCD_ShowChar+0x58>
 80059e8:	e002      	b.n	80059f0 <LCD_ShowChar+0x140>
        else return;                                    //没有的字库
 80059ea:	bf00      	nop
 80059ec:	e000      	b.n	80059f0 <LCD_ShowChar+0x140>
            if (y >= lcddev.height)return;      //超区域了
 80059ee:	bf00      	nop
            }
        }
    }
}
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd90      	pop	{r4, r7, pc}
 80059f6:	bf00      	nop
 80059f8:	0800a43c 	.word	0x0800a43c
 80059fc:	0800a8b0 	.word	0x0800a8b0
 8005a00:	0800aea0 	.word	0x0800aea0
 8005a04:	2000000c 	.word	0x2000000c
 8005a08:	20000010 	.word	0x20000010
 8005a0c:	200002a0 	.word	0x200002a0

08005a10 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(u16 x, u16 y, u16 width, u16 height, u8 size, u8 *p)
{
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4623      	mov	r3, r4
 8005a20:	80fb      	strh	r3, [r7, #6]
 8005a22:	4603      	mov	r3, r0
 8005a24:	80bb      	strh	r3, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	807b      	strh	r3, [r7, #2]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	803b      	strh	r3, [r7, #0]
    u8 x0 = x;
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	73fb      	strb	r3, [r7, #15]
    width += x;
 8005a32:	887a      	ldrh	r2, [r7, #2]
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	4413      	add	r3, r2
 8005a38:	807b      	strh	r3, [r7, #2]
    height += y;
 8005a3a:	883a      	ldrh	r2, [r7, #0]
 8005a3c:	88bb      	ldrh	r3, [r7, #4]
 8005a3e:	4413      	add	r3, r2
 8005a40:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   //判断是不是非法字符!
 8005a42:	e024      	b.n	8005a8e <LCD_ShowString+0x7e>
    {
        if (x >= width)
 8005a44:	88fa      	ldrh	r2, [r7, #6]
 8005a46:	887b      	ldrh	r3, [r7, #2]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d307      	bcc.n	8005a5c <LCD_ShowString+0x4c>
        {
            x = x0;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	80fb      	strh	r3, [r7, #6]
            y += size;
 8005a50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	88bb      	ldrh	r3, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break; //退出
 8005a5c:	88ba      	ldrh	r2, [r7, #4]
 8005a5e:	883b      	ldrh	r3, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d21d      	bcs.n	8005aa0 <LCD_ShowString+0x90>

        LCD_ShowChar(x, y, *p, size, 0);
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a6c:	88b9      	ldrh	r1, [r7, #4]
 8005a6e:	88f8      	ldrh	r0, [r7, #6]
 8005a70:	2400      	movs	r4, #0
 8005a72:	9400      	str	r4, [sp, #0]
 8005a74:	f7ff ff1c 	bl	80058b0 <LCD_ShowChar>
        x += size / 2;
 8005a78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	4413      	add	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
        p++;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   //判断是不是非法字符!
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b7e      	cmp	r3, #126	; 0x7e
 8005a94:	d805      	bhi.n	8005aa2 <LCD_ShowString+0x92>
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b1f      	cmp	r3, #31
 8005a9c:	d8d2      	bhi.n	8005a44 <LCD_ShowString+0x34>
    }
}
 8005a9e:	e000      	b.n	8005aa2 <LCD_ShowString+0x92>
        if (y >= height)break; //退出
 8005aa0:	bf00      	nop
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd90      	pop	{r4, r7, pc}
	...

08005aac <__errno>:
 8005aac:	4b01      	ldr	r3, [pc, #4]	; (8005ab4 <__errno+0x8>)
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000014 	.word	0x20000014

08005ab8 <__libc_init_array>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	2600      	movs	r6, #0
 8005abc:	4d0c      	ldr	r5, [pc, #48]	; (8005af0 <__libc_init_array+0x38>)
 8005abe:	4c0d      	ldr	r4, [pc, #52]	; (8005af4 <__libc_init_array+0x3c>)
 8005ac0:	1b64      	subs	r4, r4, r5
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	42a6      	cmp	r6, r4
 8005ac6:	d109      	bne.n	8005adc <__libc_init_array+0x24>
 8005ac8:	f004 fc6c 	bl	800a3a4 <_init>
 8005acc:	2600      	movs	r6, #0
 8005ace:	4d0a      	ldr	r5, [pc, #40]	; (8005af8 <__libc_init_array+0x40>)
 8005ad0:	4c0a      	ldr	r4, [pc, #40]	; (8005afc <__libc_init_array+0x44>)
 8005ad2:	1b64      	subs	r4, r4, r5
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	42a6      	cmp	r6, r4
 8005ad8:	d105      	bne.n	8005ae6 <__libc_init_array+0x2e>
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae0:	4798      	blx	r3
 8005ae2:	3601      	adds	r6, #1
 8005ae4:	e7ee      	b.n	8005ac4 <__libc_init_array+0xc>
 8005ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aea:	4798      	blx	r3
 8005aec:	3601      	adds	r6, #1
 8005aee:	e7f2      	b.n	8005ad6 <__libc_init_array+0x1e>
 8005af0:	0800c0ac 	.word	0x0800c0ac
 8005af4:	0800c0ac 	.word	0x0800c0ac
 8005af8:	0800c0ac 	.word	0x0800c0ac
 8005afc:	0800c0b0 	.word	0x0800c0b0

08005b00 <memset>:
 8005b00:	4603      	mov	r3, r0
 8005b02:	4402      	add	r2, r0
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d100      	bne.n	8005b0a <memset+0xa>
 8005b08:	4770      	bx	lr
 8005b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0e:	e7f9      	b.n	8005b04 <memset+0x4>

08005b10 <__cvt>:
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b16:	461f      	mov	r7, r3
 8005b18:	bfbb      	ittet	lt
 8005b1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b1e:	461f      	movlt	r7, r3
 8005b20:	2300      	movge	r3, #0
 8005b22:	232d      	movlt	r3, #45	; 0x2d
 8005b24:	b088      	sub	sp, #32
 8005b26:	4614      	mov	r4, r2
 8005b28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b2c:	7013      	strb	r3, [r2, #0]
 8005b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b30:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005b34:	f023 0820 	bic.w	r8, r3, #32
 8005b38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b3c:	d005      	beq.n	8005b4a <__cvt+0x3a>
 8005b3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b42:	d100      	bne.n	8005b46 <__cvt+0x36>
 8005b44:	3501      	adds	r5, #1
 8005b46:	2302      	movs	r3, #2
 8005b48:	e000      	b.n	8005b4c <__cvt+0x3c>
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	aa07      	add	r2, sp, #28
 8005b4e:	9204      	str	r2, [sp, #16]
 8005b50:	aa06      	add	r2, sp, #24
 8005b52:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b56:	e9cd 3500 	strd	r3, r5, [sp]
 8005b5a:	4622      	mov	r2, r4
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	f001 fd9b 	bl	8007698 <_dtoa_r>
 8005b62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b66:	4606      	mov	r6, r0
 8005b68:	d102      	bne.n	8005b70 <__cvt+0x60>
 8005b6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b6c:	07db      	lsls	r3, r3, #31
 8005b6e:	d522      	bpl.n	8005bb6 <__cvt+0xa6>
 8005b70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b74:	eb06 0905 	add.w	r9, r6, r5
 8005b78:	d110      	bne.n	8005b9c <__cvt+0x8c>
 8005b7a:	7833      	ldrb	r3, [r6, #0]
 8005b7c:	2b30      	cmp	r3, #48	; 0x30
 8005b7e:	d10a      	bne.n	8005b96 <__cvt+0x86>
 8005b80:	2200      	movs	r2, #0
 8005b82:	2300      	movs	r3, #0
 8005b84:	4620      	mov	r0, r4
 8005b86:	4639      	mov	r1, r7
 8005b88:	f7fa ff7a 	bl	8000a80 <__aeabi_dcmpeq>
 8005b8c:	b918      	cbnz	r0, 8005b96 <__cvt+0x86>
 8005b8e:	f1c5 0501 	rsb	r5, r5, #1
 8005b92:	f8ca 5000 	str.w	r5, [sl]
 8005b96:	f8da 3000 	ldr.w	r3, [sl]
 8005b9a:	4499      	add	r9, r3
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	f7fa ff6c 	bl	8000a80 <__aeabi_dcmpeq>
 8005ba8:	b108      	cbz	r0, 8005bae <__cvt+0x9e>
 8005baa:	f8cd 901c 	str.w	r9, [sp, #28]
 8005bae:	2230      	movs	r2, #48	; 0x30
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	454b      	cmp	r3, r9
 8005bb4:	d307      	bcc.n	8005bc6 <__cvt+0xb6>
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	9b07      	ldr	r3, [sp, #28]
 8005bba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bbc:	1b9b      	subs	r3, r3, r6
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	b008      	add	sp, #32
 8005bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc6:	1c59      	adds	r1, r3, #1
 8005bc8:	9107      	str	r1, [sp, #28]
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	e7f0      	b.n	8005bb0 <__cvt+0xa0>

08005bce <__exponent>:
 8005bce:	4603      	mov	r3, r0
 8005bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	f803 2b02 	strb.w	r2, [r3], #2
 8005bd8:	bfb6      	itet	lt
 8005bda:	222d      	movlt	r2, #45	; 0x2d
 8005bdc:	222b      	movge	r2, #43	; 0x2b
 8005bde:	4249      	neglt	r1, r1
 8005be0:	2909      	cmp	r1, #9
 8005be2:	7042      	strb	r2, [r0, #1]
 8005be4:	dd2b      	ble.n	8005c3e <__exponent+0x70>
 8005be6:	f10d 0407 	add.w	r4, sp, #7
 8005bea:	46a4      	mov	ip, r4
 8005bec:	270a      	movs	r7, #10
 8005bee:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bf2:	460a      	mov	r2, r1
 8005bf4:	46a6      	mov	lr, r4
 8005bf6:	fb07 1516 	mls	r5, r7, r6, r1
 8005bfa:	2a63      	cmp	r2, #99	; 0x63
 8005bfc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005c00:	4631      	mov	r1, r6
 8005c02:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c0a:	dcf0      	bgt.n	8005bee <__exponent+0x20>
 8005c0c:	3130      	adds	r1, #48	; 0x30
 8005c0e:	f1ae 0502 	sub.w	r5, lr, #2
 8005c12:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c16:	4629      	mov	r1, r5
 8005c18:	1c44      	adds	r4, r0, #1
 8005c1a:	4561      	cmp	r1, ip
 8005c1c:	d30a      	bcc.n	8005c34 <__exponent+0x66>
 8005c1e:	f10d 0209 	add.w	r2, sp, #9
 8005c22:	eba2 020e 	sub.w	r2, r2, lr
 8005c26:	4565      	cmp	r5, ip
 8005c28:	bf88      	it	hi
 8005c2a:	2200      	movhi	r2, #0
 8005c2c:	4413      	add	r3, r2
 8005c2e:	1a18      	subs	r0, r3, r0
 8005c30:	b003      	add	sp, #12
 8005c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c38:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c3c:	e7ed      	b.n	8005c1a <__exponent+0x4c>
 8005c3e:	2330      	movs	r3, #48	; 0x30
 8005c40:	3130      	adds	r1, #48	; 0x30
 8005c42:	7083      	strb	r3, [r0, #2]
 8005c44:	70c1      	strb	r1, [r0, #3]
 8005c46:	1d03      	adds	r3, r0, #4
 8005c48:	e7f1      	b.n	8005c2e <__exponent+0x60>
	...

08005c4c <_printf_float>:
 8005c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c50:	b091      	sub	sp, #68	; 0x44
 8005c52:	460c      	mov	r4, r1
 8005c54:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005c58:	4616      	mov	r6, r2
 8005c5a:	461f      	mov	r7, r3
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	f002 ff65 	bl	8008b2c <_localeconv_r>
 8005c62:	6803      	ldr	r3, [r0, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	9309      	str	r3, [sp, #36]	; 0x24
 8005c68:	f7fa fade 	bl	8000228 <strlen>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	930e      	str	r3, [sp, #56]	; 0x38
 8005c70:	f8d8 3000 	ldr.w	r3, [r8]
 8005c74:	900a      	str	r0, [sp, #40]	; 0x28
 8005c76:	3307      	adds	r3, #7
 8005c78:	f023 0307 	bic.w	r3, r3, #7
 8005c7c:	f103 0208 	add.w	r2, r3, #8
 8005c80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c84:	f8d4 b000 	ldr.w	fp, [r4]
 8005c88:	f8c8 2000 	str.w	r2, [r8]
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c94:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005c98:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4b9c      	ldr	r3, [pc, #624]	; (8005f18 <_printf_float+0x2cc>)
 8005ca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ca8:	f7fa ff1c 	bl	8000ae4 <__aeabi_dcmpun>
 8005cac:	bb70      	cbnz	r0, 8005d0c <_printf_float+0xc0>
 8005cae:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4b98      	ldr	r3, [pc, #608]	; (8005f18 <_printf_float+0x2cc>)
 8005cb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cb8:	f7fa fef6 	bl	8000aa8 <__aeabi_dcmple>
 8005cbc:	bb30      	cbnz	r0, 8005d0c <_printf_float+0xc0>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	4651      	mov	r1, sl
 8005cc6:	f7fa fee5 	bl	8000a94 <__aeabi_dcmplt>
 8005cca:	b110      	cbz	r0, 8005cd2 <_printf_float+0x86>
 8005ccc:	232d      	movs	r3, #45	; 0x2d
 8005cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd2:	4b92      	ldr	r3, [pc, #584]	; (8005f1c <_printf_float+0x2d0>)
 8005cd4:	4892      	ldr	r0, [pc, #584]	; (8005f20 <_printf_float+0x2d4>)
 8005cd6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005cda:	bf94      	ite	ls
 8005cdc:	4698      	movls	r8, r3
 8005cde:	4680      	movhi	r8, r0
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	f04f 0a00 	mov.w	sl, #0
 8005ce6:	6123      	str	r3, [r4, #16]
 8005ce8:	f02b 0304 	bic.w	r3, fp, #4
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	4633      	mov	r3, r6
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	9700      	str	r7, [sp, #0]
 8005cf6:	aa0f      	add	r2, sp, #60	; 0x3c
 8005cf8:	f000 f9d4 	bl	80060a4 <_printf_common>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f040 8090 	bne.w	8005e22 <_printf_float+0x1d6>
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295
 8005d06:	b011      	add	sp, #68	; 0x44
 8005d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	4653      	mov	r3, sl
 8005d10:	4640      	mov	r0, r8
 8005d12:	4651      	mov	r1, sl
 8005d14:	f7fa fee6 	bl	8000ae4 <__aeabi_dcmpun>
 8005d18:	b148      	cbz	r0, 8005d2e <_printf_float+0xe2>
 8005d1a:	f1ba 0f00 	cmp.w	sl, #0
 8005d1e:	bfb8      	it	lt
 8005d20:	232d      	movlt	r3, #45	; 0x2d
 8005d22:	4880      	ldr	r0, [pc, #512]	; (8005f24 <_printf_float+0x2d8>)
 8005d24:	bfb8      	it	lt
 8005d26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d2a:	4b7f      	ldr	r3, [pc, #508]	; (8005f28 <_printf_float+0x2dc>)
 8005d2c:	e7d3      	b.n	8005cd6 <_printf_float+0x8a>
 8005d2e:	6863      	ldr	r3, [r4, #4]
 8005d30:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	d142      	bne.n	8005dbe <_printf_float+0x172>
 8005d38:	2306      	movs	r3, #6
 8005d3a:	6063      	str	r3, [r4, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	9206      	str	r2, [sp, #24]
 8005d40:	aa0e      	add	r2, sp, #56	; 0x38
 8005d42:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005d46:	aa0d      	add	r2, sp, #52	; 0x34
 8005d48:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005d4c:	9203      	str	r2, [sp, #12]
 8005d4e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005d52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	4642      	mov	r2, r8
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	4628      	mov	r0, r5
 8005d60:	4653      	mov	r3, sl
 8005d62:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d64:	f7ff fed4 	bl	8005b10 <__cvt>
 8005d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d6a:	4680      	mov	r8, r0
 8005d6c:	2947      	cmp	r1, #71	; 0x47
 8005d6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d70:	d108      	bne.n	8005d84 <_printf_float+0x138>
 8005d72:	1cc8      	adds	r0, r1, #3
 8005d74:	db02      	blt.n	8005d7c <_printf_float+0x130>
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	4299      	cmp	r1, r3
 8005d7a:	dd40      	ble.n	8005dfe <_printf_float+0x1b2>
 8005d7c:	f1a9 0902 	sub.w	r9, r9, #2
 8005d80:	fa5f f989 	uxtb.w	r9, r9
 8005d84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d88:	d81f      	bhi.n	8005dca <_printf_float+0x17e>
 8005d8a:	464a      	mov	r2, r9
 8005d8c:	3901      	subs	r1, #1
 8005d8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d92:	910d      	str	r1, [sp, #52]	; 0x34
 8005d94:	f7ff ff1b 	bl	8005bce <__exponent>
 8005d98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d9a:	4682      	mov	sl, r0
 8005d9c:	1813      	adds	r3, r2, r0
 8005d9e:	2a01      	cmp	r2, #1
 8005da0:	6123      	str	r3, [r4, #16]
 8005da2:	dc02      	bgt.n	8005daa <_printf_float+0x15e>
 8005da4:	6822      	ldr	r2, [r4, #0]
 8005da6:	07d2      	lsls	r2, r2, #31
 8005da8:	d501      	bpl.n	8005dae <_printf_float+0x162>
 8005daa:	3301      	adds	r3, #1
 8005dac:	6123      	str	r3, [r4, #16]
 8005dae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d09b      	beq.n	8005cee <_printf_float+0xa2>
 8005db6:	232d      	movs	r3, #45	; 0x2d
 8005db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dbc:	e797      	b.n	8005cee <_printf_float+0xa2>
 8005dbe:	2947      	cmp	r1, #71	; 0x47
 8005dc0:	d1bc      	bne.n	8005d3c <_printf_float+0xf0>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1ba      	bne.n	8005d3c <_printf_float+0xf0>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e7b7      	b.n	8005d3a <_printf_float+0xee>
 8005dca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005dce:	d118      	bne.n	8005e02 <_printf_float+0x1b6>
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	dd0b      	ble.n	8005dee <_printf_float+0x1a2>
 8005dd6:	6121      	str	r1, [r4, #16]
 8005dd8:	b913      	cbnz	r3, 8005de0 <_printf_float+0x194>
 8005dda:	6822      	ldr	r2, [r4, #0]
 8005ddc:	07d0      	lsls	r0, r2, #31
 8005dde:	d502      	bpl.n	8005de6 <_printf_float+0x19a>
 8005de0:	3301      	adds	r3, #1
 8005de2:	440b      	add	r3, r1
 8005de4:	6123      	str	r3, [r4, #16]
 8005de6:	f04f 0a00 	mov.w	sl, #0
 8005dea:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dec:	e7df      	b.n	8005dae <_printf_float+0x162>
 8005dee:	b913      	cbnz	r3, 8005df6 <_printf_float+0x1aa>
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	07d2      	lsls	r2, r2, #31
 8005df4:	d501      	bpl.n	8005dfa <_printf_float+0x1ae>
 8005df6:	3302      	adds	r3, #2
 8005df8:	e7f4      	b.n	8005de4 <_printf_float+0x198>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e7f2      	b.n	8005de4 <_printf_float+0x198>
 8005dfe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e04:	4299      	cmp	r1, r3
 8005e06:	db05      	blt.n	8005e14 <_printf_float+0x1c8>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	6121      	str	r1, [r4, #16]
 8005e0c:	07d8      	lsls	r0, r3, #31
 8005e0e:	d5ea      	bpl.n	8005de6 <_printf_float+0x19a>
 8005e10:	1c4b      	adds	r3, r1, #1
 8005e12:	e7e7      	b.n	8005de4 <_printf_float+0x198>
 8005e14:	2900      	cmp	r1, #0
 8005e16:	bfcc      	ite	gt
 8005e18:	2201      	movgt	r2, #1
 8005e1a:	f1c1 0202 	rsble	r2, r1, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	e7e0      	b.n	8005de4 <_printf_float+0x198>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	055a      	lsls	r2, r3, #21
 8005e26:	d407      	bmi.n	8005e38 <_printf_float+0x1ec>
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	4642      	mov	r2, r8
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4628      	mov	r0, r5
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	d12b      	bne.n	8005e8e <_printf_float+0x242>
 8005e36:	e764      	b.n	8005d02 <_printf_float+0xb6>
 8005e38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e3c:	f240 80dd 	bls.w	8005ffa <_printf_float+0x3ae>
 8005e40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e44:	2200      	movs	r2, #0
 8005e46:	2300      	movs	r3, #0
 8005e48:	f7fa fe1a 	bl	8000a80 <__aeabi_dcmpeq>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d033      	beq.n	8005eb8 <_printf_float+0x26c>
 8005e50:	2301      	movs	r3, #1
 8005e52:	4631      	mov	r1, r6
 8005e54:	4628      	mov	r0, r5
 8005e56:	4a35      	ldr	r2, [pc, #212]	; (8005f2c <_printf_float+0x2e0>)
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af51 	beq.w	8005d02 <_printf_float+0xb6>
 8005e60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e64:	429a      	cmp	r2, r3
 8005e66:	db02      	blt.n	8005e6e <_printf_float+0x222>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	07d8      	lsls	r0, r3, #31
 8005e6c:	d50f      	bpl.n	8005e8e <_printf_float+0x242>
 8005e6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f af42 	beq.w	8005d02 <_printf_float+0xb6>
 8005e7e:	f04f 0800 	mov.w	r8, #0
 8005e82:	f104 091a 	add.w	r9, r4, #26
 8005e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	4543      	cmp	r3, r8
 8005e8c:	dc09      	bgt.n	8005ea2 <_printf_float+0x256>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	079b      	lsls	r3, r3, #30
 8005e92:	f100 8102 	bmi.w	800609a <_printf_float+0x44e>
 8005e96:	68e0      	ldr	r0, [r4, #12]
 8005e98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e9a:	4298      	cmp	r0, r3
 8005e9c:	bfb8      	it	lt
 8005e9e:	4618      	movlt	r0, r3
 8005ea0:	e731      	b.n	8005d06 <_printf_float+0xba>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	464a      	mov	r2, r9
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b8      	blx	r7
 8005eac:	3001      	adds	r0, #1
 8005eae:	f43f af28 	beq.w	8005d02 <_printf_float+0xb6>
 8005eb2:	f108 0801 	add.w	r8, r8, #1
 8005eb6:	e7e6      	b.n	8005e86 <_printf_float+0x23a>
 8005eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	dc38      	bgt.n	8005f30 <_printf_float+0x2e4>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <_printf_float+0x2e0>)
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f af1a 	beq.w	8005d02 <_printf_float+0xb6>
 8005ece:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	d102      	bne.n	8005edc <_printf_float+0x290>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	07d9      	lsls	r1, r3, #31
 8005eda:	d5d8      	bpl.n	8005e8e <_printf_float+0x242>
 8005edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f af0b 	beq.w	8005d02 <_printf_float+0xb6>
 8005eec:	f04f 0900 	mov.w	r9, #0
 8005ef0:	f104 0a1a 	add.w	sl, r4, #26
 8005ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ef6:	425b      	negs	r3, r3
 8005ef8:	454b      	cmp	r3, r9
 8005efa:	dc01      	bgt.n	8005f00 <_printf_float+0x2b4>
 8005efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005efe:	e794      	b.n	8005e2a <_printf_float+0x1de>
 8005f00:	2301      	movs	r3, #1
 8005f02:	4652      	mov	r2, sl
 8005f04:	4631      	mov	r1, r6
 8005f06:	4628      	mov	r0, r5
 8005f08:	47b8      	blx	r7
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	f43f aef9 	beq.w	8005d02 <_printf_float+0xb6>
 8005f10:	f109 0901 	add.w	r9, r9, #1
 8005f14:	e7ee      	b.n	8005ef4 <_printf_float+0x2a8>
 8005f16:	bf00      	nop
 8005f18:	7fefffff 	.word	0x7fefffff
 8005f1c:	0800bc00 	.word	0x0800bc00
 8005f20:	0800bc04 	.word	0x0800bc04
 8005f24:	0800bc0c 	.word	0x0800bc0c
 8005f28:	0800bc08 	.word	0x0800bc08
 8005f2c:	0800bc10 	.word	0x0800bc10
 8005f30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f34:	429a      	cmp	r2, r3
 8005f36:	bfa8      	it	ge
 8005f38:	461a      	movge	r2, r3
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	4691      	mov	r9, r2
 8005f3e:	dc37      	bgt.n	8005fb0 <_printf_float+0x364>
 8005f40:	f04f 0b00 	mov.w	fp, #0
 8005f44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f48:	f104 021a 	add.w	r2, r4, #26
 8005f4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f50:	ebaa 0309 	sub.w	r3, sl, r9
 8005f54:	455b      	cmp	r3, fp
 8005f56:	dc33      	bgt.n	8005fc0 <_printf_float+0x374>
 8005f58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	db3b      	blt.n	8005fd8 <_printf_float+0x38c>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	07da      	lsls	r2, r3, #31
 8005f64:	d438      	bmi.n	8005fd8 <_printf_float+0x38c>
 8005f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f6a:	eba3 020a 	sub.w	r2, r3, sl
 8005f6e:	eba3 0901 	sub.w	r9, r3, r1
 8005f72:	4591      	cmp	r9, r2
 8005f74:	bfa8      	it	ge
 8005f76:	4691      	movge	r9, r2
 8005f78:	f1b9 0f00 	cmp.w	r9, #0
 8005f7c:	dc34      	bgt.n	8005fe8 <_printf_float+0x39c>
 8005f7e:	f04f 0800 	mov.w	r8, #0
 8005f82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f86:	f104 0a1a 	add.w	sl, r4, #26
 8005f8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	eba3 0309 	sub.w	r3, r3, r9
 8005f94:	4543      	cmp	r3, r8
 8005f96:	f77f af7a 	ble.w	8005e8e <_printf_float+0x242>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b8      	blx	r7
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	f43f aeac 	beq.w	8005d02 <_printf_float+0xb6>
 8005faa:	f108 0801 	add.w	r8, r8, #1
 8005fae:	e7ec      	b.n	8005f8a <_printf_float+0x33e>
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d1c0      	bne.n	8005f40 <_printf_float+0x2f4>
 8005fbe:	e6a0      	b.n	8005d02 <_printf_float+0xb6>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fc8:	47b8      	blx	r7
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f43f ae99 	beq.w	8005d02 <_printf_float+0xb6>
 8005fd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fd2:	f10b 0b01 	add.w	fp, fp, #1
 8005fd6:	e7b9      	b.n	8005f4c <_printf_float+0x300>
 8005fd8:	4631      	mov	r1, r6
 8005fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d1bf      	bne.n	8005f66 <_printf_float+0x31a>
 8005fe6:	e68c      	b.n	8005d02 <_printf_float+0xb6>
 8005fe8:	464b      	mov	r3, r9
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	eb08 020a 	add.w	r2, r8, sl
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d1c2      	bne.n	8005f7e <_printf_float+0x332>
 8005ff8:	e683      	b.n	8005d02 <_printf_float+0xb6>
 8005ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ffc:	2a01      	cmp	r2, #1
 8005ffe:	dc01      	bgt.n	8006004 <_printf_float+0x3b8>
 8006000:	07db      	lsls	r3, r3, #31
 8006002:	d537      	bpl.n	8006074 <_printf_float+0x428>
 8006004:	2301      	movs	r3, #1
 8006006:	4642      	mov	r2, r8
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f ae77 	beq.w	8005d02 <_printf_float+0xb6>
 8006014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006018:	4631      	mov	r1, r6
 800601a:	4628      	mov	r0, r5
 800601c:	47b8      	blx	r7
 800601e:	3001      	adds	r0, #1
 8006020:	f43f ae6f 	beq.w	8005d02 <_printf_float+0xb6>
 8006024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006028:	2200      	movs	r2, #0
 800602a:	2300      	movs	r3, #0
 800602c:	f7fa fd28 	bl	8000a80 <__aeabi_dcmpeq>
 8006030:	b9d8      	cbnz	r0, 800606a <_printf_float+0x41e>
 8006032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006034:	f108 0201 	add.w	r2, r8, #1
 8006038:	3b01      	subs	r3, #1
 800603a:	4631      	mov	r1, r6
 800603c:	4628      	mov	r0, r5
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	d10e      	bne.n	8006062 <_printf_float+0x416>
 8006044:	e65d      	b.n	8005d02 <_printf_float+0xb6>
 8006046:	2301      	movs	r3, #1
 8006048:	464a      	mov	r2, r9
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f ae56 	beq.w	8005d02 <_printf_float+0xb6>
 8006056:	f108 0801 	add.w	r8, r8, #1
 800605a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800605c:	3b01      	subs	r3, #1
 800605e:	4543      	cmp	r3, r8
 8006060:	dcf1      	bgt.n	8006046 <_printf_float+0x3fa>
 8006062:	4653      	mov	r3, sl
 8006064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006068:	e6e0      	b.n	8005e2c <_printf_float+0x1e0>
 800606a:	f04f 0800 	mov.w	r8, #0
 800606e:	f104 091a 	add.w	r9, r4, #26
 8006072:	e7f2      	b.n	800605a <_printf_float+0x40e>
 8006074:	2301      	movs	r3, #1
 8006076:	4642      	mov	r2, r8
 8006078:	e7df      	b.n	800603a <_printf_float+0x3ee>
 800607a:	2301      	movs	r3, #1
 800607c:	464a      	mov	r2, r9
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f ae3c 	beq.w	8005d02 <_printf_float+0xb6>
 800608a:	f108 0801 	add.w	r8, r8, #1
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006092:	1a5b      	subs	r3, r3, r1
 8006094:	4543      	cmp	r3, r8
 8006096:	dcf0      	bgt.n	800607a <_printf_float+0x42e>
 8006098:	e6fd      	b.n	8005e96 <_printf_float+0x24a>
 800609a:	f04f 0800 	mov.w	r8, #0
 800609e:	f104 0919 	add.w	r9, r4, #25
 80060a2:	e7f4      	b.n	800608e <_printf_float+0x442>

080060a4 <_printf_common>:
 80060a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	4616      	mov	r6, r2
 80060aa:	4699      	mov	r9, r3
 80060ac:	688a      	ldr	r2, [r1, #8]
 80060ae:	690b      	ldr	r3, [r1, #16]
 80060b0:	4607      	mov	r7, r0
 80060b2:	4293      	cmp	r3, r2
 80060b4:	bfb8      	it	lt
 80060b6:	4613      	movlt	r3, r2
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060be:	460c      	mov	r4, r1
 80060c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060c4:	b10a      	cbz	r2, 80060ca <_printf_common+0x26>
 80060c6:	3301      	adds	r3, #1
 80060c8:	6033      	str	r3, [r6, #0]
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	0699      	lsls	r1, r3, #26
 80060ce:	bf42      	ittt	mi
 80060d0:	6833      	ldrmi	r3, [r6, #0]
 80060d2:	3302      	addmi	r3, #2
 80060d4:	6033      	strmi	r3, [r6, #0]
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	f015 0506 	ands.w	r5, r5, #6
 80060dc:	d106      	bne.n	80060ec <_printf_common+0x48>
 80060de:	f104 0a19 	add.w	sl, r4, #25
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	6832      	ldr	r2, [r6, #0]
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	42ab      	cmp	r3, r5
 80060ea:	dc28      	bgt.n	800613e <_printf_common+0x9a>
 80060ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f0:	1e13      	subs	r3, r2, #0
 80060f2:	6822      	ldr	r2, [r4, #0]
 80060f4:	bf18      	it	ne
 80060f6:	2301      	movne	r3, #1
 80060f8:	0692      	lsls	r2, r2, #26
 80060fa:	d42d      	bmi.n	8006158 <_printf_common+0xb4>
 80060fc:	4649      	mov	r1, r9
 80060fe:	4638      	mov	r0, r7
 8006100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006104:	47c0      	blx	r8
 8006106:	3001      	adds	r0, #1
 8006108:	d020      	beq.n	800614c <_printf_common+0xa8>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	68e5      	ldr	r5, [r4, #12]
 800610e:	f003 0306 	and.w	r3, r3, #6
 8006112:	2b04      	cmp	r3, #4
 8006114:	bf18      	it	ne
 8006116:	2500      	movne	r5, #0
 8006118:	6832      	ldr	r2, [r6, #0]
 800611a:	f04f 0600 	mov.w	r6, #0
 800611e:	68a3      	ldr	r3, [r4, #8]
 8006120:	bf08      	it	eq
 8006122:	1aad      	subeq	r5, r5, r2
 8006124:	6922      	ldr	r2, [r4, #16]
 8006126:	bf08      	it	eq
 8006128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800612c:	4293      	cmp	r3, r2
 800612e:	bfc4      	itt	gt
 8006130:	1a9b      	subgt	r3, r3, r2
 8006132:	18ed      	addgt	r5, r5, r3
 8006134:	341a      	adds	r4, #26
 8006136:	42b5      	cmp	r5, r6
 8006138:	d11a      	bne.n	8006170 <_printf_common+0xcc>
 800613a:	2000      	movs	r0, #0
 800613c:	e008      	b.n	8006150 <_printf_common+0xac>
 800613e:	2301      	movs	r3, #1
 8006140:	4652      	mov	r2, sl
 8006142:	4649      	mov	r1, r9
 8006144:	4638      	mov	r0, r7
 8006146:	47c0      	blx	r8
 8006148:	3001      	adds	r0, #1
 800614a:	d103      	bne.n	8006154 <_printf_common+0xb0>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	3501      	adds	r5, #1
 8006156:	e7c4      	b.n	80060e2 <_printf_common+0x3e>
 8006158:	2030      	movs	r0, #48	; 0x30
 800615a:	18e1      	adds	r1, r4, r3
 800615c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006166:	4422      	add	r2, r4
 8006168:	3302      	adds	r3, #2
 800616a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800616e:	e7c5      	b.n	80060fc <_printf_common+0x58>
 8006170:	2301      	movs	r3, #1
 8006172:	4622      	mov	r2, r4
 8006174:	4649      	mov	r1, r9
 8006176:	4638      	mov	r0, r7
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d0e6      	beq.n	800614c <_printf_common+0xa8>
 800617e:	3601      	adds	r6, #1
 8006180:	e7d9      	b.n	8006136 <_printf_common+0x92>
	...

08006184 <_printf_i>:
 8006184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	7e0f      	ldrb	r7, [r1, #24]
 800618a:	4691      	mov	r9, r2
 800618c:	2f78      	cmp	r7, #120	; 0x78
 800618e:	4680      	mov	r8, r0
 8006190:	460c      	mov	r4, r1
 8006192:	469a      	mov	sl, r3
 8006194:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800619a:	d807      	bhi.n	80061ac <_printf_i+0x28>
 800619c:	2f62      	cmp	r7, #98	; 0x62
 800619e:	d80a      	bhi.n	80061b6 <_printf_i+0x32>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	f000 80d9 	beq.w	8006358 <_printf_i+0x1d4>
 80061a6:	2f58      	cmp	r7, #88	; 0x58
 80061a8:	f000 80a4 	beq.w	80062f4 <_printf_i+0x170>
 80061ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061b4:	e03a      	b.n	800622c <_printf_i+0xa8>
 80061b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ba:	2b15      	cmp	r3, #21
 80061bc:	d8f6      	bhi.n	80061ac <_printf_i+0x28>
 80061be:	a101      	add	r1, pc, #4	; (adr r1, 80061c4 <_printf_i+0x40>)
 80061c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061c4:	0800621d 	.word	0x0800621d
 80061c8:	08006231 	.word	0x08006231
 80061cc:	080061ad 	.word	0x080061ad
 80061d0:	080061ad 	.word	0x080061ad
 80061d4:	080061ad 	.word	0x080061ad
 80061d8:	080061ad 	.word	0x080061ad
 80061dc:	08006231 	.word	0x08006231
 80061e0:	080061ad 	.word	0x080061ad
 80061e4:	080061ad 	.word	0x080061ad
 80061e8:	080061ad 	.word	0x080061ad
 80061ec:	080061ad 	.word	0x080061ad
 80061f0:	0800633f 	.word	0x0800633f
 80061f4:	08006261 	.word	0x08006261
 80061f8:	08006321 	.word	0x08006321
 80061fc:	080061ad 	.word	0x080061ad
 8006200:	080061ad 	.word	0x080061ad
 8006204:	08006361 	.word	0x08006361
 8006208:	080061ad 	.word	0x080061ad
 800620c:	08006261 	.word	0x08006261
 8006210:	080061ad 	.word	0x080061ad
 8006214:	080061ad 	.word	0x080061ad
 8006218:	08006329 	.word	0x08006329
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	602a      	str	r2, [r5, #0]
 8006224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800622c:	2301      	movs	r3, #1
 800622e:	e0a4      	b.n	800637a <_printf_i+0x1f6>
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	6829      	ldr	r1, [r5, #0]
 8006234:	0606      	lsls	r6, r0, #24
 8006236:	f101 0304 	add.w	r3, r1, #4
 800623a:	d50a      	bpl.n	8006252 <_printf_i+0xce>
 800623c:	680e      	ldr	r6, [r1, #0]
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	2e00      	cmp	r6, #0
 8006242:	da03      	bge.n	800624c <_printf_i+0xc8>
 8006244:	232d      	movs	r3, #45	; 0x2d
 8006246:	4276      	negs	r6, r6
 8006248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624c:	230a      	movs	r3, #10
 800624e:	485e      	ldr	r0, [pc, #376]	; (80063c8 <_printf_i+0x244>)
 8006250:	e019      	b.n	8006286 <_printf_i+0x102>
 8006252:	680e      	ldr	r6, [r1, #0]
 8006254:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006258:	602b      	str	r3, [r5, #0]
 800625a:	bf18      	it	ne
 800625c:	b236      	sxthne	r6, r6
 800625e:	e7ef      	b.n	8006240 <_printf_i+0xbc>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	6029      	str	r1, [r5, #0]
 8006268:	0601      	lsls	r1, r0, #24
 800626a:	d501      	bpl.n	8006270 <_printf_i+0xec>
 800626c:	681e      	ldr	r6, [r3, #0]
 800626e:	e002      	b.n	8006276 <_printf_i+0xf2>
 8006270:	0646      	lsls	r6, r0, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0xe8>
 8006274:	881e      	ldrh	r6, [r3, #0]
 8006276:	2f6f      	cmp	r7, #111	; 0x6f
 8006278:	bf0c      	ite	eq
 800627a:	2308      	moveq	r3, #8
 800627c:	230a      	movne	r3, #10
 800627e:	4852      	ldr	r0, [pc, #328]	; (80063c8 <_printf_i+0x244>)
 8006280:	2100      	movs	r1, #0
 8006282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006286:	6865      	ldr	r5, [r4, #4]
 8006288:	2d00      	cmp	r5, #0
 800628a:	bfa8      	it	ge
 800628c:	6821      	ldrge	r1, [r4, #0]
 800628e:	60a5      	str	r5, [r4, #8]
 8006290:	bfa4      	itt	ge
 8006292:	f021 0104 	bicge.w	r1, r1, #4
 8006296:	6021      	strge	r1, [r4, #0]
 8006298:	b90e      	cbnz	r6, 800629e <_printf_i+0x11a>
 800629a:	2d00      	cmp	r5, #0
 800629c:	d04d      	beq.n	800633a <_printf_i+0x1b6>
 800629e:	4615      	mov	r5, r2
 80062a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80062a4:	fb03 6711 	mls	r7, r3, r1, r6
 80062a8:	5dc7      	ldrb	r7, [r0, r7]
 80062aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062ae:	4637      	mov	r7, r6
 80062b0:	42bb      	cmp	r3, r7
 80062b2:	460e      	mov	r6, r1
 80062b4:	d9f4      	bls.n	80062a0 <_printf_i+0x11c>
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d10b      	bne.n	80062d2 <_printf_i+0x14e>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	07de      	lsls	r6, r3, #31
 80062be:	d508      	bpl.n	80062d2 <_printf_i+0x14e>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	6861      	ldr	r1, [r4, #4]
 80062c4:	4299      	cmp	r1, r3
 80062c6:	bfde      	ittt	le
 80062c8:	2330      	movle	r3, #48	; 0x30
 80062ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062d2:	1b52      	subs	r2, r2, r5
 80062d4:	6122      	str	r2, [r4, #16]
 80062d6:	464b      	mov	r3, r9
 80062d8:	4621      	mov	r1, r4
 80062da:	4640      	mov	r0, r8
 80062dc:	f8cd a000 	str.w	sl, [sp]
 80062e0:	aa03      	add	r2, sp, #12
 80062e2:	f7ff fedf 	bl	80060a4 <_printf_common>
 80062e6:	3001      	adds	r0, #1
 80062e8:	d14c      	bne.n	8006384 <_printf_i+0x200>
 80062ea:	f04f 30ff 	mov.w	r0, #4294967295
 80062ee:	b004      	add	sp, #16
 80062f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f4:	4834      	ldr	r0, [pc, #208]	; (80063c8 <_printf_i+0x244>)
 80062f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062fa:	6829      	ldr	r1, [r5, #0]
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8006302:	6029      	str	r1, [r5, #0]
 8006304:	061d      	lsls	r5, r3, #24
 8006306:	d514      	bpl.n	8006332 <_printf_i+0x1ae>
 8006308:	07df      	lsls	r7, r3, #31
 800630a:	bf44      	itt	mi
 800630c:	f043 0320 	orrmi.w	r3, r3, #32
 8006310:	6023      	strmi	r3, [r4, #0]
 8006312:	b91e      	cbnz	r6, 800631c <_printf_i+0x198>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	f023 0320 	bic.w	r3, r3, #32
 800631a:	6023      	str	r3, [r4, #0]
 800631c:	2310      	movs	r3, #16
 800631e:	e7af      	b.n	8006280 <_printf_i+0xfc>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	f043 0320 	orr.w	r3, r3, #32
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	2378      	movs	r3, #120	; 0x78
 800632a:	4828      	ldr	r0, [pc, #160]	; (80063cc <_printf_i+0x248>)
 800632c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006330:	e7e3      	b.n	80062fa <_printf_i+0x176>
 8006332:	0659      	lsls	r1, r3, #25
 8006334:	bf48      	it	mi
 8006336:	b2b6      	uxthmi	r6, r6
 8006338:	e7e6      	b.n	8006308 <_printf_i+0x184>
 800633a:	4615      	mov	r5, r2
 800633c:	e7bb      	b.n	80062b6 <_printf_i+0x132>
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	6826      	ldr	r6, [r4, #0]
 8006342:	1d18      	adds	r0, r3, #4
 8006344:	6961      	ldr	r1, [r4, #20]
 8006346:	6028      	str	r0, [r5, #0]
 8006348:	0635      	lsls	r5, r6, #24
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	d501      	bpl.n	8006352 <_printf_i+0x1ce>
 800634e:	6019      	str	r1, [r3, #0]
 8006350:	e002      	b.n	8006358 <_printf_i+0x1d4>
 8006352:	0670      	lsls	r0, r6, #25
 8006354:	d5fb      	bpl.n	800634e <_printf_i+0x1ca>
 8006356:	8019      	strh	r1, [r3, #0]
 8006358:	2300      	movs	r3, #0
 800635a:	4615      	mov	r5, r2
 800635c:	6123      	str	r3, [r4, #16]
 800635e:	e7ba      	b.n	80062d6 <_printf_i+0x152>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	2100      	movs	r1, #0
 8006364:	1d1a      	adds	r2, r3, #4
 8006366:	602a      	str	r2, [r5, #0]
 8006368:	681d      	ldr	r5, [r3, #0]
 800636a:	6862      	ldr	r2, [r4, #4]
 800636c:	4628      	mov	r0, r5
 800636e:	f002 fbff 	bl	8008b70 <memchr>
 8006372:	b108      	cbz	r0, 8006378 <_printf_i+0x1f4>
 8006374:	1b40      	subs	r0, r0, r5
 8006376:	6060      	str	r0, [r4, #4]
 8006378:	6863      	ldr	r3, [r4, #4]
 800637a:	6123      	str	r3, [r4, #16]
 800637c:	2300      	movs	r3, #0
 800637e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006382:	e7a8      	b.n	80062d6 <_printf_i+0x152>
 8006384:	462a      	mov	r2, r5
 8006386:	4649      	mov	r1, r9
 8006388:	4640      	mov	r0, r8
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	47d0      	blx	sl
 800638e:	3001      	adds	r0, #1
 8006390:	d0ab      	beq.n	80062ea <_printf_i+0x166>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	079b      	lsls	r3, r3, #30
 8006396:	d413      	bmi.n	80063c0 <_printf_i+0x23c>
 8006398:	68e0      	ldr	r0, [r4, #12]
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	4298      	cmp	r0, r3
 800639e:	bfb8      	it	lt
 80063a0:	4618      	movlt	r0, r3
 80063a2:	e7a4      	b.n	80062ee <_printf_i+0x16a>
 80063a4:	2301      	movs	r3, #1
 80063a6:	4632      	mov	r2, r6
 80063a8:	4649      	mov	r1, r9
 80063aa:	4640      	mov	r0, r8
 80063ac:	47d0      	blx	sl
 80063ae:	3001      	adds	r0, #1
 80063b0:	d09b      	beq.n	80062ea <_printf_i+0x166>
 80063b2:	3501      	adds	r5, #1
 80063b4:	68e3      	ldr	r3, [r4, #12]
 80063b6:	9903      	ldr	r1, [sp, #12]
 80063b8:	1a5b      	subs	r3, r3, r1
 80063ba:	42ab      	cmp	r3, r5
 80063bc:	dcf2      	bgt.n	80063a4 <_printf_i+0x220>
 80063be:	e7eb      	b.n	8006398 <_printf_i+0x214>
 80063c0:	2500      	movs	r5, #0
 80063c2:	f104 0619 	add.w	r6, r4, #25
 80063c6:	e7f5      	b.n	80063b4 <_printf_i+0x230>
 80063c8:	0800bc12 	.word	0x0800bc12
 80063cc:	0800bc23 	.word	0x0800bc23

080063d0 <_scanf_float>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	b087      	sub	sp, #28
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	688b      	ldr	r3, [r1, #8]
 80063da:	4617      	mov	r7, r2
 80063dc:	1e5a      	subs	r2, r3, #1
 80063de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80063e2:	bf85      	ittet	hi
 80063e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80063e8:	195b      	addhi	r3, r3, r5
 80063ea:	2300      	movls	r3, #0
 80063ec:	9302      	strhi	r3, [sp, #8]
 80063ee:	bf88      	it	hi
 80063f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80063f4:	468b      	mov	fp, r1
 80063f6:	f04f 0500 	mov.w	r5, #0
 80063fa:	bf8c      	ite	hi
 80063fc:	608b      	strhi	r3, [r1, #8]
 80063fe:	9302      	strls	r3, [sp, #8]
 8006400:	680b      	ldr	r3, [r1, #0]
 8006402:	4680      	mov	r8, r0
 8006404:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006408:	f84b 3b1c 	str.w	r3, [fp], #28
 800640c:	460c      	mov	r4, r1
 800640e:	465e      	mov	r6, fp
 8006410:	46aa      	mov	sl, r5
 8006412:	46a9      	mov	r9, r5
 8006414:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006418:	9501      	str	r5, [sp, #4]
 800641a:	68a2      	ldr	r2, [r4, #8]
 800641c:	b152      	cbz	r2, 8006434 <_scanf_float+0x64>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b4e      	cmp	r3, #78	; 0x4e
 8006424:	d864      	bhi.n	80064f0 <_scanf_float+0x120>
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	d83c      	bhi.n	80064a4 <_scanf_float+0xd4>
 800642a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800642e:	b2c8      	uxtb	r0, r1
 8006430:	280e      	cmp	r0, #14
 8006432:	d93a      	bls.n	80064aa <_scanf_float+0xda>
 8006434:	f1b9 0f00 	cmp.w	r9, #0
 8006438:	d003      	beq.n	8006442 <_scanf_float+0x72>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006446:	f1ba 0f01 	cmp.w	sl, #1
 800644a:	f200 8113 	bhi.w	8006674 <_scanf_float+0x2a4>
 800644e:	455e      	cmp	r6, fp
 8006450:	f200 8105 	bhi.w	800665e <_scanf_float+0x28e>
 8006454:	2501      	movs	r5, #1
 8006456:	4628      	mov	r0, r5
 8006458:	b007      	add	sp, #28
 800645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006462:	2a0d      	cmp	r2, #13
 8006464:	d8e6      	bhi.n	8006434 <_scanf_float+0x64>
 8006466:	a101      	add	r1, pc, #4	; (adr r1, 800646c <_scanf_float+0x9c>)
 8006468:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800646c:	080065ab 	.word	0x080065ab
 8006470:	08006435 	.word	0x08006435
 8006474:	08006435 	.word	0x08006435
 8006478:	08006435 	.word	0x08006435
 800647c:	0800660b 	.word	0x0800660b
 8006480:	080065e3 	.word	0x080065e3
 8006484:	08006435 	.word	0x08006435
 8006488:	08006435 	.word	0x08006435
 800648c:	080065b9 	.word	0x080065b9
 8006490:	08006435 	.word	0x08006435
 8006494:	08006435 	.word	0x08006435
 8006498:	08006435 	.word	0x08006435
 800649c:	08006435 	.word	0x08006435
 80064a0:	08006571 	.word	0x08006571
 80064a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80064a8:	e7db      	b.n	8006462 <_scanf_float+0x92>
 80064aa:	290e      	cmp	r1, #14
 80064ac:	d8c2      	bhi.n	8006434 <_scanf_float+0x64>
 80064ae:	a001      	add	r0, pc, #4	; (adr r0, 80064b4 <_scanf_float+0xe4>)
 80064b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80064b4:	08006563 	.word	0x08006563
 80064b8:	08006435 	.word	0x08006435
 80064bc:	08006563 	.word	0x08006563
 80064c0:	080065f7 	.word	0x080065f7
 80064c4:	08006435 	.word	0x08006435
 80064c8:	08006511 	.word	0x08006511
 80064cc:	0800654d 	.word	0x0800654d
 80064d0:	0800654d 	.word	0x0800654d
 80064d4:	0800654d 	.word	0x0800654d
 80064d8:	0800654d 	.word	0x0800654d
 80064dc:	0800654d 	.word	0x0800654d
 80064e0:	0800654d 	.word	0x0800654d
 80064e4:	0800654d 	.word	0x0800654d
 80064e8:	0800654d 	.word	0x0800654d
 80064ec:	0800654d 	.word	0x0800654d
 80064f0:	2b6e      	cmp	r3, #110	; 0x6e
 80064f2:	d809      	bhi.n	8006508 <_scanf_float+0x138>
 80064f4:	2b60      	cmp	r3, #96	; 0x60
 80064f6:	d8b2      	bhi.n	800645e <_scanf_float+0x8e>
 80064f8:	2b54      	cmp	r3, #84	; 0x54
 80064fa:	d077      	beq.n	80065ec <_scanf_float+0x21c>
 80064fc:	2b59      	cmp	r3, #89	; 0x59
 80064fe:	d199      	bne.n	8006434 <_scanf_float+0x64>
 8006500:	2d07      	cmp	r5, #7
 8006502:	d197      	bne.n	8006434 <_scanf_float+0x64>
 8006504:	2508      	movs	r5, #8
 8006506:	e029      	b.n	800655c <_scanf_float+0x18c>
 8006508:	2b74      	cmp	r3, #116	; 0x74
 800650a:	d06f      	beq.n	80065ec <_scanf_float+0x21c>
 800650c:	2b79      	cmp	r3, #121	; 0x79
 800650e:	e7f6      	b.n	80064fe <_scanf_float+0x12e>
 8006510:	6821      	ldr	r1, [r4, #0]
 8006512:	05c8      	lsls	r0, r1, #23
 8006514:	d51a      	bpl.n	800654c <_scanf_float+0x17c>
 8006516:	9b02      	ldr	r3, [sp, #8]
 8006518:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800651c:	6021      	str	r1, [r4, #0]
 800651e:	f109 0901 	add.w	r9, r9, #1
 8006522:	b11b      	cbz	r3, 800652c <_scanf_float+0x15c>
 8006524:	3b01      	subs	r3, #1
 8006526:	3201      	adds	r2, #1
 8006528:	9302      	str	r3, [sp, #8]
 800652a:	60a2      	str	r2, [r4, #8]
 800652c:	68a3      	ldr	r3, [r4, #8]
 800652e:	3b01      	subs	r3, #1
 8006530:	60a3      	str	r3, [r4, #8]
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	3301      	adds	r3, #1
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3b01      	subs	r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	f340 8084 	ble.w	800664c <_scanf_float+0x27c>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	3301      	adds	r3, #1
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	e766      	b.n	800641a <_scanf_float+0x4a>
 800654c:	eb1a 0f05 	cmn.w	sl, r5
 8006550:	f47f af70 	bne.w	8006434 <_scanf_float+0x64>
 8006554:	6822      	ldr	r2, [r4, #0]
 8006556:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800655a:	6022      	str	r2, [r4, #0]
 800655c:	f806 3b01 	strb.w	r3, [r6], #1
 8006560:	e7e4      	b.n	800652c <_scanf_float+0x15c>
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	0610      	lsls	r0, r2, #24
 8006566:	f57f af65 	bpl.w	8006434 <_scanf_float+0x64>
 800656a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800656e:	e7f4      	b.n	800655a <_scanf_float+0x18a>
 8006570:	f1ba 0f00 	cmp.w	sl, #0
 8006574:	d10e      	bne.n	8006594 <_scanf_float+0x1c4>
 8006576:	f1b9 0f00 	cmp.w	r9, #0
 800657a:	d10e      	bne.n	800659a <_scanf_float+0x1ca>
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006582:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006586:	d108      	bne.n	800659a <_scanf_float+0x1ca>
 8006588:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800658c:	f04f 0a01 	mov.w	sl, #1
 8006590:	6022      	str	r2, [r4, #0]
 8006592:	e7e3      	b.n	800655c <_scanf_float+0x18c>
 8006594:	f1ba 0f02 	cmp.w	sl, #2
 8006598:	d055      	beq.n	8006646 <_scanf_float+0x276>
 800659a:	2d01      	cmp	r5, #1
 800659c:	d002      	beq.n	80065a4 <_scanf_float+0x1d4>
 800659e:	2d04      	cmp	r5, #4
 80065a0:	f47f af48 	bne.w	8006434 <_scanf_float+0x64>
 80065a4:	3501      	adds	r5, #1
 80065a6:	b2ed      	uxtb	r5, r5
 80065a8:	e7d8      	b.n	800655c <_scanf_float+0x18c>
 80065aa:	f1ba 0f01 	cmp.w	sl, #1
 80065ae:	f47f af41 	bne.w	8006434 <_scanf_float+0x64>
 80065b2:	f04f 0a02 	mov.w	sl, #2
 80065b6:	e7d1      	b.n	800655c <_scanf_float+0x18c>
 80065b8:	b97d      	cbnz	r5, 80065da <_scanf_float+0x20a>
 80065ba:	f1b9 0f00 	cmp.w	r9, #0
 80065be:	f47f af3c 	bne.w	800643a <_scanf_float+0x6a>
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80065c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065cc:	f47f af39 	bne.w	8006442 <_scanf_float+0x72>
 80065d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065d4:	2501      	movs	r5, #1
 80065d6:	6022      	str	r2, [r4, #0]
 80065d8:	e7c0      	b.n	800655c <_scanf_float+0x18c>
 80065da:	2d03      	cmp	r5, #3
 80065dc:	d0e2      	beq.n	80065a4 <_scanf_float+0x1d4>
 80065de:	2d05      	cmp	r5, #5
 80065e0:	e7de      	b.n	80065a0 <_scanf_float+0x1d0>
 80065e2:	2d02      	cmp	r5, #2
 80065e4:	f47f af26 	bne.w	8006434 <_scanf_float+0x64>
 80065e8:	2503      	movs	r5, #3
 80065ea:	e7b7      	b.n	800655c <_scanf_float+0x18c>
 80065ec:	2d06      	cmp	r5, #6
 80065ee:	f47f af21 	bne.w	8006434 <_scanf_float+0x64>
 80065f2:	2507      	movs	r5, #7
 80065f4:	e7b2      	b.n	800655c <_scanf_float+0x18c>
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	0591      	lsls	r1, r2, #22
 80065fa:	f57f af1b 	bpl.w	8006434 <_scanf_float+0x64>
 80065fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006602:	6022      	str	r2, [r4, #0]
 8006604:	f8cd 9004 	str.w	r9, [sp, #4]
 8006608:	e7a8      	b.n	800655c <_scanf_float+0x18c>
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006610:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006614:	d006      	beq.n	8006624 <_scanf_float+0x254>
 8006616:	0550      	lsls	r0, r2, #21
 8006618:	f57f af0c 	bpl.w	8006434 <_scanf_float+0x64>
 800661c:	f1b9 0f00 	cmp.w	r9, #0
 8006620:	f43f af0f 	beq.w	8006442 <_scanf_float+0x72>
 8006624:	0591      	lsls	r1, r2, #22
 8006626:	bf58      	it	pl
 8006628:	9901      	ldrpl	r1, [sp, #4]
 800662a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800662e:	bf58      	it	pl
 8006630:	eba9 0101 	subpl.w	r1, r9, r1
 8006634:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006638:	f04f 0900 	mov.w	r9, #0
 800663c:	bf58      	it	pl
 800663e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006642:	6022      	str	r2, [r4, #0]
 8006644:	e78a      	b.n	800655c <_scanf_float+0x18c>
 8006646:	f04f 0a03 	mov.w	sl, #3
 800664a:	e787      	b.n	800655c <_scanf_float+0x18c>
 800664c:	4639      	mov	r1, r7
 800664e:	4640      	mov	r0, r8
 8006650:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006654:	4798      	blx	r3
 8006656:	2800      	cmp	r0, #0
 8006658:	f43f aedf 	beq.w	800641a <_scanf_float+0x4a>
 800665c:	e6ea      	b.n	8006434 <_scanf_float+0x64>
 800665e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006662:	463a      	mov	r2, r7
 8006664:	4640      	mov	r0, r8
 8006666:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800666a:	4798      	blx	r3
 800666c:	6923      	ldr	r3, [r4, #16]
 800666e:	3b01      	subs	r3, #1
 8006670:	6123      	str	r3, [r4, #16]
 8006672:	e6ec      	b.n	800644e <_scanf_float+0x7e>
 8006674:	1e6b      	subs	r3, r5, #1
 8006676:	2b06      	cmp	r3, #6
 8006678:	d825      	bhi.n	80066c6 <_scanf_float+0x2f6>
 800667a:	2d02      	cmp	r5, #2
 800667c:	d836      	bhi.n	80066ec <_scanf_float+0x31c>
 800667e:	455e      	cmp	r6, fp
 8006680:	f67f aee8 	bls.w	8006454 <_scanf_float+0x84>
 8006684:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006688:	463a      	mov	r2, r7
 800668a:	4640      	mov	r0, r8
 800668c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006690:	4798      	blx	r3
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	3b01      	subs	r3, #1
 8006696:	6123      	str	r3, [r4, #16]
 8006698:	e7f1      	b.n	800667e <_scanf_float+0x2ae>
 800669a:	9802      	ldr	r0, [sp, #8]
 800669c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80066a4:	463a      	mov	r2, r7
 80066a6:	9002      	str	r0, [sp, #8]
 80066a8:	4640      	mov	r0, r8
 80066aa:	4798      	blx	r3
 80066ac:	6923      	ldr	r3, [r4, #16]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066b6:	fa5f fa8a 	uxtb.w	sl, sl
 80066ba:	f1ba 0f02 	cmp.w	sl, #2
 80066be:	d1ec      	bne.n	800669a <_scanf_float+0x2ca>
 80066c0:	3d03      	subs	r5, #3
 80066c2:	b2ed      	uxtb	r5, r5
 80066c4:	1b76      	subs	r6, r6, r5
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	05da      	lsls	r2, r3, #23
 80066ca:	d52f      	bpl.n	800672c <_scanf_float+0x35c>
 80066cc:	055b      	lsls	r3, r3, #21
 80066ce:	d510      	bpl.n	80066f2 <_scanf_float+0x322>
 80066d0:	455e      	cmp	r6, fp
 80066d2:	f67f aebf 	bls.w	8006454 <_scanf_float+0x84>
 80066d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066da:	463a      	mov	r2, r7
 80066dc:	4640      	mov	r0, r8
 80066de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066e2:	4798      	blx	r3
 80066e4:	6923      	ldr	r3, [r4, #16]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	e7f1      	b.n	80066d0 <_scanf_float+0x300>
 80066ec:	46aa      	mov	sl, r5
 80066ee:	9602      	str	r6, [sp, #8]
 80066f0:	e7df      	b.n	80066b2 <_scanf_float+0x2e2>
 80066f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	2965      	cmp	r1, #101	; 0x65
 80066fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80066fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	d00c      	beq.n	8006720 <_scanf_float+0x350>
 8006706:	2945      	cmp	r1, #69	; 0x45
 8006708:	d00a      	beq.n	8006720 <_scanf_float+0x350>
 800670a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800670e:	463a      	mov	r2, r7
 8006710:	4640      	mov	r0, r8
 8006712:	4798      	blx	r3
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800671a:	3b01      	subs	r3, #1
 800671c:	1eb5      	subs	r5, r6, #2
 800671e:	6123      	str	r3, [r4, #16]
 8006720:	463a      	mov	r2, r7
 8006722:	4640      	mov	r0, r8
 8006724:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006728:	4798      	blx	r3
 800672a:	462e      	mov	r6, r5
 800672c:	6825      	ldr	r5, [r4, #0]
 800672e:	f015 0510 	ands.w	r5, r5, #16
 8006732:	d155      	bne.n	80067e0 <_scanf_float+0x410>
 8006734:	7035      	strb	r5, [r6, #0]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800673c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006740:	d11b      	bne.n	800677a <_scanf_float+0x3aa>
 8006742:	9b01      	ldr	r3, [sp, #4]
 8006744:	454b      	cmp	r3, r9
 8006746:	eba3 0209 	sub.w	r2, r3, r9
 800674a:	d123      	bne.n	8006794 <_scanf_float+0x3c4>
 800674c:	2200      	movs	r2, #0
 800674e:	4659      	mov	r1, fp
 8006750:	4640      	mov	r0, r8
 8006752:	f000 fe91 	bl	8007478 <_strtod_r>
 8006756:	6822      	ldr	r2, [r4, #0]
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	f012 0f02 	tst.w	r2, #2
 800675e:	4606      	mov	r6, r0
 8006760:	460f      	mov	r7, r1
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	d021      	beq.n	80067aa <_scanf_float+0x3da>
 8006766:	1d1a      	adds	r2, r3, #4
 8006768:	9903      	ldr	r1, [sp, #12]
 800676a:	600a      	str	r2, [r1, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	e9c3 6700 	strd	r6, r7, [r3]
 8006772:	68e3      	ldr	r3, [r4, #12]
 8006774:	3301      	adds	r3, #1
 8006776:	60e3      	str	r3, [r4, #12]
 8006778:	e66d      	b.n	8006456 <_scanf_float+0x86>
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0e5      	beq.n	800674c <_scanf_float+0x37c>
 8006780:	9905      	ldr	r1, [sp, #20]
 8006782:	230a      	movs	r3, #10
 8006784:	462a      	mov	r2, r5
 8006786:	4640      	mov	r0, r8
 8006788:	3101      	adds	r1, #1
 800678a:	f000 fef7 	bl	800757c <_strtol_r>
 800678e:	9b04      	ldr	r3, [sp, #16]
 8006790:	9e05      	ldr	r6, [sp, #20]
 8006792:	1ac2      	subs	r2, r0, r3
 8006794:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006798:	429e      	cmp	r6, r3
 800679a:	bf28      	it	cs
 800679c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80067a0:	4630      	mov	r0, r6
 80067a2:	4910      	ldr	r1, [pc, #64]	; (80067e4 <_scanf_float+0x414>)
 80067a4:	f000 f83e 	bl	8006824 <siprintf>
 80067a8:	e7d0      	b.n	800674c <_scanf_float+0x37c>
 80067aa:	f012 0f04 	tst.w	r2, #4
 80067ae:	f103 0204 	add.w	r2, r3, #4
 80067b2:	d1d9      	bne.n	8006768 <_scanf_float+0x398>
 80067b4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80067b8:	f8cc 2000 	str.w	r2, [ip]
 80067bc:	f8d3 8000 	ldr.w	r8, [r3]
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	f7fa f98e 	bl	8000ae4 <__aeabi_dcmpun>
 80067c8:	b128      	cbz	r0, 80067d6 <_scanf_float+0x406>
 80067ca:	4807      	ldr	r0, [pc, #28]	; (80067e8 <_scanf_float+0x418>)
 80067cc:	f000 f826 	bl	800681c <nanf>
 80067d0:	f8c8 0000 	str.w	r0, [r8]
 80067d4:	e7cd      	b.n	8006772 <_scanf_float+0x3a2>
 80067d6:	4630      	mov	r0, r6
 80067d8:	4639      	mov	r1, r7
 80067da:	f7fa f9e1 	bl	8000ba0 <__aeabi_d2f>
 80067de:	e7f7      	b.n	80067d0 <_scanf_float+0x400>
 80067e0:	2500      	movs	r5, #0
 80067e2:	e638      	b.n	8006456 <_scanf_float+0x86>
 80067e4:	0800bc34 	.word	0x0800bc34
 80067e8:	0800c0a8 	.word	0x0800c0a8

080067ec <iprintf>:
 80067ec:	b40f      	push	{r0, r1, r2, r3}
 80067ee:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <iprintf+0x2c>)
 80067f0:	b513      	push	{r0, r1, r4, lr}
 80067f2:	681c      	ldr	r4, [r3, #0]
 80067f4:	b124      	cbz	r4, 8006800 <iprintf+0x14>
 80067f6:	69a3      	ldr	r3, [r4, #24]
 80067f8:	b913      	cbnz	r3, 8006800 <iprintf+0x14>
 80067fa:	4620      	mov	r0, r4
 80067fc:	f001 fd92 	bl	8008324 <__sinit>
 8006800:	ab05      	add	r3, sp, #20
 8006802:	4620      	mov	r0, r4
 8006804:	9a04      	ldr	r2, [sp, #16]
 8006806:	68a1      	ldr	r1, [r4, #8]
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	f003 f8f9 	bl	8009a00 <_vfiprintf_r>
 800680e:	b002      	add	sp, #8
 8006810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006814:	b004      	add	sp, #16
 8006816:	4770      	bx	lr
 8006818:	20000014 	.word	0x20000014

0800681c <nanf>:
 800681c:	4800      	ldr	r0, [pc, #0]	; (8006820 <nanf+0x4>)
 800681e:	4770      	bx	lr
 8006820:	7fc00000 	.word	0x7fc00000

08006824 <siprintf>:
 8006824:	b40e      	push	{r1, r2, r3}
 8006826:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800682a:	b500      	push	{lr}
 800682c:	b09c      	sub	sp, #112	; 0x70
 800682e:	ab1d      	add	r3, sp, #116	; 0x74
 8006830:	9002      	str	r0, [sp, #8]
 8006832:	9006      	str	r0, [sp, #24]
 8006834:	9107      	str	r1, [sp, #28]
 8006836:	9104      	str	r1, [sp, #16]
 8006838:	4808      	ldr	r0, [pc, #32]	; (800685c <siprintf+0x38>)
 800683a:	4909      	ldr	r1, [pc, #36]	; (8006860 <siprintf+0x3c>)
 800683c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006840:	9105      	str	r1, [sp, #20]
 8006842:	6800      	ldr	r0, [r0, #0]
 8006844:	a902      	add	r1, sp, #8
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	f002 ffb2 	bl	80097b0 <_svfiprintf_r>
 800684c:	2200      	movs	r2, #0
 800684e:	9b02      	ldr	r3, [sp, #8]
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	b01c      	add	sp, #112	; 0x70
 8006854:	f85d eb04 	ldr.w	lr, [sp], #4
 8006858:	b003      	add	sp, #12
 800685a:	4770      	bx	lr
 800685c:	20000014 	.word	0x20000014
 8006860:	ffff0208 	.word	0xffff0208

08006864 <sulp>:
 8006864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006868:	460f      	mov	r7, r1
 800686a:	4690      	mov	r8, r2
 800686c:	f002 fd0c 	bl	8009288 <__ulp>
 8006870:	4604      	mov	r4, r0
 8006872:	460d      	mov	r5, r1
 8006874:	f1b8 0f00 	cmp.w	r8, #0
 8006878:	d011      	beq.n	800689e <sulp+0x3a>
 800687a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800687e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006882:	2b00      	cmp	r3, #0
 8006884:	dd0b      	ble.n	800689e <sulp+0x3a>
 8006886:	2400      	movs	r4, #0
 8006888:	051b      	lsls	r3, r3, #20
 800688a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800688e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	f7f9 fe8b 	bl	80005b0 <__aeabi_dmul>
 800689a:	4604      	mov	r4, r0
 800689c:	460d      	mov	r5, r1
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080068a8 <_strtod_l>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	469b      	mov	fp, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	b09f      	sub	sp, #124	; 0x7c
 80068b2:	931a      	str	r3, [sp, #104]	; 0x68
 80068b4:	4b9e      	ldr	r3, [pc, #632]	; (8006b30 <_strtod_l+0x288>)
 80068b6:	4682      	mov	sl, r0
 80068b8:	681f      	ldr	r7, [r3, #0]
 80068ba:	460e      	mov	r6, r1
 80068bc:	4638      	mov	r0, r7
 80068be:	9215      	str	r2, [sp, #84]	; 0x54
 80068c0:	f7f9 fcb2 	bl	8000228 <strlen>
 80068c4:	f04f 0800 	mov.w	r8, #0
 80068c8:	4604      	mov	r4, r0
 80068ca:	f04f 0900 	mov.w	r9, #0
 80068ce:	9619      	str	r6, [sp, #100]	; 0x64
 80068d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068d2:	781a      	ldrb	r2, [r3, #0]
 80068d4:	2a2b      	cmp	r2, #43	; 0x2b
 80068d6:	d04c      	beq.n	8006972 <_strtod_l+0xca>
 80068d8:	d83a      	bhi.n	8006950 <_strtod_l+0xa8>
 80068da:	2a0d      	cmp	r2, #13
 80068dc:	d833      	bhi.n	8006946 <_strtod_l+0x9e>
 80068de:	2a08      	cmp	r2, #8
 80068e0:	d833      	bhi.n	800694a <_strtod_l+0xa2>
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	d03d      	beq.n	8006962 <_strtod_l+0xba>
 80068e6:	2300      	movs	r3, #0
 80068e8:	930a      	str	r3, [sp, #40]	; 0x28
 80068ea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80068ec:	782b      	ldrb	r3, [r5, #0]
 80068ee:	2b30      	cmp	r3, #48	; 0x30
 80068f0:	f040 80aa 	bne.w	8006a48 <_strtod_l+0x1a0>
 80068f4:	786b      	ldrb	r3, [r5, #1]
 80068f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068fa:	2b58      	cmp	r3, #88	; 0x58
 80068fc:	d166      	bne.n	80069cc <_strtod_l+0x124>
 80068fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006900:	4650      	mov	r0, sl
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	ab1a      	add	r3, sp, #104	; 0x68
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	4a8a      	ldr	r2, [pc, #552]	; (8006b34 <_strtod_l+0x28c>)
 800690a:	f8cd b008 	str.w	fp, [sp, #8]
 800690e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006910:	a919      	add	r1, sp, #100	; 0x64
 8006912:	f001 fe0d 	bl	8008530 <__gethex>
 8006916:	f010 0607 	ands.w	r6, r0, #7
 800691a:	4604      	mov	r4, r0
 800691c:	d005      	beq.n	800692a <_strtod_l+0x82>
 800691e:	2e06      	cmp	r6, #6
 8006920:	d129      	bne.n	8006976 <_strtod_l+0xce>
 8006922:	2300      	movs	r3, #0
 8006924:	3501      	adds	r5, #1
 8006926:	9519      	str	r5, [sp, #100]	; 0x64
 8006928:	930a      	str	r3, [sp, #40]	; 0x28
 800692a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 858a 	bne.w	8007446 <_strtod_l+0xb9e>
 8006932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006934:	b1d3      	cbz	r3, 800696c <_strtod_l+0xc4>
 8006936:	4642      	mov	r2, r8
 8006938:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800693c:	4610      	mov	r0, r2
 800693e:	4619      	mov	r1, r3
 8006940:	b01f      	add	sp, #124	; 0x7c
 8006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006946:	2a20      	cmp	r2, #32
 8006948:	d1cd      	bne.n	80068e6 <_strtod_l+0x3e>
 800694a:	3301      	adds	r3, #1
 800694c:	9319      	str	r3, [sp, #100]	; 0x64
 800694e:	e7bf      	b.n	80068d0 <_strtod_l+0x28>
 8006950:	2a2d      	cmp	r2, #45	; 0x2d
 8006952:	d1c8      	bne.n	80068e6 <_strtod_l+0x3e>
 8006954:	2201      	movs	r2, #1
 8006956:	920a      	str	r2, [sp, #40]	; 0x28
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	9219      	str	r2, [sp, #100]	; 0x64
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1c3      	bne.n	80068ea <_strtod_l+0x42>
 8006962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006964:	9619      	str	r6, [sp, #100]	; 0x64
 8006966:	2b00      	cmp	r3, #0
 8006968:	f040 856b 	bne.w	8007442 <_strtod_l+0xb9a>
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	e7e4      	b.n	800693c <_strtod_l+0x94>
 8006972:	2200      	movs	r2, #0
 8006974:	e7ef      	b.n	8006956 <_strtod_l+0xae>
 8006976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006978:	b13a      	cbz	r2, 800698a <_strtod_l+0xe2>
 800697a:	2135      	movs	r1, #53	; 0x35
 800697c:	a81c      	add	r0, sp, #112	; 0x70
 800697e:	f002 fd87 	bl	8009490 <__copybits>
 8006982:	4650      	mov	r0, sl
 8006984:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006986:	f002 f94f 	bl	8008c28 <_Bfree>
 800698a:	3e01      	subs	r6, #1
 800698c:	2e04      	cmp	r6, #4
 800698e:	d806      	bhi.n	800699e <_strtod_l+0xf6>
 8006990:	e8df f006 	tbb	[pc, r6]
 8006994:	1714030a 	.word	0x1714030a
 8006998:	0a          	.byte	0x0a
 8006999:	00          	.byte	0x00
 800699a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800699e:	0721      	lsls	r1, r4, #28
 80069a0:	d5c3      	bpl.n	800692a <_strtod_l+0x82>
 80069a2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80069a6:	e7c0      	b.n	800692a <_strtod_l+0x82>
 80069a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80069aa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80069ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80069ba:	e7f0      	b.n	800699e <_strtod_l+0xf6>
 80069bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006b38 <_strtod_l+0x290>
 80069c0:	e7ed      	b.n	800699e <_strtod_l+0xf6>
 80069c2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80069c6:	f04f 38ff 	mov.w	r8, #4294967295
 80069ca:	e7e8      	b.n	800699e <_strtod_l+0xf6>
 80069cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	9219      	str	r2, [sp, #100]	; 0x64
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	2b30      	cmp	r3, #48	; 0x30
 80069d6:	d0f9      	beq.n	80069cc <_strtod_l+0x124>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0a6      	beq.n	800692a <_strtod_l+0x82>
 80069dc:	2301      	movs	r3, #1
 80069de:	9307      	str	r3, [sp, #28]
 80069e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069e2:	220a      	movs	r2, #10
 80069e4:	9308      	str	r3, [sp, #32]
 80069e6:	2300      	movs	r3, #0
 80069e8:	469b      	mov	fp, r3
 80069ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80069ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80069f0:	7805      	ldrb	r5, [r0, #0]
 80069f2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80069f6:	b2d9      	uxtb	r1, r3
 80069f8:	2909      	cmp	r1, #9
 80069fa:	d927      	bls.n	8006a4c <_strtod_l+0x1a4>
 80069fc:	4622      	mov	r2, r4
 80069fe:	4639      	mov	r1, r7
 8006a00:	f003 f987 	bl	8009d12 <strncmp>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d033      	beq.n	8006a70 <_strtod_l+0x1c8>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	465c      	mov	r4, fp
 8006a0e:	4603      	mov	r3, r0
 8006a10:	9004      	str	r0, [sp, #16]
 8006a12:	2a65      	cmp	r2, #101	; 0x65
 8006a14:	d001      	beq.n	8006a1a <_strtod_l+0x172>
 8006a16:	2a45      	cmp	r2, #69	; 0x45
 8006a18:	d114      	bne.n	8006a44 <_strtod_l+0x19c>
 8006a1a:	b91c      	cbnz	r4, 8006a24 <_strtod_l+0x17c>
 8006a1c:	9a07      	ldr	r2, [sp, #28]
 8006a1e:	4302      	orrs	r2, r0
 8006a20:	d09f      	beq.n	8006962 <_strtod_l+0xba>
 8006a22:	2400      	movs	r4, #0
 8006a24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006a26:	1c72      	adds	r2, r6, #1
 8006a28:	9219      	str	r2, [sp, #100]	; 0x64
 8006a2a:	7872      	ldrb	r2, [r6, #1]
 8006a2c:	2a2b      	cmp	r2, #43	; 0x2b
 8006a2e:	d079      	beq.n	8006b24 <_strtod_l+0x27c>
 8006a30:	2a2d      	cmp	r2, #45	; 0x2d
 8006a32:	f000 8083 	beq.w	8006b3c <_strtod_l+0x294>
 8006a36:	2700      	movs	r7, #0
 8006a38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a3c:	2909      	cmp	r1, #9
 8006a3e:	f240 8083 	bls.w	8006b48 <_strtod_l+0x2a0>
 8006a42:	9619      	str	r6, [sp, #100]	; 0x64
 8006a44:	2500      	movs	r5, #0
 8006a46:	e09f      	b.n	8006b88 <_strtod_l+0x2e0>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e7c8      	b.n	80069de <_strtod_l+0x136>
 8006a4c:	f1bb 0f08 	cmp.w	fp, #8
 8006a50:	bfd5      	itete	le
 8006a52:	9906      	ldrle	r1, [sp, #24]
 8006a54:	9905      	ldrgt	r1, [sp, #20]
 8006a56:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a5a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006a5e:	f100 0001 	add.w	r0, r0, #1
 8006a62:	bfd4      	ite	le
 8006a64:	9306      	strle	r3, [sp, #24]
 8006a66:	9305      	strgt	r3, [sp, #20]
 8006a68:	f10b 0b01 	add.w	fp, fp, #1
 8006a6c:	9019      	str	r0, [sp, #100]	; 0x64
 8006a6e:	e7be      	b.n	80069ee <_strtod_l+0x146>
 8006a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a72:	191a      	adds	r2, r3, r4
 8006a74:	9219      	str	r2, [sp, #100]	; 0x64
 8006a76:	5d1a      	ldrb	r2, [r3, r4]
 8006a78:	f1bb 0f00 	cmp.w	fp, #0
 8006a7c:	d036      	beq.n	8006aec <_strtod_l+0x244>
 8006a7e:	465c      	mov	r4, fp
 8006a80:	9004      	str	r0, [sp, #16]
 8006a82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006a86:	2b09      	cmp	r3, #9
 8006a88:	d912      	bls.n	8006ab0 <_strtod_l+0x208>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e7c1      	b.n	8006a12 <_strtod_l+0x16a>
 8006a8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a90:	3001      	adds	r0, #1
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	9219      	str	r2, [sp, #100]	; 0x64
 8006a96:	785a      	ldrb	r2, [r3, #1]
 8006a98:	2a30      	cmp	r2, #48	; 0x30
 8006a9a:	d0f8      	beq.n	8006a8e <_strtod_l+0x1e6>
 8006a9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	f200 84d5 	bhi.w	8007450 <_strtod_l+0xba8>
 8006aa6:	9004      	str	r0, [sp, #16]
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006aae:	9308      	str	r3, [sp, #32]
 8006ab0:	3a30      	subs	r2, #48	; 0x30
 8006ab2:	f100 0301 	add.w	r3, r0, #1
 8006ab6:	d013      	beq.n	8006ae0 <_strtod_l+0x238>
 8006ab8:	9904      	ldr	r1, [sp, #16]
 8006aba:	1905      	adds	r5, r0, r4
 8006abc:	4419      	add	r1, r3
 8006abe:	9104      	str	r1, [sp, #16]
 8006ac0:	4623      	mov	r3, r4
 8006ac2:	210a      	movs	r1, #10
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	d113      	bne.n	8006af0 <_strtod_l+0x248>
 8006ac8:	1823      	adds	r3, r4, r0
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	f104 0401 	add.w	r4, r4, #1
 8006ad0:	4404      	add	r4, r0
 8006ad2:	dc1b      	bgt.n	8006b0c <_strtod_l+0x264>
 8006ad4:	230a      	movs	r3, #10
 8006ad6:	9906      	ldr	r1, [sp, #24]
 8006ad8:	fb03 2301 	mla	r3, r3, r1, r2
 8006adc:	9306      	str	r3, [sp, #24]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	1c51      	adds	r1, r2, #1
 8006ae6:	9119      	str	r1, [sp, #100]	; 0x64
 8006ae8:	7852      	ldrb	r2, [r2, #1]
 8006aea:	e7ca      	b.n	8006a82 <_strtod_l+0x1da>
 8006aec:	4658      	mov	r0, fp
 8006aee:	e7d3      	b.n	8006a98 <_strtod_l+0x1f0>
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	dc04      	bgt.n	8006afe <_strtod_l+0x256>
 8006af4:	9f06      	ldr	r7, [sp, #24]
 8006af6:	434f      	muls	r7, r1
 8006af8:	9706      	str	r7, [sp, #24]
 8006afa:	3301      	adds	r3, #1
 8006afc:	e7e2      	b.n	8006ac4 <_strtod_l+0x21c>
 8006afe:	1c5f      	adds	r7, r3, #1
 8006b00:	2f10      	cmp	r7, #16
 8006b02:	bfde      	ittt	le
 8006b04:	9f05      	ldrle	r7, [sp, #20]
 8006b06:	434f      	mulle	r7, r1
 8006b08:	9705      	strle	r7, [sp, #20]
 8006b0a:	e7f6      	b.n	8006afa <_strtod_l+0x252>
 8006b0c:	2c10      	cmp	r4, #16
 8006b0e:	bfdf      	itttt	le
 8006b10:	230a      	movle	r3, #10
 8006b12:	9905      	ldrle	r1, [sp, #20]
 8006b14:	fb03 2301 	mlale	r3, r3, r1, r2
 8006b18:	9305      	strle	r3, [sp, #20]
 8006b1a:	e7e0      	b.n	8006ade <_strtod_l+0x236>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9304      	str	r3, [sp, #16]
 8006b20:	2301      	movs	r3, #1
 8006b22:	e77b      	b.n	8006a1c <_strtod_l+0x174>
 8006b24:	2700      	movs	r7, #0
 8006b26:	1cb2      	adds	r2, r6, #2
 8006b28:	9219      	str	r2, [sp, #100]	; 0x64
 8006b2a:	78b2      	ldrb	r2, [r6, #2]
 8006b2c:	e784      	b.n	8006a38 <_strtod_l+0x190>
 8006b2e:	bf00      	nop
 8006b30:	0800beec 	.word	0x0800beec
 8006b34:	0800bc3c 	.word	0x0800bc3c
 8006b38:	7ff00000 	.word	0x7ff00000
 8006b3c:	2701      	movs	r7, #1
 8006b3e:	e7f2      	b.n	8006b26 <_strtod_l+0x27e>
 8006b40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b42:	1c51      	adds	r1, r2, #1
 8006b44:	9119      	str	r1, [sp, #100]	; 0x64
 8006b46:	7852      	ldrb	r2, [r2, #1]
 8006b48:	2a30      	cmp	r2, #48	; 0x30
 8006b4a:	d0f9      	beq.n	8006b40 <_strtod_l+0x298>
 8006b4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006b50:	2908      	cmp	r1, #8
 8006b52:	f63f af77 	bhi.w	8006a44 <_strtod_l+0x19c>
 8006b56:	f04f 0e0a 	mov.w	lr, #10
 8006b5a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006b5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b60:	9209      	str	r2, [sp, #36]	; 0x24
 8006b62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b64:	1c51      	adds	r1, r2, #1
 8006b66:	9119      	str	r1, [sp, #100]	; 0x64
 8006b68:	7852      	ldrb	r2, [r2, #1]
 8006b6a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006b6e:	2d09      	cmp	r5, #9
 8006b70:	d935      	bls.n	8006bde <_strtod_l+0x336>
 8006b72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b74:	1b49      	subs	r1, r1, r5
 8006b76:	2908      	cmp	r1, #8
 8006b78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006b7c:	dc02      	bgt.n	8006b84 <_strtod_l+0x2dc>
 8006b7e:	4565      	cmp	r5, ip
 8006b80:	bfa8      	it	ge
 8006b82:	4665      	movge	r5, ip
 8006b84:	b107      	cbz	r7, 8006b88 <_strtod_l+0x2e0>
 8006b86:	426d      	negs	r5, r5
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d14c      	bne.n	8006c26 <_strtod_l+0x37e>
 8006b8c:	9907      	ldr	r1, [sp, #28]
 8006b8e:	4301      	orrs	r1, r0
 8006b90:	f47f aecb 	bne.w	800692a <_strtod_l+0x82>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f47f aee4 	bne.w	8006962 <_strtod_l+0xba>
 8006b9a:	2a69      	cmp	r2, #105	; 0x69
 8006b9c:	d026      	beq.n	8006bec <_strtod_l+0x344>
 8006b9e:	dc23      	bgt.n	8006be8 <_strtod_l+0x340>
 8006ba0:	2a49      	cmp	r2, #73	; 0x49
 8006ba2:	d023      	beq.n	8006bec <_strtod_l+0x344>
 8006ba4:	2a4e      	cmp	r2, #78	; 0x4e
 8006ba6:	f47f aedc 	bne.w	8006962 <_strtod_l+0xba>
 8006baa:	499d      	ldr	r1, [pc, #628]	; (8006e20 <_strtod_l+0x578>)
 8006bac:	a819      	add	r0, sp, #100	; 0x64
 8006bae:	f001 ff0d 	bl	80089cc <__match>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f43f aed5 	beq.w	8006962 <_strtod_l+0xba>
 8006bb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b28      	cmp	r3, #40	; 0x28
 8006bbe:	d12c      	bne.n	8006c1a <_strtod_l+0x372>
 8006bc0:	4998      	ldr	r1, [pc, #608]	; (8006e24 <_strtod_l+0x57c>)
 8006bc2:	aa1c      	add	r2, sp, #112	; 0x70
 8006bc4:	a819      	add	r0, sp, #100	; 0x64
 8006bc6:	f001 ff15 	bl	80089f4 <__hexnan>
 8006bca:	2805      	cmp	r0, #5
 8006bcc:	d125      	bne.n	8006c1a <_strtod_l+0x372>
 8006bce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bd0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006bd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006bd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006bdc:	e6a5      	b.n	800692a <_strtod_l+0x82>
 8006bde:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006be2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006be6:	e7bc      	b.n	8006b62 <_strtod_l+0x2ba>
 8006be8:	2a6e      	cmp	r2, #110	; 0x6e
 8006bea:	e7dc      	b.n	8006ba6 <_strtod_l+0x2fe>
 8006bec:	498e      	ldr	r1, [pc, #568]	; (8006e28 <_strtod_l+0x580>)
 8006bee:	a819      	add	r0, sp, #100	; 0x64
 8006bf0:	f001 feec 	bl	80089cc <__match>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f43f aeb4 	beq.w	8006962 <_strtod_l+0xba>
 8006bfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bfc:	498b      	ldr	r1, [pc, #556]	; (8006e2c <_strtod_l+0x584>)
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	a819      	add	r0, sp, #100	; 0x64
 8006c02:	9319      	str	r3, [sp, #100]	; 0x64
 8006c04:	f001 fee2 	bl	80089cc <__match>
 8006c08:	b910      	cbnz	r0, 8006c10 <_strtod_l+0x368>
 8006c0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	9319      	str	r3, [sp, #100]	; 0x64
 8006c10:	f04f 0800 	mov.w	r8, #0
 8006c14:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006e30 <_strtod_l+0x588>
 8006c18:	e687      	b.n	800692a <_strtod_l+0x82>
 8006c1a:	4886      	ldr	r0, [pc, #536]	; (8006e34 <_strtod_l+0x58c>)
 8006c1c:	f003 f820 	bl	8009c60 <nan>
 8006c20:	4680      	mov	r8, r0
 8006c22:	4689      	mov	r9, r1
 8006c24:	e681      	b.n	800692a <_strtod_l+0x82>
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	f1bb 0f00 	cmp.w	fp, #0
 8006c2c:	bf08      	it	eq
 8006c2e:	46a3      	moveq	fp, r4
 8006c30:	1aeb      	subs	r3, r5, r3
 8006c32:	2c10      	cmp	r4, #16
 8006c34:	9806      	ldr	r0, [sp, #24]
 8006c36:	4626      	mov	r6, r4
 8006c38:	9307      	str	r3, [sp, #28]
 8006c3a:	bfa8      	it	ge
 8006c3c:	2610      	movge	r6, #16
 8006c3e:	f7f9 fc3d 	bl	80004bc <__aeabi_ui2d>
 8006c42:	2c09      	cmp	r4, #9
 8006c44:	4680      	mov	r8, r0
 8006c46:	4689      	mov	r9, r1
 8006c48:	dd13      	ble.n	8006c72 <_strtod_l+0x3ca>
 8006c4a:	4b7b      	ldr	r3, [pc, #492]	; (8006e38 <_strtod_l+0x590>)
 8006c4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c54:	f7f9 fcac 	bl	80005b0 <__aeabi_dmul>
 8006c58:	4680      	mov	r8, r0
 8006c5a:	9805      	ldr	r0, [sp, #20]
 8006c5c:	4689      	mov	r9, r1
 8006c5e:	f7f9 fc2d 	bl	80004bc <__aeabi_ui2d>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 faeb 	bl	8000244 <__adddf3>
 8006c6e:	4680      	mov	r8, r0
 8006c70:	4689      	mov	r9, r1
 8006c72:	2c0f      	cmp	r4, #15
 8006c74:	dc36      	bgt.n	8006ce4 <_strtod_l+0x43c>
 8006c76:	9b07      	ldr	r3, [sp, #28]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f43f ae56 	beq.w	800692a <_strtod_l+0x82>
 8006c7e:	dd22      	ble.n	8006cc6 <_strtod_l+0x41e>
 8006c80:	2b16      	cmp	r3, #22
 8006c82:	dc09      	bgt.n	8006c98 <_strtod_l+0x3f0>
 8006c84:	496c      	ldr	r1, [pc, #432]	; (8006e38 <_strtod_l+0x590>)
 8006c86:	4642      	mov	r2, r8
 8006c88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c92:	f7f9 fc8d 	bl	80005b0 <__aeabi_dmul>
 8006c96:	e7c3      	b.n	8006c20 <_strtod_l+0x378>
 8006c98:	9a07      	ldr	r2, [sp, #28]
 8006c9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	db20      	blt.n	8006ce4 <_strtod_l+0x43c>
 8006ca2:	4d65      	ldr	r5, [pc, #404]	; (8006e38 <_strtod_l+0x590>)
 8006ca4:	f1c4 040f 	rsb	r4, r4, #15
 8006ca8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006cac:	4642      	mov	r2, r8
 8006cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	f7f9 fc7c 	bl	80005b0 <__aeabi_dmul>
 8006cb8:	9b07      	ldr	r3, [sp, #28]
 8006cba:	1b1c      	subs	r4, r3, r4
 8006cbc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cc4:	e7e5      	b.n	8006c92 <_strtod_l+0x3ea>
 8006cc6:	9b07      	ldr	r3, [sp, #28]
 8006cc8:	3316      	adds	r3, #22
 8006cca:	db0b      	blt.n	8006ce4 <_strtod_l+0x43c>
 8006ccc:	9b04      	ldr	r3, [sp, #16]
 8006cce:	4640      	mov	r0, r8
 8006cd0:	1b5d      	subs	r5, r3, r5
 8006cd2:	4b59      	ldr	r3, [pc, #356]	; (8006e38 <_strtod_l+0x590>)
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006cda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cde:	f7f9 fd91 	bl	8000804 <__aeabi_ddiv>
 8006ce2:	e79d      	b.n	8006c20 <_strtod_l+0x378>
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	1ba6      	subs	r6, r4, r6
 8006ce8:	441e      	add	r6, r3
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	dd74      	ble.n	8006dd8 <_strtod_l+0x530>
 8006cee:	f016 030f 	ands.w	r3, r6, #15
 8006cf2:	d00a      	beq.n	8006d0a <_strtod_l+0x462>
 8006cf4:	4950      	ldr	r1, [pc, #320]	; (8006e38 <_strtod_l+0x590>)
 8006cf6:	4642      	mov	r2, r8
 8006cf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d00:	464b      	mov	r3, r9
 8006d02:	f7f9 fc55 	bl	80005b0 <__aeabi_dmul>
 8006d06:	4680      	mov	r8, r0
 8006d08:	4689      	mov	r9, r1
 8006d0a:	f036 060f 	bics.w	r6, r6, #15
 8006d0e:	d052      	beq.n	8006db6 <_strtod_l+0x50e>
 8006d10:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006d14:	dd27      	ble.n	8006d66 <_strtod_l+0x4be>
 8006d16:	f04f 0b00 	mov.w	fp, #0
 8006d1a:	f8cd b010 	str.w	fp, [sp, #16]
 8006d1e:	f8cd b020 	str.w	fp, [sp, #32]
 8006d22:	f8cd b018 	str.w	fp, [sp, #24]
 8006d26:	2322      	movs	r3, #34	; 0x22
 8006d28:	f04f 0800 	mov.w	r8, #0
 8006d2c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006e30 <_strtod_l+0x588>
 8006d30:	f8ca 3000 	str.w	r3, [sl]
 8006d34:	9b08      	ldr	r3, [sp, #32]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f43f adf7 	beq.w	800692a <_strtod_l+0x82>
 8006d3c:	4650      	mov	r0, sl
 8006d3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d40:	f001 ff72 	bl	8008c28 <_Bfree>
 8006d44:	4650      	mov	r0, sl
 8006d46:	9906      	ldr	r1, [sp, #24]
 8006d48:	f001 ff6e 	bl	8008c28 <_Bfree>
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	9904      	ldr	r1, [sp, #16]
 8006d50:	f001 ff6a 	bl	8008c28 <_Bfree>
 8006d54:	4650      	mov	r0, sl
 8006d56:	9908      	ldr	r1, [sp, #32]
 8006d58:	f001 ff66 	bl	8008c28 <_Bfree>
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	4650      	mov	r0, sl
 8006d60:	f001 ff62 	bl	8008c28 <_Bfree>
 8006d64:	e5e1      	b.n	800692a <_strtod_l+0x82>
 8006d66:	4b35      	ldr	r3, [pc, #212]	; (8006e3c <_strtod_l+0x594>)
 8006d68:	4640      	mov	r0, r8
 8006d6a:	9305      	str	r3, [sp, #20]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4649      	mov	r1, r9
 8006d70:	461f      	mov	r7, r3
 8006d72:	1136      	asrs	r6, r6, #4
 8006d74:	2e01      	cmp	r6, #1
 8006d76:	dc21      	bgt.n	8006dbc <_strtod_l+0x514>
 8006d78:	b10b      	cbz	r3, 8006d7e <_strtod_l+0x4d6>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <_strtod_l+0x594>)
 8006d80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006d84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006d88:	4642      	mov	r2, r8
 8006d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d8e:	464b      	mov	r3, r9
 8006d90:	f7f9 fc0e 	bl	80005b0 <__aeabi_dmul>
 8006d94:	4b26      	ldr	r3, [pc, #152]	; (8006e30 <_strtod_l+0x588>)
 8006d96:	460a      	mov	r2, r1
 8006d98:	400b      	ands	r3, r1
 8006d9a:	4929      	ldr	r1, [pc, #164]	; (8006e40 <_strtod_l+0x598>)
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	428b      	cmp	r3, r1
 8006da0:	d8b9      	bhi.n	8006d16 <_strtod_l+0x46e>
 8006da2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006da6:	428b      	cmp	r3, r1
 8006da8:	bf86      	itte	hi
 8006daa:	f04f 38ff 	movhi.w	r8, #4294967295
 8006dae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006e44 <_strtod_l+0x59c>
 8006db2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006db6:	2300      	movs	r3, #0
 8006db8:	9305      	str	r3, [sp, #20]
 8006dba:	e07f      	b.n	8006ebc <_strtod_l+0x614>
 8006dbc:	07f2      	lsls	r2, r6, #31
 8006dbe:	d505      	bpl.n	8006dcc <_strtod_l+0x524>
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f7f9 fbf3 	bl	80005b0 <__aeabi_dmul>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	9a05      	ldr	r2, [sp, #20]
 8006dce:	3701      	adds	r7, #1
 8006dd0:	3208      	adds	r2, #8
 8006dd2:	1076      	asrs	r6, r6, #1
 8006dd4:	9205      	str	r2, [sp, #20]
 8006dd6:	e7cd      	b.n	8006d74 <_strtod_l+0x4cc>
 8006dd8:	d0ed      	beq.n	8006db6 <_strtod_l+0x50e>
 8006dda:	4276      	negs	r6, r6
 8006ddc:	f016 020f 	ands.w	r2, r6, #15
 8006de0:	d00a      	beq.n	8006df8 <_strtod_l+0x550>
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <_strtod_l+0x590>)
 8006de4:	4640      	mov	r0, r8
 8006de6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dea:	4649      	mov	r1, r9
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 fd08 	bl	8000804 <__aeabi_ddiv>
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	1136      	asrs	r6, r6, #4
 8006dfa:	d0dc      	beq.n	8006db6 <_strtod_l+0x50e>
 8006dfc:	2e1f      	cmp	r6, #31
 8006dfe:	dd23      	ble.n	8006e48 <_strtod_l+0x5a0>
 8006e00:	f04f 0b00 	mov.w	fp, #0
 8006e04:	f8cd b010 	str.w	fp, [sp, #16]
 8006e08:	f8cd b020 	str.w	fp, [sp, #32]
 8006e0c:	f8cd b018 	str.w	fp, [sp, #24]
 8006e10:	2322      	movs	r3, #34	; 0x22
 8006e12:	f04f 0800 	mov.w	r8, #0
 8006e16:	f04f 0900 	mov.w	r9, #0
 8006e1a:	f8ca 3000 	str.w	r3, [sl]
 8006e1e:	e789      	b.n	8006d34 <_strtod_l+0x48c>
 8006e20:	0800bc0d 	.word	0x0800bc0d
 8006e24:	0800bc50 	.word	0x0800bc50
 8006e28:	0800bc05 	.word	0x0800bc05
 8006e2c:	0800bd94 	.word	0x0800bd94
 8006e30:	7ff00000 	.word	0x7ff00000
 8006e34:	0800c0a8 	.word	0x0800c0a8
 8006e38:	0800bf88 	.word	0x0800bf88
 8006e3c:	0800bf60 	.word	0x0800bf60
 8006e40:	7ca00000 	.word	0x7ca00000
 8006e44:	7fefffff 	.word	0x7fefffff
 8006e48:	f016 0310 	ands.w	r3, r6, #16
 8006e4c:	bf18      	it	ne
 8006e4e:	236a      	movne	r3, #106	; 0x6a
 8006e50:	4640      	mov	r0, r8
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	4649      	mov	r1, r9
 8006e56:	2300      	movs	r3, #0
 8006e58:	4fb0      	ldr	r7, [pc, #704]	; (800711c <_strtod_l+0x874>)
 8006e5a:	07f2      	lsls	r2, r6, #31
 8006e5c:	d504      	bpl.n	8006e68 <_strtod_l+0x5c0>
 8006e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e62:	f7f9 fba5 	bl	80005b0 <__aeabi_dmul>
 8006e66:	2301      	movs	r3, #1
 8006e68:	1076      	asrs	r6, r6, #1
 8006e6a:	f107 0708 	add.w	r7, r7, #8
 8006e6e:	d1f4      	bne.n	8006e5a <_strtod_l+0x5b2>
 8006e70:	b10b      	cbz	r3, 8006e76 <_strtod_l+0x5ce>
 8006e72:	4680      	mov	r8, r0
 8006e74:	4689      	mov	r9, r1
 8006e76:	9b05      	ldr	r3, [sp, #20]
 8006e78:	b1c3      	cbz	r3, 8006eac <_strtod_l+0x604>
 8006e7a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006e7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	4649      	mov	r1, r9
 8006e86:	dd11      	ble.n	8006eac <_strtod_l+0x604>
 8006e88:	2b1f      	cmp	r3, #31
 8006e8a:	f340 8127 	ble.w	80070dc <_strtod_l+0x834>
 8006e8e:	2b34      	cmp	r3, #52	; 0x34
 8006e90:	bfd8      	it	le
 8006e92:	f04f 33ff 	movle.w	r3, #4294967295
 8006e96:	f04f 0800 	mov.w	r8, #0
 8006e9a:	bfcf      	iteee	gt
 8006e9c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006ea0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006ea4:	fa03 f202 	lslle.w	r2, r3, r2
 8006ea8:	ea02 0901 	andle.w	r9, r2, r1
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	f7f9 fde4 	bl	8000a80 <__aeabi_dcmpeq>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d1a1      	bne.n	8006e00 <_strtod_l+0x558>
 8006ebc:	9b06      	ldr	r3, [sp, #24]
 8006ebe:	465a      	mov	r2, fp
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	4650      	mov	r0, sl
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	9908      	ldr	r1, [sp, #32]
 8006ec8:	f001 ff16 	bl	8008cf8 <__s2b>
 8006ecc:	9008      	str	r0, [sp, #32]
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f43f af21 	beq.w	8006d16 <_strtod_l+0x46e>
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	f04f 0b00 	mov.w	fp, #0
 8006eda:	1b5d      	subs	r5, r3, r5
 8006edc:	9b07      	ldr	r3, [sp, #28]
 8006ede:	f8cd b010 	str.w	fp, [sp, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bfb4      	ite	lt
 8006ee6:	462b      	movlt	r3, r5
 8006ee8:	2300      	movge	r3, #0
 8006eea:	930e      	str	r3, [sp, #56]	; 0x38
 8006eec:	9b07      	ldr	r3, [sp, #28]
 8006eee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ef2:	9314      	str	r3, [sp, #80]	; 0x50
 8006ef4:	9b08      	ldr	r3, [sp, #32]
 8006ef6:	4650      	mov	r0, sl
 8006ef8:	6859      	ldr	r1, [r3, #4]
 8006efa:	f001 fe55 	bl	8008ba8 <_Balloc>
 8006efe:	9006      	str	r0, [sp, #24]
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f43f af10 	beq.w	8006d26 <_strtod_l+0x47e>
 8006f06:	9b08      	ldr	r3, [sp, #32]
 8006f08:	300c      	adds	r0, #12
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	f103 010c 	add.w	r1, r3, #12
 8006f10:	3202      	adds	r2, #2
 8006f12:	0092      	lsls	r2, r2, #2
 8006f14:	f001 fe3a 	bl	8008b8c <memcpy>
 8006f18:	ab1c      	add	r3, sp, #112	; 0x70
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	4650      	mov	r0, sl
 8006f26:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006f2a:	f002 fa27 	bl	800937c <__d2b>
 8006f2e:	901a      	str	r0, [sp, #104]	; 0x68
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f43f aef8 	beq.w	8006d26 <_strtod_l+0x47e>
 8006f36:	2101      	movs	r1, #1
 8006f38:	4650      	mov	r0, sl
 8006f3a:	f001 ff75 	bl	8008e28 <__i2b>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	9004      	str	r0, [sp, #16]
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f43f aeef 	beq.w	8006d26 <_strtod_l+0x47e>
 8006f48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006f4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f4c:	2d00      	cmp	r5, #0
 8006f4e:	bfab      	itete	ge
 8006f50:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006f52:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006f54:	18ee      	addge	r6, r5, r3
 8006f56:	1b5c      	sublt	r4, r3, r5
 8006f58:	9b05      	ldr	r3, [sp, #20]
 8006f5a:	bfa8      	it	ge
 8006f5c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006f5e:	eba5 0503 	sub.w	r5, r5, r3
 8006f62:	4415      	add	r5, r2
 8006f64:	4b6e      	ldr	r3, [pc, #440]	; (8007120 <_strtod_l+0x878>)
 8006f66:	f105 35ff 	add.w	r5, r5, #4294967295
 8006f6a:	bfb8      	it	lt
 8006f6c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f74:	f280 80c4 	bge.w	8007100 <_strtod_l+0x858>
 8006f78:	1b5b      	subs	r3, r3, r5
 8006f7a:	2b1f      	cmp	r3, #31
 8006f7c:	f04f 0701 	mov.w	r7, #1
 8006f80:	eba2 0203 	sub.w	r2, r2, r3
 8006f84:	f300 80b1 	bgt.w	80070ea <_strtod_l+0x842>
 8006f88:	2500      	movs	r5, #0
 8006f8a:	fa07 f303 	lsl.w	r3, r7, r3
 8006f8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f90:	18b7      	adds	r7, r6, r2
 8006f92:	9b05      	ldr	r3, [sp, #20]
 8006f94:	42be      	cmp	r6, r7
 8006f96:	4414      	add	r4, r2
 8006f98:	441c      	add	r4, r3
 8006f9a:	4633      	mov	r3, r6
 8006f9c:	bfa8      	it	ge
 8006f9e:	463b      	movge	r3, r7
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	bfa8      	it	ge
 8006fa4:	4623      	movge	r3, r4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	bfc2      	ittt	gt
 8006faa:	1aff      	subgt	r7, r7, r3
 8006fac:	1ae4      	subgt	r4, r4, r3
 8006fae:	1af6      	subgt	r6, r6, r3
 8006fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dd17      	ble.n	8006fe6 <_strtod_l+0x73e>
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4650      	mov	r0, sl
 8006fba:	9904      	ldr	r1, [sp, #16]
 8006fbc:	f001 fff2 	bl	8008fa4 <__pow5mult>
 8006fc0:	9004      	str	r0, [sp, #16]
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	f43f aeaf 	beq.w	8006d26 <_strtod_l+0x47e>
 8006fc8:	4601      	mov	r1, r0
 8006fca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fcc:	4650      	mov	r0, sl
 8006fce:	f001 ff41 	bl	8008e54 <__multiply>
 8006fd2:	9009      	str	r0, [sp, #36]	; 0x24
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	f43f aea6 	beq.w	8006d26 <_strtod_l+0x47e>
 8006fda:	4650      	mov	r0, sl
 8006fdc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fde:	f001 fe23 	bl	8008c28 <_Bfree>
 8006fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8006fe6:	2f00      	cmp	r7, #0
 8006fe8:	f300 808e 	bgt.w	8007108 <_strtod_l+0x860>
 8006fec:	9b07      	ldr	r3, [sp, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	dd08      	ble.n	8007004 <_strtod_l+0x75c>
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ff6:	9906      	ldr	r1, [sp, #24]
 8006ff8:	f001 ffd4 	bl	8008fa4 <__pow5mult>
 8006ffc:	9006      	str	r0, [sp, #24]
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f43f ae91 	beq.w	8006d26 <_strtod_l+0x47e>
 8007004:	2c00      	cmp	r4, #0
 8007006:	dd08      	ble.n	800701a <_strtod_l+0x772>
 8007008:	4622      	mov	r2, r4
 800700a:	4650      	mov	r0, sl
 800700c:	9906      	ldr	r1, [sp, #24]
 800700e:	f002 f823 	bl	8009058 <__lshift>
 8007012:	9006      	str	r0, [sp, #24]
 8007014:	2800      	cmp	r0, #0
 8007016:	f43f ae86 	beq.w	8006d26 <_strtod_l+0x47e>
 800701a:	2e00      	cmp	r6, #0
 800701c:	dd08      	ble.n	8007030 <_strtod_l+0x788>
 800701e:	4632      	mov	r2, r6
 8007020:	4650      	mov	r0, sl
 8007022:	9904      	ldr	r1, [sp, #16]
 8007024:	f002 f818 	bl	8009058 <__lshift>
 8007028:	9004      	str	r0, [sp, #16]
 800702a:	2800      	cmp	r0, #0
 800702c:	f43f ae7b 	beq.w	8006d26 <_strtod_l+0x47e>
 8007030:	4650      	mov	r0, sl
 8007032:	9a06      	ldr	r2, [sp, #24]
 8007034:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007036:	f002 f89b 	bl	8009170 <__mdiff>
 800703a:	4683      	mov	fp, r0
 800703c:	2800      	cmp	r0, #0
 800703e:	f43f ae72 	beq.w	8006d26 <_strtod_l+0x47e>
 8007042:	2400      	movs	r4, #0
 8007044:	68c3      	ldr	r3, [r0, #12]
 8007046:	9904      	ldr	r1, [sp, #16]
 8007048:	60c4      	str	r4, [r0, #12]
 800704a:	930b      	str	r3, [sp, #44]	; 0x2c
 800704c:	f002 f874 	bl	8009138 <__mcmp>
 8007050:	42a0      	cmp	r0, r4
 8007052:	da6b      	bge.n	800712c <_strtod_l+0x884>
 8007054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007056:	ea53 0308 	orrs.w	r3, r3, r8
 800705a:	f040 8091 	bne.w	8007180 <_strtod_l+0x8d8>
 800705e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007062:	2b00      	cmp	r3, #0
 8007064:	f040 808c 	bne.w	8007180 <_strtod_l+0x8d8>
 8007068:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800706c:	0d1b      	lsrs	r3, r3, #20
 800706e:	051b      	lsls	r3, r3, #20
 8007070:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007074:	f240 8084 	bls.w	8007180 <_strtod_l+0x8d8>
 8007078:	f8db 3014 	ldr.w	r3, [fp, #20]
 800707c:	b91b      	cbnz	r3, 8007086 <_strtod_l+0x7de>
 800707e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007082:	2b01      	cmp	r3, #1
 8007084:	dd7c      	ble.n	8007180 <_strtod_l+0x8d8>
 8007086:	4659      	mov	r1, fp
 8007088:	2201      	movs	r2, #1
 800708a:	4650      	mov	r0, sl
 800708c:	f001 ffe4 	bl	8009058 <__lshift>
 8007090:	9904      	ldr	r1, [sp, #16]
 8007092:	4683      	mov	fp, r0
 8007094:	f002 f850 	bl	8009138 <__mcmp>
 8007098:	2800      	cmp	r0, #0
 800709a:	dd71      	ble.n	8007180 <_strtod_l+0x8d8>
 800709c:	9905      	ldr	r1, [sp, #20]
 800709e:	464b      	mov	r3, r9
 80070a0:	4a20      	ldr	r2, [pc, #128]	; (8007124 <_strtod_l+0x87c>)
 80070a2:	2900      	cmp	r1, #0
 80070a4:	f000 808c 	beq.w	80071c0 <_strtod_l+0x918>
 80070a8:	ea02 0109 	and.w	r1, r2, r9
 80070ac:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070b0:	f300 8086 	bgt.w	80071c0 <_strtod_l+0x918>
 80070b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070b8:	f77f aeaa 	ble.w	8006e10 <_strtod_l+0x568>
 80070bc:	4640      	mov	r0, r8
 80070be:	4649      	mov	r1, r9
 80070c0:	4b19      	ldr	r3, [pc, #100]	; (8007128 <_strtod_l+0x880>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	f7f9 fa74 	bl	80005b0 <__aeabi_dmul>
 80070c8:	460b      	mov	r3, r1
 80070ca:	4303      	orrs	r3, r0
 80070cc:	bf08      	it	eq
 80070ce:	2322      	moveq	r3, #34	; 0x22
 80070d0:	4680      	mov	r8, r0
 80070d2:	4689      	mov	r9, r1
 80070d4:	bf08      	it	eq
 80070d6:	f8ca 3000 	streq.w	r3, [sl]
 80070da:	e62f      	b.n	8006d3c <_strtod_l+0x494>
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	ea03 0808 	and.w	r8, r3, r8
 80070e8:	e6e0      	b.n	8006eac <_strtod_l+0x604>
 80070ea:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80070ee:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80070f2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80070f6:	35e2      	adds	r5, #226	; 0xe2
 80070f8:	fa07 f505 	lsl.w	r5, r7, r5
 80070fc:	970f      	str	r7, [sp, #60]	; 0x3c
 80070fe:	e747      	b.n	8006f90 <_strtod_l+0x6e8>
 8007100:	2301      	movs	r3, #1
 8007102:	2500      	movs	r5, #0
 8007104:	930f      	str	r3, [sp, #60]	; 0x3c
 8007106:	e743      	b.n	8006f90 <_strtod_l+0x6e8>
 8007108:	463a      	mov	r2, r7
 800710a:	4650      	mov	r0, sl
 800710c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800710e:	f001 ffa3 	bl	8009058 <__lshift>
 8007112:	901a      	str	r0, [sp, #104]	; 0x68
 8007114:	2800      	cmp	r0, #0
 8007116:	f47f af69 	bne.w	8006fec <_strtod_l+0x744>
 800711a:	e604      	b.n	8006d26 <_strtod_l+0x47e>
 800711c:	0800bc68 	.word	0x0800bc68
 8007120:	fffffc02 	.word	0xfffffc02
 8007124:	7ff00000 	.word	0x7ff00000
 8007128:	39500000 	.word	0x39500000
 800712c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007130:	d165      	bne.n	80071fe <_strtod_l+0x956>
 8007132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007134:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007138:	b35a      	cbz	r2, 8007192 <_strtod_l+0x8ea>
 800713a:	4a99      	ldr	r2, [pc, #612]	; (80073a0 <_strtod_l+0xaf8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d12b      	bne.n	8007198 <_strtod_l+0x8f0>
 8007140:	9b05      	ldr	r3, [sp, #20]
 8007142:	4641      	mov	r1, r8
 8007144:	b303      	cbz	r3, 8007188 <_strtod_l+0x8e0>
 8007146:	464a      	mov	r2, r9
 8007148:	4b96      	ldr	r3, [pc, #600]	; (80073a4 <_strtod_l+0xafc>)
 800714a:	4013      	ands	r3, r2
 800714c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007150:	f04f 32ff 	mov.w	r2, #4294967295
 8007154:	d81b      	bhi.n	800718e <_strtod_l+0x8e6>
 8007156:	0d1b      	lsrs	r3, r3, #20
 8007158:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	4299      	cmp	r1, r3
 8007162:	d119      	bne.n	8007198 <_strtod_l+0x8f0>
 8007164:	4b90      	ldr	r3, [pc, #576]	; (80073a8 <_strtod_l+0xb00>)
 8007166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007168:	429a      	cmp	r2, r3
 800716a:	d102      	bne.n	8007172 <_strtod_l+0x8ca>
 800716c:	3101      	adds	r1, #1
 800716e:	f43f adda 	beq.w	8006d26 <_strtod_l+0x47e>
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	4b8b      	ldr	r3, [pc, #556]	; (80073a4 <_strtod_l+0xafc>)
 8007178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800717a:	401a      	ands	r2, r3
 800717c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007180:	9b05      	ldr	r3, [sp, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d19a      	bne.n	80070bc <_strtod_l+0x814>
 8007186:	e5d9      	b.n	8006d3c <_strtod_l+0x494>
 8007188:	f04f 33ff 	mov.w	r3, #4294967295
 800718c:	e7e8      	b.n	8007160 <_strtod_l+0x8b8>
 800718e:	4613      	mov	r3, r2
 8007190:	e7e6      	b.n	8007160 <_strtod_l+0x8b8>
 8007192:	ea53 0308 	orrs.w	r3, r3, r8
 8007196:	d081      	beq.n	800709c <_strtod_l+0x7f4>
 8007198:	b1e5      	cbz	r5, 80071d4 <_strtod_l+0x92c>
 800719a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719c:	421d      	tst	r5, r3
 800719e:	d0ef      	beq.n	8007180 <_strtod_l+0x8d8>
 80071a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a2:	4640      	mov	r0, r8
 80071a4:	4649      	mov	r1, r9
 80071a6:	9a05      	ldr	r2, [sp, #20]
 80071a8:	b1c3      	cbz	r3, 80071dc <_strtod_l+0x934>
 80071aa:	f7ff fb5b 	bl	8006864 <sulp>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b6:	f7f9 f845 	bl	8000244 <__adddf3>
 80071ba:	4680      	mov	r8, r0
 80071bc:	4689      	mov	r9, r1
 80071be:	e7df      	b.n	8007180 <_strtod_l+0x8d8>
 80071c0:	4013      	ands	r3, r2
 80071c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80071c6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80071ca:	f04f 38ff 	mov.w	r8, #4294967295
 80071ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80071d2:	e7d5      	b.n	8007180 <_strtod_l+0x8d8>
 80071d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071d6:	ea13 0f08 	tst.w	r3, r8
 80071da:	e7e0      	b.n	800719e <_strtod_l+0x8f6>
 80071dc:	f7ff fb42 	bl	8006864 <sulp>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071e8:	f7f9 f82a 	bl	8000240 <__aeabi_dsub>
 80071ec:	2200      	movs	r2, #0
 80071ee:	2300      	movs	r3, #0
 80071f0:	4680      	mov	r8, r0
 80071f2:	4689      	mov	r9, r1
 80071f4:	f7f9 fc44 	bl	8000a80 <__aeabi_dcmpeq>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d0c1      	beq.n	8007180 <_strtod_l+0x8d8>
 80071fc:	e608      	b.n	8006e10 <_strtod_l+0x568>
 80071fe:	4658      	mov	r0, fp
 8007200:	9904      	ldr	r1, [sp, #16]
 8007202:	f002 f917 	bl	8009434 <__ratio>
 8007206:	2200      	movs	r2, #0
 8007208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	f7f9 fc4a 	bl	8000aa8 <__aeabi_dcmple>
 8007214:	2800      	cmp	r0, #0
 8007216:	d070      	beq.n	80072fa <_strtod_l+0xa52>
 8007218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d042      	beq.n	80072a4 <_strtod_l+0x9fc>
 800721e:	2600      	movs	r6, #0
 8007220:	4f62      	ldr	r7, [pc, #392]	; (80073ac <_strtod_l+0xb04>)
 8007222:	4d62      	ldr	r5, [pc, #392]	; (80073ac <_strtod_l+0xb04>)
 8007224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007226:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800722a:	0d1b      	lsrs	r3, r3, #20
 800722c:	051b      	lsls	r3, r3, #20
 800722e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007230:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007232:	4b5f      	ldr	r3, [pc, #380]	; (80073b0 <_strtod_l+0xb08>)
 8007234:	429a      	cmp	r2, r3
 8007236:	f040 80c3 	bne.w	80073c0 <_strtod_l+0xb18>
 800723a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723c:	4640      	mov	r0, r8
 800723e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007242:	4649      	mov	r1, r9
 8007244:	f002 f820 	bl	8009288 <__ulp>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	f7f9 f9ae 	bl	80005b0 <__aeabi_dmul>
 8007254:	4642      	mov	r2, r8
 8007256:	464b      	mov	r3, r9
 8007258:	f7f8 fff4 	bl	8000244 <__adddf3>
 800725c:	460b      	mov	r3, r1
 800725e:	4951      	ldr	r1, [pc, #324]	; (80073a4 <_strtod_l+0xafc>)
 8007260:	4a54      	ldr	r2, [pc, #336]	; (80073b4 <_strtod_l+0xb0c>)
 8007262:	4019      	ands	r1, r3
 8007264:	4291      	cmp	r1, r2
 8007266:	4680      	mov	r8, r0
 8007268:	d95d      	bls.n	8007326 <_strtod_l+0xa7e>
 800726a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800726c:	4b4e      	ldr	r3, [pc, #312]	; (80073a8 <_strtod_l+0xb00>)
 800726e:	429a      	cmp	r2, r3
 8007270:	d103      	bne.n	800727a <_strtod_l+0x9d2>
 8007272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007274:	3301      	adds	r3, #1
 8007276:	f43f ad56 	beq.w	8006d26 <_strtod_l+0x47e>
 800727a:	f04f 38ff 	mov.w	r8, #4294967295
 800727e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80073a8 <_strtod_l+0xb00>
 8007282:	4650      	mov	r0, sl
 8007284:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007286:	f001 fccf 	bl	8008c28 <_Bfree>
 800728a:	4650      	mov	r0, sl
 800728c:	9906      	ldr	r1, [sp, #24]
 800728e:	f001 fccb 	bl	8008c28 <_Bfree>
 8007292:	4650      	mov	r0, sl
 8007294:	9904      	ldr	r1, [sp, #16]
 8007296:	f001 fcc7 	bl	8008c28 <_Bfree>
 800729a:	4659      	mov	r1, fp
 800729c:	4650      	mov	r0, sl
 800729e:	f001 fcc3 	bl	8008c28 <_Bfree>
 80072a2:	e627      	b.n	8006ef4 <_strtod_l+0x64c>
 80072a4:	f1b8 0f00 	cmp.w	r8, #0
 80072a8:	d119      	bne.n	80072de <_strtod_l+0xa36>
 80072aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b0:	b9e3      	cbnz	r3, 80072ec <_strtod_l+0xa44>
 80072b2:	2200      	movs	r2, #0
 80072b4:	4630      	mov	r0, r6
 80072b6:	4639      	mov	r1, r7
 80072b8:	4b3c      	ldr	r3, [pc, #240]	; (80073ac <_strtod_l+0xb04>)
 80072ba:	f7f9 fbeb 	bl	8000a94 <__aeabi_dcmplt>
 80072be:	b9c8      	cbnz	r0, 80072f4 <_strtod_l+0xa4c>
 80072c0:	2200      	movs	r2, #0
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	4b3c      	ldr	r3, [pc, #240]	; (80073b8 <_strtod_l+0xb10>)
 80072c8:	f7f9 f972 	bl	80005b0 <__aeabi_dmul>
 80072cc:	4604      	mov	r4, r0
 80072ce:	460d      	mov	r5, r1
 80072d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80072d4:	9416      	str	r4, [sp, #88]	; 0x58
 80072d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80072d8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80072dc:	e7a2      	b.n	8007224 <_strtod_l+0x97c>
 80072de:	f1b8 0f01 	cmp.w	r8, #1
 80072e2:	d103      	bne.n	80072ec <_strtod_l+0xa44>
 80072e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f43f ad92 	beq.w	8006e10 <_strtod_l+0x568>
 80072ec:	2600      	movs	r6, #0
 80072ee:	2400      	movs	r4, #0
 80072f0:	4f32      	ldr	r7, [pc, #200]	; (80073bc <_strtod_l+0xb14>)
 80072f2:	e796      	b.n	8007222 <_strtod_l+0x97a>
 80072f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80072f6:	4d30      	ldr	r5, [pc, #192]	; (80073b8 <_strtod_l+0xb10>)
 80072f8:	e7ea      	b.n	80072d0 <_strtod_l+0xa28>
 80072fa:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <_strtod_l+0xb10>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	4630      	mov	r0, r6
 8007300:	4639      	mov	r1, r7
 8007302:	f7f9 f955 	bl	80005b0 <__aeabi_dmul>
 8007306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007308:	4604      	mov	r4, r0
 800730a:	460d      	mov	r5, r1
 800730c:	b933      	cbnz	r3, 800731c <_strtod_l+0xa74>
 800730e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007312:	9010      	str	r0, [sp, #64]	; 0x40
 8007314:	9311      	str	r3, [sp, #68]	; 0x44
 8007316:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800731a:	e783      	b.n	8007224 <_strtod_l+0x97c>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007324:	e7f7      	b.n	8007316 <_strtod_l+0xa6e>
 8007326:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800732a:	9b05      	ldr	r3, [sp, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1a8      	bne.n	8007282 <_strtod_l+0x9da>
 8007330:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007334:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007336:	0d1b      	lsrs	r3, r3, #20
 8007338:	051b      	lsls	r3, r3, #20
 800733a:	429a      	cmp	r2, r3
 800733c:	d1a1      	bne.n	8007282 <_strtod_l+0x9da>
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f9 fc7d 	bl	8000c40 <__aeabi_d2lz>
 8007346:	f7f9 f905 	bl	8000554 <__aeabi_l2d>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	f7f8 ff75 	bl	8000240 <__aeabi_dsub>
 8007356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800735c:	ea43 0308 	orr.w	r3, r3, r8
 8007360:	4313      	orrs	r3, r2
 8007362:	4604      	mov	r4, r0
 8007364:	460d      	mov	r5, r1
 8007366:	d066      	beq.n	8007436 <_strtod_l+0xb8e>
 8007368:	a309      	add	r3, pc, #36	; (adr r3, 8007390 <_strtod_l+0xae8>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f7f9 fb91 	bl	8000a94 <__aeabi_dcmplt>
 8007372:	2800      	cmp	r0, #0
 8007374:	f47f ace2 	bne.w	8006d3c <_strtod_l+0x494>
 8007378:	a307      	add	r3, pc, #28	; (adr r3, 8007398 <_strtod_l+0xaf0>)
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	4620      	mov	r0, r4
 8007380:	4629      	mov	r1, r5
 8007382:	f7f9 fba5 	bl	8000ad0 <__aeabi_dcmpgt>
 8007386:	2800      	cmp	r0, #0
 8007388:	f43f af7b 	beq.w	8007282 <_strtod_l+0x9da>
 800738c:	e4d6      	b.n	8006d3c <_strtod_l+0x494>
 800738e:	bf00      	nop
 8007390:	94a03595 	.word	0x94a03595
 8007394:	3fdfffff 	.word	0x3fdfffff
 8007398:	35afe535 	.word	0x35afe535
 800739c:	3fe00000 	.word	0x3fe00000
 80073a0:	000fffff 	.word	0x000fffff
 80073a4:	7ff00000 	.word	0x7ff00000
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	3ff00000 	.word	0x3ff00000
 80073b0:	7fe00000 	.word	0x7fe00000
 80073b4:	7c9fffff 	.word	0x7c9fffff
 80073b8:	3fe00000 	.word	0x3fe00000
 80073bc:	bff00000 	.word	0xbff00000
 80073c0:	9b05      	ldr	r3, [sp, #20]
 80073c2:	b313      	cbz	r3, 800740a <_strtod_l+0xb62>
 80073c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073ca:	d81e      	bhi.n	800740a <_strtod_l+0xb62>
 80073cc:	a326      	add	r3, pc, #152	; (adr r3, 8007468 <_strtod_l+0xbc0>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	f7f9 fb67 	bl	8000aa8 <__aeabi_dcmple>
 80073da:	b190      	cbz	r0, 8007402 <_strtod_l+0xb5a>
 80073dc:	4629      	mov	r1, r5
 80073de:	4620      	mov	r0, r4
 80073e0:	f7f9 fbbe 	bl	8000b60 <__aeabi_d2uiz>
 80073e4:	2801      	cmp	r0, #1
 80073e6:	bf38      	it	cc
 80073e8:	2001      	movcc	r0, #1
 80073ea:	f7f9 f867 	bl	80004bc <__aeabi_ui2d>
 80073ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f0:	4604      	mov	r4, r0
 80073f2:	460d      	mov	r5, r1
 80073f4:	b9d3      	cbnz	r3, 800742c <_strtod_l+0xb84>
 80073f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073fa:	9012      	str	r0, [sp, #72]	; 0x48
 80073fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80073fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007402:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007404:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007408:	1a9f      	subs	r7, r3, r2
 800740a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800740e:	f001 ff3b 	bl	8009288 <__ulp>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 f8c9 	bl	80005b0 <__aeabi_dmul>
 800741e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007422:	f7f8 ff0f 	bl	8000244 <__adddf3>
 8007426:	4680      	mov	r8, r0
 8007428:	4689      	mov	r9, r1
 800742a:	e77e      	b.n	800732a <_strtod_l+0xa82>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007434:	e7e3      	b.n	80073fe <_strtod_l+0xb56>
 8007436:	a30e      	add	r3, pc, #56	; (adr r3, 8007470 <_strtod_l+0xbc8>)
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f7f9 fb2a 	bl	8000a94 <__aeabi_dcmplt>
 8007440:	e7a1      	b.n	8007386 <_strtod_l+0xade>
 8007442:	2300      	movs	r3, #0
 8007444:	930a      	str	r3, [sp, #40]	; 0x28
 8007446:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007448:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	f7ff ba71 	b.w	8006932 <_strtod_l+0x8a>
 8007450:	2a65      	cmp	r2, #101	; 0x65
 8007452:	f43f ab63 	beq.w	8006b1c <_strtod_l+0x274>
 8007456:	2a45      	cmp	r2, #69	; 0x45
 8007458:	f43f ab60 	beq.w	8006b1c <_strtod_l+0x274>
 800745c:	2301      	movs	r3, #1
 800745e:	f7ff bb95 	b.w	8006b8c <_strtod_l+0x2e4>
 8007462:	bf00      	nop
 8007464:	f3af 8000 	nop.w
 8007468:	ffc00000 	.word	0xffc00000
 800746c:	41dfffff 	.word	0x41dfffff
 8007470:	94a03595 	.word	0x94a03595
 8007474:	3fcfffff 	.word	0x3fcfffff

08007478 <_strtod_r>:
 8007478:	4b01      	ldr	r3, [pc, #4]	; (8007480 <_strtod_r+0x8>)
 800747a:	f7ff ba15 	b.w	80068a8 <_strtod_l>
 800747e:	bf00      	nop
 8007480:	2000007c 	.word	0x2000007c

08007484 <_strtol_l.constprop.0>:
 8007484:	2b01      	cmp	r3, #1
 8007486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748a:	4680      	mov	r8, r0
 800748c:	d001      	beq.n	8007492 <_strtol_l.constprop.0+0xe>
 800748e:	2b24      	cmp	r3, #36	; 0x24
 8007490:	d906      	bls.n	80074a0 <_strtol_l.constprop.0+0x1c>
 8007492:	f7fe fb0b 	bl	8005aac <__errno>
 8007496:	2316      	movs	r3, #22
 8007498:	6003      	str	r3, [r0, #0]
 800749a:	2000      	movs	r0, #0
 800749c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a0:	460d      	mov	r5, r1
 80074a2:	4f35      	ldr	r7, [pc, #212]	; (8007578 <_strtol_l.constprop.0+0xf4>)
 80074a4:	4628      	mov	r0, r5
 80074a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074aa:	5de6      	ldrb	r6, [r4, r7]
 80074ac:	f016 0608 	ands.w	r6, r6, #8
 80074b0:	d1f8      	bne.n	80074a4 <_strtol_l.constprop.0+0x20>
 80074b2:	2c2d      	cmp	r4, #45	; 0x2d
 80074b4:	d12f      	bne.n	8007516 <_strtol_l.constprop.0+0x92>
 80074b6:	2601      	movs	r6, #1
 80074b8:	782c      	ldrb	r4, [r5, #0]
 80074ba:	1c85      	adds	r5, r0, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d057      	beq.n	8007570 <_strtol_l.constprop.0+0xec>
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d109      	bne.n	80074d8 <_strtol_l.constprop.0+0x54>
 80074c4:	2c30      	cmp	r4, #48	; 0x30
 80074c6:	d107      	bne.n	80074d8 <_strtol_l.constprop.0+0x54>
 80074c8:	7828      	ldrb	r0, [r5, #0]
 80074ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80074ce:	2858      	cmp	r0, #88	; 0x58
 80074d0:	d149      	bne.n	8007566 <_strtol_l.constprop.0+0xe2>
 80074d2:	2310      	movs	r3, #16
 80074d4:	786c      	ldrb	r4, [r5, #1]
 80074d6:	3502      	adds	r5, #2
 80074d8:	2700      	movs	r7, #0
 80074da:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80074de:	f10e 3eff 	add.w	lr, lr, #4294967295
 80074e2:	fbbe f9f3 	udiv	r9, lr, r3
 80074e6:	4638      	mov	r0, r7
 80074e8:	fb03 ea19 	mls	sl, r3, r9, lr
 80074ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80074f0:	f1bc 0f09 	cmp.w	ip, #9
 80074f4:	d814      	bhi.n	8007520 <_strtol_l.constprop.0+0x9c>
 80074f6:	4664      	mov	r4, ip
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	dd22      	ble.n	8007542 <_strtol_l.constprop.0+0xbe>
 80074fc:	2f00      	cmp	r7, #0
 80074fe:	db1d      	blt.n	800753c <_strtol_l.constprop.0+0xb8>
 8007500:	4581      	cmp	r9, r0
 8007502:	d31b      	bcc.n	800753c <_strtol_l.constprop.0+0xb8>
 8007504:	d101      	bne.n	800750a <_strtol_l.constprop.0+0x86>
 8007506:	45a2      	cmp	sl, r4
 8007508:	db18      	blt.n	800753c <_strtol_l.constprop.0+0xb8>
 800750a:	2701      	movs	r7, #1
 800750c:	fb00 4003 	mla	r0, r0, r3, r4
 8007510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007514:	e7ea      	b.n	80074ec <_strtol_l.constprop.0+0x68>
 8007516:	2c2b      	cmp	r4, #43	; 0x2b
 8007518:	bf04      	itt	eq
 800751a:	782c      	ldrbeq	r4, [r5, #0]
 800751c:	1c85      	addeq	r5, r0, #2
 800751e:	e7cd      	b.n	80074bc <_strtol_l.constprop.0+0x38>
 8007520:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007524:	f1bc 0f19 	cmp.w	ip, #25
 8007528:	d801      	bhi.n	800752e <_strtol_l.constprop.0+0xaa>
 800752a:	3c37      	subs	r4, #55	; 0x37
 800752c:	e7e4      	b.n	80074f8 <_strtol_l.constprop.0+0x74>
 800752e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007532:	f1bc 0f19 	cmp.w	ip, #25
 8007536:	d804      	bhi.n	8007542 <_strtol_l.constprop.0+0xbe>
 8007538:	3c57      	subs	r4, #87	; 0x57
 800753a:	e7dd      	b.n	80074f8 <_strtol_l.constprop.0+0x74>
 800753c:	f04f 37ff 	mov.w	r7, #4294967295
 8007540:	e7e6      	b.n	8007510 <_strtol_l.constprop.0+0x8c>
 8007542:	2f00      	cmp	r7, #0
 8007544:	da07      	bge.n	8007556 <_strtol_l.constprop.0+0xd2>
 8007546:	2322      	movs	r3, #34	; 0x22
 8007548:	4670      	mov	r0, lr
 800754a:	f8c8 3000 	str.w	r3, [r8]
 800754e:	2a00      	cmp	r2, #0
 8007550:	d0a4      	beq.n	800749c <_strtol_l.constprop.0+0x18>
 8007552:	1e69      	subs	r1, r5, #1
 8007554:	e005      	b.n	8007562 <_strtol_l.constprop.0+0xde>
 8007556:	b106      	cbz	r6, 800755a <_strtol_l.constprop.0+0xd6>
 8007558:	4240      	negs	r0, r0
 800755a:	2a00      	cmp	r2, #0
 800755c:	d09e      	beq.n	800749c <_strtol_l.constprop.0+0x18>
 800755e:	2f00      	cmp	r7, #0
 8007560:	d1f7      	bne.n	8007552 <_strtol_l.constprop.0+0xce>
 8007562:	6011      	str	r1, [r2, #0]
 8007564:	e79a      	b.n	800749c <_strtol_l.constprop.0+0x18>
 8007566:	2430      	movs	r4, #48	; 0x30
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1b5      	bne.n	80074d8 <_strtol_l.constprop.0+0x54>
 800756c:	2308      	movs	r3, #8
 800756e:	e7b3      	b.n	80074d8 <_strtol_l.constprop.0+0x54>
 8007570:	2c30      	cmp	r4, #48	; 0x30
 8007572:	d0a9      	beq.n	80074c8 <_strtol_l.constprop.0+0x44>
 8007574:	230a      	movs	r3, #10
 8007576:	e7af      	b.n	80074d8 <_strtol_l.constprop.0+0x54>
 8007578:	0800bc91 	.word	0x0800bc91

0800757c <_strtol_r>:
 800757c:	f7ff bf82 	b.w	8007484 <_strtol_l.constprop.0>

08007580 <quorem>:
 8007580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	6903      	ldr	r3, [r0, #16]
 8007586:	690c      	ldr	r4, [r1, #16]
 8007588:	4607      	mov	r7, r0
 800758a:	42a3      	cmp	r3, r4
 800758c:	f2c0 8082 	blt.w	8007694 <quorem+0x114>
 8007590:	3c01      	subs	r4, #1
 8007592:	f100 0514 	add.w	r5, r0, #20
 8007596:	f101 0814 	add.w	r8, r1, #20
 800759a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075a8:	3301      	adds	r3, #1
 80075aa:	429a      	cmp	r2, r3
 80075ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80075b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075b8:	d331      	bcc.n	800761e <quorem+0x9e>
 80075ba:	f04f 0e00 	mov.w	lr, #0
 80075be:	4640      	mov	r0, r8
 80075c0:	46ac      	mov	ip, r5
 80075c2:	46f2      	mov	sl, lr
 80075c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80075c8:	b293      	uxth	r3, r2
 80075ca:	fb06 e303 	mla	r3, r6, r3, lr
 80075ce:	0c12      	lsrs	r2, r2, #16
 80075d0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	fb06 e202 	mla	r2, r6, r2, lr
 80075da:	ebaa 0303 	sub.w	r3, sl, r3
 80075de:	f8dc a000 	ldr.w	sl, [ip]
 80075e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075e6:	fa1f fa8a 	uxth.w	sl, sl
 80075ea:	4453      	add	r3, sl
 80075ec:	f8dc a000 	ldr.w	sl, [ip]
 80075f0:	b292      	uxth	r2, r2
 80075f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007600:	4581      	cmp	r9, r0
 8007602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007606:	f84c 3b04 	str.w	r3, [ip], #4
 800760a:	d2db      	bcs.n	80075c4 <quorem+0x44>
 800760c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007610:	b92b      	cbnz	r3, 800761e <quorem+0x9e>
 8007612:	9b01      	ldr	r3, [sp, #4]
 8007614:	3b04      	subs	r3, #4
 8007616:	429d      	cmp	r5, r3
 8007618:	461a      	mov	r2, r3
 800761a:	d32f      	bcc.n	800767c <quorem+0xfc>
 800761c:	613c      	str	r4, [r7, #16]
 800761e:	4638      	mov	r0, r7
 8007620:	f001 fd8a 	bl	8009138 <__mcmp>
 8007624:	2800      	cmp	r0, #0
 8007626:	db25      	blt.n	8007674 <quorem+0xf4>
 8007628:	4628      	mov	r0, r5
 800762a:	f04f 0c00 	mov.w	ip, #0
 800762e:	3601      	adds	r6, #1
 8007630:	f858 1b04 	ldr.w	r1, [r8], #4
 8007634:	f8d0 e000 	ldr.w	lr, [r0]
 8007638:	b28b      	uxth	r3, r1
 800763a:	ebac 0303 	sub.w	r3, ip, r3
 800763e:	fa1f f28e 	uxth.w	r2, lr
 8007642:	4413      	add	r3, r2
 8007644:	0c0a      	lsrs	r2, r1, #16
 8007646:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800764a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800764e:	b29b      	uxth	r3, r3
 8007650:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007654:	45c1      	cmp	r9, r8
 8007656:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800765a:	f840 3b04 	str.w	r3, [r0], #4
 800765e:	d2e7      	bcs.n	8007630 <quorem+0xb0>
 8007660:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007668:	b922      	cbnz	r2, 8007674 <quorem+0xf4>
 800766a:	3b04      	subs	r3, #4
 800766c:	429d      	cmp	r5, r3
 800766e:	461a      	mov	r2, r3
 8007670:	d30a      	bcc.n	8007688 <quorem+0x108>
 8007672:	613c      	str	r4, [r7, #16]
 8007674:	4630      	mov	r0, r6
 8007676:	b003      	add	sp, #12
 8007678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	3b04      	subs	r3, #4
 8007680:	2a00      	cmp	r2, #0
 8007682:	d1cb      	bne.n	800761c <quorem+0x9c>
 8007684:	3c01      	subs	r4, #1
 8007686:	e7c6      	b.n	8007616 <quorem+0x96>
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	3b04      	subs	r3, #4
 800768c:	2a00      	cmp	r2, #0
 800768e:	d1f0      	bne.n	8007672 <quorem+0xf2>
 8007690:	3c01      	subs	r4, #1
 8007692:	e7eb      	b.n	800766c <quorem+0xec>
 8007694:	2000      	movs	r0, #0
 8007696:	e7ee      	b.n	8007676 <quorem+0xf6>

08007698 <_dtoa_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	4616      	mov	r6, r2
 800769e:	461f      	mov	r7, r3
 80076a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076a2:	b099      	sub	sp, #100	; 0x64
 80076a4:	4605      	mov	r5, r0
 80076a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80076aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80076ae:	b974      	cbnz	r4, 80076ce <_dtoa_r+0x36>
 80076b0:	2010      	movs	r0, #16
 80076b2:	f001 fa43 	bl	8008b3c <malloc>
 80076b6:	4602      	mov	r2, r0
 80076b8:	6268      	str	r0, [r5, #36]	; 0x24
 80076ba:	b920      	cbnz	r0, 80076c6 <_dtoa_r+0x2e>
 80076bc:	21ea      	movs	r1, #234	; 0xea
 80076be:	4ba8      	ldr	r3, [pc, #672]	; (8007960 <_dtoa_r+0x2c8>)
 80076c0:	48a8      	ldr	r0, [pc, #672]	; (8007964 <_dtoa_r+0x2cc>)
 80076c2:	f002 fc1b 	bl	8009efc <__assert_func>
 80076c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076ca:	6004      	str	r4, [r0, #0]
 80076cc:	60c4      	str	r4, [r0, #12]
 80076ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076d0:	6819      	ldr	r1, [r3, #0]
 80076d2:	b151      	cbz	r1, 80076ea <_dtoa_r+0x52>
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	2301      	movs	r3, #1
 80076d8:	4093      	lsls	r3, r2
 80076da:	604a      	str	r2, [r1, #4]
 80076dc:	608b      	str	r3, [r1, #8]
 80076de:	4628      	mov	r0, r5
 80076e0:	f001 faa2 	bl	8008c28 <_Bfree>
 80076e4:	2200      	movs	r2, #0
 80076e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	1e3b      	subs	r3, r7, #0
 80076ec:	bfaf      	iteee	ge
 80076ee:	2300      	movge	r3, #0
 80076f0:	2201      	movlt	r2, #1
 80076f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076f6:	9305      	strlt	r3, [sp, #20]
 80076f8:	bfa8      	it	ge
 80076fa:	f8c8 3000 	strge.w	r3, [r8]
 80076fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007702:	4b99      	ldr	r3, [pc, #612]	; (8007968 <_dtoa_r+0x2d0>)
 8007704:	bfb8      	it	lt
 8007706:	f8c8 2000 	strlt.w	r2, [r8]
 800770a:	ea33 0309 	bics.w	r3, r3, r9
 800770e:	d119      	bne.n	8007744 <_dtoa_r+0xac>
 8007710:	f242 730f 	movw	r3, #9999	; 0x270f
 8007714:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800771c:	4333      	orrs	r3, r6
 800771e:	f000 857f 	beq.w	8008220 <_dtoa_r+0xb88>
 8007722:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007724:	b953      	cbnz	r3, 800773c <_dtoa_r+0xa4>
 8007726:	4b91      	ldr	r3, [pc, #580]	; (800796c <_dtoa_r+0x2d4>)
 8007728:	e022      	b.n	8007770 <_dtoa_r+0xd8>
 800772a:	4b91      	ldr	r3, [pc, #580]	; (8007970 <_dtoa_r+0x2d8>)
 800772c:	9303      	str	r3, [sp, #12]
 800772e:	3308      	adds	r3, #8
 8007730:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	9803      	ldr	r0, [sp, #12]
 8007736:	b019      	add	sp, #100	; 0x64
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	4b8b      	ldr	r3, [pc, #556]	; (800796c <_dtoa_r+0x2d4>)
 800773e:	9303      	str	r3, [sp, #12]
 8007740:	3303      	adds	r3, #3
 8007742:	e7f5      	b.n	8007730 <_dtoa_r+0x98>
 8007744:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007748:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800774c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007750:	2200      	movs	r2, #0
 8007752:	2300      	movs	r3, #0
 8007754:	f7f9 f994 	bl	8000a80 <__aeabi_dcmpeq>
 8007758:	4680      	mov	r8, r0
 800775a:	b158      	cbz	r0, 8007774 <_dtoa_r+0xdc>
 800775c:	2301      	movs	r3, #1
 800775e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8558 	beq.w	800821a <_dtoa_r+0xb82>
 800776a:	4882      	ldr	r0, [pc, #520]	; (8007974 <_dtoa_r+0x2dc>)
 800776c:	6018      	str	r0, [r3, #0]
 800776e:	1e43      	subs	r3, r0, #1
 8007770:	9303      	str	r3, [sp, #12]
 8007772:	e7df      	b.n	8007734 <_dtoa_r+0x9c>
 8007774:	ab16      	add	r3, sp, #88	; 0x58
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	ab17      	add	r3, sp, #92	; 0x5c
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	4628      	mov	r0, r5
 800777e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007782:	f001 fdfb 	bl	800937c <__d2b>
 8007786:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800778a:	4683      	mov	fp, r0
 800778c:	2c00      	cmp	r4, #0
 800778e:	d07f      	beq.n	8007890 <_dtoa_r+0x1f8>
 8007790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007796:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800779a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800779e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80077a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80077a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80077aa:	2200      	movs	r2, #0
 80077ac:	4b72      	ldr	r3, [pc, #456]	; (8007978 <_dtoa_r+0x2e0>)
 80077ae:	f7f8 fd47 	bl	8000240 <__aeabi_dsub>
 80077b2:	a365      	add	r3, pc, #404	; (adr r3, 8007948 <_dtoa_r+0x2b0>)
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f7f8 fefa 	bl	80005b0 <__aeabi_dmul>
 80077bc:	a364      	add	r3, pc, #400	; (adr r3, 8007950 <_dtoa_r+0x2b8>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	f7f8 fd3f 	bl	8000244 <__adddf3>
 80077c6:	4606      	mov	r6, r0
 80077c8:	4620      	mov	r0, r4
 80077ca:	460f      	mov	r7, r1
 80077cc:	f7f8 fe86 	bl	80004dc <__aeabi_i2d>
 80077d0:	a361      	add	r3, pc, #388	; (adr r3, 8007958 <_dtoa_r+0x2c0>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f7f8 feeb 	bl	80005b0 <__aeabi_dmul>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4630      	mov	r0, r6
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f8 fd2f 	bl	8000244 <__adddf3>
 80077e6:	4606      	mov	r6, r0
 80077e8:	460f      	mov	r7, r1
 80077ea:	f7f9 f991 	bl	8000b10 <__aeabi_d2iz>
 80077ee:	2200      	movs	r2, #0
 80077f0:	4682      	mov	sl, r0
 80077f2:	2300      	movs	r3, #0
 80077f4:	4630      	mov	r0, r6
 80077f6:	4639      	mov	r1, r7
 80077f8:	f7f9 f94c 	bl	8000a94 <__aeabi_dcmplt>
 80077fc:	b148      	cbz	r0, 8007812 <_dtoa_r+0x17a>
 80077fe:	4650      	mov	r0, sl
 8007800:	f7f8 fe6c 	bl	80004dc <__aeabi_i2d>
 8007804:	4632      	mov	r2, r6
 8007806:	463b      	mov	r3, r7
 8007808:	f7f9 f93a 	bl	8000a80 <__aeabi_dcmpeq>
 800780c:	b908      	cbnz	r0, 8007812 <_dtoa_r+0x17a>
 800780e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007812:	f1ba 0f16 	cmp.w	sl, #22
 8007816:	d858      	bhi.n	80078ca <_dtoa_r+0x232>
 8007818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800781c:	4b57      	ldr	r3, [pc, #348]	; (800797c <_dtoa_r+0x2e4>)
 800781e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f9 f935 	bl	8000a94 <__aeabi_dcmplt>
 800782a:	2800      	cmp	r0, #0
 800782c:	d04f      	beq.n	80078ce <_dtoa_r+0x236>
 800782e:	2300      	movs	r3, #0
 8007830:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007834:	930f      	str	r3, [sp, #60]	; 0x3c
 8007836:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007838:	1b1c      	subs	r4, r3, r4
 800783a:	1e63      	subs	r3, r4, #1
 800783c:	9309      	str	r3, [sp, #36]	; 0x24
 800783e:	bf49      	itett	mi
 8007840:	f1c4 0301 	rsbmi	r3, r4, #1
 8007844:	2300      	movpl	r3, #0
 8007846:	9306      	strmi	r3, [sp, #24]
 8007848:	2300      	movmi	r3, #0
 800784a:	bf54      	ite	pl
 800784c:	9306      	strpl	r3, [sp, #24]
 800784e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007850:	f1ba 0f00 	cmp.w	sl, #0
 8007854:	db3d      	blt.n	80078d2 <_dtoa_r+0x23a>
 8007856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007858:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800785c:	4453      	add	r3, sl
 800785e:	9309      	str	r3, [sp, #36]	; 0x24
 8007860:	2300      	movs	r3, #0
 8007862:	930a      	str	r3, [sp, #40]	; 0x28
 8007864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007866:	2b09      	cmp	r3, #9
 8007868:	f200 808c 	bhi.w	8007984 <_dtoa_r+0x2ec>
 800786c:	2b05      	cmp	r3, #5
 800786e:	bfc4      	itt	gt
 8007870:	3b04      	subgt	r3, #4
 8007872:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007876:	bfc8      	it	gt
 8007878:	2400      	movgt	r4, #0
 800787a:	f1a3 0302 	sub.w	r3, r3, #2
 800787e:	bfd8      	it	le
 8007880:	2401      	movle	r4, #1
 8007882:	2b03      	cmp	r3, #3
 8007884:	f200 808a 	bhi.w	800799c <_dtoa_r+0x304>
 8007888:	e8df f003 	tbb	[pc, r3]
 800788c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007890:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007894:	441c      	add	r4, r3
 8007896:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800789a:	2b20      	cmp	r3, #32
 800789c:	bfc3      	ittte	gt
 800789e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80078a6:	fa09 f303 	lslgt.w	r3, r9, r3
 80078aa:	f1c3 0320 	rsble	r3, r3, #32
 80078ae:	bfc6      	itte	gt
 80078b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078b4:	4318      	orrgt	r0, r3
 80078b6:	fa06 f003 	lslle.w	r0, r6, r3
 80078ba:	f7f8 fdff 	bl	80004bc <__aeabi_ui2d>
 80078be:	2301      	movs	r3, #1
 80078c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80078c4:	3c01      	subs	r4, #1
 80078c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80078c8:	e76f      	b.n	80077aa <_dtoa_r+0x112>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e7b2      	b.n	8007834 <_dtoa_r+0x19c>
 80078ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80078d0:	e7b1      	b.n	8007836 <_dtoa_r+0x19e>
 80078d2:	9b06      	ldr	r3, [sp, #24]
 80078d4:	eba3 030a 	sub.w	r3, r3, sl
 80078d8:	9306      	str	r3, [sp, #24]
 80078da:	f1ca 0300 	rsb	r3, sl, #0
 80078de:	930a      	str	r3, [sp, #40]	; 0x28
 80078e0:	2300      	movs	r3, #0
 80078e2:	930e      	str	r3, [sp, #56]	; 0x38
 80078e4:	e7be      	b.n	8007864 <_dtoa_r+0x1cc>
 80078e6:	2300      	movs	r3, #0
 80078e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dc58      	bgt.n	80079a2 <_dtoa_r+0x30a>
 80078f0:	f04f 0901 	mov.w	r9, #1
 80078f4:	464b      	mov	r3, r9
 80078f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80078fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80078fe:	2200      	movs	r2, #0
 8007900:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007902:	6042      	str	r2, [r0, #4]
 8007904:	2204      	movs	r2, #4
 8007906:	f102 0614 	add.w	r6, r2, #20
 800790a:	429e      	cmp	r6, r3
 800790c:	6841      	ldr	r1, [r0, #4]
 800790e:	d94e      	bls.n	80079ae <_dtoa_r+0x316>
 8007910:	4628      	mov	r0, r5
 8007912:	f001 f949 	bl	8008ba8 <_Balloc>
 8007916:	9003      	str	r0, [sp, #12]
 8007918:	2800      	cmp	r0, #0
 800791a:	d14c      	bne.n	80079b6 <_dtoa_r+0x31e>
 800791c:	4602      	mov	r2, r0
 800791e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007922:	4b17      	ldr	r3, [pc, #92]	; (8007980 <_dtoa_r+0x2e8>)
 8007924:	e6cc      	b.n	80076c0 <_dtoa_r+0x28>
 8007926:	2301      	movs	r3, #1
 8007928:	e7de      	b.n	80078e8 <_dtoa_r+0x250>
 800792a:	2300      	movs	r3, #0
 800792c:	930b      	str	r3, [sp, #44]	; 0x2c
 800792e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007930:	eb0a 0903 	add.w	r9, sl, r3
 8007934:	f109 0301 	add.w	r3, r9, #1
 8007938:	2b01      	cmp	r3, #1
 800793a:	9308      	str	r3, [sp, #32]
 800793c:	bfb8      	it	lt
 800793e:	2301      	movlt	r3, #1
 8007940:	e7dd      	b.n	80078fe <_dtoa_r+0x266>
 8007942:	2301      	movs	r3, #1
 8007944:	e7f2      	b.n	800792c <_dtoa_r+0x294>
 8007946:	bf00      	nop
 8007948:	636f4361 	.word	0x636f4361
 800794c:	3fd287a7 	.word	0x3fd287a7
 8007950:	8b60c8b3 	.word	0x8b60c8b3
 8007954:	3fc68a28 	.word	0x3fc68a28
 8007958:	509f79fb 	.word	0x509f79fb
 800795c:	3fd34413 	.word	0x3fd34413
 8007960:	0800bd9e 	.word	0x0800bd9e
 8007964:	0800bdb5 	.word	0x0800bdb5
 8007968:	7ff00000 	.word	0x7ff00000
 800796c:	0800bd9a 	.word	0x0800bd9a
 8007970:	0800bd91 	.word	0x0800bd91
 8007974:	0800bc11 	.word	0x0800bc11
 8007978:	3ff80000 	.word	0x3ff80000
 800797c:	0800bf88 	.word	0x0800bf88
 8007980:	0800be10 	.word	0x0800be10
 8007984:	2401      	movs	r4, #1
 8007986:	2300      	movs	r3, #0
 8007988:	940b      	str	r4, [sp, #44]	; 0x2c
 800798a:	9322      	str	r3, [sp, #136]	; 0x88
 800798c:	f04f 39ff 	mov.w	r9, #4294967295
 8007990:	2200      	movs	r2, #0
 8007992:	2312      	movs	r3, #18
 8007994:	f8cd 9020 	str.w	r9, [sp, #32]
 8007998:	9223      	str	r2, [sp, #140]	; 0x8c
 800799a:	e7b0      	b.n	80078fe <_dtoa_r+0x266>
 800799c:	2301      	movs	r3, #1
 800799e:	930b      	str	r3, [sp, #44]	; 0x2c
 80079a0:	e7f4      	b.n	800798c <_dtoa_r+0x2f4>
 80079a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80079a6:	464b      	mov	r3, r9
 80079a8:	f8cd 9020 	str.w	r9, [sp, #32]
 80079ac:	e7a7      	b.n	80078fe <_dtoa_r+0x266>
 80079ae:	3101      	adds	r1, #1
 80079b0:	6041      	str	r1, [r0, #4]
 80079b2:	0052      	lsls	r2, r2, #1
 80079b4:	e7a7      	b.n	8007906 <_dtoa_r+0x26e>
 80079b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079b8:	9a03      	ldr	r2, [sp, #12]
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	9b08      	ldr	r3, [sp, #32]
 80079be:	2b0e      	cmp	r3, #14
 80079c0:	f200 80a8 	bhi.w	8007b14 <_dtoa_r+0x47c>
 80079c4:	2c00      	cmp	r4, #0
 80079c6:	f000 80a5 	beq.w	8007b14 <_dtoa_r+0x47c>
 80079ca:	f1ba 0f00 	cmp.w	sl, #0
 80079ce:	dd34      	ble.n	8007a3a <_dtoa_r+0x3a2>
 80079d0:	4a9a      	ldr	r2, [pc, #616]	; (8007c3c <_dtoa_r+0x5a4>)
 80079d2:	f00a 030f 	and.w	r3, sl, #15
 80079d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80079de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80079e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80079ea:	d016      	beq.n	8007a1a <_dtoa_r+0x382>
 80079ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079f0:	4b93      	ldr	r3, [pc, #588]	; (8007c40 <_dtoa_r+0x5a8>)
 80079f2:	2703      	movs	r7, #3
 80079f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079f8:	f7f8 ff04 	bl	8000804 <__aeabi_ddiv>
 80079fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a00:	f004 040f 	and.w	r4, r4, #15
 8007a04:	4e8e      	ldr	r6, [pc, #568]	; (8007c40 <_dtoa_r+0x5a8>)
 8007a06:	b954      	cbnz	r4, 8007a1e <_dtoa_r+0x386>
 8007a08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a10:	f7f8 fef8 	bl	8000804 <__aeabi_ddiv>
 8007a14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a18:	e029      	b.n	8007a6e <_dtoa_r+0x3d6>
 8007a1a:	2702      	movs	r7, #2
 8007a1c:	e7f2      	b.n	8007a04 <_dtoa_r+0x36c>
 8007a1e:	07e1      	lsls	r1, r4, #31
 8007a20:	d508      	bpl.n	8007a34 <_dtoa_r+0x39c>
 8007a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a2a:	f7f8 fdc1 	bl	80005b0 <__aeabi_dmul>
 8007a2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a32:	3701      	adds	r7, #1
 8007a34:	1064      	asrs	r4, r4, #1
 8007a36:	3608      	adds	r6, #8
 8007a38:	e7e5      	b.n	8007a06 <_dtoa_r+0x36e>
 8007a3a:	f000 80a5 	beq.w	8007b88 <_dtoa_r+0x4f0>
 8007a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a42:	f1ca 0400 	rsb	r4, sl, #0
 8007a46:	4b7d      	ldr	r3, [pc, #500]	; (8007c3c <_dtoa_r+0x5a4>)
 8007a48:	f004 020f 	and.w	r2, r4, #15
 8007a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f7f8 fdac 	bl	80005b0 <__aeabi_dmul>
 8007a58:	2702      	movs	r7, #2
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a60:	4e77      	ldr	r6, [pc, #476]	; (8007c40 <_dtoa_r+0x5a8>)
 8007a62:	1124      	asrs	r4, r4, #4
 8007a64:	2c00      	cmp	r4, #0
 8007a66:	f040 8084 	bne.w	8007b72 <_dtoa_r+0x4da>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1d2      	bne.n	8007a14 <_dtoa_r+0x37c>
 8007a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 808b 	beq.w	8007b8c <_dtoa_r+0x4f4>
 8007a76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a82:	2200      	movs	r2, #0
 8007a84:	4b6f      	ldr	r3, [pc, #444]	; (8007c44 <_dtoa_r+0x5ac>)
 8007a86:	f7f9 f805 	bl	8000a94 <__aeabi_dcmplt>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d07e      	beq.n	8007b8c <_dtoa_r+0x4f4>
 8007a8e:	9b08      	ldr	r3, [sp, #32]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d07b      	beq.n	8007b8c <_dtoa_r+0x4f4>
 8007a94:	f1b9 0f00 	cmp.w	r9, #0
 8007a98:	dd38      	ble.n	8007b0c <_dtoa_r+0x474>
 8007a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4b69      	ldr	r3, [pc, #420]	; (8007c48 <_dtoa_r+0x5b0>)
 8007aa2:	f7f8 fd85 	bl	80005b0 <__aeabi_dmul>
 8007aa6:	464c      	mov	r4, r9
 8007aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aac:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007ab0:	3701      	adds	r7, #1
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	f7f8 fd12 	bl	80004dc <__aeabi_i2d>
 8007ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007abc:	f7f8 fd78 	bl	80005b0 <__aeabi_dmul>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4b62      	ldr	r3, [pc, #392]	; (8007c4c <_dtoa_r+0x5b4>)
 8007ac4:	f7f8 fbbe 	bl	8000244 <__adddf3>
 8007ac8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007acc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ad0:	9611      	str	r6, [sp, #68]	; 0x44
 8007ad2:	2c00      	cmp	r4, #0
 8007ad4:	d15d      	bne.n	8007b92 <_dtoa_r+0x4fa>
 8007ad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ada:	2200      	movs	r2, #0
 8007adc:	4b5c      	ldr	r3, [pc, #368]	; (8007c50 <_dtoa_r+0x5b8>)
 8007ade:	f7f8 fbaf 	bl	8000240 <__aeabi_dsub>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007aea:	4633      	mov	r3, r6
 8007aec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007aee:	f7f8 ffef 	bl	8000ad0 <__aeabi_dcmpgt>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f040 829c 	bne.w	8008030 <_dtoa_r+0x998>
 8007af8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007afc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007afe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b02:	f7f8 ffc7 	bl	8000a94 <__aeabi_dcmplt>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f040 8290 	bne.w	800802c <_dtoa_r+0x994>
 8007b0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007b10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f2c0 8152 	blt.w	8007dc0 <_dtoa_r+0x728>
 8007b1c:	f1ba 0f0e 	cmp.w	sl, #14
 8007b20:	f300 814e 	bgt.w	8007dc0 <_dtoa_r+0x728>
 8007b24:	4b45      	ldr	r3, [pc, #276]	; (8007c3c <_dtoa_r+0x5a4>)
 8007b26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007b32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f280 80db 	bge.w	8007cf0 <_dtoa_r+0x658>
 8007b3a:	9b08      	ldr	r3, [sp, #32]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f300 80d7 	bgt.w	8007cf0 <_dtoa_r+0x658>
 8007b42:	f040 8272 	bne.w	800802a <_dtoa_r+0x992>
 8007b46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4b40      	ldr	r3, [pc, #256]	; (8007c50 <_dtoa_r+0x5b8>)
 8007b4e:	f7f8 fd2f 	bl	80005b0 <__aeabi_dmul>
 8007b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b56:	f7f8 ffb1 	bl	8000abc <__aeabi_dcmpge>
 8007b5a:	9c08      	ldr	r4, [sp, #32]
 8007b5c:	4626      	mov	r6, r4
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f040 8248 	bne.w	8007ff4 <_dtoa_r+0x95c>
 8007b64:	2331      	movs	r3, #49	; 0x31
 8007b66:	9f03      	ldr	r7, [sp, #12]
 8007b68:	f10a 0a01 	add.w	sl, sl, #1
 8007b6c:	f807 3b01 	strb.w	r3, [r7], #1
 8007b70:	e244      	b.n	8007ffc <_dtoa_r+0x964>
 8007b72:	07e2      	lsls	r2, r4, #31
 8007b74:	d505      	bpl.n	8007b82 <_dtoa_r+0x4ea>
 8007b76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b7a:	f7f8 fd19 	bl	80005b0 <__aeabi_dmul>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	3701      	adds	r7, #1
 8007b82:	1064      	asrs	r4, r4, #1
 8007b84:	3608      	adds	r6, #8
 8007b86:	e76d      	b.n	8007a64 <_dtoa_r+0x3cc>
 8007b88:	2702      	movs	r7, #2
 8007b8a:	e770      	b.n	8007a6e <_dtoa_r+0x3d6>
 8007b8c:	46d0      	mov	r8, sl
 8007b8e:	9c08      	ldr	r4, [sp, #32]
 8007b90:	e78f      	b.n	8007ab2 <_dtoa_r+0x41a>
 8007b92:	9903      	ldr	r1, [sp, #12]
 8007b94:	4b29      	ldr	r3, [pc, #164]	; (8007c3c <_dtoa_r+0x5a4>)
 8007b96:	4421      	add	r1, r4
 8007b98:	9112      	str	r1, [sp, #72]	; 0x48
 8007b9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ba0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007ba4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	d055      	beq.n	8007c58 <_dtoa_r+0x5c0>
 8007bac:	2000      	movs	r0, #0
 8007bae:	4929      	ldr	r1, [pc, #164]	; (8007c54 <_dtoa_r+0x5bc>)
 8007bb0:	f7f8 fe28 	bl	8000804 <__aeabi_ddiv>
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	f7f8 fb42 	bl	8000240 <__aeabi_dsub>
 8007bbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bc0:	9f03      	ldr	r7, [sp, #12]
 8007bc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc6:	f7f8 ffa3 	bl	8000b10 <__aeabi_d2iz>
 8007bca:	4604      	mov	r4, r0
 8007bcc:	f7f8 fc86 	bl	80004dc <__aeabi_i2d>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd8:	f7f8 fb32 	bl	8000240 <__aeabi_dsub>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	3430      	adds	r4, #48	; 0x30
 8007be2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007be6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bea:	f807 4b01 	strb.w	r4, [r7], #1
 8007bee:	f7f8 ff51 	bl	8000a94 <__aeabi_dcmplt>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d174      	bne.n	8007ce0 <_dtoa_r+0x648>
 8007bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	4911      	ldr	r1, [pc, #68]	; (8007c44 <_dtoa_r+0x5ac>)
 8007bfe:	f7f8 fb1f 	bl	8000240 <__aeabi_dsub>
 8007c02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c06:	f7f8 ff45 	bl	8000a94 <__aeabi_dcmplt>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	f040 80b7 	bne.w	8007d7e <_dtoa_r+0x6e6>
 8007c10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c12:	429f      	cmp	r7, r3
 8007c14:	f43f af7a 	beq.w	8007b0c <_dtoa_r+0x474>
 8007c18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <_dtoa_r+0x5b0>)
 8007c20:	f7f8 fcc6 	bl	80005b0 <__aeabi_dmul>
 8007c24:	2200      	movs	r2, #0
 8007c26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c2e:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <_dtoa_r+0x5b0>)
 8007c30:	f7f8 fcbe 	bl	80005b0 <__aeabi_dmul>
 8007c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c38:	e7c3      	b.n	8007bc2 <_dtoa_r+0x52a>
 8007c3a:	bf00      	nop
 8007c3c:	0800bf88 	.word	0x0800bf88
 8007c40:	0800bf60 	.word	0x0800bf60
 8007c44:	3ff00000 	.word	0x3ff00000
 8007c48:	40240000 	.word	0x40240000
 8007c4c:	401c0000 	.word	0x401c0000
 8007c50:	40140000 	.word	0x40140000
 8007c54:	3fe00000 	.word	0x3fe00000
 8007c58:	4630      	mov	r0, r6
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	f7f8 fca8 	bl	80005b0 <__aeabi_dmul>
 8007c60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c66:	9c03      	ldr	r4, [sp, #12]
 8007c68:	9314      	str	r3, [sp, #80]	; 0x50
 8007c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c6e:	f7f8 ff4f 	bl	8000b10 <__aeabi_d2iz>
 8007c72:	9015      	str	r0, [sp, #84]	; 0x54
 8007c74:	f7f8 fc32 	bl	80004dc <__aeabi_i2d>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c80:	f7f8 fade 	bl	8000240 <__aeabi_dsub>
 8007c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c86:	4606      	mov	r6, r0
 8007c88:	3330      	adds	r3, #48	; 0x30
 8007c8a:	f804 3b01 	strb.w	r3, [r4], #1
 8007c8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c90:	460f      	mov	r7, r1
 8007c92:	429c      	cmp	r4, r3
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	d124      	bne.n	8007ce4 <_dtoa_r+0x64c>
 8007c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c9e:	4bb0      	ldr	r3, [pc, #704]	; (8007f60 <_dtoa_r+0x8c8>)
 8007ca0:	f7f8 fad0 	bl	8000244 <__adddf3>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	f7f8 ff10 	bl	8000ad0 <__aeabi_dcmpgt>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d163      	bne.n	8007d7c <_dtoa_r+0x6e4>
 8007cb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cb8:	2000      	movs	r0, #0
 8007cba:	49a9      	ldr	r1, [pc, #676]	; (8007f60 <_dtoa_r+0x8c8>)
 8007cbc:	f7f8 fac0 	bl	8000240 <__aeabi_dsub>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	f7f8 fee4 	bl	8000a94 <__aeabi_dcmplt>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	f43f af1d 	beq.w	8007b0c <_dtoa_r+0x474>
 8007cd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007cd4:	1e7b      	subs	r3, r7, #1
 8007cd6:	9314      	str	r3, [sp, #80]	; 0x50
 8007cd8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007cdc:	2b30      	cmp	r3, #48	; 0x30
 8007cde:	d0f8      	beq.n	8007cd2 <_dtoa_r+0x63a>
 8007ce0:	46c2      	mov	sl, r8
 8007ce2:	e03b      	b.n	8007d5c <_dtoa_r+0x6c4>
 8007ce4:	4b9f      	ldr	r3, [pc, #636]	; (8007f64 <_dtoa_r+0x8cc>)
 8007ce6:	f7f8 fc63 	bl	80005b0 <__aeabi_dmul>
 8007cea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cee:	e7bc      	b.n	8007c6a <_dtoa_r+0x5d2>
 8007cf0:	9f03      	ldr	r7, [sp, #12]
 8007cf2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007cf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	f7f8 fd81 	bl	8000804 <__aeabi_ddiv>
 8007d02:	f7f8 ff05 	bl	8000b10 <__aeabi_d2iz>
 8007d06:	4604      	mov	r4, r0
 8007d08:	f7f8 fbe8 	bl	80004dc <__aeabi_i2d>
 8007d0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d10:	f7f8 fc4e 	bl	80005b0 <__aeabi_dmul>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 fa90 	bl	8000240 <__aeabi_dsub>
 8007d20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007d24:	f807 6b01 	strb.w	r6, [r7], #1
 8007d28:	9e03      	ldr	r6, [sp, #12]
 8007d2a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007d2e:	1bbe      	subs	r6, r7, r6
 8007d30:	45b4      	cmp	ip, r6
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	d136      	bne.n	8007da6 <_dtoa_r+0x70e>
 8007d38:	f7f8 fa84 	bl	8000244 <__adddf3>
 8007d3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d40:	4680      	mov	r8, r0
 8007d42:	4689      	mov	r9, r1
 8007d44:	f7f8 fec4 	bl	8000ad0 <__aeabi_dcmpgt>
 8007d48:	bb58      	cbnz	r0, 8007da2 <_dtoa_r+0x70a>
 8007d4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d4e:	4640      	mov	r0, r8
 8007d50:	4649      	mov	r1, r9
 8007d52:	f7f8 fe95 	bl	8000a80 <__aeabi_dcmpeq>
 8007d56:	b108      	cbz	r0, 8007d5c <_dtoa_r+0x6c4>
 8007d58:	07e1      	lsls	r1, r4, #31
 8007d5a:	d422      	bmi.n	8007da2 <_dtoa_r+0x70a>
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	4659      	mov	r1, fp
 8007d60:	f000 ff62 	bl	8008c28 <_Bfree>
 8007d64:	2300      	movs	r3, #0
 8007d66:	703b      	strb	r3, [r7, #0]
 8007d68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d6a:	f10a 0001 	add.w	r0, sl, #1
 8007d6e:	6018      	str	r0, [r3, #0]
 8007d70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f43f acde 	beq.w	8007734 <_dtoa_r+0x9c>
 8007d78:	601f      	str	r7, [r3, #0]
 8007d7a:	e4db      	b.n	8007734 <_dtoa_r+0x9c>
 8007d7c:	4627      	mov	r7, r4
 8007d7e:	463b      	mov	r3, r7
 8007d80:	461f      	mov	r7, r3
 8007d82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d86:	2a39      	cmp	r2, #57	; 0x39
 8007d88:	d107      	bne.n	8007d9a <_dtoa_r+0x702>
 8007d8a:	9a03      	ldr	r2, [sp, #12]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d1f7      	bne.n	8007d80 <_dtoa_r+0x6e8>
 8007d90:	2230      	movs	r2, #48	; 0x30
 8007d92:	9903      	ldr	r1, [sp, #12]
 8007d94:	f108 0801 	add.w	r8, r8, #1
 8007d98:	700a      	strb	r2, [r1, #0]
 8007d9a:	781a      	ldrb	r2, [r3, #0]
 8007d9c:	3201      	adds	r2, #1
 8007d9e:	701a      	strb	r2, [r3, #0]
 8007da0:	e79e      	b.n	8007ce0 <_dtoa_r+0x648>
 8007da2:	46d0      	mov	r8, sl
 8007da4:	e7eb      	b.n	8007d7e <_dtoa_r+0x6e6>
 8007da6:	2200      	movs	r2, #0
 8007da8:	4b6e      	ldr	r3, [pc, #440]	; (8007f64 <_dtoa_r+0x8cc>)
 8007daa:	f7f8 fc01 	bl	80005b0 <__aeabi_dmul>
 8007dae:	2200      	movs	r2, #0
 8007db0:	2300      	movs	r3, #0
 8007db2:	4680      	mov	r8, r0
 8007db4:	4689      	mov	r9, r1
 8007db6:	f7f8 fe63 	bl	8000a80 <__aeabi_dcmpeq>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d09b      	beq.n	8007cf6 <_dtoa_r+0x65e>
 8007dbe:	e7cd      	b.n	8007d5c <_dtoa_r+0x6c4>
 8007dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	f000 80d0 	beq.w	8007f68 <_dtoa_r+0x8d0>
 8007dc8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007dca:	2a01      	cmp	r2, #1
 8007dcc:	f300 80ae 	bgt.w	8007f2c <_dtoa_r+0x894>
 8007dd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007dd2:	2a00      	cmp	r2, #0
 8007dd4:	f000 80a6 	beq.w	8007f24 <_dtoa_r+0x88c>
 8007dd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ddc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dde:	9f06      	ldr	r7, [sp, #24]
 8007de0:	9a06      	ldr	r2, [sp, #24]
 8007de2:	2101      	movs	r1, #1
 8007de4:	441a      	add	r2, r3
 8007de6:	9206      	str	r2, [sp, #24]
 8007de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dea:	4628      	mov	r0, r5
 8007dec:	441a      	add	r2, r3
 8007dee:	9209      	str	r2, [sp, #36]	; 0x24
 8007df0:	f001 f81a 	bl	8008e28 <__i2b>
 8007df4:	4606      	mov	r6, r0
 8007df6:	2f00      	cmp	r7, #0
 8007df8:	dd0c      	ble.n	8007e14 <_dtoa_r+0x77c>
 8007dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dd09      	ble.n	8007e14 <_dtoa_r+0x77c>
 8007e00:	42bb      	cmp	r3, r7
 8007e02:	bfa8      	it	ge
 8007e04:	463b      	movge	r3, r7
 8007e06:	9a06      	ldr	r2, [sp, #24]
 8007e08:	1aff      	subs	r7, r7, r3
 8007e0a:	1ad2      	subs	r2, r2, r3
 8007e0c:	9206      	str	r2, [sp, #24]
 8007e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	9309      	str	r3, [sp, #36]	; 0x24
 8007e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e16:	b1f3      	cbz	r3, 8007e56 <_dtoa_r+0x7be>
 8007e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80a8 	beq.w	8007f70 <_dtoa_r+0x8d8>
 8007e20:	2c00      	cmp	r4, #0
 8007e22:	dd10      	ble.n	8007e46 <_dtoa_r+0x7ae>
 8007e24:	4631      	mov	r1, r6
 8007e26:	4622      	mov	r2, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f001 f8bb 	bl	8008fa4 <__pow5mult>
 8007e2e:	465a      	mov	r2, fp
 8007e30:	4601      	mov	r1, r0
 8007e32:	4606      	mov	r6, r0
 8007e34:	4628      	mov	r0, r5
 8007e36:	f001 f80d 	bl	8008e54 <__multiply>
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 fef2 	bl	8008c28 <_Bfree>
 8007e44:	46c3      	mov	fp, r8
 8007e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e48:	1b1a      	subs	r2, r3, r4
 8007e4a:	d004      	beq.n	8007e56 <_dtoa_r+0x7be>
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f001 f8a8 	bl	8008fa4 <__pow5mult>
 8007e54:	4683      	mov	fp, r0
 8007e56:	2101      	movs	r1, #1
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f000 ffe5 	bl	8008e28 <__i2b>
 8007e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e60:	4604      	mov	r4, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f340 8086 	ble.w	8007f74 <_dtoa_r+0x8dc>
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f001 f899 	bl	8008fa4 <__pow5mult>
 8007e72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e74:	4604      	mov	r4, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	dd7f      	ble.n	8007f7a <_dtoa_r+0x8e2>
 8007e7a:	f04f 0800 	mov.w	r8, #0
 8007e7e:	6923      	ldr	r3, [r4, #16]
 8007e80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e84:	6918      	ldr	r0, [r3, #16]
 8007e86:	f000 ff81 	bl	8008d8c <__hi0bits>
 8007e8a:	f1c0 0020 	rsb	r0, r0, #32
 8007e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e90:	4418      	add	r0, r3
 8007e92:	f010 001f 	ands.w	r0, r0, #31
 8007e96:	f000 8092 	beq.w	8007fbe <_dtoa_r+0x926>
 8007e9a:	f1c0 0320 	rsb	r3, r0, #32
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	f340 808a 	ble.w	8007fb8 <_dtoa_r+0x920>
 8007ea4:	f1c0 001c 	rsb	r0, r0, #28
 8007ea8:	9b06      	ldr	r3, [sp, #24]
 8007eaa:	4407      	add	r7, r0
 8007eac:	4403      	add	r3, r0
 8007eae:	9306      	str	r3, [sp, #24]
 8007eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb2:	4403      	add	r3, r0
 8007eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb6:	9b06      	ldr	r3, [sp, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	dd05      	ble.n	8007ec8 <_dtoa_r+0x830>
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f001 f8c9 	bl	8009058 <__lshift>
 8007ec6:	4683      	mov	fp, r0
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dd05      	ble.n	8007eda <_dtoa_r+0x842>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f001 f8c0 	bl	8009058 <__lshift>
 8007ed8:	4604      	mov	r4, r0
 8007eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d070      	beq.n	8007fc2 <_dtoa_r+0x92a>
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	4658      	mov	r0, fp
 8007ee4:	f001 f928 	bl	8009138 <__mcmp>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	da6a      	bge.n	8007fc2 <_dtoa_r+0x92a>
 8007eec:	2300      	movs	r3, #0
 8007eee:	4659      	mov	r1, fp
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 feba 	bl	8008c6c <__multadd>
 8007ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007efa:	4683      	mov	fp, r0
 8007efc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 8194 	beq.w	800822e <_dtoa_r+0xb96>
 8007f06:	4631      	mov	r1, r6
 8007f08:	2300      	movs	r3, #0
 8007f0a:	220a      	movs	r2, #10
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	f000 fead 	bl	8008c6c <__multadd>
 8007f12:	f1b9 0f00 	cmp.w	r9, #0
 8007f16:	4606      	mov	r6, r0
 8007f18:	f300 8093 	bgt.w	8008042 <_dtoa_r+0x9aa>
 8007f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	dc57      	bgt.n	8007fd2 <_dtoa_r+0x93a>
 8007f22:	e08e      	b.n	8008042 <_dtoa_r+0x9aa>
 8007f24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f2a:	e757      	b.n	8007ddc <_dtoa_r+0x744>
 8007f2c:	9b08      	ldr	r3, [sp, #32]
 8007f2e:	1e5c      	subs	r4, r3, #1
 8007f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	bfb7      	itett	lt
 8007f36:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f38:	1b1c      	subge	r4, r3, r4
 8007f3a:	1ae2      	sublt	r2, r4, r3
 8007f3c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f3e:	bfbe      	ittt	lt
 8007f40:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007f42:	189b      	addlt	r3, r3, r2
 8007f44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f46:	9b08      	ldr	r3, [sp, #32]
 8007f48:	bfb8      	it	lt
 8007f4a:	2400      	movlt	r4, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfbb      	ittet	lt
 8007f50:	9b06      	ldrlt	r3, [sp, #24]
 8007f52:	9a08      	ldrlt	r2, [sp, #32]
 8007f54:	9f06      	ldrge	r7, [sp, #24]
 8007f56:	1a9f      	sublt	r7, r3, r2
 8007f58:	bfac      	ite	ge
 8007f5a:	9b08      	ldrge	r3, [sp, #32]
 8007f5c:	2300      	movlt	r3, #0
 8007f5e:	e73f      	b.n	8007de0 <_dtoa_r+0x748>
 8007f60:	3fe00000 	.word	0x3fe00000
 8007f64:	40240000 	.word	0x40240000
 8007f68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f6a:	9f06      	ldr	r7, [sp, #24]
 8007f6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007f6e:	e742      	b.n	8007df6 <_dtoa_r+0x75e>
 8007f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f72:	e76b      	b.n	8007e4c <_dtoa_r+0x7b4>
 8007f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	dc19      	bgt.n	8007fae <_dtoa_r+0x916>
 8007f7a:	9b04      	ldr	r3, [sp, #16]
 8007f7c:	b9bb      	cbnz	r3, 8007fae <_dtoa_r+0x916>
 8007f7e:	9b05      	ldr	r3, [sp, #20]
 8007f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f84:	b99b      	cbnz	r3, 8007fae <_dtoa_r+0x916>
 8007f86:	9b05      	ldr	r3, [sp, #20]
 8007f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f8c:	0d1b      	lsrs	r3, r3, #20
 8007f8e:	051b      	lsls	r3, r3, #20
 8007f90:	b183      	cbz	r3, 8007fb4 <_dtoa_r+0x91c>
 8007f92:	f04f 0801 	mov.w	r8, #1
 8007f96:	9b06      	ldr	r3, [sp, #24]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	9306      	str	r3, [sp, #24]
 8007f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f47f af6a 	bne.w	8007e7e <_dtoa_r+0x7e6>
 8007faa:	2001      	movs	r0, #1
 8007fac:	e76f      	b.n	8007e8e <_dtoa_r+0x7f6>
 8007fae:	f04f 0800 	mov.w	r8, #0
 8007fb2:	e7f6      	b.n	8007fa2 <_dtoa_r+0x90a>
 8007fb4:	4698      	mov	r8, r3
 8007fb6:	e7f4      	b.n	8007fa2 <_dtoa_r+0x90a>
 8007fb8:	f43f af7d 	beq.w	8007eb6 <_dtoa_r+0x81e>
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	301c      	adds	r0, #28
 8007fc0:	e772      	b.n	8007ea8 <_dtoa_r+0x810>
 8007fc2:	9b08      	ldr	r3, [sp, #32]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	dc36      	bgt.n	8008036 <_dtoa_r+0x99e>
 8007fc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	dd33      	ble.n	8008036 <_dtoa_r+0x99e>
 8007fce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fd2:	f1b9 0f00 	cmp.w	r9, #0
 8007fd6:	d10d      	bne.n	8007ff4 <_dtoa_r+0x95c>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	464b      	mov	r3, r9
 8007fdc:	2205      	movs	r2, #5
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 fe44 	bl	8008c6c <__multadd>
 8007fe4:	4601      	mov	r1, r0
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	4658      	mov	r0, fp
 8007fea:	f001 f8a5 	bl	8009138 <__mcmp>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	f73f adb8 	bgt.w	8007b64 <_dtoa_r+0x4cc>
 8007ff4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ff6:	9f03      	ldr	r7, [sp, #12]
 8007ff8:	ea6f 0a03 	mvn.w	sl, r3
 8007ffc:	f04f 0800 	mov.w	r8, #0
 8008000:	4621      	mov	r1, r4
 8008002:	4628      	mov	r0, r5
 8008004:	f000 fe10 	bl	8008c28 <_Bfree>
 8008008:	2e00      	cmp	r6, #0
 800800a:	f43f aea7 	beq.w	8007d5c <_dtoa_r+0x6c4>
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	d005      	beq.n	8008020 <_dtoa_r+0x988>
 8008014:	45b0      	cmp	r8, r6
 8008016:	d003      	beq.n	8008020 <_dtoa_r+0x988>
 8008018:	4641      	mov	r1, r8
 800801a:	4628      	mov	r0, r5
 800801c:	f000 fe04 	bl	8008c28 <_Bfree>
 8008020:	4631      	mov	r1, r6
 8008022:	4628      	mov	r0, r5
 8008024:	f000 fe00 	bl	8008c28 <_Bfree>
 8008028:	e698      	b.n	8007d5c <_dtoa_r+0x6c4>
 800802a:	2400      	movs	r4, #0
 800802c:	4626      	mov	r6, r4
 800802e:	e7e1      	b.n	8007ff4 <_dtoa_r+0x95c>
 8008030:	46c2      	mov	sl, r8
 8008032:	4626      	mov	r6, r4
 8008034:	e596      	b.n	8007b64 <_dtoa_r+0x4cc>
 8008036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80fd 	beq.w	800823c <_dtoa_r+0xba4>
 8008042:	2f00      	cmp	r7, #0
 8008044:	dd05      	ble.n	8008052 <_dtoa_r+0x9ba>
 8008046:	4631      	mov	r1, r6
 8008048:	463a      	mov	r2, r7
 800804a:	4628      	mov	r0, r5
 800804c:	f001 f804 	bl	8009058 <__lshift>
 8008050:	4606      	mov	r6, r0
 8008052:	f1b8 0f00 	cmp.w	r8, #0
 8008056:	d05c      	beq.n	8008112 <_dtoa_r+0xa7a>
 8008058:	4628      	mov	r0, r5
 800805a:	6871      	ldr	r1, [r6, #4]
 800805c:	f000 fda4 	bl	8008ba8 <_Balloc>
 8008060:	4607      	mov	r7, r0
 8008062:	b928      	cbnz	r0, 8008070 <_dtoa_r+0x9d8>
 8008064:	4602      	mov	r2, r0
 8008066:	f240 21ea 	movw	r1, #746	; 0x2ea
 800806a:	4b7f      	ldr	r3, [pc, #508]	; (8008268 <_dtoa_r+0xbd0>)
 800806c:	f7ff bb28 	b.w	80076c0 <_dtoa_r+0x28>
 8008070:	6932      	ldr	r2, [r6, #16]
 8008072:	f106 010c 	add.w	r1, r6, #12
 8008076:	3202      	adds	r2, #2
 8008078:	0092      	lsls	r2, r2, #2
 800807a:	300c      	adds	r0, #12
 800807c:	f000 fd86 	bl	8008b8c <memcpy>
 8008080:	2201      	movs	r2, #1
 8008082:	4639      	mov	r1, r7
 8008084:	4628      	mov	r0, r5
 8008086:	f000 ffe7 	bl	8009058 <__lshift>
 800808a:	46b0      	mov	r8, r6
 800808c:	4606      	mov	r6, r0
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	3301      	adds	r3, #1
 8008092:	9308      	str	r3, [sp, #32]
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	444b      	add	r3, r9
 8008098:	930a      	str	r3, [sp, #40]	; 0x28
 800809a:	9b04      	ldr	r3, [sp, #16]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	9309      	str	r3, [sp, #36]	; 0x24
 80080a2:	9b08      	ldr	r3, [sp, #32]
 80080a4:	4621      	mov	r1, r4
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4658      	mov	r0, fp
 80080aa:	9304      	str	r3, [sp, #16]
 80080ac:	f7ff fa68 	bl	8007580 <quorem>
 80080b0:	4603      	mov	r3, r0
 80080b2:	4641      	mov	r1, r8
 80080b4:	3330      	adds	r3, #48	; 0x30
 80080b6:	9006      	str	r0, [sp, #24]
 80080b8:	4658      	mov	r0, fp
 80080ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80080bc:	f001 f83c 	bl	8009138 <__mcmp>
 80080c0:	4632      	mov	r2, r6
 80080c2:	4681      	mov	r9, r0
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	f001 f852 	bl	8009170 <__mdiff>
 80080cc:	68c2      	ldr	r2, [r0, #12]
 80080ce:	4607      	mov	r7, r0
 80080d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d2:	bb02      	cbnz	r2, 8008116 <_dtoa_r+0xa7e>
 80080d4:	4601      	mov	r1, r0
 80080d6:	4658      	mov	r0, fp
 80080d8:	f001 f82e 	bl	8009138 <__mcmp>
 80080dc:	4602      	mov	r2, r0
 80080de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e0:	4639      	mov	r1, r7
 80080e2:	4628      	mov	r0, r5
 80080e4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80080e8:	f000 fd9e 	bl	8008c28 <_Bfree>
 80080ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080f0:	9f08      	ldr	r7, [sp, #32]
 80080f2:	ea43 0102 	orr.w	r1, r3, r2
 80080f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f8:	430b      	orrs	r3, r1
 80080fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080fc:	d10d      	bne.n	800811a <_dtoa_r+0xa82>
 80080fe:	2b39      	cmp	r3, #57	; 0x39
 8008100:	d029      	beq.n	8008156 <_dtoa_r+0xabe>
 8008102:	f1b9 0f00 	cmp.w	r9, #0
 8008106:	dd01      	ble.n	800810c <_dtoa_r+0xa74>
 8008108:	9b06      	ldr	r3, [sp, #24]
 800810a:	3331      	adds	r3, #49	; 0x31
 800810c:	9a04      	ldr	r2, [sp, #16]
 800810e:	7013      	strb	r3, [r2, #0]
 8008110:	e776      	b.n	8008000 <_dtoa_r+0x968>
 8008112:	4630      	mov	r0, r6
 8008114:	e7b9      	b.n	800808a <_dtoa_r+0x9f2>
 8008116:	2201      	movs	r2, #1
 8008118:	e7e2      	b.n	80080e0 <_dtoa_r+0xa48>
 800811a:	f1b9 0f00 	cmp.w	r9, #0
 800811e:	db06      	blt.n	800812e <_dtoa_r+0xa96>
 8008120:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008122:	ea41 0909 	orr.w	r9, r1, r9
 8008126:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008128:	ea59 0101 	orrs.w	r1, r9, r1
 800812c:	d120      	bne.n	8008170 <_dtoa_r+0xad8>
 800812e:	2a00      	cmp	r2, #0
 8008130:	ddec      	ble.n	800810c <_dtoa_r+0xa74>
 8008132:	4659      	mov	r1, fp
 8008134:	2201      	movs	r2, #1
 8008136:	4628      	mov	r0, r5
 8008138:	9308      	str	r3, [sp, #32]
 800813a:	f000 ff8d 	bl	8009058 <__lshift>
 800813e:	4621      	mov	r1, r4
 8008140:	4683      	mov	fp, r0
 8008142:	f000 fff9 	bl	8009138 <__mcmp>
 8008146:	2800      	cmp	r0, #0
 8008148:	9b08      	ldr	r3, [sp, #32]
 800814a:	dc02      	bgt.n	8008152 <_dtoa_r+0xaba>
 800814c:	d1de      	bne.n	800810c <_dtoa_r+0xa74>
 800814e:	07da      	lsls	r2, r3, #31
 8008150:	d5dc      	bpl.n	800810c <_dtoa_r+0xa74>
 8008152:	2b39      	cmp	r3, #57	; 0x39
 8008154:	d1d8      	bne.n	8008108 <_dtoa_r+0xa70>
 8008156:	2339      	movs	r3, #57	; 0x39
 8008158:	9a04      	ldr	r2, [sp, #16]
 800815a:	7013      	strb	r3, [r2, #0]
 800815c:	463b      	mov	r3, r7
 800815e:	461f      	mov	r7, r3
 8008160:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008164:	3b01      	subs	r3, #1
 8008166:	2a39      	cmp	r2, #57	; 0x39
 8008168:	d050      	beq.n	800820c <_dtoa_r+0xb74>
 800816a:	3201      	adds	r2, #1
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e747      	b.n	8008000 <_dtoa_r+0x968>
 8008170:	2a00      	cmp	r2, #0
 8008172:	dd03      	ble.n	800817c <_dtoa_r+0xae4>
 8008174:	2b39      	cmp	r3, #57	; 0x39
 8008176:	d0ee      	beq.n	8008156 <_dtoa_r+0xabe>
 8008178:	3301      	adds	r3, #1
 800817a:	e7c7      	b.n	800810c <_dtoa_r+0xa74>
 800817c:	9a08      	ldr	r2, [sp, #32]
 800817e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008180:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008184:	428a      	cmp	r2, r1
 8008186:	d02a      	beq.n	80081de <_dtoa_r+0xb46>
 8008188:	4659      	mov	r1, fp
 800818a:	2300      	movs	r3, #0
 800818c:	220a      	movs	r2, #10
 800818e:	4628      	mov	r0, r5
 8008190:	f000 fd6c 	bl	8008c6c <__multadd>
 8008194:	45b0      	cmp	r8, r6
 8008196:	4683      	mov	fp, r0
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	f04f 020a 	mov.w	r2, #10
 80081a0:	4641      	mov	r1, r8
 80081a2:	4628      	mov	r0, r5
 80081a4:	d107      	bne.n	80081b6 <_dtoa_r+0xb1e>
 80081a6:	f000 fd61 	bl	8008c6c <__multadd>
 80081aa:	4680      	mov	r8, r0
 80081ac:	4606      	mov	r6, r0
 80081ae:	9b08      	ldr	r3, [sp, #32]
 80081b0:	3301      	adds	r3, #1
 80081b2:	9308      	str	r3, [sp, #32]
 80081b4:	e775      	b.n	80080a2 <_dtoa_r+0xa0a>
 80081b6:	f000 fd59 	bl	8008c6c <__multadd>
 80081ba:	4631      	mov	r1, r6
 80081bc:	4680      	mov	r8, r0
 80081be:	2300      	movs	r3, #0
 80081c0:	220a      	movs	r2, #10
 80081c2:	4628      	mov	r0, r5
 80081c4:	f000 fd52 	bl	8008c6c <__multadd>
 80081c8:	4606      	mov	r6, r0
 80081ca:	e7f0      	b.n	80081ae <_dtoa_r+0xb16>
 80081cc:	f1b9 0f00 	cmp.w	r9, #0
 80081d0:	bfcc      	ite	gt
 80081d2:	464f      	movgt	r7, r9
 80081d4:	2701      	movle	r7, #1
 80081d6:	f04f 0800 	mov.w	r8, #0
 80081da:	9a03      	ldr	r2, [sp, #12]
 80081dc:	4417      	add	r7, r2
 80081de:	4659      	mov	r1, fp
 80081e0:	2201      	movs	r2, #1
 80081e2:	4628      	mov	r0, r5
 80081e4:	9308      	str	r3, [sp, #32]
 80081e6:	f000 ff37 	bl	8009058 <__lshift>
 80081ea:	4621      	mov	r1, r4
 80081ec:	4683      	mov	fp, r0
 80081ee:	f000 ffa3 	bl	8009138 <__mcmp>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	dcb2      	bgt.n	800815c <_dtoa_r+0xac4>
 80081f6:	d102      	bne.n	80081fe <_dtoa_r+0xb66>
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	07db      	lsls	r3, r3, #31
 80081fc:	d4ae      	bmi.n	800815c <_dtoa_r+0xac4>
 80081fe:	463b      	mov	r3, r7
 8008200:	461f      	mov	r7, r3
 8008202:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008206:	2a30      	cmp	r2, #48	; 0x30
 8008208:	d0fa      	beq.n	8008200 <_dtoa_r+0xb68>
 800820a:	e6f9      	b.n	8008000 <_dtoa_r+0x968>
 800820c:	9a03      	ldr	r2, [sp, #12]
 800820e:	429a      	cmp	r2, r3
 8008210:	d1a5      	bne.n	800815e <_dtoa_r+0xac6>
 8008212:	2331      	movs	r3, #49	; 0x31
 8008214:	f10a 0a01 	add.w	sl, sl, #1
 8008218:	e779      	b.n	800810e <_dtoa_r+0xa76>
 800821a:	4b14      	ldr	r3, [pc, #80]	; (800826c <_dtoa_r+0xbd4>)
 800821c:	f7ff baa8 	b.w	8007770 <_dtoa_r+0xd8>
 8008220:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008222:	2b00      	cmp	r3, #0
 8008224:	f47f aa81 	bne.w	800772a <_dtoa_r+0x92>
 8008228:	4b11      	ldr	r3, [pc, #68]	; (8008270 <_dtoa_r+0xbd8>)
 800822a:	f7ff baa1 	b.w	8007770 <_dtoa_r+0xd8>
 800822e:	f1b9 0f00 	cmp.w	r9, #0
 8008232:	dc03      	bgt.n	800823c <_dtoa_r+0xba4>
 8008234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008236:	2b02      	cmp	r3, #2
 8008238:	f73f aecb 	bgt.w	8007fd2 <_dtoa_r+0x93a>
 800823c:	9f03      	ldr	r7, [sp, #12]
 800823e:	4621      	mov	r1, r4
 8008240:	4658      	mov	r0, fp
 8008242:	f7ff f99d 	bl	8007580 <quorem>
 8008246:	9a03      	ldr	r2, [sp, #12]
 8008248:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800824c:	f807 3b01 	strb.w	r3, [r7], #1
 8008250:	1aba      	subs	r2, r7, r2
 8008252:	4591      	cmp	r9, r2
 8008254:	ddba      	ble.n	80081cc <_dtoa_r+0xb34>
 8008256:	4659      	mov	r1, fp
 8008258:	2300      	movs	r3, #0
 800825a:	220a      	movs	r2, #10
 800825c:	4628      	mov	r0, r5
 800825e:	f000 fd05 	bl	8008c6c <__multadd>
 8008262:	4683      	mov	fp, r0
 8008264:	e7eb      	b.n	800823e <_dtoa_r+0xba6>
 8008266:	bf00      	nop
 8008268:	0800be10 	.word	0x0800be10
 800826c:	0800bc10 	.word	0x0800bc10
 8008270:	0800bd91 	.word	0x0800bd91

08008274 <std>:
 8008274:	2300      	movs	r3, #0
 8008276:	b510      	push	{r4, lr}
 8008278:	4604      	mov	r4, r0
 800827a:	e9c0 3300 	strd	r3, r3, [r0]
 800827e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008282:	6083      	str	r3, [r0, #8]
 8008284:	8181      	strh	r1, [r0, #12]
 8008286:	6643      	str	r3, [r0, #100]	; 0x64
 8008288:	81c2      	strh	r2, [r0, #14]
 800828a:	6183      	str	r3, [r0, #24]
 800828c:	4619      	mov	r1, r3
 800828e:	2208      	movs	r2, #8
 8008290:	305c      	adds	r0, #92	; 0x5c
 8008292:	f7fd fc35 	bl	8005b00 <memset>
 8008296:	4b05      	ldr	r3, [pc, #20]	; (80082ac <std+0x38>)
 8008298:	6224      	str	r4, [r4, #32]
 800829a:	6263      	str	r3, [r4, #36]	; 0x24
 800829c:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <std+0x3c>)
 800829e:	62a3      	str	r3, [r4, #40]	; 0x28
 80082a0:	4b04      	ldr	r3, [pc, #16]	; (80082b4 <std+0x40>)
 80082a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082a4:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <std+0x44>)
 80082a6:	6323      	str	r3, [r4, #48]	; 0x30
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	bf00      	nop
 80082ac:	08009c8d 	.word	0x08009c8d
 80082b0:	08009caf 	.word	0x08009caf
 80082b4:	08009ce7 	.word	0x08009ce7
 80082b8:	08009d0b 	.word	0x08009d0b

080082bc <_cleanup_r>:
 80082bc:	4901      	ldr	r1, [pc, #4]	; (80082c4 <_cleanup_r+0x8>)
 80082be:	f000 b8af 	b.w	8008420 <_fwalk_reent>
 80082c2:	bf00      	nop
 80082c4:	0800a05d 	.word	0x0800a05d

080082c8 <__sfmoreglue>:
 80082c8:	2268      	movs	r2, #104	; 0x68
 80082ca:	b570      	push	{r4, r5, r6, lr}
 80082cc:	1e4d      	subs	r5, r1, #1
 80082ce:	4355      	muls	r5, r2
 80082d0:	460e      	mov	r6, r1
 80082d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082d6:	f001 f99b 	bl	8009610 <_malloc_r>
 80082da:	4604      	mov	r4, r0
 80082dc:	b140      	cbz	r0, 80082f0 <__sfmoreglue+0x28>
 80082de:	2100      	movs	r1, #0
 80082e0:	e9c0 1600 	strd	r1, r6, [r0]
 80082e4:	300c      	adds	r0, #12
 80082e6:	60a0      	str	r0, [r4, #8]
 80082e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082ec:	f7fd fc08 	bl	8005b00 <memset>
 80082f0:	4620      	mov	r0, r4
 80082f2:	bd70      	pop	{r4, r5, r6, pc}

080082f4 <__sfp_lock_acquire>:
 80082f4:	4801      	ldr	r0, [pc, #4]	; (80082fc <__sfp_lock_acquire+0x8>)
 80082f6:	f000 bc1e 	b.w	8008b36 <__retarget_lock_acquire_recursive>
 80082fa:	bf00      	nop
 80082fc:	200002af 	.word	0x200002af

08008300 <__sfp_lock_release>:
 8008300:	4801      	ldr	r0, [pc, #4]	; (8008308 <__sfp_lock_release+0x8>)
 8008302:	f000 bc19 	b.w	8008b38 <__retarget_lock_release_recursive>
 8008306:	bf00      	nop
 8008308:	200002af 	.word	0x200002af

0800830c <__sinit_lock_acquire>:
 800830c:	4801      	ldr	r0, [pc, #4]	; (8008314 <__sinit_lock_acquire+0x8>)
 800830e:	f000 bc12 	b.w	8008b36 <__retarget_lock_acquire_recursive>
 8008312:	bf00      	nop
 8008314:	200002b0 	.word	0x200002b0

08008318 <__sinit_lock_release>:
 8008318:	4801      	ldr	r0, [pc, #4]	; (8008320 <__sinit_lock_release+0x8>)
 800831a:	f000 bc0d 	b.w	8008b38 <__retarget_lock_release_recursive>
 800831e:	bf00      	nop
 8008320:	200002b0 	.word	0x200002b0

08008324 <__sinit>:
 8008324:	b510      	push	{r4, lr}
 8008326:	4604      	mov	r4, r0
 8008328:	f7ff fff0 	bl	800830c <__sinit_lock_acquire>
 800832c:	69a3      	ldr	r3, [r4, #24]
 800832e:	b11b      	cbz	r3, 8008338 <__sinit+0x14>
 8008330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008334:	f7ff bff0 	b.w	8008318 <__sinit_lock_release>
 8008338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800833c:	6523      	str	r3, [r4, #80]	; 0x50
 800833e:	4b13      	ldr	r3, [pc, #76]	; (800838c <__sinit+0x68>)
 8008340:	4a13      	ldr	r2, [pc, #76]	; (8008390 <__sinit+0x6c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	62a2      	str	r2, [r4, #40]	; 0x28
 8008346:	42a3      	cmp	r3, r4
 8008348:	bf08      	it	eq
 800834a:	2301      	moveq	r3, #1
 800834c:	4620      	mov	r0, r4
 800834e:	bf08      	it	eq
 8008350:	61a3      	streq	r3, [r4, #24]
 8008352:	f000 f81f 	bl	8008394 <__sfp>
 8008356:	6060      	str	r0, [r4, #4]
 8008358:	4620      	mov	r0, r4
 800835a:	f000 f81b 	bl	8008394 <__sfp>
 800835e:	60a0      	str	r0, [r4, #8]
 8008360:	4620      	mov	r0, r4
 8008362:	f000 f817 	bl	8008394 <__sfp>
 8008366:	2200      	movs	r2, #0
 8008368:	2104      	movs	r1, #4
 800836a:	60e0      	str	r0, [r4, #12]
 800836c:	6860      	ldr	r0, [r4, #4]
 800836e:	f7ff ff81 	bl	8008274 <std>
 8008372:	2201      	movs	r2, #1
 8008374:	2109      	movs	r1, #9
 8008376:	68a0      	ldr	r0, [r4, #8]
 8008378:	f7ff ff7c 	bl	8008274 <std>
 800837c:	2202      	movs	r2, #2
 800837e:	2112      	movs	r1, #18
 8008380:	68e0      	ldr	r0, [r4, #12]
 8008382:	f7ff ff77 	bl	8008274 <std>
 8008386:	2301      	movs	r3, #1
 8008388:	61a3      	str	r3, [r4, #24]
 800838a:	e7d1      	b.n	8008330 <__sinit+0xc>
 800838c:	0800bbfc 	.word	0x0800bbfc
 8008390:	080082bd 	.word	0x080082bd

08008394 <__sfp>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	4607      	mov	r7, r0
 8008398:	f7ff ffac 	bl	80082f4 <__sfp_lock_acquire>
 800839c:	4b1e      	ldr	r3, [pc, #120]	; (8008418 <__sfp+0x84>)
 800839e:	681e      	ldr	r6, [r3, #0]
 80083a0:	69b3      	ldr	r3, [r6, #24]
 80083a2:	b913      	cbnz	r3, 80083aa <__sfp+0x16>
 80083a4:	4630      	mov	r0, r6
 80083a6:	f7ff ffbd 	bl	8008324 <__sinit>
 80083aa:	3648      	adds	r6, #72	; 0x48
 80083ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	d503      	bpl.n	80083bc <__sfp+0x28>
 80083b4:	6833      	ldr	r3, [r6, #0]
 80083b6:	b30b      	cbz	r3, 80083fc <__sfp+0x68>
 80083b8:	6836      	ldr	r6, [r6, #0]
 80083ba:	e7f7      	b.n	80083ac <__sfp+0x18>
 80083bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083c0:	b9d5      	cbnz	r5, 80083f8 <__sfp+0x64>
 80083c2:	4b16      	ldr	r3, [pc, #88]	; (800841c <__sfp+0x88>)
 80083c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083c8:	60e3      	str	r3, [r4, #12]
 80083ca:	6665      	str	r5, [r4, #100]	; 0x64
 80083cc:	f000 fbb2 	bl	8008b34 <__retarget_lock_init_recursive>
 80083d0:	f7ff ff96 	bl	8008300 <__sfp_lock_release>
 80083d4:	2208      	movs	r2, #8
 80083d6:	4629      	mov	r1, r5
 80083d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083e0:	6025      	str	r5, [r4, #0]
 80083e2:	61a5      	str	r5, [r4, #24]
 80083e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083e8:	f7fd fb8a 	bl	8005b00 <memset>
 80083ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083f4:	4620      	mov	r0, r4
 80083f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083f8:	3468      	adds	r4, #104	; 0x68
 80083fa:	e7d9      	b.n	80083b0 <__sfp+0x1c>
 80083fc:	2104      	movs	r1, #4
 80083fe:	4638      	mov	r0, r7
 8008400:	f7ff ff62 	bl	80082c8 <__sfmoreglue>
 8008404:	4604      	mov	r4, r0
 8008406:	6030      	str	r0, [r6, #0]
 8008408:	2800      	cmp	r0, #0
 800840a:	d1d5      	bne.n	80083b8 <__sfp+0x24>
 800840c:	f7ff ff78 	bl	8008300 <__sfp_lock_release>
 8008410:	230c      	movs	r3, #12
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	e7ee      	b.n	80083f4 <__sfp+0x60>
 8008416:	bf00      	nop
 8008418:	0800bbfc 	.word	0x0800bbfc
 800841c:	ffff0001 	.word	0xffff0001

08008420 <_fwalk_reent>:
 8008420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008424:	4606      	mov	r6, r0
 8008426:	4688      	mov	r8, r1
 8008428:	2700      	movs	r7, #0
 800842a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800842e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008432:	f1b9 0901 	subs.w	r9, r9, #1
 8008436:	d505      	bpl.n	8008444 <_fwalk_reent+0x24>
 8008438:	6824      	ldr	r4, [r4, #0]
 800843a:	2c00      	cmp	r4, #0
 800843c:	d1f7      	bne.n	800842e <_fwalk_reent+0xe>
 800843e:	4638      	mov	r0, r7
 8008440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008444:	89ab      	ldrh	r3, [r5, #12]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d907      	bls.n	800845a <_fwalk_reent+0x3a>
 800844a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800844e:	3301      	adds	r3, #1
 8008450:	d003      	beq.n	800845a <_fwalk_reent+0x3a>
 8008452:	4629      	mov	r1, r5
 8008454:	4630      	mov	r0, r6
 8008456:	47c0      	blx	r8
 8008458:	4307      	orrs	r7, r0
 800845a:	3568      	adds	r5, #104	; 0x68
 800845c:	e7e9      	b.n	8008432 <_fwalk_reent+0x12>

0800845e <rshift>:
 800845e:	6903      	ldr	r3, [r0, #16]
 8008460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008464:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008468:	f100 0414 	add.w	r4, r0, #20
 800846c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008470:	dd46      	ble.n	8008500 <rshift+0xa2>
 8008472:	f011 011f 	ands.w	r1, r1, #31
 8008476:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800847a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800847e:	d10c      	bne.n	800849a <rshift+0x3c>
 8008480:	4629      	mov	r1, r5
 8008482:	f100 0710 	add.w	r7, r0, #16
 8008486:	42b1      	cmp	r1, r6
 8008488:	d335      	bcc.n	80084f6 <rshift+0x98>
 800848a:	1a9b      	subs	r3, r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	1eea      	subs	r2, r5, #3
 8008490:	4296      	cmp	r6, r2
 8008492:	bf38      	it	cc
 8008494:	2300      	movcc	r3, #0
 8008496:	4423      	add	r3, r4
 8008498:	e015      	b.n	80084c6 <rshift+0x68>
 800849a:	46a1      	mov	r9, r4
 800849c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80084a0:	f1c1 0820 	rsb	r8, r1, #32
 80084a4:	40cf      	lsrs	r7, r1
 80084a6:	f105 0e04 	add.w	lr, r5, #4
 80084aa:	4576      	cmp	r6, lr
 80084ac:	46f4      	mov	ip, lr
 80084ae:	d816      	bhi.n	80084de <rshift+0x80>
 80084b0:	1a9a      	subs	r2, r3, r2
 80084b2:	0092      	lsls	r2, r2, #2
 80084b4:	3a04      	subs	r2, #4
 80084b6:	3501      	adds	r5, #1
 80084b8:	42ae      	cmp	r6, r5
 80084ba:	bf38      	it	cc
 80084bc:	2200      	movcc	r2, #0
 80084be:	18a3      	adds	r3, r4, r2
 80084c0:	50a7      	str	r7, [r4, r2]
 80084c2:	b107      	cbz	r7, 80084c6 <rshift+0x68>
 80084c4:	3304      	adds	r3, #4
 80084c6:	42a3      	cmp	r3, r4
 80084c8:	eba3 0204 	sub.w	r2, r3, r4
 80084cc:	bf08      	it	eq
 80084ce:	2300      	moveq	r3, #0
 80084d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084d4:	6102      	str	r2, [r0, #16]
 80084d6:	bf08      	it	eq
 80084d8:	6143      	streq	r3, [r0, #20]
 80084da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084de:	f8dc c000 	ldr.w	ip, [ip]
 80084e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80084e6:	ea4c 0707 	orr.w	r7, ip, r7
 80084ea:	f849 7b04 	str.w	r7, [r9], #4
 80084ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084f2:	40cf      	lsrs	r7, r1
 80084f4:	e7d9      	b.n	80084aa <rshift+0x4c>
 80084f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80084fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80084fe:	e7c2      	b.n	8008486 <rshift+0x28>
 8008500:	4623      	mov	r3, r4
 8008502:	e7e0      	b.n	80084c6 <rshift+0x68>

08008504 <__hexdig_fun>:
 8008504:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008508:	2b09      	cmp	r3, #9
 800850a:	d802      	bhi.n	8008512 <__hexdig_fun+0xe>
 800850c:	3820      	subs	r0, #32
 800850e:	b2c0      	uxtb	r0, r0
 8008510:	4770      	bx	lr
 8008512:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008516:	2b05      	cmp	r3, #5
 8008518:	d801      	bhi.n	800851e <__hexdig_fun+0x1a>
 800851a:	3847      	subs	r0, #71	; 0x47
 800851c:	e7f7      	b.n	800850e <__hexdig_fun+0xa>
 800851e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008522:	2b05      	cmp	r3, #5
 8008524:	d801      	bhi.n	800852a <__hexdig_fun+0x26>
 8008526:	3827      	subs	r0, #39	; 0x27
 8008528:	e7f1      	b.n	800850e <__hexdig_fun+0xa>
 800852a:	2000      	movs	r0, #0
 800852c:	4770      	bx	lr
	...

08008530 <__gethex>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	b08b      	sub	sp, #44	; 0x2c
 8008536:	9305      	str	r3, [sp, #20]
 8008538:	4bb2      	ldr	r3, [pc, #712]	; (8008804 <__gethex+0x2d4>)
 800853a:	9002      	str	r0, [sp, #8]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	468b      	mov	fp, r1
 8008540:	4618      	mov	r0, r3
 8008542:	4690      	mov	r8, r2
 8008544:	9303      	str	r3, [sp, #12]
 8008546:	f7f7 fe6f 	bl	8000228 <strlen>
 800854a:	4682      	mov	sl, r0
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	f8db 2000 	ldr.w	r2, [fp]
 8008552:	4403      	add	r3, r0
 8008554:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008558:	9306      	str	r3, [sp, #24]
 800855a:	1c93      	adds	r3, r2, #2
 800855c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008560:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008564:	32fe      	adds	r2, #254	; 0xfe
 8008566:	18d1      	adds	r1, r2, r3
 8008568:	461f      	mov	r7, r3
 800856a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800856e:	9101      	str	r1, [sp, #4]
 8008570:	2830      	cmp	r0, #48	; 0x30
 8008572:	d0f8      	beq.n	8008566 <__gethex+0x36>
 8008574:	f7ff ffc6 	bl	8008504 <__hexdig_fun>
 8008578:	4604      	mov	r4, r0
 800857a:	2800      	cmp	r0, #0
 800857c:	d13a      	bne.n	80085f4 <__gethex+0xc4>
 800857e:	4652      	mov	r2, sl
 8008580:	4638      	mov	r0, r7
 8008582:	9903      	ldr	r1, [sp, #12]
 8008584:	f001 fbc5 	bl	8009d12 <strncmp>
 8008588:	4605      	mov	r5, r0
 800858a:	2800      	cmp	r0, #0
 800858c:	d166      	bne.n	800865c <__gethex+0x12c>
 800858e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008592:	eb07 060a 	add.w	r6, r7, sl
 8008596:	f7ff ffb5 	bl	8008504 <__hexdig_fun>
 800859a:	2800      	cmp	r0, #0
 800859c:	d060      	beq.n	8008660 <__gethex+0x130>
 800859e:	4633      	mov	r3, r6
 80085a0:	7818      	ldrb	r0, [r3, #0]
 80085a2:	461f      	mov	r7, r3
 80085a4:	2830      	cmp	r0, #48	; 0x30
 80085a6:	f103 0301 	add.w	r3, r3, #1
 80085aa:	d0f9      	beq.n	80085a0 <__gethex+0x70>
 80085ac:	f7ff ffaa 	bl	8008504 <__hexdig_fun>
 80085b0:	2301      	movs	r3, #1
 80085b2:	fab0 f480 	clz	r4, r0
 80085b6:	4635      	mov	r5, r6
 80085b8:	0964      	lsrs	r4, r4, #5
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	463a      	mov	r2, r7
 80085be:	4616      	mov	r6, r2
 80085c0:	7830      	ldrb	r0, [r6, #0]
 80085c2:	3201      	adds	r2, #1
 80085c4:	f7ff ff9e 	bl	8008504 <__hexdig_fun>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d1f8      	bne.n	80085be <__gethex+0x8e>
 80085cc:	4652      	mov	r2, sl
 80085ce:	4630      	mov	r0, r6
 80085d0:	9903      	ldr	r1, [sp, #12]
 80085d2:	f001 fb9e 	bl	8009d12 <strncmp>
 80085d6:	b980      	cbnz	r0, 80085fa <__gethex+0xca>
 80085d8:	b94d      	cbnz	r5, 80085ee <__gethex+0xbe>
 80085da:	eb06 050a 	add.w	r5, r6, sl
 80085de:	462a      	mov	r2, r5
 80085e0:	4616      	mov	r6, r2
 80085e2:	7830      	ldrb	r0, [r6, #0]
 80085e4:	3201      	adds	r2, #1
 80085e6:	f7ff ff8d 	bl	8008504 <__hexdig_fun>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d1f8      	bne.n	80085e0 <__gethex+0xb0>
 80085ee:	1bad      	subs	r5, r5, r6
 80085f0:	00ad      	lsls	r5, r5, #2
 80085f2:	e004      	b.n	80085fe <__gethex+0xce>
 80085f4:	2400      	movs	r4, #0
 80085f6:	4625      	mov	r5, r4
 80085f8:	e7e0      	b.n	80085bc <__gethex+0x8c>
 80085fa:	2d00      	cmp	r5, #0
 80085fc:	d1f7      	bne.n	80085ee <__gethex+0xbe>
 80085fe:	7833      	ldrb	r3, [r6, #0]
 8008600:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008604:	2b50      	cmp	r3, #80	; 0x50
 8008606:	d139      	bne.n	800867c <__gethex+0x14c>
 8008608:	7873      	ldrb	r3, [r6, #1]
 800860a:	2b2b      	cmp	r3, #43	; 0x2b
 800860c:	d02a      	beq.n	8008664 <__gethex+0x134>
 800860e:	2b2d      	cmp	r3, #45	; 0x2d
 8008610:	d02c      	beq.n	800866c <__gethex+0x13c>
 8008612:	f04f 0900 	mov.w	r9, #0
 8008616:	1c71      	adds	r1, r6, #1
 8008618:	7808      	ldrb	r0, [r1, #0]
 800861a:	f7ff ff73 	bl	8008504 <__hexdig_fun>
 800861e:	1e43      	subs	r3, r0, #1
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b18      	cmp	r3, #24
 8008624:	d82a      	bhi.n	800867c <__gethex+0x14c>
 8008626:	f1a0 0210 	sub.w	r2, r0, #16
 800862a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800862e:	f7ff ff69 	bl	8008504 <__hexdig_fun>
 8008632:	1e43      	subs	r3, r0, #1
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b18      	cmp	r3, #24
 8008638:	d91b      	bls.n	8008672 <__gethex+0x142>
 800863a:	f1b9 0f00 	cmp.w	r9, #0
 800863e:	d000      	beq.n	8008642 <__gethex+0x112>
 8008640:	4252      	negs	r2, r2
 8008642:	4415      	add	r5, r2
 8008644:	f8cb 1000 	str.w	r1, [fp]
 8008648:	b1d4      	cbz	r4, 8008680 <__gethex+0x150>
 800864a:	9b01      	ldr	r3, [sp, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	bf14      	ite	ne
 8008650:	2700      	movne	r7, #0
 8008652:	2706      	moveq	r7, #6
 8008654:	4638      	mov	r0, r7
 8008656:	b00b      	add	sp, #44	; 0x2c
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865c:	463e      	mov	r6, r7
 800865e:	4625      	mov	r5, r4
 8008660:	2401      	movs	r4, #1
 8008662:	e7cc      	b.n	80085fe <__gethex+0xce>
 8008664:	f04f 0900 	mov.w	r9, #0
 8008668:	1cb1      	adds	r1, r6, #2
 800866a:	e7d5      	b.n	8008618 <__gethex+0xe8>
 800866c:	f04f 0901 	mov.w	r9, #1
 8008670:	e7fa      	b.n	8008668 <__gethex+0x138>
 8008672:	230a      	movs	r3, #10
 8008674:	fb03 0202 	mla	r2, r3, r2, r0
 8008678:	3a10      	subs	r2, #16
 800867a:	e7d6      	b.n	800862a <__gethex+0xfa>
 800867c:	4631      	mov	r1, r6
 800867e:	e7e1      	b.n	8008644 <__gethex+0x114>
 8008680:	4621      	mov	r1, r4
 8008682:	1bf3      	subs	r3, r6, r7
 8008684:	3b01      	subs	r3, #1
 8008686:	2b07      	cmp	r3, #7
 8008688:	dc0a      	bgt.n	80086a0 <__gethex+0x170>
 800868a:	9802      	ldr	r0, [sp, #8]
 800868c:	f000 fa8c 	bl	8008ba8 <_Balloc>
 8008690:	4604      	mov	r4, r0
 8008692:	b940      	cbnz	r0, 80086a6 <__gethex+0x176>
 8008694:	4602      	mov	r2, r0
 8008696:	21de      	movs	r1, #222	; 0xde
 8008698:	4b5b      	ldr	r3, [pc, #364]	; (8008808 <__gethex+0x2d8>)
 800869a:	485c      	ldr	r0, [pc, #368]	; (800880c <__gethex+0x2dc>)
 800869c:	f001 fc2e 	bl	8009efc <__assert_func>
 80086a0:	3101      	adds	r1, #1
 80086a2:	105b      	asrs	r3, r3, #1
 80086a4:	e7ef      	b.n	8008686 <__gethex+0x156>
 80086a6:	f04f 0b00 	mov.w	fp, #0
 80086aa:	f100 0914 	add.w	r9, r0, #20
 80086ae:	f1ca 0301 	rsb	r3, sl, #1
 80086b2:	f8cd 9010 	str.w	r9, [sp, #16]
 80086b6:	f8cd b004 	str.w	fp, [sp, #4]
 80086ba:	9308      	str	r3, [sp, #32]
 80086bc:	42b7      	cmp	r7, r6
 80086be:	d33f      	bcc.n	8008740 <__gethex+0x210>
 80086c0:	9f04      	ldr	r7, [sp, #16]
 80086c2:	9b01      	ldr	r3, [sp, #4]
 80086c4:	f847 3b04 	str.w	r3, [r7], #4
 80086c8:	eba7 0709 	sub.w	r7, r7, r9
 80086cc:	10bf      	asrs	r7, r7, #2
 80086ce:	6127      	str	r7, [r4, #16]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 fb5b 	bl	8008d8c <__hi0bits>
 80086d6:	017f      	lsls	r7, r7, #5
 80086d8:	f8d8 6000 	ldr.w	r6, [r8]
 80086dc:	1a3f      	subs	r7, r7, r0
 80086de:	42b7      	cmp	r7, r6
 80086e0:	dd62      	ble.n	80087a8 <__gethex+0x278>
 80086e2:	1bbf      	subs	r7, r7, r6
 80086e4:	4639      	mov	r1, r7
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 fef5 	bl	80094d6 <__any_on>
 80086ec:	4682      	mov	sl, r0
 80086ee:	b1a8      	cbz	r0, 800871c <__gethex+0x1ec>
 80086f0:	f04f 0a01 	mov.w	sl, #1
 80086f4:	1e7b      	subs	r3, r7, #1
 80086f6:	1159      	asrs	r1, r3, #5
 80086f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086fc:	f003 021f 	and.w	r2, r3, #31
 8008700:	fa0a f202 	lsl.w	r2, sl, r2
 8008704:	420a      	tst	r2, r1
 8008706:	d009      	beq.n	800871c <__gethex+0x1ec>
 8008708:	4553      	cmp	r3, sl
 800870a:	dd05      	ble.n	8008718 <__gethex+0x1e8>
 800870c:	4620      	mov	r0, r4
 800870e:	1eb9      	subs	r1, r7, #2
 8008710:	f000 fee1 	bl	80094d6 <__any_on>
 8008714:	2800      	cmp	r0, #0
 8008716:	d144      	bne.n	80087a2 <__gethex+0x272>
 8008718:	f04f 0a02 	mov.w	sl, #2
 800871c:	4639      	mov	r1, r7
 800871e:	4620      	mov	r0, r4
 8008720:	f7ff fe9d 	bl	800845e <rshift>
 8008724:	443d      	add	r5, r7
 8008726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800872a:	42ab      	cmp	r3, r5
 800872c:	da4a      	bge.n	80087c4 <__gethex+0x294>
 800872e:	4621      	mov	r1, r4
 8008730:	9802      	ldr	r0, [sp, #8]
 8008732:	f000 fa79 	bl	8008c28 <_Bfree>
 8008736:	2300      	movs	r3, #0
 8008738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800873a:	27a3      	movs	r7, #163	; 0xa3
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	e789      	b.n	8008654 <__gethex+0x124>
 8008740:	1e73      	subs	r3, r6, #1
 8008742:	9a06      	ldr	r2, [sp, #24]
 8008744:	9307      	str	r3, [sp, #28]
 8008746:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800874a:	4293      	cmp	r3, r2
 800874c:	d019      	beq.n	8008782 <__gethex+0x252>
 800874e:	f1bb 0f20 	cmp.w	fp, #32
 8008752:	d107      	bne.n	8008764 <__gethex+0x234>
 8008754:	9b04      	ldr	r3, [sp, #16]
 8008756:	9a01      	ldr	r2, [sp, #4]
 8008758:	f843 2b04 	str.w	r2, [r3], #4
 800875c:	9304      	str	r3, [sp, #16]
 800875e:	2300      	movs	r3, #0
 8008760:	469b      	mov	fp, r3
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008768:	f7ff fecc 	bl	8008504 <__hexdig_fun>
 800876c:	9b01      	ldr	r3, [sp, #4]
 800876e:	f000 000f 	and.w	r0, r0, #15
 8008772:	fa00 f00b 	lsl.w	r0, r0, fp
 8008776:	4303      	orrs	r3, r0
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	f10b 0b04 	add.w	fp, fp, #4
 800877e:	9b07      	ldr	r3, [sp, #28]
 8008780:	e00d      	b.n	800879e <__gethex+0x26e>
 8008782:	9a08      	ldr	r2, [sp, #32]
 8008784:	1e73      	subs	r3, r6, #1
 8008786:	4413      	add	r3, r2
 8008788:	42bb      	cmp	r3, r7
 800878a:	d3e0      	bcc.n	800874e <__gethex+0x21e>
 800878c:	4618      	mov	r0, r3
 800878e:	4652      	mov	r2, sl
 8008790:	9903      	ldr	r1, [sp, #12]
 8008792:	9309      	str	r3, [sp, #36]	; 0x24
 8008794:	f001 fabd 	bl	8009d12 <strncmp>
 8008798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879a:	2800      	cmp	r0, #0
 800879c:	d1d7      	bne.n	800874e <__gethex+0x21e>
 800879e:	461e      	mov	r6, r3
 80087a0:	e78c      	b.n	80086bc <__gethex+0x18c>
 80087a2:	f04f 0a03 	mov.w	sl, #3
 80087a6:	e7b9      	b.n	800871c <__gethex+0x1ec>
 80087a8:	da09      	bge.n	80087be <__gethex+0x28e>
 80087aa:	1bf7      	subs	r7, r6, r7
 80087ac:	4621      	mov	r1, r4
 80087ae:	463a      	mov	r2, r7
 80087b0:	9802      	ldr	r0, [sp, #8]
 80087b2:	f000 fc51 	bl	8009058 <__lshift>
 80087b6:	4604      	mov	r4, r0
 80087b8:	1bed      	subs	r5, r5, r7
 80087ba:	f100 0914 	add.w	r9, r0, #20
 80087be:	f04f 0a00 	mov.w	sl, #0
 80087c2:	e7b0      	b.n	8008726 <__gethex+0x1f6>
 80087c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087c8:	42a8      	cmp	r0, r5
 80087ca:	dd72      	ble.n	80088b2 <__gethex+0x382>
 80087cc:	1b45      	subs	r5, r0, r5
 80087ce:	42ae      	cmp	r6, r5
 80087d0:	dc35      	bgt.n	800883e <__gethex+0x30e>
 80087d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d029      	beq.n	800882e <__gethex+0x2fe>
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d02b      	beq.n	8008836 <__gethex+0x306>
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d11c      	bne.n	800881c <__gethex+0x2ec>
 80087e2:	42ae      	cmp	r6, r5
 80087e4:	d11a      	bne.n	800881c <__gethex+0x2ec>
 80087e6:	2e01      	cmp	r6, #1
 80087e8:	d112      	bne.n	8008810 <__gethex+0x2e0>
 80087ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087ee:	9a05      	ldr	r2, [sp, #20]
 80087f0:	2762      	movs	r7, #98	; 0x62
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	2301      	movs	r3, #1
 80087f6:	6123      	str	r3, [r4, #16]
 80087f8:	f8c9 3000 	str.w	r3, [r9]
 80087fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087fe:	601c      	str	r4, [r3, #0]
 8008800:	e728      	b.n	8008654 <__gethex+0x124>
 8008802:	bf00      	nop
 8008804:	0800beec 	.word	0x0800beec
 8008808:	0800be10 	.word	0x0800be10
 800880c:	0800be84 	.word	0x0800be84
 8008810:	4620      	mov	r0, r4
 8008812:	1e71      	subs	r1, r6, #1
 8008814:	f000 fe5f 	bl	80094d6 <__any_on>
 8008818:	2800      	cmp	r0, #0
 800881a:	d1e6      	bne.n	80087ea <__gethex+0x2ba>
 800881c:	4621      	mov	r1, r4
 800881e:	9802      	ldr	r0, [sp, #8]
 8008820:	f000 fa02 	bl	8008c28 <_Bfree>
 8008824:	2300      	movs	r3, #0
 8008826:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008828:	2750      	movs	r7, #80	; 0x50
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	e712      	b.n	8008654 <__gethex+0x124>
 800882e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1f3      	bne.n	800881c <__gethex+0x2ec>
 8008834:	e7d9      	b.n	80087ea <__gethex+0x2ba>
 8008836:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1d6      	bne.n	80087ea <__gethex+0x2ba>
 800883c:	e7ee      	b.n	800881c <__gethex+0x2ec>
 800883e:	1e6f      	subs	r7, r5, #1
 8008840:	f1ba 0f00 	cmp.w	sl, #0
 8008844:	d132      	bne.n	80088ac <__gethex+0x37c>
 8008846:	b127      	cbz	r7, 8008852 <__gethex+0x322>
 8008848:	4639      	mov	r1, r7
 800884a:	4620      	mov	r0, r4
 800884c:	f000 fe43 	bl	80094d6 <__any_on>
 8008850:	4682      	mov	sl, r0
 8008852:	2101      	movs	r1, #1
 8008854:	117b      	asrs	r3, r7, #5
 8008856:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800885a:	f007 071f 	and.w	r7, r7, #31
 800885e:	fa01 f707 	lsl.w	r7, r1, r7
 8008862:	421f      	tst	r7, r3
 8008864:	f04f 0702 	mov.w	r7, #2
 8008868:	4629      	mov	r1, r5
 800886a:	4620      	mov	r0, r4
 800886c:	bf18      	it	ne
 800886e:	f04a 0a02 	orrne.w	sl, sl, #2
 8008872:	1b76      	subs	r6, r6, r5
 8008874:	f7ff fdf3 	bl	800845e <rshift>
 8008878:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800887c:	f1ba 0f00 	cmp.w	sl, #0
 8008880:	d048      	beq.n	8008914 <__gethex+0x3e4>
 8008882:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008886:	2b02      	cmp	r3, #2
 8008888:	d015      	beq.n	80088b6 <__gethex+0x386>
 800888a:	2b03      	cmp	r3, #3
 800888c:	d017      	beq.n	80088be <__gethex+0x38e>
 800888e:	2b01      	cmp	r3, #1
 8008890:	d109      	bne.n	80088a6 <__gethex+0x376>
 8008892:	f01a 0f02 	tst.w	sl, #2
 8008896:	d006      	beq.n	80088a6 <__gethex+0x376>
 8008898:	f8d9 0000 	ldr.w	r0, [r9]
 800889c:	ea4a 0a00 	orr.w	sl, sl, r0
 80088a0:	f01a 0f01 	tst.w	sl, #1
 80088a4:	d10e      	bne.n	80088c4 <__gethex+0x394>
 80088a6:	f047 0710 	orr.w	r7, r7, #16
 80088aa:	e033      	b.n	8008914 <__gethex+0x3e4>
 80088ac:	f04f 0a01 	mov.w	sl, #1
 80088b0:	e7cf      	b.n	8008852 <__gethex+0x322>
 80088b2:	2701      	movs	r7, #1
 80088b4:	e7e2      	b.n	800887c <__gethex+0x34c>
 80088b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088b8:	f1c3 0301 	rsb	r3, r3, #1
 80088bc:	9315      	str	r3, [sp, #84]	; 0x54
 80088be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0f0      	beq.n	80088a6 <__gethex+0x376>
 80088c4:	f04f 0c00 	mov.w	ip, #0
 80088c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088cc:	f104 0314 	add.w	r3, r4, #20
 80088d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088d8:	4618      	mov	r0, r3
 80088da:	f853 2b04 	ldr.w	r2, [r3], #4
 80088de:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088e2:	d01c      	beq.n	800891e <__gethex+0x3ee>
 80088e4:	3201      	adds	r2, #1
 80088e6:	6002      	str	r2, [r0, #0]
 80088e8:	2f02      	cmp	r7, #2
 80088ea:	f104 0314 	add.w	r3, r4, #20
 80088ee:	d13d      	bne.n	800896c <__gethex+0x43c>
 80088f0:	f8d8 2000 	ldr.w	r2, [r8]
 80088f4:	3a01      	subs	r2, #1
 80088f6:	42b2      	cmp	r2, r6
 80088f8:	d10a      	bne.n	8008910 <__gethex+0x3e0>
 80088fa:	2201      	movs	r2, #1
 80088fc:	1171      	asrs	r1, r6, #5
 80088fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008902:	f006 061f 	and.w	r6, r6, #31
 8008906:	fa02 f606 	lsl.w	r6, r2, r6
 800890a:	421e      	tst	r6, r3
 800890c:	bf18      	it	ne
 800890e:	4617      	movne	r7, r2
 8008910:	f047 0720 	orr.w	r7, r7, #32
 8008914:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008916:	601c      	str	r4, [r3, #0]
 8008918:	9b05      	ldr	r3, [sp, #20]
 800891a:	601d      	str	r5, [r3, #0]
 800891c:	e69a      	b.n	8008654 <__gethex+0x124>
 800891e:	4299      	cmp	r1, r3
 8008920:	f843 cc04 	str.w	ip, [r3, #-4]
 8008924:	d8d8      	bhi.n	80088d8 <__gethex+0x3a8>
 8008926:	68a3      	ldr	r3, [r4, #8]
 8008928:	459b      	cmp	fp, r3
 800892a:	db17      	blt.n	800895c <__gethex+0x42c>
 800892c:	6861      	ldr	r1, [r4, #4]
 800892e:	9802      	ldr	r0, [sp, #8]
 8008930:	3101      	adds	r1, #1
 8008932:	f000 f939 	bl	8008ba8 <_Balloc>
 8008936:	4681      	mov	r9, r0
 8008938:	b918      	cbnz	r0, 8008942 <__gethex+0x412>
 800893a:	4602      	mov	r2, r0
 800893c:	2184      	movs	r1, #132	; 0x84
 800893e:	4b19      	ldr	r3, [pc, #100]	; (80089a4 <__gethex+0x474>)
 8008940:	e6ab      	b.n	800869a <__gethex+0x16a>
 8008942:	6922      	ldr	r2, [r4, #16]
 8008944:	f104 010c 	add.w	r1, r4, #12
 8008948:	3202      	adds	r2, #2
 800894a:	0092      	lsls	r2, r2, #2
 800894c:	300c      	adds	r0, #12
 800894e:	f000 f91d 	bl	8008b8c <memcpy>
 8008952:	4621      	mov	r1, r4
 8008954:	9802      	ldr	r0, [sp, #8]
 8008956:	f000 f967 	bl	8008c28 <_Bfree>
 800895a:	464c      	mov	r4, r9
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	6122      	str	r2, [r4, #16]
 8008962:	2201      	movs	r2, #1
 8008964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008968:	615a      	str	r2, [r3, #20]
 800896a:	e7bd      	b.n	80088e8 <__gethex+0x3b8>
 800896c:	6922      	ldr	r2, [r4, #16]
 800896e:	455a      	cmp	r2, fp
 8008970:	dd0b      	ble.n	800898a <__gethex+0x45a>
 8008972:	2101      	movs	r1, #1
 8008974:	4620      	mov	r0, r4
 8008976:	f7ff fd72 	bl	800845e <rshift>
 800897a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800897e:	3501      	adds	r5, #1
 8008980:	42ab      	cmp	r3, r5
 8008982:	f6ff aed4 	blt.w	800872e <__gethex+0x1fe>
 8008986:	2701      	movs	r7, #1
 8008988:	e7c2      	b.n	8008910 <__gethex+0x3e0>
 800898a:	f016 061f 	ands.w	r6, r6, #31
 800898e:	d0fa      	beq.n	8008986 <__gethex+0x456>
 8008990:	4453      	add	r3, sl
 8008992:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008996:	f000 f9f9 	bl	8008d8c <__hi0bits>
 800899a:	f1c6 0620 	rsb	r6, r6, #32
 800899e:	42b0      	cmp	r0, r6
 80089a0:	dbe7      	blt.n	8008972 <__gethex+0x442>
 80089a2:	e7f0      	b.n	8008986 <__gethex+0x456>
 80089a4:	0800be10 	.word	0x0800be10

080089a8 <L_shift>:
 80089a8:	f1c2 0208 	rsb	r2, r2, #8
 80089ac:	0092      	lsls	r2, r2, #2
 80089ae:	b570      	push	{r4, r5, r6, lr}
 80089b0:	f1c2 0620 	rsb	r6, r2, #32
 80089b4:	6843      	ldr	r3, [r0, #4]
 80089b6:	6804      	ldr	r4, [r0, #0]
 80089b8:	fa03 f506 	lsl.w	r5, r3, r6
 80089bc:	432c      	orrs	r4, r5
 80089be:	40d3      	lsrs	r3, r2
 80089c0:	6004      	str	r4, [r0, #0]
 80089c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80089c6:	4288      	cmp	r0, r1
 80089c8:	d3f4      	bcc.n	80089b4 <L_shift+0xc>
 80089ca:	bd70      	pop	{r4, r5, r6, pc}

080089cc <__match>:
 80089cc:	b530      	push	{r4, r5, lr}
 80089ce:	6803      	ldr	r3, [r0, #0]
 80089d0:	3301      	adds	r3, #1
 80089d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d6:	b914      	cbnz	r4, 80089de <__match+0x12>
 80089d8:	6003      	str	r3, [r0, #0]
 80089da:	2001      	movs	r0, #1
 80089dc:	bd30      	pop	{r4, r5, pc}
 80089de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089e6:	2d19      	cmp	r5, #25
 80089e8:	bf98      	it	ls
 80089ea:	3220      	addls	r2, #32
 80089ec:	42a2      	cmp	r2, r4
 80089ee:	d0f0      	beq.n	80089d2 <__match+0x6>
 80089f0:	2000      	movs	r0, #0
 80089f2:	e7f3      	b.n	80089dc <__match+0x10>

080089f4 <__hexnan>:
 80089f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f8:	2500      	movs	r5, #0
 80089fa:	680b      	ldr	r3, [r1, #0]
 80089fc:	4682      	mov	sl, r0
 80089fe:	115e      	asrs	r6, r3, #5
 8008a00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a04:	f013 031f 	ands.w	r3, r3, #31
 8008a08:	bf18      	it	ne
 8008a0a:	3604      	addne	r6, #4
 8008a0c:	1f37      	subs	r7, r6, #4
 8008a0e:	46b9      	mov	r9, r7
 8008a10:	463c      	mov	r4, r7
 8008a12:	46ab      	mov	fp, r5
 8008a14:	b087      	sub	sp, #28
 8008a16:	4690      	mov	r8, r2
 8008a18:	6802      	ldr	r2, [r0, #0]
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a20:	9502      	str	r5, [sp, #8]
 8008a22:	7851      	ldrb	r1, [r2, #1]
 8008a24:	1c53      	adds	r3, r2, #1
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	b341      	cbz	r1, 8008a7c <__hexnan+0x88>
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	9205      	str	r2, [sp, #20]
 8008a2e:	9104      	str	r1, [sp, #16]
 8008a30:	f7ff fd68 	bl	8008504 <__hexdig_fun>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d14f      	bne.n	8008ad8 <__hexnan+0xe4>
 8008a38:	9904      	ldr	r1, [sp, #16]
 8008a3a:	9a05      	ldr	r2, [sp, #20]
 8008a3c:	2920      	cmp	r1, #32
 8008a3e:	d818      	bhi.n	8008a72 <__hexnan+0x7e>
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	459b      	cmp	fp, r3
 8008a44:	dd13      	ble.n	8008a6e <__hexnan+0x7a>
 8008a46:	454c      	cmp	r4, r9
 8008a48:	d206      	bcs.n	8008a58 <__hexnan+0x64>
 8008a4a:	2d07      	cmp	r5, #7
 8008a4c:	dc04      	bgt.n	8008a58 <__hexnan+0x64>
 8008a4e:	462a      	mov	r2, r5
 8008a50:	4649      	mov	r1, r9
 8008a52:	4620      	mov	r0, r4
 8008a54:	f7ff ffa8 	bl	80089a8 <L_shift>
 8008a58:	4544      	cmp	r4, r8
 8008a5a:	d950      	bls.n	8008afe <__hexnan+0x10a>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f1a4 0904 	sub.w	r9, r4, #4
 8008a62:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a66:	461d      	mov	r5, r3
 8008a68:	464c      	mov	r4, r9
 8008a6a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a6e:	9a03      	ldr	r2, [sp, #12]
 8008a70:	e7d7      	b.n	8008a22 <__hexnan+0x2e>
 8008a72:	2929      	cmp	r1, #41	; 0x29
 8008a74:	d156      	bne.n	8008b24 <__hexnan+0x130>
 8008a76:	3202      	adds	r2, #2
 8008a78:	f8ca 2000 	str.w	r2, [sl]
 8008a7c:	f1bb 0f00 	cmp.w	fp, #0
 8008a80:	d050      	beq.n	8008b24 <__hexnan+0x130>
 8008a82:	454c      	cmp	r4, r9
 8008a84:	d206      	bcs.n	8008a94 <__hexnan+0xa0>
 8008a86:	2d07      	cmp	r5, #7
 8008a88:	dc04      	bgt.n	8008a94 <__hexnan+0xa0>
 8008a8a:	462a      	mov	r2, r5
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f7ff ff8a 	bl	80089a8 <L_shift>
 8008a94:	4544      	cmp	r4, r8
 8008a96:	d934      	bls.n	8008b02 <__hexnan+0x10e>
 8008a98:	4623      	mov	r3, r4
 8008a9a:	f1a8 0204 	sub.w	r2, r8, #4
 8008a9e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008aa2:	429f      	cmp	r7, r3
 8008aa4:	f842 1f04 	str.w	r1, [r2, #4]!
 8008aa8:	d2f9      	bcs.n	8008a9e <__hexnan+0xaa>
 8008aaa:	1b3b      	subs	r3, r7, r4
 8008aac:	f023 0303 	bic.w	r3, r3, #3
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	3401      	adds	r4, #1
 8008ab4:	3e03      	subs	r6, #3
 8008ab6:	42b4      	cmp	r4, r6
 8008ab8:	bf88      	it	hi
 8008aba:	2304      	movhi	r3, #4
 8008abc:	2200      	movs	r2, #0
 8008abe:	4443      	add	r3, r8
 8008ac0:	f843 2b04 	str.w	r2, [r3], #4
 8008ac4:	429f      	cmp	r7, r3
 8008ac6:	d2fb      	bcs.n	8008ac0 <__hexnan+0xcc>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	b91b      	cbnz	r3, 8008ad4 <__hexnan+0xe0>
 8008acc:	4547      	cmp	r7, r8
 8008ace:	d127      	bne.n	8008b20 <__hexnan+0x12c>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	2005      	movs	r0, #5
 8008ad6:	e026      	b.n	8008b26 <__hexnan+0x132>
 8008ad8:	3501      	adds	r5, #1
 8008ada:	2d08      	cmp	r5, #8
 8008adc:	f10b 0b01 	add.w	fp, fp, #1
 8008ae0:	dd06      	ble.n	8008af0 <__hexnan+0xfc>
 8008ae2:	4544      	cmp	r4, r8
 8008ae4:	d9c3      	bls.n	8008a6e <__hexnan+0x7a>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	2501      	movs	r5, #1
 8008aea:	f844 3c04 	str.w	r3, [r4, #-4]
 8008aee:	3c04      	subs	r4, #4
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	f000 000f 	and.w	r0, r0, #15
 8008af6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008afa:	6022      	str	r2, [r4, #0]
 8008afc:	e7b7      	b.n	8008a6e <__hexnan+0x7a>
 8008afe:	2508      	movs	r5, #8
 8008b00:	e7b5      	b.n	8008a6e <__hexnan+0x7a>
 8008b02:	9b01      	ldr	r3, [sp, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0df      	beq.n	8008ac8 <__hexnan+0xd4>
 8008b08:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0c:	f1c3 0320 	rsb	r3, r3, #32
 8008b10:	fa22 f303 	lsr.w	r3, r2, r3
 8008b14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b18:	401a      	ands	r2, r3
 8008b1a:	f846 2c04 	str.w	r2, [r6, #-4]
 8008b1e:	e7d3      	b.n	8008ac8 <__hexnan+0xd4>
 8008b20:	3f04      	subs	r7, #4
 8008b22:	e7d1      	b.n	8008ac8 <__hexnan+0xd4>
 8008b24:	2004      	movs	r0, #4
 8008b26:	b007      	add	sp, #28
 8008b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b2c <_localeconv_r>:
 8008b2c:	4800      	ldr	r0, [pc, #0]	; (8008b30 <_localeconv_r+0x4>)
 8008b2e:	4770      	bx	lr
 8008b30:	2000016c 	.word	0x2000016c

08008b34 <__retarget_lock_init_recursive>:
 8008b34:	4770      	bx	lr

08008b36 <__retarget_lock_acquire_recursive>:
 8008b36:	4770      	bx	lr

08008b38 <__retarget_lock_release_recursive>:
 8008b38:	4770      	bx	lr
	...

08008b3c <malloc>:
 8008b3c:	4b02      	ldr	r3, [pc, #8]	; (8008b48 <malloc+0xc>)
 8008b3e:	4601      	mov	r1, r0
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	f000 bd65 	b.w	8009610 <_malloc_r>
 8008b46:	bf00      	nop
 8008b48:	20000014 	.word	0x20000014

08008b4c <__ascii_mbtowc>:
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	b901      	cbnz	r1, 8008b52 <__ascii_mbtowc+0x6>
 8008b50:	a901      	add	r1, sp, #4
 8008b52:	b142      	cbz	r2, 8008b66 <__ascii_mbtowc+0x1a>
 8008b54:	b14b      	cbz	r3, 8008b6a <__ascii_mbtowc+0x1e>
 8008b56:	7813      	ldrb	r3, [r2, #0]
 8008b58:	600b      	str	r3, [r1, #0]
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	1e10      	subs	r0, r2, #0
 8008b5e:	bf18      	it	ne
 8008b60:	2001      	movne	r0, #1
 8008b62:	b002      	add	sp, #8
 8008b64:	4770      	bx	lr
 8008b66:	4610      	mov	r0, r2
 8008b68:	e7fb      	b.n	8008b62 <__ascii_mbtowc+0x16>
 8008b6a:	f06f 0001 	mvn.w	r0, #1
 8008b6e:	e7f8      	b.n	8008b62 <__ascii_mbtowc+0x16>

08008b70 <memchr>:
 8008b70:	4603      	mov	r3, r0
 8008b72:	b510      	push	{r4, lr}
 8008b74:	b2c9      	uxtb	r1, r1
 8008b76:	4402      	add	r2, r0
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	d101      	bne.n	8008b82 <memchr+0x12>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	e003      	b.n	8008b8a <memchr+0x1a>
 8008b82:	7804      	ldrb	r4, [r0, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	428c      	cmp	r4, r1
 8008b88:	d1f6      	bne.n	8008b78 <memchr+0x8>
 8008b8a:	bd10      	pop	{r4, pc}

08008b8c <memcpy>:
 8008b8c:	440a      	add	r2, r1
 8008b8e:	4291      	cmp	r1, r2
 8008b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b94:	d100      	bne.n	8008b98 <memcpy+0xc>
 8008b96:	4770      	bx	lr
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b9e:	4291      	cmp	r1, r2
 8008ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ba4:	d1f9      	bne.n	8008b9a <memcpy+0xe>
 8008ba6:	bd10      	pop	{r4, pc}

08008ba8 <_Balloc>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bac:	4604      	mov	r4, r0
 8008bae:	460d      	mov	r5, r1
 8008bb0:	b976      	cbnz	r6, 8008bd0 <_Balloc+0x28>
 8008bb2:	2010      	movs	r0, #16
 8008bb4:	f7ff ffc2 	bl	8008b3c <malloc>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	6260      	str	r0, [r4, #36]	; 0x24
 8008bbc:	b920      	cbnz	r0, 8008bc8 <_Balloc+0x20>
 8008bbe:	2166      	movs	r1, #102	; 0x66
 8008bc0:	4b17      	ldr	r3, [pc, #92]	; (8008c20 <_Balloc+0x78>)
 8008bc2:	4818      	ldr	r0, [pc, #96]	; (8008c24 <_Balloc+0x7c>)
 8008bc4:	f001 f99a 	bl	8009efc <__assert_func>
 8008bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bcc:	6006      	str	r6, [r0, #0]
 8008bce:	60c6      	str	r6, [r0, #12]
 8008bd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bd2:	68f3      	ldr	r3, [r6, #12]
 8008bd4:	b183      	cbz	r3, 8008bf8 <_Balloc+0x50>
 8008bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bde:	b9b8      	cbnz	r0, 8008c10 <_Balloc+0x68>
 8008be0:	2101      	movs	r1, #1
 8008be2:	fa01 f605 	lsl.w	r6, r1, r5
 8008be6:	1d72      	adds	r2, r6, #5
 8008be8:	4620      	mov	r0, r4
 8008bea:	0092      	lsls	r2, r2, #2
 8008bec:	f000 fc94 	bl	8009518 <_calloc_r>
 8008bf0:	b160      	cbz	r0, 8008c0c <_Balloc+0x64>
 8008bf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bf6:	e00e      	b.n	8008c16 <_Balloc+0x6e>
 8008bf8:	2221      	movs	r2, #33	; 0x21
 8008bfa:	2104      	movs	r1, #4
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 fc8b 	bl	8009518 <_calloc_r>
 8008c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c04:	60f0      	str	r0, [r6, #12]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e4      	bne.n	8008bd6 <_Balloc+0x2e>
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	6802      	ldr	r2, [r0, #0]
 8008c12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c16:	2300      	movs	r3, #0
 8008c18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c1c:	e7f7      	b.n	8008c0e <_Balloc+0x66>
 8008c1e:	bf00      	nop
 8008c20:	0800bd9e 	.word	0x0800bd9e
 8008c24:	0800bf00 	.word	0x0800bf00

08008c28 <_Bfree>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	b976      	cbnz	r6, 8008c50 <_Bfree+0x28>
 8008c32:	2010      	movs	r0, #16
 8008c34:	f7ff ff82 	bl	8008b3c <malloc>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	6268      	str	r0, [r5, #36]	; 0x24
 8008c3c:	b920      	cbnz	r0, 8008c48 <_Bfree+0x20>
 8008c3e:	218a      	movs	r1, #138	; 0x8a
 8008c40:	4b08      	ldr	r3, [pc, #32]	; (8008c64 <_Bfree+0x3c>)
 8008c42:	4809      	ldr	r0, [pc, #36]	; (8008c68 <_Bfree+0x40>)
 8008c44:	f001 f95a 	bl	8009efc <__assert_func>
 8008c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c4c:	6006      	str	r6, [r0, #0]
 8008c4e:	60c6      	str	r6, [r0, #12]
 8008c50:	b13c      	cbz	r4, 8008c62 <_Bfree+0x3a>
 8008c52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c54:	6862      	ldr	r2, [r4, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c5c:	6021      	str	r1, [r4, #0]
 8008c5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	0800bd9e 	.word	0x0800bd9e
 8008c68:	0800bf00 	.word	0x0800bf00

08008c6c <__multadd>:
 8008c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c70:	4607      	mov	r7, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	461e      	mov	r6, r3
 8008c76:	2000      	movs	r0, #0
 8008c78:	690d      	ldr	r5, [r1, #16]
 8008c7a:	f101 0c14 	add.w	ip, r1, #20
 8008c7e:	f8dc 3000 	ldr.w	r3, [ip]
 8008c82:	3001      	adds	r0, #1
 8008c84:	b299      	uxth	r1, r3
 8008c86:	fb02 6101 	mla	r1, r2, r1, r6
 8008c8a:	0c1e      	lsrs	r6, r3, #16
 8008c8c:	0c0b      	lsrs	r3, r1, #16
 8008c8e:	fb02 3306 	mla	r3, r2, r6, r3
 8008c92:	b289      	uxth	r1, r1
 8008c94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c98:	4285      	cmp	r5, r0
 8008c9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c9e:	f84c 1b04 	str.w	r1, [ip], #4
 8008ca2:	dcec      	bgt.n	8008c7e <__multadd+0x12>
 8008ca4:	b30e      	cbz	r6, 8008cea <__multadd+0x7e>
 8008ca6:	68a3      	ldr	r3, [r4, #8]
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	dc19      	bgt.n	8008ce0 <__multadd+0x74>
 8008cac:	6861      	ldr	r1, [r4, #4]
 8008cae:	4638      	mov	r0, r7
 8008cb0:	3101      	adds	r1, #1
 8008cb2:	f7ff ff79 	bl	8008ba8 <_Balloc>
 8008cb6:	4680      	mov	r8, r0
 8008cb8:	b928      	cbnz	r0, 8008cc6 <__multadd+0x5a>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	21b5      	movs	r1, #181	; 0xb5
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <__multadd+0x84>)
 8008cc0:	480c      	ldr	r0, [pc, #48]	; (8008cf4 <__multadd+0x88>)
 8008cc2:	f001 f91b 	bl	8009efc <__assert_func>
 8008cc6:	6922      	ldr	r2, [r4, #16]
 8008cc8:	f104 010c 	add.w	r1, r4, #12
 8008ccc:	3202      	adds	r2, #2
 8008cce:	0092      	lsls	r2, r2, #2
 8008cd0:	300c      	adds	r0, #12
 8008cd2:	f7ff ff5b 	bl	8008b8c <memcpy>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	4638      	mov	r0, r7
 8008cda:	f7ff ffa5 	bl	8008c28 <_Bfree>
 8008cde:	4644      	mov	r4, r8
 8008ce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	615e      	str	r6, [r3, #20]
 8008ce8:	6125      	str	r5, [r4, #16]
 8008cea:	4620      	mov	r0, r4
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	0800be10 	.word	0x0800be10
 8008cf4:	0800bf00 	.word	0x0800bf00

08008cf8 <__s2b>:
 8008cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cfc:	4615      	mov	r5, r2
 8008cfe:	2209      	movs	r2, #9
 8008d00:	461f      	mov	r7, r3
 8008d02:	3308      	adds	r3, #8
 8008d04:	460c      	mov	r4, r1
 8008d06:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	2100      	movs	r1, #0
 8008d10:	429a      	cmp	r2, r3
 8008d12:	db09      	blt.n	8008d28 <__s2b+0x30>
 8008d14:	4630      	mov	r0, r6
 8008d16:	f7ff ff47 	bl	8008ba8 <_Balloc>
 8008d1a:	b940      	cbnz	r0, 8008d2e <__s2b+0x36>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	21ce      	movs	r1, #206	; 0xce
 8008d20:	4b18      	ldr	r3, [pc, #96]	; (8008d84 <__s2b+0x8c>)
 8008d22:	4819      	ldr	r0, [pc, #100]	; (8008d88 <__s2b+0x90>)
 8008d24:	f001 f8ea 	bl	8009efc <__assert_func>
 8008d28:	0052      	lsls	r2, r2, #1
 8008d2a:	3101      	adds	r1, #1
 8008d2c:	e7f0      	b.n	8008d10 <__s2b+0x18>
 8008d2e:	9b08      	ldr	r3, [sp, #32]
 8008d30:	2d09      	cmp	r5, #9
 8008d32:	6143      	str	r3, [r0, #20]
 8008d34:	f04f 0301 	mov.w	r3, #1
 8008d38:	6103      	str	r3, [r0, #16]
 8008d3a:	dd16      	ble.n	8008d6a <__s2b+0x72>
 8008d3c:	f104 0909 	add.w	r9, r4, #9
 8008d40:	46c8      	mov	r8, r9
 8008d42:	442c      	add	r4, r5
 8008d44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d48:	4601      	mov	r1, r0
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	3b30      	subs	r3, #48	; 0x30
 8008d50:	f7ff ff8c 	bl	8008c6c <__multadd>
 8008d54:	45a0      	cmp	r8, r4
 8008d56:	d1f5      	bne.n	8008d44 <__s2b+0x4c>
 8008d58:	f1a5 0408 	sub.w	r4, r5, #8
 8008d5c:	444c      	add	r4, r9
 8008d5e:	1b2d      	subs	r5, r5, r4
 8008d60:	1963      	adds	r3, r4, r5
 8008d62:	42bb      	cmp	r3, r7
 8008d64:	db04      	blt.n	8008d70 <__s2b+0x78>
 8008d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d6a:	2509      	movs	r5, #9
 8008d6c:	340a      	adds	r4, #10
 8008d6e:	e7f6      	b.n	8008d5e <__s2b+0x66>
 8008d70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d74:	4601      	mov	r1, r0
 8008d76:	220a      	movs	r2, #10
 8008d78:	4630      	mov	r0, r6
 8008d7a:	3b30      	subs	r3, #48	; 0x30
 8008d7c:	f7ff ff76 	bl	8008c6c <__multadd>
 8008d80:	e7ee      	b.n	8008d60 <__s2b+0x68>
 8008d82:	bf00      	nop
 8008d84:	0800be10 	.word	0x0800be10
 8008d88:	0800bf00 	.word	0x0800bf00

08008d8c <__hi0bits>:
 8008d8c:	0c02      	lsrs	r2, r0, #16
 8008d8e:	0412      	lsls	r2, r2, #16
 8008d90:	4603      	mov	r3, r0
 8008d92:	b9ca      	cbnz	r2, 8008dc8 <__hi0bits+0x3c>
 8008d94:	0403      	lsls	r3, r0, #16
 8008d96:	2010      	movs	r0, #16
 8008d98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008d9c:	bf04      	itt	eq
 8008d9e:	021b      	lsleq	r3, r3, #8
 8008da0:	3008      	addeq	r0, #8
 8008da2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008da6:	bf04      	itt	eq
 8008da8:	011b      	lsleq	r3, r3, #4
 8008daa:	3004      	addeq	r0, #4
 8008dac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008db0:	bf04      	itt	eq
 8008db2:	009b      	lsleq	r3, r3, #2
 8008db4:	3002      	addeq	r0, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	db05      	blt.n	8008dc6 <__hi0bits+0x3a>
 8008dba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008dbe:	f100 0001 	add.w	r0, r0, #1
 8008dc2:	bf08      	it	eq
 8008dc4:	2020      	moveq	r0, #32
 8008dc6:	4770      	bx	lr
 8008dc8:	2000      	movs	r0, #0
 8008dca:	e7e5      	b.n	8008d98 <__hi0bits+0xc>

08008dcc <__lo0bits>:
 8008dcc:	6803      	ldr	r3, [r0, #0]
 8008dce:	4602      	mov	r2, r0
 8008dd0:	f013 0007 	ands.w	r0, r3, #7
 8008dd4:	d00b      	beq.n	8008dee <__lo0bits+0x22>
 8008dd6:	07d9      	lsls	r1, r3, #31
 8008dd8:	d421      	bmi.n	8008e1e <__lo0bits+0x52>
 8008dda:	0798      	lsls	r0, r3, #30
 8008ddc:	bf49      	itett	mi
 8008dde:	085b      	lsrmi	r3, r3, #1
 8008de0:	089b      	lsrpl	r3, r3, #2
 8008de2:	2001      	movmi	r0, #1
 8008de4:	6013      	strmi	r3, [r2, #0]
 8008de6:	bf5c      	itt	pl
 8008de8:	2002      	movpl	r0, #2
 8008dea:	6013      	strpl	r3, [r2, #0]
 8008dec:	4770      	bx	lr
 8008dee:	b299      	uxth	r1, r3
 8008df0:	b909      	cbnz	r1, 8008df6 <__lo0bits+0x2a>
 8008df2:	2010      	movs	r0, #16
 8008df4:	0c1b      	lsrs	r3, r3, #16
 8008df6:	b2d9      	uxtb	r1, r3
 8008df8:	b909      	cbnz	r1, 8008dfe <__lo0bits+0x32>
 8008dfa:	3008      	adds	r0, #8
 8008dfc:	0a1b      	lsrs	r3, r3, #8
 8008dfe:	0719      	lsls	r1, r3, #28
 8008e00:	bf04      	itt	eq
 8008e02:	091b      	lsreq	r3, r3, #4
 8008e04:	3004      	addeq	r0, #4
 8008e06:	0799      	lsls	r1, r3, #30
 8008e08:	bf04      	itt	eq
 8008e0a:	089b      	lsreq	r3, r3, #2
 8008e0c:	3002      	addeq	r0, #2
 8008e0e:	07d9      	lsls	r1, r3, #31
 8008e10:	d403      	bmi.n	8008e1a <__lo0bits+0x4e>
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	f100 0001 	add.w	r0, r0, #1
 8008e18:	d003      	beq.n	8008e22 <__lo0bits+0x56>
 8008e1a:	6013      	str	r3, [r2, #0]
 8008e1c:	4770      	bx	lr
 8008e1e:	2000      	movs	r0, #0
 8008e20:	4770      	bx	lr
 8008e22:	2020      	movs	r0, #32
 8008e24:	4770      	bx	lr
	...

08008e28 <__i2b>:
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	f7ff febb 	bl	8008ba8 <_Balloc>
 8008e32:	4602      	mov	r2, r0
 8008e34:	b928      	cbnz	r0, 8008e42 <__i2b+0x1a>
 8008e36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e3a:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <__i2b+0x24>)
 8008e3c:	4804      	ldr	r0, [pc, #16]	; (8008e50 <__i2b+0x28>)
 8008e3e:	f001 f85d 	bl	8009efc <__assert_func>
 8008e42:	2301      	movs	r3, #1
 8008e44:	6144      	str	r4, [r0, #20]
 8008e46:	6103      	str	r3, [r0, #16]
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	bf00      	nop
 8008e4c:	0800be10 	.word	0x0800be10
 8008e50:	0800bf00 	.word	0x0800bf00

08008e54 <__multiply>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	4691      	mov	r9, r2
 8008e5a:	690a      	ldr	r2, [r1, #16]
 8008e5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e60:	460c      	mov	r4, r1
 8008e62:	429a      	cmp	r2, r3
 8008e64:	bfbe      	ittt	lt
 8008e66:	460b      	movlt	r3, r1
 8008e68:	464c      	movlt	r4, r9
 8008e6a:	4699      	movlt	r9, r3
 8008e6c:	6927      	ldr	r7, [r4, #16]
 8008e6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e72:	68a3      	ldr	r3, [r4, #8]
 8008e74:	6861      	ldr	r1, [r4, #4]
 8008e76:	eb07 060a 	add.w	r6, r7, sl
 8008e7a:	42b3      	cmp	r3, r6
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	bfb8      	it	lt
 8008e80:	3101      	addlt	r1, #1
 8008e82:	f7ff fe91 	bl	8008ba8 <_Balloc>
 8008e86:	b930      	cbnz	r0, 8008e96 <__multiply+0x42>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	f240 115d 	movw	r1, #349	; 0x15d
 8008e8e:	4b43      	ldr	r3, [pc, #268]	; (8008f9c <__multiply+0x148>)
 8008e90:	4843      	ldr	r0, [pc, #268]	; (8008fa0 <__multiply+0x14c>)
 8008e92:	f001 f833 	bl	8009efc <__assert_func>
 8008e96:	f100 0514 	add.w	r5, r0, #20
 8008e9a:	462b      	mov	r3, r5
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ea2:	4543      	cmp	r3, r8
 8008ea4:	d321      	bcc.n	8008eea <__multiply+0x96>
 8008ea6:	f104 0314 	add.w	r3, r4, #20
 8008eaa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008eae:	f109 0314 	add.w	r3, r9, #20
 8008eb2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008eb6:	9202      	str	r2, [sp, #8]
 8008eb8:	1b3a      	subs	r2, r7, r4
 8008eba:	3a15      	subs	r2, #21
 8008ebc:	f022 0203 	bic.w	r2, r2, #3
 8008ec0:	3204      	adds	r2, #4
 8008ec2:	f104 0115 	add.w	r1, r4, #21
 8008ec6:	428f      	cmp	r7, r1
 8008ec8:	bf38      	it	cc
 8008eca:	2204      	movcc	r2, #4
 8008ecc:	9201      	str	r2, [sp, #4]
 8008ece:	9a02      	ldr	r2, [sp, #8]
 8008ed0:	9303      	str	r3, [sp, #12]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d80c      	bhi.n	8008ef0 <__multiply+0x9c>
 8008ed6:	2e00      	cmp	r6, #0
 8008ed8:	dd03      	ble.n	8008ee2 <__multiply+0x8e>
 8008eda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d059      	beq.n	8008f96 <__multiply+0x142>
 8008ee2:	6106      	str	r6, [r0, #16]
 8008ee4:	b005      	add	sp, #20
 8008ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	f843 2b04 	str.w	r2, [r3], #4
 8008eee:	e7d8      	b.n	8008ea2 <__multiply+0x4e>
 8008ef0:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ef4:	f1ba 0f00 	cmp.w	sl, #0
 8008ef8:	d023      	beq.n	8008f42 <__multiply+0xee>
 8008efa:	46a9      	mov	r9, r5
 8008efc:	f04f 0c00 	mov.w	ip, #0
 8008f00:	f104 0e14 	add.w	lr, r4, #20
 8008f04:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f08:	f8d9 1000 	ldr.w	r1, [r9]
 8008f0c:	fa1f fb82 	uxth.w	fp, r2
 8008f10:	b289      	uxth	r1, r1
 8008f12:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f16:	4461      	add	r1, ip
 8008f18:	f8d9 c000 	ldr.w	ip, [r9]
 8008f1c:	0c12      	lsrs	r2, r2, #16
 8008f1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008f22:	fb0a c202 	mla	r2, sl, r2, ip
 8008f26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f2a:	b289      	uxth	r1, r1
 8008f2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f30:	4577      	cmp	r7, lr
 8008f32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f36:	f849 1b04 	str.w	r1, [r9], #4
 8008f3a:	d8e3      	bhi.n	8008f04 <__multiply+0xb0>
 8008f3c:	9a01      	ldr	r2, [sp, #4]
 8008f3e:	f845 c002 	str.w	ip, [r5, r2]
 8008f42:	9a03      	ldr	r2, [sp, #12]
 8008f44:	3304      	adds	r3, #4
 8008f46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f4a:	f1b9 0f00 	cmp.w	r9, #0
 8008f4e:	d020      	beq.n	8008f92 <__multiply+0x13e>
 8008f50:	46ae      	mov	lr, r5
 8008f52:	f04f 0a00 	mov.w	sl, #0
 8008f56:	6829      	ldr	r1, [r5, #0]
 8008f58:	f104 0c14 	add.w	ip, r4, #20
 8008f5c:	f8bc b000 	ldrh.w	fp, [ip]
 8008f60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f64:	b289      	uxth	r1, r1
 8008f66:	fb09 220b 	mla	r2, r9, fp, r2
 8008f6a:	4492      	add	sl, r2
 8008f6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f70:	f84e 1b04 	str.w	r1, [lr], #4
 8008f74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f78:	f8be 1000 	ldrh.w	r1, [lr]
 8008f7c:	0c12      	lsrs	r2, r2, #16
 8008f7e:	fb09 1102 	mla	r1, r9, r2, r1
 8008f82:	4567      	cmp	r7, ip
 8008f84:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f8c:	d8e6      	bhi.n	8008f5c <__multiply+0x108>
 8008f8e:	9a01      	ldr	r2, [sp, #4]
 8008f90:	50a9      	str	r1, [r5, r2]
 8008f92:	3504      	adds	r5, #4
 8008f94:	e79b      	b.n	8008ece <__multiply+0x7a>
 8008f96:	3e01      	subs	r6, #1
 8008f98:	e79d      	b.n	8008ed6 <__multiply+0x82>
 8008f9a:	bf00      	nop
 8008f9c:	0800be10 	.word	0x0800be10
 8008fa0:	0800bf00 	.word	0x0800bf00

08008fa4 <__pow5mult>:
 8008fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa8:	4615      	mov	r5, r2
 8008faa:	f012 0203 	ands.w	r2, r2, #3
 8008fae:	4606      	mov	r6, r0
 8008fb0:	460f      	mov	r7, r1
 8008fb2:	d007      	beq.n	8008fc4 <__pow5mult+0x20>
 8008fb4:	4c25      	ldr	r4, [pc, #148]	; (800904c <__pow5mult+0xa8>)
 8008fb6:	3a01      	subs	r2, #1
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fbe:	f7ff fe55 	bl	8008c6c <__multadd>
 8008fc2:	4607      	mov	r7, r0
 8008fc4:	10ad      	asrs	r5, r5, #2
 8008fc6:	d03d      	beq.n	8009044 <__pow5mult+0xa0>
 8008fc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fca:	b97c      	cbnz	r4, 8008fec <__pow5mult+0x48>
 8008fcc:	2010      	movs	r0, #16
 8008fce:	f7ff fdb5 	bl	8008b3c <malloc>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	6270      	str	r0, [r6, #36]	; 0x24
 8008fd6:	b928      	cbnz	r0, 8008fe4 <__pow5mult+0x40>
 8008fd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008fdc:	4b1c      	ldr	r3, [pc, #112]	; (8009050 <__pow5mult+0xac>)
 8008fde:	481d      	ldr	r0, [pc, #116]	; (8009054 <__pow5mult+0xb0>)
 8008fe0:	f000 ff8c 	bl	8009efc <__assert_func>
 8008fe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fe8:	6004      	str	r4, [r0, #0]
 8008fea:	60c4      	str	r4, [r0, #12]
 8008fec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ff4:	b94c      	cbnz	r4, 800900a <__pow5mult+0x66>
 8008ff6:	f240 2171 	movw	r1, #625	; 0x271
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ff14 	bl	8008e28 <__i2b>
 8009000:	2300      	movs	r3, #0
 8009002:	4604      	mov	r4, r0
 8009004:	f8c8 0008 	str.w	r0, [r8, #8]
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	f04f 0900 	mov.w	r9, #0
 800900e:	07eb      	lsls	r3, r5, #31
 8009010:	d50a      	bpl.n	8009028 <__pow5mult+0x84>
 8009012:	4639      	mov	r1, r7
 8009014:	4622      	mov	r2, r4
 8009016:	4630      	mov	r0, r6
 8009018:	f7ff ff1c 	bl	8008e54 <__multiply>
 800901c:	4680      	mov	r8, r0
 800901e:	4639      	mov	r1, r7
 8009020:	4630      	mov	r0, r6
 8009022:	f7ff fe01 	bl	8008c28 <_Bfree>
 8009026:	4647      	mov	r7, r8
 8009028:	106d      	asrs	r5, r5, #1
 800902a:	d00b      	beq.n	8009044 <__pow5mult+0xa0>
 800902c:	6820      	ldr	r0, [r4, #0]
 800902e:	b938      	cbnz	r0, 8009040 <__pow5mult+0x9c>
 8009030:	4622      	mov	r2, r4
 8009032:	4621      	mov	r1, r4
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff ff0d 	bl	8008e54 <__multiply>
 800903a:	6020      	str	r0, [r4, #0]
 800903c:	f8c0 9000 	str.w	r9, [r0]
 8009040:	4604      	mov	r4, r0
 8009042:	e7e4      	b.n	800900e <__pow5mult+0x6a>
 8009044:	4638      	mov	r0, r7
 8009046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800904a:	bf00      	nop
 800904c:	0800c050 	.word	0x0800c050
 8009050:	0800bd9e 	.word	0x0800bd9e
 8009054:	0800bf00 	.word	0x0800bf00

08009058 <__lshift>:
 8009058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	460c      	mov	r4, r1
 800905e:	4607      	mov	r7, r0
 8009060:	4691      	mov	r9, r2
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	6849      	ldr	r1, [r1, #4]
 8009066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800906a:	68a3      	ldr	r3, [r4, #8]
 800906c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009070:	f108 0601 	add.w	r6, r8, #1
 8009074:	42b3      	cmp	r3, r6
 8009076:	db0b      	blt.n	8009090 <__lshift+0x38>
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff fd95 	bl	8008ba8 <_Balloc>
 800907e:	4605      	mov	r5, r0
 8009080:	b948      	cbnz	r0, 8009096 <__lshift+0x3e>
 8009082:	4602      	mov	r2, r0
 8009084:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009088:	4b29      	ldr	r3, [pc, #164]	; (8009130 <__lshift+0xd8>)
 800908a:	482a      	ldr	r0, [pc, #168]	; (8009134 <__lshift+0xdc>)
 800908c:	f000 ff36 	bl	8009efc <__assert_func>
 8009090:	3101      	adds	r1, #1
 8009092:	005b      	lsls	r3, r3, #1
 8009094:	e7ee      	b.n	8009074 <__lshift+0x1c>
 8009096:	2300      	movs	r3, #0
 8009098:	f100 0114 	add.w	r1, r0, #20
 800909c:	f100 0210 	add.w	r2, r0, #16
 80090a0:	4618      	mov	r0, r3
 80090a2:	4553      	cmp	r3, sl
 80090a4:	db37      	blt.n	8009116 <__lshift+0xbe>
 80090a6:	6920      	ldr	r0, [r4, #16]
 80090a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090ac:	f104 0314 	add.w	r3, r4, #20
 80090b0:	f019 091f 	ands.w	r9, r9, #31
 80090b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80090bc:	d02f      	beq.n	800911e <__lshift+0xc6>
 80090be:	468a      	mov	sl, r1
 80090c0:	f04f 0c00 	mov.w	ip, #0
 80090c4:	f1c9 0e20 	rsb	lr, r9, #32
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	fa02 f209 	lsl.w	r2, r2, r9
 80090ce:	ea42 020c 	orr.w	r2, r2, ip
 80090d2:	f84a 2b04 	str.w	r2, [sl], #4
 80090d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090da:	4298      	cmp	r0, r3
 80090dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80090e0:	d8f2      	bhi.n	80090c8 <__lshift+0x70>
 80090e2:	1b03      	subs	r3, r0, r4
 80090e4:	3b15      	subs	r3, #21
 80090e6:	f023 0303 	bic.w	r3, r3, #3
 80090ea:	3304      	adds	r3, #4
 80090ec:	f104 0215 	add.w	r2, r4, #21
 80090f0:	4290      	cmp	r0, r2
 80090f2:	bf38      	it	cc
 80090f4:	2304      	movcc	r3, #4
 80090f6:	f841 c003 	str.w	ip, [r1, r3]
 80090fa:	f1bc 0f00 	cmp.w	ip, #0
 80090fe:	d001      	beq.n	8009104 <__lshift+0xac>
 8009100:	f108 0602 	add.w	r6, r8, #2
 8009104:	3e01      	subs	r6, #1
 8009106:	4638      	mov	r0, r7
 8009108:	4621      	mov	r1, r4
 800910a:	612e      	str	r6, [r5, #16]
 800910c:	f7ff fd8c 	bl	8008c28 <_Bfree>
 8009110:	4628      	mov	r0, r5
 8009112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009116:	f842 0f04 	str.w	r0, [r2, #4]!
 800911a:	3301      	adds	r3, #1
 800911c:	e7c1      	b.n	80090a2 <__lshift+0x4a>
 800911e:	3904      	subs	r1, #4
 8009120:	f853 2b04 	ldr.w	r2, [r3], #4
 8009124:	4298      	cmp	r0, r3
 8009126:	f841 2f04 	str.w	r2, [r1, #4]!
 800912a:	d8f9      	bhi.n	8009120 <__lshift+0xc8>
 800912c:	e7ea      	b.n	8009104 <__lshift+0xac>
 800912e:	bf00      	nop
 8009130:	0800be10 	.word	0x0800be10
 8009134:	0800bf00 	.word	0x0800bf00

08009138 <__mcmp>:
 8009138:	4603      	mov	r3, r0
 800913a:	690a      	ldr	r2, [r1, #16]
 800913c:	6900      	ldr	r0, [r0, #16]
 800913e:	b530      	push	{r4, r5, lr}
 8009140:	1a80      	subs	r0, r0, r2
 8009142:	d10d      	bne.n	8009160 <__mcmp+0x28>
 8009144:	3314      	adds	r3, #20
 8009146:	3114      	adds	r1, #20
 8009148:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800914c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009150:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009154:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009158:	4295      	cmp	r5, r2
 800915a:	d002      	beq.n	8009162 <__mcmp+0x2a>
 800915c:	d304      	bcc.n	8009168 <__mcmp+0x30>
 800915e:	2001      	movs	r0, #1
 8009160:	bd30      	pop	{r4, r5, pc}
 8009162:	42a3      	cmp	r3, r4
 8009164:	d3f4      	bcc.n	8009150 <__mcmp+0x18>
 8009166:	e7fb      	b.n	8009160 <__mcmp+0x28>
 8009168:	f04f 30ff 	mov.w	r0, #4294967295
 800916c:	e7f8      	b.n	8009160 <__mcmp+0x28>
	...

08009170 <__mdiff>:
 8009170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	460d      	mov	r5, r1
 8009176:	4607      	mov	r7, r0
 8009178:	4611      	mov	r1, r2
 800917a:	4628      	mov	r0, r5
 800917c:	4614      	mov	r4, r2
 800917e:	f7ff ffdb 	bl	8009138 <__mcmp>
 8009182:	1e06      	subs	r6, r0, #0
 8009184:	d111      	bne.n	80091aa <__mdiff+0x3a>
 8009186:	4631      	mov	r1, r6
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff fd0d 	bl	8008ba8 <_Balloc>
 800918e:	4602      	mov	r2, r0
 8009190:	b928      	cbnz	r0, 800919e <__mdiff+0x2e>
 8009192:	f240 2132 	movw	r1, #562	; 0x232
 8009196:	4b3a      	ldr	r3, [pc, #232]	; (8009280 <__mdiff+0x110>)
 8009198:	483a      	ldr	r0, [pc, #232]	; (8009284 <__mdiff+0x114>)
 800919a:	f000 feaf 	bl	8009efc <__assert_func>
 800919e:	2301      	movs	r3, #1
 80091a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80091a4:	4610      	mov	r0, r2
 80091a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091aa:	bfa4      	itt	ge
 80091ac:	4623      	movge	r3, r4
 80091ae:	462c      	movge	r4, r5
 80091b0:	4638      	mov	r0, r7
 80091b2:	6861      	ldr	r1, [r4, #4]
 80091b4:	bfa6      	itte	ge
 80091b6:	461d      	movge	r5, r3
 80091b8:	2600      	movge	r6, #0
 80091ba:	2601      	movlt	r6, #1
 80091bc:	f7ff fcf4 	bl	8008ba8 <_Balloc>
 80091c0:	4602      	mov	r2, r0
 80091c2:	b918      	cbnz	r0, 80091cc <__mdiff+0x5c>
 80091c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091c8:	4b2d      	ldr	r3, [pc, #180]	; (8009280 <__mdiff+0x110>)
 80091ca:	e7e5      	b.n	8009198 <__mdiff+0x28>
 80091cc:	f102 0814 	add.w	r8, r2, #20
 80091d0:	46c2      	mov	sl, r8
 80091d2:	f04f 0c00 	mov.w	ip, #0
 80091d6:	6927      	ldr	r7, [r4, #16]
 80091d8:	60c6      	str	r6, [r0, #12]
 80091da:	692e      	ldr	r6, [r5, #16]
 80091dc:	f104 0014 	add.w	r0, r4, #20
 80091e0:	f105 0914 	add.w	r9, r5, #20
 80091e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80091e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091ec:	3410      	adds	r4, #16
 80091ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80091f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80091f6:	fa1f f18b 	uxth.w	r1, fp
 80091fa:	448c      	add	ip, r1
 80091fc:	b299      	uxth	r1, r3
 80091fe:	0c1b      	lsrs	r3, r3, #16
 8009200:	ebac 0101 	sub.w	r1, ip, r1
 8009204:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009208:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800920c:	b289      	uxth	r1, r1
 800920e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009212:	454e      	cmp	r6, r9
 8009214:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009218:	f84a 3b04 	str.w	r3, [sl], #4
 800921c:	d8e7      	bhi.n	80091ee <__mdiff+0x7e>
 800921e:	1b73      	subs	r3, r6, r5
 8009220:	3b15      	subs	r3, #21
 8009222:	f023 0303 	bic.w	r3, r3, #3
 8009226:	3515      	adds	r5, #21
 8009228:	3304      	adds	r3, #4
 800922a:	42ae      	cmp	r6, r5
 800922c:	bf38      	it	cc
 800922e:	2304      	movcc	r3, #4
 8009230:	4418      	add	r0, r3
 8009232:	4443      	add	r3, r8
 8009234:	461e      	mov	r6, r3
 8009236:	4605      	mov	r5, r0
 8009238:	4575      	cmp	r5, lr
 800923a:	d30e      	bcc.n	800925a <__mdiff+0xea>
 800923c:	f10e 0103 	add.w	r1, lr, #3
 8009240:	1a09      	subs	r1, r1, r0
 8009242:	f021 0103 	bic.w	r1, r1, #3
 8009246:	3803      	subs	r0, #3
 8009248:	4586      	cmp	lr, r0
 800924a:	bf38      	it	cc
 800924c:	2100      	movcc	r1, #0
 800924e:	4419      	add	r1, r3
 8009250:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009254:	b18b      	cbz	r3, 800927a <__mdiff+0x10a>
 8009256:	6117      	str	r7, [r2, #16]
 8009258:	e7a4      	b.n	80091a4 <__mdiff+0x34>
 800925a:	f855 8b04 	ldr.w	r8, [r5], #4
 800925e:	fa1f f188 	uxth.w	r1, r8
 8009262:	4461      	add	r1, ip
 8009264:	140c      	asrs	r4, r1, #16
 8009266:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800926a:	b289      	uxth	r1, r1
 800926c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009270:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009274:	f846 1b04 	str.w	r1, [r6], #4
 8009278:	e7de      	b.n	8009238 <__mdiff+0xc8>
 800927a:	3f01      	subs	r7, #1
 800927c:	e7e8      	b.n	8009250 <__mdiff+0xe0>
 800927e:	bf00      	nop
 8009280:	0800be10 	.word	0x0800be10
 8009284:	0800bf00 	.word	0x0800bf00

08009288 <__ulp>:
 8009288:	4b11      	ldr	r3, [pc, #68]	; (80092d0 <__ulp+0x48>)
 800928a:	400b      	ands	r3, r1
 800928c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009290:	2b00      	cmp	r3, #0
 8009292:	dd02      	ble.n	800929a <__ulp+0x12>
 8009294:	2000      	movs	r0, #0
 8009296:	4619      	mov	r1, r3
 8009298:	4770      	bx	lr
 800929a:	425b      	negs	r3, r3
 800929c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80092a0:	f04f 0000 	mov.w	r0, #0
 80092a4:	f04f 0100 	mov.w	r1, #0
 80092a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092ac:	da04      	bge.n	80092b8 <__ulp+0x30>
 80092ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80092b2:	fa43 f102 	asr.w	r1, r3, r2
 80092b6:	4770      	bx	lr
 80092b8:	f1a2 0314 	sub.w	r3, r2, #20
 80092bc:	2b1e      	cmp	r3, #30
 80092be:	bfd6      	itet	le
 80092c0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80092c4:	2301      	movgt	r3, #1
 80092c6:	fa22 f303 	lsrle.w	r3, r2, r3
 80092ca:	4618      	mov	r0, r3
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	7ff00000 	.word	0x7ff00000

080092d4 <__b2d>:
 80092d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d8:	6907      	ldr	r7, [r0, #16]
 80092da:	f100 0914 	add.w	r9, r0, #20
 80092de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80092e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80092e6:	f1a7 0804 	sub.w	r8, r7, #4
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7ff fd4e 	bl	8008d8c <__hi0bits>
 80092f0:	f1c0 0320 	rsb	r3, r0, #32
 80092f4:	280a      	cmp	r0, #10
 80092f6:	600b      	str	r3, [r1, #0]
 80092f8:	491f      	ldr	r1, [pc, #124]	; (8009378 <__b2d+0xa4>)
 80092fa:	dc17      	bgt.n	800932c <__b2d+0x58>
 80092fc:	45c1      	cmp	r9, r8
 80092fe:	bf28      	it	cs
 8009300:	2200      	movcs	r2, #0
 8009302:	f1c0 0c0b 	rsb	ip, r0, #11
 8009306:	fa26 f30c 	lsr.w	r3, r6, ip
 800930a:	bf38      	it	cc
 800930c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009310:	ea43 0501 	orr.w	r5, r3, r1
 8009314:	f100 0315 	add.w	r3, r0, #21
 8009318:	fa06 f303 	lsl.w	r3, r6, r3
 800931c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009320:	ea43 0402 	orr.w	r4, r3, r2
 8009324:	4620      	mov	r0, r4
 8009326:	4629      	mov	r1, r5
 8009328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932c:	45c1      	cmp	r9, r8
 800932e:	bf2e      	itee	cs
 8009330:	2200      	movcs	r2, #0
 8009332:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009336:	f1a7 0808 	subcc.w	r8, r7, #8
 800933a:	f1b0 030b 	subs.w	r3, r0, #11
 800933e:	d016      	beq.n	800936e <__b2d+0x9a>
 8009340:	f1c3 0720 	rsb	r7, r3, #32
 8009344:	fa22 f107 	lsr.w	r1, r2, r7
 8009348:	45c8      	cmp	r8, r9
 800934a:	fa06 f603 	lsl.w	r6, r6, r3
 800934e:	ea46 0601 	orr.w	r6, r6, r1
 8009352:	bf94      	ite	ls
 8009354:	2100      	movls	r1, #0
 8009356:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800935a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800935e:	fa02 f003 	lsl.w	r0, r2, r3
 8009362:	40f9      	lsrs	r1, r7
 8009364:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009368:	ea40 0401 	orr.w	r4, r0, r1
 800936c:	e7da      	b.n	8009324 <__b2d+0x50>
 800936e:	4614      	mov	r4, r2
 8009370:	ea46 0501 	orr.w	r5, r6, r1
 8009374:	e7d6      	b.n	8009324 <__b2d+0x50>
 8009376:	bf00      	nop
 8009378:	3ff00000 	.word	0x3ff00000

0800937c <__d2b>:
 800937c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009380:	2101      	movs	r1, #1
 8009382:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009386:	4690      	mov	r8, r2
 8009388:	461d      	mov	r5, r3
 800938a:	f7ff fc0d 	bl	8008ba8 <_Balloc>
 800938e:	4604      	mov	r4, r0
 8009390:	b930      	cbnz	r0, 80093a0 <__d2b+0x24>
 8009392:	4602      	mov	r2, r0
 8009394:	f240 310a 	movw	r1, #778	; 0x30a
 8009398:	4b24      	ldr	r3, [pc, #144]	; (800942c <__d2b+0xb0>)
 800939a:	4825      	ldr	r0, [pc, #148]	; (8009430 <__d2b+0xb4>)
 800939c:	f000 fdae 	bl	8009efc <__assert_func>
 80093a0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80093a4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80093a8:	bb2d      	cbnz	r5, 80093f6 <__d2b+0x7a>
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	f1b8 0300 	subs.w	r3, r8, #0
 80093b0:	d026      	beq.n	8009400 <__d2b+0x84>
 80093b2:	4668      	mov	r0, sp
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	f7ff fd09 	bl	8008dcc <__lo0bits>
 80093ba:	9900      	ldr	r1, [sp, #0]
 80093bc:	b1f0      	cbz	r0, 80093fc <__d2b+0x80>
 80093be:	9a01      	ldr	r2, [sp, #4]
 80093c0:	f1c0 0320 	rsb	r3, r0, #32
 80093c4:	fa02 f303 	lsl.w	r3, r2, r3
 80093c8:	430b      	orrs	r3, r1
 80093ca:	40c2      	lsrs	r2, r0
 80093cc:	6163      	str	r3, [r4, #20]
 80093ce:	9201      	str	r2, [sp, #4]
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	bf14      	ite	ne
 80093d6:	2102      	movne	r1, #2
 80093d8:	2101      	moveq	r1, #1
 80093da:	61a3      	str	r3, [r4, #24]
 80093dc:	6121      	str	r1, [r4, #16]
 80093de:	b1c5      	cbz	r5, 8009412 <__d2b+0x96>
 80093e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093e4:	4405      	add	r5, r0
 80093e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093ea:	603d      	str	r5, [r7, #0]
 80093ec:	6030      	str	r0, [r6, #0]
 80093ee:	4620      	mov	r0, r4
 80093f0:	b002      	add	sp, #8
 80093f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093fa:	e7d6      	b.n	80093aa <__d2b+0x2e>
 80093fc:	6161      	str	r1, [r4, #20]
 80093fe:	e7e7      	b.n	80093d0 <__d2b+0x54>
 8009400:	a801      	add	r0, sp, #4
 8009402:	f7ff fce3 	bl	8008dcc <__lo0bits>
 8009406:	2101      	movs	r1, #1
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	6121      	str	r1, [r4, #16]
 800940c:	6163      	str	r3, [r4, #20]
 800940e:	3020      	adds	r0, #32
 8009410:	e7e5      	b.n	80093de <__d2b+0x62>
 8009412:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009416:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800941a:	6038      	str	r0, [r7, #0]
 800941c:	6918      	ldr	r0, [r3, #16]
 800941e:	f7ff fcb5 	bl	8008d8c <__hi0bits>
 8009422:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009426:	6031      	str	r1, [r6, #0]
 8009428:	e7e1      	b.n	80093ee <__d2b+0x72>
 800942a:	bf00      	nop
 800942c:	0800be10 	.word	0x0800be10
 8009430:	0800bf00 	.word	0x0800bf00

08009434 <__ratio>:
 8009434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	4688      	mov	r8, r1
 800943a:	4669      	mov	r1, sp
 800943c:	4681      	mov	r9, r0
 800943e:	f7ff ff49 	bl	80092d4 <__b2d>
 8009442:	460f      	mov	r7, r1
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	4640      	mov	r0, r8
 800944a:	a901      	add	r1, sp, #4
 800944c:	f7ff ff42 	bl	80092d4 <__b2d>
 8009450:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009454:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009458:	468b      	mov	fp, r1
 800945a:	eba3 0c02 	sub.w	ip, r3, r2
 800945e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009462:	1a9b      	subs	r3, r3, r2
 8009464:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009468:	2b00      	cmp	r3, #0
 800946a:	bfd5      	itete	le
 800946c:	460a      	movle	r2, r1
 800946e:	462a      	movgt	r2, r5
 8009470:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009474:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009478:	bfd8      	it	le
 800947a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800947e:	465b      	mov	r3, fp
 8009480:	4602      	mov	r2, r0
 8009482:	4639      	mov	r1, r7
 8009484:	4620      	mov	r0, r4
 8009486:	f7f7 f9bd 	bl	8000804 <__aeabi_ddiv>
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009490 <__copybits>:
 8009490:	3901      	subs	r1, #1
 8009492:	b570      	push	{r4, r5, r6, lr}
 8009494:	1149      	asrs	r1, r1, #5
 8009496:	6914      	ldr	r4, [r2, #16]
 8009498:	3101      	adds	r1, #1
 800949a:	f102 0314 	add.w	r3, r2, #20
 800949e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094a6:	1f05      	subs	r5, r0, #4
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	d30c      	bcc.n	80094c6 <__copybits+0x36>
 80094ac:	1aa3      	subs	r3, r4, r2
 80094ae:	3b11      	subs	r3, #17
 80094b0:	f023 0303 	bic.w	r3, r3, #3
 80094b4:	3211      	adds	r2, #17
 80094b6:	42a2      	cmp	r2, r4
 80094b8:	bf88      	it	hi
 80094ba:	2300      	movhi	r3, #0
 80094bc:	4418      	add	r0, r3
 80094be:	2300      	movs	r3, #0
 80094c0:	4288      	cmp	r0, r1
 80094c2:	d305      	bcc.n	80094d0 <__copybits+0x40>
 80094c4:	bd70      	pop	{r4, r5, r6, pc}
 80094c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80094ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80094ce:	e7eb      	b.n	80094a8 <__copybits+0x18>
 80094d0:	f840 3b04 	str.w	r3, [r0], #4
 80094d4:	e7f4      	b.n	80094c0 <__copybits+0x30>

080094d6 <__any_on>:
 80094d6:	f100 0214 	add.w	r2, r0, #20
 80094da:	6900      	ldr	r0, [r0, #16]
 80094dc:	114b      	asrs	r3, r1, #5
 80094de:	4298      	cmp	r0, r3
 80094e0:	b510      	push	{r4, lr}
 80094e2:	db11      	blt.n	8009508 <__any_on+0x32>
 80094e4:	dd0a      	ble.n	80094fc <__any_on+0x26>
 80094e6:	f011 011f 	ands.w	r1, r1, #31
 80094ea:	d007      	beq.n	80094fc <__any_on+0x26>
 80094ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094f0:	fa24 f001 	lsr.w	r0, r4, r1
 80094f4:	fa00 f101 	lsl.w	r1, r0, r1
 80094f8:	428c      	cmp	r4, r1
 80094fa:	d10b      	bne.n	8009514 <__any_on+0x3e>
 80094fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009500:	4293      	cmp	r3, r2
 8009502:	d803      	bhi.n	800950c <__any_on+0x36>
 8009504:	2000      	movs	r0, #0
 8009506:	bd10      	pop	{r4, pc}
 8009508:	4603      	mov	r3, r0
 800950a:	e7f7      	b.n	80094fc <__any_on+0x26>
 800950c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009510:	2900      	cmp	r1, #0
 8009512:	d0f5      	beq.n	8009500 <__any_on+0x2a>
 8009514:	2001      	movs	r0, #1
 8009516:	e7f6      	b.n	8009506 <__any_on+0x30>

08009518 <_calloc_r>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	fba1 5402 	umull	r5, r4, r1, r2
 800951e:	b934      	cbnz	r4, 800952e <_calloc_r+0x16>
 8009520:	4629      	mov	r1, r5
 8009522:	f000 f875 	bl	8009610 <_malloc_r>
 8009526:	4606      	mov	r6, r0
 8009528:	b928      	cbnz	r0, 8009536 <_calloc_r+0x1e>
 800952a:	4630      	mov	r0, r6
 800952c:	bd70      	pop	{r4, r5, r6, pc}
 800952e:	220c      	movs	r2, #12
 8009530:	2600      	movs	r6, #0
 8009532:	6002      	str	r2, [r0, #0]
 8009534:	e7f9      	b.n	800952a <_calloc_r+0x12>
 8009536:	462a      	mov	r2, r5
 8009538:	4621      	mov	r1, r4
 800953a:	f7fc fae1 	bl	8005b00 <memset>
 800953e:	e7f4      	b.n	800952a <_calloc_r+0x12>

08009540 <_free_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4605      	mov	r5, r0
 8009544:	2900      	cmp	r1, #0
 8009546:	d040      	beq.n	80095ca <_free_r+0x8a>
 8009548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954c:	1f0c      	subs	r4, r1, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	bfb8      	it	lt
 8009552:	18e4      	addlt	r4, r4, r3
 8009554:	f000 fe62 	bl	800a21c <__malloc_lock>
 8009558:	4a1c      	ldr	r2, [pc, #112]	; (80095cc <_free_r+0x8c>)
 800955a:	6813      	ldr	r3, [r2, #0]
 800955c:	b933      	cbnz	r3, 800956c <_free_r+0x2c>
 800955e:	6063      	str	r3, [r4, #4]
 8009560:	6014      	str	r4, [r2, #0]
 8009562:	4628      	mov	r0, r5
 8009564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009568:	f000 be5e 	b.w	800a228 <__malloc_unlock>
 800956c:	42a3      	cmp	r3, r4
 800956e:	d908      	bls.n	8009582 <_free_r+0x42>
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	1821      	adds	r1, r4, r0
 8009574:	428b      	cmp	r3, r1
 8009576:	bf01      	itttt	eq
 8009578:	6819      	ldreq	r1, [r3, #0]
 800957a:	685b      	ldreq	r3, [r3, #4]
 800957c:	1809      	addeq	r1, r1, r0
 800957e:	6021      	streq	r1, [r4, #0]
 8009580:	e7ed      	b.n	800955e <_free_r+0x1e>
 8009582:	461a      	mov	r2, r3
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	b10b      	cbz	r3, 800958c <_free_r+0x4c>
 8009588:	42a3      	cmp	r3, r4
 800958a:	d9fa      	bls.n	8009582 <_free_r+0x42>
 800958c:	6811      	ldr	r1, [r2, #0]
 800958e:	1850      	adds	r0, r2, r1
 8009590:	42a0      	cmp	r0, r4
 8009592:	d10b      	bne.n	80095ac <_free_r+0x6c>
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	4401      	add	r1, r0
 8009598:	1850      	adds	r0, r2, r1
 800959a:	4283      	cmp	r3, r0
 800959c:	6011      	str	r1, [r2, #0]
 800959e:	d1e0      	bne.n	8009562 <_free_r+0x22>
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	4401      	add	r1, r0
 80095a6:	6011      	str	r1, [r2, #0]
 80095a8:	6053      	str	r3, [r2, #4]
 80095aa:	e7da      	b.n	8009562 <_free_r+0x22>
 80095ac:	d902      	bls.n	80095b4 <_free_r+0x74>
 80095ae:	230c      	movs	r3, #12
 80095b0:	602b      	str	r3, [r5, #0]
 80095b2:	e7d6      	b.n	8009562 <_free_r+0x22>
 80095b4:	6820      	ldr	r0, [r4, #0]
 80095b6:	1821      	adds	r1, r4, r0
 80095b8:	428b      	cmp	r3, r1
 80095ba:	bf01      	itttt	eq
 80095bc:	6819      	ldreq	r1, [r3, #0]
 80095be:	685b      	ldreq	r3, [r3, #4]
 80095c0:	1809      	addeq	r1, r1, r0
 80095c2:	6021      	streq	r1, [r4, #0]
 80095c4:	6063      	str	r3, [r4, #4]
 80095c6:	6054      	str	r4, [r2, #4]
 80095c8:	e7cb      	b.n	8009562 <_free_r+0x22>
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	200002b4 	.word	0x200002b4

080095d0 <sbrk_aligned>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4e0e      	ldr	r6, [pc, #56]	; (800960c <sbrk_aligned+0x3c>)
 80095d4:	460c      	mov	r4, r1
 80095d6:	6831      	ldr	r1, [r6, #0]
 80095d8:	4605      	mov	r5, r0
 80095da:	b911      	cbnz	r1, 80095e2 <sbrk_aligned+0x12>
 80095dc:	f000 fb46 	bl	8009c6c <_sbrk_r>
 80095e0:	6030      	str	r0, [r6, #0]
 80095e2:	4621      	mov	r1, r4
 80095e4:	4628      	mov	r0, r5
 80095e6:	f000 fb41 	bl	8009c6c <_sbrk_r>
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	d00a      	beq.n	8009604 <sbrk_aligned+0x34>
 80095ee:	1cc4      	adds	r4, r0, #3
 80095f0:	f024 0403 	bic.w	r4, r4, #3
 80095f4:	42a0      	cmp	r0, r4
 80095f6:	d007      	beq.n	8009608 <sbrk_aligned+0x38>
 80095f8:	1a21      	subs	r1, r4, r0
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 fb36 	bl	8009c6c <_sbrk_r>
 8009600:	3001      	adds	r0, #1
 8009602:	d101      	bne.n	8009608 <sbrk_aligned+0x38>
 8009604:	f04f 34ff 	mov.w	r4, #4294967295
 8009608:	4620      	mov	r0, r4
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	200002b8 	.word	0x200002b8

08009610 <_malloc_r>:
 8009610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009614:	1ccd      	adds	r5, r1, #3
 8009616:	f025 0503 	bic.w	r5, r5, #3
 800961a:	3508      	adds	r5, #8
 800961c:	2d0c      	cmp	r5, #12
 800961e:	bf38      	it	cc
 8009620:	250c      	movcc	r5, #12
 8009622:	2d00      	cmp	r5, #0
 8009624:	4607      	mov	r7, r0
 8009626:	db01      	blt.n	800962c <_malloc_r+0x1c>
 8009628:	42a9      	cmp	r1, r5
 800962a:	d905      	bls.n	8009638 <_malloc_r+0x28>
 800962c:	230c      	movs	r3, #12
 800962e:	2600      	movs	r6, #0
 8009630:	603b      	str	r3, [r7, #0]
 8009632:	4630      	mov	r0, r6
 8009634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009638:	4e2e      	ldr	r6, [pc, #184]	; (80096f4 <_malloc_r+0xe4>)
 800963a:	f000 fdef 	bl	800a21c <__malloc_lock>
 800963e:	6833      	ldr	r3, [r6, #0]
 8009640:	461c      	mov	r4, r3
 8009642:	bb34      	cbnz	r4, 8009692 <_malloc_r+0x82>
 8009644:	4629      	mov	r1, r5
 8009646:	4638      	mov	r0, r7
 8009648:	f7ff ffc2 	bl	80095d0 <sbrk_aligned>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	4604      	mov	r4, r0
 8009650:	d14d      	bne.n	80096ee <_malloc_r+0xde>
 8009652:	6834      	ldr	r4, [r6, #0]
 8009654:	4626      	mov	r6, r4
 8009656:	2e00      	cmp	r6, #0
 8009658:	d140      	bne.n	80096dc <_malloc_r+0xcc>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	4631      	mov	r1, r6
 800965e:	4638      	mov	r0, r7
 8009660:	eb04 0803 	add.w	r8, r4, r3
 8009664:	f000 fb02 	bl	8009c6c <_sbrk_r>
 8009668:	4580      	cmp	r8, r0
 800966a:	d13a      	bne.n	80096e2 <_malloc_r+0xd2>
 800966c:	6821      	ldr	r1, [r4, #0]
 800966e:	3503      	adds	r5, #3
 8009670:	1a6d      	subs	r5, r5, r1
 8009672:	f025 0503 	bic.w	r5, r5, #3
 8009676:	3508      	adds	r5, #8
 8009678:	2d0c      	cmp	r5, #12
 800967a:	bf38      	it	cc
 800967c:	250c      	movcc	r5, #12
 800967e:	4638      	mov	r0, r7
 8009680:	4629      	mov	r1, r5
 8009682:	f7ff ffa5 	bl	80095d0 <sbrk_aligned>
 8009686:	3001      	adds	r0, #1
 8009688:	d02b      	beq.n	80096e2 <_malloc_r+0xd2>
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	442b      	add	r3, r5
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	e00e      	b.n	80096b0 <_malloc_r+0xa0>
 8009692:	6822      	ldr	r2, [r4, #0]
 8009694:	1b52      	subs	r2, r2, r5
 8009696:	d41e      	bmi.n	80096d6 <_malloc_r+0xc6>
 8009698:	2a0b      	cmp	r2, #11
 800969a:	d916      	bls.n	80096ca <_malloc_r+0xba>
 800969c:	1961      	adds	r1, r4, r5
 800969e:	42a3      	cmp	r3, r4
 80096a0:	6025      	str	r5, [r4, #0]
 80096a2:	bf18      	it	ne
 80096a4:	6059      	strne	r1, [r3, #4]
 80096a6:	6863      	ldr	r3, [r4, #4]
 80096a8:	bf08      	it	eq
 80096aa:	6031      	streq	r1, [r6, #0]
 80096ac:	5162      	str	r2, [r4, r5]
 80096ae:	604b      	str	r3, [r1, #4]
 80096b0:	4638      	mov	r0, r7
 80096b2:	f104 060b 	add.w	r6, r4, #11
 80096b6:	f000 fdb7 	bl	800a228 <__malloc_unlock>
 80096ba:	f026 0607 	bic.w	r6, r6, #7
 80096be:	1d23      	adds	r3, r4, #4
 80096c0:	1af2      	subs	r2, r6, r3
 80096c2:	d0b6      	beq.n	8009632 <_malloc_r+0x22>
 80096c4:	1b9b      	subs	r3, r3, r6
 80096c6:	50a3      	str	r3, [r4, r2]
 80096c8:	e7b3      	b.n	8009632 <_malloc_r+0x22>
 80096ca:	6862      	ldr	r2, [r4, #4]
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	bf0c      	ite	eq
 80096d0:	6032      	streq	r2, [r6, #0]
 80096d2:	605a      	strne	r2, [r3, #4]
 80096d4:	e7ec      	b.n	80096b0 <_malloc_r+0xa0>
 80096d6:	4623      	mov	r3, r4
 80096d8:	6864      	ldr	r4, [r4, #4]
 80096da:	e7b2      	b.n	8009642 <_malloc_r+0x32>
 80096dc:	4634      	mov	r4, r6
 80096de:	6876      	ldr	r6, [r6, #4]
 80096e0:	e7b9      	b.n	8009656 <_malloc_r+0x46>
 80096e2:	230c      	movs	r3, #12
 80096e4:	4638      	mov	r0, r7
 80096e6:	603b      	str	r3, [r7, #0]
 80096e8:	f000 fd9e 	bl	800a228 <__malloc_unlock>
 80096ec:	e7a1      	b.n	8009632 <_malloc_r+0x22>
 80096ee:	6025      	str	r5, [r4, #0]
 80096f0:	e7de      	b.n	80096b0 <_malloc_r+0xa0>
 80096f2:	bf00      	nop
 80096f4:	200002b4 	.word	0x200002b4

080096f8 <__ssputs_r>:
 80096f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fc:	688e      	ldr	r6, [r1, #8]
 80096fe:	4682      	mov	sl, r0
 8009700:	429e      	cmp	r6, r3
 8009702:	460c      	mov	r4, r1
 8009704:	4690      	mov	r8, r2
 8009706:	461f      	mov	r7, r3
 8009708:	d838      	bhi.n	800977c <__ssputs_r+0x84>
 800970a:	898a      	ldrh	r2, [r1, #12]
 800970c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009710:	d032      	beq.n	8009778 <__ssputs_r+0x80>
 8009712:	6825      	ldr	r5, [r4, #0]
 8009714:	6909      	ldr	r1, [r1, #16]
 8009716:	3301      	adds	r3, #1
 8009718:	eba5 0901 	sub.w	r9, r5, r1
 800971c:	6965      	ldr	r5, [r4, #20]
 800971e:	444b      	add	r3, r9
 8009720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009728:	106d      	asrs	r5, r5, #1
 800972a:	429d      	cmp	r5, r3
 800972c:	bf38      	it	cc
 800972e:	461d      	movcc	r5, r3
 8009730:	0553      	lsls	r3, r2, #21
 8009732:	d531      	bpl.n	8009798 <__ssputs_r+0xa0>
 8009734:	4629      	mov	r1, r5
 8009736:	f7ff ff6b 	bl	8009610 <_malloc_r>
 800973a:	4606      	mov	r6, r0
 800973c:	b950      	cbnz	r0, 8009754 <__ssputs_r+0x5c>
 800973e:	230c      	movs	r3, #12
 8009740:	f04f 30ff 	mov.w	r0, #4294967295
 8009744:	f8ca 3000 	str.w	r3, [sl]
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974e:	81a3      	strh	r3, [r4, #12]
 8009750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009754:	464a      	mov	r2, r9
 8009756:	6921      	ldr	r1, [r4, #16]
 8009758:	f7ff fa18 	bl	8008b8c <memcpy>
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009766:	81a3      	strh	r3, [r4, #12]
 8009768:	6126      	str	r6, [r4, #16]
 800976a:	444e      	add	r6, r9
 800976c:	6026      	str	r6, [r4, #0]
 800976e:	463e      	mov	r6, r7
 8009770:	6165      	str	r5, [r4, #20]
 8009772:	eba5 0509 	sub.w	r5, r5, r9
 8009776:	60a5      	str	r5, [r4, #8]
 8009778:	42be      	cmp	r6, r7
 800977a:	d900      	bls.n	800977e <__ssputs_r+0x86>
 800977c:	463e      	mov	r6, r7
 800977e:	4632      	mov	r2, r6
 8009780:	4641      	mov	r1, r8
 8009782:	6820      	ldr	r0, [r4, #0]
 8009784:	f000 fd30 	bl	800a1e8 <memmove>
 8009788:	68a3      	ldr	r3, [r4, #8]
 800978a:	2000      	movs	r0, #0
 800978c:	1b9b      	subs	r3, r3, r6
 800978e:	60a3      	str	r3, [r4, #8]
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	4433      	add	r3, r6
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	e7db      	b.n	8009750 <__ssputs_r+0x58>
 8009798:	462a      	mov	r2, r5
 800979a:	f000 fd4b 	bl	800a234 <_realloc_r>
 800979e:	4606      	mov	r6, r0
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d1e1      	bne.n	8009768 <__ssputs_r+0x70>
 80097a4:	4650      	mov	r0, sl
 80097a6:	6921      	ldr	r1, [r4, #16]
 80097a8:	f7ff feca 	bl	8009540 <_free_r>
 80097ac:	e7c7      	b.n	800973e <__ssputs_r+0x46>
	...

080097b0 <_svfiprintf_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	4698      	mov	r8, r3
 80097b6:	898b      	ldrh	r3, [r1, #12]
 80097b8:	4607      	mov	r7, r0
 80097ba:	061b      	lsls	r3, r3, #24
 80097bc:	460d      	mov	r5, r1
 80097be:	4614      	mov	r4, r2
 80097c0:	b09d      	sub	sp, #116	; 0x74
 80097c2:	d50e      	bpl.n	80097e2 <_svfiprintf_r+0x32>
 80097c4:	690b      	ldr	r3, [r1, #16]
 80097c6:	b963      	cbnz	r3, 80097e2 <_svfiprintf_r+0x32>
 80097c8:	2140      	movs	r1, #64	; 0x40
 80097ca:	f7ff ff21 	bl	8009610 <_malloc_r>
 80097ce:	6028      	str	r0, [r5, #0]
 80097d0:	6128      	str	r0, [r5, #16]
 80097d2:	b920      	cbnz	r0, 80097de <_svfiprintf_r+0x2e>
 80097d4:	230c      	movs	r3, #12
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	f04f 30ff 	mov.w	r0, #4294967295
 80097dc:	e0d1      	b.n	8009982 <_svfiprintf_r+0x1d2>
 80097de:	2340      	movs	r3, #64	; 0x40
 80097e0:	616b      	str	r3, [r5, #20]
 80097e2:	2300      	movs	r3, #0
 80097e4:	9309      	str	r3, [sp, #36]	; 0x24
 80097e6:	2320      	movs	r3, #32
 80097e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ec:	2330      	movs	r3, #48	; 0x30
 80097ee:	f04f 0901 	mov.w	r9, #1
 80097f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80097f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800999c <_svfiprintf_r+0x1ec>
 80097fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097fe:	4623      	mov	r3, r4
 8009800:	469a      	mov	sl, r3
 8009802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009806:	b10a      	cbz	r2, 800980c <_svfiprintf_r+0x5c>
 8009808:	2a25      	cmp	r2, #37	; 0x25
 800980a:	d1f9      	bne.n	8009800 <_svfiprintf_r+0x50>
 800980c:	ebba 0b04 	subs.w	fp, sl, r4
 8009810:	d00b      	beq.n	800982a <_svfiprintf_r+0x7a>
 8009812:	465b      	mov	r3, fp
 8009814:	4622      	mov	r2, r4
 8009816:	4629      	mov	r1, r5
 8009818:	4638      	mov	r0, r7
 800981a:	f7ff ff6d 	bl	80096f8 <__ssputs_r>
 800981e:	3001      	adds	r0, #1
 8009820:	f000 80aa 	beq.w	8009978 <_svfiprintf_r+0x1c8>
 8009824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009826:	445a      	add	r2, fp
 8009828:	9209      	str	r2, [sp, #36]	; 0x24
 800982a:	f89a 3000 	ldrb.w	r3, [sl]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 80a2 	beq.w	8009978 <_svfiprintf_r+0x1c8>
 8009834:	2300      	movs	r3, #0
 8009836:	f04f 32ff 	mov.w	r2, #4294967295
 800983a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800983e:	f10a 0a01 	add.w	sl, sl, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	9307      	str	r3, [sp, #28]
 8009846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800984a:	931a      	str	r3, [sp, #104]	; 0x68
 800984c:	4654      	mov	r4, sl
 800984e:	2205      	movs	r2, #5
 8009850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009854:	4851      	ldr	r0, [pc, #324]	; (800999c <_svfiprintf_r+0x1ec>)
 8009856:	f7ff f98b 	bl	8008b70 <memchr>
 800985a:	9a04      	ldr	r2, [sp, #16]
 800985c:	b9d8      	cbnz	r0, 8009896 <_svfiprintf_r+0xe6>
 800985e:	06d0      	lsls	r0, r2, #27
 8009860:	bf44      	itt	mi
 8009862:	2320      	movmi	r3, #32
 8009864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009868:	0711      	lsls	r1, r2, #28
 800986a:	bf44      	itt	mi
 800986c:	232b      	movmi	r3, #43	; 0x2b
 800986e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009872:	f89a 3000 	ldrb.w	r3, [sl]
 8009876:	2b2a      	cmp	r3, #42	; 0x2a
 8009878:	d015      	beq.n	80098a6 <_svfiprintf_r+0xf6>
 800987a:	4654      	mov	r4, sl
 800987c:	2000      	movs	r0, #0
 800987e:	f04f 0c0a 	mov.w	ip, #10
 8009882:	9a07      	ldr	r2, [sp, #28]
 8009884:	4621      	mov	r1, r4
 8009886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800988a:	3b30      	subs	r3, #48	; 0x30
 800988c:	2b09      	cmp	r3, #9
 800988e:	d94e      	bls.n	800992e <_svfiprintf_r+0x17e>
 8009890:	b1b0      	cbz	r0, 80098c0 <_svfiprintf_r+0x110>
 8009892:	9207      	str	r2, [sp, #28]
 8009894:	e014      	b.n	80098c0 <_svfiprintf_r+0x110>
 8009896:	eba0 0308 	sub.w	r3, r0, r8
 800989a:	fa09 f303 	lsl.w	r3, r9, r3
 800989e:	4313      	orrs	r3, r2
 80098a0:	46a2      	mov	sl, r4
 80098a2:	9304      	str	r3, [sp, #16]
 80098a4:	e7d2      	b.n	800984c <_svfiprintf_r+0x9c>
 80098a6:	9b03      	ldr	r3, [sp, #12]
 80098a8:	1d19      	adds	r1, r3, #4
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	9103      	str	r1, [sp, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bfbb      	ittet	lt
 80098b2:	425b      	neglt	r3, r3
 80098b4:	f042 0202 	orrlt.w	r2, r2, #2
 80098b8:	9307      	strge	r3, [sp, #28]
 80098ba:	9307      	strlt	r3, [sp, #28]
 80098bc:	bfb8      	it	lt
 80098be:	9204      	strlt	r2, [sp, #16]
 80098c0:	7823      	ldrb	r3, [r4, #0]
 80098c2:	2b2e      	cmp	r3, #46	; 0x2e
 80098c4:	d10c      	bne.n	80098e0 <_svfiprintf_r+0x130>
 80098c6:	7863      	ldrb	r3, [r4, #1]
 80098c8:	2b2a      	cmp	r3, #42	; 0x2a
 80098ca:	d135      	bne.n	8009938 <_svfiprintf_r+0x188>
 80098cc:	9b03      	ldr	r3, [sp, #12]
 80098ce:	3402      	adds	r4, #2
 80098d0:	1d1a      	adds	r2, r3, #4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	9203      	str	r2, [sp, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bfb8      	it	lt
 80098da:	f04f 33ff 	movlt.w	r3, #4294967295
 80098de:	9305      	str	r3, [sp, #20]
 80098e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80099a0 <_svfiprintf_r+0x1f0>
 80098e4:	2203      	movs	r2, #3
 80098e6:	4650      	mov	r0, sl
 80098e8:	7821      	ldrb	r1, [r4, #0]
 80098ea:	f7ff f941 	bl	8008b70 <memchr>
 80098ee:	b140      	cbz	r0, 8009902 <_svfiprintf_r+0x152>
 80098f0:	2340      	movs	r3, #64	; 0x40
 80098f2:	eba0 000a 	sub.w	r0, r0, sl
 80098f6:	fa03 f000 	lsl.w	r0, r3, r0
 80098fa:	9b04      	ldr	r3, [sp, #16]
 80098fc:	3401      	adds	r4, #1
 80098fe:	4303      	orrs	r3, r0
 8009900:	9304      	str	r3, [sp, #16]
 8009902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009906:	2206      	movs	r2, #6
 8009908:	4826      	ldr	r0, [pc, #152]	; (80099a4 <_svfiprintf_r+0x1f4>)
 800990a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800990e:	f7ff f92f 	bl	8008b70 <memchr>
 8009912:	2800      	cmp	r0, #0
 8009914:	d038      	beq.n	8009988 <_svfiprintf_r+0x1d8>
 8009916:	4b24      	ldr	r3, [pc, #144]	; (80099a8 <_svfiprintf_r+0x1f8>)
 8009918:	bb1b      	cbnz	r3, 8009962 <_svfiprintf_r+0x1b2>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	3307      	adds	r3, #7
 800991e:	f023 0307 	bic.w	r3, r3, #7
 8009922:	3308      	adds	r3, #8
 8009924:	9303      	str	r3, [sp, #12]
 8009926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009928:	4433      	add	r3, r6
 800992a:	9309      	str	r3, [sp, #36]	; 0x24
 800992c:	e767      	b.n	80097fe <_svfiprintf_r+0x4e>
 800992e:	460c      	mov	r4, r1
 8009930:	2001      	movs	r0, #1
 8009932:	fb0c 3202 	mla	r2, ip, r2, r3
 8009936:	e7a5      	b.n	8009884 <_svfiprintf_r+0xd4>
 8009938:	2300      	movs	r3, #0
 800993a:	f04f 0c0a 	mov.w	ip, #10
 800993e:	4619      	mov	r1, r3
 8009940:	3401      	adds	r4, #1
 8009942:	9305      	str	r3, [sp, #20]
 8009944:	4620      	mov	r0, r4
 8009946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800994a:	3a30      	subs	r2, #48	; 0x30
 800994c:	2a09      	cmp	r2, #9
 800994e:	d903      	bls.n	8009958 <_svfiprintf_r+0x1a8>
 8009950:	2b00      	cmp	r3, #0
 8009952:	d0c5      	beq.n	80098e0 <_svfiprintf_r+0x130>
 8009954:	9105      	str	r1, [sp, #20]
 8009956:	e7c3      	b.n	80098e0 <_svfiprintf_r+0x130>
 8009958:	4604      	mov	r4, r0
 800995a:	2301      	movs	r3, #1
 800995c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009960:	e7f0      	b.n	8009944 <_svfiprintf_r+0x194>
 8009962:	ab03      	add	r3, sp, #12
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	462a      	mov	r2, r5
 8009968:	4638      	mov	r0, r7
 800996a:	4b10      	ldr	r3, [pc, #64]	; (80099ac <_svfiprintf_r+0x1fc>)
 800996c:	a904      	add	r1, sp, #16
 800996e:	f7fc f96d 	bl	8005c4c <_printf_float>
 8009972:	1c42      	adds	r2, r0, #1
 8009974:	4606      	mov	r6, r0
 8009976:	d1d6      	bne.n	8009926 <_svfiprintf_r+0x176>
 8009978:	89ab      	ldrh	r3, [r5, #12]
 800997a:	065b      	lsls	r3, r3, #25
 800997c:	f53f af2c 	bmi.w	80097d8 <_svfiprintf_r+0x28>
 8009980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009982:	b01d      	add	sp, #116	; 0x74
 8009984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009988:	ab03      	add	r3, sp, #12
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	462a      	mov	r2, r5
 800998e:	4638      	mov	r0, r7
 8009990:	4b06      	ldr	r3, [pc, #24]	; (80099ac <_svfiprintf_r+0x1fc>)
 8009992:	a904      	add	r1, sp, #16
 8009994:	f7fc fbf6 	bl	8006184 <_printf_i>
 8009998:	e7eb      	b.n	8009972 <_svfiprintf_r+0x1c2>
 800999a:	bf00      	nop
 800999c:	0800c05c 	.word	0x0800c05c
 80099a0:	0800c062 	.word	0x0800c062
 80099a4:	0800c066 	.word	0x0800c066
 80099a8:	08005c4d 	.word	0x08005c4d
 80099ac:	080096f9 	.word	0x080096f9

080099b0 <__sfputc_r>:
 80099b0:	6893      	ldr	r3, [r2, #8]
 80099b2:	b410      	push	{r4}
 80099b4:	3b01      	subs	r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	6093      	str	r3, [r2, #8]
 80099ba:	da07      	bge.n	80099cc <__sfputc_r+0x1c>
 80099bc:	6994      	ldr	r4, [r2, #24]
 80099be:	42a3      	cmp	r3, r4
 80099c0:	db01      	blt.n	80099c6 <__sfputc_r+0x16>
 80099c2:	290a      	cmp	r1, #10
 80099c4:	d102      	bne.n	80099cc <__sfputc_r+0x1c>
 80099c6:	bc10      	pop	{r4}
 80099c8:	f000 b9b8 	b.w	8009d3c <__swbuf_r>
 80099cc:	6813      	ldr	r3, [r2, #0]
 80099ce:	1c58      	adds	r0, r3, #1
 80099d0:	6010      	str	r0, [r2, #0]
 80099d2:	7019      	strb	r1, [r3, #0]
 80099d4:	4608      	mov	r0, r1
 80099d6:	bc10      	pop	{r4}
 80099d8:	4770      	bx	lr

080099da <__sfputs_r>:
 80099da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099dc:	4606      	mov	r6, r0
 80099de:	460f      	mov	r7, r1
 80099e0:	4614      	mov	r4, r2
 80099e2:	18d5      	adds	r5, r2, r3
 80099e4:	42ac      	cmp	r4, r5
 80099e6:	d101      	bne.n	80099ec <__sfputs_r+0x12>
 80099e8:	2000      	movs	r0, #0
 80099ea:	e007      	b.n	80099fc <__sfputs_r+0x22>
 80099ec:	463a      	mov	r2, r7
 80099ee:	4630      	mov	r0, r6
 80099f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f4:	f7ff ffdc 	bl	80099b0 <__sfputc_r>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d1f3      	bne.n	80099e4 <__sfputs_r+0xa>
 80099fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a00 <_vfiprintf_r>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	460d      	mov	r5, r1
 8009a06:	4614      	mov	r4, r2
 8009a08:	4698      	mov	r8, r3
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	b09d      	sub	sp, #116	; 0x74
 8009a0e:	b118      	cbz	r0, 8009a18 <_vfiprintf_r+0x18>
 8009a10:	6983      	ldr	r3, [r0, #24]
 8009a12:	b90b      	cbnz	r3, 8009a18 <_vfiprintf_r+0x18>
 8009a14:	f7fe fc86 	bl	8008324 <__sinit>
 8009a18:	4b89      	ldr	r3, [pc, #548]	; (8009c40 <_vfiprintf_r+0x240>)
 8009a1a:	429d      	cmp	r5, r3
 8009a1c:	d11b      	bne.n	8009a56 <_vfiprintf_r+0x56>
 8009a1e:	6875      	ldr	r5, [r6, #4]
 8009a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a22:	07d9      	lsls	r1, r3, #31
 8009a24:	d405      	bmi.n	8009a32 <_vfiprintf_r+0x32>
 8009a26:	89ab      	ldrh	r3, [r5, #12]
 8009a28:	059a      	lsls	r2, r3, #22
 8009a2a:	d402      	bmi.n	8009a32 <_vfiprintf_r+0x32>
 8009a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a2e:	f7ff f882 	bl	8008b36 <__retarget_lock_acquire_recursive>
 8009a32:	89ab      	ldrh	r3, [r5, #12]
 8009a34:	071b      	lsls	r3, r3, #28
 8009a36:	d501      	bpl.n	8009a3c <_vfiprintf_r+0x3c>
 8009a38:	692b      	ldr	r3, [r5, #16]
 8009a3a:	b9eb      	cbnz	r3, 8009a78 <_vfiprintf_r+0x78>
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f000 f9ee 	bl	8009e20 <__swsetup_r>
 8009a44:	b1c0      	cbz	r0, 8009a78 <_vfiprintf_r+0x78>
 8009a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a48:	07dc      	lsls	r4, r3, #31
 8009a4a:	d50e      	bpl.n	8009a6a <_vfiprintf_r+0x6a>
 8009a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a50:	b01d      	add	sp, #116	; 0x74
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a56:	4b7b      	ldr	r3, [pc, #492]	; (8009c44 <_vfiprintf_r+0x244>)
 8009a58:	429d      	cmp	r5, r3
 8009a5a:	d101      	bne.n	8009a60 <_vfiprintf_r+0x60>
 8009a5c:	68b5      	ldr	r5, [r6, #8]
 8009a5e:	e7df      	b.n	8009a20 <_vfiprintf_r+0x20>
 8009a60:	4b79      	ldr	r3, [pc, #484]	; (8009c48 <_vfiprintf_r+0x248>)
 8009a62:	429d      	cmp	r5, r3
 8009a64:	bf08      	it	eq
 8009a66:	68f5      	ldreq	r5, [r6, #12]
 8009a68:	e7da      	b.n	8009a20 <_vfiprintf_r+0x20>
 8009a6a:	89ab      	ldrh	r3, [r5, #12]
 8009a6c:	0598      	lsls	r0, r3, #22
 8009a6e:	d4ed      	bmi.n	8009a4c <_vfiprintf_r+0x4c>
 8009a70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a72:	f7ff f861 	bl	8008b38 <__retarget_lock_release_recursive>
 8009a76:	e7e9      	b.n	8009a4c <_vfiprintf_r+0x4c>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7c:	2320      	movs	r3, #32
 8009a7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a82:	2330      	movs	r3, #48	; 0x30
 8009a84:	f04f 0901 	mov.w	r9, #1
 8009a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a8c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009c4c <_vfiprintf_r+0x24c>
 8009a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a94:	4623      	mov	r3, r4
 8009a96:	469a      	mov	sl, r3
 8009a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9c:	b10a      	cbz	r2, 8009aa2 <_vfiprintf_r+0xa2>
 8009a9e:	2a25      	cmp	r2, #37	; 0x25
 8009aa0:	d1f9      	bne.n	8009a96 <_vfiprintf_r+0x96>
 8009aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa6:	d00b      	beq.n	8009ac0 <_vfiprintf_r+0xc0>
 8009aa8:	465b      	mov	r3, fp
 8009aaa:	4622      	mov	r2, r4
 8009aac:	4629      	mov	r1, r5
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7ff ff93 	bl	80099da <__sfputs_r>
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	f000 80aa 	beq.w	8009c0e <_vfiprintf_r+0x20e>
 8009aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009abc:	445a      	add	r2, fp
 8009abe:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 80a2 	beq.w	8009c0e <_vfiprintf_r+0x20e>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad4:	f10a 0a01 	add.w	sl, sl, #1
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	9307      	str	r3, [sp, #28]
 8009adc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ae0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ae2:	4654      	mov	r4, sl
 8009ae4:	2205      	movs	r2, #5
 8009ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aea:	4858      	ldr	r0, [pc, #352]	; (8009c4c <_vfiprintf_r+0x24c>)
 8009aec:	f7ff f840 	bl	8008b70 <memchr>
 8009af0:	9a04      	ldr	r2, [sp, #16]
 8009af2:	b9d8      	cbnz	r0, 8009b2c <_vfiprintf_r+0x12c>
 8009af4:	06d1      	lsls	r1, r2, #27
 8009af6:	bf44      	itt	mi
 8009af8:	2320      	movmi	r3, #32
 8009afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009afe:	0713      	lsls	r3, r2, #28
 8009b00:	bf44      	itt	mi
 8009b02:	232b      	movmi	r3, #43	; 0x2b
 8009b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b08:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b0e:	d015      	beq.n	8009b3c <_vfiprintf_r+0x13c>
 8009b10:	4654      	mov	r4, sl
 8009b12:	2000      	movs	r0, #0
 8009b14:	f04f 0c0a 	mov.w	ip, #10
 8009b18:	9a07      	ldr	r2, [sp, #28]
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b20:	3b30      	subs	r3, #48	; 0x30
 8009b22:	2b09      	cmp	r3, #9
 8009b24:	d94e      	bls.n	8009bc4 <_vfiprintf_r+0x1c4>
 8009b26:	b1b0      	cbz	r0, 8009b56 <_vfiprintf_r+0x156>
 8009b28:	9207      	str	r2, [sp, #28]
 8009b2a:	e014      	b.n	8009b56 <_vfiprintf_r+0x156>
 8009b2c:	eba0 0308 	sub.w	r3, r0, r8
 8009b30:	fa09 f303 	lsl.w	r3, r9, r3
 8009b34:	4313      	orrs	r3, r2
 8009b36:	46a2      	mov	sl, r4
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	e7d2      	b.n	8009ae2 <_vfiprintf_r+0xe2>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	1d19      	adds	r1, r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	9103      	str	r1, [sp, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	bfbb      	ittet	lt
 8009b48:	425b      	neglt	r3, r3
 8009b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b4e:	9307      	strge	r3, [sp, #28]
 8009b50:	9307      	strlt	r3, [sp, #28]
 8009b52:	bfb8      	it	lt
 8009b54:	9204      	strlt	r2, [sp, #16]
 8009b56:	7823      	ldrb	r3, [r4, #0]
 8009b58:	2b2e      	cmp	r3, #46	; 0x2e
 8009b5a:	d10c      	bne.n	8009b76 <_vfiprintf_r+0x176>
 8009b5c:	7863      	ldrb	r3, [r4, #1]
 8009b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b60:	d135      	bne.n	8009bce <_vfiprintf_r+0x1ce>
 8009b62:	9b03      	ldr	r3, [sp, #12]
 8009b64:	3402      	adds	r4, #2
 8009b66:	1d1a      	adds	r2, r3, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	9203      	str	r2, [sp, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfb8      	it	lt
 8009b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b74:	9305      	str	r3, [sp, #20]
 8009b76:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009c50 <_vfiprintf_r+0x250>
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	7821      	ldrb	r1, [r4, #0]
 8009b80:	f7fe fff6 	bl	8008b70 <memchr>
 8009b84:	b140      	cbz	r0, 8009b98 <_vfiprintf_r+0x198>
 8009b86:	2340      	movs	r3, #64	; 0x40
 8009b88:	eba0 000a 	sub.w	r0, r0, sl
 8009b8c:	fa03 f000 	lsl.w	r0, r3, r0
 8009b90:	9b04      	ldr	r3, [sp, #16]
 8009b92:	3401      	adds	r4, #1
 8009b94:	4303      	orrs	r3, r0
 8009b96:	9304      	str	r3, [sp, #16]
 8009b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9c:	2206      	movs	r2, #6
 8009b9e:	482d      	ldr	r0, [pc, #180]	; (8009c54 <_vfiprintf_r+0x254>)
 8009ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ba4:	f7fe ffe4 	bl	8008b70 <memchr>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d03f      	beq.n	8009c2c <_vfiprintf_r+0x22c>
 8009bac:	4b2a      	ldr	r3, [pc, #168]	; (8009c58 <_vfiprintf_r+0x258>)
 8009bae:	bb1b      	cbnz	r3, 8009bf8 <_vfiprintf_r+0x1f8>
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	3307      	adds	r3, #7
 8009bb4:	f023 0307 	bic.w	r3, r3, #7
 8009bb8:	3308      	adds	r3, #8
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bbe:	443b      	add	r3, r7
 8009bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc2:	e767      	b.n	8009a94 <_vfiprintf_r+0x94>
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bcc:	e7a5      	b.n	8009b1a <_vfiprintf_r+0x11a>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f04f 0c0a 	mov.w	ip, #10
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	3401      	adds	r4, #1
 8009bd8:	9305      	str	r3, [sp, #20]
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be0:	3a30      	subs	r2, #48	; 0x30
 8009be2:	2a09      	cmp	r2, #9
 8009be4:	d903      	bls.n	8009bee <_vfiprintf_r+0x1ee>
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0c5      	beq.n	8009b76 <_vfiprintf_r+0x176>
 8009bea:	9105      	str	r1, [sp, #20]
 8009bec:	e7c3      	b.n	8009b76 <_vfiprintf_r+0x176>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf6:	e7f0      	b.n	8009bda <_vfiprintf_r+0x1da>
 8009bf8:	ab03      	add	r3, sp, #12
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4b16      	ldr	r3, [pc, #88]	; (8009c5c <_vfiprintf_r+0x25c>)
 8009c02:	a904      	add	r1, sp, #16
 8009c04:	f7fc f822 	bl	8005c4c <_printf_float>
 8009c08:	4607      	mov	r7, r0
 8009c0a:	1c78      	adds	r0, r7, #1
 8009c0c:	d1d6      	bne.n	8009bbc <_vfiprintf_r+0x1bc>
 8009c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c10:	07d9      	lsls	r1, r3, #31
 8009c12:	d405      	bmi.n	8009c20 <_vfiprintf_r+0x220>
 8009c14:	89ab      	ldrh	r3, [r5, #12]
 8009c16:	059a      	lsls	r2, r3, #22
 8009c18:	d402      	bmi.n	8009c20 <_vfiprintf_r+0x220>
 8009c1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c1c:	f7fe ff8c 	bl	8008b38 <__retarget_lock_release_recursive>
 8009c20:	89ab      	ldrh	r3, [r5, #12]
 8009c22:	065b      	lsls	r3, r3, #25
 8009c24:	f53f af12 	bmi.w	8009a4c <_vfiprintf_r+0x4c>
 8009c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c2a:	e711      	b.n	8009a50 <_vfiprintf_r+0x50>
 8009c2c:	ab03      	add	r3, sp, #12
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	462a      	mov	r2, r5
 8009c32:	4630      	mov	r0, r6
 8009c34:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <_vfiprintf_r+0x25c>)
 8009c36:	a904      	add	r1, sp, #16
 8009c38:	f7fc faa4 	bl	8006184 <_printf_i>
 8009c3c:	e7e4      	b.n	8009c08 <_vfiprintf_r+0x208>
 8009c3e:	bf00      	nop
 8009c40:	0800be44 	.word	0x0800be44
 8009c44:	0800be64 	.word	0x0800be64
 8009c48:	0800be24 	.word	0x0800be24
 8009c4c:	0800c05c 	.word	0x0800c05c
 8009c50:	0800c062 	.word	0x0800c062
 8009c54:	0800c066 	.word	0x0800c066
 8009c58:	08005c4d 	.word	0x08005c4d
 8009c5c:	080099db 	.word	0x080099db

08009c60 <nan>:
 8009c60:	2000      	movs	r0, #0
 8009c62:	4901      	ldr	r1, [pc, #4]	; (8009c68 <nan+0x8>)
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	7ff80000 	.word	0x7ff80000

08009c6c <_sbrk_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	2300      	movs	r3, #0
 8009c70:	4d05      	ldr	r5, [pc, #20]	; (8009c88 <_sbrk_r+0x1c>)
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	f7f7 fb2c 	bl	80012d4 <_sbrk>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_sbrk_r+0x1a>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_sbrk_r+0x1a>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	200002bc 	.word	0x200002bc

08009c8c <__sread>:
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	460c      	mov	r4, r1
 8009c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c94:	f000 fafe 	bl	800a294 <_read_r>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	bfab      	itete	ge
 8009c9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8009ca0:	181b      	addge	r3, r3, r0
 8009ca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ca6:	bfac      	ite	ge
 8009ca8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009caa:	81a3      	strhlt	r3, [r4, #12]
 8009cac:	bd10      	pop	{r4, pc}

08009cae <__swrite>:
 8009cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb2:	461f      	mov	r7, r3
 8009cb4:	898b      	ldrh	r3, [r1, #12]
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	05db      	lsls	r3, r3, #23
 8009cba:	460c      	mov	r4, r1
 8009cbc:	4616      	mov	r6, r2
 8009cbe:	d505      	bpl.n	8009ccc <__swrite+0x1e>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	f000 fa16 	bl	800a0f8 <_lseek_r>
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	4632      	mov	r2, r6
 8009cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	463b      	mov	r3, r7
 8009cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce2:	f000 b88b 	b.w	8009dfc <_write_r>

08009ce6 <__sseek>:
 8009ce6:	b510      	push	{r4, lr}
 8009ce8:	460c      	mov	r4, r1
 8009cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cee:	f000 fa03 	bl	800a0f8 <_lseek_r>
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	bf15      	itete	ne
 8009cf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d02:	81a3      	strheq	r3, [r4, #12]
 8009d04:	bf18      	it	ne
 8009d06:	81a3      	strhne	r3, [r4, #12]
 8009d08:	bd10      	pop	{r4, pc}

08009d0a <__sclose>:
 8009d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d0e:	f000 b913 	b.w	8009f38 <_close_r>

08009d12 <strncmp>:
 8009d12:	4603      	mov	r3, r0
 8009d14:	b510      	push	{r4, lr}
 8009d16:	b172      	cbz	r2, 8009d36 <strncmp+0x24>
 8009d18:	3901      	subs	r1, #1
 8009d1a:	1884      	adds	r4, r0, r2
 8009d1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d24:	4290      	cmp	r0, r2
 8009d26:	d101      	bne.n	8009d2c <strncmp+0x1a>
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	d101      	bne.n	8009d30 <strncmp+0x1e>
 8009d2c:	1a80      	subs	r0, r0, r2
 8009d2e:	bd10      	pop	{r4, pc}
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d1f3      	bne.n	8009d1c <strncmp+0xa>
 8009d34:	e7fa      	b.n	8009d2c <strncmp+0x1a>
 8009d36:	4610      	mov	r0, r2
 8009d38:	e7f9      	b.n	8009d2e <strncmp+0x1c>
	...

08009d3c <__swbuf_r>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	460e      	mov	r6, r1
 8009d40:	4614      	mov	r4, r2
 8009d42:	4605      	mov	r5, r0
 8009d44:	b118      	cbz	r0, 8009d4e <__swbuf_r+0x12>
 8009d46:	6983      	ldr	r3, [r0, #24]
 8009d48:	b90b      	cbnz	r3, 8009d4e <__swbuf_r+0x12>
 8009d4a:	f7fe faeb 	bl	8008324 <__sinit>
 8009d4e:	4b21      	ldr	r3, [pc, #132]	; (8009dd4 <__swbuf_r+0x98>)
 8009d50:	429c      	cmp	r4, r3
 8009d52:	d12b      	bne.n	8009dac <__swbuf_r+0x70>
 8009d54:	686c      	ldr	r4, [r5, #4]
 8009d56:	69a3      	ldr	r3, [r4, #24]
 8009d58:	60a3      	str	r3, [r4, #8]
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	071a      	lsls	r2, r3, #28
 8009d5e:	d52f      	bpl.n	8009dc0 <__swbuf_r+0x84>
 8009d60:	6923      	ldr	r3, [r4, #16]
 8009d62:	b36b      	cbz	r3, 8009dc0 <__swbuf_r+0x84>
 8009d64:	6923      	ldr	r3, [r4, #16]
 8009d66:	6820      	ldr	r0, [r4, #0]
 8009d68:	b2f6      	uxtb	r6, r6
 8009d6a:	1ac0      	subs	r0, r0, r3
 8009d6c:	6963      	ldr	r3, [r4, #20]
 8009d6e:	4637      	mov	r7, r6
 8009d70:	4283      	cmp	r3, r0
 8009d72:	dc04      	bgt.n	8009d7e <__swbuf_r+0x42>
 8009d74:	4621      	mov	r1, r4
 8009d76:	4628      	mov	r0, r5
 8009d78:	f000 f970 	bl	800a05c <_fflush_r>
 8009d7c:	bb30      	cbnz	r0, 8009dcc <__swbuf_r+0x90>
 8009d7e:	68a3      	ldr	r3, [r4, #8]
 8009d80:	3001      	adds	r0, #1
 8009d82:	3b01      	subs	r3, #1
 8009d84:	60a3      	str	r3, [r4, #8]
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	6022      	str	r2, [r4, #0]
 8009d8c:	701e      	strb	r6, [r3, #0]
 8009d8e:	6963      	ldr	r3, [r4, #20]
 8009d90:	4283      	cmp	r3, r0
 8009d92:	d004      	beq.n	8009d9e <__swbuf_r+0x62>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	07db      	lsls	r3, r3, #31
 8009d98:	d506      	bpl.n	8009da8 <__swbuf_r+0x6c>
 8009d9a:	2e0a      	cmp	r6, #10
 8009d9c:	d104      	bne.n	8009da8 <__swbuf_r+0x6c>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 f95b 	bl	800a05c <_fflush_r>
 8009da6:	b988      	cbnz	r0, 8009dcc <__swbuf_r+0x90>
 8009da8:	4638      	mov	r0, r7
 8009daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dac:	4b0a      	ldr	r3, [pc, #40]	; (8009dd8 <__swbuf_r+0x9c>)
 8009dae:	429c      	cmp	r4, r3
 8009db0:	d101      	bne.n	8009db6 <__swbuf_r+0x7a>
 8009db2:	68ac      	ldr	r4, [r5, #8]
 8009db4:	e7cf      	b.n	8009d56 <__swbuf_r+0x1a>
 8009db6:	4b09      	ldr	r3, [pc, #36]	; (8009ddc <__swbuf_r+0xa0>)
 8009db8:	429c      	cmp	r4, r3
 8009dba:	bf08      	it	eq
 8009dbc:	68ec      	ldreq	r4, [r5, #12]
 8009dbe:	e7ca      	b.n	8009d56 <__swbuf_r+0x1a>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 f82c 	bl	8009e20 <__swsetup_r>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d0cb      	beq.n	8009d64 <__swbuf_r+0x28>
 8009dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8009dd0:	e7ea      	b.n	8009da8 <__swbuf_r+0x6c>
 8009dd2:	bf00      	nop
 8009dd4:	0800be44 	.word	0x0800be44
 8009dd8:	0800be64 	.word	0x0800be64
 8009ddc:	0800be24 	.word	0x0800be24

08009de0 <__ascii_wctomb>:
 8009de0:	4603      	mov	r3, r0
 8009de2:	4608      	mov	r0, r1
 8009de4:	b141      	cbz	r1, 8009df8 <__ascii_wctomb+0x18>
 8009de6:	2aff      	cmp	r2, #255	; 0xff
 8009de8:	d904      	bls.n	8009df4 <__ascii_wctomb+0x14>
 8009dea:	228a      	movs	r2, #138	; 0x8a
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	4770      	bx	lr
 8009df4:	2001      	movs	r0, #1
 8009df6:	700a      	strb	r2, [r1, #0]
 8009df8:	4770      	bx	lr
	...

08009dfc <_write_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	4611      	mov	r1, r2
 8009e04:	2200      	movs	r2, #0
 8009e06:	4d05      	ldr	r5, [pc, #20]	; (8009e1c <_write_r+0x20>)
 8009e08:	602a      	str	r2, [r5, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f7f7 fa16 	bl	800123c <_write>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_write_r+0x1e>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_write_r+0x1e>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	200002bc 	.word	0x200002bc

08009e20 <__swsetup_r>:
 8009e20:	4b32      	ldr	r3, [pc, #200]	; (8009eec <__swsetup_r+0xcc>)
 8009e22:	b570      	push	{r4, r5, r6, lr}
 8009e24:	681d      	ldr	r5, [r3, #0]
 8009e26:	4606      	mov	r6, r0
 8009e28:	460c      	mov	r4, r1
 8009e2a:	b125      	cbz	r5, 8009e36 <__swsetup_r+0x16>
 8009e2c:	69ab      	ldr	r3, [r5, #24]
 8009e2e:	b913      	cbnz	r3, 8009e36 <__swsetup_r+0x16>
 8009e30:	4628      	mov	r0, r5
 8009e32:	f7fe fa77 	bl	8008324 <__sinit>
 8009e36:	4b2e      	ldr	r3, [pc, #184]	; (8009ef0 <__swsetup_r+0xd0>)
 8009e38:	429c      	cmp	r4, r3
 8009e3a:	d10f      	bne.n	8009e5c <__swsetup_r+0x3c>
 8009e3c:	686c      	ldr	r4, [r5, #4]
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e44:	0719      	lsls	r1, r3, #28
 8009e46:	d42c      	bmi.n	8009ea2 <__swsetup_r+0x82>
 8009e48:	06dd      	lsls	r5, r3, #27
 8009e4a:	d411      	bmi.n	8009e70 <__swsetup_r+0x50>
 8009e4c:	2309      	movs	r3, #9
 8009e4e:	6033      	str	r3, [r6, #0]
 8009e50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	81a3      	strh	r3, [r4, #12]
 8009e5a:	e03e      	b.n	8009eda <__swsetup_r+0xba>
 8009e5c:	4b25      	ldr	r3, [pc, #148]	; (8009ef4 <__swsetup_r+0xd4>)
 8009e5e:	429c      	cmp	r4, r3
 8009e60:	d101      	bne.n	8009e66 <__swsetup_r+0x46>
 8009e62:	68ac      	ldr	r4, [r5, #8]
 8009e64:	e7eb      	b.n	8009e3e <__swsetup_r+0x1e>
 8009e66:	4b24      	ldr	r3, [pc, #144]	; (8009ef8 <__swsetup_r+0xd8>)
 8009e68:	429c      	cmp	r4, r3
 8009e6a:	bf08      	it	eq
 8009e6c:	68ec      	ldreq	r4, [r5, #12]
 8009e6e:	e7e6      	b.n	8009e3e <__swsetup_r+0x1e>
 8009e70:	0758      	lsls	r0, r3, #29
 8009e72:	d512      	bpl.n	8009e9a <__swsetup_r+0x7a>
 8009e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e76:	b141      	cbz	r1, 8009e8a <__swsetup_r+0x6a>
 8009e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e7c:	4299      	cmp	r1, r3
 8009e7e:	d002      	beq.n	8009e86 <__swsetup_r+0x66>
 8009e80:	4630      	mov	r0, r6
 8009e82:	f7ff fb5d 	bl	8009540 <_free_r>
 8009e86:	2300      	movs	r3, #0
 8009e88:	6363      	str	r3, [r4, #52]	; 0x34
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e90:	81a3      	strh	r3, [r4, #12]
 8009e92:	2300      	movs	r3, #0
 8009e94:	6063      	str	r3, [r4, #4]
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	f043 0308 	orr.w	r3, r3, #8
 8009ea0:	81a3      	strh	r3, [r4, #12]
 8009ea2:	6923      	ldr	r3, [r4, #16]
 8009ea4:	b94b      	cbnz	r3, 8009eba <__swsetup_r+0x9a>
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eb0:	d003      	beq.n	8009eba <__swsetup_r+0x9a>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f000 f957 	bl	800a168 <__smakebuf_r>
 8009eba:	89a0      	ldrh	r0, [r4, #12]
 8009ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ec0:	f010 0301 	ands.w	r3, r0, #1
 8009ec4:	d00a      	beq.n	8009edc <__swsetup_r+0xbc>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60a3      	str	r3, [r4, #8]
 8009eca:	6963      	ldr	r3, [r4, #20]
 8009ecc:	425b      	negs	r3, r3
 8009ece:	61a3      	str	r3, [r4, #24]
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	b943      	cbnz	r3, 8009ee6 <__swsetup_r+0xc6>
 8009ed4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ed8:	d1ba      	bne.n	8009e50 <__swsetup_r+0x30>
 8009eda:	bd70      	pop	{r4, r5, r6, pc}
 8009edc:	0781      	lsls	r1, r0, #30
 8009ede:	bf58      	it	pl
 8009ee0:	6963      	ldrpl	r3, [r4, #20]
 8009ee2:	60a3      	str	r3, [r4, #8]
 8009ee4:	e7f4      	b.n	8009ed0 <__swsetup_r+0xb0>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	e7f7      	b.n	8009eda <__swsetup_r+0xba>
 8009eea:	bf00      	nop
 8009eec:	20000014 	.word	0x20000014
 8009ef0:	0800be44 	.word	0x0800be44
 8009ef4:	0800be64 	.word	0x0800be64
 8009ef8:	0800be24 	.word	0x0800be24

08009efc <__assert_func>:
 8009efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009efe:	4614      	mov	r4, r2
 8009f00:	461a      	mov	r2, r3
 8009f02:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <__assert_func+0x2c>)
 8009f04:	4605      	mov	r5, r0
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68d8      	ldr	r0, [r3, #12]
 8009f0a:	b14c      	cbz	r4, 8009f20 <__assert_func+0x24>
 8009f0c:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <__assert_func+0x30>)
 8009f0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f12:	9100      	str	r1, [sp, #0]
 8009f14:	462b      	mov	r3, r5
 8009f16:	4906      	ldr	r1, [pc, #24]	; (8009f30 <__assert_func+0x34>)
 8009f18:	f000 f8dc 	bl	800a0d4 <fiprintf>
 8009f1c:	f000 f9cc 	bl	800a2b8 <abort>
 8009f20:	4b04      	ldr	r3, [pc, #16]	; (8009f34 <__assert_func+0x38>)
 8009f22:	461c      	mov	r4, r3
 8009f24:	e7f3      	b.n	8009f0e <__assert_func+0x12>
 8009f26:	bf00      	nop
 8009f28:	20000014 	.word	0x20000014
 8009f2c:	0800c06d 	.word	0x0800c06d
 8009f30:	0800c07a 	.word	0x0800c07a
 8009f34:	0800c0a8 	.word	0x0800c0a8

08009f38 <_close_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4d05      	ldr	r5, [pc, #20]	; (8009f54 <_close_r+0x1c>)
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	602b      	str	r3, [r5, #0]
 8009f44:	f7f7 f996 	bl	8001274 <_close>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_close_r+0x1a>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_close_r+0x1a>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	200002bc 	.word	0x200002bc

08009f58 <__sflush_r>:
 8009f58:	898a      	ldrh	r2, [r1, #12]
 8009f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	0710      	lsls	r0, r2, #28
 8009f60:	460c      	mov	r4, r1
 8009f62:	d457      	bmi.n	800a014 <__sflush_r+0xbc>
 8009f64:	684b      	ldr	r3, [r1, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dc04      	bgt.n	8009f74 <__sflush_r+0x1c>
 8009f6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dc01      	bgt.n	8009f74 <__sflush_r+0x1c>
 8009f70:	2000      	movs	r0, #0
 8009f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f76:	2e00      	cmp	r6, #0
 8009f78:	d0fa      	beq.n	8009f70 <__sflush_r+0x18>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f80:	682f      	ldr	r7, [r5, #0]
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	d032      	beq.n	8009fec <__sflush_r+0x94>
 8009f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	075a      	lsls	r2, r3, #29
 8009f8c:	d505      	bpl.n	8009f9a <__sflush_r+0x42>
 8009f8e:	6863      	ldr	r3, [r4, #4]
 8009f90:	1ac0      	subs	r0, r0, r3
 8009f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f94:	b10b      	cbz	r3, 8009f9a <__sflush_r+0x42>
 8009f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f98:	1ac0      	subs	r0, r0, r3
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	6a21      	ldr	r1, [r4, #32]
 8009fa4:	47b0      	blx	r6
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	d106      	bne.n	8009fba <__sflush_r+0x62>
 8009fac:	6829      	ldr	r1, [r5, #0]
 8009fae:	291d      	cmp	r1, #29
 8009fb0:	d82c      	bhi.n	800a00c <__sflush_r+0xb4>
 8009fb2:	4a29      	ldr	r2, [pc, #164]	; (800a058 <__sflush_r+0x100>)
 8009fb4:	40ca      	lsrs	r2, r1
 8009fb6:	07d6      	lsls	r6, r2, #31
 8009fb8:	d528      	bpl.n	800a00c <__sflush_r+0xb4>
 8009fba:	2200      	movs	r2, #0
 8009fbc:	6062      	str	r2, [r4, #4]
 8009fbe:	6922      	ldr	r2, [r4, #16]
 8009fc0:	04d9      	lsls	r1, r3, #19
 8009fc2:	6022      	str	r2, [r4, #0]
 8009fc4:	d504      	bpl.n	8009fd0 <__sflush_r+0x78>
 8009fc6:	1c42      	adds	r2, r0, #1
 8009fc8:	d101      	bne.n	8009fce <__sflush_r+0x76>
 8009fca:	682b      	ldr	r3, [r5, #0]
 8009fcc:	b903      	cbnz	r3, 8009fd0 <__sflush_r+0x78>
 8009fce:	6560      	str	r0, [r4, #84]	; 0x54
 8009fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fd2:	602f      	str	r7, [r5, #0]
 8009fd4:	2900      	cmp	r1, #0
 8009fd6:	d0cb      	beq.n	8009f70 <__sflush_r+0x18>
 8009fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fdc:	4299      	cmp	r1, r3
 8009fde:	d002      	beq.n	8009fe6 <__sflush_r+0x8e>
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f7ff faad 	bl	8009540 <_free_r>
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8009fea:	e7c2      	b.n	8009f72 <__sflush_r+0x1a>
 8009fec:	6a21      	ldr	r1, [r4, #32]
 8009fee:	2301      	movs	r3, #1
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	47b0      	blx	r6
 8009ff4:	1c41      	adds	r1, r0, #1
 8009ff6:	d1c7      	bne.n	8009f88 <__sflush_r+0x30>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0c4      	beq.n	8009f88 <__sflush_r+0x30>
 8009ffe:	2b1d      	cmp	r3, #29
 800a000:	d001      	beq.n	800a006 <__sflush_r+0xae>
 800a002:	2b16      	cmp	r3, #22
 800a004:	d101      	bne.n	800a00a <__sflush_r+0xb2>
 800a006:	602f      	str	r7, [r5, #0]
 800a008:	e7b2      	b.n	8009f70 <__sflush_r+0x18>
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	e7ae      	b.n	8009f72 <__sflush_r+0x1a>
 800a014:	690f      	ldr	r7, [r1, #16]
 800a016:	2f00      	cmp	r7, #0
 800a018:	d0aa      	beq.n	8009f70 <__sflush_r+0x18>
 800a01a:	0793      	lsls	r3, r2, #30
 800a01c:	bf18      	it	ne
 800a01e:	2300      	movne	r3, #0
 800a020:	680e      	ldr	r6, [r1, #0]
 800a022:	bf08      	it	eq
 800a024:	694b      	ldreq	r3, [r1, #20]
 800a026:	1bf6      	subs	r6, r6, r7
 800a028:	600f      	str	r7, [r1, #0]
 800a02a:	608b      	str	r3, [r1, #8]
 800a02c:	2e00      	cmp	r6, #0
 800a02e:	dd9f      	ble.n	8009f70 <__sflush_r+0x18>
 800a030:	4633      	mov	r3, r6
 800a032:	463a      	mov	r2, r7
 800a034:	4628      	mov	r0, r5
 800a036:	6a21      	ldr	r1, [r4, #32]
 800a038:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a03c:	47e0      	blx	ip
 800a03e:	2800      	cmp	r0, #0
 800a040:	dc06      	bgt.n	800a050 <__sflush_r+0xf8>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f04f 30ff 	mov.w	r0, #4294967295
 800a048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a04c:	81a3      	strh	r3, [r4, #12]
 800a04e:	e790      	b.n	8009f72 <__sflush_r+0x1a>
 800a050:	4407      	add	r7, r0
 800a052:	1a36      	subs	r6, r6, r0
 800a054:	e7ea      	b.n	800a02c <__sflush_r+0xd4>
 800a056:	bf00      	nop
 800a058:	20400001 	.word	0x20400001

0800a05c <_fflush_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	690b      	ldr	r3, [r1, #16]
 800a060:	4605      	mov	r5, r0
 800a062:	460c      	mov	r4, r1
 800a064:	b913      	cbnz	r3, 800a06c <_fflush_r+0x10>
 800a066:	2500      	movs	r5, #0
 800a068:	4628      	mov	r0, r5
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	b118      	cbz	r0, 800a076 <_fflush_r+0x1a>
 800a06e:	6983      	ldr	r3, [r0, #24]
 800a070:	b90b      	cbnz	r3, 800a076 <_fflush_r+0x1a>
 800a072:	f7fe f957 	bl	8008324 <__sinit>
 800a076:	4b14      	ldr	r3, [pc, #80]	; (800a0c8 <_fflush_r+0x6c>)
 800a078:	429c      	cmp	r4, r3
 800a07a:	d11b      	bne.n	800a0b4 <_fflush_r+0x58>
 800a07c:	686c      	ldr	r4, [r5, #4]
 800a07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0ef      	beq.n	800a066 <_fflush_r+0xa>
 800a086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a088:	07d0      	lsls	r0, r2, #31
 800a08a:	d404      	bmi.n	800a096 <_fflush_r+0x3a>
 800a08c:	0599      	lsls	r1, r3, #22
 800a08e:	d402      	bmi.n	800a096 <_fflush_r+0x3a>
 800a090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a092:	f7fe fd50 	bl	8008b36 <__retarget_lock_acquire_recursive>
 800a096:	4628      	mov	r0, r5
 800a098:	4621      	mov	r1, r4
 800a09a:	f7ff ff5d 	bl	8009f58 <__sflush_r>
 800a09e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	07da      	lsls	r2, r3, #31
 800a0a4:	d4e0      	bmi.n	800a068 <_fflush_r+0xc>
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	059b      	lsls	r3, r3, #22
 800a0aa:	d4dd      	bmi.n	800a068 <_fflush_r+0xc>
 800a0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ae:	f7fe fd43 	bl	8008b38 <__retarget_lock_release_recursive>
 800a0b2:	e7d9      	b.n	800a068 <_fflush_r+0xc>
 800a0b4:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <_fflush_r+0x70>)
 800a0b6:	429c      	cmp	r4, r3
 800a0b8:	d101      	bne.n	800a0be <_fflush_r+0x62>
 800a0ba:	68ac      	ldr	r4, [r5, #8]
 800a0bc:	e7df      	b.n	800a07e <_fflush_r+0x22>
 800a0be:	4b04      	ldr	r3, [pc, #16]	; (800a0d0 <_fflush_r+0x74>)
 800a0c0:	429c      	cmp	r4, r3
 800a0c2:	bf08      	it	eq
 800a0c4:	68ec      	ldreq	r4, [r5, #12]
 800a0c6:	e7da      	b.n	800a07e <_fflush_r+0x22>
 800a0c8:	0800be44 	.word	0x0800be44
 800a0cc:	0800be64 	.word	0x0800be64
 800a0d0:	0800be24 	.word	0x0800be24

0800a0d4 <fiprintf>:
 800a0d4:	b40e      	push	{r1, r2, r3}
 800a0d6:	b503      	push	{r0, r1, lr}
 800a0d8:	4601      	mov	r1, r0
 800a0da:	ab03      	add	r3, sp, #12
 800a0dc:	4805      	ldr	r0, [pc, #20]	; (800a0f4 <fiprintf+0x20>)
 800a0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0e2:	6800      	ldr	r0, [r0, #0]
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	f7ff fc8b 	bl	8009a00 <_vfiprintf_r>
 800a0ea:	b002      	add	sp, #8
 800a0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0f0:	b003      	add	sp, #12
 800a0f2:	4770      	bx	lr
 800a0f4:	20000014 	.word	0x20000014

0800a0f8 <_lseek_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	4611      	mov	r1, r2
 800a100:	2200      	movs	r2, #0
 800a102:	4d05      	ldr	r5, [pc, #20]	; (800a118 <_lseek_r+0x20>)
 800a104:	602a      	str	r2, [r5, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	f7f7 f8d8 	bl	80012bc <_lseek>
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	d102      	bne.n	800a116 <_lseek_r+0x1e>
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	b103      	cbz	r3, 800a116 <_lseek_r+0x1e>
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	200002bc 	.word	0x200002bc

0800a11c <__swhatbuf_r>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	460e      	mov	r6, r1
 800a120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a124:	4614      	mov	r4, r2
 800a126:	2900      	cmp	r1, #0
 800a128:	461d      	mov	r5, r3
 800a12a:	b096      	sub	sp, #88	; 0x58
 800a12c:	da08      	bge.n	800a140 <__swhatbuf_r+0x24>
 800a12e:	2200      	movs	r2, #0
 800a130:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a134:	602a      	str	r2, [r5, #0]
 800a136:	061a      	lsls	r2, r3, #24
 800a138:	d410      	bmi.n	800a15c <__swhatbuf_r+0x40>
 800a13a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a13e:	e00e      	b.n	800a15e <__swhatbuf_r+0x42>
 800a140:	466a      	mov	r2, sp
 800a142:	f000 f8c1 	bl	800a2c8 <_fstat_r>
 800a146:	2800      	cmp	r0, #0
 800a148:	dbf1      	blt.n	800a12e <__swhatbuf_r+0x12>
 800a14a:	9a01      	ldr	r2, [sp, #4]
 800a14c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a150:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a154:	425a      	negs	r2, r3
 800a156:	415a      	adcs	r2, r3
 800a158:	602a      	str	r2, [r5, #0]
 800a15a:	e7ee      	b.n	800a13a <__swhatbuf_r+0x1e>
 800a15c:	2340      	movs	r3, #64	; 0x40
 800a15e:	2000      	movs	r0, #0
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	b016      	add	sp, #88	; 0x58
 800a164:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a168 <__smakebuf_r>:
 800a168:	898b      	ldrh	r3, [r1, #12]
 800a16a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a16c:	079d      	lsls	r5, r3, #30
 800a16e:	4606      	mov	r6, r0
 800a170:	460c      	mov	r4, r1
 800a172:	d507      	bpl.n	800a184 <__smakebuf_r+0x1c>
 800a174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	2301      	movs	r3, #1
 800a17e:	6163      	str	r3, [r4, #20]
 800a180:	b002      	add	sp, #8
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	466a      	mov	r2, sp
 800a186:	ab01      	add	r3, sp, #4
 800a188:	f7ff ffc8 	bl	800a11c <__swhatbuf_r>
 800a18c:	9900      	ldr	r1, [sp, #0]
 800a18e:	4605      	mov	r5, r0
 800a190:	4630      	mov	r0, r6
 800a192:	f7ff fa3d 	bl	8009610 <_malloc_r>
 800a196:	b948      	cbnz	r0, 800a1ac <__smakebuf_r+0x44>
 800a198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19c:	059a      	lsls	r2, r3, #22
 800a19e:	d4ef      	bmi.n	800a180 <__smakebuf_r+0x18>
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	f043 0302 	orr.w	r3, r3, #2
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	e7e3      	b.n	800a174 <__smakebuf_r+0xc>
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <__smakebuf_r+0x7c>)
 800a1ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	6020      	str	r0, [r4, #0]
 800a1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	9b00      	ldr	r3, [sp, #0]
 800a1bc:	6120      	str	r0, [r4, #16]
 800a1be:	6163      	str	r3, [r4, #20]
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	b15b      	cbz	r3, 800a1dc <__smakebuf_r+0x74>
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ca:	f000 f88f 	bl	800a2ec <_isatty_r>
 800a1ce:	b128      	cbz	r0, 800a1dc <__smakebuf_r+0x74>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f023 0303 	bic.w	r3, r3, #3
 800a1d6:	f043 0301 	orr.w	r3, r3, #1
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	89a0      	ldrh	r0, [r4, #12]
 800a1de:	4305      	orrs	r5, r0
 800a1e0:	81a5      	strh	r5, [r4, #12]
 800a1e2:	e7cd      	b.n	800a180 <__smakebuf_r+0x18>
 800a1e4:	080082bd 	.word	0x080082bd

0800a1e8 <memmove>:
 800a1e8:	4288      	cmp	r0, r1
 800a1ea:	b510      	push	{r4, lr}
 800a1ec:	eb01 0402 	add.w	r4, r1, r2
 800a1f0:	d902      	bls.n	800a1f8 <memmove+0x10>
 800a1f2:	4284      	cmp	r4, r0
 800a1f4:	4623      	mov	r3, r4
 800a1f6:	d807      	bhi.n	800a208 <memmove+0x20>
 800a1f8:	1e43      	subs	r3, r0, #1
 800a1fa:	42a1      	cmp	r1, r4
 800a1fc:	d008      	beq.n	800a210 <memmove+0x28>
 800a1fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a202:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a206:	e7f8      	b.n	800a1fa <memmove+0x12>
 800a208:	4601      	mov	r1, r0
 800a20a:	4402      	add	r2, r0
 800a20c:	428a      	cmp	r2, r1
 800a20e:	d100      	bne.n	800a212 <memmove+0x2a>
 800a210:	bd10      	pop	{r4, pc}
 800a212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a21a:	e7f7      	b.n	800a20c <memmove+0x24>

0800a21c <__malloc_lock>:
 800a21c:	4801      	ldr	r0, [pc, #4]	; (800a224 <__malloc_lock+0x8>)
 800a21e:	f7fe bc8a 	b.w	8008b36 <__retarget_lock_acquire_recursive>
 800a222:	bf00      	nop
 800a224:	200002ae 	.word	0x200002ae

0800a228 <__malloc_unlock>:
 800a228:	4801      	ldr	r0, [pc, #4]	; (800a230 <__malloc_unlock+0x8>)
 800a22a:	f7fe bc85 	b.w	8008b38 <__retarget_lock_release_recursive>
 800a22e:	bf00      	nop
 800a230:	200002ae 	.word	0x200002ae

0800a234 <_realloc_r>:
 800a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a238:	4680      	mov	r8, r0
 800a23a:	4614      	mov	r4, r2
 800a23c:	460e      	mov	r6, r1
 800a23e:	b921      	cbnz	r1, 800a24a <_realloc_r+0x16>
 800a240:	4611      	mov	r1, r2
 800a242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a246:	f7ff b9e3 	b.w	8009610 <_malloc_r>
 800a24a:	b92a      	cbnz	r2, 800a258 <_realloc_r+0x24>
 800a24c:	f7ff f978 	bl	8009540 <_free_r>
 800a250:	4625      	mov	r5, r4
 800a252:	4628      	mov	r0, r5
 800a254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a258:	f000 f858 	bl	800a30c <_malloc_usable_size_r>
 800a25c:	4284      	cmp	r4, r0
 800a25e:	4607      	mov	r7, r0
 800a260:	d802      	bhi.n	800a268 <_realloc_r+0x34>
 800a262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a266:	d812      	bhi.n	800a28e <_realloc_r+0x5a>
 800a268:	4621      	mov	r1, r4
 800a26a:	4640      	mov	r0, r8
 800a26c:	f7ff f9d0 	bl	8009610 <_malloc_r>
 800a270:	4605      	mov	r5, r0
 800a272:	2800      	cmp	r0, #0
 800a274:	d0ed      	beq.n	800a252 <_realloc_r+0x1e>
 800a276:	42bc      	cmp	r4, r7
 800a278:	4622      	mov	r2, r4
 800a27a:	4631      	mov	r1, r6
 800a27c:	bf28      	it	cs
 800a27e:	463a      	movcs	r2, r7
 800a280:	f7fe fc84 	bl	8008b8c <memcpy>
 800a284:	4631      	mov	r1, r6
 800a286:	4640      	mov	r0, r8
 800a288:	f7ff f95a 	bl	8009540 <_free_r>
 800a28c:	e7e1      	b.n	800a252 <_realloc_r+0x1e>
 800a28e:	4635      	mov	r5, r6
 800a290:	e7df      	b.n	800a252 <_realloc_r+0x1e>
	...

0800a294 <_read_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	4611      	mov	r1, r2
 800a29c:	2200      	movs	r2, #0
 800a29e:	4d05      	ldr	r5, [pc, #20]	; (800a2b4 <_read_r+0x20>)
 800a2a0:	602a      	str	r2, [r5, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f7f6 ffad 	bl	8001202 <_read>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_read_r+0x1e>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_read_r+0x1e>
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	200002bc 	.word	0x200002bc

0800a2b8 <abort>:
 800a2b8:	2006      	movs	r0, #6
 800a2ba:	b508      	push	{r3, lr}
 800a2bc:	f000 f856 	bl	800a36c <raise>
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	f7f6 ff94 	bl	80011ee <_exit>
	...

0800a2c8 <_fstat_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4d06      	ldr	r5, [pc, #24]	; (800a2e8 <_fstat_r+0x20>)
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	f7f6 ffd8 	bl	800128a <_fstat>
 800a2da:	1c43      	adds	r3, r0, #1
 800a2dc:	d102      	bne.n	800a2e4 <_fstat_r+0x1c>
 800a2de:	682b      	ldr	r3, [r5, #0]
 800a2e0:	b103      	cbz	r3, 800a2e4 <_fstat_r+0x1c>
 800a2e2:	6023      	str	r3, [r4, #0]
 800a2e4:	bd38      	pop	{r3, r4, r5, pc}
 800a2e6:	bf00      	nop
 800a2e8:	200002bc 	.word	0x200002bc

0800a2ec <_isatty_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	4d05      	ldr	r5, [pc, #20]	; (800a308 <_isatty_r+0x1c>)
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	602b      	str	r3, [r5, #0]
 800a2f8:	f7f6 ffd6 	bl	80012a8 <_isatty>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_isatty_r+0x1a>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_isatty_r+0x1a>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	200002bc 	.word	0x200002bc

0800a30c <_malloc_usable_size_r>:
 800a30c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a310:	1f18      	subs	r0, r3, #4
 800a312:	2b00      	cmp	r3, #0
 800a314:	bfbc      	itt	lt
 800a316:	580b      	ldrlt	r3, [r1, r0]
 800a318:	18c0      	addlt	r0, r0, r3
 800a31a:	4770      	bx	lr

0800a31c <_raise_r>:
 800a31c:	291f      	cmp	r1, #31
 800a31e:	b538      	push	{r3, r4, r5, lr}
 800a320:	4604      	mov	r4, r0
 800a322:	460d      	mov	r5, r1
 800a324:	d904      	bls.n	800a330 <_raise_r+0x14>
 800a326:	2316      	movs	r3, #22
 800a328:	6003      	str	r3, [r0, #0]
 800a32a:	f04f 30ff 	mov.w	r0, #4294967295
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a332:	b112      	cbz	r2, 800a33a <_raise_r+0x1e>
 800a334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a338:	b94b      	cbnz	r3, 800a34e <_raise_r+0x32>
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 f830 	bl	800a3a0 <_getpid_r>
 800a340:	462a      	mov	r2, r5
 800a342:	4601      	mov	r1, r0
 800a344:	4620      	mov	r0, r4
 800a346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a34a:	f000 b817 	b.w	800a37c <_kill_r>
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d00a      	beq.n	800a368 <_raise_r+0x4c>
 800a352:	1c59      	adds	r1, r3, #1
 800a354:	d103      	bne.n	800a35e <_raise_r+0x42>
 800a356:	2316      	movs	r3, #22
 800a358:	6003      	str	r3, [r0, #0]
 800a35a:	2001      	movs	r0, #1
 800a35c:	e7e7      	b.n	800a32e <_raise_r+0x12>
 800a35e:	2400      	movs	r4, #0
 800a360:	4628      	mov	r0, r5
 800a362:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a366:	4798      	blx	r3
 800a368:	2000      	movs	r0, #0
 800a36a:	e7e0      	b.n	800a32e <_raise_r+0x12>

0800a36c <raise>:
 800a36c:	4b02      	ldr	r3, [pc, #8]	; (800a378 <raise+0xc>)
 800a36e:	4601      	mov	r1, r0
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	f7ff bfd3 	b.w	800a31c <_raise_r>
 800a376:	bf00      	nop
 800a378:	20000014 	.word	0x20000014

0800a37c <_kill_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	2300      	movs	r3, #0
 800a380:	4d06      	ldr	r5, [pc, #24]	; (800a39c <_kill_r+0x20>)
 800a382:	4604      	mov	r4, r0
 800a384:	4608      	mov	r0, r1
 800a386:	4611      	mov	r1, r2
 800a388:	602b      	str	r3, [r5, #0]
 800a38a:	f7f6 ff20 	bl	80011ce <_kill>
 800a38e:	1c43      	adds	r3, r0, #1
 800a390:	d102      	bne.n	800a398 <_kill_r+0x1c>
 800a392:	682b      	ldr	r3, [r5, #0]
 800a394:	b103      	cbz	r3, 800a398 <_kill_r+0x1c>
 800a396:	6023      	str	r3, [r4, #0]
 800a398:	bd38      	pop	{r3, r4, r5, pc}
 800a39a:	bf00      	nop
 800a39c:	200002bc 	.word	0x200002bc

0800a3a0 <_getpid_r>:
 800a3a0:	f7f6 bf0e 	b.w	80011c0 <_getpid>

0800a3a4 <_init>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr

0800a3b0 <_fini>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	bf00      	nop
 800a3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b6:	bc08      	pop	{r3}
 800a3b8:	469e      	mov	lr, r3
 800a3ba:	4770      	bx	lr
