
STMFLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3ec  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d44  0800b5d8  0800b5d8  0001b5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d31c  0800d31c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d31c  0800d31c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d31c  0800d31c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d31c  0800d31c  0001d31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d320  0800d320  0001d320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  200001e8  0800d50c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  0800d50c  00020ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4cb  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285c  00000000  00000000  0002c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6dc  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fafc  00000000  00000000  0004bc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ee8  00000000  00000000  0005b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  000f1650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b5bc 	.word	0x0800b5bc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800b5bc 	.word	0x0800b5bc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <delay_us>:
//修改NT5510 ID读取方式,改为先发送秘钥,然后读取C500和C501,从而获取正确的ID(0X5510)
//////////////////////////////////////////////////////////////////////////////////


void delay_us(uint32_t udelay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t startval,tickn,delays,wait;

  startval = SysTick->VAL;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <delay_us+0x7c>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 8000cbe:	f003 fe69 	bl	8004994 <HAL_GetTick>
 8000cc2:	6138      	str	r0, [r7, #16]
  //sysc = 72000;  //SystemCoreClock / (1000U / uwTickFreq);
  delays =udelay * 72; //sysc / 1000 * udelay;
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	4413      	add	r3, r2
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d915      	bls.n	8000d04 <delay_us+0x54>
    {
      while(HAL_GetTick() == tickn)
 8000cd8:	bf00      	nop
 8000cda:	f003 fe5b 	bl	8004994 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d0f9      	beq.n	8000cda <delay_us+0x2a>
        {

        }
      wait = 72000 + startval - delays;
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000cf0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000cf4:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL)
 8000cf6:	bf00      	nop
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <delay_us+0x7c>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d3fa      	bcc.n	8000cf8 <delay_us+0x48>
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
        {

        }
    }
}
 8000d02:	e00f      	b.n	8000d24 <delay_us+0x74>
      wait = startval - delays;
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
 8000d0c:	bf00      	nop
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <delay_us+0x7c>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d205      	bcs.n	8000d24 <delay_us+0x74>
 8000d18:	f003 fe3c 	bl	8004994 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d0f4      	beq.n	8000d0e <delay_us+0x5e>
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <delay_ms>:

void delay_ms(uint32_t udelay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	HAL_Delay(udelay);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f003 fe35 	bl	80049a8 <HAL_Delay>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(vu16 regval)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
    regval = regval;        //使用-O2优化的时候,必须插入的延时
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regval;  //写入要写的寄存器序号
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <LCD_WR_REG+0x24>)
 8000d5a:	88fa      	ldrh	r2, [r7, #6]
 8000d5c:	b292      	uxth	r2, r2
 8000d5e:	801a      	strh	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	6c0007fe 	.word	0x6c0007fe

08000d70 <LCD_WR_DATA>:

//写LCD数据
//data:要写入的值
void LCD_WR_DATA(vu16 data)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
    data = data;            //使用-O2优化的时候,必须插入的延时
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <LCD_WR_DATA+0x24>)
 8000d82:	88fa      	ldrh	r2, [r7, #6]
 8000d84:	b292      	uxth	r2, r2
 8000d86:	805a      	strh	r2, [r3, #2]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	6c0007fe 	.word	0x6c0007fe

08000d98 <LCD_RD_DATA>:

//读LCD数据
//返回值:读到的值
u16 LCD_RD_DATA(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
    vu16 ram;               //防止被优化
    ram = LCD->LCD_RAM;
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <LCD_RD_DATA+0x1c>)
 8000da0:	885b      	ldrh	r3, [r3, #2]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	80fb      	strh	r3, [r7, #6]
    return ram;
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	b29b      	uxth	r3, r3
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	6c0007fe 	.word	0x6c0007fe

08000db8 <LCD_WriteReg>:

//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	80fb      	strh	r3, [r7, #6]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	80bb      	strh	r3, [r7, #4]
    LCD->LCD_REG = LCD_Reg;         //写入要写的寄存器序号
 8000dc8:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <LCD_WriteReg+0x28>)
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	8013      	strh	r3, [r2, #0]
    LCD->LCD_RAM = LCD_RegValue;    //写入数据
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <LCD_WriteReg+0x28>)
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	8053      	strh	r3, [r2, #2]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	6c0007fe 	.word	0x6c0007fe

08000de4 <LCD_WriteRAM_Prepare>:
    return LCD_RD_DATA();           //返回读到的值
}

//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <LCD_WriteRAM_Prepare+0x14>)
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <LCD_WriteRAM_Prepare+0x18>)
 8000dec:	8912      	ldrh	r2, [r2, #8]
 8000dee:	801a      	strh	r2, [r3, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	6c0007fe 	.word	0x6c0007fe
 8000dfc:	20000204 	.word	0x20000204

08000e00 <LCD_SetCursor>:

//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	80fb      	strh	r3, [r7, #6]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8000e10:	4b65      	ldr	r3, [pc, #404]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000e12:	889b      	ldrh	r3, [r3, #4]
 8000e14:	f641 1263 	movw	r2, #6499	; 0x1963
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d167      	bne.n	8000eec <LCD_SetCursor+0xec>
    {
        if (lcddev.dir == 0)   //x坐标需要变换
 8000e1c:	4b62      	ldr	r3, [pc, #392]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000e1e:	799b      	ldrb	r3, [r3, #6]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d11e      	bne.n	8000e62 <LCD_SetCursor+0x62>
        {
            Xpos = lcddev.width - 1 - Xpos;
 8000e24:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000e26:	881a      	ldrh	r2, [r3, #0]
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	80fb      	strh	r3, [r7, #6]
            LCD_WR_REG(lcddev.setxcmd);
 8000e32:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000e34:	895b      	ldrh	r3, [r3, #10]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff86 	bl	8000d48 <LCD_WR_REG>
            LCD_WR_DATA(0);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff ff97 	bl	8000d70 <LCD_WR_DATA>
            LCD_WR_DATA(0);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff ff94 	bl	8000d70 <LCD_WR_DATA>
            LCD_WR_DATA(Xpos >> 8);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff8e 	bl	8000d70 <LCD_WR_DATA>
            LCD_WR_DATA(Xpos & 0XFF);
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff88 	bl	8000d70 <LCD_WR_DATA>
 8000e60:	e021      	b.n	8000ea6 <LCD_SetCursor+0xa6>
        }
        else
        {
            LCD_WR_REG(lcddev.setxcmd);
 8000e62:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000e64:	895b      	ldrh	r3, [r3, #10]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff6e 	bl	8000d48 <LCD_WR_REG>
            LCD_WR_DATA(Xpos >> 8);
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff7c 	bl	8000d70 <LCD_WR_DATA>
            LCD_WR_DATA(Xpos & 0XFF);
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff76 	bl	8000d70 <LCD_WR_DATA>
            LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000e84:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	121b      	asrs	r3, r3, #8
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff6e 	bl	8000d70 <LCD_WR_DATA>
            LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000e94:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff65 	bl	8000d70 <LCD_WR_DATA>
        }

        LCD_WR_REG(lcddev.setycmd);
 8000ea6:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000ea8:	899b      	ldrh	r3, [r3, #12]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff4c 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff5a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(Ypos & 0XFF);
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff54 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000ec8:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000eca:	885b      	ldrh	r3, [r3, #2]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	121b      	asrs	r3, r3, #8
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff4c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000eda:	885b      	ldrh	r3, [r3, #2]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff43 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(Xpos & 0XFF);
        LCD_WR_REG(lcddev.setycmd);
        LCD_WR_DATA(Ypos >> 8);
        LCD_WR_DATA(Ypos & 0XFF);
    }
}
 8000eea:	e058      	b.n	8000f9e <LCD_SetCursor+0x19e>
    else if (lcddev.id == 0X5510)
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000eee:	889b      	ldrh	r3, [r3, #4]
 8000ef0:	f245 5210 	movw	r2, #21776	; 0x5510
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d130      	bne.n	8000f5a <LCD_SetCursor+0x15a>
        LCD_WR_REG(lcddev.setxcmd);
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000efa:	895b      	ldrh	r3, [r3, #10]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff23 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(Xpos >> 8);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff31 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 1);
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000f10:	895b      	ldrh	r3, [r3, #10]
 8000f12:	3301      	adds	r3, #1
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff16 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(Xpos & 0XFF);
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff24 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000f2a:	899b      	ldrh	r3, [r3, #12]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff0b 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff19 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 1);
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000f40:	899b      	ldrh	r3, [r3, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fefe 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(Ypos & 0XFF);
 8000f4c:	88bb      	ldrh	r3, [r7, #4]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff0c 	bl	8000d70 <LCD_WR_DATA>
}
 8000f58:	e021      	b.n	8000f9e <LCD_SetCursor+0x19e>
        LCD_WR_REG(lcddev.setxcmd);
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000f5c:	895b      	ldrh	r3, [r3, #10]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fef2 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(Xpos >> 8);
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff00 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(Xpos & 0XFF);
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fefa 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <LCD_SetCursor+0x1a8>)
 8000f7e:	899b      	ldrh	r3, [r3, #12]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fee1 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff feef 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(Ypos & 0XFF);
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fee9 	bl	8000d70 <LCD_WR_DATA>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000204 	.word	0x20000204

08000fac <LCD_Scan_Dir>:
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963/7789等IC已经实际测试
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
void LCD_Scan_Dir(u8 dir)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
    u16 regval = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	81fb      	strh	r3, [r7, #14]
    u16 dirreg = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	81bb      	strh	r3, [r7, #12]
    u16 temp;

    //横屏时，对1963不改变扫描方向, 其他IC改变扫描方向！竖屏时1963改变方向, 其他IC不改变扫描方向
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 8000fbe:	4b9a      	ldr	r3, [pc, #616]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8000fc0:	799b      	ldrb	r3, [r3, #6]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d105      	bne.n	8000fd2 <LCD_Scan_Dir+0x26>
 8000fc6:	4b98      	ldr	r3, [pc, #608]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8000fc8:	889b      	ldrh	r3, [r3, #4]
 8000fca:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d109      	bne.n	8000fe6 <LCD_Scan_Dir+0x3a>
 8000fd2:	4b95      	ldr	r3, [pc, #596]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8000fd4:	799b      	ldrb	r3, [r3, #6]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d134      	bne.n	8001044 <LCD_Scan_Dir+0x98>
 8000fda:	4b93      	ldr	r3, [pc, #588]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8000fdc:	889b      	ldrh	r3, [r3, #4]
 8000fde:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12e      	bne.n	8001044 <LCD_Scan_Dir+0x98>
    {
        switch (dir)   //方向转换
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d82c      	bhi.n	8001046 <LCD_Scan_Dir+0x9a>
 8000fec:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <LCD_Scan_Dir+0x48>)
 8000fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff2:	bf00      	nop
 8000ff4:	08001015 	.word	0x08001015
 8000ff8:	0800101b 	.word	0x0800101b
 8000ffc:	08001021 	.word	0x08001021
 8001000:	08001027 	.word	0x08001027
 8001004:	0800102d 	.word	0x0800102d
 8001008:	08001033 	.word	0x08001033
 800100c:	08001039 	.word	0x08001039
 8001010:	0800103f 	.word	0x0800103f
        {
            case 0:
                dir = 6;
 8001014:	2306      	movs	r3, #6
 8001016:	71fb      	strb	r3, [r7, #7]
                break;
 8001018:	e015      	b.n	8001046 <LCD_Scan_Dir+0x9a>

            case 1:
                dir = 7;
 800101a:	2307      	movs	r3, #7
 800101c:	71fb      	strb	r3, [r7, #7]
                break;
 800101e:	e012      	b.n	8001046 <LCD_Scan_Dir+0x9a>

            case 2:
                dir = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	71fb      	strb	r3, [r7, #7]
                break;
 8001024:	e00f      	b.n	8001046 <LCD_Scan_Dir+0x9a>

            case 3:
                dir = 5;
 8001026:	2305      	movs	r3, #5
 8001028:	71fb      	strb	r3, [r7, #7]
                break;
 800102a:	e00c      	b.n	8001046 <LCD_Scan_Dir+0x9a>

            case 4:
                dir = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	71fb      	strb	r3, [r7, #7]
                break;
 8001030:	e009      	b.n	8001046 <LCD_Scan_Dir+0x9a>

            case 5:
                dir = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
                break;
 8001036:	e006      	b.n	8001046 <LCD_Scan_Dir+0x9a>

            case 6:
                dir = 3;
 8001038:	2303      	movs	r3, #3
 800103a:	71fb      	strb	r3, [r7, #7]
                break;
 800103c:	e003      	b.n	8001046 <LCD_Scan_Dir+0x9a>

            case 7:
                dir = 2;
 800103e:	2302      	movs	r3, #2
 8001040:	71fb      	strb	r3, [r7, #7]
                break;
 8001042:	e000      	b.n	8001046 <LCD_Scan_Dir+0x9a>
        }
    }
 8001044:	bf00      	nop

    switch (dir)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b07      	cmp	r3, #7
 800104a:	d836      	bhi.n	80010ba <LCD_Scan_Dir+0x10e>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <LCD_Scan_Dir+0xa8>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	080010bb 	.word	0x080010bb
 8001058:	08001075 	.word	0x08001075
 800105c:	0800107f 	.word	0x0800107f
 8001060:	08001089 	.word	0x08001089
 8001064:	08001093 	.word	0x08001093
 8001068:	0800109d 	.word	0x0800109d
 800106c:	080010a7 	.word	0x080010a7
 8001070:	080010b1 	.word	0x080010b1
        case L2R_U2D://从左到右,从上到下
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U://从左到右,从下到上
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107a:	81fb      	strh	r3, [r7, #14]
            break;
 800107c:	e01d      	b.n	80010ba <LCD_Scan_Dir+0x10e>

        case R2L_U2D://从右到左,从上到下
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800107e:	89fb      	ldrh	r3, [r7, #14]
 8001080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001084:	81fb      	strh	r3, [r7, #14]
            break;
 8001086:	e018      	b.n	80010ba <LCD_Scan_Dir+0x10e>

        case R2L_D2U://从右到左,从下到上
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001088:	89fb      	ldrh	r3, [r7, #14]
 800108a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800108e:	81fb      	strh	r3, [r7, #14]
            break;
 8001090:	e013      	b.n	80010ba <LCD_Scan_Dir+0x10e>

        case U2D_L2R://从上到下,从左到右
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8001092:	89fb      	ldrh	r3, [r7, #14]
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	81fb      	strh	r3, [r7, #14]
            break;
 800109a:	e00e      	b.n	80010ba <LCD_Scan_Dir+0x10e>

        case U2D_R2L://从上到下,从右到左
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010a2:	81fb      	strh	r3, [r7, #14]
            break;
 80010a4:	e009      	b.n	80010ba <LCD_Scan_Dir+0x10e>

        case D2U_L2R://从下到上,从左到右
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80010ac:	81fb      	strh	r3, [r7, #14]
            break;
 80010ae:	e004      	b.n	80010ba <LCD_Scan_Dir+0x10e>

        case D2U_R2L://从下到上,从右到左
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80010b0:	89fb      	ldrh	r3, [r7, #14]
 80010b2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80010b6:	81fb      	strh	r3, [r7, #14]
            break;
 80010b8:	bf00      	nop
    }

    if (lcddev.id == 0X5510)dirreg = 0X3600;
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <LCD_Scan_Dir+0x27c>)
 80010bc:	889b      	ldrh	r3, [r3, #4]
 80010be:	f245 5210 	movw	r2, #21776	; 0x5510
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d103      	bne.n	80010ce <LCD_Scan_Dir+0x122>
 80010c6:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80010ca:	81bb      	strh	r3, [r7, #12]
 80010cc:	e001      	b.n	80010d2 <LCD_Scan_Dir+0x126>
    else dirreg = 0X36;
 80010ce:	2336      	movs	r3, #54	; 0x36
 80010d0:	81bb      	strh	r3, [r7, #12]

    if (lcddev.id == 0X9341 || lcddev.id == 0X7789)   //9341 & 7789 要设置BGR位
 80010d2:	4b55      	ldr	r3, [pc, #340]	; (8001228 <LCD_Scan_Dir+0x27c>)
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	f249 3241 	movw	r2, #37697	; 0x9341
 80010da:	4293      	cmp	r3, r2
 80010dc:	d005      	beq.n	80010ea <LCD_Scan_Dir+0x13e>
 80010de:	4b52      	ldr	r3, [pc, #328]	; (8001228 <LCD_Scan_Dir+0x27c>)
 80010e0:	889b      	ldrh	r3, [r3, #4]
 80010e2:	f247 7289 	movw	r2, #30601	; 0x7789
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d103      	bne.n	80010f2 <LCD_Scan_Dir+0x146>
    {
        regval |= 0X08;
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	81fb      	strh	r3, [r7, #14]
    }

    LCD_WriteReg(dirreg, regval);
 80010f2:	89fa      	ldrh	r2, [r7, #14]
 80010f4:	89bb      	ldrh	r3, [r7, #12]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fe5d 	bl	8000db8 <LCD_WriteReg>

    if (lcddev.id != 0X1963)   //1963不做坐标处理
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001100:	889b      	ldrh	r3, [r3, #4]
 8001102:	f641 1263 	movw	r2, #6499	; 0x1963
 8001106:	4293      	cmp	r3, r2
 8001108:	d025      	beq.n	8001156 <LCD_Scan_Dir+0x1aa>
    {
        if (regval & 0X20)
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	2b00      	cmp	r3, #0
 8001112:	d010      	beq.n	8001136 <LCD_Scan_Dir+0x18a>
        {
            if (lcddev.width < lcddev.height)   //交换X,Y
 8001114:	4b44      	ldr	r3, [pc, #272]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001116:	881a      	ldrh	r2, [r3, #0]
 8001118:	4b43      	ldr	r3, [pc, #268]	; (8001228 <LCD_Scan_Dir+0x27c>)
 800111a:	885b      	ldrh	r3, [r3, #2]
 800111c:	429a      	cmp	r2, r3
 800111e:	d21a      	bcs.n	8001156 <LCD_Scan_Dir+0x1aa>
            {
                temp = lcddev.width;
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001128:	885a      	ldrh	r2, [r3, #2]
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <LCD_Scan_Dir+0x27c>)
 800112c:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 800112e:	4a3e      	ldr	r2, [pc, #248]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001130:	897b      	ldrh	r3, [r7, #10]
 8001132:	8053      	strh	r3, [r2, #2]
 8001134:	e00f      	b.n	8001156 <LCD_Scan_Dir+0x1aa>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   //交换X,Y
 8001136:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001138:	881a      	ldrh	r2, [r3, #0]
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <LCD_Scan_Dir+0x27c>)
 800113c:	885b      	ldrh	r3, [r3, #2]
 800113e:	429a      	cmp	r2, r3
 8001140:	d909      	bls.n	8001156 <LCD_Scan_Dir+0x1aa>
            {
                temp = lcddev.width;
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <LCD_Scan_Dir+0x27c>)
 800114a:	885a      	ldrh	r2, [r3, #2]
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <LCD_Scan_Dir+0x27c>)
 800114e:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001150:	4a35      	ldr	r2, [pc, #212]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001152:	897b      	ldrh	r3, [r7, #10]
 8001154:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    //设置显示区域(开窗)大小
    if (lcddev.id == 0X5510)
 8001156:	4b34      	ldr	r3, [pc, #208]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001158:	889b      	ldrh	r3, [r3, #4]
 800115a:	f245 5210 	movw	r2, #21776	; 0x5510
 800115e:	4293      	cmp	r3, r2
 8001160:	d164      	bne.n	800122c <LCD_Scan_Dir+0x280>
    {
        LCD_WR_REG(lcddev.setxcmd);
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001164:	895b      	ldrh	r3, [r3, #10]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fdee 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0);
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fdff 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 1);
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001174:	895b      	ldrh	r3, [r3, #10]
 8001176:	3301      	adds	r3, #1
 8001178:	b29b      	uxth	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fde4 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fdf5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 2);
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001188:	895b      	ldrh	r3, [r3, #10]
 800118a:	3302      	adds	r3, #2
 800118c:	b29b      	uxth	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fdda 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	3b01      	subs	r3, #1
 800119a:	121b      	asrs	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fde6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 3);
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <LCD_Scan_Dir+0x27c>)
 80011a6:	895b      	ldrh	r3, [r3, #10]
 80011a8:	3303      	adds	r3, #3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fdcb 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <LCD_Scan_Dir+0x27c>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fdd6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <LCD_Scan_Dir+0x27c>)
 80011c6:	899b      	ldrh	r3, [r3, #12]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fdbd 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fdce 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 1);
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <LCD_Scan_Dir+0x27c>)
 80011d6:	899b      	ldrh	r3, [r3, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fdb3 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fdc4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 2);
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <LCD_Scan_Dir+0x27c>)
 80011ea:	899b      	ldrh	r3, [r3, #12]
 80011ec:	3302      	adds	r3, #2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fda9 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <LCD_Scan_Dir+0x27c>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	121b      	asrs	r3, r3, #8
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fdb5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 3);
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001208:	899b      	ldrh	r3, [r3, #12]
 800120a:	3303      	adds	r3, #3
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fd9a 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <LCD_Scan_Dir+0x27c>)
 8001216:	885b      	ldrh	r3, [r3, #2]
 8001218:	3b01      	subs	r3, #1
 800121a:	b29b      	uxth	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	b29b      	uxth	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fda5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0);
        LCD_WR_DATA(0);
        LCD_WR_DATA((lcddev.height - 1) >> 8);
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
    }
}
 8001226:	e039      	b.n	800129c <LCD_Scan_Dir+0x2f0>
 8001228:	20000204 	.word	0x20000204
        LCD_WR_REG(lcddev.setxcmd);
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <LCD_Scan_Dir+0x2f8>)
 800122e:	895b      	ldrh	r3, [r3, #10]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fd89 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0);
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fd9a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fd97 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <LCD_Scan_Dir+0x2f8>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	3b01      	subs	r3, #1
 8001248:	121b      	asrs	r3, r3, #8
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd8f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <LCD_Scan_Dir+0x2f8>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	3b01      	subs	r3, #1
 8001258:	b29b      	uxth	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fd86 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <LCD_Scan_Dir+0x2f8>)
 8001266:	899b      	ldrh	r3, [r3, #12]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fd6d 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fd7e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fd7b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <LCD_Scan_Dir+0x2f8>)
 800127c:	885b      	ldrh	r3, [r3, #2]
 800127e:	3b01      	subs	r3, #1
 8001280:	121b      	asrs	r3, r3, #8
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fd73 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <LCD_Scan_Dir+0x2f8>)
 800128c:	885b      	ldrh	r3, [r3, #2]
 800128e:	3b01      	subs	r3, #1
 8001290:	b29b      	uxth	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fd6a 	bl	8000d70 <LCD_WR_DATA>
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000204 	.word	0x20000204

080012a8 <LCD_Fast_DrawPoint>:

//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(u16 x, u16 y, u16 color)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	807b      	strh	r3, [r7, #2]
    if (lcddev.id == 0X5510)
 80012ba:	4b58      	ldr	r3, [pc, #352]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 80012bc:	889b      	ldrh	r3, [r3, #4]
 80012be:	f245 5210 	movw	r2, #21776	; 0x5510
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d130      	bne.n	8001328 <LCD_Fast_DrawPoint+0x80>
    {
        LCD_WR_REG(lcddev.setxcmd);
 80012c6:	4b55      	ldr	r3, [pc, #340]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 80012c8:	895b      	ldrh	r3, [r3, #10]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd3c 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fd4a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 1);
 80012dc:	4b4f      	ldr	r3, [pc, #316]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 80012de:	895b      	ldrh	r3, [r3, #10]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fd2f 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(x & 0XFF);
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd3d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 80012f8:	899b      	ldrh	r3, [r3, #12]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fd24 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	b29b      	uxth	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fd32 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 1);
 800130c:	4b43      	ldr	r3, [pc, #268]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 800130e:	899b      	ldrh	r3, [r3, #12]
 8001310:	3301      	adds	r3, #1
 8001312:	b29b      	uxth	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd17 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(y & 0XFF);
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	b29b      	uxth	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fd25 	bl	8000d70 <LCD_WR_DATA>
 8001326:	e06d      	b.n	8001404 <LCD_Fast_DrawPoint+0x15c>
    }
    else if (lcddev.id == 0X1963)
 8001328:	4b3c      	ldr	r3, [pc, #240]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 800132a:	889b      	ldrh	r3, [r3, #4]
 800132c:	f641 1263 	movw	r2, #6499	; 0x1963
 8001330:	4293      	cmp	r3, r2
 8001332:	d145      	bne.n	80013c0 <LCD_Fast_DrawPoint+0x118>
    {
        if (lcddev.dir == 0)x = lcddev.width - 1 - x;
 8001334:	4b39      	ldr	r3, [pc, #228]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 8001336:	799b      	ldrb	r3, [r3, #6]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d106      	bne.n	800134a <LCD_Fast_DrawPoint+0xa2>
 800133c:	4b37      	ldr	r3, [pc, #220]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	3b01      	subs	r3, #1
 8001348:	80fb      	strh	r3, [r7, #6]

        LCD_WR_REG(lcddev.setxcmd);
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 800134c:	895b      	ldrh	r3, [r3, #10]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fcfa 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fd08 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(x & 0XFF);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	b29b      	uxth	r3, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fd02 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(x >> 8);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	b29b      	uxth	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fcfc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(x & 0XFF);
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	b29b      	uxth	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fcf6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 8001386:	899b      	ldrh	r3, [r3, #12]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fcdd 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fceb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(y & 0XFF);
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fce5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(y >> 8);
 80013a6:	88bb      	ldrh	r3, [r7, #4]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fcdf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(y & 0XFF);
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fcd9 	bl	8000d70 <LCD_WR_DATA>
 80013be:	e021      	b.n	8001404 <LCD_Fast_DrawPoint+0x15c>
    }
    else     //9341/5310/7789等设置坐标
    {
        LCD_WR_REG(lcddev.setxcmd);
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 80013c2:	895b      	ldrh	r3, [r3, #10]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fcbf 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fccd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(x & 0XFF);
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fcc7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 80013e4:	899b      	ldrh	r3, [r3, #12]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fcae 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fcbc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(y & 0XFF);
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fcb6 	bl	8000d70 <LCD_WR_DATA>
    }

    LCD->LCD_REG=lcddev.wramcmd; 
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <LCD_Fast_DrawPoint+0x178>)
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <LCD_Fast_DrawPoint+0x174>)
 8001408:	8912      	ldrh	r2, [r2, #8]
 800140a:	801a      	strh	r2, [r3, #0]
    LCD->LCD_RAM=color; 
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <LCD_Fast_DrawPoint+0x178>)
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	8053      	strh	r3, [r2, #2]
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000204 	.word	0x20000204
 8001420:	6c0007fe 	.word	0x6c0007fe
 8001424:	00000000 	.word	0x00000000

08001428 <LCD_SSD_BackLightSet>:

//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(u8 pwm)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
    LCD_WR_REG(0xBE);           //配置PWM输出
 8001432:	20be      	movs	r0, #190	; 0xbe
 8001434:	f7ff fc88 	bl	8000d48 <LCD_WR_REG>
    LCD_WR_DATA(0x05);          //1设置PWM频率
 8001438:	2005      	movs	r0, #5
 800143a:	f7ff fc99 	bl	8000d70 <LCD_WR_DATA>
    LCD_WR_DATA(pwm * 2.55);    //2设置PWM占空比
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f84b 	bl	80004dc <__aeabi_i2d>
 8001446:	a310      	add	r3, pc, #64	; (adr r3, 8001488 <LCD_SSD_BackLightSet+0x60>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8b0 	bl	80005b0 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fb82 	bl	8000b60 <__aeabi_d2uiz>
 800145c:	4603      	mov	r3, r0
 800145e:	b29b      	uxth	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fc85 	bl	8000d70 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);          //3设置C
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fc82 	bl	8000d70 <LCD_WR_DATA>
    LCD_WR_DATA(0xFF);          //4设置D
 800146c:	20ff      	movs	r0, #255	; 0xff
 800146e:	f7ff fc7f 	bl	8000d70 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);          //5设置E
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fc7c 	bl	8000d70 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);          //6设置F
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff fc79 	bl	8000d70 <LCD_WR_DATA>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	66666666 	.word	0x66666666
 800148c:	40046666 	.word	0x40046666

08001490 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(u8 dir)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;       //竖屏/横屏
 800149a:	4a58      	ldr	r2, [pc, #352]	; (80015fc <LCD_Display_Dir+0x16c>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	7193      	strb	r3, [r2, #6]

    if (dir == 0)           //竖屏
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d151      	bne.n	800154a <LCD_Display_Dir+0xba>
    {
        lcddev.width = 240;
 80014a6:	4b55      	ldr	r3, [pc, #340]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014a8:	22f0      	movs	r2, #240	; 0xf0
 80014aa:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014b2:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 80014b4:	4b51      	ldr	r3, [pc, #324]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014b6:	889b      	ldrh	r3, [r3, #4]
 80014b8:	f245 5210 	movw	r2, #21776	; 0x5510
 80014bc:	4293      	cmp	r3, r2
 80014be:	d114      	bne.n	80014ea <LCD_Display_Dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 80014c0:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014c2:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80014c6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 80014c8:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014ca:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80014ce:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 80014d0:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014d2:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80014d6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 80014d8:	4b48      	ldr	r3, [pc, #288]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80014de:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80014e6:	805a      	strh	r2, [r3, #2]
 80014e8:	e020      	b.n	800152c <LCD_Display_Dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 80014ea:	4b44      	ldr	r3, [pc, #272]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014ec:	889b      	ldrh	r3, [r3, #4]
 80014ee:	f641 1263 	movw	r2, #6499	; 0x1963
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d111      	bne.n	800151a <LCD_Display_Dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  //设置写入GRAM的指令
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014f8:	222c      	movs	r2, #44	; 0x2c
 80014fa:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  //设置写X坐标指令
 80014fc:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <LCD_Display_Dir+0x16c>)
 80014fe:	222b      	movs	r2, #43	; 0x2b
 8001500:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  //设置写Y坐标指令
 8001502:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001504:	222a      	movs	r2, #42	; 0x2a
 8001506:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     //设置宽度480
 8001508:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <LCD_Display_Dir+0x16c>)
 800150a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800150e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    //设置高度800
 8001510:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001512:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001516:	805a      	strh	r2, [r3, #2]
 8001518:	e008      	b.n	800152c <LCD_Display_Dir+0x9c>
        }
        else                        //其他IC, 包括: 9341 / 5310 / 7789等IC
        {
            lcddev.wramcmd = 0X2C;
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <LCD_Display_Dir+0x16c>)
 800151c:	222c      	movs	r2, #44	; 0x2c
 800151e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001522:	222a      	movs	r2, #42	; 0x2a
 8001524:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001528:	222b      	movs	r2, #43	; 0x2b
 800152a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310)    //如果是5310 则表示是 320*480分辨率
 800152c:	4b33      	ldr	r3, [pc, #204]	; (80015fc <LCD_Display_Dir+0x16c>)
 800152e:	889b      	ldrh	r3, [r3, #4]
 8001530:	f245 3210 	movw	r2, #21264	; 0x5310
 8001534:	4293      	cmp	r3, r2
 8001536:	d159      	bne.n	80015ec <LCD_Display_Dir+0x15c>
        {
            lcddev.width = 320;
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <LCD_Display_Dir+0x16c>)
 800153a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800153e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001540:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001542:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001546:	805a      	strh	r2, [r3, #2]
 8001548:	e050      	b.n	80015ec <LCD_Display_Dir+0x15c>
        }
    }
    else     //横屏
    {
        lcddev.width = 320;
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <LCD_Display_Dir+0x16c>)
 800154c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001550:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001554:	22f0      	movs	r2, #240	; 0xf0
 8001556:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <LCD_Display_Dir+0x16c>)
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001560:	4293      	cmp	r3, r2
 8001562:	d114      	bne.n	800158e <LCD_Display_Dir+0xfe>
        {
            lcddev.wramcmd = 0X2C00;
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001566:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800156a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <LCD_Display_Dir+0x16c>)
 800156e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001572:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001576:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 800157a:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <LCD_Display_Dir+0x16c>)
 800157e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001582:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001586:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800158a:	805a      	strh	r2, [r3, #2]
 800158c:	e020      	b.n	80015d0 <LCD_Display_Dir+0x140>
        }
        else if (lcddev.id == 0X1963)
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <LCD_Display_Dir+0x16c>)
 8001590:	889b      	ldrh	r3, [r3, #4]
 8001592:	f641 1263 	movw	r2, #6499	; 0x1963
 8001596:	4293      	cmp	r3, r2
 8001598:	d111      	bne.n	80015be <LCD_Display_Dir+0x12e>
        {
            lcddev.wramcmd = 0X2C;  //设置写入GRAM的指令
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <LCD_Display_Dir+0x16c>)
 800159c:	222c      	movs	r2, #44	; 0x2c
 800159e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  //设置写X坐标指令
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015a2:	222a      	movs	r2, #42	; 0x2a
 80015a4:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  //设置写Y坐标指令
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015a8:	222b      	movs	r2, #43	; 0x2b
 80015aa:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     //设置宽度800
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80015b2:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    //设置高度480
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80015ba:	805a      	strh	r2, [r3, #2]
 80015bc:	e008      	b.n	80015d0 <LCD_Display_Dir+0x140>
        }
        else                        //其他IC, 包括: 9341 / 5310 / 7789等IC
        {
            lcddev.wramcmd = 0X2C;
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015c0:	222c      	movs	r2, #44	; 0x2c
 80015c2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015c6:	222a      	movs	r2, #42	; 0x2a
 80015c8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015cc:	222b      	movs	r2, #43	; 0x2b
 80015ce:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310)    //如果是5310 则表示是 320*480分辨率
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015d2:	889b      	ldrh	r3, [r3, #4]
 80015d4:	f245 3210 	movw	r2, #21264	; 0x5310
 80015d8:	4293      	cmp	r3, r2
 80015da:	d107      	bne.n	80015ec <LCD_Display_Dir+0x15c>
        {
            lcddev.width = 480;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80015e2:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <LCD_Display_Dir+0x16c>)
 80015e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015ea:	805a      	strh	r2, [r3, #2]
        }
    }

    LCD_Scan_Dir(DFT_SCAN_DIR);     //默认扫描方向
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fcdd 	bl	8000fac <LCD_Scan_Dir>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000204 	.word	0x20000204

08001600 <LCD_Init>:

//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
//    FSMC_NORSRAM_TimingTypeDef FSMC_ReadWriteTim;
//    FSMC_NORSRAM_TimingTypeDef FSMC_WriteTim;

    __HAL_RCC_GPIOB_CLK_ENABLE();           //开启GPIOB时钟
 8001606:	4b8c      	ldr	r3, [pc, #560]	; (8001838 <LCD_Init+0x238>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a8b      	ldr	r2, [pc, #556]	; (8001838 <LCD_Init+0x238>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b89      	ldr	r3, [pc, #548]	; (8001838 <LCD_Init+0x238>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
    GPIO_Initure.Pin=GPIO_PIN_0;            //PB0,背光控制
 800161e:	2301      	movs	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
 8001622:	2301      	movs	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8001626:	2301      	movs	r3, #1
 8001628:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速
 800162a:	2303      	movs	r3, #3
 800162c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure); 
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4619      	mov	r1, r3
 8001634:	4881      	ldr	r0, [pc, #516]	; (800183c <LCD_Init+0x23c>)
 8001636:	f003 fe2b 	bl	8005290 <HAL_GPIO_Init>
//    FSMC_WriteTim.AddressHoldTime=0;
//    FSMC_WriteTim.DataSetupTime=0x06;               //数据保存时间为13.8ns*7个HCLK=96.6ns
//    FSMC_WriteTim.AccessMode=FSMC_ACCESS_MODE_A;    //模式A
//    HAL_SRAM_Init(&TFTSRAM_Handler,&FSMC_ReadWriteTim,&FSMC_WriteTim);

    delay_ms(50); // delay 50 ms 
 800163a:	2032      	movs	r0, #50	; 0x32
 800163c:	f7ff fb78 	bl	8000d30 <delay_ms>

    //尝试9341 ID的读取
    LCD_WR_REG(0XD3);
 8001640:	20d3      	movs	r0, #211	; 0xd3
 8001642:	f7ff fb81 	bl	8000d48 <LCD_WR_REG>
    lcddev.id = LCD_RD_DATA();          //dummy read
 8001646:	f7ff fba7 	bl	8000d98 <LCD_RD_DATA>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b7c      	ldr	r3, [pc, #496]	; (8001840 <LCD_Init+0x240>)
 8001650:	809a      	strh	r2, [r3, #4]
    lcddev.id = LCD_RD_DATA();          //读到0X00
 8001652:	f7ff fba1 	bl	8000d98 <LCD_RD_DATA>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b79      	ldr	r3, [pc, #484]	; (8001840 <LCD_Init+0x240>)
 800165c:	809a      	strh	r2, [r3, #4]
    lcddev.id = LCD_RD_DATA();          //读取0X93
 800165e:	f7ff fb9b 	bl	8000d98 <LCD_RD_DATA>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <LCD_Init+0x240>)
 8001668:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 800166a:	4b75      	ldr	r3, [pc, #468]	; (8001840 <LCD_Init+0x240>)
 800166c:	889b      	ldrh	r3, [r3, #4]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b73      	ldr	r3, [pc, #460]	; (8001840 <LCD_Init+0x240>)
 8001674:	809a      	strh	r2, [r3, #4]
    lcddev.id |= LCD_RD_DATA();         //读取0X41
 8001676:	f7ff fb8f 	bl	8000d98 <LCD_RD_DATA>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <LCD_Init+0x240>)
 8001680:	889b      	ldrh	r3, [r3, #4]
 8001682:	4313      	orrs	r3, r2
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <LCD_Init+0x240>)
 8001688:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)            //不是 9341 , 尝试看看是不是 ST7789
 800168a:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <LCD_Init+0x240>)
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001692:	4293      	cmp	r3, r2
 8001694:	f000 80c7 	beq.w	8001826 <LCD_Init+0x226>
    {
        LCD_WR_REG(0X04);
 8001698:	2004      	movs	r0, #4
 800169a:	f7ff fb55 	bl	8000d48 <LCD_WR_REG>
        lcddev.id = LCD_RD_DATA();      //dummy read
 800169e:	f7ff fb7b 	bl	8000d98 <LCD_RD_DATA>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b66      	ldr	r3, [pc, #408]	; (8001840 <LCD_Init+0x240>)
 80016a8:	809a      	strh	r2, [r3, #4]
        lcddev.id = LCD_RD_DATA();      //读到0X85
 80016aa:	f7ff fb75 	bl	8000d98 <LCD_RD_DATA>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <LCD_Init+0x240>)
 80016b4:	809a      	strh	r2, [r3, #4]
        lcddev.id = LCD_RD_DATA();      //读取0X85
 80016b6:	f7ff fb6f 	bl	8000d98 <LCD_RD_DATA>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b60      	ldr	r3, [pc, #384]	; (8001840 <LCD_Init+0x240>)
 80016c0:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <LCD_Init+0x240>)
 80016c4:	889b      	ldrh	r3, [r3, #4]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b5d      	ldr	r3, [pc, #372]	; (8001840 <LCD_Init+0x240>)
 80016cc:	809a      	strh	r2, [r3, #4]
        lcddev.id |= LCD_RD_DATA();     //读取0X52
 80016ce:	f7ff fb63 	bl	8000d98 <LCD_RD_DATA>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b5a      	ldr	r3, [pc, #360]	; (8001840 <LCD_Init+0x240>)
 80016d8:	889b      	ldrh	r3, [r3, #4]
 80016da:	4313      	orrs	r3, r2
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <LCD_Init+0x240>)
 80016e0:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        //将8552的ID转换成7789
 80016e2:	4b57      	ldr	r3, [pc, #348]	; (8001840 <LCD_Init+0x240>)
 80016e4:	889b      	ldrh	r3, [r3, #4]
 80016e6:	f248 5252 	movw	r2, #34130	; 0x8552
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d103      	bne.n	80016f6 <LCD_Init+0xf6>
        {
            lcddev.id = 0x7789;
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <LCD_Init+0x240>)
 80016f0:	f247 7289 	movw	r2, #30601	; 0x7789
 80016f4:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        //也不是ST7789, 尝试是不是 NT35310
 80016f6:	4b52      	ldr	r3, [pc, #328]	; (8001840 <LCD_Init+0x240>)
 80016f8:	889b      	ldrh	r3, [r3, #4]
 80016fa:	f247 7289 	movw	r2, #30601	; 0x7789
 80016fe:	4293      	cmp	r3, r2
 8001700:	f000 8091 	beq.w	8001826 <LCD_Init+0x226>
        {
            LCD_WR_REG(0XD4);
 8001704:	20d4      	movs	r0, #212	; 0xd4
 8001706:	f7ff fb1f 	bl	8000d48 <LCD_WR_REG>
            lcddev.id = LCD_RD_DATA();  //dummy read
 800170a:	f7ff fb45 	bl	8000d98 <LCD_RD_DATA>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <LCD_Init+0x240>)
 8001714:	809a      	strh	r2, [r3, #4]
            lcddev.id = LCD_RD_DATA();  //读回0X01
 8001716:	f7ff fb3f 	bl	8000d98 <LCD_RD_DATA>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b48      	ldr	r3, [pc, #288]	; (8001840 <LCD_Init+0x240>)
 8001720:	809a      	strh	r2, [r3, #4]
            lcddev.id = LCD_RD_DATA();  //读回0X53
 8001722:	f7ff fb39 	bl	8000d98 <LCD_RD_DATA>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b45      	ldr	r3, [pc, #276]	; (8001840 <LCD_Init+0x240>)
 800172c:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <LCD_Init+0x240>)
 8001730:	889b      	ldrh	r3, [r3, #4]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b42      	ldr	r3, [pc, #264]	; (8001840 <LCD_Init+0x240>)
 8001738:	809a      	strh	r2, [r3, #4]
            lcddev.id |= LCD_RD_DATA(); //这里读回0X10
 800173a:	f7ff fb2d 	bl	8000d98 <LCD_RD_DATA>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <LCD_Init+0x240>)
 8001744:	889b      	ldrh	r3, [r3, #4]
 8001746:	4313      	orrs	r3, r2
 8001748:	b29a      	uxth	r2, r3
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <LCD_Init+0x240>)
 800174c:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0X5310)    //也不是NT35310,尝试看看是不是NT35510
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <LCD_Init+0x240>)
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	f245 3210 	movw	r2, #21264	; 0x5310
 8001756:	4293      	cmp	r3, r2
 8001758:	d065      	beq.n	8001826 <LCD_Init+0x226>
            {
                //发送秘钥（厂家提供,照搬即可）
                LCD_WriteReg(0xF000, 0x0055);
 800175a:	2155      	movs	r1, #85	; 0x55
 800175c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001760:	f7ff fb2a 	bl	8000db8 <LCD_WriteReg>
                LCD_WriteReg(0xF001, 0x00AA);
 8001764:	21aa      	movs	r1, #170	; 0xaa
 8001766:	f24f 0001 	movw	r0, #61441	; 0xf001
 800176a:	f7ff fb25 	bl	8000db8 <LCD_WriteReg>
                LCD_WriteReg(0xF002, 0x0052);
 800176e:	2152      	movs	r1, #82	; 0x52
 8001770:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001774:	f7ff fb20 	bl	8000db8 <LCD_WriteReg>
                LCD_WriteReg(0xF003, 0x0008);
 8001778:	2108      	movs	r1, #8
 800177a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800177e:	f7ff fb1b 	bl	8000db8 <LCD_WriteReg>
                LCD_WriteReg(0xF004, 0x0001);
 8001782:	2101      	movs	r1, #1
 8001784:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001788:	f7ff fb16 	bl	8000db8 <LCD_WriteReg>

                LCD_WR_REG(0xC500);             //读取ID高8位
 800178c:	f44f 4045 	mov.w	r0, #50432	; 0xc500
 8001790:	f7ff fada 	bl	8000d48 <LCD_WR_REG>
                lcddev.id = LCD_RD_DATA();      //读回0X55
 8001794:	f7ff fb00 	bl	8000d98 <LCD_RD_DATA>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <LCD_Init+0x240>)
 800179e:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <LCD_Init+0x240>)
 80017a2:	889b      	ldrh	r3, [r3, #4]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <LCD_Init+0x240>)
 80017aa:	809a      	strh	r2, [r3, #4]

                LCD_WR_REG(0xC501);             //读取ID低8位
 80017ac:	f24c 5001 	movw	r0, #50433	; 0xc501
 80017b0:	f7ff faca 	bl	8000d48 <LCD_WR_REG>
                lcddev.id |= LCD_RD_DATA();     //读回0X10
 80017b4:	f7ff faf0 	bl	8000d98 <LCD_RD_DATA>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <LCD_Init+0x240>)
 80017be:	889b      	ldrh	r3, [r3, #4]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <LCD_Init+0x240>)
 80017c6:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0X5510)        //也不是NT5510,尝试看看是不是SSD1963
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <LCD_Init+0x240>)
 80017ca:	889b      	ldrh	r3, [r3, #4]
 80017cc:	f245 5210 	movw	r2, #21776	; 0x5510
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d028      	beq.n	8001826 <LCD_Init+0x226>
                {
                    LCD_WR_REG(0XA1);
 80017d4:	20a1      	movs	r0, #161	; 0xa1
 80017d6:	f7ff fab7 	bl	8000d48 <LCD_WR_REG>
                    lcddev.id = LCD_RD_DATA();
 80017da:	f7ff fadd 	bl	8000d98 <LCD_RD_DATA>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <LCD_Init+0x240>)
 80017e4:	809a      	strh	r2, [r3, #4]
                    lcddev.id = LCD_RD_DATA();  //读回0X57
 80017e6:	f7ff fad7 	bl	8000d98 <LCD_RD_DATA>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <LCD_Init+0x240>)
 80017f0:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <LCD_Init+0x240>)
 80017f4:	889b      	ldrh	r3, [r3, #4]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <LCD_Init+0x240>)
 80017fc:	809a      	strh	r2, [r3, #4]
                    lcddev.id |= LCD_RD_DATA(); //读回0X61
 80017fe:	f7ff facb 	bl	8000d98 <LCD_RD_DATA>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <LCD_Init+0x240>)
 8001808:	889b      	ldrh	r3, [r3, #4]
 800180a:	4313      	orrs	r3, r2
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <LCD_Init+0x240>)
 8001810:	809a      	strh	r2, [r3, #4]

                    if (lcddev.id == 0X5761)lcddev.id = 0X1963; //SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <LCD_Init+0x240>)
 8001814:	889b      	ldrh	r3, [r3, #4]
 8001816:	f245 7261 	movw	r2, #22369	; 0x5761
 800181a:	4293      	cmp	r3, r2
 800181c:	d103      	bne.n	8001826 <LCD_Init+0x226>
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <LCD_Init+0x240>)
 8001820:	f641 1263 	movw	r2, #6499	; 0x1963
 8001824:	809a      	strh	r2, [r3, #4]
        }
    }

    //printf(" LCD ID:%x\r\n", lcddev.id); //打印LCD ID

    if (lcddev.id == 0X9341)    //9341初始化
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <LCD_Init+0x240>)
 8001828:	889b      	ldrh	r3, [r3, #4]
 800182a:	f249 3241 	movw	r2, #37697	; 0x9341
 800182e:	4293      	cmp	r3, r2
 8001830:	f040 811e 	bne.w	8001a70 <LCD_Init+0x470>
 8001834:	e006      	b.n	8001844 <LCD_Init+0x244>
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	40010c00 	.word	0x40010c00
 8001840:	20000204 	.word	0x20000204
    {
        LCD_WR_REG(0xCF);
 8001844:	20cf      	movs	r0, #207	; 0xcf
 8001846:	f7ff fa7f 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fa90 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xC1);
 8001850:	20c1      	movs	r0, #193	; 0xc1
 8001852:	f7ff fa8d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0X30);
 8001856:	2030      	movs	r0, #48	; 0x30
 8001858:	f7ff fa8a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xED);
 800185c:	20ed      	movs	r0, #237	; 0xed
 800185e:	f7ff fa73 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x64);
 8001862:	2064      	movs	r0, #100	; 0x64
 8001864:	f7ff fa84 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 8001868:	2003      	movs	r0, #3
 800186a:	f7ff fa81 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0X12);
 800186e:	2012      	movs	r0, #18
 8001870:	f7ff fa7e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0X81);
 8001874:	2081      	movs	r0, #129	; 0x81
 8001876:	f7ff fa7b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xE8);
 800187a:	20e8      	movs	r0, #232	; 0xe8
 800187c:	f7ff fa64 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x85);
 8001880:	2085      	movs	r0, #133	; 0x85
 8001882:	f7ff fa75 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 8001886:	2010      	movs	r0, #16
 8001888:	f7ff fa72 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 800188c:	207a      	movs	r0, #122	; 0x7a
 800188e:	f7ff fa6f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xCB);
 8001892:	20cb      	movs	r0, #203	; 0xcb
 8001894:	f7ff fa58 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x39);
 8001898:	2039      	movs	r0, #57	; 0x39
 800189a:	f7ff fa69 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 800189e:	202c      	movs	r0, #44	; 0x2c
 80018a0:	f7ff fa66 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff fa63 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 80018aa:	2034      	movs	r0, #52	; 0x34
 80018ac:	f7ff fa60 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff fa5d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xF7);
 80018b6:	20f7      	movs	r0, #247	; 0xf7
 80018b8:	f7ff fa46 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x20);
 80018bc:	2020      	movs	r0, #32
 80018be:	f7ff fa57 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xEA);
 80018c2:	20ea      	movs	r0, #234	; 0xea
 80018c4:	f7ff fa40 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff fa51 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fa4e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xC0);       //Power control
 80018d4:	20c0      	movs	r0, #192	; 0xc0
 80018d6:	f7ff fa37 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x1B);      //VRH[5:0]
 80018da:	201b      	movs	r0, #27
 80018dc:	f7ff fa48 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xC1);       //Power control
 80018e0:	20c1      	movs	r0, #193	; 0xc1
 80018e2:	f7ff fa31 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x01);      //SAP[2:0];BT[3:0]
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff fa42 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xC5);       //VCM control
 80018ec:	20c5      	movs	r0, #197	; 0xc5
 80018ee:	f7ff fa2b 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x30);      //3F
 80018f2:	2030      	movs	r0, #48	; 0x30
 80018f4:	f7ff fa3c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x30);      //3C
 80018f8:	2030      	movs	r0, #48	; 0x30
 80018fa:	f7ff fa39 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xC7);       //VCM control2
 80018fe:	20c7      	movs	r0, #199	; 0xc7
 8001900:	f7ff fa22 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0XB7);
 8001904:	20b7      	movs	r0, #183	; 0xb7
 8001906:	f7ff fa33 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0x36);       // Memory Access Control
 800190a:	2036      	movs	r0, #54	; 0x36
 800190c:	f7ff fa1c 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x48);
 8001910:	2048      	movs	r0, #72	; 0x48
 8001912:	f7ff fa2d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0x3A);
 8001916:	203a      	movs	r0, #58	; 0x3a
 8001918:	f7ff fa16 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x55);
 800191c:	2055      	movs	r0, #85	; 0x55
 800191e:	f7ff fa27 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xB1);
 8001922:	20b1      	movs	r0, #177	; 0xb1
 8001924:	f7ff fa10 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fa21 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x1A);
 800192e:	201a      	movs	r0, #26
 8001930:	f7ff fa1e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xB6);       // Display Function Control
 8001934:	20b6      	movs	r0, #182	; 0xb6
 8001936:	f7ff fa07 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x0A);
 800193a:	200a      	movs	r0, #10
 800193c:	f7ff fa18 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 8001940:	20a2      	movs	r0, #162	; 0xa2
 8001942:	f7ff fa15 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xF2);       // 3Gamma Function Disable
 8001946:	20f2      	movs	r0, #242	; 0xf2
 8001948:	f7ff f9fe 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff fa0f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0x26);       //Gamma curve selected
 8001952:	2026      	movs	r0, #38	; 0x26
 8001954:	f7ff f9f8 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff fa09 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xE0);       //Set Gamma
 800195e:	20e0      	movs	r0, #224	; 0xe0
 8001960:	f7ff f9f2 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x0F);
 8001964:	200f      	movs	r0, #15
 8001966:	f7ff fa03 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 800196a:	202a      	movs	r0, #42	; 0x2a
 800196c:	f7ff fa00 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 8001970:	2028      	movs	r0, #40	; 0x28
 8001972:	f7ff f9fd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 8001976:	2008      	movs	r0, #8
 8001978:	f7ff f9fa 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0E);
 800197c:	200e      	movs	r0, #14
 800197e:	f7ff f9f7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 8001982:	2008      	movs	r0, #8
 8001984:	f7ff f9f4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 8001988:	2054      	movs	r0, #84	; 0x54
 800198a:	f7ff f9f1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0XA9);
 800198e:	20a9      	movs	r0, #169	; 0xa9
 8001990:	f7ff f9ee 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 8001994:	2043      	movs	r0, #67	; 0x43
 8001996:	f7ff f9eb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0A);
 800199a:	200a      	movs	r0, #10
 800199c:	f7ff f9e8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 80019a0:	200f      	movs	r0, #15
 80019a2:	f7ff f9e5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff f9e2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff f9df 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff f9dc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff f9d9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0XE1);       //Set Gamma
 80019be:	20e1      	movs	r0, #225	; 0xe1
 80019c0:	f7ff f9c2 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff f9d3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x15);
 80019ca:	2015      	movs	r0, #21
 80019cc:	f7ff f9d0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 80019d0:	2017      	movs	r0, #23
 80019d2:	f7ff f9cd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 80019d6:	2007      	movs	r0, #7
 80019d8:	f7ff f9ca 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 80019dc:	2011      	movs	r0, #17
 80019de:	f7ff f9c7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x06);
 80019e2:	2006      	movs	r0, #6
 80019e4:	f7ff f9c4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x2B);
 80019e8:	202b      	movs	r0, #43	; 0x2b
 80019ea:	f7ff f9c1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 80019ee:	2056      	movs	r0, #86	; 0x56
 80019f0:	f7ff f9be 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 80019f4:	203c      	movs	r0, #60	; 0x3c
 80019f6:	f7ff f9bb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 80019fa:	2005      	movs	r0, #5
 80019fc:	f7ff f9b8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 8001a00:	2010      	movs	r0, #16
 8001a02:	f7ff f9b5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 8001a06:	200f      	movs	r0, #15
 8001a08:	f7ff f9b2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 8001a0c:	203f      	movs	r0, #63	; 0x3f
 8001a0e:	f7ff f9af 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 8001a12:	203f      	movs	r0, #63	; 0x3f
 8001a14:	f7ff f9ac 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 8001a18:	200f      	movs	r0, #15
 8001a1a:	f7ff f9a9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0x2B);
 8001a1e:	202b      	movs	r0, #43	; 0x2b
 8001a20:	f7ff f992 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff f9a3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff f9a0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff f99d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3f);
 8001a36:	203f      	movs	r0, #63	; 0x3f
 8001a38:	f7ff f99a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0x2A);
 8001a3c:	202a      	movs	r0, #42	; 0x2a
 8001a3e:	f7ff f983 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff f994 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff f991 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff f98e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xef);
 8001a54:	20ef      	movs	r0, #239	; 0xef
 8001a56:	f7ff f98b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0x11);       //Exit Sleep
 8001a5a:	2011      	movs	r0, #17
 8001a5c:	f7ff f974 	bl	8000d48 <LCD_WR_REG>
        delay_ms(120);
 8001a60:	2078      	movs	r0, #120	; 0x78
 8001a62:	f7ff f965 	bl	8000d30 <delay_ms>
        LCD_WR_REG(0x29);       //display on
 8001a66:	2029      	movs	r0, #41	; 0x29
 8001a68:	f7ff f96e 	bl	8000d48 <LCD_WR_REG>
 8001a6c:	f002 b8a8 	b.w	8003bc0 <LCD_Init+0x25c0>
    }
    else if (lcddev.id == 0x7789)   //7789初始化
 8001a70:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <LCD_Init+0x628>)
 8001a72:	889b      	ldrh	r3, [r3, #4]
 8001a74:	f247 7289 	movw	r2, #30601	; 0x7789
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	f040 80d7 	bne.w	8001c2c <LCD_Init+0x62c>
    {
        LCD_WR_REG(0x11);
 8001a7e:	2011      	movs	r0, #17
 8001a80:	f7ff f962 	bl	8000d48 <LCD_WR_REG>

        delay_ms(120);
 8001a84:	2078      	movs	r0, #120	; 0x78
 8001a86:	f7ff f953 	bl	8000d30 <delay_ms>

        LCD_WR_REG(0x36);
 8001a8a:	2036      	movs	r0, #54	; 0x36
 8001a8c:	f7ff f95c 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff f96d 	bl	8000d70 <LCD_WR_DATA>


        LCD_WR_REG(0x3A);
 8001a96:	203a      	movs	r0, #58	; 0x3a
 8001a98:	f7ff f956 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0X05);
 8001a9c:	2005      	movs	r0, #5
 8001a9e:	f7ff f967 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB2);
 8001aa2:	20b2      	movs	r0, #178	; 0xb2
 8001aa4:	f7ff f950 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x0C);
 8001aa8:	200c      	movs	r0, #12
 8001aaa:	f7ff f961 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0C);
 8001aae:	200c      	movs	r0, #12
 8001ab0:	f7ff f95e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff f95b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 8001aba:	2033      	movs	r0, #51	; 0x33
 8001abc:	f7ff f958 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 8001ac0:	2033      	movs	r0, #51	; 0x33
 8001ac2:	f7ff f955 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB7);
 8001ac6:	20b7      	movs	r0, #183	; 0xb7
 8001ac8:	f7ff f93e 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x35);
 8001acc:	2035      	movs	r0, #53	; 0x35
 8001ace:	f7ff f94f 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xBB);       //vcom
 8001ad2:	20bb      	movs	r0, #187	; 0xbb
 8001ad4:	f7ff f938 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x32);      //30
 8001ad8:	2032      	movs	r0, #50	; 0x32
 8001ada:	f7ff f949 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC0);
 8001ade:	20c0      	movs	r0, #192	; 0xc0
 8001ae0:	f7ff f932 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x0C);
 8001ae4:	200c      	movs	r0, #12
 8001ae6:	f7ff f943 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC2);
 8001aea:	20c2      	movs	r0, #194	; 0xc2
 8001aec:	f7ff f92c 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff f93d 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC3);       //vrh
 8001af6:	20c3      	movs	r0, #195	; 0xc3
 8001af8:	f7ff f926 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x10);      //17 0D
 8001afc:	2010      	movs	r0, #16
 8001afe:	f7ff f937 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC4);       //vdv
 8001b02:	20c4      	movs	r0, #196	; 0xc4
 8001b04:	f7ff f920 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x20);      //20
 8001b08:	2020      	movs	r0, #32
 8001b0a:	f7ff f931 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC6);
 8001b0e:	20c6      	movs	r0, #198	; 0xc6
 8001b10:	f7ff f91a 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x0f);
 8001b14:	200f      	movs	r0, #15
 8001b16:	f7ff f92b 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xD0);
 8001b1a:	20d0      	movs	r0, #208	; 0xd0
 8001b1c:	f7ff f914 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0xA4);
 8001b20:	20a4      	movs	r0, #164	; 0xa4
 8001b22:	f7ff f925 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA1);
 8001b26:	20a1      	movs	r0, #161	; 0xa1
 8001b28:	f7ff f922 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xE0);       //Set Gamma
 8001b2c:	20e0      	movs	r0, #224	; 0xe0
 8001b2e:	f7ff f90b 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0xd0);
 8001b32:	20d0      	movs	r0, #208	; 0xd0
 8001b34:	f7ff f91c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff f919 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f7ff f916 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 8001b44:	2007      	movs	r0, #7
 8001b46:	f7ff f913 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0a);
 8001b4a:	200a      	movs	r0, #10
 8001b4c:	f7ff f910 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 8001b50:	2028      	movs	r0, #40	; 0x28
 8001b52:	f7ff f90d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 8001b56:	2032      	movs	r0, #50	; 0x32
 8001b58:	f7ff f90a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0X44);
 8001b5c:	2044      	movs	r0, #68	; 0x44
 8001b5e:	f7ff f907 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x42);
 8001b62:	2042      	movs	r0, #66	; 0x42
 8001b64:	f7ff f904 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x06);
 8001b68:	2006      	movs	r0, #6
 8001b6a:	f7ff f901 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0e);
 8001b6e:	200e      	movs	r0, #14
 8001b70:	f7ff f8fe 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x12);
 8001b74:	2012      	movs	r0, #18
 8001b76:	f7ff f8fb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x14);
 8001b7a:	2014      	movs	r0, #20
 8001b7c:	f7ff f8f8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8001b80:	2017      	movs	r0, #23
 8001b82:	f7ff f8f5 	bl	8000d70 <LCD_WR_DATA>


        LCD_WR_REG(0XE1);       //Set Gamma
 8001b86:	20e1      	movs	r0, #225	; 0xe1
 8001b88:	f7ff f8de 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0xd0);
 8001b8c:	20d0      	movs	r0, #208	; 0xd0
 8001b8e:	f7ff f8ef 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff f8ec 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f7ff f8e9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 8001b9e:	2007      	movs	r0, #7
 8001ba0:	f7ff f8e6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0a);
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f7ff f8e3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 8001baa:	2028      	movs	r0, #40	; 0x28
 8001bac:	f7ff f8e0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x31);
 8001bb0:	2031      	movs	r0, #49	; 0x31
 8001bb2:	f7ff f8dd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 8001bb6:	2054      	movs	r0, #84	; 0x54
 8001bb8:	f7ff f8da 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x47);
 8001bbc:	2047      	movs	r0, #71	; 0x47
 8001bbe:	f7ff f8d7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0e);
 8001bc2:	200e      	movs	r0, #14
 8001bc4:	f7ff f8d4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x1c);
 8001bc8:	201c      	movs	r0, #28
 8001bca:	f7ff f8d1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8001bce:	2017      	movs	r0, #23
 8001bd0:	f7ff f8ce 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x1b);
 8001bd4:	201b      	movs	r0, #27
 8001bd6:	f7ff f8cb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x1e);
 8001bda:	201e      	movs	r0, #30
 8001bdc:	f7ff f8c8 	bl	8000d70 <LCD_WR_DATA>


        LCD_WR_REG(0x2A);
 8001be0:	202a      	movs	r0, #42	; 0x2a
 8001be2:	f7ff f8b1 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff f8c2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff f8bf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff f8bc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xef);
 8001bf8:	20ef      	movs	r0, #239	; 0xef
 8001bfa:	f7ff f8b9 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0x2B);
 8001bfe:	202b      	movs	r0, #43	; 0x2b
 8001c00:	f7ff f8a2 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7ff f8b3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff f8b0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff f8ad 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3f);
 8001c16:	203f      	movs	r0, #63	; 0x3f
 8001c18:	f7ff f8aa 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0x29);       //display on
 8001c1c:	2029      	movs	r0, #41	; 0x29
 8001c1e:	f7ff f893 	bl	8000d48 <LCD_WR_REG>
 8001c22:	f001 bfcd 	b.w	8003bc0 <LCD_Init+0x25c0>
 8001c26:	bf00      	nop
 8001c28:	20000204 	.word	0x20000204
    }
    else if (lcddev.id == 0x5310)
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <LCD_Init+0x63c>)
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c34:	4293      	cmp	r3, r2
 8001c36:	f040 877c 	bne.w	8002b32 <LCD_Init+0x1532>
 8001c3a:	e001      	b.n	8001c40 <LCD_Init+0x640>
 8001c3c:	20000204 	.word	0x20000204
    {
        LCD_WR_REG(0xED);
 8001c40:	20ed      	movs	r0, #237	; 0xed
 8001c42:	f7ff f881 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff f892 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);
 8001c4c:	20fe      	movs	r0, #254	; 0xfe
 8001c4e:	f7ff f88f 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xEE);
 8001c52:	20ee      	movs	r0, #238	; 0xee
 8001c54:	f7ff f878 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0xDE);
 8001c58:	20de      	movs	r0, #222	; 0xde
 8001c5a:	f7ff f889 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 8001c5e:	2021      	movs	r0, #33	; 0x21
 8001c60:	f7ff f886 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xF1);
 8001c64:	20f1      	movs	r0, #241	; 0xf1
 8001c66:	f7ff f86f 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f7ff f880 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xDF);
 8001c70:	20df      	movs	r0, #223	; 0xdf
 8001c72:	f7ff f869 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x10);
 8001c76:	2010      	movs	r0, #16
 8001c78:	f7ff f87a 	bl	8000d70 <LCD_WR_DATA>

        //VCOMvoltage//
        LCD_WR_REG(0xC4);
 8001c7c:	20c4      	movs	r0, #196	; 0xc4
 8001c7e:	f7ff f863 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x8F);      //5f
 8001c82:	208f      	movs	r0, #143	; 0x8f
 8001c84:	f7ff f874 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC6);
 8001c88:	20c6      	movs	r0, #198	; 0xc6
 8001c8a:	f7ff f85d 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff f86e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 8001c94:	20e2      	movs	r0, #226	; 0xe2
 8001c96:	f7ff f86b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 8001c9a:	20e2      	movs	r0, #226	; 0xe2
 8001c9c:	f7ff f868 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 8001ca0:	20e2      	movs	r0, #226	; 0xe2
 8001ca2:	f7ff f865 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xBF);
 8001ca6:	20bf      	movs	r0, #191	; 0xbf
 8001ca8:	f7ff f84e 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0xAA);
 8001cac:	20aa      	movs	r0, #170	; 0xaa
 8001cae:	f7ff f85f 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB0);
 8001cb2:	20b0      	movs	r0, #176	; 0xb0
 8001cb4:	f7ff f848 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x0D);
 8001cb8:	200d      	movs	r0, #13
 8001cba:	f7ff f859 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7ff f856 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0D);
 8001cc4:	200d      	movs	r0, #13
 8001cc6:	f7ff f853 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff f850 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 8001cd0:	2011      	movs	r0, #17
 8001cd2:	f7ff f84d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff f84a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x19);
 8001cdc:	2019      	movs	r0, #25
 8001cde:	f7ff f847 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff f844 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 8001ce8:	2021      	movs	r0, #33	; 0x21
 8001cea:	f7ff f841 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff f83e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x2D);
 8001cf4:	202d      	movs	r0, #45	; 0x2d
 8001cf6:	f7ff f83b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff f838 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3D);
 8001d00:	203d      	movs	r0, #61	; 0x3d
 8001d02:	f7ff f835 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f832 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 8001d0c:	205d      	movs	r0, #93	; 0x5d
 8001d0e:	f7ff f82f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7ff f82c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 8001d18:	205d      	movs	r0, #93	; 0x5d
 8001d1a:	f7ff f829 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff f826 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB1);
 8001d24:	20b1      	movs	r0, #177	; 0xb1
 8001d26:	f7ff f80f 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x80);
 8001d2a:	2080      	movs	r0, #128	; 0x80
 8001d2c:	f7ff f820 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff f81d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 8001d36:	208b      	movs	r0, #139	; 0x8b
 8001d38:	f7ff f81a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff f817 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 8001d42:	2096      	movs	r0, #150	; 0x96
 8001d44:	f7ff f814 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff f811 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB2);
 8001d4e:	20b2      	movs	r0, #178	; 0xb2
 8001d50:	f7fe fffa 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff f80b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff f808 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7ff f805 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff f802 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f7fe ffff 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7fe fffc 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB3);
 8001d78:	20b3      	movs	r0, #179	; 0xb3
 8001d7a:	f7fe ffe5 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7fe fff6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7fe fff3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7fe fff0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7fe ffed 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7fe ffea 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7fe ffe7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7fe ffe4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7fe ffe1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7fe ffde 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7fe ffdb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7fe ffd8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7fe ffd5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7fe ffd2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7fe ffcf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7fe ffcc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7fe ffc9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7fe ffc6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7fe ffc3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7fe ffc0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7fe ffbd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7fe ffba 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7fe ffb7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7fe ffb4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7fe ffb1 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB4);
 8001e0e:	20b4      	movs	r0, #180	; 0xb4
 8001e10:	f7fe ff9a 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x8B);
 8001e14:	208b      	movs	r0, #139	; 0x8b
 8001e16:	f7fe ffab 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f7fe ffa8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 8001e20:	2096      	movs	r0, #150	; 0x96
 8001e22:	f7fe ffa5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7fe ffa2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA1);
 8001e2c:	20a1      	movs	r0, #161	; 0xa1
 8001e2e:	f7fe ff9f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7fe ff9c 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB5);
 8001e38:	20b5      	movs	r0, #181	; 0xb5
 8001e3a:	f7fe ff85 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x02);
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f7fe ff96 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7fe ff93 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f7fe ff90 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7fe ff8d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 8001e56:	2004      	movs	r0, #4
 8001e58:	f7fe ff8a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7fe ff87 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB6);
 8001e62:	20b6      	movs	r0, #182	; 0xb6
 8001e64:	f7fe ff70 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7fe ff81 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7fe ff7e 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB7);
 8001e74:	20b7      	movs	r0, #183	; 0xb7
 8001e76:	f7fe ff67 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7fe ff78 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7fe ff75 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 8001e86:	203f      	movs	r0, #63	; 0x3f
 8001e88:	f7fe ff72 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7fe ff6f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x5E);
 8001e92:	205e      	movs	r0, #94	; 0x5e
 8001e94:	f7fe ff6c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7fe ff69 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 8001e9e:	2064      	movs	r0, #100	; 0x64
 8001ea0:	f7fe ff66 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7fe ff63 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x8C);
 8001eaa:	208c      	movs	r0, #140	; 0x8c
 8001eac:	f7fe ff60 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7fe ff5d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xAC);
 8001eb6:	20ac      	movs	r0, #172	; 0xac
 8001eb8:	f7fe ff5a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7fe ff57 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 8001ec2:	20dc      	movs	r0, #220	; 0xdc
 8001ec4:	f7fe ff54 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7fe ff51 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x70);
 8001ece:	2070      	movs	r0, #112	; 0x70
 8001ed0:	f7fe ff4e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7fe ff4b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x90);
 8001eda:	2090      	movs	r0, #144	; 0x90
 8001edc:	f7fe ff48 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7fe ff45 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xEB);
 8001ee6:	20eb      	movs	r0, #235	; 0xeb
 8001ee8:	f7fe ff42 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7fe ff3f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 8001ef2:	20dc      	movs	r0, #220	; 0xdc
 8001ef4:	f7fe ff3c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7fe ff39 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB8);
 8001efe:	20b8      	movs	r0, #184	; 0xb8
 8001f00:	f7fe ff22 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7fe ff33 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7fe ff30 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7fe ff2d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7fe ff2a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7fe ff27 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7fe ff24 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f7fe ff21 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7fe ff1e 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xBA);
 8001f34:	20ba      	movs	r0, #186	; 0xba
 8001f36:	f7fe ff07 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x24);
 8001f3a:	2024      	movs	r0, #36	; 0x24
 8001f3c:	f7fe ff18 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7fe ff15 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7fe ff12 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7fe ff0f 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC1);
 8001f52:	20c1      	movs	r0, #193	; 0xc1
 8001f54:	f7fe fef8 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x20);
 8001f58:	2020      	movs	r0, #32
 8001f5a:	f7fe ff09 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7fe ff06 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 8001f64:	2054      	movs	r0, #84	; 0x54
 8001f66:	f7fe ff03 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7fe ff00 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 8001f70:	20ff      	movs	r0, #255	; 0xff
 8001f72:	f7fe fefd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f7fe fefa 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC2);
 8001f7c:	20c2      	movs	r0, #194	; 0xc2
 8001f7e:	f7fe fee3 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x0A);
 8001f82:	200a      	movs	r0, #10
 8001f84:	f7fe fef4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7fe fef1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 8001f8e:	2004      	movs	r0, #4
 8001f90:	f7fe feee 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7fe feeb 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC3);
 8001f9a:	20c3      	movs	r0, #195	; 0xc3
 8001f9c:	f7fe fed4 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x3C);
 8001fa0:	203c      	movs	r0, #60	; 0x3c
 8001fa2:	f7fe fee5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7fe fee2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3A);
 8001fac:	203a      	movs	r0, #58	; 0x3a
 8001fae:	f7fe fedf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7fe fedc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x39);
 8001fb8:	2039      	movs	r0, #57	; 0x39
 8001fba:	f7fe fed9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7fe fed6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x37);
 8001fc4:	2037      	movs	r0, #55	; 0x37
 8001fc6:	f7fe fed3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7fe fed0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 8001fd0:	203c      	movs	r0, #60	; 0x3c
 8001fd2:	f7fe fecd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7fe feca 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 8001fdc:	2036      	movs	r0, #54	; 0x36
 8001fde:	f7fe fec7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7fe fec4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 8001fe8:	2032      	movs	r0, #50	; 0x32
 8001fea:	f7fe fec1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7fe febe 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 8001ff4:	202f      	movs	r0, #47	; 0x2f
 8001ff6:	f7fe febb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7fe feb8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 8002000:	202c      	movs	r0, #44	; 0x2c
 8002002:	f7fe feb5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002006:	2000      	movs	r0, #0
 8002008:	f7fe feb2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 800200c:	2029      	movs	r0, #41	; 0x29
 800200e:	f7fe feaf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002012:	2000      	movs	r0, #0
 8002014:	f7fe feac 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 8002018:	2026      	movs	r0, #38	; 0x26
 800201a:	f7fe fea9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800201e:	2000      	movs	r0, #0
 8002020:	f7fe fea6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 8002024:	2024      	movs	r0, #36	; 0x24
 8002026:	f7fe fea3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800202a:	2000      	movs	r0, #0
 800202c:	f7fe fea0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 8002030:	2024      	movs	r0, #36	; 0x24
 8002032:	f7fe fe9d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002036:	2000      	movs	r0, #0
 8002038:	f7fe fe9a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 800203c:	2023      	movs	r0, #35	; 0x23
 800203e:	f7fe fe97 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002042:	2000      	movs	r0, #0
 8002044:	f7fe fe94 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 8002048:	203c      	movs	r0, #60	; 0x3c
 800204a:	f7fe fe91 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800204e:	2000      	movs	r0, #0
 8002050:	f7fe fe8e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 8002054:	2036      	movs	r0, #54	; 0x36
 8002056:	f7fe fe8b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f7fe fe88 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 8002060:	2032      	movs	r0, #50	; 0x32
 8002062:	f7fe fe85 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002066:	2000      	movs	r0, #0
 8002068:	f7fe fe82 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 800206c:	202f      	movs	r0, #47	; 0x2f
 800206e:	f7fe fe7f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002072:	2000      	movs	r0, #0
 8002074:	f7fe fe7c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 8002078:	202c      	movs	r0, #44	; 0x2c
 800207a:	f7fe fe79 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f7fe fe76 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 8002084:	2029      	movs	r0, #41	; 0x29
 8002086:	f7fe fe73 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800208a:	2000      	movs	r0, #0
 800208c:	f7fe fe70 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 8002090:	2026      	movs	r0, #38	; 0x26
 8002092:	f7fe fe6d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002096:	2000      	movs	r0, #0
 8002098:	f7fe fe6a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 800209c:	2024      	movs	r0, #36	; 0x24
 800209e:	f7fe fe67 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7fe fe64 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 80020a8:	2024      	movs	r0, #36	; 0x24
 80020aa:	f7fe fe61 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7fe fe5e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 80020b4:	2023      	movs	r0, #35	; 0x23
 80020b6:	f7fe fe5b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7fe fe58 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC4);
 80020c0:	20c4      	movs	r0, #196	; 0xc4
 80020c2:	f7fe fe41 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x62);
 80020c6:	2062      	movs	r0, #98	; 0x62
 80020c8:	f7fe fe52 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7fe fe4f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 80020d2:	2005      	movs	r0, #5
 80020d4:	f7fe fe4c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7fe fe49 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 80020de:	2084      	movs	r0, #132	; 0x84
 80020e0:	f7fe fe46 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7fe fe43 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xF0);
 80020ea:	20f0      	movs	r0, #240	; 0xf0
 80020ec:	f7fe fe40 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7fe fe3d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 80020f6:	2018      	movs	r0, #24
 80020f8:	f7fe fe3a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7fe fe37 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA4);
 8002102:	20a4      	movs	r0, #164	; 0xa4
 8002104:	f7fe fe34 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002108:	2000      	movs	r0, #0
 800210a:	f7fe fe31 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 800210e:	2018      	movs	r0, #24
 8002110:	f7fe fe2e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002114:	2000      	movs	r0, #0
 8002116:	f7fe fe2b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 800211a:	2050      	movs	r0, #80	; 0x50
 800211c:	f7fe fe28 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002120:	2000      	movs	r0, #0
 8002122:	f7fe fe25 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0C);
 8002126:	200c      	movs	r0, #12
 8002128:	f7fe fe22 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800212c:	2000      	movs	r0, #0
 800212e:	f7fe fe1f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8002132:	2017      	movs	r0, #23
 8002134:	f7fe fe1c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002138:	2000      	movs	r0, #0
 800213a:	f7fe fe19 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x95);
 800213e:	2095      	movs	r0, #149	; 0x95
 8002140:	f7fe fe16 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f7fe fe13 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 800214a:	20f3      	movs	r0, #243	; 0xf3
 800214c:	f7fe fe10 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002150:	2000      	movs	r0, #0
 8002152:	f7fe fe0d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xE6);
 8002156:	20e6      	movs	r0, #230	; 0xe6
 8002158:	f7fe fe0a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800215c:	2000      	movs	r0, #0
 800215e:	f7fe fe07 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC5);
 8002162:	20c5      	movs	r0, #197	; 0xc5
 8002164:	f7fe fdf0 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x32);
 8002168:	2032      	movs	r0, #50	; 0x32
 800216a:	f7fe fe01 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800216e:	2000      	movs	r0, #0
 8002170:	f7fe fdfe 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 8002174:	2044      	movs	r0, #68	; 0x44
 8002176:	f7fe fdfb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800217a:	2000      	movs	r0, #0
 800217c:	f7fe fdf8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x65);
 8002180:	2065      	movs	r0, #101	; 0x65
 8002182:	f7fe fdf5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002186:	2000      	movs	r0, #0
 8002188:	f7fe fdf2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 800218c:	2076      	movs	r0, #118	; 0x76
 800218e:	f7fe fdef 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002192:	2000      	movs	r0, #0
 8002194:	f7fe fdec 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 8002198:	2088      	movs	r0, #136	; 0x88
 800219a:	f7fe fde9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800219e:	2000      	movs	r0, #0
 80021a0:	f7fe fde6 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC6);
 80021a4:	20c6      	movs	r0, #198	; 0xc6
 80021a6:	f7fe fdcf 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x20);
 80021aa:	2020      	movs	r0, #32
 80021ac:	f7fe fde0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe fddd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 80021b6:	2017      	movs	r0, #23
 80021b8:	f7fe fdda 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021bc:	2000      	movs	r0, #0
 80021be:	f7fe fdd7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7fe fdd4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7fe fdd1 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC7);
 80021ce:	20c7      	movs	r0, #199	; 0xc7
 80021d0:	f7fe fdba 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7fe fdcb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7fe fdc8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe fdc5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7fe fdc2 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC8);
 80021ec:	20c8      	movs	r0, #200	; 0xc8
 80021ee:	f7fe fdab 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7fe fdbc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7fe fdb9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe fdb6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002204:	2000      	movs	r0, #0
 8002206:	f7fe fdb3 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xC9);
 800220a:	20c9      	movs	r0, #201	; 0xc9
 800220c:	f7fe fd9c 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002210:	2000      	movs	r0, #0
 8002212:	f7fe fdad 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002216:	2000      	movs	r0, #0
 8002218:	f7fe fdaa 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800221c:	2000      	movs	r0, #0
 800221e:	f7fe fda7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002222:	2000      	movs	r0, #0
 8002224:	f7fe fda4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe fda1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800222e:	2000      	movs	r0, #0
 8002230:	f7fe fd9e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f7fe fd9b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800223a:	2000      	movs	r0, #0
 800223c:	f7fe fd98 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002240:	2000      	movs	r0, #0
 8002242:	f7fe fd95 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002246:	2000      	movs	r0, #0
 8002248:	f7fe fd92 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe fd8f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002252:	2000      	movs	r0, #0
 8002254:	f7fe fd8c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002258:	2000      	movs	r0, #0
 800225a:	f7fe fd89 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe fd86 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002264:	2000      	movs	r0, #0
 8002266:	f7fe fd83 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe fd80 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xE0);
 8002270:	20e0      	movs	r0, #224	; 0xe0
 8002272:	f7fe fd69 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x16);
 8002276:	2016      	movs	r0, #22
 8002278:	f7fe fd7a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800227c:	2000      	movs	r0, #0
 800227e:	f7fe fd77 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 8002282:	201c      	movs	r0, #28
 8002284:	f7fe fd74 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002288:	2000      	movs	r0, #0
 800228a:	f7fe fd71 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 800228e:	2021      	movs	r0, #33	; 0x21
 8002290:	f7fe fd6e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fd6b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 800229a:	2036      	movs	r0, #54	; 0x36
 800229c:	f7fe fd68 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7fe fd65 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x46);
 80022a6:	2046      	movs	r0, #70	; 0x46
 80022a8:	f7fe fd62 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7fe fd5f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 80022b2:	2052      	movs	r0, #82	; 0x52
 80022b4:	f7fe fd5c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe fd59 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 80022be:	2064      	movs	r0, #100	; 0x64
 80022c0:	f7fe fd56 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe fd53 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 80022ca:	207a      	movs	r0, #122	; 0x7a
 80022cc:	f7fe fd50 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7fe fd4d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 80022d6:	208b      	movs	r0, #139	; 0x8b
 80022d8:	f7fe fd4a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7fe fd47 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 80022e2:	2099      	movs	r0, #153	; 0x99
 80022e4:	f7fe fd44 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7fe fd41 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 80022ee:	20a8      	movs	r0, #168	; 0xa8
 80022f0:	f7fe fd3e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7fe fd3b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 80022fa:	20b9      	movs	r0, #185	; 0xb9
 80022fc:	f7fe fd38 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7fe fd35 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 8002306:	20c4      	movs	r0, #196	; 0xc4
 8002308:	f7fe fd32 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800230c:	2000      	movs	r0, #0
 800230e:	f7fe fd2f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 8002312:	20ca      	movs	r0, #202	; 0xca
 8002314:	f7fe fd2c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fd29 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 800231e:	20d2      	movs	r0, #210	; 0xd2
 8002320:	f7fe fd26 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7fe fd23 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD9);
 800232a:	20d9      	movs	r0, #217	; 0xd9
 800232c:	f7fe fd20 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002330:	2000      	movs	r0, #0
 8002332:	f7fe fd1d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 8002336:	20e0      	movs	r0, #224	; 0xe0
 8002338:	f7fe fd1a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800233c:	2000      	movs	r0, #0
 800233e:	f7fe fd17 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 8002342:	20f3      	movs	r0, #243	; 0xf3
 8002344:	f7fe fd14 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002348:	2000      	movs	r0, #0
 800234a:	f7fe fd11 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xE1);
 800234e:	20e1      	movs	r0, #225	; 0xe1
 8002350:	f7fe fcfa 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x16);
 8002354:	2016      	movs	r0, #22
 8002356:	f7fe fd0b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe fd08 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 8002360:	201c      	movs	r0, #28
 8002362:	f7fe fd05 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe fd02 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x22);
 800236c:	2022      	movs	r0, #34	; 0x22
 800236e:	f7fe fcff 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002372:	2000      	movs	r0, #0
 8002374:	f7fe fcfc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 8002378:	2036      	movs	r0, #54	; 0x36
 800237a:	f7fe fcf9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800237e:	2000      	movs	r0, #0
 8002380:	f7fe fcf6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 8002384:	2045      	movs	r0, #69	; 0x45
 8002386:	f7fe fcf3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800238a:	2000      	movs	r0, #0
 800238c:	f7fe fcf0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 8002390:	2052      	movs	r0, #82	; 0x52
 8002392:	f7fe fced 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fcea 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 800239c:	2064      	movs	r0, #100	; 0x64
 800239e:	f7fe fce7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7fe fce4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 80023a8:	207a      	movs	r0, #122	; 0x7a
 80023aa:	f7fe fce1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7fe fcde 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 80023b4:	208b      	movs	r0, #139	; 0x8b
 80023b6:	f7fe fcdb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fe fcd8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 80023c0:	2099      	movs	r0, #153	; 0x99
 80023c2:	f7fe fcd5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe fcd2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 80023cc:	20a8      	movs	r0, #168	; 0xa8
 80023ce:	f7fe fccf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe fccc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 80023d8:	20b9      	movs	r0, #185	; 0xb9
 80023da:	f7fe fcc9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fcc6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 80023e4:	20c4      	movs	r0, #196	; 0xc4
 80023e6:	f7fe fcc3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7fe fcc0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 80023f0:	20ca      	movs	r0, #202	; 0xca
 80023f2:	f7fe fcbd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fcba 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 80023fc:	20d2      	movs	r0, #210	; 0xd2
 80023fe:	f7fe fcb7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002402:	2000      	movs	r0, #0
 8002404:	f7fe fcb4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD8);
 8002408:	20d8      	movs	r0, #216	; 0xd8
 800240a:	f7fe fcb1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800240e:	2000      	movs	r0, #0
 8002410:	f7fe fcae 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 8002414:	20e0      	movs	r0, #224	; 0xe0
 8002416:	f7fe fcab 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800241a:	2000      	movs	r0, #0
 800241c:	f7fe fca8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 8002420:	20f3      	movs	r0, #243	; 0xf3
 8002422:	f7fe fca5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002426:	2000      	movs	r0, #0
 8002428:	f7fe fca2 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xE2);
 800242c:	20e2      	movs	r0, #226	; 0xe2
 800242e:	f7fe fc8b 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x05);
 8002432:	2005      	movs	r0, #5
 8002434:	f7fe fc9c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fc99 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x0B);
 800243e:	200b      	movs	r0, #11
 8002440:	f7fe fc96 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe fc93 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x1B);
 800244a:	201b      	movs	r0, #27
 800244c:	f7fe fc90 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe fc8d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 8002456:	2034      	movs	r0, #52	; 0x34
 8002458:	f7fe fc8a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe fc87 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 8002462:	2044      	movs	r0, #68	; 0x44
 8002464:	f7fe fc84 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe fc81 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x4F);
 800246e:	204f      	movs	r0, #79	; 0x4f
 8002470:	f7fe fc7e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe fc7b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x61);
 800247a:	2061      	movs	r0, #97	; 0x61
 800247c:	f7fe fc78 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe fc75 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x79);
 8002486:	2079      	movs	r0, #121	; 0x79
 8002488:	f7fe fc72 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe fc6f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 8002492:	2088      	movs	r0, #136	; 0x88
 8002494:	f7fe fc6c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002498:	2000      	movs	r0, #0
 800249a:	f7fe fc69 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 800249e:	2097      	movs	r0, #151	; 0x97
 80024a0:	f7fe fc66 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe fc63 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 80024aa:	20a6      	movs	r0, #166	; 0xa6
 80024ac:	f7fe fc60 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fc5d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 80024b6:	20b7      	movs	r0, #183	; 0xb7
 80024b8:	f7fe fc5a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024bc:	2000      	movs	r0, #0
 80024be:	f7fe fc57 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 80024c2:	20c2      	movs	r0, #194	; 0xc2
 80024c4:	f7fe fc54 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7fe fc51 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 80024ce:	20c7      	movs	r0, #199	; 0xc7
 80024d0:	f7fe fc4e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7fe fc4b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 80024da:	20d1      	movs	r0, #209	; 0xd1
 80024dc:	f7fe fc48 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7fe fc45 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD6);
 80024e6:	20d6      	movs	r0, #214	; 0xd6
 80024e8:	f7fe fc42 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fc3f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 80024f2:	20dd      	movs	r0, #221	; 0xdd
 80024f4:	f7fe fc3c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe fc39 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 80024fe:	20f3      	movs	r0, #243	; 0xf3
 8002500:	f7fe fc36 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002504:	2000      	movs	r0, #0
 8002506:	f7fe fc33 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xE3);
 800250a:	20e3      	movs	r0, #227	; 0xe3
 800250c:	f7fe fc1c 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x05);
 8002510:	2005      	movs	r0, #5
 8002512:	f7fe fc2d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fc2a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA);
 800251c:	200a      	movs	r0, #10
 800251e:	f7fe fc27 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe fc24 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 8002528:	201c      	movs	r0, #28
 800252a:	f7fe fc21 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe fc1e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 8002534:	2033      	movs	r0, #51	; 0x33
 8002536:	f7fe fc1b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe fc18 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 8002540:	2044      	movs	r0, #68	; 0x44
 8002542:	f7fe fc15 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe fc12 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 800254c:	2050      	movs	r0, #80	; 0x50
 800254e:	f7fe fc0f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe fc0c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x62);
 8002558:	2062      	movs	r0, #98	; 0x62
 800255a:	f7fe fc09 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe fc06 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x78);
 8002564:	2078      	movs	r0, #120	; 0x78
 8002566:	f7fe fc03 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe fc00 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 8002570:	2088      	movs	r0, #136	; 0x88
 8002572:	f7fe fbfd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe fbfa 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 800257c:	2097      	movs	r0, #151	; 0x97
 800257e:	f7fe fbf7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe fbf4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 8002588:	20a6      	movs	r0, #166	; 0xa6
 800258a:	f7fe fbf1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe fbee 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 8002594:	20b7      	movs	r0, #183	; 0xb7
 8002596:	f7fe fbeb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fbe8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 80025a0:	20c2      	movs	r0, #194	; 0xc2
 80025a2:	f7fe fbe5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fbe2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 80025ac:	20c7      	movs	r0, #199	; 0xc7
 80025ae:	f7fe fbdf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe fbdc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 80025b8:	20d1      	movs	r0, #209	; 0xd1
 80025ba:	f7fe fbd9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe fbd6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD5);
 80025c4:	20d5      	movs	r0, #213	; 0xd5
 80025c6:	f7fe fbd3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fbd0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 80025d0:	20dd      	movs	r0, #221	; 0xdd
 80025d2:	f7fe fbcd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe fbca 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 80025dc:	20f3      	movs	r0, #243	; 0xf3
 80025de:	f7fe fbc7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fbc4 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xE4);
 80025e8:	20e4      	movs	r0, #228	; 0xe4
 80025ea:	f7fe fbad 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7fe fbbe 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe fbbb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f7fe fbb8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe fbb5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8002606:	2002      	movs	r0, #2
 8002608:	f7fe fbb2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe fbaf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 8002612:	202a      	movs	r0, #42	; 0x2a
 8002614:	f7fe fbac 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe fba9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 800261e:	203c      	movs	r0, #60	; 0x3c
 8002620:	f7fe fba6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe fba3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 800262a:	204b      	movs	r0, #75	; 0x4b
 800262c:	f7fe fba0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe fb9d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 8002636:	205d      	movs	r0, #93	; 0x5d
 8002638:	f7fe fb9a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe fb97 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 8002642:	2074      	movs	r0, #116	; 0x74
 8002644:	f7fe fb94 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe fb91 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 800264e:	2084      	movs	r0, #132	; 0x84
 8002650:	f7fe fb8e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe fb8b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 800265a:	2093      	movs	r0, #147	; 0x93
 800265c:	f7fe fb88 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe fb85 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 8002666:	20a2      	movs	r0, #162	; 0xa2
 8002668:	f7fe fb82 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fb7f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 8002672:	20b3      	movs	r0, #179	; 0xb3
 8002674:	f7fe fb7c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe fb79 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 800267e:	20be      	movs	r0, #190	; 0xbe
 8002680:	f7fe fb76 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe fb73 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 800268a:	20c4      	movs	r0, #196	; 0xc4
 800268c:	f7fe fb70 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fb6d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 8002696:	20cd      	movs	r0, #205	; 0xcd
 8002698:	f7fe fb6a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe fb67 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 80026a2:	20d3      	movs	r0, #211	; 0xd3
 80026a4:	f7fe fb64 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe fb61 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 80026ae:	20dd      	movs	r0, #221	; 0xdd
 80026b0:	f7fe fb5e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe fb5b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 80026ba:	20f3      	movs	r0, #243	; 0xf3
 80026bc:	f7fe fb58 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fb55 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xE5);
 80026c6:	20e5      	movs	r0, #229	; 0xe5
 80026c8:	f7fe fb3e 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe fb4f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe fb4c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe fb49 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe fb46 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 80026e4:	2002      	movs	r0, #2
 80026e6:	f7fe fb43 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe fb40 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 80026f0:	2029      	movs	r0, #41	; 0x29
 80026f2:	f7fe fb3d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe fb3a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 80026fc:	203c      	movs	r0, #60	; 0x3c
 80026fe:	f7fe fb37 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fb34 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 8002708:	204b      	movs	r0, #75	; 0x4b
 800270a:	f7fe fb31 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800270e:	2000      	movs	r0, #0
 8002710:	f7fe fb2e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 8002714:	205d      	movs	r0, #93	; 0x5d
 8002716:	f7fe fb2b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800271a:	2000      	movs	r0, #0
 800271c:	f7fe fb28 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 8002720:	2074      	movs	r0, #116	; 0x74
 8002722:	f7fe fb25 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002726:	2000      	movs	r0, #0
 8002728:	f7fe fb22 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 800272c:	2084      	movs	r0, #132	; 0x84
 800272e:	f7fe fb1f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fb1c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 8002738:	2093      	movs	r0, #147	; 0x93
 800273a:	f7fe fb19 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe fb16 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 8002744:	20a2      	movs	r0, #162	; 0xa2
 8002746:	f7fe fb13 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fb10 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 8002750:	20b3      	movs	r0, #179	; 0xb3
 8002752:	f7fe fb0d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fb0a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 800275c:	20be      	movs	r0, #190	; 0xbe
 800275e:	f7fe fb07 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fb04 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 8002768:	20c4      	movs	r0, #196	; 0xc4
 800276a:	f7fe fb01 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe fafe 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 8002774:	20cd      	movs	r0, #205	; 0xcd
 8002776:	f7fe fafb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7fe faf8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 8002780:	20d3      	movs	r0, #211	; 0xd3
 8002782:	f7fe faf5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe faf2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 800278c:	20dc      	movs	r0, #220	; 0xdc
 800278e:	f7fe faef 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe faec 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 8002798:	20f3      	movs	r0, #243	; 0xf3
 800279a:	f7fe fae9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe fae6 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xE6);
 80027a4:	20e6      	movs	r0, #230	; 0xe6
 80027a6:	f7fe facf 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x11);
 80027aa:	2011      	movs	r0, #17
 80027ac:	f7fe fae0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe fadd 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 80027b6:	2034      	movs	r0, #52	; 0x34
 80027b8:	f7fe fada 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe fad7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 80027c2:	2056      	movs	r0, #86	; 0x56
 80027c4:	f7fe fad4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe fad1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 80027ce:	2076      	movs	r0, #118	; 0x76
 80027d0:	f7fe face 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe facb 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 80027da:	2077      	movs	r0, #119	; 0x77
 80027dc:	f7fe fac8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fac5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 80027e6:	2066      	movs	r0, #102	; 0x66
 80027e8:	f7fe fac2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fabf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 80027f2:	2088      	movs	r0, #136	; 0x88
 80027f4:	f7fe fabc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe fab9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 80027fe:	2099      	movs	r0, #153	; 0x99
 8002800:	f7fe fab6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe fab3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 800280a:	20bb      	movs	r0, #187	; 0xbb
 800280c:	f7fe fab0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe faad 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8002816:	2099      	movs	r0, #153	; 0x99
 8002818:	f7fe faaa 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe faa7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 8002822:	2066      	movs	r0, #102	; 0x66
 8002824:	f7fe faa4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe faa1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 800282e:	2055      	movs	r0, #85	; 0x55
 8002830:	f7fe fa9e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fa9b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 800283a:	2055      	movs	r0, #85	; 0x55
 800283c:	f7fe fa98 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fa95 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 8002846:	2045      	movs	r0, #69	; 0x45
 8002848:	f7fe fa92 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe fa8f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 8002852:	2043      	movs	r0, #67	; 0x43
 8002854:	f7fe fa8c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fa89 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 800285e:	2044      	movs	r0, #68	; 0x44
 8002860:	f7fe fa86 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe fa83 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xE7);
 800286a:	20e7      	movs	r0, #231	; 0xe7
 800286c:	f7fe fa6c 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x32);
 8002870:	2032      	movs	r0, #50	; 0x32
 8002872:	f7fe fa7d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fa7a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 800287c:	2055      	movs	r0, #85	; 0x55
 800287e:	f7fe fa77 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe fa74 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 8002888:	2076      	movs	r0, #118	; 0x76
 800288a:	f7fe fa71 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe fa6e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 8002894:	2066      	movs	r0, #102	; 0x66
 8002896:	f7fe fa6b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe fa68 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 80028a0:	2067      	movs	r0, #103	; 0x67
 80028a2:	f7fe fa65 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe fa62 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 80028ac:	2067      	movs	r0, #103	; 0x67
 80028ae:	f7fe fa5f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fa5c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 80028b8:	2087      	movs	r0, #135	; 0x87
 80028ba:	f7fe fa59 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe fa56 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 80028c4:	2099      	movs	r0, #153	; 0x99
 80028c6:	f7fe fa53 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe fa50 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 80028d0:	20bb      	movs	r0, #187	; 0xbb
 80028d2:	f7fe fa4d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe fa4a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 80028dc:	2099      	movs	r0, #153	; 0x99
 80028de:	f7fe fa47 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe fa44 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 80028e8:	2077      	movs	r0, #119	; 0x77
 80028ea:	f7fe fa41 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fa3e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80028f4:	2044      	movs	r0, #68	; 0x44
 80028f6:	f7fe fa3b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fa38 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 8002900:	2056      	movs	r0, #86	; 0x56
 8002902:	f7fe fa35 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fa32 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 800290c:	2023      	movs	r0, #35	; 0x23
 800290e:	f7fe fa2f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe fa2c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 8002918:	2033      	movs	r0, #51	; 0x33
 800291a:	f7fe fa29 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe fa26 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 8002924:	2045      	movs	r0, #69	; 0x45
 8002926:	f7fe fa23 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe fa20 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xE8);
 8002930:	20e8      	movs	r0, #232	; 0xe8
 8002932:	f7fe fa09 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe fa1a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800293c:	2000      	movs	r0, #0
 800293e:	f7fe fa17 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8002942:	2099      	movs	r0, #153	; 0x99
 8002944:	f7fe fa14 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002948:	2000      	movs	r0, #0
 800294a:	f7fe fa11 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 800294e:	2087      	movs	r0, #135	; 0x87
 8002950:	f7fe fa0e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002954:	2000      	movs	r0, #0
 8002956:	f7fe fa0b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 800295a:	2088      	movs	r0, #136	; 0x88
 800295c:	f7fe fa08 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7fe fa05 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 8002966:	2077      	movs	r0, #119	; 0x77
 8002968:	f7fe fa02 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe f9ff 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 8002972:	2066      	movs	r0, #102	; 0x66
 8002974:	f7fe f9fc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe f9f9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 800297e:	2088      	movs	r0, #136	; 0x88
 8002980:	f7fe f9f6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe f9f3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xAA);
 800298a:	20aa      	movs	r0, #170	; 0xaa
 800298c:	f7fe f9f0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe f9ed 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 8002996:	20bb      	movs	r0, #187	; 0xbb
 8002998:	f7fe f9ea 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe f9e7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 80029a2:	2099      	movs	r0, #153	; 0x99
 80029a4:	f7fe f9e4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe f9e1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 80029ae:	2066      	movs	r0, #102	; 0x66
 80029b0:	f7fe f9de 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe f9db 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 80029ba:	2055      	movs	r0, #85	; 0x55
 80029bc:	f7fe f9d8 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe f9d5 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 80029c6:	2055      	movs	r0, #85	; 0x55
 80029c8:	f7fe f9d2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe f9cf 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80029d2:	2044      	movs	r0, #68	; 0x44
 80029d4:	f7fe f9cc 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe f9c9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80029de:	2044      	movs	r0, #68	; 0x44
 80029e0:	f7fe f9c6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe f9c3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 80029ea:	2055      	movs	r0, #85	; 0x55
 80029ec:	f7fe f9c0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe f9bd 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xE9);
 80029f6:	20e9      	movs	r0, #233	; 0xe9
 80029f8:	f7fe f9a6 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0xAA);
 80029fc:	20aa      	movs	r0, #170	; 0xaa
 80029fe:	f7fe f9b7 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe f9b4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe f9b1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fe f9ae 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe f997 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0xAA);
 8002a1a:	20aa      	movs	r0, #170	; 0xaa
 8002a1c:	f7fe f9a8 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xCF);
 8002a20:	20cf      	movs	r0, #207	; 0xcf
 8002a22:	f7fe f991 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fe f9a2 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe f99f 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe f99c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe f999 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fe f996 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe f993 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fe f990 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe f98d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7fe f98a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe f987 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fe f984 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fe f981 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe f97e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fe f97b 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fe f978 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fe f975 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe f972 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xF0);
 8002a8c:	20f0      	movs	r0, #240	; 0xf0
 8002a8e:	f7fe f95b 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fe f96c 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 8002a98:	2050      	movs	r0, #80	; 0x50
 8002a9a:	f7fe f969 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe f966 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fe f963 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fe f960 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xF3);
 8002ab0:	20f3      	movs	r0, #243	; 0xf3
 8002ab2:	f7fe f949 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fe f95a 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xF9);
 8002abc:	20f9      	movs	r0, #249	; 0xf9
 8002abe:	f7fe f943 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x06);
 8002ac2:	2006      	movs	r0, #6
 8002ac4:	f7fe f954 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 8002ac8:	2010      	movs	r0, #16
 8002aca:	f7fe f951 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 8002ace:	2029      	movs	r0, #41	; 0x29
 8002ad0:	f7fe f94e 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fe f94b 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0x3A);
 8002ada:	203a      	movs	r0, #58	; 0x3a
 8002adc:	f7fe f934 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x55);	//66
 8002ae0:	2055      	movs	r0, #85	; 0x55
 8002ae2:	f7fe f945 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0x11);
 8002ae6:	2011      	movs	r0, #17
 8002ae8:	f7fe f92e 	bl	8000d48 <LCD_WR_REG>
        delay_ms(100);
 8002aec:	2064      	movs	r0, #100	; 0x64
 8002aee:	f7fe f91f 	bl	8000d30 <delay_ms>
        LCD_WR_REG(0x29);
 8002af2:	2029      	movs	r0, #41	; 0x29
 8002af4:	f7fe f928 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_REG(0x35);
 8002af8:	2035      	movs	r0, #53	; 0x35
 8002afa:	f7fe f925 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe f936 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0x51);
 8002b04:	2051      	movs	r0, #81	; 0x51
 8002b06:	f7fe f91f 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0xFF);
 8002b0a:	20ff      	movs	r0, #255	; 0xff
 8002b0c:	f7fe f930 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0x53);
 8002b10:	2053      	movs	r0, #83	; 0x53
 8002b12:	f7fe f919 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x2C);
 8002b16:	202c      	movs	r0, #44	; 0x2c
 8002b18:	f7fe f92a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0x55);
 8002b1c:	2055      	movs	r0, #85	; 0x55
 8002b1e:	f7fe f913 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x82);
 8002b22:	2082      	movs	r0, #130	; 0x82
 8002b24:	f7fe f924 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0x2c);
 8002b28:	202c      	movs	r0, #44	; 0x2c
 8002b2a:	f7fe f90d 	bl	8000d48 <LCD_WR_REG>
 8002b2e:	f001 b847 	b.w	8003bc0 <LCD_Init+0x25c0>
    }
    else if (lcddev.id == 0x5510)
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <LCD_Init+0x1544>)
 8002b34:	889b      	ldrh	r3, [r3, #4]
 8002b36:	f245 5210 	movw	r2, #21776	; 0x5510
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	f040 8781 	bne.w	8003a42 <LCD_Init+0x2442>
 8002b40:	e002      	b.n	8002b48 <LCD_Init+0x1548>
 8002b42:	bf00      	nop
 8002b44:	20000204 	.word	0x20000204
    {
        LCD_WriteReg(0xF000, 0x55);
 8002b48:	2155      	movs	r1, #85	; 0x55
 8002b4a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002b4e:	f7fe f933 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xF001, 0xAA);
 8002b52:	21aa      	movs	r1, #170	; 0xaa
 8002b54:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002b58:	f7fe f92e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xF002, 0x52);
 8002b5c:	2152      	movs	r1, #82	; 0x52
 8002b5e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002b62:	f7fe f929 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xF003, 0x08);
 8002b66:	2108      	movs	r1, #8
 8002b68:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002b6c:	f7fe f924 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xF004, 0x01);
 8002b70:	2101      	movs	r1, #1
 8002b72:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002b76:	f7fe f91f 	bl	8000db8 <LCD_WriteReg>
        //AVDD Set AVDD 5.2V
        LCD_WriteReg(0xB000, 0x0D);
 8002b7a:	210d      	movs	r1, #13
 8002b7c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002b80:	f7fe f91a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB001, 0x0D);
 8002b84:	210d      	movs	r1, #13
 8002b86:	f24b 0001 	movw	r0, #45057	; 0xb001
 8002b8a:	f7fe f915 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB002, 0x0D);
 8002b8e:	210d      	movs	r1, #13
 8002b90:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002b94:	f7fe f910 	bl	8000db8 <LCD_WriteReg>
        //AVDD ratio
        LCD_WriteReg(0xB600, 0x34);
 8002b98:	2134      	movs	r1, #52	; 0x34
 8002b9a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002b9e:	f7fe f90b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB601, 0x34);
 8002ba2:	2134      	movs	r1, #52	; 0x34
 8002ba4:	f24b 6001 	movw	r0, #46593	; 0xb601
 8002ba8:	f7fe f906 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB602, 0x34);
 8002bac:	2134      	movs	r1, #52	; 0x34
 8002bae:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002bb2:	f7fe f901 	bl	8000db8 <LCD_WriteReg>
        //AVEE -5.2V
        LCD_WriteReg(0xB100, 0x0D);
 8002bb6:	210d      	movs	r1, #13
 8002bb8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002bbc:	f7fe f8fc 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x0D);
 8002bc0:	210d      	movs	r1, #13
 8002bc2:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002bc6:	f7fe f8f7 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB102, 0x0D);
 8002bca:	210d      	movs	r1, #13
 8002bcc:	f24b 1002 	movw	r0, #45314	; 0xb102
 8002bd0:	f7fe f8f2 	bl	8000db8 <LCD_WriteReg>
        //AVEE ratio
        LCD_WriteReg(0xB700, 0x34);
 8002bd4:	2134      	movs	r1, #52	; 0x34
 8002bd6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002bda:	f7fe f8ed 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB701, 0x34);
 8002bde:	2134      	movs	r1, #52	; 0x34
 8002be0:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002be4:	f7fe f8e8 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB702, 0x34);
 8002be8:	2134      	movs	r1, #52	; 0x34
 8002bea:	f24b 7002 	movw	r0, #46850	; 0xb702
 8002bee:	f7fe f8e3 	bl	8000db8 <LCD_WriteReg>
        //VCL -2.5V
        LCD_WriteReg(0xB200, 0x00);
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002bf8:	f7fe f8de 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB201, 0x00);
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	f24b 2001 	movw	r0, #45569	; 0xb201
 8002c02:	f7fe f8d9 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB202, 0x00);
 8002c06:	2100      	movs	r1, #0
 8002c08:	f24b 2002 	movw	r0, #45570	; 0xb202
 8002c0c:	f7fe f8d4 	bl	8000db8 <LCD_WriteReg>
        //VCL ratio
        LCD_WriteReg(0xB800, 0x24);
 8002c10:	2124      	movs	r1, #36	; 0x24
 8002c12:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002c16:	f7fe f8cf 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB801, 0x24);
 8002c1a:	2124      	movs	r1, #36	; 0x24
 8002c1c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002c20:	f7fe f8ca 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB802, 0x24);
 8002c24:	2124      	movs	r1, #36	; 0x24
 8002c26:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002c2a:	f7fe f8c5 	bl	8000db8 <LCD_WriteReg>
        //VGH 15V (Free pump)
        LCD_WriteReg(0xBF00, 0x01);
 8002c2e:	2101      	movs	r1, #1
 8002c30:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8002c34:	f7fe f8c0 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB300, 0x0F);
 8002c38:	210f      	movs	r1, #15
 8002c3a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8002c3e:	f7fe f8bb 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB301, 0x0F);
 8002c42:	210f      	movs	r1, #15
 8002c44:	f24b 3001 	movw	r0, #45825	; 0xb301
 8002c48:	f7fe f8b6 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB302, 0x0F);
 8002c4c:	210f      	movs	r1, #15
 8002c4e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8002c52:	f7fe f8b1 	bl	8000db8 <LCD_WriteReg>
        //VGH ratio
        LCD_WriteReg(0xB900, 0x34);
 8002c56:	2134      	movs	r1, #52	; 0x34
 8002c58:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8002c5c:	f7fe f8ac 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB901, 0x34);
 8002c60:	2134      	movs	r1, #52	; 0x34
 8002c62:	f64b 1001 	movw	r0, #47361	; 0xb901
 8002c66:	f7fe f8a7 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB902, 0x34);
 8002c6a:	2134      	movs	r1, #52	; 0x34
 8002c6c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8002c70:	f7fe f8a2 	bl	8000db8 <LCD_WriteReg>
        //VGL_REG -10V
        LCD_WriteReg(0xB500, 0x08);
 8002c74:	2108      	movs	r1, #8
 8002c76:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8002c7a:	f7fe f89d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB501, 0x08);
 8002c7e:	2108      	movs	r1, #8
 8002c80:	f24b 5001 	movw	r0, #46337	; 0xb501
 8002c84:	f7fe f898 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB502, 0x08);
 8002c88:	2108      	movs	r1, #8
 8002c8a:	f24b 5002 	movw	r0, #46338	; 0xb502
 8002c8e:	f7fe f893 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xC200, 0x03);
 8002c92:	2103      	movs	r1, #3
 8002c94:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8002c98:	f7fe f88e 	bl	8000db8 <LCD_WriteReg>
        //VGLX ratio
        LCD_WriteReg(0xBA00, 0x24);
 8002c9c:	2124      	movs	r1, #36	; 0x24
 8002c9e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8002ca2:	f7fe f889 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xBA01, 0x24);
 8002ca6:	2124      	movs	r1, #36	; 0x24
 8002ca8:	f64b 2001 	movw	r0, #47617	; 0xba01
 8002cac:	f7fe f884 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xBA02, 0x24);
 8002cb0:	2124      	movs	r1, #36	; 0x24
 8002cb2:	f64b 2002 	movw	r0, #47618	; 0xba02
 8002cb6:	f7fe f87f 	bl	8000db8 <LCD_WriteReg>
        //VGMP/VGSP 4.5V/0V
        LCD_WriteReg(0xBC00, 0x00);
 8002cba:	2100      	movs	r1, #0
 8002cbc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002cc0:	f7fe f87a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xBC01, 0x78);
 8002cc4:	2178      	movs	r1, #120	; 0x78
 8002cc6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8002cca:	f7fe f875 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xBC02, 0x00);
 8002cce:	2100      	movs	r1, #0
 8002cd0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002cd4:	f7fe f870 	bl	8000db8 <LCD_WriteReg>
        //VGMN/VGSN -4.5V/0V
        LCD_WriteReg(0xBD00, 0x00);
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8002cde:	f7fe f86b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xBD01, 0x78);
 8002ce2:	2178      	movs	r1, #120	; 0x78
 8002ce4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8002ce8:	f7fe f866 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xBD02, 0x00);
 8002cec:	2100      	movs	r1, #0
 8002cee:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8002cf2:	f7fe f861 	bl	8000db8 <LCD_WriteReg>
        //VCOM
        LCD_WriteReg(0xBE00, 0x00);
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8002cfc:	f7fe f85c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xBE01, 0x64);
 8002d00:	2164      	movs	r1, #100	; 0x64
 8002d02:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8002d06:	f7fe f857 	bl	8000db8 <LCD_WriteReg>
        //Gamma Setting
        LCD_WriteReg(0xD100, 0x00);
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8002d10:	f7fe f852 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD101, 0x33);
 8002d14:	2133      	movs	r1, #51	; 0x33
 8002d16:	f24d 1001 	movw	r0, #53505	; 0xd101
 8002d1a:	f7fe f84d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD102, 0x00);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	f24d 1002 	movw	r0, #53506	; 0xd102
 8002d24:	f7fe f848 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD103, 0x34);
 8002d28:	2134      	movs	r1, #52	; 0x34
 8002d2a:	f24d 1003 	movw	r0, #53507	; 0xd103
 8002d2e:	f7fe f843 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD104, 0x00);
 8002d32:	2100      	movs	r1, #0
 8002d34:	f24d 1004 	movw	r0, #53508	; 0xd104
 8002d38:	f7fe f83e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD105, 0x3A);
 8002d3c:	213a      	movs	r1, #58	; 0x3a
 8002d3e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8002d42:	f7fe f839 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD106, 0x00);
 8002d46:	2100      	movs	r1, #0
 8002d48:	f24d 1006 	movw	r0, #53510	; 0xd106
 8002d4c:	f7fe f834 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD107, 0x4A);
 8002d50:	214a      	movs	r1, #74	; 0x4a
 8002d52:	f24d 1007 	movw	r0, #53511	; 0xd107
 8002d56:	f7fe f82f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD108, 0x00);
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8002d60:	f7fe f82a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD109, 0x5C);
 8002d64:	215c      	movs	r1, #92	; 0x5c
 8002d66:	f24d 1009 	movw	r0, #53513	; 0xd109
 8002d6a:	f7fe f825 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD10A, 0x00);
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8002d74:	f7fe f820 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD10B, 0x81);
 8002d78:	2181      	movs	r1, #129	; 0x81
 8002d7a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8002d7e:	f7fe f81b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD10C, 0x00);
 8002d82:	2100      	movs	r1, #0
 8002d84:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8002d88:	f7fe f816 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD10D, 0xA6);
 8002d8c:	21a6      	movs	r1, #166	; 0xa6
 8002d8e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8002d92:	f7fe f811 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD10E, 0x00);
 8002d96:	2100      	movs	r1, #0
 8002d98:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8002d9c:	f7fe f80c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD10F, 0xE5);
 8002da0:	21e5      	movs	r1, #229	; 0xe5
 8002da2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8002da6:	f7fe f807 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD110, 0x01);
 8002daa:	2101      	movs	r1, #1
 8002dac:	f24d 1010 	movw	r0, #53520	; 0xd110
 8002db0:	f7fe f802 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD111, 0x13);
 8002db4:	2113      	movs	r1, #19
 8002db6:	f24d 1011 	movw	r0, #53521	; 0xd111
 8002dba:	f7fd fffd 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD112, 0x01);
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	f24d 1012 	movw	r0, #53522	; 0xd112
 8002dc4:	f7fd fff8 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD113, 0x54);
 8002dc8:	2154      	movs	r1, #84	; 0x54
 8002dca:	f24d 1013 	movw	r0, #53523	; 0xd113
 8002dce:	f7fd fff3 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD114, 0x01);
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	f24d 1014 	movw	r0, #53524	; 0xd114
 8002dd8:	f7fd ffee 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD115, 0x82);
 8002ddc:	2182      	movs	r1, #130	; 0x82
 8002dde:	f24d 1015 	movw	r0, #53525	; 0xd115
 8002de2:	f7fd ffe9 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD116, 0x01);
 8002de6:	2101      	movs	r1, #1
 8002de8:	f24d 1016 	movw	r0, #53526	; 0xd116
 8002dec:	f7fd ffe4 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD117, 0xCA);
 8002df0:	21ca      	movs	r1, #202	; 0xca
 8002df2:	f24d 1017 	movw	r0, #53527	; 0xd117
 8002df6:	f7fd ffdf 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD118, 0x02);
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	f24d 1018 	movw	r0, #53528	; 0xd118
 8002e00:	f7fd ffda 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD119, 0x00);
 8002e04:	2100      	movs	r1, #0
 8002e06:	f24d 1019 	movw	r0, #53529	; 0xd119
 8002e0a:	f7fd ffd5 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD11A, 0x02);
 8002e0e:	2102      	movs	r1, #2
 8002e10:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8002e14:	f7fd ffd0 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD11B, 0x01);
 8002e18:	2101      	movs	r1, #1
 8002e1a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8002e1e:	f7fd ffcb 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD11C, 0x02);
 8002e22:	2102      	movs	r1, #2
 8002e24:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8002e28:	f7fd ffc6 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD11D, 0x34);
 8002e2c:	2134      	movs	r1, #52	; 0x34
 8002e2e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8002e32:	f7fd ffc1 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD11E, 0x02);
 8002e36:	2102      	movs	r1, #2
 8002e38:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8002e3c:	f7fd ffbc 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD11F, 0x67);
 8002e40:	2167      	movs	r1, #103	; 0x67
 8002e42:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8002e46:	f7fd ffb7 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD120, 0x02);
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8002e50:	f7fd ffb2 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD121, 0x84);
 8002e54:	2184      	movs	r1, #132	; 0x84
 8002e56:	f24d 1021 	movw	r0, #53537	; 0xd121
 8002e5a:	f7fd ffad 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD122, 0x02);
 8002e5e:	2102      	movs	r1, #2
 8002e60:	f24d 1022 	movw	r0, #53538	; 0xd122
 8002e64:	f7fd ffa8 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD123, 0xA4);
 8002e68:	21a4      	movs	r1, #164	; 0xa4
 8002e6a:	f24d 1023 	movw	r0, #53539	; 0xd123
 8002e6e:	f7fd ffa3 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD124, 0x02);
 8002e72:	2102      	movs	r1, #2
 8002e74:	f24d 1024 	movw	r0, #53540	; 0xd124
 8002e78:	f7fd ff9e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD125, 0xB7);
 8002e7c:	21b7      	movs	r1, #183	; 0xb7
 8002e7e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8002e82:	f7fd ff99 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD126, 0x02);
 8002e86:	2102      	movs	r1, #2
 8002e88:	f24d 1026 	movw	r0, #53542	; 0xd126
 8002e8c:	f7fd ff94 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD127, 0xCF);
 8002e90:	21cf      	movs	r1, #207	; 0xcf
 8002e92:	f24d 1027 	movw	r0, #53543	; 0xd127
 8002e96:	f7fd ff8f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD128, 0x02);
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8002ea0:	f7fd ff8a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD129, 0xDE);
 8002ea4:	21de      	movs	r1, #222	; 0xde
 8002ea6:	f24d 1029 	movw	r0, #53545	; 0xd129
 8002eaa:	f7fd ff85 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD12A, 0x02);
 8002eae:	2102      	movs	r1, #2
 8002eb0:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8002eb4:	f7fd ff80 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD12B, 0xF2);
 8002eb8:	21f2      	movs	r1, #242	; 0xf2
 8002eba:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8002ebe:	f7fd ff7b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD12C, 0x02);
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8002ec8:	f7fd ff76 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD12D, 0xFE);
 8002ecc:	21fe      	movs	r1, #254	; 0xfe
 8002ece:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8002ed2:	f7fd ff71 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD12E, 0x03);
 8002ed6:	2103      	movs	r1, #3
 8002ed8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8002edc:	f7fd ff6c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD12F, 0x10);
 8002ee0:	2110      	movs	r1, #16
 8002ee2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8002ee6:	f7fd ff67 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD130, 0x03);
 8002eea:	2103      	movs	r1, #3
 8002eec:	f24d 1030 	movw	r0, #53552	; 0xd130
 8002ef0:	f7fd ff62 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD131, 0x33);
 8002ef4:	2133      	movs	r1, #51	; 0x33
 8002ef6:	f24d 1031 	movw	r0, #53553	; 0xd131
 8002efa:	f7fd ff5d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD132, 0x03);
 8002efe:	2103      	movs	r1, #3
 8002f00:	f24d 1032 	movw	r0, #53554	; 0xd132
 8002f04:	f7fd ff58 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD133, 0x6D);
 8002f08:	216d      	movs	r1, #109	; 0x6d
 8002f0a:	f24d 1033 	movw	r0, #53555	; 0xd133
 8002f0e:	f7fd ff53 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD200, 0x00);
 8002f12:	2100      	movs	r1, #0
 8002f14:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8002f18:	f7fd ff4e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD201, 0x33);
 8002f1c:	2133      	movs	r1, #51	; 0x33
 8002f1e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8002f22:	f7fd ff49 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD202, 0x00);
 8002f26:	2100      	movs	r1, #0
 8002f28:	f24d 2002 	movw	r0, #53762	; 0xd202
 8002f2c:	f7fd ff44 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD203, 0x34);
 8002f30:	2134      	movs	r1, #52	; 0x34
 8002f32:	f24d 2003 	movw	r0, #53763	; 0xd203
 8002f36:	f7fd ff3f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD204, 0x00);
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8002f40:	f7fd ff3a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD205, 0x3A);
 8002f44:	213a      	movs	r1, #58	; 0x3a
 8002f46:	f24d 2005 	movw	r0, #53765	; 0xd205
 8002f4a:	f7fd ff35 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD206, 0x00);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	f24d 2006 	movw	r0, #53766	; 0xd206
 8002f54:	f7fd ff30 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD207, 0x4A);
 8002f58:	214a      	movs	r1, #74	; 0x4a
 8002f5a:	f24d 2007 	movw	r0, #53767	; 0xd207
 8002f5e:	f7fd ff2b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD208, 0x00);
 8002f62:	2100      	movs	r1, #0
 8002f64:	f24d 2008 	movw	r0, #53768	; 0xd208
 8002f68:	f7fd ff26 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD209, 0x5C);
 8002f6c:	215c      	movs	r1, #92	; 0x5c
 8002f6e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8002f72:	f7fd ff21 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD20A, 0x00);
 8002f76:	2100      	movs	r1, #0
 8002f78:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8002f7c:	f7fd ff1c 	bl	8000db8 <LCD_WriteReg>

        LCD_WriteReg(0xD20B, 0x81);
 8002f80:	2181      	movs	r1, #129	; 0x81
 8002f82:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8002f86:	f7fd ff17 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD20C, 0x00);
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8002f90:	f7fd ff12 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD20D, 0xA6);
 8002f94:	21a6      	movs	r1, #166	; 0xa6
 8002f96:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8002f9a:	f7fd ff0d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD20E, 0x00);
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8002fa4:	f7fd ff08 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD20F, 0xE5);
 8002fa8:	21e5      	movs	r1, #229	; 0xe5
 8002faa:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8002fae:	f7fd ff03 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD210, 0x01);
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	f24d 2010 	movw	r0, #53776	; 0xd210
 8002fb8:	f7fd fefe 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD211, 0x13);
 8002fbc:	2113      	movs	r1, #19
 8002fbe:	f24d 2011 	movw	r0, #53777	; 0xd211
 8002fc2:	f7fd fef9 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD212, 0x01);
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	f24d 2012 	movw	r0, #53778	; 0xd212
 8002fcc:	f7fd fef4 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD213, 0x54);
 8002fd0:	2154      	movs	r1, #84	; 0x54
 8002fd2:	f24d 2013 	movw	r0, #53779	; 0xd213
 8002fd6:	f7fd feef 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD214, 0x01);
 8002fda:	2101      	movs	r1, #1
 8002fdc:	f24d 2014 	movw	r0, #53780	; 0xd214
 8002fe0:	f7fd feea 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD215, 0x82);
 8002fe4:	2182      	movs	r1, #130	; 0x82
 8002fe6:	f24d 2015 	movw	r0, #53781	; 0xd215
 8002fea:	f7fd fee5 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD216, 0x01);
 8002fee:	2101      	movs	r1, #1
 8002ff0:	f24d 2016 	movw	r0, #53782	; 0xd216
 8002ff4:	f7fd fee0 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD217, 0xCA);
 8002ff8:	21ca      	movs	r1, #202	; 0xca
 8002ffa:	f24d 2017 	movw	r0, #53783	; 0xd217
 8002ffe:	f7fd fedb 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD218, 0x02);
 8003002:	2102      	movs	r1, #2
 8003004:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003008:	f7fd fed6 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD219, 0x00);
 800300c:	2100      	movs	r1, #0
 800300e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003012:	f7fd fed1 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD21A, 0x02);
 8003016:	2102      	movs	r1, #2
 8003018:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800301c:	f7fd fecc 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD21B, 0x01);
 8003020:	2101      	movs	r1, #1
 8003022:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003026:	f7fd fec7 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD21C, 0x02);
 800302a:	2102      	movs	r1, #2
 800302c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003030:	f7fd fec2 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD21D, 0x34);
 8003034:	2134      	movs	r1, #52	; 0x34
 8003036:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800303a:	f7fd febd 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD21E, 0x02);
 800303e:	2102      	movs	r1, #2
 8003040:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003044:	f7fd feb8 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD21F, 0x67);
 8003048:	2167      	movs	r1, #103	; 0x67
 800304a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800304e:	f7fd feb3 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD220, 0x02);
 8003052:	2102      	movs	r1, #2
 8003054:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003058:	f7fd feae 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD221, 0x84);
 800305c:	2184      	movs	r1, #132	; 0x84
 800305e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003062:	f7fd fea9 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD222, 0x02);
 8003066:	2102      	movs	r1, #2
 8003068:	f24d 2022 	movw	r0, #53794	; 0xd222
 800306c:	f7fd fea4 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD223, 0xA4);
 8003070:	21a4      	movs	r1, #164	; 0xa4
 8003072:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003076:	f7fd fe9f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD224, 0x02);
 800307a:	2102      	movs	r1, #2
 800307c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003080:	f7fd fe9a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD225, 0xB7);
 8003084:	21b7      	movs	r1, #183	; 0xb7
 8003086:	f24d 2025 	movw	r0, #53797	; 0xd225
 800308a:	f7fd fe95 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD226, 0x02);
 800308e:	2102      	movs	r1, #2
 8003090:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003094:	f7fd fe90 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD227, 0xCF);
 8003098:	21cf      	movs	r1, #207	; 0xcf
 800309a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800309e:	f7fd fe8b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD228, 0x02);
 80030a2:	2102      	movs	r1, #2
 80030a4:	f24d 2028 	movw	r0, #53800	; 0xd228
 80030a8:	f7fd fe86 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD229, 0xDE);
 80030ac:	21de      	movs	r1, #222	; 0xde
 80030ae:	f24d 2029 	movw	r0, #53801	; 0xd229
 80030b2:	f7fd fe81 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD22A, 0x02);
 80030b6:	2102      	movs	r1, #2
 80030b8:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80030bc:	f7fd fe7c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD22B, 0xF2);
 80030c0:	21f2      	movs	r1, #242	; 0xf2
 80030c2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80030c6:	f7fd fe77 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD22C, 0x02);
 80030ca:	2102      	movs	r1, #2
 80030cc:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80030d0:	f7fd fe72 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD22D, 0xFE);
 80030d4:	21fe      	movs	r1, #254	; 0xfe
 80030d6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80030da:	f7fd fe6d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD22E, 0x03);
 80030de:	2103      	movs	r1, #3
 80030e0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80030e4:	f7fd fe68 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD22F, 0x10);
 80030e8:	2110      	movs	r1, #16
 80030ea:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80030ee:	f7fd fe63 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD230, 0x03);
 80030f2:	2103      	movs	r1, #3
 80030f4:	f24d 2030 	movw	r0, #53808	; 0xd230
 80030f8:	f7fd fe5e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD231, 0x33);
 80030fc:	2133      	movs	r1, #51	; 0x33
 80030fe:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003102:	f7fd fe59 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD232, 0x03);
 8003106:	2103      	movs	r1, #3
 8003108:	f24d 2032 	movw	r0, #53810	; 0xd232
 800310c:	f7fd fe54 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD233, 0x6D);
 8003110:	216d      	movs	r1, #109	; 0x6d
 8003112:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003116:	f7fd fe4f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD300, 0x00);
 800311a:	2100      	movs	r1, #0
 800311c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003120:	f7fd fe4a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD301, 0x33);
 8003124:	2133      	movs	r1, #51	; 0x33
 8003126:	f24d 3001 	movw	r0, #54017	; 0xd301
 800312a:	f7fd fe45 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD302, 0x00);
 800312e:	2100      	movs	r1, #0
 8003130:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003134:	f7fd fe40 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD303, 0x34);
 8003138:	2134      	movs	r1, #52	; 0x34
 800313a:	f24d 3003 	movw	r0, #54019	; 0xd303
 800313e:	f7fd fe3b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD304, 0x00);
 8003142:	2100      	movs	r1, #0
 8003144:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003148:	f7fd fe36 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD305, 0x3A);
 800314c:	213a      	movs	r1, #58	; 0x3a
 800314e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003152:	f7fd fe31 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD306, 0x00);
 8003156:	2100      	movs	r1, #0
 8003158:	f24d 3006 	movw	r0, #54022	; 0xd306
 800315c:	f7fd fe2c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD307, 0x4A);
 8003160:	214a      	movs	r1, #74	; 0x4a
 8003162:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003166:	f7fd fe27 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD308, 0x00);
 800316a:	2100      	movs	r1, #0
 800316c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003170:	f7fd fe22 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD309, 0x5C);
 8003174:	215c      	movs	r1, #92	; 0x5c
 8003176:	f24d 3009 	movw	r0, #54025	; 0xd309
 800317a:	f7fd fe1d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD30A, 0x00);
 800317e:	2100      	movs	r1, #0
 8003180:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003184:	f7fd fe18 	bl	8000db8 <LCD_WriteReg>

        LCD_WriteReg(0xD30B, 0x81);
 8003188:	2181      	movs	r1, #129	; 0x81
 800318a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800318e:	f7fd fe13 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD30C, 0x00);
 8003192:	2100      	movs	r1, #0
 8003194:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003198:	f7fd fe0e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD30D, 0xA6);
 800319c:	21a6      	movs	r1, #166	; 0xa6
 800319e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80031a2:	f7fd fe09 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD30E, 0x00);
 80031a6:	2100      	movs	r1, #0
 80031a8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80031ac:	f7fd fe04 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD30F, 0xE5);
 80031b0:	21e5      	movs	r1, #229	; 0xe5
 80031b2:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80031b6:	f7fd fdff 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD310, 0x01);
 80031ba:	2101      	movs	r1, #1
 80031bc:	f24d 3010 	movw	r0, #54032	; 0xd310
 80031c0:	f7fd fdfa 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD311, 0x13);
 80031c4:	2113      	movs	r1, #19
 80031c6:	f24d 3011 	movw	r0, #54033	; 0xd311
 80031ca:	f7fd fdf5 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD312, 0x01);
 80031ce:	2101      	movs	r1, #1
 80031d0:	f24d 3012 	movw	r0, #54034	; 0xd312
 80031d4:	f7fd fdf0 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD313, 0x54);
 80031d8:	2154      	movs	r1, #84	; 0x54
 80031da:	f24d 3013 	movw	r0, #54035	; 0xd313
 80031de:	f7fd fdeb 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD314, 0x01);
 80031e2:	2101      	movs	r1, #1
 80031e4:	f24d 3014 	movw	r0, #54036	; 0xd314
 80031e8:	f7fd fde6 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD315, 0x82);
 80031ec:	2182      	movs	r1, #130	; 0x82
 80031ee:	f24d 3015 	movw	r0, #54037	; 0xd315
 80031f2:	f7fd fde1 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD316, 0x01);
 80031f6:	2101      	movs	r1, #1
 80031f8:	f24d 3016 	movw	r0, #54038	; 0xd316
 80031fc:	f7fd fddc 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD317, 0xCA);
 8003200:	21ca      	movs	r1, #202	; 0xca
 8003202:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003206:	f7fd fdd7 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD318, 0x02);
 800320a:	2102      	movs	r1, #2
 800320c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003210:	f7fd fdd2 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD319, 0x00);
 8003214:	2100      	movs	r1, #0
 8003216:	f24d 3019 	movw	r0, #54041	; 0xd319
 800321a:	f7fd fdcd 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD31A, 0x02);
 800321e:	2102      	movs	r1, #2
 8003220:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003224:	f7fd fdc8 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD31B, 0x01);
 8003228:	2101      	movs	r1, #1
 800322a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800322e:	f7fd fdc3 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD31C, 0x02);
 8003232:	2102      	movs	r1, #2
 8003234:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003238:	f7fd fdbe 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD31D, 0x34);
 800323c:	2134      	movs	r1, #52	; 0x34
 800323e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003242:	f7fd fdb9 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD31E, 0x02);
 8003246:	2102      	movs	r1, #2
 8003248:	f24d 301e 	movw	r0, #54046	; 0xd31e
 800324c:	f7fd fdb4 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD31F, 0x67);
 8003250:	2167      	movs	r1, #103	; 0x67
 8003252:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003256:	f7fd fdaf 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD320, 0x02);
 800325a:	2102      	movs	r1, #2
 800325c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003260:	f7fd fdaa 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD321, 0x84);
 8003264:	2184      	movs	r1, #132	; 0x84
 8003266:	f24d 3021 	movw	r0, #54049	; 0xd321
 800326a:	f7fd fda5 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD322, 0x02);
 800326e:	2102      	movs	r1, #2
 8003270:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003274:	f7fd fda0 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD323, 0xA4);
 8003278:	21a4      	movs	r1, #164	; 0xa4
 800327a:	f24d 3023 	movw	r0, #54051	; 0xd323
 800327e:	f7fd fd9b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD324, 0x02);
 8003282:	2102      	movs	r1, #2
 8003284:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003288:	f7fd fd96 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD325, 0xB7);
 800328c:	21b7      	movs	r1, #183	; 0xb7
 800328e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003292:	f7fd fd91 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD326, 0x02);
 8003296:	2102      	movs	r1, #2
 8003298:	f24d 3026 	movw	r0, #54054	; 0xd326
 800329c:	f7fd fd8c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD327, 0xCF);
 80032a0:	21cf      	movs	r1, #207	; 0xcf
 80032a2:	f24d 3027 	movw	r0, #54055	; 0xd327
 80032a6:	f7fd fd87 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD328, 0x02);
 80032aa:	2102      	movs	r1, #2
 80032ac:	f24d 3028 	movw	r0, #54056	; 0xd328
 80032b0:	f7fd fd82 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD329, 0xDE);
 80032b4:	21de      	movs	r1, #222	; 0xde
 80032b6:	f24d 3029 	movw	r0, #54057	; 0xd329
 80032ba:	f7fd fd7d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD32A, 0x02);
 80032be:	2102      	movs	r1, #2
 80032c0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80032c4:	f7fd fd78 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD32B, 0xF2);
 80032c8:	21f2      	movs	r1, #242	; 0xf2
 80032ca:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80032ce:	f7fd fd73 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD32C, 0x02);
 80032d2:	2102      	movs	r1, #2
 80032d4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80032d8:	f7fd fd6e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD32D, 0xFE);
 80032dc:	21fe      	movs	r1, #254	; 0xfe
 80032de:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80032e2:	f7fd fd69 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD32E, 0x03);
 80032e6:	2103      	movs	r1, #3
 80032e8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80032ec:	f7fd fd64 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD32F, 0x10);
 80032f0:	2110      	movs	r1, #16
 80032f2:	f24d 302f 	movw	r0, #54063	; 0xd32f
 80032f6:	f7fd fd5f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD330, 0x03);
 80032fa:	2103      	movs	r1, #3
 80032fc:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003300:	f7fd fd5a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD331, 0x33);
 8003304:	2133      	movs	r1, #51	; 0x33
 8003306:	f24d 3031 	movw	r0, #54065	; 0xd331
 800330a:	f7fd fd55 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD332, 0x03);
 800330e:	2103      	movs	r1, #3
 8003310:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003314:	f7fd fd50 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD333, 0x6D);
 8003318:	216d      	movs	r1, #109	; 0x6d
 800331a:	f24d 3033 	movw	r0, #54067	; 0xd333
 800331e:	f7fd fd4b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD400, 0x00);
 8003322:	2100      	movs	r1, #0
 8003324:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003328:	f7fd fd46 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD401, 0x33);
 800332c:	2133      	movs	r1, #51	; 0x33
 800332e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003332:	f7fd fd41 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD402, 0x00);
 8003336:	2100      	movs	r1, #0
 8003338:	f24d 4002 	movw	r0, #54274	; 0xd402
 800333c:	f7fd fd3c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD403, 0x34);
 8003340:	2134      	movs	r1, #52	; 0x34
 8003342:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003346:	f7fd fd37 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD404, 0x00);
 800334a:	2100      	movs	r1, #0
 800334c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003350:	f7fd fd32 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD405, 0x3A);
 8003354:	213a      	movs	r1, #58	; 0x3a
 8003356:	f24d 4005 	movw	r0, #54277	; 0xd405
 800335a:	f7fd fd2d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD406, 0x00);
 800335e:	2100      	movs	r1, #0
 8003360:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003364:	f7fd fd28 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD407, 0x4A);
 8003368:	214a      	movs	r1, #74	; 0x4a
 800336a:	f24d 4007 	movw	r0, #54279	; 0xd407
 800336e:	f7fd fd23 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD408, 0x00);
 8003372:	2100      	movs	r1, #0
 8003374:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003378:	f7fd fd1e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD409, 0x5C);
 800337c:	215c      	movs	r1, #92	; 0x5c
 800337e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003382:	f7fd fd19 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD40A, 0x00);
 8003386:	2100      	movs	r1, #0
 8003388:	f24d 400a 	movw	r0, #54282	; 0xd40a
 800338c:	f7fd fd14 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD40B, 0x81);
 8003390:	2181      	movs	r1, #129	; 0x81
 8003392:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003396:	f7fd fd0f 	bl	8000db8 <LCD_WriteReg>

        LCD_WriteReg(0xD40C, 0x00);
 800339a:	2100      	movs	r1, #0
 800339c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80033a0:	f7fd fd0a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD40D, 0xA6);
 80033a4:	21a6      	movs	r1, #166	; 0xa6
 80033a6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80033aa:	f7fd fd05 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD40E, 0x00);
 80033ae:	2100      	movs	r1, #0
 80033b0:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80033b4:	f7fd fd00 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD40F, 0xE5);
 80033b8:	21e5      	movs	r1, #229	; 0xe5
 80033ba:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80033be:	f7fd fcfb 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD410, 0x01);
 80033c2:	2101      	movs	r1, #1
 80033c4:	f24d 4010 	movw	r0, #54288	; 0xd410
 80033c8:	f7fd fcf6 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD411, 0x13);
 80033cc:	2113      	movs	r1, #19
 80033ce:	f24d 4011 	movw	r0, #54289	; 0xd411
 80033d2:	f7fd fcf1 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD412, 0x01);
 80033d6:	2101      	movs	r1, #1
 80033d8:	f24d 4012 	movw	r0, #54290	; 0xd412
 80033dc:	f7fd fcec 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD413, 0x54);
 80033e0:	2154      	movs	r1, #84	; 0x54
 80033e2:	f24d 4013 	movw	r0, #54291	; 0xd413
 80033e6:	f7fd fce7 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD414, 0x01);
 80033ea:	2101      	movs	r1, #1
 80033ec:	f24d 4014 	movw	r0, #54292	; 0xd414
 80033f0:	f7fd fce2 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD415, 0x82);
 80033f4:	2182      	movs	r1, #130	; 0x82
 80033f6:	f24d 4015 	movw	r0, #54293	; 0xd415
 80033fa:	f7fd fcdd 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD416, 0x01);
 80033fe:	2101      	movs	r1, #1
 8003400:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003404:	f7fd fcd8 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD417, 0xCA);
 8003408:	21ca      	movs	r1, #202	; 0xca
 800340a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800340e:	f7fd fcd3 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD418, 0x02);
 8003412:	2102      	movs	r1, #2
 8003414:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003418:	f7fd fcce 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD419, 0x00);
 800341c:	2100      	movs	r1, #0
 800341e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003422:	f7fd fcc9 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD41A, 0x02);
 8003426:	2102      	movs	r1, #2
 8003428:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800342c:	f7fd fcc4 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD41B, 0x01);
 8003430:	2101      	movs	r1, #1
 8003432:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003436:	f7fd fcbf 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD41C, 0x02);
 800343a:	2102      	movs	r1, #2
 800343c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003440:	f7fd fcba 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD41D, 0x34);
 8003444:	2134      	movs	r1, #52	; 0x34
 8003446:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800344a:	f7fd fcb5 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD41E, 0x02);
 800344e:	2102      	movs	r1, #2
 8003450:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003454:	f7fd fcb0 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD41F, 0x67);
 8003458:	2167      	movs	r1, #103	; 0x67
 800345a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800345e:	f7fd fcab 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD420, 0x02);
 8003462:	2102      	movs	r1, #2
 8003464:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003468:	f7fd fca6 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD421, 0x84);
 800346c:	2184      	movs	r1, #132	; 0x84
 800346e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003472:	f7fd fca1 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD422, 0x02);
 8003476:	2102      	movs	r1, #2
 8003478:	f24d 4022 	movw	r0, #54306	; 0xd422
 800347c:	f7fd fc9c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD423, 0xA4);
 8003480:	21a4      	movs	r1, #164	; 0xa4
 8003482:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003486:	f7fd fc97 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD424, 0x02);
 800348a:	2102      	movs	r1, #2
 800348c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003490:	f7fd fc92 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD425, 0xB7);
 8003494:	21b7      	movs	r1, #183	; 0xb7
 8003496:	f24d 4025 	movw	r0, #54309	; 0xd425
 800349a:	f7fd fc8d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD426, 0x02);
 800349e:	2102      	movs	r1, #2
 80034a0:	f24d 4026 	movw	r0, #54310	; 0xd426
 80034a4:	f7fd fc88 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD427, 0xCF);
 80034a8:	21cf      	movs	r1, #207	; 0xcf
 80034aa:	f24d 4027 	movw	r0, #54311	; 0xd427
 80034ae:	f7fd fc83 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD428, 0x02);
 80034b2:	2102      	movs	r1, #2
 80034b4:	f24d 4028 	movw	r0, #54312	; 0xd428
 80034b8:	f7fd fc7e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD429, 0xDE);
 80034bc:	21de      	movs	r1, #222	; 0xde
 80034be:	f24d 4029 	movw	r0, #54313	; 0xd429
 80034c2:	f7fd fc79 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD42A, 0x02);
 80034c6:	2102      	movs	r1, #2
 80034c8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80034cc:	f7fd fc74 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD42B, 0xF2);
 80034d0:	21f2      	movs	r1, #242	; 0xf2
 80034d2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80034d6:	f7fd fc6f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD42C, 0x02);
 80034da:	2102      	movs	r1, #2
 80034dc:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80034e0:	f7fd fc6a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD42D, 0xFE);
 80034e4:	21fe      	movs	r1, #254	; 0xfe
 80034e6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80034ea:	f7fd fc65 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD42E, 0x03);
 80034ee:	2103      	movs	r1, #3
 80034f0:	f24d 402e 	movw	r0, #54318	; 0xd42e
 80034f4:	f7fd fc60 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD42F, 0x10);
 80034f8:	2110      	movs	r1, #16
 80034fa:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80034fe:	f7fd fc5b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD430, 0x03);
 8003502:	2103      	movs	r1, #3
 8003504:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003508:	f7fd fc56 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD431, 0x33);
 800350c:	2133      	movs	r1, #51	; 0x33
 800350e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003512:	f7fd fc51 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD432, 0x03);
 8003516:	2103      	movs	r1, #3
 8003518:	f24d 4032 	movw	r0, #54322	; 0xd432
 800351c:	f7fd fc4c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD433, 0x6D);
 8003520:	216d      	movs	r1, #109	; 0x6d
 8003522:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003526:	f7fd fc47 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD500, 0x00);
 800352a:	2100      	movs	r1, #0
 800352c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003530:	f7fd fc42 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD501, 0x33);
 8003534:	2133      	movs	r1, #51	; 0x33
 8003536:	f24d 5001 	movw	r0, #54529	; 0xd501
 800353a:	f7fd fc3d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD502, 0x00);
 800353e:	2100      	movs	r1, #0
 8003540:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003544:	f7fd fc38 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD503, 0x34);
 8003548:	2134      	movs	r1, #52	; 0x34
 800354a:	f24d 5003 	movw	r0, #54531	; 0xd503
 800354e:	f7fd fc33 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD504, 0x00);
 8003552:	2100      	movs	r1, #0
 8003554:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003558:	f7fd fc2e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD505, 0x3A);
 800355c:	213a      	movs	r1, #58	; 0x3a
 800355e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003562:	f7fd fc29 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD506, 0x00);
 8003566:	2100      	movs	r1, #0
 8003568:	f24d 5006 	movw	r0, #54534	; 0xd506
 800356c:	f7fd fc24 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD507, 0x4A);
 8003570:	214a      	movs	r1, #74	; 0x4a
 8003572:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003576:	f7fd fc1f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD508, 0x00);
 800357a:	2100      	movs	r1, #0
 800357c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003580:	f7fd fc1a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD509, 0x5C);
 8003584:	215c      	movs	r1, #92	; 0x5c
 8003586:	f24d 5009 	movw	r0, #54537	; 0xd509
 800358a:	f7fd fc15 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD50A, 0x00);
 800358e:	2100      	movs	r1, #0
 8003590:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003594:	f7fd fc10 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD50B, 0x81);
 8003598:	2181      	movs	r1, #129	; 0x81
 800359a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 800359e:	f7fd fc0b 	bl	8000db8 <LCD_WriteReg>

        LCD_WriteReg(0xD50C, 0x00);
 80035a2:	2100      	movs	r1, #0
 80035a4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80035a8:	f7fd fc06 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD50D, 0xA6);
 80035ac:	21a6      	movs	r1, #166	; 0xa6
 80035ae:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80035b2:	f7fd fc01 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD50E, 0x00);
 80035b6:	2100      	movs	r1, #0
 80035b8:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80035bc:	f7fd fbfc 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD50F, 0xE5);
 80035c0:	21e5      	movs	r1, #229	; 0xe5
 80035c2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80035c6:	f7fd fbf7 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD510, 0x01);
 80035ca:	2101      	movs	r1, #1
 80035cc:	f24d 5010 	movw	r0, #54544	; 0xd510
 80035d0:	f7fd fbf2 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD511, 0x13);
 80035d4:	2113      	movs	r1, #19
 80035d6:	f24d 5011 	movw	r0, #54545	; 0xd511
 80035da:	f7fd fbed 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD512, 0x01);
 80035de:	2101      	movs	r1, #1
 80035e0:	f24d 5012 	movw	r0, #54546	; 0xd512
 80035e4:	f7fd fbe8 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD513, 0x54);
 80035e8:	2154      	movs	r1, #84	; 0x54
 80035ea:	f24d 5013 	movw	r0, #54547	; 0xd513
 80035ee:	f7fd fbe3 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD514, 0x01);
 80035f2:	2101      	movs	r1, #1
 80035f4:	f24d 5014 	movw	r0, #54548	; 0xd514
 80035f8:	f7fd fbde 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD515, 0x82);
 80035fc:	2182      	movs	r1, #130	; 0x82
 80035fe:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003602:	f7fd fbd9 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD516, 0x01);
 8003606:	2101      	movs	r1, #1
 8003608:	f24d 5016 	movw	r0, #54550	; 0xd516
 800360c:	f7fd fbd4 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD517, 0xCA);
 8003610:	21ca      	movs	r1, #202	; 0xca
 8003612:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003616:	f7fd fbcf 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD518, 0x02);
 800361a:	2102      	movs	r1, #2
 800361c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003620:	f7fd fbca 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD519, 0x00);
 8003624:	2100      	movs	r1, #0
 8003626:	f24d 5019 	movw	r0, #54553	; 0xd519
 800362a:	f7fd fbc5 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD51A, 0x02);
 800362e:	2102      	movs	r1, #2
 8003630:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003634:	f7fd fbc0 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD51B, 0x01);
 8003638:	2101      	movs	r1, #1
 800363a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800363e:	f7fd fbbb 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD51C, 0x02);
 8003642:	2102      	movs	r1, #2
 8003644:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003648:	f7fd fbb6 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD51D, 0x34);
 800364c:	2134      	movs	r1, #52	; 0x34
 800364e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003652:	f7fd fbb1 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD51E, 0x02);
 8003656:	2102      	movs	r1, #2
 8003658:	f24d 501e 	movw	r0, #54558	; 0xd51e
 800365c:	f7fd fbac 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD51F, 0x67);
 8003660:	2167      	movs	r1, #103	; 0x67
 8003662:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003666:	f7fd fba7 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD520, 0x02);
 800366a:	2102      	movs	r1, #2
 800366c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003670:	f7fd fba2 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD521, 0x84);
 8003674:	2184      	movs	r1, #132	; 0x84
 8003676:	f24d 5021 	movw	r0, #54561	; 0xd521
 800367a:	f7fd fb9d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD522, 0x02);
 800367e:	2102      	movs	r1, #2
 8003680:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003684:	f7fd fb98 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD523, 0xA4);
 8003688:	21a4      	movs	r1, #164	; 0xa4
 800368a:	f24d 5023 	movw	r0, #54563	; 0xd523
 800368e:	f7fd fb93 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD524, 0x02);
 8003692:	2102      	movs	r1, #2
 8003694:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003698:	f7fd fb8e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD525, 0xB7);
 800369c:	21b7      	movs	r1, #183	; 0xb7
 800369e:	f24d 5025 	movw	r0, #54565	; 0xd525
 80036a2:	f7fd fb89 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD526, 0x02);
 80036a6:	2102      	movs	r1, #2
 80036a8:	f24d 5026 	movw	r0, #54566	; 0xd526
 80036ac:	f7fd fb84 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD527, 0xCF);
 80036b0:	21cf      	movs	r1, #207	; 0xcf
 80036b2:	f24d 5027 	movw	r0, #54567	; 0xd527
 80036b6:	f7fd fb7f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD528, 0x02);
 80036ba:	2102      	movs	r1, #2
 80036bc:	f24d 5028 	movw	r0, #54568	; 0xd528
 80036c0:	f7fd fb7a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD529, 0xDE);
 80036c4:	21de      	movs	r1, #222	; 0xde
 80036c6:	f24d 5029 	movw	r0, #54569	; 0xd529
 80036ca:	f7fd fb75 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD52A, 0x02);
 80036ce:	2102      	movs	r1, #2
 80036d0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80036d4:	f7fd fb70 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD52B, 0xF2);
 80036d8:	21f2      	movs	r1, #242	; 0xf2
 80036da:	f24d 502b 	movw	r0, #54571	; 0xd52b
 80036de:	f7fd fb6b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD52C, 0x02);
 80036e2:	2102      	movs	r1, #2
 80036e4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 80036e8:	f7fd fb66 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD52D, 0xFE);
 80036ec:	21fe      	movs	r1, #254	; 0xfe
 80036ee:	f24d 502d 	movw	r0, #54573	; 0xd52d
 80036f2:	f7fd fb61 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD52E, 0x03);
 80036f6:	2103      	movs	r1, #3
 80036f8:	f24d 502e 	movw	r0, #54574	; 0xd52e
 80036fc:	f7fd fb5c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD52F, 0x10);
 8003700:	2110      	movs	r1, #16
 8003702:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003706:	f7fd fb57 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD530, 0x03);
 800370a:	2103      	movs	r1, #3
 800370c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003710:	f7fd fb52 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD531, 0x33);
 8003714:	2133      	movs	r1, #51	; 0x33
 8003716:	f24d 5031 	movw	r0, #54577	; 0xd531
 800371a:	f7fd fb4d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD532, 0x03);
 800371e:	2103      	movs	r1, #3
 8003720:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003724:	f7fd fb48 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD533, 0x6D);
 8003728:	216d      	movs	r1, #109	; 0x6d
 800372a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800372e:	f7fd fb43 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD600, 0x00);
 8003732:	2100      	movs	r1, #0
 8003734:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003738:	f7fd fb3e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD601, 0x33);
 800373c:	2133      	movs	r1, #51	; 0x33
 800373e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003742:	f7fd fb39 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD602, 0x00);
 8003746:	2100      	movs	r1, #0
 8003748:	f24d 6002 	movw	r0, #54786	; 0xd602
 800374c:	f7fd fb34 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD603, 0x34);
 8003750:	2134      	movs	r1, #52	; 0x34
 8003752:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003756:	f7fd fb2f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD604, 0x00);
 800375a:	2100      	movs	r1, #0
 800375c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003760:	f7fd fb2a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD605, 0x3A);
 8003764:	213a      	movs	r1, #58	; 0x3a
 8003766:	f24d 6005 	movw	r0, #54789	; 0xd605
 800376a:	f7fd fb25 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD606, 0x00);
 800376e:	2100      	movs	r1, #0
 8003770:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003774:	f7fd fb20 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD607, 0x4A);
 8003778:	214a      	movs	r1, #74	; 0x4a
 800377a:	f24d 6007 	movw	r0, #54791	; 0xd607
 800377e:	f7fd fb1b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD608, 0x00);
 8003782:	2100      	movs	r1, #0
 8003784:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003788:	f7fd fb16 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD609, 0x5C);
 800378c:	215c      	movs	r1, #92	; 0x5c
 800378e:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003792:	f7fd fb11 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD60A, 0x00);
 8003796:	2100      	movs	r1, #0
 8003798:	f24d 600a 	movw	r0, #54794	; 0xd60a
 800379c:	f7fd fb0c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD60B, 0x81);
 80037a0:	2181      	movs	r1, #129	; 0x81
 80037a2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80037a6:	f7fd fb07 	bl	8000db8 <LCD_WriteReg>

        LCD_WriteReg(0xD60C, 0x00);
 80037aa:	2100      	movs	r1, #0
 80037ac:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80037b0:	f7fd fb02 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD60D, 0xA6);
 80037b4:	21a6      	movs	r1, #166	; 0xa6
 80037b6:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80037ba:	f7fd fafd 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD60E, 0x00);
 80037be:	2100      	movs	r1, #0
 80037c0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80037c4:	f7fd faf8 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD60F, 0xE5);
 80037c8:	21e5      	movs	r1, #229	; 0xe5
 80037ca:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80037ce:	f7fd faf3 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD610, 0x01);
 80037d2:	2101      	movs	r1, #1
 80037d4:	f24d 6010 	movw	r0, #54800	; 0xd610
 80037d8:	f7fd faee 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD611, 0x13);
 80037dc:	2113      	movs	r1, #19
 80037de:	f24d 6011 	movw	r0, #54801	; 0xd611
 80037e2:	f7fd fae9 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD612, 0x01);
 80037e6:	2101      	movs	r1, #1
 80037e8:	f24d 6012 	movw	r0, #54802	; 0xd612
 80037ec:	f7fd fae4 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD613, 0x54);
 80037f0:	2154      	movs	r1, #84	; 0x54
 80037f2:	f24d 6013 	movw	r0, #54803	; 0xd613
 80037f6:	f7fd fadf 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD614, 0x01);
 80037fa:	2101      	movs	r1, #1
 80037fc:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003800:	f7fd fada 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD615, 0x82);
 8003804:	2182      	movs	r1, #130	; 0x82
 8003806:	f24d 6015 	movw	r0, #54805	; 0xd615
 800380a:	f7fd fad5 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD616, 0x01);
 800380e:	2101      	movs	r1, #1
 8003810:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003814:	f7fd fad0 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD617, 0xCA);
 8003818:	21ca      	movs	r1, #202	; 0xca
 800381a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800381e:	f7fd facb 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD618, 0x02);
 8003822:	2102      	movs	r1, #2
 8003824:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003828:	f7fd fac6 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD619, 0x00);
 800382c:	2100      	movs	r1, #0
 800382e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003832:	f7fd fac1 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD61A, 0x02);
 8003836:	2102      	movs	r1, #2
 8003838:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800383c:	f7fd fabc 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD61B, 0x01);
 8003840:	2101      	movs	r1, #1
 8003842:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003846:	f7fd fab7 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD61C, 0x02);
 800384a:	2102      	movs	r1, #2
 800384c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003850:	f7fd fab2 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD61D, 0x34);
 8003854:	2134      	movs	r1, #52	; 0x34
 8003856:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800385a:	f7fd faad 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD61E, 0x02);
 800385e:	2102      	movs	r1, #2
 8003860:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003864:	f7fd faa8 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD61F, 0x67);
 8003868:	2167      	movs	r1, #103	; 0x67
 800386a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800386e:	f7fd faa3 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD620, 0x02);
 8003872:	2102      	movs	r1, #2
 8003874:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003878:	f7fd fa9e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD621, 0x84);
 800387c:	2184      	movs	r1, #132	; 0x84
 800387e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003882:	f7fd fa99 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD622, 0x02);
 8003886:	2102      	movs	r1, #2
 8003888:	f24d 6022 	movw	r0, #54818	; 0xd622
 800388c:	f7fd fa94 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD623, 0xA4);
 8003890:	21a4      	movs	r1, #164	; 0xa4
 8003892:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003896:	f7fd fa8f 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD624, 0x02);
 800389a:	2102      	movs	r1, #2
 800389c:	f24d 6024 	movw	r0, #54820	; 0xd624
 80038a0:	f7fd fa8a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD625, 0xB7);
 80038a4:	21b7      	movs	r1, #183	; 0xb7
 80038a6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80038aa:	f7fd fa85 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD626, 0x02);
 80038ae:	2102      	movs	r1, #2
 80038b0:	f24d 6026 	movw	r0, #54822	; 0xd626
 80038b4:	f7fd fa80 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD627, 0xCF);
 80038b8:	21cf      	movs	r1, #207	; 0xcf
 80038ba:	f24d 6027 	movw	r0, #54823	; 0xd627
 80038be:	f7fd fa7b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD628, 0x02);
 80038c2:	2102      	movs	r1, #2
 80038c4:	f24d 6028 	movw	r0, #54824	; 0xd628
 80038c8:	f7fd fa76 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD629, 0xDE);
 80038cc:	21de      	movs	r1, #222	; 0xde
 80038ce:	f24d 6029 	movw	r0, #54825	; 0xd629
 80038d2:	f7fd fa71 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD62A, 0x02);
 80038d6:	2102      	movs	r1, #2
 80038d8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80038dc:	f7fd fa6c 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD62B, 0xF2);
 80038e0:	21f2      	movs	r1, #242	; 0xf2
 80038e2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80038e6:	f7fd fa67 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD62C, 0x02);
 80038ea:	2102      	movs	r1, #2
 80038ec:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80038f0:	f7fd fa62 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD62D, 0xFE);
 80038f4:	21fe      	movs	r1, #254	; 0xfe
 80038f6:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80038fa:	f7fd fa5d 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD62E, 0x03);
 80038fe:	2103      	movs	r1, #3
 8003900:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003904:	f7fd fa58 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD62F, 0x10);
 8003908:	2110      	movs	r1, #16
 800390a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800390e:	f7fd fa53 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD630, 0x03);
 8003912:	2103      	movs	r1, #3
 8003914:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003918:	f7fd fa4e 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD631, 0x33);
 800391c:	2133      	movs	r1, #51	; 0x33
 800391e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003922:	f7fd fa49 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD632, 0x03);
 8003926:	2103      	movs	r1, #3
 8003928:	f24d 6032 	movw	r0, #54834	; 0xd632
 800392c:	f7fd fa44 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xD633, 0x6D);
 8003930:	216d      	movs	r1, #109	; 0x6d
 8003932:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003936:	f7fd fa3f 	bl	8000db8 <LCD_WriteReg>
        //LV2 Page 0 enable
        LCD_WriteReg(0xF000, 0x55);
 800393a:	2155      	movs	r1, #85	; 0x55
 800393c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003940:	f7fd fa3a 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xF001, 0xAA);
 8003944:	21aa      	movs	r1, #170	; 0xaa
 8003946:	f24f 0001 	movw	r0, #61441	; 0xf001
 800394a:	f7fd fa35 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xF002, 0x52);
 800394e:	2152      	movs	r1, #82	; 0x52
 8003950:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003954:	f7fd fa30 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xF003, 0x08);
 8003958:	2108      	movs	r1, #8
 800395a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800395e:	f7fd fa2b 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xF004, 0x00);
 8003962:	2100      	movs	r1, #0
 8003964:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003968:	f7fd fa26 	bl	8000db8 <LCD_WriteReg>
        //Display control
        LCD_WriteReg(0xB100, 0xCC);
 800396c:	21cc      	movs	r1, #204	; 0xcc
 800396e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003972:	f7fd fa21 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x00);
 8003976:	2100      	movs	r1, #0
 8003978:	f24b 1001 	movw	r0, #45313	; 0xb101
 800397c:	f7fd fa1c 	bl	8000db8 <LCD_WriteReg>
        //Source hold time
        LCD_WriteReg(0xB600, 0x05);
 8003980:	2105      	movs	r1, #5
 8003982:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003986:	f7fd fa17 	bl	8000db8 <LCD_WriteReg>
        //Gate EQ control
        LCD_WriteReg(0xB700, 0x70);
 800398a:	2170      	movs	r1, #112	; 0x70
 800398c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003990:	f7fd fa12 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB701, 0x70);
 8003994:	2170      	movs	r1, #112	; 0x70
 8003996:	f24b 7001 	movw	r0, #46849	; 0xb701
 800399a:	f7fd fa0d 	bl	8000db8 <LCD_WriteReg>
        //Source EQ control (Mode 2)
        LCD_WriteReg(0xB800, 0x01);
 800399e:	2101      	movs	r1, #1
 80039a0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80039a4:	f7fd fa08 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB801, 0x03);
 80039a8:	2103      	movs	r1, #3
 80039aa:	f64b 0001 	movw	r0, #47105	; 0xb801
 80039ae:	f7fd fa03 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB802, 0x03);
 80039b2:	2103      	movs	r1, #3
 80039b4:	f64b 0002 	movw	r0, #47106	; 0xb802
 80039b8:	f7fd f9fe 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xB803, 0x03);
 80039bc:	2103      	movs	r1, #3
 80039be:	f64b 0003 	movw	r0, #47107	; 0xb803
 80039c2:	f7fd f9f9 	bl	8000db8 <LCD_WriteReg>
        //Inversion mode (2-dot)
        LCD_WriteReg(0xBC00, 0x02);
 80039c6:	2102      	movs	r1, #2
 80039c8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80039cc:	f7fd f9f4 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xBC01, 0x00);
 80039d0:	2100      	movs	r1, #0
 80039d2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80039d6:	f7fd f9ef 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xBC02, 0x00);
 80039da:	2100      	movs	r1, #0
 80039dc:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80039e0:	f7fd f9ea 	bl	8000db8 <LCD_WriteReg>
        //Timing control 4H w/ 4-delay
        LCD_WriteReg(0xC900, 0xD0);
 80039e4:	21d0      	movs	r1, #208	; 0xd0
 80039e6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80039ea:	f7fd f9e5 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xC901, 0x02);
 80039ee:	2102      	movs	r1, #2
 80039f0:	f64c 1001 	movw	r0, #51457	; 0xc901
 80039f4:	f7fd f9e0 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xC902, 0x50);
 80039f8:	2150      	movs	r1, #80	; 0x50
 80039fa:	f64c 1002 	movw	r0, #51458	; 0xc902
 80039fe:	f7fd f9db 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xC903, 0x50);
 8003a02:	2150      	movs	r1, #80	; 0x50
 8003a04:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003a08:	f7fd f9d6 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0xC904, 0x50);
 8003a0c:	2150      	movs	r1, #80	; 0x50
 8003a0e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003a12:	f7fd f9d1 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0x3500, 0x00);
 8003a16:	2100      	movs	r1, #0
 8003a18:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003a1c:	f7fd f9cc 	bl	8000db8 <LCD_WriteReg>
        LCD_WriteReg(0x3A00, 0x55); //16-bit/pixel
 8003a20:	2155      	movs	r1, #85	; 0x55
 8003a22:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003a26:	f7fd f9c7 	bl	8000db8 <LCD_WriteReg>
        LCD_WR_REG(0x1100);
 8003a2a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003a2e:	f7fd f98b 	bl	8000d48 <LCD_WR_REG>
        delay_us(120);
 8003a32:	2078      	movs	r0, #120	; 0x78
 8003a34:	f7fd f93c 	bl	8000cb0 <delay_us>
        LCD_WR_REG(0x2900);
 8003a38:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003a3c:	f7fd f984 	bl	8000d48 <LCD_WR_REG>
 8003a40:	e0be      	b.n	8003bc0 <LCD_Init+0x25c0>
    }
    else if (lcddev.id == 0X1963)
 8003a42:	4b66      	ldr	r3, [pc, #408]	; (8003bdc <LCD_Init+0x25dc>)
 8003a44:	889b      	ldrh	r3, [r3, #4]
 8003a46:	f641 1263 	movw	r2, #6499	; 0x1963
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	f040 80b8 	bne.w	8003bc0 <LCD_Init+0x25c0>
    {
        LCD_WR_REG(0xE2);       //Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8003a50:	20e2      	movs	r0, #226	; 0xe2
 8003a52:	f7fd f979 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x1D);      //参数1
 8003a56:	201d      	movs	r0, #29
 8003a58:	f7fd f98a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);      //参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	f7fd f987 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);      //参数3 Validate M and N values
 8003a62:	2004      	movs	r0, #4
 8003a64:	f7fd f984 	bl	8000d70 <LCD_WR_DATA>
        delay_us(100);
 8003a68:	2064      	movs	r0, #100	; 0x64
 8003a6a:	f7fd f921 	bl	8000cb0 <delay_us>
        LCD_WR_REG(0xE0);       // Start PLL command
 8003a6e:	20e0      	movs	r0, #224	; 0xe0
 8003a70:	f7fd f96a 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x01);      // enable PLL
 8003a74:	2001      	movs	r0, #1
 8003a76:	f7fd f97b 	bl	8000d70 <LCD_WR_DATA>
        delay_ms(10);
 8003a7a:	200a      	movs	r0, #10
 8003a7c:	f7fd f958 	bl	8000d30 <delay_ms>
        LCD_WR_REG(0xE0);       // Start PLL command again
 8003a80:	20e0      	movs	r0, #224	; 0xe0
 8003a82:	f7fd f961 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x03);      // now, use PLL output as system clock
 8003a86:	2003      	movs	r0, #3
 8003a88:	f7fd f972 	bl	8000d70 <LCD_WR_DATA>
        delay_ms(12);
 8003a8c:	200c      	movs	r0, #12
 8003a8e:	f7fd f94f 	bl	8000d30 <delay_ms>
        LCD_WR_REG(0x01);       //软复位
 8003a92:	2001      	movs	r0, #1
 8003a94:	f7fd f958 	bl	8000d48 <LCD_WR_REG>
        delay_ms(10);
 8003a98:	200a      	movs	r0, #10
 8003a9a:	f7fd f949 	bl	8000d30 <delay_ms>

        LCD_WR_REG(0xE6);       //设置像素频率,33Mhz
 8003a9e:	20e6      	movs	r0, #230	; 0xe6
 8003aa0:	f7fd f952 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x2F);
 8003aa4:	202f      	movs	r0, #47	; 0x2f
 8003aa6:	f7fd f963 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 8003aaa:	20ff      	movs	r0, #255	; 0xff
 8003aac:	f7fd f960 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 8003ab0:	20ff      	movs	r0, #255	; 0xff
 8003ab2:	f7fd f95d 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB0);       //设置LCD模式
 8003ab6:	20b0      	movs	r0, #176	; 0xb0
 8003ab8:	f7fd f946 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x20);      //24位模式
 8003abc:	2020      	movs	r0, #32
 8003abe:	f7fd f957 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //TFT 模式
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f7fd f954 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_DATA((SSD_HOR_RESOLUTION - 1) >> 8); //设置LCD水平像素
 8003ac8:	2003      	movs	r0, #3
 8003aca:	f7fd f951 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_RESOLUTION - 1);
 8003ace:	f240 301f 	movw	r0, #799	; 0x31f
 8003ad2:	f7fd f94d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA((SSD_VER_RESOLUTION - 1) >> 8); //设置LCD垂直像素
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7fd f94a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_RESOLUTION - 1);
 8003adc:	f240 10df 	movw	r0, #479	; 0x1df
 8003ae0:	f7fd f946 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //RGB序列
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f7fd f943 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB4);       //Set horizontal period
 8003aea:	20b4      	movs	r0, #180	; 0xb4
 8003aec:	f7fd f92c 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA((SSD_HT - 1) >> 8);
 8003af0:	2004      	movs	r0, #4
 8003af2:	f7fd f93d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HT - 1);
 8003af6:	f240 401f 	movw	r0, #1055	; 0x41f
 8003afa:	f7fd f939 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS >> 8);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fd f936 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS);
 8003b04:	202e      	movs	r0, #46	; 0x2e
 8003b06:	f7fd f933 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_PULSE_WIDTH - 1);
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f7fd f930 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b10:	2000      	movs	r0, #0
 8003b12:	f7fd f92d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7fd f92a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f7fd f927 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xB6);       //Set vertical period
 8003b22:	20b6      	movs	r0, #182	; 0xb6
 8003b24:	f7fd f910 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA((SSD_VT - 1) >> 8);
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f7fd f921 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VT - 1);
 8003b2e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8003b32:	f7fd f91d 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS >> 8);
 8003b36:	2000      	movs	r0, #0
 8003b38:	f7fd f91a 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS);
 8003b3c:	2017      	movs	r0, #23
 8003b3e:	f7fd f917 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_FRONT_PORCH - 1);
 8003b42:	2015      	movs	r0, #21
 8003b44:	f7fd f914 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f7fd f911 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7fd f90e 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xF0);       //设置SSD1963与CPU接口为16bit
 8003b54:	20f0      	movs	r0, #240	; 0xf0
 8003b56:	f7fd f8f7 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x03);      //16-bit(565 format) data for 16bpp
 8003b5a:	2003      	movs	r0, #3
 8003b5c:	f7fd f908 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0x29);       //开启显示
 8003b60:	2029      	movs	r0, #41	; 0x29
 8003b62:	f7fd f8f1 	bl	8000d48 <LCD_WR_REG>
        //设置PWM输出  背光通过占空比可调
        LCD_WR_REG(0xD0);       //设置自动白平衡DBC
 8003b66:	20d0      	movs	r0, #208	; 0xd0
 8003b68:	f7fd f8ee 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x00);      //disable
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f7fd f8ff 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xBE);       //配置PWM输出
 8003b72:	20be      	movs	r0, #190	; 0xbe
 8003b74:	f7fd f8e8 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x05);      //1设置PWM频率
 8003b78:	2005      	movs	r0, #5
 8003b7a:	f7fd f8f9 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);      //2设置PWM占空比
 8003b7e:	20fe      	movs	r0, #254	; 0xfe
 8003b80:	f7fd f8f6 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);      //3设置C
 8003b84:	2001      	movs	r0, #1
 8003b86:	f7fd f8f3 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //4设置D
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f7fd f8f0 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //5设置E
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7fd f8ed 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //6设置F
 8003b96:	2000      	movs	r0, #0
 8003b98:	f7fd f8ea 	bl	8000d70 <LCD_WR_DATA>

        LCD_WR_REG(0xB8);       //设置GPIO配置
 8003b9c:	20b8      	movs	r0, #184	; 0xb8
 8003b9e:	f7fd f8d3 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0x03);      //2个IO口设置成输出
 8003ba2:	2003      	movs	r0, #3
 8003ba4:	f7fd f8e4 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);      //GPIO使用正常的IO功能
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f7fd f8e1 	bl	8000d70 <LCD_WR_DATA>
        LCD_WR_REG(0xBA);
 8003bae:	20ba      	movs	r0, #186	; 0xba
 8003bb0:	f7fd f8ca 	bl	8000d48 <LCD_WR_REG>
        LCD_WR_DATA(0X01);      //GPIO[1:0]=01,控制LCD方向
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	f7fd f8db 	bl	8000d70 <LCD_WR_DATA>

        LCD_SSD_BackLightSet(100);//背光设置为最亮
 8003bba:	2064      	movs	r0, #100	; 0x64
 8003bbc:	f7fd fc34 	bl	8001428 <LCD_SSD_BackLightSet>
    }

    LCD_Display_Dir(0);         //默认为竖屏
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7fd fc65 	bl	8001490 <LCD_Display_Dir>
    LCD_LED = 1;                //点亮背光
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <LCD_Init+0x25e0>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
    LCD_Clear(WHITE);
 8003bcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003bd0:	f000 f808 	bl	8003be4 <LCD_Clear>
}  
 8003bd4:	bf00      	nop
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000204 	.word	0x20000204
 8003be0:	42218180 	.word	0x42218180

08003be4 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(u16 color)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	80fb      	strh	r3, [r7, #6]
    u32 index = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
    u32 totalpoint = lcddev.width;
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <LCD_Clear+0x54>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	60bb      	str	r3, [r7, #8]
    totalpoint *= lcddev.height;    //得到总点数
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <LCD_Clear+0x54>)
 8003bfa:	885b      	ldrh	r3, [r3, #2]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	60bb      	str	r3, [r7, #8]

    LCD_SetCursor(0x00, 0x0000);    //设置光标位置
 8003c06:	2100      	movs	r1, #0
 8003c08:	2000      	movs	r0, #0
 8003c0a:	f7fd f8f9 	bl	8000e00 <LCD_SetCursor>
    LCD_WriteRAM_Prepare();         //开始写入GRAM
 8003c0e:	f7fd f8e9 	bl	8000de4 <LCD_WriteRAM_Prepare>

    for (index = 0; index < totalpoint; index++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e005      	b.n	8003c24 <LCD_Clear+0x40>
    {
        LCD->LCD_RAM = color;
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <LCD_Clear+0x58>)
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3301      	adds	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d3f5      	bcc.n	8003c18 <LCD_Clear+0x34>
    }
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000204 	.word	0x20000204
 8003c3c:	6c0007fe 	.word	0x6c0007fe

08003c40 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(u16 x, u16 y, u8 num, u8 size, u8 mode)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4604      	mov	r4, r0
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4623      	mov	r3, r4
 8003c50:	80fb      	strh	r3, [r7, #6]
 8003c52:	4603      	mov	r3, r0
 8003c54:	80bb      	strh	r3, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	70bb      	strb	r3, [r7, #2]
    u8 temp, t1, t;
    u16 y0 = y;
 8003c5e:	88bb      	ldrh	r3, [r7, #4]
 8003c60:	817b      	strh	r3, [r7, #10]
    u8 csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);  //得到字体一个字符对应点阵集所占的字节数
 8003c62:	78bb      	ldrb	r3, [r7, #2]
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	78bb      	ldrb	r3, [r7, #2]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	78ba      	ldrb	r2, [r7, #2]
 8003c82:	0852      	lsrs	r2, r2, #1
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	727b      	strb	r3, [r7, #9]
    num = num - ' ';    //得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	3b20      	subs	r3, #32
 8003c90:	70fb      	strb	r3, [r7, #3]

    for (t = 0; t < csize; t++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	737b      	strb	r3, [r7, #13]
 8003c96:	e06b      	b.n	8003d70 <LCD_ShowChar+0x130>
    {
        if (size == 12)temp = asc2_1206[num][t];        //调用1206字体
 8003c98:	78bb      	ldrb	r3, [r7, #2]
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d10b      	bne.n	8003cb6 <LCD_ShowChar+0x76>
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	7b79      	ldrb	r1, [r7, #13]
 8003ca2:	4839      	ldr	r0, [pc, #228]	; (8003d88 <LCD_ShowChar+0x148>)
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4403      	add	r3, r0
 8003cae:	440b      	add	r3, r1
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	73fb      	strb	r3, [r7, #15]
 8003cb4:	e019      	b.n	8003cea <LCD_ShowChar+0xaa>
        else if (size == 16)temp = asc2_1608[num][t];   //调用1608字体
 8003cb6:	78bb      	ldrb	r3, [r7, #2]
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d108      	bne.n	8003cce <LCD_ShowChar+0x8e>
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	7b7b      	ldrb	r3, [r7, #13]
 8003cc0:	4932      	ldr	r1, [pc, #200]	; (8003d8c <LCD_ShowChar+0x14c>)
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	440a      	add	r2, r1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e00d      	b.n	8003cea <LCD_ShowChar+0xaa>
        else if (size == 24)temp = asc2_2412[num][t];   //调用2412字体
 8003cce:	78bb      	ldrb	r3, [r7, #2]
 8003cd0:	2b18      	cmp	r3, #24
 8003cd2:	d152      	bne.n	8003d7a <LCD_ShowChar+0x13a>
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	7b79      	ldrb	r1, [r7, #13]
 8003cd8:	482d      	ldr	r0, [pc, #180]	; (8003d90 <LCD_ShowChar+0x150>)
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4403      	add	r3, r0
 8003ce4:	440b      	add	r3, r1
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	73fb      	strb	r3, [r7, #15]
        else return;                                    //没有的字库

        for (t1 = 0; t1 < 8; t1++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	73bb      	strb	r3, [r7, #14]
 8003cee:	e037      	b.n	8003d60 <LCD_ShowChar+0x120>
        {
            if (temp & 0x80)LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8003cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	da08      	bge.n	8003d0a <LCD_ShowChar+0xca>
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <LCD_ShowChar+0x154>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	88b9      	ldrh	r1, [r7, #4]
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd fad0 	bl	80012a8 <LCD_Fast_DrawPoint>
 8003d08:	e00b      	b.n	8003d22 <LCD_ShowChar+0xe2>
            else if (mode == 0)LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8003d0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <LCD_ShowChar+0xe2>
 8003d12:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <LCD_ShowChar+0x158>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	88b9      	ldrh	r1, [r7, #4]
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fd fac3 	bl	80012a8 <LCD_Fast_DrawPoint>

            temp <<= 1;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
            y++;
 8003d28:	88bb      	ldrh	r3, [r7, #4]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;      //超区域了
 8003d2e:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <LCD_ShowChar+0x15c>)
 8003d30:	885b      	ldrh	r3, [r3, #2]
 8003d32:	88ba      	ldrh	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d222      	bcs.n	8003d7e <LCD_ShowChar+0x13e>

            if ((y - y0) == size)
 8003d38:	88ba      	ldrh	r2, [r7, #4]
 8003d3a:	897b      	ldrh	r3, [r7, #10]
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	78bb      	ldrb	r3, [r7, #2]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d10a      	bne.n	8003d5a <LCD_ShowChar+0x11a>
            {
                y = y0;
 8003d44:	897b      	ldrh	r3, [r7, #10]
 8003d46:	80bb      	strh	r3, [r7, #4]
                x++;
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   //超区域了
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <LCD_ShowChar+0x15c>)
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d307      	bcc.n	8003d68 <LCD_ShowChar+0x128>
 8003d58:	e012      	b.n	8003d80 <LCD_ShowChar+0x140>
        for (t1 = 0; t1 < 8; t1++)
 8003d5a:	7bbb      	ldrb	r3, [r7, #14]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	73bb      	strb	r3, [r7, #14]
 8003d60:	7bbb      	ldrb	r3, [r7, #14]
 8003d62:	2b07      	cmp	r3, #7
 8003d64:	d9c4      	bls.n	8003cf0 <LCD_ShowChar+0xb0>
 8003d66:	e000      	b.n	8003d6a <LCD_ShowChar+0x12a>

                break;
 8003d68:	bf00      	nop
    for (t = 0; t < csize; t++)
 8003d6a:	7b7b      	ldrb	r3, [r7, #13]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	737b      	strb	r3, [r7, #13]
 8003d70:	7b7a      	ldrb	r2, [r7, #13]
 8003d72:	7a7b      	ldrb	r3, [r7, #9]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d38f      	bcc.n	8003c98 <LCD_ShowChar+0x58>
 8003d78:	e002      	b.n	8003d80 <LCD_ShowChar+0x140>
        else return;                                    //没有的字库
 8003d7a:	bf00      	nop
 8003d7c:	e000      	b.n	8003d80 <LCD_ShowChar+0x140>
            if (y >= lcddev.height)return;      //超区域了
 8003d7e:	bf00      	nop
            }
        }
    }
}
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd90      	pop	{r4, r7, pc}
 8003d86:	bf00      	nop
 8003d88:	0800b684 	.word	0x0800b684
 8003d8c:	0800baf8 	.word	0x0800baf8
 8003d90:	0800c0e8 	.word	0x0800c0e8
 8003d94:	20000000 	.word	0x20000000
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	20000204 	.word	0x20000204

08003da0 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(u16 x, u16 y, u16 width, u16 height, u8 size, u8 *p)
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	4604      	mov	r4, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	80fb      	strh	r3, [r7, #6]
 8003db2:	4603      	mov	r3, r0
 8003db4:	80bb      	strh	r3, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	807b      	strh	r3, [r7, #2]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	803b      	strh	r3, [r7, #0]
    u8 x0 = x;
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	73fb      	strb	r3, [r7, #15]
    width += x;
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	807b      	strh	r3, [r7, #2]
    height += y;
 8003dca:	883a      	ldrh	r2, [r7, #0]
 8003dcc:	88bb      	ldrh	r3, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   //判断是不是非法字符!
 8003dd2:	e024      	b.n	8003e1e <LCD_ShowString+0x7e>
    {
        if (x >= width)
 8003dd4:	88fa      	ldrh	r2, [r7, #6]
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d307      	bcc.n	8003dec <LCD_ShowString+0x4c>
        {
            x = x0;
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	80fb      	strh	r3, [r7, #6]
            y += size;
 8003de0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	88bb      	ldrh	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break; //退出
 8003dec:	88ba      	ldrh	r2, [r7, #4]
 8003dee:	883b      	ldrh	r3, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d21d      	bcs.n	8003e30 <LCD_ShowString+0x90>

        LCD_ShowChar(x, y, *p, size, 0);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dfc:	88b9      	ldrh	r1, [r7, #4]
 8003dfe:	88f8      	ldrh	r0, [r7, #6]
 8003e00:	2400      	movs	r4, #0
 8003e02:	9400      	str	r4, [sp, #0]
 8003e04:	f7ff ff1c 	bl	8003c40 <LCD_ShowChar>
        x += size / 2;
 8003e08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	4413      	add	r3, r2
 8003e16:	80fb      	strh	r3, [r7, #6]
        p++;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   //判断是不是非法字符!
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b7e      	cmp	r3, #126	; 0x7e
 8003e24:	d805      	bhi.n	8003e32 <LCD_ShowString+0x92>
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b1f      	cmp	r3, #31
 8003e2c:	d8d2      	bhi.n	8003dd4 <LCD_ShowString+0x34>
    }
}
 8003e2e:	e000      	b.n	8003e32 <LCD_ShowString+0x92>
        if (y >= height)break; //退出
 8003e30:	bf00      	nop
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd90      	pop	{r4, r7, pc}

08003e3a <stmflash_read_halfword>:
 * @brief       从指定地址读取一个半字 (16位数据)
 * @param       faddr   : 读取地址 (此地址必须为2的倍数!!)
 * @retval      读取到的数据 (16位)
 */
uint16_t stmflash_read_halfword(uint32_t faddr)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
    return *(volatile uint16_t *)faddr;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <stmflash_read>:
 * @param       pbuf  : 数据指针
 * @param       length: 要读取的半字(16位)数,即2个字节的整数倍
 * @retval      无
 */
void stmflash_read(uint32_t raddr, uint16_t *pbuf, uint16_t length)
{
 8003e52:	b590      	push	{r4, r7, lr}
 8003e54:	b087      	sub	sp, #28
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	80fb      	strh	r3, [r7, #6]
    uint16_t i;

    for (i = 0; i < length; i++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	82fb      	strh	r3, [r7, #22]
 8003e64:	e00e      	b.n	8003e84 <stmflash_read+0x32>
    {
        pbuf[i] = stmflash_read_halfword(raddr);    /* 读取2个字节 */
 8003e66:	8afb      	ldrh	r3, [r7, #22]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	18d4      	adds	r4, r2, r3
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7ff ffe3 	bl	8003e3a <stmflash_read_halfword>
 8003e74:	4603      	mov	r3, r0
 8003e76:	8023      	strh	r3, [r4, #0]
        raddr += 2; /* 偏移2个字节 */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < length; i++)
 8003e7e:	8afb      	ldrh	r3, [r7, #22]
 8003e80:	3301      	adds	r3, #1
 8003e82:	82fb      	strh	r3, [r7, #22]
 8003e84:	8afa      	ldrh	r2, [r7, #22]
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3ec      	bcc.n	8003e66 <stmflash_read+0x14>
    }
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd90      	pop	{r4, r7, pc}

08003e96 <stmflash_write_nocheck>:
 * @param       pbuf    : 数据指针
 * @param       length  : 要写入的 半字(16位)数
 * @retval      无
 */
void stmflash_write_nocheck(uint32_t waddr, uint16_t *pbuf, uint16_t length)
{
 8003e96:	b5b0      	push	{r4, r5, r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for (i = 0; i < length; i++)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	82fb      	strh	r3, [r7, #22]
 8003ea8:	e014      	b.n	8003ed4 <stmflash_write_nocheck+0x3e>
    {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, waddr, pbuf[i]);
 8003eaa:	8afb      	ldrh	r3, [r7, #22]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	461c      	mov	r4, r3
 8003eba:	4615      	mov	r5, r2
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f000 ffe4 	bl	8004e90 <HAL_FLASH_Program>
        waddr += 2; /* 指向下一个半字 */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3302      	adds	r3, #2
 8003ecc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < length; i++)
 8003ece:	8afb      	ldrh	r3, [r7, #22]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	82fb      	strh	r3, [r7, #22]
 8003ed4:	8afa      	ldrh	r2, [r7, #22]
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d3e6      	bcc.n	8003eaa <stmflash_write_nocheck+0x14>
    }
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003ee8 <stmflash_write>:
 * @param       length  : 要写入的 半字(16位)数
 * @retval      无
 */
uint16_t g_flashbuf[STM32_SECTOR_SIZE / 2]; /* 最多是2K字节 */
void stmflash_write(uint32_t waddr, uint16_t *pbuf, uint16_t length)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08e      	sub	sp, #56	; 0x38
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint32_t offaddr;       /* 去掉0X08000000后的地址 */
    FLASH_EraseInitTypeDef flash_eraseop;
    uint32_t erase_addr;    /* 擦除错误，这个值为发生错误的扇区地址 */

    if (waddr < STM32_FLASH_BASE || (waddr >= (STM32_FLASH_BASE + 1024 * STM32_FLASH_SIZE)))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003efc:	f0c0 80a1 	bcc.w	8004042 <stmflash_write+0x15a>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003f06:	f080 809c 	bcs.w	8004042 <stmflash_write+0x15a>
    {
        return;     /* 非法地址 */
    }

    HAL_FLASH_Unlock();                         /* FLASH解锁 */
 8003f0a:	f001 f831 	bl	8004f70 <HAL_FLASH_Unlock>

    offaddr = waddr - STM32_FLASH_BASE;         /* 实际偏移地址. */
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28
    secpos = offaddr / STM32_SECTOR_SIZE;       /* 扇区地址  0~255 for STM32F103ZET6 */
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	0adb      	lsrs	r3, r3, #11
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
    secoff = (offaddr % STM32_SECTOR_SIZE) / 2; /* 在扇区内的偏移(2个字节为基本单位.) */
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	867b      	strh	r3, [r7, #50]	; 0x32
    secremain = STM32_SECTOR_SIZE / 2 - secoff; /* 扇区剩余空间大小 */
 8003f26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f28:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003f2c:	863b      	strh	r3, [r7, #48]	; 0x30
    if (length <= secremain)
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d801      	bhi.n	8003f3a <stmflash_write+0x52>
    {
        secremain = length; /* 不大于该扇区范围 */
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    while (1)
    {
        stmflash_read(secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE, g_flashbuf, STM32_SECTOR_SIZE / 2); /* 读出整个扇区的内容 */
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003f40:	02db      	lsls	r3, r3, #11
 8003f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f46:	4941      	ldr	r1, [pc, #260]	; (800404c <stmflash_write+0x164>)
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff82 	bl	8003e52 <stmflash_read>
        for (i = 0; i < secremain; i++)     /* 校验数据 */
 8003f4e:	2300      	movs	r3, #0
 8003f50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f52:	e00c      	b.n	8003f6e <stmflash_write+0x86>
        {
            if (g_flashbuf[secoff + i] != 0XFFFF)
 8003f54:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003f56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f58:	4413      	add	r3, r2
 8003f5a:	4a3c      	ldr	r2, [pc, #240]	; (800404c <stmflash_write+0x164>)
 8003f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d107      	bne.n	8003f78 <stmflash_write+0x90>
        for (i = 0; i < secremain; i++)     /* 校验数据 */
 8003f68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d3ee      	bcc.n	8003f54 <stmflash_write+0x6c>
 8003f76:	e000      	b.n	8003f7a <stmflash_write+0x92>
            {
                break;      /* 需要擦除 */
 8003f78:	bf00      	nop
            }
        }
        if (i < secremain)  /* 需要擦除 */
 8003f7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f7c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d232      	bcs.n	8003fe8 <stmflash_write+0x100>
        { 
            flash_eraseop.TypeErase = FLASH_TYPEERASE_PAGES;        /* 选择页擦除 */
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
            flash_eraseop.Banks = FLASH_BANK_1;
 8003f86:	2301      	movs	r3, #1
 8003f88:	61fb      	str	r3, [r7, #28]
            flash_eraseop.NbPages = 1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
            flash_eraseop.PageAddress = secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE;  /* 要擦除的扇区 */
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003f94:	02db      	lsls	r3, r3, #11
 8003f96:	623b      	str	r3, [r7, #32]
            HAL_FLASHEx_Erase( &flash_eraseop, &erase_addr);
 8003f98:	f107 0214 	add.w	r2, r7, #20
 8003f9c:	f107 0318 	add.w	r3, r7, #24
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 f8cc 	bl	8005140 <HAL_FLASHEx_Erase>

            for (i = 0; i < secremain; i++)                         /* 复制 */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fac:	e00d      	b.n	8003fca <stmflash_write+0xe2>
            {
                g_flashbuf[i + secoff] = pbuf[i];
 8003fae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	441a      	add	r2, r3
 8003fb6:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003fb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003fba:	440b      	add	r3, r1
 8003fbc:	8811      	ldrh	r1, [r2, #0]
 8003fbe:	4a23      	ldr	r2, [pc, #140]	; (800404c <stmflash_write+0x164>)
 8003fc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < secremain; i++)                         /* 复制 */
 8003fc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003fcc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d3ed      	bcc.n	8003fae <stmflash_write+0xc6>
            }
            stmflash_write_nocheck(secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE, g_flashbuf, STM32_SECTOR_SIZE / 2); /* 写入整个扇区 */
 8003fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003fd8:	02db      	lsls	r3, r3, #11
 8003fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fde:	491b      	ldr	r1, [pc, #108]	; (800404c <stmflash_write+0x164>)
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff58 	bl	8003e96 <stmflash_write_nocheck>
 8003fe6:	e005      	b.n	8003ff4 <stmflash_write+0x10c>
        }
        else
        {
            stmflash_write_nocheck(waddr, pbuf, secremain);         /* 写已经擦除了的,直接写入扇区剩余区间. */
 8003fe8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003fea:	461a      	mov	r2, r3
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff ff51 	bl	8003e96 <stmflash_write_nocheck>
        }
        if (length == secremain)
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d01e      	beq.n	800403a <stmflash_write+0x152>
        {
            break; /* 写入结束了 */
        }
        else       /* 写入未结束 */
        {
            secpos++;               /* 扇区地址增1 */
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	3301      	adds	r3, #1
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
            secoff = 0;             /* 偏移位置为0 */
 8004002:	2300      	movs	r3, #0
 8004004:	867b      	strh	r3, [r7, #50]	; 0x32
            pbuf += secremain;      /* 指针偏移 */
 8004006:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	4413      	add	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
            waddr += secremain * 2; /* 写地址偏移(16位数据地址,需要*2) */
 8004010:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	461a      	mov	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
            length -= secremain;    /* 字节(16位)数递减 */
 800401c:	88fa      	ldrh	r2, [r7, #6]
 800401e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	80fb      	strh	r3, [r7, #6]
            if (length > (STM32_SECTOR_SIZE / 2))
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402a:	d903      	bls.n	8004034 <stmflash_write+0x14c>
            {
                secremain = STM32_SECTOR_SIZE / 2; /* 下一个扇区还是写不完 */
 800402c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004030:	863b      	strh	r3, [r7, #48]	; 0x30
 8004032:	e782      	b.n	8003f3a <stmflash_write+0x52>
            }
            else
            {
                secremain = length; /* 下一个扇区可以写完了 */
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	863b      	strh	r3, [r7, #48]	; 0x30
        stmflash_read(secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE, g_flashbuf, STM32_SECTOR_SIZE / 2); /* 读出整个扇区的内容 */
 8004038:	e77f      	b.n	8003f3a <stmflash_write+0x52>
            break; /* 写入结束了 */
 800403a:	bf00      	nop
            }
        }
    }

    HAL_FLASH_Lock();   /* 上锁 */
 800403c:	f000 ffbe 	bl	8004fbc <HAL_FLASH_Lock>
 8004040:	e000      	b.n	8004044 <stmflash_write+0x15c>
        return;     /* 非法地址 */
 8004042:	bf00      	nop
}
 8004044:	3738      	adds	r7, #56	; 0x38
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000214 	.word	0x20000214

08004050 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08e      	sub	sp, #56	; 0x38
 8004054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004056:	f107 031c 	add.w	r3, r7, #28
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	615a      	str	r2, [r3, #20]
 8004068:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800406a:	463b      	mov	r3, r7
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	611a      	str	r2, [r3, #16]
 8004078:	615a      	str	r2, [r3, #20]
 800407a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 800407c:	4b30      	ldr	r3, [pc, #192]	; (8004140 <MX_FSMC_Init+0xf0>)
 800407e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004082:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004084:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <MX_FSMC_Init+0xf0>)
 8004086:	4a2f      	ldr	r2, [pc, #188]	; (8004144 <MX_FSMC_Init+0xf4>)
 8004088:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <MX_FSMC_Init+0xf0>)
 800408c:	2206      	movs	r2, #6
 800408e:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004090:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <MX_FSMC_Init+0xf0>)
 8004092:	2200      	movs	r2, #0
 8004094:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004096:	4b2a      	ldr	r3, [pc, #168]	; (8004140 <MX_FSMC_Init+0xf0>)
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800409c:	4b28      	ldr	r3, [pc, #160]	; (8004140 <MX_FSMC_Init+0xf0>)
 800409e:	2210      	movs	r2, #16
 80040a0:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80040a2:	4b27      	ldr	r3, [pc, #156]	; (8004140 <MX_FSMC_Init+0xf0>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <MX_FSMC_Init+0xf0>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <MX_FSMC_Init+0xf0>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80040b4:	4b22      	ldr	r3, [pc, #136]	; (8004140 <MX_FSMC_Init+0xf0>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80040ba:	4b21      	ldr	r3, [pc, #132]	; (8004140 <MX_FSMC_Init+0xf0>)
 80040bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80040c2:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <MX_FSMC_Init+0xf0>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <MX_FSMC_Init+0xf0>)
 80040ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <MX_FSMC_Init+0xf0>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <MX_FSMC_Init+0xf0>)
 80040d8:	2200      	movs	r2, #0
 80040da:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 6;
 80040dc:	2306      	movs	r3, #6
 80040de:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80040e0:	230f      	movs	r3, #15
 80040e2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 26;
 80040e4:	231a      	movs	r3, #26
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80040ec:	2310      	movs	r3, #16
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80040f0:	2311      	movs	r3, #17
 80040f2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80040f4:	2300      	movs	r3, #0
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 3;
 80040f8:	2303      	movs	r3, #3
 80040fa:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80040fc:	230f      	movs	r3, #15
 80040fe:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 6;
 8004100:	2306      	movs	r3, #6
 8004102:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004108:	2310      	movs	r3, #16
 800410a:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800410c:	2311      	movs	r3, #17
 800410e:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8004114:	463a      	mov	r2, r7
 8004116:	f107 031c 	add.w	r3, r7, #28
 800411a:	4619      	mov	r1, r3
 800411c:	4808      	ldr	r0, [pc, #32]	; (8004140 <MX_FSMC_Init+0xf0>)
 800411e:	f001 fe8b 	bl	8005e38 <HAL_SRAM_Init>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8004128:	f000 fa03 	bl	8004532 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <MX_FSMC_Init+0xf8>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4a05      	ldr	r2, [pc, #20]	; (8004148 <MX_FSMC_Init+0xf8>)
 8004132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004136:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004138:	bf00      	nop
 800413a:	3738      	adds	r7, #56	; 0x38
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000a14 	.word	0x20000a14
 8004144:	a0000104 	.word	0xa0000104
 8004148:	40010000 	.word	0x40010000

0800414c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8004160:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <HAL_FSMC_MspInit+0x94>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d136      	bne.n	80041d6 <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <HAL_FSMC_MspInit+0x94>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800416e:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HAL_FSMC_MspInit+0x98>)
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <HAL_FSMC_MspInit+0x98>)
 8004174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004178:	6153      	str	r3, [r2, #20]
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <HAL_FSMC_MspInit+0x98>)
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8004186:	f241 0301 	movw	r3, #4097	; 0x1001
 800418a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418c:	2302      	movs	r3, #2
 800418e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004190:	2303      	movs	r3, #3
 8004192:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	4619      	mov	r1, r3
 800419a:	4813      	ldr	r0, [pc, #76]	; (80041e8 <HAL_FSMC_MspInit+0x9c>)
 800419c:	f001 f878 	bl	8005290 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80041a0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80041a4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a6:	2302      	movs	r3, #2
 80041a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041aa:	2303      	movs	r3, #3
 80041ac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041ae:	f107 0308 	add.w	r3, r7, #8
 80041b2:	4619      	mov	r1, r3
 80041b4:	480d      	ldr	r0, [pc, #52]	; (80041ec <HAL_FSMC_MspInit+0xa0>)
 80041b6:	f001 f86b 	bl	8005290 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80041ba:	f24c 7333 	movw	r3, #50995	; 0xc733
 80041be:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c0:	2302      	movs	r3, #2
 80041c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041c4:	2303      	movs	r3, #3
 80041c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041c8:	f107 0308 	add.w	r3, r7, #8
 80041cc:	4619      	mov	r1, r3
 80041ce:	4808      	ldr	r0, [pc, #32]	; (80041f0 <HAL_FSMC_MspInit+0xa4>)
 80041d0:	f001 f85e 	bl	8005290 <HAL_GPIO_Init>
 80041d4:	e000      	b.n	80041d8 <HAL_FSMC_MspInit+0x8c>
    return;
 80041d6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000a5c 	.word	0x20000a5c
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40012000 	.word	0x40012000
 80041ec:	40011800 	.word	0x40011800
 80041f0:	40011400 	.word	0x40011400

080041f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80041fc:	f7ff ffa6 	bl	800414c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420e:	f107 0318 	add.w	r3, r7, #24
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800421c:	4b44      	ldr	r3, [pc, #272]	; (8004330 <MX_GPIO_Init+0x128>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	4a43      	ldr	r2, [pc, #268]	; (8004330 <MX_GPIO_Init+0x128>)
 8004222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004226:	6193      	str	r3, [r2, #24]
 8004228:	4b41      	ldr	r3, [pc, #260]	; (8004330 <MX_GPIO_Init+0x128>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004234:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <MX_GPIO_Init+0x128>)
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	4a3d      	ldr	r2, [pc, #244]	; (8004330 <MX_GPIO_Init+0x128>)
 800423a:	f043 0310 	orr.w	r3, r3, #16
 800423e:	6193      	str	r3, [r2, #24]
 8004240:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <MX_GPIO_Init+0x128>)
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800424c:	4b38      	ldr	r3, [pc, #224]	; (8004330 <MX_GPIO_Init+0x128>)
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	4a37      	ldr	r2, [pc, #220]	; (8004330 <MX_GPIO_Init+0x128>)
 8004252:	f043 0304 	orr.w	r3, r3, #4
 8004256:	6193      	str	r3, [r2, #24]
 8004258:	4b35      	ldr	r3, [pc, #212]	; (8004330 <MX_GPIO_Init+0x128>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004264:	4b32      	ldr	r3, [pc, #200]	; (8004330 <MX_GPIO_Init+0x128>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	4a31      	ldr	r2, [pc, #196]	; (8004330 <MX_GPIO_Init+0x128>)
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6193      	str	r3, [r2, #24]
 8004270:	4b2f      	ldr	r3, [pc, #188]	; (8004330 <MX_GPIO_Init+0x128>)
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800427c:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <MX_GPIO_Init+0x128>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <MX_GPIO_Init+0x128>)
 8004282:	f043 0320 	orr.w	r3, r3, #32
 8004286:	6193      	str	r3, [r2, #24]
 8004288:	4b29      	ldr	r3, [pc, #164]	; (8004330 <MX_GPIO_Init+0x128>)
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004294:	4b26      	ldr	r3, [pc, #152]	; (8004330 <MX_GPIO_Init+0x128>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	4a25      	ldr	r2, [pc, #148]	; (8004330 <MX_GPIO_Init+0x128>)
 800429a:	f043 0308 	orr.w	r3, r3, #8
 800429e:	6193      	str	r3, [r2, #24]
 80042a0:	4b23      	ldr	r3, [pc, #140]	; (8004330 <MX_GPIO_Init+0x128>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80042ac:	2200      	movs	r2, #0
 80042ae:	2120      	movs	r1, #32
 80042b0:	4820      	ldr	r0, [pc, #128]	; (8004334 <MX_GPIO_Init+0x12c>)
 80042b2:	f001 f998 	bl	80055e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80042b6:	2200      	movs	r2, #0
 80042b8:	2120      	movs	r1, #32
 80042ba:	481f      	ldr	r0, [pc, #124]	; (8004338 <MX_GPIO_Init+0x130>)
 80042bc:	f001 f993 	bl	80055e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 80042c0:	2318      	movs	r3, #24
 80042c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042c8:	2301      	movs	r3, #1
 80042ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042cc:	f107 0318 	add.w	r3, r7, #24
 80042d0:	4619      	mov	r1, r3
 80042d2:	4818      	ldr	r0, [pc, #96]	; (8004334 <MX_GPIO_Init+0x12c>)
 80042d4:	f000 ffdc 	bl	8005290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80042d8:	2320      	movs	r3, #32
 80042da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042dc:	2301      	movs	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042e4:	2303      	movs	r3, #3
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80042e8:	f107 0318 	add.w	r3, r7, #24
 80042ec:	4619      	mov	r1, r3
 80042ee:	4811      	ldr	r0, [pc, #68]	; (8004334 <MX_GPIO_Init+0x12c>)
 80042f0:	f000 ffce 	bl	8005290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80042f4:	2301      	movs	r3, #1
 80042f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042fc:	2302      	movs	r3, #2
 80042fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8004300:	f107 0318 	add.w	r3, r7, #24
 8004304:	4619      	mov	r1, r3
 8004306:	480d      	ldr	r0, [pc, #52]	; (800433c <MX_GPIO_Init+0x134>)
 8004308:	f000 ffc2 	bl	8005290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800430c:	2320      	movs	r3, #32
 800430e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004310:	2301      	movs	r3, #1
 8004312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004314:	2300      	movs	r3, #0
 8004316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004318:	2303      	movs	r3, #3
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800431c:	f107 0318 	add.w	r3, r7, #24
 8004320:	4619      	mov	r1, r3
 8004322:	4805      	ldr	r0, [pc, #20]	; (8004338 <MX_GPIO_Init+0x130>)
 8004324:	f000 ffb4 	bl	8005290 <HAL_GPIO_Init>

}
 8004328:	bf00      	nop
 800432a:	3728      	adds	r7, #40	; 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	40011800 	.word	0x40011800
 8004338:	40010c00 	.word	0x40010c00
 800433c:	40010800 	.word	0x40010800

08004340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b090      	sub	sp, #64	; 0x40
 8004344:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int x = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
	u8 lcd_id[12];						//存放LCD ID字符�????
	uint8_t g_text_buf[] = {"STM32 FLASH TEST"};
 800434a:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <main+0x148>)
 800434c:	f107 0414 	add.w	r4, r7, #20
 8004350:	461d      	mov	r5, r3
 8004352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004356:	682b      	ldr	r3, [r5, #0]
 8004358:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800435a:	f000 fac3 	bl	80048e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800435e:	f000 f8ad 	bl	80044bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004362:	f7ff ff51 	bl	8004208 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004366:	f000 fa03 	bl	8004770 <MX_USART1_UART_Init>
  MX_FSMC_Init();
 800436a:	f7ff fe71 	bl	8004050 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 800436e:	f7fd f947 	bl	8001600 <LCD_Init>
	POINT_COLOR=RED;     				//画笔颜色：红�????
 8004372:	4b46      	ldr	r3, [pc, #280]	; (800448c <main+0x14c>)
 8004374:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004378:	601a      	str	r2, [r3, #0]
	sprintf((char*)lcd_id,"LCD ID:%04X",lcddev.id);//将LCD ID打印到lcd_id数组�????
 800437a:	4b45      	ldr	r3, [pc, #276]	; (8004490 <main+0x150>)
 800437c:	889b      	ldrh	r3, [r3, #4]
 800437e:	461a      	mov	r2, r3
 8004380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004384:	4943      	ldr	r1, [pc, #268]	; (8004494 <main+0x154>)
 8004386:	4618      	mov	r0, r3
 8004388:	f003 fb58 	bl	8007a3c <siprintf>

	LCD_ShowString(30,40,210,24,24,"WarShip STM32 ^_^");
 800438c:	4b42      	ldr	r3, [pc, #264]	; (8004498 <main+0x158>)
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	2318      	movs	r3, #24
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2318      	movs	r3, #24
 8004396:	22d2      	movs	r2, #210	; 0xd2
 8004398:	2128      	movs	r1, #40	; 0x28
 800439a:	201e      	movs	r0, #30
 800439c:	f7ff fd00 	bl	8003da0 <LCD_ShowString>
	//LCD_ShowString(30,70,200,16,16,"TFTLCD TEST");
	//LCD_ShowString(30,90,200,16,16,"ATOM@ALIENTEK");
	LCD_ShowString(30,70,200,16,16,lcd_id);		//显示LCD ID
 80043a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	2310      	movs	r3, #16
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	2310      	movs	r3, #16
 80043ac:	22c8      	movs	r2, #200	; 0xc8
 80043ae:	2146      	movs	r1, #70	; 0x46
 80043b0:	201e      	movs	r0, #30
 80043b2:	f7ff fcf5 	bl	8003da0 <LCD_ShowString>
	//LCD_ShowString(30,130,200,12,12,"2017/5/27");
	LCD_ShowString(30,90,200,16,16,"KEY0:Write KEY1:Read");
 80043b6:	4b39      	ldr	r3, [pc, #228]	; (800449c <main+0x15c>)
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	2310      	movs	r3, #16
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2310      	movs	r3, #16
 80043c0:	22c8      	movs	r2, #200	; 0xc8
 80043c2:	215a      	movs	r1, #90	; 0x5a
 80043c4:	201e      	movs	r0, #30
 80043c6:	f7ff fceb 	bl	8003da0 <LCD_ShowString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(KEY0 == KEY_DOWN)
 80043ca:	2110      	movs	r1, #16
 80043cc:	4834      	ldr	r0, [pc, #208]	; (80044a0 <main+0x160>)
 80043ce:	f001 f8f3 	bl	80055b8 <HAL_GPIO_ReadPin>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11e      	bne.n	8004416 <main+0xd6>
		{
			LCD_ShowString(30,110,200,16,16,"Start Write FLASH   ");
 80043d8:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <main+0x164>)
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	2310      	movs	r3, #16
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2310      	movs	r3, #16
 80043e2:	22c8      	movs	r2, #200	; 0xc8
 80043e4:	216e      	movs	r1, #110	; 0x6e
 80043e6:	201e      	movs	r0, #30
 80043e8:	f7ff fcda 	bl	8003da0 <LCD_ShowString>
			stmflash_write(FLASH_SAVE_ADDR, (uint16_t *)g_text_buf, BUF_FALSH_SIZE(g_text_buf));
 80043ec:	f107 0314 	add.w	r3, r7, #20
 80043f0:	2209      	movs	r2, #9
 80043f2:	4619      	mov	r1, r3
 80043f4:	482c      	ldr	r0, [pc, #176]	; (80044a8 <main+0x168>)
 80043f6:	f7ff fd77 	bl	8003ee8 <stmflash_write>
			LCD_ShowString(30,110,200,16,16,"FLASH Write Finished");
 80043fa:	4b2c      	ldr	r3, [pc, #176]	; (80044ac <main+0x16c>)
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	2310      	movs	r3, #16
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2310      	movs	r3, #16
 8004404:	22c8      	movs	r2, #200	; 0xc8
 8004406:	216e      	movs	r1, #110	; 0x6e
 8004408:	201e      	movs	r0, #30
 800440a:	f7ff fcc9 	bl	8003da0 <LCD_ShowString>
			HAL_Delay(200);
 800440e:	20c8      	movs	r0, #200	; 0xc8
 8004410:	f000 faca 	bl	80049a8 <HAL_Delay>
 8004414:	e034      	b.n	8004480 <main+0x140>
		}
		else if(KEY1 == KEY_DOWN)
 8004416:	2108      	movs	r1, #8
 8004418:	4821      	ldr	r0, [pc, #132]	; (80044a0 <main+0x160>)
 800441a:	f001 f8cd 	bl	80055b8 <HAL_GPIO_ReadPin>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d12d      	bne.n	8004480 <main+0x140>
		{
			LCD_ShowString(30,110,200,16,16,"Start Read FLASH   ");
 8004424:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <main+0x170>)
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	2310      	movs	r3, #16
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2310      	movs	r3, #16
 800442e:	22c8      	movs	r2, #200	; 0xc8
 8004430:	216e      	movs	r1, #110	; 0x6e
 8004432:	201e      	movs	r0, #30
 8004434:	f7ff fcb4 	bl	8003da0 <LCD_ShowString>
			stmflash_read(FLASH_SAVE_ADDR, (uint16_t *)datatemp, BUF_FALSH_SIZE(g_text_buf));
 8004438:	463b      	mov	r3, r7
 800443a:	2209      	movs	r2, #9
 800443c:	4619      	mov	r1, r3
 800443e:	481a      	ldr	r0, [pc, #104]	; (80044a8 <main+0x168>)
 8004440:	f7ff fd07 	bl	8003e52 <stmflash_read>
			LCD_ShowString(30,110,200,16,16,"TheData Readed Is: ");
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <main+0x174>)
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	2310      	movs	r3, #16
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2310      	movs	r3, #16
 800444e:	22c8      	movs	r2, #200	; 0xc8
 8004450:	216e      	movs	r1, #110	; 0x6e
 8004452:	201e      	movs	r0, #30
 8004454:	f7ff fca4 	bl	8003da0 <LCD_ShowString>
			POINT_COLOR=BLUE;
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <main+0x14c>)
 800445a:	221f      	movs	r2, #31
 800445c:	601a      	str	r2, [r3, #0]
			LCD_ShowString(30,130,200,16,16,datatemp);
 800445e:	463b      	mov	r3, r7
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	2310      	movs	r3, #16
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	2310      	movs	r3, #16
 8004468:	22c8      	movs	r2, #200	; 0xc8
 800446a:	2182      	movs	r1, #130	; 0x82
 800446c:	201e      	movs	r0, #30
 800446e:	f7ff fc97 	bl	8003da0 <LCD_ShowString>
			POINT_COLOR=RED;
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <main+0x14c>)
 8004474:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004478:	601a      	str	r2, [r3, #0]
			HAL_Delay(200);
 800447a:	20c8      	movs	r0, #200	; 0xc8
 800447c:	f000 fa94 	bl	80049a8 <HAL_Delay>
		}
		printf("test\n\r");
 8004480:	480d      	ldr	r0, [pc, #52]	; (80044b8 <main+0x178>)
 8004482:	f003 fabf 	bl	8007a04 <iprintf>
		if(KEY0 == KEY_DOWN)
 8004486:	e7a0      	b.n	80043ca <main+0x8a>
 8004488:	0800b670 	.word	0x0800b670
 800448c:	20000000 	.word	0x20000000
 8004490:	20000204 	.word	0x20000204
 8004494:	0800b5d8 	.word	0x0800b5d8
 8004498:	0800b5e4 	.word	0x0800b5e4
 800449c:	0800b5f8 	.word	0x0800b5f8
 80044a0:	40011800 	.word	0x40011800
 80044a4:	0800b610 	.word	0x0800b610
 80044a8:	08070000 	.word	0x08070000
 80044ac:	0800b628 	.word	0x0800b628
 80044b0:	0800b640 	.word	0x0800b640
 80044b4:	0800b654 	.word	0x0800b654
 80044b8:	0800b668 	.word	0x0800b668

080044bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b090      	sub	sp, #64	; 0x40
 80044c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044c2:	f107 0318 	add.w	r3, r7, #24
 80044c6:	2228      	movs	r2, #40	; 0x28
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f002 fc24 	bl	8006d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044d0:	1d3b      	adds	r3, r7, #4
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044de:	2302      	movs	r3, #2
 80044e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044e2:	2301      	movs	r3, #1
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044e6:	2310      	movs	r3, #16
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044ee:	f107 0318 	add.w	r3, r7, #24
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 f890 	bl	8005618 <HAL_RCC_OscConfig>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80044fe:	f000 f818 	bl	8004532 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004502:	230f      	movs	r3, #15
 8004504:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f001 fafe 	bl	8005b1c <HAL_RCC_ClockConfig>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004526:	f000 f804 	bl	8004532 <Error_Handler>
  }
}
 800452a:	bf00      	nop
 800452c:	3740      	adds	r7, #64	; 0x40
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004536:	b672      	cpsid	i
}
 8004538:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800453a:	e7fe      	b.n	800453a <Error_Handler+0x8>

0800453c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004542:	4b0e      	ldr	r3, [pc, #56]	; (800457c <HAL_MspInit+0x40>)
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	4a0d      	ldr	r2, [pc, #52]	; (800457c <HAL_MspInit+0x40>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	6193      	str	r3, [r2, #24]
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_MspInit+0x40>)
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <HAL_MspInit+0x40>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	4a07      	ldr	r2, [pc, #28]	; (800457c <HAL_MspInit+0x40>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004564:	61d3      	str	r3, [r2, #28]
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_MspInit+0x40>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	40021000 	.word	0x40021000

08004580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004584:	e7fe      	b.n	8004584 <NMI_Handler+0x4>

08004586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800458a:	e7fe      	b.n	800458a <HardFault_Handler+0x4>

0800458c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004590:	e7fe      	b.n	8004590 <MemManage_Handler+0x4>

08004592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004592:	b480      	push	{r7}
 8004594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004596:	e7fe      	b.n	8004596 <BusFault_Handler+0x4>

08004598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800459c:	e7fe      	b.n	800459c <UsageFault_Handler+0x4>

0800459e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045b6:	b480      	push	{r7}
 80045b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045c6:	f000 f9d3 	bl	8004970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045d4:	4802      	ldr	r0, [pc, #8]	; (80045e0 <USART1_IRQHandler+0x10>)
 80045d6:	f001 fd4f 	bl	8006078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000a64 	.word	0x20000a64

080045e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return 1;
 80045e8:	2301      	movs	r3, #1
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <_kill>:

int _kill(int pid, int sig)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045fc:	f002 fb62 	bl	8006cc4 <__errno>
 8004600:	4603      	mov	r3, r0
 8004602:	2216      	movs	r2, #22
 8004604:	601a      	str	r2, [r3, #0]
  return -1;
 8004606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <_exit>:

void _exit (int status)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800461a:	f04f 31ff 	mov.w	r1, #4294967295
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff ffe7 	bl	80045f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004624:	e7fe      	b.n	8004624 <_exit+0x12>

08004626 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e00a      	b.n	800464e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004638:	f3af 8000 	nop.w
 800463c:	4601      	mov	r1, r0
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	60ba      	str	r2, [r7, #8]
 8004644:	b2ca      	uxtb	r2, r1
 8004646:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3301      	adds	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	dbf0      	blt.n	8004638 <_read+0x12>
  }

  return len;
 8004656:	687b      	ldr	r3, [r7, #4]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	e009      	b.n	8004686 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	60ba      	str	r2, [r7, #8]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f8f6 	bl	800486c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	3301      	adds	r3, #1
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	dbf1      	blt.n	8004672 <_write+0x12>
  }
  return len;
 800468e:	687b      	ldr	r3, [r7, #4]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <_close>:

int _close(int file)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr

080046ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046be:	605a      	str	r2, [r3, #4]
  return 0;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <_isatty>:

int _isatty(int file)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046d4:	2301      	movs	r3, #1
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004700:	4a14      	ldr	r2, [pc, #80]	; (8004754 <_sbrk+0x5c>)
 8004702:	4b15      	ldr	r3, [pc, #84]	; (8004758 <_sbrk+0x60>)
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800470c:	4b13      	ldr	r3, [pc, #76]	; (800475c <_sbrk+0x64>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <_sbrk+0x64>)
 8004716:	4a12      	ldr	r2, [pc, #72]	; (8004760 <_sbrk+0x68>)
 8004718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <_sbrk+0x64>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	429a      	cmp	r2, r3
 8004726:	d207      	bcs.n	8004738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004728:	f002 facc 	bl	8006cc4 <__errno>
 800472c:	4603      	mov	r3, r0
 800472e:	220c      	movs	r2, #12
 8004730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004732:	f04f 33ff 	mov.w	r3, #4294967295
 8004736:	e009      	b.n	800474c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004738:	4b08      	ldr	r3, [pc, #32]	; (800475c <_sbrk+0x64>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <_sbrk+0x64>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	4a05      	ldr	r2, [pc, #20]	; (800475c <_sbrk+0x64>)
 8004748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20010000 	.word	0x20010000
 8004758:	00000400 	.word	0x00000400
 800475c:	20000a60 	.word	0x20000a60
 8004760:	20000ae0 	.word	0x20000ae0

08004764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <MX_USART1_UART_Init+0x4c>)
 8004776:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <MX_USART1_UART_Init+0x50>)
 8004778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <MX_USART1_UART_Init+0x4c>)
 800477c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <MX_USART1_UART_Init+0x4c>)
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004788:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <MX_USART1_UART_Init+0x4c>)
 800478a:	2200      	movs	r2, #0
 800478c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <MX_USART1_UART_Init+0x4c>)
 8004790:	2200      	movs	r2, #0
 8004792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <MX_USART1_UART_Init+0x4c>)
 8004796:	220c      	movs	r2, #12
 8004798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800479a:	4b08      	ldr	r3, [pc, #32]	; (80047bc <MX_USART1_UART_Init+0x4c>)
 800479c:	2200      	movs	r2, #0
 800479e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <MX_USART1_UART_Init+0x4c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047a6:	4805      	ldr	r0, [pc, #20]	; (80047bc <MX_USART1_UART_Init+0x4c>)
 80047a8:	f001 fb93 	bl	8005ed2 <HAL_UART_Init>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80047b2:	f7ff febe 	bl	8004532 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000a64 	.word	0x20000a64
 80047c0:	40013800 	.word	0x40013800

080047c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047cc:	f107 0310 	add.w	r3, r7, #16
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a20      	ldr	r2, [pc, #128]	; (8004860 <HAL_UART_MspInit+0x9c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d139      	bne.n	8004858 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047e4:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <HAL_UART_MspInit+0xa0>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <HAL_UART_MspInit+0xa0>)
 80047ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ee:	6193      	str	r3, [r2, #24]
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <HAL_UART_MspInit+0xa0>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_UART_MspInit+0xa0>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	4a18      	ldr	r2, [pc, #96]	; (8004864 <HAL_UART_MspInit+0xa0>)
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	6193      	str	r3, [r2, #24]
 8004808:	4b16      	ldr	r3, [pc, #88]	; (8004864 <HAL_UART_MspInit+0xa0>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004818:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481a:	2302      	movs	r3, #2
 800481c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800481e:	2303      	movs	r3, #3
 8004820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004822:	f107 0310 	add.w	r3, r7, #16
 8004826:	4619      	mov	r1, r3
 8004828:	480f      	ldr	r0, [pc, #60]	; (8004868 <HAL_UART_MspInit+0xa4>)
 800482a:	f000 fd31 	bl	8005290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800482e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483c:	f107 0310 	add.w	r3, r7, #16
 8004840:	4619      	mov	r1, r3
 8004842:	4809      	ldr	r0, [pc, #36]	; (8004868 <HAL_UART_MspInit+0xa4>)
 8004844:	f000 fd24 	bl	8005290 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004848:	2200      	movs	r2, #0
 800484a:	2100      	movs	r1, #0
 800484c:	2025      	movs	r0, #37	; 0x25
 800484e:	f000 f9a6 	bl	8004b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004852:	2025      	movs	r0, #37	; 0x25
 8004854:	f000 f9bf 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004858:	bf00      	nop
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40013800 	.word	0x40013800
 8004864:	40021000 	.word	0x40021000
 8004868:	40010800 	.word	0x40010800

0800486c <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	uint8_t c=ch;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 800487a:	f107 010f 	add.w	r1, r7, #15
 800487e:	2364      	movs	r3, #100	; 0x64
 8004880:	2201      	movs	r2, #1
 8004882:	4804      	ldr	r0, [pc, #16]	; (8004894 <__io_putchar+0x28>)
 8004884:	f001 fb75 	bl	8005f72 <HAL_UART_Transmit>
	return ch;
 8004888:	687b      	ldr	r3, [r7, #4]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000a64 	.word	0x20000a64

08004898 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004898:	f7ff ff64 	bl	8004764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800489c:	480b      	ldr	r0, [pc, #44]	; (80048cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800489e:	490c      	ldr	r1, [pc, #48]	; (80048d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80048a0:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80048a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048a4:	e002      	b.n	80048ac <LoopCopyDataInit>

080048a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048aa:	3304      	adds	r3, #4

080048ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048b0:	d3f9      	bcc.n	80048a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048b2:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80048b4:	4c09      	ldr	r4, [pc, #36]	; (80048dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048b8:	e001      	b.n	80048be <LoopFillZerobss>

080048ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048bc:	3204      	adds	r2, #4

080048be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048c0:	d3fb      	bcc.n	80048ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048c2:	f002 fa05 	bl	8006cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048c6:	f7ff fd3b 	bl	8004340 <main>
  bx lr
 80048ca:	4770      	bx	lr
  ldr r0, =_sdata
 80048cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048d0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80048d4:	0800d324 	.word	0x0800d324
  ldr r2, =_sbss
 80048d8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80048dc:	20000ae0 	.word	0x20000ae0

080048e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048e0:	e7fe      	b.n	80048e0 <ADC1_2_IRQHandler>
	...

080048e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048e8:	4b08      	ldr	r3, [pc, #32]	; (800490c <HAL_Init+0x28>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a07      	ldr	r2, [pc, #28]	; (800490c <HAL_Init+0x28>)
 80048ee:	f043 0310 	orr.w	r3, r3, #16
 80048f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048f4:	2003      	movs	r0, #3
 80048f6:	f000 f947 	bl	8004b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048fa:	200f      	movs	r0, #15
 80048fc:	f000 f808 	bl	8004910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004900:	f7ff fe1c 	bl	800453c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40022000 	.word	0x40022000

08004910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_InitTick+0x54>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_InitTick+0x58>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	4619      	mov	r1, r3
 8004922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004926:	fbb3 f3f1 	udiv	r3, r3, r1
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f95f 	bl	8004bf2 <HAL_SYSTICK_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e00e      	b.n	800495c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b0f      	cmp	r3, #15
 8004942:	d80a      	bhi.n	800495a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004944:	2200      	movs	r2, #0
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	f000 f927 	bl	8004b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004950:	4a06      	ldr	r2, [pc, #24]	; (800496c <HAL_InitTick+0x5c>)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e000      	b.n	800495c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000008 	.word	0x20000008
 8004968:	20000010 	.word	0x20000010
 800496c:	2000000c 	.word	0x2000000c

08004970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_IncTick+0x1c>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_IncTick+0x20>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4413      	add	r3, r2
 8004980:	4a03      	ldr	r2, [pc, #12]	; (8004990 <HAL_IncTick+0x20>)
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	20000010 	.word	0x20000010
 8004990:	20000aac 	.word	0x20000aac

08004994 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return uwTick;
 8004998:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <HAL_GetTick+0x10>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	20000aac 	.word	0x20000aac

080049a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049b0:	f7ff fff0 	bl	8004994 <HAL_GetTick>
 80049b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d005      	beq.n	80049ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <HAL_Delay+0x44>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049ce:	bf00      	nop
 80049d0:	f7ff ffe0 	bl	8004994 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d8f7      	bhi.n	80049d0 <HAL_Delay+0x28>
  {
  }
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000010 	.word	0x20000010

080049f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <__NVIC_SetPriorityGrouping+0x44>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a22:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <__NVIC_SetPriorityGrouping+0x44>)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	60d3      	str	r3, [r2, #12]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <__NVIC_GetPriorityGrouping+0x18>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	f003 0307 	and.w	r3, r3, #7
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	db0b      	blt.n	8004a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	f003 021f 	and.w	r2, r3, #31
 8004a6c:	4906      	ldr	r1, [pc, #24]	; (8004a88 <__NVIC_EnableIRQ+0x34>)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2001      	movs	r0, #1
 8004a76:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	e000e100 	.word	0xe000e100

08004a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	6039      	str	r1, [r7, #0]
 8004a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	db0a      	blt.n	8004ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	490c      	ldr	r1, [pc, #48]	; (8004ad8 <__NVIC_SetPriority+0x4c>)
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	0112      	lsls	r2, r2, #4
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	440b      	add	r3, r1
 8004ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ab4:	e00a      	b.n	8004acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	4908      	ldr	r1, [pc, #32]	; (8004adc <__NVIC_SetPriority+0x50>)
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	3b04      	subs	r3, #4
 8004ac4:	0112      	lsls	r2, r2, #4
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	440b      	add	r3, r1
 8004aca:	761a      	strb	r2, [r3, #24]
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	e000e100 	.word	0xe000e100
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b089      	sub	sp, #36	; 0x24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f1c3 0307 	rsb	r3, r3, #7
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	bf28      	it	cs
 8004afe:	2304      	movcs	r3, #4
 8004b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3304      	adds	r3, #4
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d902      	bls.n	8004b10 <NVIC_EncodePriority+0x30>
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3b03      	subs	r3, #3
 8004b0e:	e000      	b.n	8004b12 <NVIC_EncodePriority+0x32>
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43da      	mvns	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	401a      	ands	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b28:	f04f 31ff 	mov.w	r1, #4294967295
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	43d9      	mvns	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b38:	4313      	orrs	r3, r2
         );
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3724      	adds	r7, #36	; 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b54:	d301      	bcc.n	8004b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b56:	2301      	movs	r3, #1
 8004b58:	e00f      	b.n	8004b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <SysTick_Config+0x40>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b62:	210f      	movs	r1, #15
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	f7ff ff90 	bl	8004a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <SysTick_Config+0x40>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b72:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <SysTick_Config+0x40>)
 8004b74:	2207      	movs	r2, #7
 8004b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	e000e010 	.word	0xe000e010

08004b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff2d 	bl	80049f0 <__NVIC_SetPriorityGrouping>
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bb0:	f7ff ff42 	bl	8004a38 <__NVIC_GetPriorityGrouping>
 8004bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f7ff ff90 	bl	8004ae0 <NVIC_EncodePriority>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff5f 	bl	8004a8c <__NVIC_SetPriority>
}
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ff35 	bl	8004a54 <__NVIC_EnableIRQ>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ffa2 	bl	8004b44 <SysTick_Config>
 8004c00:	4603      	mov	r3, r0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d008      	beq.n	8004c34 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2204      	movs	r2, #4
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e020      	b.n	8004c76 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 020e 	bic.w	r2, r2, #14
 8004c42:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d005      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	73fb      	strb	r3, [r7, #15]
 8004ca2:	e0d6      	b.n	8004e52 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 020e 	bic.w	r2, r2, #14
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b64      	ldr	r3, [pc, #400]	; (8004e5c <HAL_DMA_Abort_IT+0x1dc>)
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d958      	bls.n	8004d82 <HAL_DMA_Abort_IT+0x102>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a62      	ldr	r2, [pc, #392]	; (8004e60 <HAL_DMA_Abort_IT+0x1e0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d04f      	beq.n	8004d7a <HAL_DMA_Abort_IT+0xfa>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a61      	ldr	r2, [pc, #388]	; (8004e64 <HAL_DMA_Abort_IT+0x1e4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d048      	beq.n	8004d76 <HAL_DMA_Abort_IT+0xf6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a5f      	ldr	r2, [pc, #380]	; (8004e68 <HAL_DMA_Abort_IT+0x1e8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d040      	beq.n	8004d70 <HAL_DMA_Abort_IT+0xf0>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a5e      	ldr	r2, [pc, #376]	; (8004e6c <HAL_DMA_Abort_IT+0x1ec>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d038      	beq.n	8004d6a <HAL_DMA_Abort_IT+0xea>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a5c      	ldr	r2, [pc, #368]	; (8004e70 <HAL_DMA_Abort_IT+0x1f0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d030      	beq.n	8004d64 <HAL_DMA_Abort_IT+0xe4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a5b      	ldr	r2, [pc, #364]	; (8004e74 <HAL_DMA_Abort_IT+0x1f4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d028      	beq.n	8004d5e <HAL_DMA_Abort_IT+0xde>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a52      	ldr	r2, [pc, #328]	; (8004e5c <HAL_DMA_Abort_IT+0x1dc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d020      	beq.n	8004d58 <HAL_DMA_Abort_IT+0xd8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a57      	ldr	r2, [pc, #348]	; (8004e78 <HAL_DMA_Abort_IT+0x1f8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d019      	beq.n	8004d54 <HAL_DMA_Abort_IT+0xd4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a55      	ldr	r2, [pc, #340]	; (8004e7c <HAL_DMA_Abort_IT+0x1fc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d012      	beq.n	8004d50 <HAL_DMA_Abort_IT+0xd0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a54      	ldr	r2, [pc, #336]	; (8004e80 <HAL_DMA_Abort_IT+0x200>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00a      	beq.n	8004d4a <HAL_DMA_Abort_IT+0xca>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a52      	ldr	r2, [pc, #328]	; (8004e84 <HAL_DMA_Abort_IT+0x204>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d102      	bne.n	8004d44 <HAL_DMA_Abort_IT+0xc4>
 8004d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d42:	e01b      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d48:	e018      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d4e:	e015      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d50:	2310      	movs	r3, #16
 8004d52:	e013      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e011      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d5c:	e00e      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d62:	e00b      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d68:	e008      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d6e:	e005      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d74:	e002      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d76:	2310      	movs	r3, #16
 8004d78:	e000      	b.n	8004d7c <HAL_DMA_Abort_IT+0xfc>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4a42      	ldr	r2, [pc, #264]	; (8004e88 <HAL_DMA_Abort_IT+0x208>)
 8004d7e:	6053      	str	r3, [r2, #4]
 8004d80:	e057      	b.n	8004e32 <HAL_DMA_Abort_IT+0x1b2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a36      	ldr	r2, [pc, #216]	; (8004e60 <HAL_DMA_Abort_IT+0x1e0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d04f      	beq.n	8004e2c <HAL_DMA_Abort_IT+0x1ac>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a34      	ldr	r2, [pc, #208]	; (8004e64 <HAL_DMA_Abort_IT+0x1e4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d048      	beq.n	8004e28 <HAL_DMA_Abort_IT+0x1a8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <HAL_DMA_Abort_IT+0x1e8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d040      	beq.n	8004e22 <HAL_DMA_Abort_IT+0x1a2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a31      	ldr	r2, [pc, #196]	; (8004e6c <HAL_DMA_Abort_IT+0x1ec>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d038      	beq.n	8004e1c <HAL_DMA_Abort_IT+0x19c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a30      	ldr	r2, [pc, #192]	; (8004e70 <HAL_DMA_Abort_IT+0x1f0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d030      	beq.n	8004e16 <HAL_DMA_Abort_IT+0x196>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2e      	ldr	r2, [pc, #184]	; (8004e74 <HAL_DMA_Abort_IT+0x1f4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d028      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x190>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a26      	ldr	r2, [pc, #152]	; (8004e5c <HAL_DMA_Abort_IT+0x1dc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d020      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x18a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <HAL_DMA_Abort_IT+0x1f8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d019      	beq.n	8004e06 <HAL_DMA_Abort_IT+0x186>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <HAL_DMA_Abort_IT+0x1fc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d012      	beq.n	8004e02 <HAL_DMA_Abort_IT+0x182>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <HAL_DMA_Abort_IT+0x200>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00a      	beq.n	8004dfc <HAL_DMA_Abort_IT+0x17c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <HAL_DMA_Abort_IT+0x204>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d102      	bne.n	8004df6 <HAL_DMA_Abort_IT+0x176>
 8004df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004df4:	e01b      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dfa:	e018      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e00:	e015      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004e02:	2310      	movs	r3, #16
 8004e04:	e013      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e011      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004e0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e0e:	e00e      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004e10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e14:	e00b      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e1a:	e008      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e20:	e005      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e26:	e002      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	e000      	b.n	8004e2e <HAL_DMA_Abort_IT+0x1ae>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_DMA_Abort_IT+0x20c>)
 8004e30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
    } 
  }
  return status;
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40020080 	.word	0x40020080
 8004e60:	40020008 	.word	0x40020008
 8004e64:	4002001c 	.word	0x4002001c
 8004e68:	40020030 	.word	0x40020030
 8004e6c:	40020044 	.word	0x40020044
 8004e70:	40020058 	.word	0x40020058
 8004e74:	4002006c 	.word	0x4002006c
 8004e78:	40020408 	.word	0x40020408
 8004e7c:	4002041c 	.word	0x4002041c
 8004e80:	40020430 	.word	0x40020430
 8004e84:	40020444 	.word	0x40020444
 8004e88:	40020400 	.word	0x40020400
 8004e8c:	40020000 	.word	0x40020000

08004e90 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004eaa:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <HAL_FLASH_Program+0xd8>)
 8004eac:	7e1b      	ldrb	r3, [r3, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_FLASH_Program+0x26>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e054      	b.n	8004f60 <HAL_FLASH_Program+0xd0>
 8004eb6:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <HAL_FLASH_Program+0xd8>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ebc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ec0:	f000 f8a8 	bl	8005014 <FLASH_WaitForLastOperation>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d144      	bne.n	8004f58 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d102      	bne.n	8004eda <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	757b      	strb	r3, [r7, #21]
 8004ed8:	e007      	b.n	8004eea <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d102      	bne.n	8004ee6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	757b      	strb	r3, [r7, #21]
 8004ee4:	e001      	b.n	8004eea <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	75bb      	strb	r3, [r7, #22]
 8004eee:	e02d      	b.n	8004f4c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004ef0:	7dbb      	ldrb	r3, [r7, #22]
 8004ef2:	005a      	lsls	r2, r3, #1
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	eb02 0c03 	add.w	ip, r2, r3
 8004efa:	7dbb      	ldrb	r3, [r7, #22]
 8004efc:	0119      	lsls	r1, r3, #4
 8004efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f02:	f1c1 0620 	rsb	r6, r1, #32
 8004f06:	f1a1 0020 	sub.w	r0, r1, #32
 8004f0a:	fa22 f401 	lsr.w	r4, r2, r1
 8004f0e:	fa03 f606 	lsl.w	r6, r3, r6
 8004f12:	4334      	orrs	r4, r6
 8004f14:	fa23 f000 	lsr.w	r0, r3, r0
 8004f18:	4304      	orrs	r4, r0
 8004f1a:	fa23 f501 	lsr.w	r5, r3, r1
 8004f1e:	b2a3      	uxth	r3, r4
 8004f20:	4619      	mov	r1, r3
 8004f22:	4660      	mov	r0, ip
 8004f24:	f000 f85a 	bl	8004fdc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f2c:	f000 f872 	bl	8005014 <FLASH_WaitForLastOperation>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004f34:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <HAL_FLASH_Program+0xdc>)
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	4a0c      	ldr	r2, [pc, #48]	; (8004f6c <HAL_FLASH_Program+0xdc>)
 8004f3a:	f023 0301 	bic.w	r3, r3, #1
 8004f3e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d107      	bne.n	8004f56 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004f46:	7dbb      	ldrb	r3, [r7, #22]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	75bb      	strb	r3, [r7, #22]
 8004f4c:	7dba      	ldrb	r2, [r7, #22]
 8004f4e:	7d7b      	ldrb	r3, [r7, #21]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d3cd      	bcc.n	8004ef0 <HAL_FLASH_Program+0x60>
 8004f54:	e000      	b.n	8004f58 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004f56:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <HAL_FLASH_Program+0xd8>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	761a      	strb	r2, [r3, #24]

  return status;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f68:	20000ab0 	.word	0x20000ab0
 8004f6c:	40022000 	.word	0x40022000

08004f70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <HAL_FLASH_Unlock+0x40>)
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00d      	beq.n	8004fa2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004f86:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <HAL_FLASH_Unlock+0x40>)
 8004f88:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <HAL_FLASH_Unlock+0x44>)
 8004f8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HAL_FLASH_Unlock+0x40>)
 8004f8e:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <HAL_FLASH_Unlock+0x48>)
 8004f90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <HAL_FLASH_Unlock+0x40>)
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40022000 	.word	0x40022000
 8004fb4:	45670123 	.word	0x45670123
 8004fb8:	cdef89ab 	.word	0xcdef89ab

08004fbc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_FLASH_Lock+0x1c>)
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <HAL_FLASH_Lock+0x1c>)
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fca:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40022000 	.word	0x40022000

08004fdc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <FLASH_Program_HalfWord+0x30>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <FLASH_Program_HalfWord+0x34>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	4a07      	ldr	r2, [pc, #28]	; (8005010 <FLASH_Program_HalfWord+0x34>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	887a      	ldrh	r2, [r7, #2]
 8004ffe:	801a      	strh	r2, [r3, #0]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000ab0 	.word	0x20000ab0
 8005010:	40022000 	.word	0x40022000

08005014 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800501c:	f7ff fcba 	bl	8004994 <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005022:	e010      	b.n	8005046 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d00c      	beq.n	8005046 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <FLASH_WaitForLastOperation+0x2e>
 8005032:	f7ff fcaf 	bl	8004994 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d201      	bcs.n	8005046 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e025      	b.n	8005092 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <FLASH_WaitForLastOperation+0x88>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e8      	bne.n	8005024 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <FLASH_WaitForLastOperation+0x88>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <FLASH_WaitForLastOperation+0x88>)
 8005060:	2220      	movs	r2, #32
 8005062:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <FLASH_WaitForLastOperation+0x88>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <FLASH_WaitForLastOperation+0x88>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <FLASH_WaitForLastOperation+0x88>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005088:	f000 f80a 	bl	80050a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40022000 	.word	0x40022000

080050a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80050aa:	4b23      	ldr	r3, [pc, #140]	; (8005138 <FLASH_SetErrorCode+0x98>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80050b6:	4b21      	ldr	r3, [pc, #132]	; (800513c <FLASH_SetErrorCode+0x9c>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f043 0302 	orr.w	r3, r3, #2
 80050be:	4a1f      	ldr	r2, [pc, #124]	; (800513c <FLASH_SetErrorCode+0x9c>)
 80050c0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f043 0310 	orr.w	r3, r3, #16
 80050c8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80050ca:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <FLASH_SetErrorCode+0x98>)
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80050d6:	4b19      	ldr	r3, [pc, #100]	; (800513c <FLASH_SetErrorCode+0x9c>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	4a17      	ldr	r2, [pc, #92]	; (800513c <FLASH_SetErrorCode+0x9c>)
 80050e0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f043 0304 	orr.w	r3, r3, #4
 80050e8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <FLASH_SetErrorCode+0x98>)
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00b      	beq.n	800510e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80050f6:	4b11      	ldr	r3, [pc, #68]	; (800513c <FLASH_SetErrorCode+0x9c>)
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	4a0f      	ldr	r2, [pc, #60]	; (800513c <FLASH_SetErrorCode+0x9c>)
 8005100:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005102:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <FLASH_SetErrorCode+0x98>)
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	4a0c      	ldr	r2, [pc, #48]	; (8005138 <FLASH_SetErrorCode+0x98>)
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f240 1201 	movw	r2, #257	; 0x101
 8005114:	4293      	cmp	r3, r2
 8005116:	d106      	bne.n	8005126 <FLASH_SetErrorCode+0x86>
 8005118:	4b07      	ldr	r3, [pc, #28]	; (8005138 <FLASH_SetErrorCode+0x98>)
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	4a06      	ldr	r2, [pc, #24]	; (8005138 <FLASH_SetErrorCode+0x98>)
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	61d3      	str	r3, [r2, #28]
}  
 8005124:	e002      	b.n	800512c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005126:	4a04      	ldr	r2, [pc, #16]	; (8005138 <FLASH_SetErrorCode+0x98>)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60d3      	str	r3, [r2, #12]
}  
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40022000 	.word	0x40022000
 800513c:	20000ab0 	.word	0x20000ab0

08005140 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005152:	4b2f      	ldr	r3, [pc, #188]	; (8005210 <HAL_FLASHEx_Erase+0xd0>)
 8005154:	7e1b      	ldrb	r3, [r3, #24]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_FLASHEx_Erase+0x1e>
 800515a:	2302      	movs	r3, #2
 800515c:	e053      	b.n	8005206 <HAL_FLASHEx_Erase+0xc6>
 800515e:	4b2c      	ldr	r3, [pc, #176]	; (8005210 <HAL_FLASHEx_Erase+0xd0>)
 8005160:	2201      	movs	r2, #1
 8005162:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d116      	bne.n	800519a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800516c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005170:	f7ff ff50 	bl	8005014 <FLASH_WaitForLastOperation>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d141      	bne.n	80051fe <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800517a:	2001      	movs	r0, #1
 800517c:	f000 f84c 	bl	8005218 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005180:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005184:	f7ff ff46 	bl	8005014 <FLASH_WaitForLastOperation>
 8005188:	4603      	mov	r3, r0
 800518a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800518c:	4b21      	ldr	r3, [pc, #132]	; (8005214 <HAL_FLASHEx_Erase+0xd4>)
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	4a20      	ldr	r2, [pc, #128]	; (8005214 <HAL_FLASHEx_Erase+0xd4>)
 8005192:	f023 0304 	bic.w	r3, r3, #4
 8005196:	6113      	str	r3, [r2, #16]
 8005198:	e031      	b.n	80051fe <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800519a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800519e:	f7ff ff39 	bl	8005014 <FLASH_WaitForLastOperation>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d12a      	bne.n	80051fe <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295
 80051ae:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	e019      	b.n	80051ec <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80051b8:	68b8      	ldr	r0, [r7, #8]
 80051ba:	f000 f849 	bl	8005250 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051c2:	f7ff ff27 	bl	8005014 <FLASH_WaitForLastOperation>
 80051c6:	4603      	mov	r3, r0
 80051c8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <HAL_FLASHEx_Erase+0xd4>)
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	4a11      	ldr	r2, [pc, #68]	; (8005214 <HAL_FLASHEx_Erase+0xd4>)
 80051d0:	f023 0302 	bic.w	r3, r3, #2
 80051d4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	601a      	str	r2, [r3, #0]
            break;
 80051e2:	e00c      	b.n	80051fe <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	02da      	lsls	r2, r3, #11
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3dc      	bcc.n	80051b8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80051fe:	4b04      	ldr	r3, [pc, #16]	; (8005210 <HAL_FLASHEx_Erase+0xd0>)
 8005200:	2200      	movs	r2, #0
 8005202:	761a      	strb	r2, [r3, #24]

  return status;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000ab0 	.word	0x20000ab0
 8005214:	40022000 	.word	0x40022000

08005218 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005220:	4b09      	ldr	r3, [pc, #36]	; (8005248 <FLASH_MassErase+0x30>)
 8005222:	2200      	movs	r2, #0
 8005224:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <FLASH_MassErase+0x34>)
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	4a08      	ldr	r2, [pc, #32]	; (800524c <FLASH_MassErase+0x34>)
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <FLASH_MassErase+0x34>)
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	4a05      	ldr	r2, [pc, #20]	; (800524c <FLASH_MassErase+0x34>)
 8005238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800523c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr
 8005248:	20000ab0 	.word	0x20000ab0
 800524c:	40022000 	.word	0x40022000

08005250 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005258:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <FLASH_PageErase+0x38>)
 800525a:	2200      	movs	r2, #0
 800525c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <FLASH_PageErase+0x3c>)
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	4a0a      	ldr	r2, [pc, #40]	; (800528c <FLASH_PageErase+0x3c>)
 8005264:	f043 0302 	orr.w	r3, r3, #2
 8005268:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800526a:	4a08      	ldr	r2, [pc, #32]	; (800528c <FLASH_PageErase+0x3c>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <FLASH_PageErase+0x3c>)
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	4a05      	ldr	r2, [pc, #20]	; (800528c <FLASH_PageErase+0x3c>)
 8005276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800527a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000ab0 	.word	0x20000ab0
 800528c:	40022000 	.word	0x40022000

08005290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005290:	b480      	push	{r7}
 8005292:	b08b      	sub	sp, #44	; 0x2c
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800529a:	2300      	movs	r3, #0
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800529e:	2300      	movs	r3, #0
 80052a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052a2:	e179      	b.n	8005598 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80052a4:	2201      	movs	r2, #1
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	4013      	ands	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	429a      	cmp	r2, r3
 80052be:	f040 8168 	bne.w	8005592 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	4a96      	ldr	r2, [pc, #600]	; (8005520 <HAL_GPIO_Init+0x290>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d05e      	beq.n	800538a <HAL_GPIO_Init+0xfa>
 80052cc:	4a94      	ldr	r2, [pc, #592]	; (8005520 <HAL_GPIO_Init+0x290>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d875      	bhi.n	80053be <HAL_GPIO_Init+0x12e>
 80052d2:	4a94      	ldr	r2, [pc, #592]	; (8005524 <HAL_GPIO_Init+0x294>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d058      	beq.n	800538a <HAL_GPIO_Init+0xfa>
 80052d8:	4a92      	ldr	r2, [pc, #584]	; (8005524 <HAL_GPIO_Init+0x294>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d86f      	bhi.n	80053be <HAL_GPIO_Init+0x12e>
 80052de:	4a92      	ldr	r2, [pc, #584]	; (8005528 <HAL_GPIO_Init+0x298>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d052      	beq.n	800538a <HAL_GPIO_Init+0xfa>
 80052e4:	4a90      	ldr	r2, [pc, #576]	; (8005528 <HAL_GPIO_Init+0x298>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d869      	bhi.n	80053be <HAL_GPIO_Init+0x12e>
 80052ea:	4a90      	ldr	r2, [pc, #576]	; (800552c <HAL_GPIO_Init+0x29c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d04c      	beq.n	800538a <HAL_GPIO_Init+0xfa>
 80052f0:	4a8e      	ldr	r2, [pc, #568]	; (800552c <HAL_GPIO_Init+0x29c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d863      	bhi.n	80053be <HAL_GPIO_Init+0x12e>
 80052f6:	4a8e      	ldr	r2, [pc, #568]	; (8005530 <HAL_GPIO_Init+0x2a0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d046      	beq.n	800538a <HAL_GPIO_Init+0xfa>
 80052fc:	4a8c      	ldr	r2, [pc, #560]	; (8005530 <HAL_GPIO_Init+0x2a0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d85d      	bhi.n	80053be <HAL_GPIO_Init+0x12e>
 8005302:	2b12      	cmp	r3, #18
 8005304:	d82a      	bhi.n	800535c <HAL_GPIO_Init+0xcc>
 8005306:	2b12      	cmp	r3, #18
 8005308:	d859      	bhi.n	80053be <HAL_GPIO_Init+0x12e>
 800530a:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <HAL_GPIO_Init+0x80>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	0800538b 	.word	0x0800538b
 8005314:	08005365 	.word	0x08005365
 8005318:	08005377 	.word	0x08005377
 800531c:	080053b9 	.word	0x080053b9
 8005320:	080053bf 	.word	0x080053bf
 8005324:	080053bf 	.word	0x080053bf
 8005328:	080053bf 	.word	0x080053bf
 800532c:	080053bf 	.word	0x080053bf
 8005330:	080053bf 	.word	0x080053bf
 8005334:	080053bf 	.word	0x080053bf
 8005338:	080053bf 	.word	0x080053bf
 800533c:	080053bf 	.word	0x080053bf
 8005340:	080053bf 	.word	0x080053bf
 8005344:	080053bf 	.word	0x080053bf
 8005348:	080053bf 	.word	0x080053bf
 800534c:	080053bf 	.word	0x080053bf
 8005350:	080053bf 	.word	0x080053bf
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005381 	.word	0x08005381
 800535c:	4a75      	ldr	r2, [pc, #468]	; (8005534 <HAL_GPIO_Init+0x2a4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005362:	e02c      	b.n	80053be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	623b      	str	r3, [r7, #32]
          break;
 800536a:	e029      	b.n	80053c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	3304      	adds	r3, #4
 8005372:	623b      	str	r3, [r7, #32]
          break;
 8005374:	e024      	b.n	80053c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	3308      	adds	r3, #8
 800537c:	623b      	str	r3, [r7, #32]
          break;
 800537e:	e01f      	b.n	80053c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	330c      	adds	r3, #12
 8005386:	623b      	str	r3, [r7, #32]
          break;
 8005388:	e01a      	b.n	80053c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005392:	2304      	movs	r3, #4
 8005394:	623b      	str	r3, [r7, #32]
          break;
 8005396:	e013      	b.n	80053c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80053a0:	2308      	movs	r3, #8
 80053a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	611a      	str	r2, [r3, #16]
          break;
 80053aa:	e009      	b.n	80053c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80053ac:	2308      	movs	r3, #8
 80053ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	615a      	str	r2, [r3, #20]
          break;
 80053b6:	e003      	b.n	80053c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80053b8:	2300      	movs	r3, #0
 80053ba:	623b      	str	r3, [r7, #32]
          break;
 80053bc:	e000      	b.n	80053c0 <HAL_GPIO_Init+0x130>
          break;
 80053be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2bff      	cmp	r3, #255	; 0xff
 80053c4:	d801      	bhi.n	80053ca <HAL_GPIO_Init+0x13a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	e001      	b.n	80053ce <HAL_GPIO_Init+0x13e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2bff      	cmp	r3, #255	; 0xff
 80053d4:	d802      	bhi.n	80053dc <HAL_GPIO_Init+0x14c>
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	e002      	b.n	80053e2 <HAL_GPIO_Init+0x152>
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	3b08      	subs	r3, #8
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	210f      	movs	r1, #15
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	6a39      	ldr	r1, [r7, #32]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	431a      	orrs	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80c1 	beq.w	8005592 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005410:	4b49      	ldr	r3, [pc, #292]	; (8005538 <HAL_GPIO_Init+0x2a8>)
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	4a48      	ldr	r2, [pc, #288]	; (8005538 <HAL_GPIO_Init+0x2a8>)
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	6193      	str	r3, [r2, #24]
 800541c:	4b46      	ldr	r3, [pc, #280]	; (8005538 <HAL_GPIO_Init+0x2a8>)
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005428:	4a44      	ldr	r2, [pc, #272]	; (800553c <HAL_GPIO_Init+0x2ac>)
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	089b      	lsrs	r3, r3, #2
 800542e:	3302      	adds	r3, #2
 8005430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005434:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	220f      	movs	r2, #15
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4013      	ands	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3c      	ldr	r2, [pc, #240]	; (8005540 <HAL_GPIO_Init+0x2b0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d01f      	beq.n	8005494 <HAL_GPIO_Init+0x204>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3b      	ldr	r2, [pc, #236]	; (8005544 <HAL_GPIO_Init+0x2b4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d019      	beq.n	8005490 <HAL_GPIO_Init+0x200>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a3a      	ldr	r2, [pc, #232]	; (8005548 <HAL_GPIO_Init+0x2b8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_GPIO_Init+0x1fc>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a39      	ldr	r2, [pc, #228]	; (800554c <HAL_GPIO_Init+0x2bc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00d      	beq.n	8005488 <HAL_GPIO_Init+0x1f8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a38      	ldr	r2, [pc, #224]	; (8005550 <HAL_GPIO_Init+0x2c0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <HAL_GPIO_Init+0x1f4>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a37      	ldr	r2, [pc, #220]	; (8005554 <HAL_GPIO_Init+0x2c4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d101      	bne.n	8005480 <HAL_GPIO_Init+0x1f0>
 800547c:	2305      	movs	r3, #5
 800547e:	e00a      	b.n	8005496 <HAL_GPIO_Init+0x206>
 8005480:	2306      	movs	r3, #6
 8005482:	e008      	b.n	8005496 <HAL_GPIO_Init+0x206>
 8005484:	2304      	movs	r3, #4
 8005486:	e006      	b.n	8005496 <HAL_GPIO_Init+0x206>
 8005488:	2303      	movs	r3, #3
 800548a:	e004      	b.n	8005496 <HAL_GPIO_Init+0x206>
 800548c:	2302      	movs	r3, #2
 800548e:	e002      	b.n	8005496 <HAL_GPIO_Init+0x206>
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <HAL_GPIO_Init+0x206>
 8005494:	2300      	movs	r3, #0
 8005496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005498:	f002 0203 	and.w	r2, r2, #3
 800549c:	0092      	lsls	r2, r2, #2
 800549e:	4093      	lsls	r3, r2
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80054a6:	4925      	ldr	r1, [pc, #148]	; (800553c <HAL_GPIO_Init+0x2ac>)
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	3302      	adds	r3, #2
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80054c0:	4b25      	ldr	r3, [pc, #148]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	4924      	ldr	r1, [pc, #144]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	608b      	str	r3, [r1, #8]
 80054cc:	e006      	b.n	80054dc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80054ce:	4b22      	ldr	r3, [pc, #136]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	43db      	mvns	r3, r3
 80054d6:	4920      	ldr	r1, [pc, #128]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 80054d8:	4013      	ands	r3, r2
 80054da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d006      	beq.n	80054f6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80054e8:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	491a      	ldr	r1, [pc, #104]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60cb      	str	r3, [r1, #12]
 80054f4:	e006      	b.n	8005504 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	4916      	ldr	r1, [pc, #88]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 8005500:	4013      	ands	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d025      	beq.n	800555c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	4910      	ldr	r1, [pc, #64]	; (8005558 <HAL_GPIO_Init+0x2c8>)
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	4313      	orrs	r3, r2
 800551a:	604b      	str	r3, [r1, #4]
 800551c:	e025      	b.n	800556a <HAL_GPIO_Init+0x2da>
 800551e:	bf00      	nop
 8005520:	10320000 	.word	0x10320000
 8005524:	10310000 	.word	0x10310000
 8005528:	10220000 	.word	0x10220000
 800552c:	10210000 	.word	0x10210000
 8005530:	10120000 	.word	0x10120000
 8005534:	10110000 	.word	0x10110000
 8005538:	40021000 	.word	0x40021000
 800553c:	40010000 	.word	0x40010000
 8005540:	40010800 	.word	0x40010800
 8005544:	40010c00 	.word	0x40010c00
 8005548:	40011000 	.word	0x40011000
 800554c:	40011400 	.word	0x40011400
 8005550:	40011800 	.word	0x40011800
 8005554:	40011c00 	.word	0x40011c00
 8005558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800555c:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <HAL_GPIO_Init+0x324>)
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	43db      	mvns	r3, r3
 8005564:	4913      	ldr	r1, [pc, #76]	; (80055b4 <HAL_GPIO_Init+0x324>)
 8005566:	4013      	ands	r3, r2
 8005568:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d006      	beq.n	8005584 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005576:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <HAL_GPIO_Init+0x324>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	490e      	ldr	r1, [pc, #56]	; (80055b4 <HAL_GPIO_Init+0x324>)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]
 8005582:	e006      	b.n	8005592 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <HAL_GPIO_Init+0x324>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	43db      	mvns	r3, r3
 800558c:	4909      	ldr	r1, [pc, #36]	; (80055b4 <HAL_GPIO_Init+0x324>)
 800558e:	4013      	ands	r3, r2
 8005590:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	3301      	adds	r3, #1
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	fa22 f303 	lsr.w	r3, r2, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f47f ae7e 	bne.w	80052a4 <HAL_GPIO_Init+0x14>
  }
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	372c      	adds	r7, #44	; 0x2c
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	40010400 	.word	0x40010400

080055b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	887b      	ldrh	r3, [r7, #2]
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
 80055d4:	e001      	b.n	80055da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	807b      	strh	r3, [r7, #2]
 80055f2:	4613      	mov	r3, r2
 80055f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055f6:	787b      	ldrb	r3, [r7, #1]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055fc:	887a      	ldrh	r2, [r7, #2]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005602:	e003      	b.n	800560c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005604:	887b      	ldrh	r3, [r7, #2]
 8005606:	041a      	lsls	r2, r3, #16
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	611a      	str	r2, [r3, #16]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
	...

08005618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e272      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8087 	beq.w	8005746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005638:	4b92      	ldr	r3, [pc, #584]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f003 030c 	and.w	r3, r3, #12
 8005640:	2b04      	cmp	r3, #4
 8005642:	d00c      	beq.n	800565e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005644:	4b8f      	ldr	r3, [pc, #572]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 030c 	and.w	r3, r3, #12
 800564c:	2b08      	cmp	r3, #8
 800564e:	d112      	bne.n	8005676 <HAL_RCC_OscConfig+0x5e>
 8005650:	4b8c      	ldr	r3, [pc, #560]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800565c:	d10b      	bne.n	8005676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565e:	4b89      	ldr	r3, [pc, #548]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d06c      	beq.n	8005744 <HAL_RCC_OscConfig+0x12c>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d168      	bne.n	8005744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e24c      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567e:	d106      	bne.n	800568e <HAL_RCC_OscConfig+0x76>
 8005680:	4b80      	ldr	r3, [pc, #512]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a7f      	ldr	r2, [pc, #508]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	e02e      	b.n	80056ec <HAL_RCC_OscConfig+0xd4>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x98>
 8005696:	4b7b      	ldr	r3, [pc, #492]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a7a      	ldr	r2, [pc, #488]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 800569c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4b78      	ldr	r3, [pc, #480]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a77      	ldr	r2, [pc, #476]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e01d      	b.n	80056ec <HAL_RCC_OscConfig+0xd4>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0xbc>
 80056ba:	4b72      	ldr	r3, [pc, #456]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a71      	ldr	r2, [pc, #452]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b6f      	ldr	r3, [pc, #444]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a6e      	ldr	r2, [pc, #440]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e00b      	b.n	80056ec <HAL_RCC_OscConfig+0xd4>
 80056d4:	4b6b      	ldr	r3, [pc, #428]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a6a      	ldr	r2, [pc, #424]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b68      	ldr	r3, [pc, #416]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a67      	ldr	r2, [pc, #412]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7ff f94e 	bl	8004994 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056fc:	f7ff f94a 	bl	8004994 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e200      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b5d      	ldr	r3, [pc, #372]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0xe4>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7ff f93a 	bl	8004994 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005724:	f7ff f936 	bl	8004994 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	; 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e1ec      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005736:	4b53      	ldr	r3, [pc, #332]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x10c>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d063      	beq.n	800581a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005752:	4b4c      	ldr	r3, [pc, #304]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800575e:	4b49      	ldr	r3, [pc, #292]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b08      	cmp	r3, #8
 8005768:	d11c      	bne.n	80057a4 <HAL_RCC_OscConfig+0x18c>
 800576a:	4b46      	ldr	r3, [pc, #280]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d116      	bne.n	80057a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005776:	4b43      	ldr	r3, [pc, #268]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_RCC_OscConfig+0x176>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d001      	beq.n	800578e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e1c0      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578e:	4b3d      	ldr	r3, [pc, #244]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4939      	ldr	r1, [pc, #228]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a2:	e03a      	b.n	800581a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d020      	beq.n	80057ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	4b36      	ldr	r3, [pc, #216]	; (8005888 <HAL_RCC_OscConfig+0x270>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7ff f8ef 	bl	8004994 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ba:	f7ff f8eb 	bl	8004994 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e1a1      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057cc:	4b2d      	ldr	r3, [pc, #180]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4b2a      	ldr	r3, [pc, #168]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4927      	ldr	r1, [pc, #156]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]
 80057ec:	e015      	b.n	800581a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ee:	4b26      	ldr	r3, [pc, #152]	; (8005888 <HAL_RCC_OscConfig+0x270>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7ff f8ce 	bl	8004994 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057fc:	f7ff f8ca 	bl	8004994 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e180      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800580e:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d03a      	beq.n	800589c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d019      	beq.n	8005862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800582e:	4b17      	ldr	r3, [pc, #92]	; (800588c <HAL_RCC_OscConfig+0x274>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005834:	f7ff f8ae 	bl	8004994 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800583c:	f7ff f8aa 	bl	8004994 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e160      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <HAL_RCC_OscConfig+0x26c>)
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800585a:	2001      	movs	r0, #1
 800585c:	f000 face 	bl	8005dfc <RCC_Delay>
 8005860:	e01c      	b.n	800589c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005862:	4b0a      	ldr	r3, [pc, #40]	; (800588c <HAL_RCC_OscConfig+0x274>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005868:	f7ff f894 	bl	8004994 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800586e:	e00f      	b.n	8005890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005870:	f7ff f890 	bl	8004994 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d908      	bls.n	8005890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e146      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
 8005882:	bf00      	nop
 8005884:	40021000 	.word	0x40021000
 8005888:	42420000 	.word	0x42420000
 800588c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005890:	4b92      	ldr	r3, [pc, #584]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e9      	bne.n	8005870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80a6 	beq.w	80059f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058aa:	2300      	movs	r3, #0
 80058ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ae:	4b8b      	ldr	r3, [pc, #556]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10d      	bne.n	80058d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ba:	4b88      	ldr	r3, [pc, #544]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	4a87      	ldr	r2, [pc, #540]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c4:	61d3      	str	r3, [r2, #28]
 80058c6:	4b85      	ldr	r3, [pc, #532]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d6:	4b82      	ldr	r3, [pc, #520]	; (8005ae0 <HAL_RCC_OscConfig+0x4c8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d118      	bne.n	8005914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058e2:	4b7f      	ldr	r3, [pc, #508]	; (8005ae0 <HAL_RCC_OscConfig+0x4c8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a7e      	ldr	r2, [pc, #504]	; (8005ae0 <HAL_RCC_OscConfig+0x4c8>)
 80058e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ee:	f7ff f851 	bl	8004994 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f6:	f7ff f84d 	bl	8004994 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b64      	cmp	r3, #100	; 0x64
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e103      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005908:	4b75      	ldr	r3, [pc, #468]	; (8005ae0 <HAL_RCC_OscConfig+0x4c8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d106      	bne.n	800592a <HAL_RCC_OscConfig+0x312>
 800591c:	4b6f      	ldr	r3, [pc, #444]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	4a6e      	ldr	r2, [pc, #440]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	6213      	str	r3, [r2, #32]
 8005928:	e02d      	b.n	8005986 <HAL_RCC_OscConfig+0x36e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10c      	bne.n	800594c <HAL_RCC_OscConfig+0x334>
 8005932:	4b6a      	ldr	r3, [pc, #424]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	4a69      	ldr	r2, [pc, #420]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	6213      	str	r3, [r2, #32]
 800593e:	4b67      	ldr	r3, [pc, #412]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	4a66      	ldr	r2, [pc, #408]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	6213      	str	r3, [r2, #32]
 800594a:	e01c      	b.n	8005986 <HAL_RCC_OscConfig+0x36e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b05      	cmp	r3, #5
 8005952:	d10c      	bne.n	800596e <HAL_RCC_OscConfig+0x356>
 8005954:	4b61      	ldr	r3, [pc, #388]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	4a60      	ldr	r2, [pc, #384]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 800595a:	f043 0304 	orr.w	r3, r3, #4
 800595e:	6213      	str	r3, [r2, #32]
 8005960:	4b5e      	ldr	r3, [pc, #376]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	4a5d      	ldr	r2, [pc, #372]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	6213      	str	r3, [r2, #32]
 800596c:	e00b      	b.n	8005986 <HAL_RCC_OscConfig+0x36e>
 800596e:	4b5b      	ldr	r3, [pc, #364]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	4a5a      	ldr	r2, [pc, #360]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	6213      	str	r3, [r2, #32]
 800597a:	4b58      	ldr	r3, [pc, #352]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	4a57      	ldr	r2, [pc, #348]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005980:	f023 0304 	bic.w	r3, r3, #4
 8005984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d015      	beq.n	80059ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800598e:	f7ff f801 	bl	8004994 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005994:	e00a      	b.n	80059ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005996:	f7fe fffd 	bl	8004994 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e0b1      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ac:	4b4b      	ldr	r3, [pc, #300]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ee      	beq.n	8005996 <HAL_RCC_OscConfig+0x37e>
 80059b8:	e014      	b.n	80059e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ba:	f7fe ffeb 	bl	8004994 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c0:	e00a      	b.n	80059d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c2:	f7fe ffe7 	bl	8004994 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e09b      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d8:	4b40      	ldr	r3, [pc, #256]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ee      	bne.n	80059c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d105      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ea:	4b3c      	ldr	r3, [pc, #240]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	4a3b      	ldr	r2, [pc, #236]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 80059f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8087 	beq.w	8005b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a00:	4b36      	ldr	r3, [pc, #216]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 030c 	and.w	r3, r3, #12
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d061      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d146      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a14:	4b33      	ldr	r3, [pc, #204]	; (8005ae4 <HAL_RCC_OscConfig+0x4cc>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a1a:	f7fe ffbb 	bl	8004994 <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a22:	f7fe ffb7 	bl	8004994 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e06d      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a34:	4b29      	ldr	r3, [pc, #164]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f0      	bne.n	8005a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a48:	d108      	bne.n	8005a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	4921      	ldr	r1, [pc, #132]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a5c:	4b1f      	ldr	r3, [pc, #124]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a19      	ldr	r1, [r3, #32]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	491b      	ldr	r1, [pc, #108]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a74:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <HAL_RCC_OscConfig+0x4cc>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7a:	f7fe ff8b 	bl	8004994 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a82:	f7fe ff87 	bl	8004994 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e03d      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x46a>
 8005aa0:	e035      	b.n	8005b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa2:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <HAL_RCC_OscConfig+0x4cc>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa8:	f7fe ff74 	bl	8004994 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab0:	f7fe ff70 	bl	8004994 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e026      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_RCC_OscConfig+0x4c4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x498>
 8005ace:	e01e      	b.n	8005b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d107      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e019      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	40007000 	.word	0x40007000
 8005ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_RCC_OscConfig+0x500>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d106      	bne.n	8005b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d001      	beq.n	8005b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40021000 	.word	0x40021000

08005b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0d0      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b30:	4b6a      	ldr	r3, [pc, #424]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d910      	bls.n	8005b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b67      	ldr	r3, [pc, #412]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 0207 	bic.w	r2, r3, #7
 8005b46:	4965      	ldr	r1, [pc, #404]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	4b63      	ldr	r3, [pc, #396]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d001      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0b8      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d020      	beq.n	8005bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b78:	4b59      	ldr	r3, [pc, #356]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4a58      	ldr	r2, [pc, #352]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b90:	4b53      	ldr	r3, [pc, #332]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a52      	ldr	r2, [pc, #328]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b9c:	4b50      	ldr	r3, [pc, #320]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	494d      	ldr	r1, [pc, #308]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d040      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d115      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e07f      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d107      	bne.n	8005bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e073      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bea:	4b3d      	ldr	r3, [pc, #244]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06b      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bfa:	4b39      	ldr	r3, [pc, #228]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f023 0203 	bic.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4936      	ldr	r1, [pc, #216]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c0c:	f7fe fec2 	bl	8004994 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c14:	f7fe febe 	bl	8004994 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e053      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f003 020c 	and.w	r2, r3, #12
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d1eb      	bne.n	8005c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d210      	bcs.n	8005c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 0207 	bic.w	r2, r3, #7
 8005c52:	4922      	ldr	r1, [pc, #136]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e032      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c78:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4916      	ldr	r1, [pc, #88]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	490e      	ldr	r1, [pc, #56]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005caa:	f000 f821 	bl	8005cf0 <HAL_RCC_GetSysClockFreq>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	490a      	ldr	r1, [pc, #40]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cbc:	5ccb      	ldrb	r3, [r1, r3]
 8005cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc2:	4a09      	ldr	r2, [pc, #36]	; (8005ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8005cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_RCC_ClockConfig+0x1d0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fe20 	bl	8004910 <HAL_InitTick>

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40022000 	.word	0x40022000
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	0800ce44 	.word	0x0800ce44
 8005ce8:	20000008 	.word	0x20000008
 8005cec:	2000000c 	.word	0x2000000c

08005cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60bb      	str	r3, [r7, #8]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	2300      	movs	r3, #0
 8005d04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d0a:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d002      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0x30>
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_GetSysClockFreq+0x36>
 8005d1e:	e027      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d20:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d22:	613b      	str	r3, [r7, #16]
      break;
 8005d24:	e027      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	0c9b      	lsrs	r3, r3, #18
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d30:	5cd3      	ldrb	r3, [r2, r3]
 8005d32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d010      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d3e:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	0c5b      	lsrs	r3, r3, #17
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	4a11      	ldr	r2, [pc, #68]	; (8005d90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d4a:	5cd3      	ldrb	r3, [r2, r3]
 8005d4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a0d      	ldr	r2, [pc, #52]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d52:	fb03 f202 	mul.w	r2, r3, r2
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e004      	b.n	8005d6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d64:	fb02 f303 	mul.w	r3, r2, r3
 8005d68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	613b      	str	r3, [r7, #16]
      break;
 8005d6e:	e002      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d72:	613b      	str	r3, [r7, #16]
      break;
 8005d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d76:	693b      	ldr	r3, [r7, #16]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40021000 	.word	0x40021000
 8005d88:	007a1200 	.word	0x007a1200
 8005d8c:	0800ce5c 	.word	0x0800ce5c
 8005d90:	0800ce6c 	.word	0x0800ce6c
 8005d94:	003d0900 	.word	0x003d0900

08005d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d9c:	4b02      	ldr	r3, [pc, #8]	; (8005da8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr
 8005da8:	20000008 	.word	0x20000008

08005dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005db0:	f7ff fff2 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005db4:	4602      	mov	r2, r0
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	4903      	ldr	r1, [pc, #12]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dc2:	5ccb      	ldrb	r3, [r1, r3]
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	0800ce54 	.word	0x0800ce54

08005dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dd8:	f7ff ffde 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	0adb      	lsrs	r3, r3, #11
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	4903      	ldr	r1, [pc, #12]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dea:	5ccb      	ldrb	r3, [r1, r3]
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40021000 	.word	0x40021000
 8005df8:	0800ce54 	.word	0x0800ce54

08005dfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <RCC_Delay+0x34>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <RCC_Delay+0x38>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	0a5b      	lsrs	r3, r3, #9
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e18:	bf00      	nop
  }
  while (Delay --);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1e5a      	subs	r2, r3, #1
 8005e1e:	60fa      	str	r2, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f9      	bne.n	8005e18 <RCC_Delay+0x1c>
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr
 8005e30:	20000008 	.word	0x20000008
 8005e34:	10624dd3 	.word	0x10624dd3

08005e38 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <HAL_SRAM_Init+0x1c>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e52:	d101      	bne.n	8005e58 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e038      	b.n	8005eca <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7fe f9c1 	bl	80041f4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3308      	adds	r3, #8
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f000 fe4b 	bl	8006b18 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68b9      	ldr	r1, [r7, #8]
 8005e8e:	f000 fead 	bl	8006bec <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6858      	ldr	r0, [r3, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	f000 fed8 	bl	8006c54 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	6892      	ldr	r2, [r2, #8]
 8005eac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	6892      	ldr	r2, [r2, #8]
 8005eb8:	f041 0101 	orr.w	r1, r1, #1
 8005ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e042      	b.n	8005f6a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fe fc63 	bl	80047c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2224      	movs	r2, #36	; 0x24
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f14:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fd70 	bl	80069fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f3a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f4a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b08a      	sub	sp, #40	; 0x28
 8005f76:	af02      	add	r7, sp, #8
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d16d      	bne.n	800606e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_UART_Transmit+0x2c>
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e066      	b.n	8006070 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2221      	movs	r2, #33	; 0x21
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fb0:	f7fe fcf0 	bl	8004994 <HAL_GetTick>
 8005fb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	88fa      	ldrh	r2, [r7, #6]
 8005fba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fca:	d108      	bne.n	8005fde <HAL_UART_Transmit+0x6c>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d104      	bne.n	8005fde <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	e003      	b.n	8005fe6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fe6:	e02a      	b.n	800603e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2180      	movs	r1, #128	; 0x80
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 faf8 	bl	80065e8 <UART_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e036      	b.n	8006070 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10b      	bne.n	8006020 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006016:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	3302      	adds	r3, #2
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	e007      	b.n	8006030 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	781a      	ldrb	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3301      	adds	r3, #1
 800602e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1cf      	bne.n	8005fe8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2200      	movs	r2, #0
 8006050:	2140      	movs	r1, #64	; 0x40
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fac8 	bl	80065e8 <UART_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e006      	b.n	8006070 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b0ba      	sub	sp, #232	; 0xe8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800609e:	2300      	movs	r3, #0
 80060a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10f      	bne.n	80060de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_UART_IRQHandler+0x66>
 80060ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fbd1 	bl	800687e <UART_Receive_IT>
      return;
 80060dc:	e25b      	b.n	8006596 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80de 	beq.w	80062a4 <HAL_UART_IRQHandler+0x22c>
 80060e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80d1 	beq.w	80062a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <HAL_UART_IRQHandler+0xae>
 800610e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611e:	f043 0201 	orr.w	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00b      	beq.n	800614a <HAL_UART_IRQHandler+0xd2>
 8006132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006142:	f043 0202 	orr.w	r2, r3, #2
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <HAL_UART_IRQHandler+0xf6>
 8006156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	f043 0204 	orr.w	r2, r3, #4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d011      	beq.n	800619e <HAL_UART_IRQHandler+0x126>
 800617a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d105      	bne.n	8006192 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006196:	f043 0208 	orr.w	r2, r3, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 81f2 	beq.w	800658c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <HAL_UART_IRQHandler+0x14e>
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fb5c 	bl	800687e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d103      	bne.n	80061f2 <HAL_UART_IRQHandler+0x17a>
 80061ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d04f      	beq.n	8006292 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa66 	bl	80066c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d041      	beq.n	800628a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3314      	adds	r3, #20
 800620c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800621c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3314      	adds	r3, #20
 800622e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006232:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800623e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800624a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1d9      	bne.n	8006206 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d013      	beq.n	8006282 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625e:	4a7e      	ldr	r2, [pc, #504]	; (8006458 <HAL_UART_IRQHandler+0x3e0>)
 8006260:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fd0a 	bl	8004c80 <HAL_DMA_Abort_IT>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d016      	beq.n	80062a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	e00e      	b.n	80062a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f99c 	bl	80065c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	e00a      	b.n	80062a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f998 	bl	80065c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	e006      	b.n	80062a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f994 	bl	80065c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800629e:	e175      	b.n	800658c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a0:	bf00      	nop
    return;
 80062a2:	e173      	b.n	800658c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	f040 814f 	bne.w	800654c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8148 	beq.w	800654c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8141 	beq.w	800654c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ca:	2300      	movs	r3, #0
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80b6 	beq.w	800645c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8145 	beq.w	8006590 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800630a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800630e:	429a      	cmp	r2, r3
 8006310:	f080 813e 	bcs.w	8006590 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800631a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b20      	cmp	r3, #32
 8006324:	f000 8088 	beq.w	8006438 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	330c      	adds	r3, #12
 800632e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800633e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006346:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	330c      	adds	r3, #12
 8006350:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006354:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006360:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800636c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1d9      	bne.n	8006328 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3314      	adds	r3, #20
 800637a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3314      	adds	r3, #20
 8006394:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006398:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800639c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e1      	bne.n	8006374 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3314      	adds	r3, #20
 80063b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3314      	adds	r3, #20
 80063d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e3      	bne.n	80063b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006408:	f023 0310 	bic.w	r3, r3, #16
 800640c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	330c      	adds	r3, #12
 8006416:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800641a:	65ba      	str	r2, [r7, #88]	; 0x58
 800641c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e3      	bne.n	80063f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fbe9 	bl	8004c0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006446:	b29b      	uxth	r3, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	b29b      	uxth	r3, r3
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8bf 	bl	80065d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006454:	e09c      	b.n	8006590 <HAL_UART_IRQHandler+0x518>
 8006456:	bf00      	nop
 8006458:	08006789 	.word	0x08006789
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006464:	b29b      	uxth	r3, r3
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 808e 	beq.w	8006594 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8089 	beq.w	8006594 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064a6:	647a      	str	r2, [r7, #68]	; 0x44
 80064a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e3      	bne.n	8006482 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3314      	adds	r3, #20
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	623b      	str	r3, [r7, #32]
   return(result);
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3314      	adds	r3, #20
 80064da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064de:	633a      	str	r2, [r7, #48]	; 0x30
 80064e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e3      	bne.n	80064ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	330c      	adds	r3, #12
 8006506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0310 	bic.w	r3, r3, #16
 8006516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006524:	61fa      	str	r2, [r7, #28]
 8006526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	69b9      	ldr	r1, [r7, #24]
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	617b      	str	r3, [r7, #20]
   return(result);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e3      	bne.n	8006500 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800653e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f844 	bl	80065d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800654a:	e023      	b.n	8006594 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <HAL_UART_IRQHandler+0x4f4>
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f923 	bl	80067b0 <UART_Transmit_IT>
    return;
 800656a:	e014      	b.n	8006596 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800656c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00e      	beq.n	8006596 <HAL_UART_IRQHandler+0x51e>
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f962 	bl	800684e <UART_EndTransmit_IT>
    return;
 800658a:	e004      	b.n	8006596 <HAL_UART_IRQHandler+0x51e>
    return;
 800658c:	bf00      	nop
 800658e:	e002      	b.n	8006596 <HAL_UART_IRQHandler+0x51e>
      return;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <HAL_UART_IRQHandler+0x51e>
      return;
 8006594:	bf00      	nop
  }
}
 8006596:	37e8      	adds	r7, #232	; 0xe8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr

080065d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr

080065e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b090      	sub	sp, #64	; 0x40
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	4613      	mov	r3, r2
 80065f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f8:	e050      	b.n	800669c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d04c      	beq.n	800669c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <UART_WaitOnFlagUntilTimeout+0x30>
 8006608:	f7fe f9c4 	bl	8004994 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006614:	429a      	cmp	r2, r3
 8006616:	d241      	bcs.n	800669c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	330c      	adds	r3, #12
 8006636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006638:	637a      	str	r2, [r7, #52]	; 0x34
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e5      	bne.n	8006618 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3314      	adds	r3, #20
 8006652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	613b      	str	r3, [r7, #16]
   return(result);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f023 0301 	bic.w	r3, r3, #1
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3314      	adds	r3, #20
 800666a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800666c:	623a      	str	r2, [r7, #32]
 800666e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	69f9      	ldr	r1, [r7, #28]
 8006672:	6a3a      	ldr	r2, [r7, #32]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	61bb      	str	r3, [r7, #24]
   return(result);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e5      	bne.n	800664c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e00f      	b.n	80066bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d09f      	beq.n	80065fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3740      	adds	r7, #64	; 0x40
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b095      	sub	sp, #84	; 0x54
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066ec:	643a      	str	r2, [r7, #64]	; 0x40
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e5      	bne.n	80066cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3314      	adds	r3, #20
 8006706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	64bb      	str	r3, [r7, #72]	; 0x48
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3314      	adds	r3, #20
 800671e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e5      	bne.n	8006700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	2b01      	cmp	r3, #1
 800673a:	d119      	bne.n	8006770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	330c      	adds	r3, #12
 8006742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	60bb      	str	r3, [r7, #8]
   return(result);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f023 0310 	bic.w	r3, r3, #16
 8006752:	647b      	str	r3, [r7, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	330c      	adds	r3, #12
 800675a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800675c:	61ba      	str	r2, [r7, #24]
 800675e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6979      	ldr	r1, [r7, #20]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	613b      	str	r3, [r7, #16]
   return(result);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e5      	bne.n	800673c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800677e:	bf00      	nop
 8006780:	3754      	adds	r7, #84	; 0x54
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7ff ff0c 	bl	80065c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b21      	cmp	r3, #33	; 0x21
 80067c2:	d13e      	bne.n	8006842 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067cc:	d114      	bne.n	80067f8 <UART_Transmit_IT+0x48>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d110      	bne.n	80067f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	1c9a      	adds	r2, r3, #2
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]
 80067f6:	e008      	b.n	800680a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	1c59      	adds	r1, r3, #1
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6211      	str	r1, [r2, #32]
 8006802:	781a      	ldrb	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29b      	uxth	r3, r3
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	4619      	mov	r1, r3
 8006818:	84d1      	strh	r1, [r2, #38]	; 0x26
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10f      	bne.n	800683e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800682c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800683c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e000      	b.n	8006844 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006864:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff fe94 	bl	800659c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b08c      	sub	sp, #48	; 0x30
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b22      	cmp	r3, #34	; 0x22
 8006890:	f040 80ae 	bne.w	80069f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689c:	d117      	bne.n	80068ce <UART_Receive_IT+0x50>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d113      	bne.n	80068ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068bc:	b29a      	uxth	r2, r3
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	1c9a      	adds	r2, r3, #2
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28
 80068cc:	e026      	b.n	800691c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e0:	d007      	beq.n	80068f2 <UART_Receive_IT+0x74>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10a      	bne.n	8006900 <UART_Receive_IT+0x82>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	e008      	b.n	8006912 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690c:	b2da      	uxtb	r2, r3
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29b      	uxth	r3, r3
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	4619      	mov	r1, r3
 800692a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800692c:	2b00      	cmp	r3, #0
 800692e:	d15d      	bne.n	80069ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0220 	bic.w	r2, r2, #32
 800693e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800694e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695a      	ldr	r2, [r3, #20]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0201 	bic.w	r2, r2, #1
 800695e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	2b01      	cmp	r3, #1
 8006974:	d135      	bne.n	80069e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	613b      	str	r3, [r7, #16]
   return(result);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f023 0310 	bic.w	r3, r3, #16
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699c:	623a      	str	r2, [r7, #32]
 800699e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	69f9      	ldr	r1, [r7, #28]
 80069a2:	6a3a      	ldr	r2, [r7, #32]
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e5      	bne.n	800697c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d10a      	bne.n	80069d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff fdf9 	bl	80065d2 <HAL_UARTEx_RxEventCallback>
 80069e0:	e002      	b.n	80069e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fde3 	bl	80065ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	e002      	b.n	80069f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e000      	b.n	80069f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069f0:	2302      	movs	r3, #2
  }
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3730      	adds	r7, #48	; 0x30
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006a36:	f023 030c 	bic.w	r3, r3, #12
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	430b      	orrs	r3, r1
 8006a42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a2c      	ldr	r2, [pc, #176]	; (8006b10 <UART_SetConfig+0x114>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d103      	bne.n	8006a6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a64:	f7ff f9b6 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	e002      	b.n	8006a72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7ff f99e 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8006a70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009a      	lsls	r2, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	4a22      	ldr	r2, [pc, #136]	; (8006b14 <UART_SetConfig+0x118>)
 8006a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	0119      	lsls	r1, r3, #4
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009a      	lsls	r2, r3, #2
 8006a9c:	441a      	add	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aa8:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <UART_SetConfig+0x118>)
 8006aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	2064      	movs	r0, #100	; 0x64
 8006ab2:	fb00 f303 	mul.w	r3, r0, r3
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	3332      	adds	r3, #50	; 0x32
 8006abc:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <UART_SetConfig+0x118>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ac8:	4419      	add	r1, r3
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009a      	lsls	r2, r3, #2
 8006ad4:	441a      	add	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <UART_SetConfig+0x118>)
 8006ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	2064      	movs	r0, #100	; 0x64
 8006aea:	fb00 f303 	mul.w	r3, r0, r3
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	3332      	adds	r3, #50	; 0x32
 8006af4:	4a07      	ldr	r2, [pc, #28]	; (8006b14 <UART_SetConfig+0x118>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	f003 020f 	and.w	r2, r3, #15
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	440a      	add	r2, r1
 8006b06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40013800 	.word	0x40013800
 8006b14:	51eb851f 	.word	0x51eb851f

08006b18 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	f023 0101 	bic.w	r1, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d102      	bne.n	8006b48 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006b42:	2340      	movs	r3, #64	; 0x40
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	e001      	b.n	8006b4c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006b58:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006b5e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006b64:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006b6a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006b70:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006b76:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006b7c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8006b82:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006b88:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8006ba6:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <FSMC_NORSRAM_Init+0xd0>)
 8006ba8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bb0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006bb8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	ea02 0103 	and.w	r1, r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	4319      	orrs	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	371c      	adds	r7, #28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	0008fb7f 	.word	0x0008fb7f

08006bec <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c02:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	431a      	orrs	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	431a      	orrs	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	051b      	lsls	r3, r3, #20
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	3b02      	subs	r3, #2
 8006c32:	061b      	lsls	r3, r3, #24
 8006c34:	431a      	orrs	r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	3201      	adds	r2, #1
 8006c40:	4319      	orrs	r1, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c68:	d11d      	bne.n	8006ca6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c72:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	6811      	ldr	r1, [r2, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	6852      	ldr	r2, [r2, #4]
 8006c7e:	0112      	lsls	r2, r2, #4
 8006c80:	4311      	orrs	r1, r2
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	6892      	ldr	r2, [r2, #8]
 8006c86:	0212      	lsls	r2, r2, #8
 8006c88:	4311      	orrs	r1, r2
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	6992      	ldr	r2, [r2, #24]
 8006c8e:	4311      	orrs	r1, r2
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	68d2      	ldr	r2, [r2, #12]
 8006c94:	0412      	lsls	r2, r2, #16
 8006c96:	430a      	orrs	r2, r1
 8006c98:	ea43 0102 	orr.w	r1, r3, r2
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006ca4:	e005      	b.n	8006cb2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	cff00000 	.word	0xcff00000

08006cc4 <__errno>:
 8006cc4:	4b01      	ldr	r3, [pc, #4]	; (8006ccc <__errno+0x8>)
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	20000014 	.word	0x20000014

08006cd0 <__libc_init_array>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	2600      	movs	r6, #0
 8006cd4:	4d0c      	ldr	r5, [pc, #48]	; (8006d08 <__libc_init_array+0x38>)
 8006cd6:	4c0d      	ldr	r4, [pc, #52]	; (8006d0c <__libc_init_array+0x3c>)
 8006cd8:	1b64      	subs	r4, r4, r5
 8006cda:	10a4      	asrs	r4, r4, #2
 8006cdc:	42a6      	cmp	r6, r4
 8006cde:	d109      	bne.n	8006cf4 <__libc_init_array+0x24>
 8006ce0:	f004 fc6c 	bl	800b5bc <_init>
 8006ce4:	2600      	movs	r6, #0
 8006ce6:	4d0a      	ldr	r5, [pc, #40]	; (8006d10 <__libc_init_array+0x40>)
 8006ce8:	4c0a      	ldr	r4, [pc, #40]	; (8006d14 <__libc_init_array+0x44>)
 8006cea:	1b64      	subs	r4, r4, r5
 8006cec:	10a4      	asrs	r4, r4, #2
 8006cee:	42a6      	cmp	r6, r4
 8006cf0:	d105      	bne.n	8006cfe <__libc_init_array+0x2e>
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf8:	4798      	blx	r3
 8006cfa:	3601      	adds	r6, #1
 8006cfc:	e7ee      	b.n	8006cdc <__libc_init_array+0xc>
 8006cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d02:	4798      	blx	r3
 8006d04:	3601      	adds	r6, #1
 8006d06:	e7f2      	b.n	8006cee <__libc_init_array+0x1e>
 8006d08:	0800d31c 	.word	0x0800d31c
 8006d0c:	0800d31c 	.word	0x0800d31c
 8006d10:	0800d31c 	.word	0x0800d31c
 8006d14:	0800d320 	.word	0x0800d320

08006d18 <memset>:
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4402      	add	r2, r0
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d100      	bne.n	8006d22 <memset+0xa>
 8006d20:	4770      	bx	lr
 8006d22:	f803 1b01 	strb.w	r1, [r3], #1
 8006d26:	e7f9      	b.n	8006d1c <memset+0x4>

08006d28 <__cvt>:
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2e:	461f      	mov	r7, r3
 8006d30:	bfbb      	ittet	lt
 8006d32:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d36:	461f      	movlt	r7, r3
 8006d38:	2300      	movge	r3, #0
 8006d3a:	232d      	movlt	r3, #45	; 0x2d
 8006d3c:	b088      	sub	sp, #32
 8006d3e:	4614      	mov	r4, r2
 8006d40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d44:	7013      	strb	r3, [r2, #0]
 8006d46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d48:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d4c:	f023 0820 	bic.w	r8, r3, #32
 8006d50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d54:	d005      	beq.n	8006d62 <__cvt+0x3a>
 8006d56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d5a:	d100      	bne.n	8006d5e <__cvt+0x36>
 8006d5c:	3501      	adds	r5, #1
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e000      	b.n	8006d64 <__cvt+0x3c>
 8006d62:	2303      	movs	r3, #3
 8006d64:	aa07      	add	r2, sp, #28
 8006d66:	9204      	str	r2, [sp, #16]
 8006d68:	aa06      	add	r2, sp, #24
 8006d6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d6e:	e9cd 3500 	strd	r3, r5, [sp]
 8006d72:	4622      	mov	r2, r4
 8006d74:	463b      	mov	r3, r7
 8006d76:	f001 fd9b 	bl	80088b0 <_dtoa_r>
 8006d7a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d7e:	4606      	mov	r6, r0
 8006d80:	d102      	bne.n	8006d88 <__cvt+0x60>
 8006d82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d84:	07db      	lsls	r3, r3, #31
 8006d86:	d522      	bpl.n	8006dce <__cvt+0xa6>
 8006d88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d8c:	eb06 0905 	add.w	r9, r6, r5
 8006d90:	d110      	bne.n	8006db4 <__cvt+0x8c>
 8006d92:	7833      	ldrb	r3, [r6, #0]
 8006d94:	2b30      	cmp	r3, #48	; 0x30
 8006d96:	d10a      	bne.n	8006dae <__cvt+0x86>
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4639      	mov	r1, r7
 8006da0:	f7f9 fe6e 	bl	8000a80 <__aeabi_dcmpeq>
 8006da4:	b918      	cbnz	r0, 8006dae <__cvt+0x86>
 8006da6:	f1c5 0501 	rsb	r5, r5, #1
 8006daa:	f8ca 5000 	str.w	r5, [sl]
 8006dae:	f8da 3000 	ldr.w	r3, [sl]
 8006db2:	4499      	add	r9, r3
 8006db4:	2200      	movs	r2, #0
 8006db6:	2300      	movs	r3, #0
 8006db8:	4620      	mov	r0, r4
 8006dba:	4639      	mov	r1, r7
 8006dbc:	f7f9 fe60 	bl	8000a80 <__aeabi_dcmpeq>
 8006dc0:	b108      	cbz	r0, 8006dc6 <__cvt+0x9e>
 8006dc2:	f8cd 901c 	str.w	r9, [sp, #28]
 8006dc6:	2230      	movs	r2, #48	; 0x30
 8006dc8:	9b07      	ldr	r3, [sp, #28]
 8006dca:	454b      	cmp	r3, r9
 8006dcc:	d307      	bcc.n	8006dde <__cvt+0xb6>
 8006dce:	4630      	mov	r0, r6
 8006dd0:	9b07      	ldr	r3, [sp, #28]
 8006dd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006dd4:	1b9b      	subs	r3, r3, r6
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	b008      	add	sp, #32
 8006dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dde:	1c59      	adds	r1, r3, #1
 8006de0:	9107      	str	r1, [sp, #28]
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	e7f0      	b.n	8006dc8 <__cvt+0xa0>

08006de6 <__exponent>:
 8006de6:	4603      	mov	r3, r0
 8006de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dea:	2900      	cmp	r1, #0
 8006dec:	f803 2b02 	strb.w	r2, [r3], #2
 8006df0:	bfb6      	itet	lt
 8006df2:	222d      	movlt	r2, #45	; 0x2d
 8006df4:	222b      	movge	r2, #43	; 0x2b
 8006df6:	4249      	neglt	r1, r1
 8006df8:	2909      	cmp	r1, #9
 8006dfa:	7042      	strb	r2, [r0, #1]
 8006dfc:	dd2b      	ble.n	8006e56 <__exponent+0x70>
 8006dfe:	f10d 0407 	add.w	r4, sp, #7
 8006e02:	46a4      	mov	ip, r4
 8006e04:	270a      	movs	r7, #10
 8006e06:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e0a:	460a      	mov	r2, r1
 8006e0c:	46a6      	mov	lr, r4
 8006e0e:	fb07 1516 	mls	r5, r7, r6, r1
 8006e12:	2a63      	cmp	r2, #99	; 0x63
 8006e14:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e18:	4631      	mov	r1, r6
 8006e1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e22:	dcf0      	bgt.n	8006e06 <__exponent+0x20>
 8006e24:	3130      	adds	r1, #48	; 0x30
 8006e26:	f1ae 0502 	sub.w	r5, lr, #2
 8006e2a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e2e:	4629      	mov	r1, r5
 8006e30:	1c44      	adds	r4, r0, #1
 8006e32:	4561      	cmp	r1, ip
 8006e34:	d30a      	bcc.n	8006e4c <__exponent+0x66>
 8006e36:	f10d 0209 	add.w	r2, sp, #9
 8006e3a:	eba2 020e 	sub.w	r2, r2, lr
 8006e3e:	4565      	cmp	r5, ip
 8006e40:	bf88      	it	hi
 8006e42:	2200      	movhi	r2, #0
 8006e44:	4413      	add	r3, r2
 8006e46:	1a18      	subs	r0, r3, r0
 8006e48:	b003      	add	sp, #12
 8006e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e50:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e54:	e7ed      	b.n	8006e32 <__exponent+0x4c>
 8006e56:	2330      	movs	r3, #48	; 0x30
 8006e58:	3130      	adds	r1, #48	; 0x30
 8006e5a:	7083      	strb	r3, [r0, #2]
 8006e5c:	70c1      	strb	r1, [r0, #3]
 8006e5e:	1d03      	adds	r3, r0, #4
 8006e60:	e7f1      	b.n	8006e46 <__exponent+0x60>
	...

08006e64 <_printf_float>:
 8006e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	b091      	sub	sp, #68	; 0x44
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e70:	4616      	mov	r6, r2
 8006e72:	461f      	mov	r7, r3
 8006e74:	4605      	mov	r5, r0
 8006e76:	f002 ff65 	bl	8009d44 <_localeconv_r>
 8006e7a:	6803      	ldr	r3, [r0, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e80:	f7f9 f9d2 	bl	8000228 <strlen>
 8006e84:	2300      	movs	r3, #0
 8006e86:	930e      	str	r3, [sp, #56]	; 0x38
 8006e88:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e8e:	3307      	adds	r3, #7
 8006e90:	f023 0307 	bic.w	r3, r3, #7
 8006e94:	f103 0208 	add.w	r2, r3, #8
 8006e98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006e9c:	f8d4 b000 	ldr.w	fp, [r4]
 8006ea0:	f8c8 2000 	str.w	r2, [r8]
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006eac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006eb0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006eb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4b9c      	ldr	r3, [pc, #624]	; (8007130 <_printf_float+0x2cc>)
 8006ebe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ec0:	f7f9 fe10 	bl	8000ae4 <__aeabi_dcmpun>
 8006ec4:	bb70      	cbnz	r0, 8006f24 <_printf_float+0xc0>
 8006ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eca:	4640      	mov	r0, r8
 8006ecc:	4b98      	ldr	r3, [pc, #608]	; (8007130 <_printf_float+0x2cc>)
 8006ece:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ed0:	f7f9 fdea 	bl	8000aa8 <__aeabi_dcmple>
 8006ed4:	bb30      	cbnz	r0, 8006f24 <_printf_float+0xc0>
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4640      	mov	r0, r8
 8006edc:	4651      	mov	r1, sl
 8006ede:	f7f9 fdd9 	bl	8000a94 <__aeabi_dcmplt>
 8006ee2:	b110      	cbz	r0, 8006eea <_printf_float+0x86>
 8006ee4:	232d      	movs	r3, #45	; 0x2d
 8006ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eea:	4b92      	ldr	r3, [pc, #584]	; (8007134 <_printf_float+0x2d0>)
 8006eec:	4892      	ldr	r0, [pc, #584]	; (8007138 <_printf_float+0x2d4>)
 8006eee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006ef2:	bf94      	ite	ls
 8006ef4:	4698      	movls	r8, r3
 8006ef6:	4680      	movhi	r8, r0
 8006ef8:	2303      	movs	r3, #3
 8006efa:	f04f 0a00 	mov.w	sl, #0
 8006efe:	6123      	str	r3, [r4, #16]
 8006f00:	f02b 0304 	bic.w	r3, fp, #4
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	4633      	mov	r3, r6
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	9700      	str	r7, [sp, #0]
 8006f0e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f10:	f000 f9d4 	bl	80072bc <_printf_common>
 8006f14:	3001      	adds	r0, #1
 8006f16:	f040 8090 	bne.w	800703a <_printf_float+0x1d6>
 8006f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1e:	b011      	add	sp, #68	; 0x44
 8006f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f24:	4642      	mov	r2, r8
 8006f26:	4653      	mov	r3, sl
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4651      	mov	r1, sl
 8006f2c:	f7f9 fdda 	bl	8000ae4 <__aeabi_dcmpun>
 8006f30:	b148      	cbz	r0, 8006f46 <_printf_float+0xe2>
 8006f32:	f1ba 0f00 	cmp.w	sl, #0
 8006f36:	bfb8      	it	lt
 8006f38:	232d      	movlt	r3, #45	; 0x2d
 8006f3a:	4880      	ldr	r0, [pc, #512]	; (800713c <_printf_float+0x2d8>)
 8006f3c:	bfb8      	it	lt
 8006f3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f42:	4b7f      	ldr	r3, [pc, #508]	; (8007140 <_printf_float+0x2dc>)
 8006f44:	e7d3      	b.n	8006eee <_printf_float+0x8a>
 8006f46:	6863      	ldr	r3, [r4, #4]
 8006f48:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	d142      	bne.n	8006fd6 <_printf_float+0x172>
 8006f50:	2306      	movs	r3, #6
 8006f52:	6063      	str	r3, [r4, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	9206      	str	r2, [sp, #24]
 8006f58:	aa0e      	add	r2, sp, #56	; 0x38
 8006f5a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f5e:	aa0d      	add	r2, sp, #52	; 0x34
 8006f60:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f64:	9203      	str	r2, [sp, #12]
 8006f66:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	4642      	mov	r2, r8
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	4628      	mov	r0, r5
 8006f78:	4653      	mov	r3, sl
 8006f7a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f7c:	f7ff fed4 	bl	8006d28 <__cvt>
 8006f80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f82:	4680      	mov	r8, r0
 8006f84:	2947      	cmp	r1, #71	; 0x47
 8006f86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f88:	d108      	bne.n	8006f9c <_printf_float+0x138>
 8006f8a:	1cc8      	adds	r0, r1, #3
 8006f8c:	db02      	blt.n	8006f94 <_printf_float+0x130>
 8006f8e:	6863      	ldr	r3, [r4, #4]
 8006f90:	4299      	cmp	r1, r3
 8006f92:	dd40      	ble.n	8007016 <_printf_float+0x1b2>
 8006f94:	f1a9 0902 	sub.w	r9, r9, #2
 8006f98:	fa5f f989 	uxtb.w	r9, r9
 8006f9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fa0:	d81f      	bhi.n	8006fe2 <_printf_float+0x17e>
 8006fa2:	464a      	mov	r2, r9
 8006fa4:	3901      	subs	r1, #1
 8006fa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006faa:	910d      	str	r1, [sp, #52]	; 0x34
 8006fac:	f7ff ff1b 	bl	8006de6 <__exponent>
 8006fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fb2:	4682      	mov	sl, r0
 8006fb4:	1813      	adds	r3, r2, r0
 8006fb6:	2a01      	cmp	r2, #1
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	dc02      	bgt.n	8006fc2 <_printf_float+0x15e>
 8006fbc:	6822      	ldr	r2, [r4, #0]
 8006fbe:	07d2      	lsls	r2, r2, #31
 8006fc0:	d501      	bpl.n	8006fc6 <_printf_float+0x162>
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	6123      	str	r3, [r4, #16]
 8006fc6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d09b      	beq.n	8006f06 <_printf_float+0xa2>
 8006fce:	232d      	movs	r3, #45	; 0x2d
 8006fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd4:	e797      	b.n	8006f06 <_printf_float+0xa2>
 8006fd6:	2947      	cmp	r1, #71	; 0x47
 8006fd8:	d1bc      	bne.n	8006f54 <_printf_float+0xf0>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1ba      	bne.n	8006f54 <_printf_float+0xf0>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e7b7      	b.n	8006f52 <_printf_float+0xee>
 8006fe2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006fe6:	d118      	bne.n	800701a <_printf_float+0x1b6>
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	dd0b      	ble.n	8007006 <_printf_float+0x1a2>
 8006fee:	6121      	str	r1, [r4, #16]
 8006ff0:	b913      	cbnz	r3, 8006ff8 <_printf_float+0x194>
 8006ff2:	6822      	ldr	r2, [r4, #0]
 8006ff4:	07d0      	lsls	r0, r2, #31
 8006ff6:	d502      	bpl.n	8006ffe <_printf_float+0x19a>
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	440b      	add	r3, r1
 8006ffc:	6123      	str	r3, [r4, #16]
 8006ffe:	f04f 0a00 	mov.w	sl, #0
 8007002:	65a1      	str	r1, [r4, #88]	; 0x58
 8007004:	e7df      	b.n	8006fc6 <_printf_float+0x162>
 8007006:	b913      	cbnz	r3, 800700e <_printf_float+0x1aa>
 8007008:	6822      	ldr	r2, [r4, #0]
 800700a:	07d2      	lsls	r2, r2, #31
 800700c:	d501      	bpl.n	8007012 <_printf_float+0x1ae>
 800700e:	3302      	adds	r3, #2
 8007010:	e7f4      	b.n	8006ffc <_printf_float+0x198>
 8007012:	2301      	movs	r3, #1
 8007014:	e7f2      	b.n	8006ffc <_printf_float+0x198>
 8007016:	f04f 0967 	mov.w	r9, #103	; 0x67
 800701a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800701c:	4299      	cmp	r1, r3
 800701e:	db05      	blt.n	800702c <_printf_float+0x1c8>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	6121      	str	r1, [r4, #16]
 8007024:	07d8      	lsls	r0, r3, #31
 8007026:	d5ea      	bpl.n	8006ffe <_printf_float+0x19a>
 8007028:	1c4b      	adds	r3, r1, #1
 800702a:	e7e7      	b.n	8006ffc <_printf_float+0x198>
 800702c:	2900      	cmp	r1, #0
 800702e:	bfcc      	ite	gt
 8007030:	2201      	movgt	r2, #1
 8007032:	f1c1 0202 	rsble	r2, r1, #2
 8007036:	4413      	add	r3, r2
 8007038:	e7e0      	b.n	8006ffc <_printf_float+0x198>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	055a      	lsls	r2, r3, #21
 800703e:	d407      	bmi.n	8007050 <_printf_float+0x1ec>
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	4642      	mov	r2, r8
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	d12b      	bne.n	80070a6 <_printf_float+0x242>
 800704e:	e764      	b.n	8006f1a <_printf_float+0xb6>
 8007050:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007054:	f240 80dd 	bls.w	8007212 <_printf_float+0x3ae>
 8007058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800705c:	2200      	movs	r2, #0
 800705e:	2300      	movs	r3, #0
 8007060:	f7f9 fd0e 	bl	8000a80 <__aeabi_dcmpeq>
 8007064:	2800      	cmp	r0, #0
 8007066:	d033      	beq.n	80070d0 <_printf_float+0x26c>
 8007068:	2301      	movs	r3, #1
 800706a:	4631      	mov	r1, r6
 800706c:	4628      	mov	r0, r5
 800706e:	4a35      	ldr	r2, [pc, #212]	; (8007144 <_printf_float+0x2e0>)
 8007070:	47b8      	blx	r7
 8007072:	3001      	adds	r0, #1
 8007074:	f43f af51 	beq.w	8006f1a <_printf_float+0xb6>
 8007078:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800707c:	429a      	cmp	r2, r3
 800707e:	db02      	blt.n	8007086 <_printf_float+0x222>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	07d8      	lsls	r0, r3, #31
 8007084:	d50f      	bpl.n	80070a6 <_printf_float+0x242>
 8007086:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	f43f af42 	beq.w	8006f1a <_printf_float+0xb6>
 8007096:	f04f 0800 	mov.w	r8, #0
 800709a:	f104 091a 	add.w	r9, r4, #26
 800709e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070a0:	3b01      	subs	r3, #1
 80070a2:	4543      	cmp	r3, r8
 80070a4:	dc09      	bgt.n	80070ba <_printf_float+0x256>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	079b      	lsls	r3, r3, #30
 80070aa:	f100 8102 	bmi.w	80072b2 <_printf_float+0x44e>
 80070ae:	68e0      	ldr	r0, [r4, #12]
 80070b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070b2:	4298      	cmp	r0, r3
 80070b4:	bfb8      	it	lt
 80070b6:	4618      	movlt	r0, r3
 80070b8:	e731      	b.n	8006f1e <_printf_float+0xba>
 80070ba:	2301      	movs	r3, #1
 80070bc:	464a      	mov	r2, r9
 80070be:	4631      	mov	r1, r6
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b8      	blx	r7
 80070c4:	3001      	adds	r0, #1
 80070c6:	f43f af28 	beq.w	8006f1a <_printf_float+0xb6>
 80070ca:	f108 0801 	add.w	r8, r8, #1
 80070ce:	e7e6      	b.n	800709e <_printf_float+0x23a>
 80070d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	dc38      	bgt.n	8007148 <_printf_float+0x2e4>
 80070d6:	2301      	movs	r3, #1
 80070d8:	4631      	mov	r1, r6
 80070da:	4628      	mov	r0, r5
 80070dc:	4a19      	ldr	r2, [pc, #100]	; (8007144 <_printf_float+0x2e0>)
 80070de:	47b8      	blx	r7
 80070e0:	3001      	adds	r0, #1
 80070e2:	f43f af1a 	beq.w	8006f1a <_printf_float+0xb6>
 80070e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070ea:	4313      	orrs	r3, r2
 80070ec:	d102      	bne.n	80070f4 <_printf_float+0x290>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	07d9      	lsls	r1, r3, #31
 80070f2:	d5d8      	bpl.n	80070a6 <_printf_float+0x242>
 80070f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f8:	4631      	mov	r1, r6
 80070fa:	4628      	mov	r0, r5
 80070fc:	47b8      	blx	r7
 80070fe:	3001      	adds	r0, #1
 8007100:	f43f af0b 	beq.w	8006f1a <_printf_float+0xb6>
 8007104:	f04f 0900 	mov.w	r9, #0
 8007108:	f104 0a1a 	add.w	sl, r4, #26
 800710c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800710e:	425b      	negs	r3, r3
 8007110:	454b      	cmp	r3, r9
 8007112:	dc01      	bgt.n	8007118 <_printf_float+0x2b4>
 8007114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007116:	e794      	b.n	8007042 <_printf_float+0x1de>
 8007118:	2301      	movs	r3, #1
 800711a:	4652      	mov	r2, sl
 800711c:	4631      	mov	r1, r6
 800711e:	4628      	mov	r0, r5
 8007120:	47b8      	blx	r7
 8007122:	3001      	adds	r0, #1
 8007124:	f43f aef9 	beq.w	8006f1a <_printf_float+0xb6>
 8007128:	f109 0901 	add.w	r9, r9, #1
 800712c:	e7ee      	b.n	800710c <_printf_float+0x2a8>
 800712e:	bf00      	nop
 8007130:	7fefffff 	.word	0x7fefffff
 8007134:	0800ce74 	.word	0x0800ce74
 8007138:	0800ce78 	.word	0x0800ce78
 800713c:	0800ce80 	.word	0x0800ce80
 8007140:	0800ce7c 	.word	0x0800ce7c
 8007144:	0800ce84 	.word	0x0800ce84
 8007148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800714a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800714c:	429a      	cmp	r2, r3
 800714e:	bfa8      	it	ge
 8007150:	461a      	movge	r2, r3
 8007152:	2a00      	cmp	r2, #0
 8007154:	4691      	mov	r9, r2
 8007156:	dc37      	bgt.n	80071c8 <_printf_float+0x364>
 8007158:	f04f 0b00 	mov.w	fp, #0
 800715c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007160:	f104 021a 	add.w	r2, r4, #26
 8007164:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007168:	ebaa 0309 	sub.w	r3, sl, r9
 800716c:	455b      	cmp	r3, fp
 800716e:	dc33      	bgt.n	80071d8 <_printf_float+0x374>
 8007170:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007174:	429a      	cmp	r2, r3
 8007176:	db3b      	blt.n	80071f0 <_printf_float+0x38c>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	07da      	lsls	r2, r3, #31
 800717c:	d438      	bmi.n	80071f0 <_printf_float+0x38c>
 800717e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007180:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007182:	eba3 020a 	sub.w	r2, r3, sl
 8007186:	eba3 0901 	sub.w	r9, r3, r1
 800718a:	4591      	cmp	r9, r2
 800718c:	bfa8      	it	ge
 800718e:	4691      	movge	r9, r2
 8007190:	f1b9 0f00 	cmp.w	r9, #0
 8007194:	dc34      	bgt.n	8007200 <_printf_float+0x39c>
 8007196:	f04f 0800 	mov.w	r8, #0
 800719a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800719e:	f104 0a1a 	add.w	sl, r4, #26
 80071a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071a6:	1a9b      	subs	r3, r3, r2
 80071a8:	eba3 0309 	sub.w	r3, r3, r9
 80071ac:	4543      	cmp	r3, r8
 80071ae:	f77f af7a 	ble.w	80070a6 <_printf_float+0x242>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4652      	mov	r2, sl
 80071b6:	4631      	mov	r1, r6
 80071b8:	4628      	mov	r0, r5
 80071ba:	47b8      	blx	r7
 80071bc:	3001      	adds	r0, #1
 80071be:	f43f aeac 	beq.w	8006f1a <_printf_float+0xb6>
 80071c2:	f108 0801 	add.w	r8, r8, #1
 80071c6:	e7ec      	b.n	80071a2 <_printf_float+0x33e>
 80071c8:	4613      	mov	r3, r2
 80071ca:	4631      	mov	r1, r6
 80071cc:	4642      	mov	r2, r8
 80071ce:	4628      	mov	r0, r5
 80071d0:	47b8      	blx	r7
 80071d2:	3001      	adds	r0, #1
 80071d4:	d1c0      	bne.n	8007158 <_printf_float+0x2f4>
 80071d6:	e6a0      	b.n	8006f1a <_printf_float+0xb6>
 80071d8:	2301      	movs	r3, #1
 80071da:	4631      	mov	r1, r6
 80071dc:	4628      	mov	r0, r5
 80071de:	920b      	str	r2, [sp, #44]	; 0x2c
 80071e0:	47b8      	blx	r7
 80071e2:	3001      	adds	r0, #1
 80071e4:	f43f ae99 	beq.w	8006f1a <_printf_float+0xb6>
 80071e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071ea:	f10b 0b01 	add.w	fp, fp, #1
 80071ee:	e7b9      	b.n	8007164 <_printf_float+0x300>
 80071f0:	4631      	mov	r1, r6
 80071f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f6:	4628      	mov	r0, r5
 80071f8:	47b8      	blx	r7
 80071fa:	3001      	adds	r0, #1
 80071fc:	d1bf      	bne.n	800717e <_printf_float+0x31a>
 80071fe:	e68c      	b.n	8006f1a <_printf_float+0xb6>
 8007200:	464b      	mov	r3, r9
 8007202:	4631      	mov	r1, r6
 8007204:	4628      	mov	r0, r5
 8007206:	eb08 020a 	add.w	r2, r8, sl
 800720a:	47b8      	blx	r7
 800720c:	3001      	adds	r0, #1
 800720e:	d1c2      	bne.n	8007196 <_printf_float+0x332>
 8007210:	e683      	b.n	8006f1a <_printf_float+0xb6>
 8007212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007214:	2a01      	cmp	r2, #1
 8007216:	dc01      	bgt.n	800721c <_printf_float+0x3b8>
 8007218:	07db      	lsls	r3, r3, #31
 800721a:	d537      	bpl.n	800728c <_printf_float+0x428>
 800721c:	2301      	movs	r3, #1
 800721e:	4642      	mov	r2, r8
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f ae77 	beq.w	8006f1a <_printf_float+0xb6>
 800722c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	f43f ae6f 	beq.w	8006f1a <_printf_float+0xb6>
 800723c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007240:	2200      	movs	r2, #0
 8007242:	2300      	movs	r3, #0
 8007244:	f7f9 fc1c 	bl	8000a80 <__aeabi_dcmpeq>
 8007248:	b9d8      	cbnz	r0, 8007282 <_printf_float+0x41e>
 800724a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800724c:	f108 0201 	add.w	r2, r8, #1
 8007250:	3b01      	subs	r3, #1
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	d10e      	bne.n	800727a <_printf_float+0x416>
 800725c:	e65d      	b.n	8006f1a <_printf_float+0xb6>
 800725e:	2301      	movs	r3, #1
 8007260:	464a      	mov	r2, r9
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	f43f ae56 	beq.w	8006f1a <_printf_float+0xb6>
 800726e:	f108 0801 	add.w	r8, r8, #1
 8007272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007274:	3b01      	subs	r3, #1
 8007276:	4543      	cmp	r3, r8
 8007278:	dcf1      	bgt.n	800725e <_printf_float+0x3fa>
 800727a:	4653      	mov	r3, sl
 800727c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007280:	e6e0      	b.n	8007044 <_printf_float+0x1e0>
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	f104 091a 	add.w	r9, r4, #26
 800728a:	e7f2      	b.n	8007272 <_printf_float+0x40e>
 800728c:	2301      	movs	r3, #1
 800728e:	4642      	mov	r2, r8
 8007290:	e7df      	b.n	8007252 <_printf_float+0x3ee>
 8007292:	2301      	movs	r3, #1
 8007294:	464a      	mov	r2, r9
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f ae3c 	beq.w	8006f1a <_printf_float+0xb6>
 80072a2:	f108 0801 	add.w	r8, r8, #1
 80072a6:	68e3      	ldr	r3, [r4, #12]
 80072a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072aa:	1a5b      	subs	r3, r3, r1
 80072ac:	4543      	cmp	r3, r8
 80072ae:	dcf0      	bgt.n	8007292 <_printf_float+0x42e>
 80072b0:	e6fd      	b.n	80070ae <_printf_float+0x24a>
 80072b2:	f04f 0800 	mov.w	r8, #0
 80072b6:	f104 0919 	add.w	r9, r4, #25
 80072ba:	e7f4      	b.n	80072a6 <_printf_float+0x442>

080072bc <_printf_common>:
 80072bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	4616      	mov	r6, r2
 80072c2:	4699      	mov	r9, r3
 80072c4:	688a      	ldr	r2, [r1, #8]
 80072c6:	690b      	ldr	r3, [r1, #16]
 80072c8:	4607      	mov	r7, r0
 80072ca:	4293      	cmp	r3, r2
 80072cc:	bfb8      	it	lt
 80072ce:	4613      	movlt	r3, r2
 80072d0:	6033      	str	r3, [r6, #0]
 80072d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072d6:	460c      	mov	r4, r1
 80072d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072dc:	b10a      	cbz	r2, 80072e2 <_printf_common+0x26>
 80072de:	3301      	adds	r3, #1
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	0699      	lsls	r1, r3, #26
 80072e6:	bf42      	ittt	mi
 80072e8:	6833      	ldrmi	r3, [r6, #0]
 80072ea:	3302      	addmi	r3, #2
 80072ec:	6033      	strmi	r3, [r6, #0]
 80072ee:	6825      	ldr	r5, [r4, #0]
 80072f0:	f015 0506 	ands.w	r5, r5, #6
 80072f4:	d106      	bne.n	8007304 <_printf_common+0x48>
 80072f6:	f104 0a19 	add.w	sl, r4, #25
 80072fa:	68e3      	ldr	r3, [r4, #12]
 80072fc:	6832      	ldr	r2, [r6, #0]
 80072fe:	1a9b      	subs	r3, r3, r2
 8007300:	42ab      	cmp	r3, r5
 8007302:	dc28      	bgt.n	8007356 <_printf_common+0x9a>
 8007304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007308:	1e13      	subs	r3, r2, #0
 800730a:	6822      	ldr	r2, [r4, #0]
 800730c:	bf18      	it	ne
 800730e:	2301      	movne	r3, #1
 8007310:	0692      	lsls	r2, r2, #26
 8007312:	d42d      	bmi.n	8007370 <_printf_common+0xb4>
 8007314:	4649      	mov	r1, r9
 8007316:	4638      	mov	r0, r7
 8007318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800731c:	47c0      	blx	r8
 800731e:	3001      	adds	r0, #1
 8007320:	d020      	beq.n	8007364 <_printf_common+0xa8>
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	68e5      	ldr	r5, [r4, #12]
 8007326:	f003 0306 	and.w	r3, r3, #6
 800732a:	2b04      	cmp	r3, #4
 800732c:	bf18      	it	ne
 800732e:	2500      	movne	r5, #0
 8007330:	6832      	ldr	r2, [r6, #0]
 8007332:	f04f 0600 	mov.w	r6, #0
 8007336:	68a3      	ldr	r3, [r4, #8]
 8007338:	bf08      	it	eq
 800733a:	1aad      	subeq	r5, r5, r2
 800733c:	6922      	ldr	r2, [r4, #16]
 800733e:	bf08      	it	eq
 8007340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007344:	4293      	cmp	r3, r2
 8007346:	bfc4      	itt	gt
 8007348:	1a9b      	subgt	r3, r3, r2
 800734a:	18ed      	addgt	r5, r5, r3
 800734c:	341a      	adds	r4, #26
 800734e:	42b5      	cmp	r5, r6
 8007350:	d11a      	bne.n	8007388 <_printf_common+0xcc>
 8007352:	2000      	movs	r0, #0
 8007354:	e008      	b.n	8007368 <_printf_common+0xac>
 8007356:	2301      	movs	r3, #1
 8007358:	4652      	mov	r2, sl
 800735a:	4649      	mov	r1, r9
 800735c:	4638      	mov	r0, r7
 800735e:	47c0      	blx	r8
 8007360:	3001      	adds	r0, #1
 8007362:	d103      	bne.n	800736c <_printf_common+0xb0>
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736c:	3501      	adds	r5, #1
 800736e:	e7c4      	b.n	80072fa <_printf_common+0x3e>
 8007370:	2030      	movs	r0, #48	; 0x30
 8007372:	18e1      	adds	r1, r4, r3
 8007374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800737e:	4422      	add	r2, r4
 8007380:	3302      	adds	r3, #2
 8007382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007386:	e7c5      	b.n	8007314 <_printf_common+0x58>
 8007388:	2301      	movs	r3, #1
 800738a:	4622      	mov	r2, r4
 800738c:	4649      	mov	r1, r9
 800738e:	4638      	mov	r0, r7
 8007390:	47c0      	blx	r8
 8007392:	3001      	adds	r0, #1
 8007394:	d0e6      	beq.n	8007364 <_printf_common+0xa8>
 8007396:	3601      	adds	r6, #1
 8007398:	e7d9      	b.n	800734e <_printf_common+0x92>
	...

0800739c <_printf_i>:
 800739c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	7e0f      	ldrb	r7, [r1, #24]
 80073a2:	4691      	mov	r9, r2
 80073a4:	2f78      	cmp	r7, #120	; 0x78
 80073a6:	4680      	mov	r8, r0
 80073a8:	460c      	mov	r4, r1
 80073aa:	469a      	mov	sl, r3
 80073ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073b2:	d807      	bhi.n	80073c4 <_printf_i+0x28>
 80073b4:	2f62      	cmp	r7, #98	; 0x62
 80073b6:	d80a      	bhi.n	80073ce <_printf_i+0x32>
 80073b8:	2f00      	cmp	r7, #0
 80073ba:	f000 80d9 	beq.w	8007570 <_printf_i+0x1d4>
 80073be:	2f58      	cmp	r7, #88	; 0x58
 80073c0:	f000 80a4 	beq.w	800750c <_printf_i+0x170>
 80073c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073cc:	e03a      	b.n	8007444 <_printf_i+0xa8>
 80073ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073d2:	2b15      	cmp	r3, #21
 80073d4:	d8f6      	bhi.n	80073c4 <_printf_i+0x28>
 80073d6:	a101      	add	r1, pc, #4	; (adr r1, 80073dc <_printf_i+0x40>)
 80073d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073dc:	08007435 	.word	0x08007435
 80073e0:	08007449 	.word	0x08007449
 80073e4:	080073c5 	.word	0x080073c5
 80073e8:	080073c5 	.word	0x080073c5
 80073ec:	080073c5 	.word	0x080073c5
 80073f0:	080073c5 	.word	0x080073c5
 80073f4:	08007449 	.word	0x08007449
 80073f8:	080073c5 	.word	0x080073c5
 80073fc:	080073c5 	.word	0x080073c5
 8007400:	080073c5 	.word	0x080073c5
 8007404:	080073c5 	.word	0x080073c5
 8007408:	08007557 	.word	0x08007557
 800740c:	08007479 	.word	0x08007479
 8007410:	08007539 	.word	0x08007539
 8007414:	080073c5 	.word	0x080073c5
 8007418:	080073c5 	.word	0x080073c5
 800741c:	08007579 	.word	0x08007579
 8007420:	080073c5 	.word	0x080073c5
 8007424:	08007479 	.word	0x08007479
 8007428:	080073c5 	.word	0x080073c5
 800742c:	080073c5 	.word	0x080073c5
 8007430:	08007541 	.word	0x08007541
 8007434:	682b      	ldr	r3, [r5, #0]
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	602a      	str	r2, [r5, #0]
 800743c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007444:	2301      	movs	r3, #1
 8007446:	e0a4      	b.n	8007592 <_printf_i+0x1f6>
 8007448:	6820      	ldr	r0, [r4, #0]
 800744a:	6829      	ldr	r1, [r5, #0]
 800744c:	0606      	lsls	r6, r0, #24
 800744e:	f101 0304 	add.w	r3, r1, #4
 8007452:	d50a      	bpl.n	800746a <_printf_i+0xce>
 8007454:	680e      	ldr	r6, [r1, #0]
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	2e00      	cmp	r6, #0
 800745a:	da03      	bge.n	8007464 <_printf_i+0xc8>
 800745c:	232d      	movs	r3, #45	; 0x2d
 800745e:	4276      	negs	r6, r6
 8007460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007464:	230a      	movs	r3, #10
 8007466:	485e      	ldr	r0, [pc, #376]	; (80075e0 <_printf_i+0x244>)
 8007468:	e019      	b.n	800749e <_printf_i+0x102>
 800746a:	680e      	ldr	r6, [r1, #0]
 800746c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	bf18      	it	ne
 8007474:	b236      	sxthne	r6, r6
 8007476:	e7ef      	b.n	8007458 <_printf_i+0xbc>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	6820      	ldr	r0, [r4, #0]
 800747c:	1d19      	adds	r1, r3, #4
 800747e:	6029      	str	r1, [r5, #0]
 8007480:	0601      	lsls	r1, r0, #24
 8007482:	d501      	bpl.n	8007488 <_printf_i+0xec>
 8007484:	681e      	ldr	r6, [r3, #0]
 8007486:	e002      	b.n	800748e <_printf_i+0xf2>
 8007488:	0646      	lsls	r6, r0, #25
 800748a:	d5fb      	bpl.n	8007484 <_printf_i+0xe8>
 800748c:	881e      	ldrh	r6, [r3, #0]
 800748e:	2f6f      	cmp	r7, #111	; 0x6f
 8007490:	bf0c      	ite	eq
 8007492:	2308      	moveq	r3, #8
 8007494:	230a      	movne	r3, #10
 8007496:	4852      	ldr	r0, [pc, #328]	; (80075e0 <_printf_i+0x244>)
 8007498:	2100      	movs	r1, #0
 800749a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800749e:	6865      	ldr	r5, [r4, #4]
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	bfa8      	it	ge
 80074a4:	6821      	ldrge	r1, [r4, #0]
 80074a6:	60a5      	str	r5, [r4, #8]
 80074a8:	bfa4      	itt	ge
 80074aa:	f021 0104 	bicge.w	r1, r1, #4
 80074ae:	6021      	strge	r1, [r4, #0]
 80074b0:	b90e      	cbnz	r6, 80074b6 <_printf_i+0x11a>
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	d04d      	beq.n	8007552 <_printf_i+0x1b6>
 80074b6:	4615      	mov	r5, r2
 80074b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80074bc:	fb03 6711 	mls	r7, r3, r1, r6
 80074c0:	5dc7      	ldrb	r7, [r0, r7]
 80074c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074c6:	4637      	mov	r7, r6
 80074c8:	42bb      	cmp	r3, r7
 80074ca:	460e      	mov	r6, r1
 80074cc:	d9f4      	bls.n	80074b8 <_printf_i+0x11c>
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d10b      	bne.n	80074ea <_printf_i+0x14e>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	07de      	lsls	r6, r3, #31
 80074d6:	d508      	bpl.n	80074ea <_printf_i+0x14e>
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	6861      	ldr	r1, [r4, #4]
 80074dc:	4299      	cmp	r1, r3
 80074de:	bfde      	ittt	le
 80074e0:	2330      	movle	r3, #48	; 0x30
 80074e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074ea:	1b52      	subs	r2, r2, r5
 80074ec:	6122      	str	r2, [r4, #16]
 80074ee:	464b      	mov	r3, r9
 80074f0:	4621      	mov	r1, r4
 80074f2:	4640      	mov	r0, r8
 80074f4:	f8cd a000 	str.w	sl, [sp]
 80074f8:	aa03      	add	r2, sp, #12
 80074fa:	f7ff fedf 	bl	80072bc <_printf_common>
 80074fe:	3001      	adds	r0, #1
 8007500:	d14c      	bne.n	800759c <_printf_i+0x200>
 8007502:	f04f 30ff 	mov.w	r0, #4294967295
 8007506:	b004      	add	sp, #16
 8007508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800750c:	4834      	ldr	r0, [pc, #208]	; (80075e0 <_printf_i+0x244>)
 800750e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007512:	6829      	ldr	r1, [r5, #0]
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	f851 6b04 	ldr.w	r6, [r1], #4
 800751a:	6029      	str	r1, [r5, #0]
 800751c:	061d      	lsls	r5, r3, #24
 800751e:	d514      	bpl.n	800754a <_printf_i+0x1ae>
 8007520:	07df      	lsls	r7, r3, #31
 8007522:	bf44      	itt	mi
 8007524:	f043 0320 	orrmi.w	r3, r3, #32
 8007528:	6023      	strmi	r3, [r4, #0]
 800752a:	b91e      	cbnz	r6, 8007534 <_printf_i+0x198>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	f023 0320 	bic.w	r3, r3, #32
 8007532:	6023      	str	r3, [r4, #0]
 8007534:	2310      	movs	r3, #16
 8007536:	e7af      	b.n	8007498 <_printf_i+0xfc>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	f043 0320 	orr.w	r3, r3, #32
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	2378      	movs	r3, #120	; 0x78
 8007542:	4828      	ldr	r0, [pc, #160]	; (80075e4 <_printf_i+0x248>)
 8007544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007548:	e7e3      	b.n	8007512 <_printf_i+0x176>
 800754a:	0659      	lsls	r1, r3, #25
 800754c:	bf48      	it	mi
 800754e:	b2b6      	uxthmi	r6, r6
 8007550:	e7e6      	b.n	8007520 <_printf_i+0x184>
 8007552:	4615      	mov	r5, r2
 8007554:	e7bb      	b.n	80074ce <_printf_i+0x132>
 8007556:	682b      	ldr	r3, [r5, #0]
 8007558:	6826      	ldr	r6, [r4, #0]
 800755a:	1d18      	adds	r0, r3, #4
 800755c:	6961      	ldr	r1, [r4, #20]
 800755e:	6028      	str	r0, [r5, #0]
 8007560:	0635      	lsls	r5, r6, #24
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	d501      	bpl.n	800756a <_printf_i+0x1ce>
 8007566:	6019      	str	r1, [r3, #0]
 8007568:	e002      	b.n	8007570 <_printf_i+0x1d4>
 800756a:	0670      	lsls	r0, r6, #25
 800756c:	d5fb      	bpl.n	8007566 <_printf_i+0x1ca>
 800756e:	8019      	strh	r1, [r3, #0]
 8007570:	2300      	movs	r3, #0
 8007572:	4615      	mov	r5, r2
 8007574:	6123      	str	r3, [r4, #16]
 8007576:	e7ba      	b.n	80074ee <_printf_i+0x152>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	2100      	movs	r1, #0
 800757c:	1d1a      	adds	r2, r3, #4
 800757e:	602a      	str	r2, [r5, #0]
 8007580:	681d      	ldr	r5, [r3, #0]
 8007582:	6862      	ldr	r2, [r4, #4]
 8007584:	4628      	mov	r0, r5
 8007586:	f002 fbff 	bl	8009d88 <memchr>
 800758a:	b108      	cbz	r0, 8007590 <_printf_i+0x1f4>
 800758c:	1b40      	subs	r0, r0, r5
 800758e:	6060      	str	r0, [r4, #4]
 8007590:	6863      	ldr	r3, [r4, #4]
 8007592:	6123      	str	r3, [r4, #16]
 8007594:	2300      	movs	r3, #0
 8007596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759a:	e7a8      	b.n	80074ee <_printf_i+0x152>
 800759c:	462a      	mov	r2, r5
 800759e:	4649      	mov	r1, r9
 80075a0:	4640      	mov	r0, r8
 80075a2:	6923      	ldr	r3, [r4, #16]
 80075a4:	47d0      	blx	sl
 80075a6:	3001      	adds	r0, #1
 80075a8:	d0ab      	beq.n	8007502 <_printf_i+0x166>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	079b      	lsls	r3, r3, #30
 80075ae:	d413      	bmi.n	80075d8 <_printf_i+0x23c>
 80075b0:	68e0      	ldr	r0, [r4, #12]
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	4298      	cmp	r0, r3
 80075b6:	bfb8      	it	lt
 80075b8:	4618      	movlt	r0, r3
 80075ba:	e7a4      	b.n	8007506 <_printf_i+0x16a>
 80075bc:	2301      	movs	r3, #1
 80075be:	4632      	mov	r2, r6
 80075c0:	4649      	mov	r1, r9
 80075c2:	4640      	mov	r0, r8
 80075c4:	47d0      	blx	sl
 80075c6:	3001      	adds	r0, #1
 80075c8:	d09b      	beq.n	8007502 <_printf_i+0x166>
 80075ca:	3501      	adds	r5, #1
 80075cc:	68e3      	ldr	r3, [r4, #12]
 80075ce:	9903      	ldr	r1, [sp, #12]
 80075d0:	1a5b      	subs	r3, r3, r1
 80075d2:	42ab      	cmp	r3, r5
 80075d4:	dcf2      	bgt.n	80075bc <_printf_i+0x220>
 80075d6:	e7eb      	b.n	80075b0 <_printf_i+0x214>
 80075d8:	2500      	movs	r5, #0
 80075da:	f104 0619 	add.w	r6, r4, #25
 80075de:	e7f5      	b.n	80075cc <_printf_i+0x230>
 80075e0:	0800ce86 	.word	0x0800ce86
 80075e4:	0800ce97 	.word	0x0800ce97

080075e8 <_scanf_float>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	b087      	sub	sp, #28
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	688b      	ldr	r3, [r1, #8]
 80075f2:	4617      	mov	r7, r2
 80075f4:	1e5a      	subs	r2, r3, #1
 80075f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80075fa:	bf85      	ittet	hi
 80075fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007600:	195b      	addhi	r3, r3, r5
 8007602:	2300      	movls	r3, #0
 8007604:	9302      	strhi	r3, [sp, #8]
 8007606:	bf88      	it	hi
 8007608:	f240 135d 	movwhi	r3, #349	; 0x15d
 800760c:	468b      	mov	fp, r1
 800760e:	f04f 0500 	mov.w	r5, #0
 8007612:	bf8c      	ite	hi
 8007614:	608b      	strhi	r3, [r1, #8]
 8007616:	9302      	strls	r3, [sp, #8]
 8007618:	680b      	ldr	r3, [r1, #0]
 800761a:	4680      	mov	r8, r0
 800761c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007620:	f84b 3b1c 	str.w	r3, [fp], #28
 8007624:	460c      	mov	r4, r1
 8007626:	465e      	mov	r6, fp
 8007628:	46aa      	mov	sl, r5
 800762a:	46a9      	mov	r9, r5
 800762c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007630:	9501      	str	r5, [sp, #4]
 8007632:	68a2      	ldr	r2, [r4, #8]
 8007634:	b152      	cbz	r2, 800764c <_scanf_float+0x64>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b4e      	cmp	r3, #78	; 0x4e
 800763c:	d864      	bhi.n	8007708 <_scanf_float+0x120>
 800763e:	2b40      	cmp	r3, #64	; 0x40
 8007640:	d83c      	bhi.n	80076bc <_scanf_float+0xd4>
 8007642:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007646:	b2c8      	uxtb	r0, r1
 8007648:	280e      	cmp	r0, #14
 800764a:	d93a      	bls.n	80076c2 <_scanf_float+0xda>
 800764c:	f1b9 0f00 	cmp.w	r9, #0
 8007650:	d003      	beq.n	800765a <_scanf_float+0x72>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800765e:	f1ba 0f01 	cmp.w	sl, #1
 8007662:	f200 8113 	bhi.w	800788c <_scanf_float+0x2a4>
 8007666:	455e      	cmp	r6, fp
 8007668:	f200 8105 	bhi.w	8007876 <_scanf_float+0x28e>
 800766c:	2501      	movs	r5, #1
 800766e:	4628      	mov	r0, r5
 8007670:	b007      	add	sp, #28
 8007672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007676:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800767a:	2a0d      	cmp	r2, #13
 800767c:	d8e6      	bhi.n	800764c <_scanf_float+0x64>
 800767e:	a101      	add	r1, pc, #4	; (adr r1, 8007684 <_scanf_float+0x9c>)
 8007680:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007684:	080077c3 	.word	0x080077c3
 8007688:	0800764d 	.word	0x0800764d
 800768c:	0800764d 	.word	0x0800764d
 8007690:	0800764d 	.word	0x0800764d
 8007694:	08007823 	.word	0x08007823
 8007698:	080077fb 	.word	0x080077fb
 800769c:	0800764d 	.word	0x0800764d
 80076a0:	0800764d 	.word	0x0800764d
 80076a4:	080077d1 	.word	0x080077d1
 80076a8:	0800764d 	.word	0x0800764d
 80076ac:	0800764d 	.word	0x0800764d
 80076b0:	0800764d 	.word	0x0800764d
 80076b4:	0800764d 	.word	0x0800764d
 80076b8:	08007789 	.word	0x08007789
 80076bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80076c0:	e7db      	b.n	800767a <_scanf_float+0x92>
 80076c2:	290e      	cmp	r1, #14
 80076c4:	d8c2      	bhi.n	800764c <_scanf_float+0x64>
 80076c6:	a001      	add	r0, pc, #4	; (adr r0, 80076cc <_scanf_float+0xe4>)
 80076c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80076cc:	0800777b 	.word	0x0800777b
 80076d0:	0800764d 	.word	0x0800764d
 80076d4:	0800777b 	.word	0x0800777b
 80076d8:	0800780f 	.word	0x0800780f
 80076dc:	0800764d 	.word	0x0800764d
 80076e0:	08007729 	.word	0x08007729
 80076e4:	08007765 	.word	0x08007765
 80076e8:	08007765 	.word	0x08007765
 80076ec:	08007765 	.word	0x08007765
 80076f0:	08007765 	.word	0x08007765
 80076f4:	08007765 	.word	0x08007765
 80076f8:	08007765 	.word	0x08007765
 80076fc:	08007765 	.word	0x08007765
 8007700:	08007765 	.word	0x08007765
 8007704:	08007765 	.word	0x08007765
 8007708:	2b6e      	cmp	r3, #110	; 0x6e
 800770a:	d809      	bhi.n	8007720 <_scanf_float+0x138>
 800770c:	2b60      	cmp	r3, #96	; 0x60
 800770e:	d8b2      	bhi.n	8007676 <_scanf_float+0x8e>
 8007710:	2b54      	cmp	r3, #84	; 0x54
 8007712:	d077      	beq.n	8007804 <_scanf_float+0x21c>
 8007714:	2b59      	cmp	r3, #89	; 0x59
 8007716:	d199      	bne.n	800764c <_scanf_float+0x64>
 8007718:	2d07      	cmp	r5, #7
 800771a:	d197      	bne.n	800764c <_scanf_float+0x64>
 800771c:	2508      	movs	r5, #8
 800771e:	e029      	b.n	8007774 <_scanf_float+0x18c>
 8007720:	2b74      	cmp	r3, #116	; 0x74
 8007722:	d06f      	beq.n	8007804 <_scanf_float+0x21c>
 8007724:	2b79      	cmp	r3, #121	; 0x79
 8007726:	e7f6      	b.n	8007716 <_scanf_float+0x12e>
 8007728:	6821      	ldr	r1, [r4, #0]
 800772a:	05c8      	lsls	r0, r1, #23
 800772c:	d51a      	bpl.n	8007764 <_scanf_float+0x17c>
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007734:	6021      	str	r1, [r4, #0]
 8007736:	f109 0901 	add.w	r9, r9, #1
 800773a:	b11b      	cbz	r3, 8007744 <_scanf_float+0x15c>
 800773c:	3b01      	subs	r3, #1
 800773e:	3201      	adds	r2, #1
 8007740:	9302      	str	r3, [sp, #8]
 8007742:	60a2      	str	r2, [r4, #8]
 8007744:	68a3      	ldr	r3, [r4, #8]
 8007746:	3b01      	subs	r3, #1
 8007748:	60a3      	str	r3, [r4, #8]
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	3301      	adds	r3, #1
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3b01      	subs	r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	607b      	str	r3, [r7, #4]
 8007758:	f340 8084 	ble.w	8007864 <_scanf_float+0x27c>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	3301      	adds	r3, #1
 8007760:	603b      	str	r3, [r7, #0]
 8007762:	e766      	b.n	8007632 <_scanf_float+0x4a>
 8007764:	eb1a 0f05 	cmn.w	sl, r5
 8007768:	f47f af70 	bne.w	800764c <_scanf_float+0x64>
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007772:	6022      	str	r2, [r4, #0]
 8007774:	f806 3b01 	strb.w	r3, [r6], #1
 8007778:	e7e4      	b.n	8007744 <_scanf_float+0x15c>
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	0610      	lsls	r0, r2, #24
 800777e:	f57f af65 	bpl.w	800764c <_scanf_float+0x64>
 8007782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007786:	e7f4      	b.n	8007772 <_scanf_float+0x18a>
 8007788:	f1ba 0f00 	cmp.w	sl, #0
 800778c:	d10e      	bne.n	80077ac <_scanf_float+0x1c4>
 800778e:	f1b9 0f00 	cmp.w	r9, #0
 8007792:	d10e      	bne.n	80077b2 <_scanf_float+0x1ca>
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800779a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800779e:	d108      	bne.n	80077b2 <_scanf_float+0x1ca>
 80077a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077a4:	f04f 0a01 	mov.w	sl, #1
 80077a8:	6022      	str	r2, [r4, #0]
 80077aa:	e7e3      	b.n	8007774 <_scanf_float+0x18c>
 80077ac:	f1ba 0f02 	cmp.w	sl, #2
 80077b0:	d055      	beq.n	800785e <_scanf_float+0x276>
 80077b2:	2d01      	cmp	r5, #1
 80077b4:	d002      	beq.n	80077bc <_scanf_float+0x1d4>
 80077b6:	2d04      	cmp	r5, #4
 80077b8:	f47f af48 	bne.w	800764c <_scanf_float+0x64>
 80077bc:	3501      	adds	r5, #1
 80077be:	b2ed      	uxtb	r5, r5
 80077c0:	e7d8      	b.n	8007774 <_scanf_float+0x18c>
 80077c2:	f1ba 0f01 	cmp.w	sl, #1
 80077c6:	f47f af41 	bne.w	800764c <_scanf_float+0x64>
 80077ca:	f04f 0a02 	mov.w	sl, #2
 80077ce:	e7d1      	b.n	8007774 <_scanf_float+0x18c>
 80077d0:	b97d      	cbnz	r5, 80077f2 <_scanf_float+0x20a>
 80077d2:	f1b9 0f00 	cmp.w	r9, #0
 80077d6:	f47f af3c 	bne.w	8007652 <_scanf_float+0x6a>
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077e4:	f47f af39 	bne.w	800765a <_scanf_float+0x72>
 80077e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077ec:	2501      	movs	r5, #1
 80077ee:	6022      	str	r2, [r4, #0]
 80077f0:	e7c0      	b.n	8007774 <_scanf_float+0x18c>
 80077f2:	2d03      	cmp	r5, #3
 80077f4:	d0e2      	beq.n	80077bc <_scanf_float+0x1d4>
 80077f6:	2d05      	cmp	r5, #5
 80077f8:	e7de      	b.n	80077b8 <_scanf_float+0x1d0>
 80077fa:	2d02      	cmp	r5, #2
 80077fc:	f47f af26 	bne.w	800764c <_scanf_float+0x64>
 8007800:	2503      	movs	r5, #3
 8007802:	e7b7      	b.n	8007774 <_scanf_float+0x18c>
 8007804:	2d06      	cmp	r5, #6
 8007806:	f47f af21 	bne.w	800764c <_scanf_float+0x64>
 800780a:	2507      	movs	r5, #7
 800780c:	e7b2      	b.n	8007774 <_scanf_float+0x18c>
 800780e:	6822      	ldr	r2, [r4, #0]
 8007810:	0591      	lsls	r1, r2, #22
 8007812:	f57f af1b 	bpl.w	800764c <_scanf_float+0x64>
 8007816:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800781a:	6022      	str	r2, [r4, #0]
 800781c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007820:	e7a8      	b.n	8007774 <_scanf_float+0x18c>
 8007822:	6822      	ldr	r2, [r4, #0]
 8007824:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007828:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800782c:	d006      	beq.n	800783c <_scanf_float+0x254>
 800782e:	0550      	lsls	r0, r2, #21
 8007830:	f57f af0c 	bpl.w	800764c <_scanf_float+0x64>
 8007834:	f1b9 0f00 	cmp.w	r9, #0
 8007838:	f43f af0f 	beq.w	800765a <_scanf_float+0x72>
 800783c:	0591      	lsls	r1, r2, #22
 800783e:	bf58      	it	pl
 8007840:	9901      	ldrpl	r1, [sp, #4]
 8007842:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007846:	bf58      	it	pl
 8007848:	eba9 0101 	subpl.w	r1, r9, r1
 800784c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007850:	f04f 0900 	mov.w	r9, #0
 8007854:	bf58      	it	pl
 8007856:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800785a:	6022      	str	r2, [r4, #0]
 800785c:	e78a      	b.n	8007774 <_scanf_float+0x18c>
 800785e:	f04f 0a03 	mov.w	sl, #3
 8007862:	e787      	b.n	8007774 <_scanf_float+0x18c>
 8007864:	4639      	mov	r1, r7
 8007866:	4640      	mov	r0, r8
 8007868:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800786c:	4798      	blx	r3
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f aedf 	beq.w	8007632 <_scanf_float+0x4a>
 8007874:	e6ea      	b.n	800764c <_scanf_float+0x64>
 8007876:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800787a:	463a      	mov	r2, r7
 800787c:	4640      	mov	r0, r8
 800787e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007882:	4798      	blx	r3
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	3b01      	subs	r3, #1
 8007888:	6123      	str	r3, [r4, #16]
 800788a:	e6ec      	b.n	8007666 <_scanf_float+0x7e>
 800788c:	1e6b      	subs	r3, r5, #1
 800788e:	2b06      	cmp	r3, #6
 8007890:	d825      	bhi.n	80078de <_scanf_float+0x2f6>
 8007892:	2d02      	cmp	r5, #2
 8007894:	d836      	bhi.n	8007904 <_scanf_float+0x31c>
 8007896:	455e      	cmp	r6, fp
 8007898:	f67f aee8 	bls.w	800766c <_scanf_float+0x84>
 800789c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078a0:	463a      	mov	r2, r7
 80078a2:	4640      	mov	r0, r8
 80078a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078a8:	4798      	blx	r3
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	6123      	str	r3, [r4, #16]
 80078b0:	e7f1      	b.n	8007896 <_scanf_float+0x2ae>
 80078b2:	9802      	ldr	r0, [sp, #8]
 80078b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80078bc:	463a      	mov	r2, r7
 80078be:	9002      	str	r0, [sp, #8]
 80078c0:	4640      	mov	r0, r8
 80078c2:	4798      	blx	r3
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	6123      	str	r3, [r4, #16]
 80078ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078ce:	fa5f fa8a 	uxtb.w	sl, sl
 80078d2:	f1ba 0f02 	cmp.w	sl, #2
 80078d6:	d1ec      	bne.n	80078b2 <_scanf_float+0x2ca>
 80078d8:	3d03      	subs	r5, #3
 80078da:	b2ed      	uxtb	r5, r5
 80078dc:	1b76      	subs	r6, r6, r5
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	05da      	lsls	r2, r3, #23
 80078e2:	d52f      	bpl.n	8007944 <_scanf_float+0x35c>
 80078e4:	055b      	lsls	r3, r3, #21
 80078e6:	d510      	bpl.n	800790a <_scanf_float+0x322>
 80078e8:	455e      	cmp	r6, fp
 80078ea:	f67f aebf 	bls.w	800766c <_scanf_float+0x84>
 80078ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078f2:	463a      	mov	r2, r7
 80078f4:	4640      	mov	r0, r8
 80078f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078fa:	4798      	blx	r3
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	3b01      	subs	r3, #1
 8007900:	6123      	str	r3, [r4, #16]
 8007902:	e7f1      	b.n	80078e8 <_scanf_float+0x300>
 8007904:	46aa      	mov	sl, r5
 8007906:	9602      	str	r6, [sp, #8]
 8007908:	e7df      	b.n	80078ca <_scanf_float+0x2e2>
 800790a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800790e:	6923      	ldr	r3, [r4, #16]
 8007910:	2965      	cmp	r1, #101	; 0x65
 8007912:	f103 33ff 	add.w	r3, r3, #4294967295
 8007916:	f106 35ff 	add.w	r5, r6, #4294967295
 800791a:	6123      	str	r3, [r4, #16]
 800791c:	d00c      	beq.n	8007938 <_scanf_float+0x350>
 800791e:	2945      	cmp	r1, #69	; 0x45
 8007920:	d00a      	beq.n	8007938 <_scanf_float+0x350>
 8007922:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007926:	463a      	mov	r2, r7
 8007928:	4640      	mov	r0, r8
 800792a:	4798      	blx	r3
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007932:	3b01      	subs	r3, #1
 8007934:	1eb5      	subs	r5, r6, #2
 8007936:	6123      	str	r3, [r4, #16]
 8007938:	463a      	mov	r2, r7
 800793a:	4640      	mov	r0, r8
 800793c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007940:	4798      	blx	r3
 8007942:	462e      	mov	r6, r5
 8007944:	6825      	ldr	r5, [r4, #0]
 8007946:	f015 0510 	ands.w	r5, r5, #16
 800794a:	d155      	bne.n	80079f8 <_scanf_float+0x410>
 800794c:	7035      	strb	r5, [r6, #0]
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007958:	d11b      	bne.n	8007992 <_scanf_float+0x3aa>
 800795a:	9b01      	ldr	r3, [sp, #4]
 800795c:	454b      	cmp	r3, r9
 800795e:	eba3 0209 	sub.w	r2, r3, r9
 8007962:	d123      	bne.n	80079ac <_scanf_float+0x3c4>
 8007964:	2200      	movs	r2, #0
 8007966:	4659      	mov	r1, fp
 8007968:	4640      	mov	r0, r8
 800796a:	f000 fe91 	bl	8008690 <_strtod_r>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	f012 0f02 	tst.w	r2, #2
 8007976:	4606      	mov	r6, r0
 8007978:	460f      	mov	r7, r1
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	d021      	beq.n	80079c2 <_scanf_float+0x3da>
 800797e:	1d1a      	adds	r2, r3, #4
 8007980:	9903      	ldr	r1, [sp, #12]
 8007982:	600a      	str	r2, [r1, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	e9c3 6700 	strd	r6, r7, [r3]
 800798a:	68e3      	ldr	r3, [r4, #12]
 800798c:	3301      	adds	r3, #1
 800798e:	60e3      	str	r3, [r4, #12]
 8007990:	e66d      	b.n	800766e <_scanf_float+0x86>
 8007992:	9b04      	ldr	r3, [sp, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0e5      	beq.n	8007964 <_scanf_float+0x37c>
 8007998:	9905      	ldr	r1, [sp, #20]
 800799a:	230a      	movs	r3, #10
 800799c:	462a      	mov	r2, r5
 800799e:	4640      	mov	r0, r8
 80079a0:	3101      	adds	r1, #1
 80079a2:	f000 fef7 	bl	8008794 <_strtol_r>
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	9e05      	ldr	r6, [sp, #20]
 80079aa:	1ac2      	subs	r2, r0, r3
 80079ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80079b0:	429e      	cmp	r6, r3
 80079b2:	bf28      	it	cs
 80079b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80079b8:	4630      	mov	r0, r6
 80079ba:	4910      	ldr	r1, [pc, #64]	; (80079fc <_scanf_float+0x414>)
 80079bc:	f000 f83e 	bl	8007a3c <siprintf>
 80079c0:	e7d0      	b.n	8007964 <_scanf_float+0x37c>
 80079c2:	f012 0f04 	tst.w	r2, #4
 80079c6:	f103 0204 	add.w	r2, r3, #4
 80079ca:	d1d9      	bne.n	8007980 <_scanf_float+0x398>
 80079cc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80079d0:	f8cc 2000 	str.w	r2, [ip]
 80079d4:	f8d3 8000 	ldr.w	r8, [r3]
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	f7f9 f882 	bl	8000ae4 <__aeabi_dcmpun>
 80079e0:	b128      	cbz	r0, 80079ee <_scanf_float+0x406>
 80079e2:	4807      	ldr	r0, [pc, #28]	; (8007a00 <_scanf_float+0x418>)
 80079e4:	f000 f826 	bl	8007a34 <nanf>
 80079e8:	f8c8 0000 	str.w	r0, [r8]
 80079ec:	e7cd      	b.n	800798a <_scanf_float+0x3a2>
 80079ee:	4630      	mov	r0, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	f7f9 f8d5 	bl	8000ba0 <__aeabi_d2f>
 80079f6:	e7f7      	b.n	80079e8 <_scanf_float+0x400>
 80079f8:	2500      	movs	r5, #0
 80079fa:	e638      	b.n	800766e <_scanf_float+0x86>
 80079fc:	0800cea8 	.word	0x0800cea8
 8007a00:	0800d318 	.word	0x0800d318

08007a04 <iprintf>:
 8007a04:	b40f      	push	{r0, r1, r2, r3}
 8007a06:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <iprintf+0x2c>)
 8007a08:	b513      	push	{r0, r1, r4, lr}
 8007a0a:	681c      	ldr	r4, [r3, #0]
 8007a0c:	b124      	cbz	r4, 8007a18 <iprintf+0x14>
 8007a0e:	69a3      	ldr	r3, [r4, #24]
 8007a10:	b913      	cbnz	r3, 8007a18 <iprintf+0x14>
 8007a12:	4620      	mov	r0, r4
 8007a14:	f001 fd92 	bl	800953c <__sinit>
 8007a18:	ab05      	add	r3, sp, #20
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	9a04      	ldr	r2, [sp, #16]
 8007a1e:	68a1      	ldr	r1, [r4, #8]
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	f003 f8f9 	bl	800ac18 <_vfiprintf_r>
 8007a26:	b002      	add	sp, #8
 8007a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a2c:	b004      	add	sp, #16
 8007a2e:	4770      	bx	lr
 8007a30:	20000014 	.word	0x20000014

08007a34 <nanf>:
 8007a34:	4800      	ldr	r0, [pc, #0]	; (8007a38 <nanf+0x4>)
 8007a36:	4770      	bx	lr
 8007a38:	7fc00000 	.word	0x7fc00000

08007a3c <siprintf>:
 8007a3c:	b40e      	push	{r1, r2, r3}
 8007a3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a42:	b500      	push	{lr}
 8007a44:	b09c      	sub	sp, #112	; 0x70
 8007a46:	ab1d      	add	r3, sp, #116	; 0x74
 8007a48:	9002      	str	r0, [sp, #8]
 8007a4a:	9006      	str	r0, [sp, #24]
 8007a4c:	9107      	str	r1, [sp, #28]
 8007a4e:	9104      	str	r1, [sp, #16]
 8007a50:	4808      	ldr	r0, [pc, #32]	; (8007a74 <siprintf+0x38>)
 8007a52:	4909      	ldr	r1, [pc, #36]	; (8007a78 <siprintf+0x3c>)
 8007a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a58:	9105      	str	r1, [sp, #20]
 8007a5a:	6800      	ldr	r0, [r0, #0]
 8007a5c:	a902      	add	r1, sp, #8
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	f002 ffb2 	bl	800a9c8 <_svfiprintf_r>
 8007a64:	2200      	movs	r2, #0
 8007a66:	9b02      	ldr	r3, [sp, #8]
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	b01c      	add	sp, #112	; 0x70
 8007a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a70:	b003      	add	sp, #12
 8007a72:	4770      	bx	lr
 8007a74:	20000014 	.word	0x20000014
 8007a78:	ffff0208 	.word	0xffff0208

08007a7c <sulp>:
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a80:	460f      	mov	r7, r1
 8007a82:	4690      	mov	r8, r2
 8007a84:	f002 fd0c 	bl	800a4a0 <__ulp>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	460d      	mov	r5, r1
 8007a8c:	f1b8 0f00 	cmp.w	r8, #0
 8007a90:	d011      	beq.n	8007ab6 <sulp+0x3a>
 8007a92:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dd0b      	ble.n	8007ab6 <sulp+0x3a>
 8007a9e:	2400      	movs	r4, #0
 8007aa0:	051b      	lsls	r3, r3, #20
 8007aa2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007aa6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007aaa:	4622      	mov	r2, r4
 8007aac:	462b      	mov	r3, r5
 8007aae:	f7f8 fd7f 	bl	80005b0 <__aeabi_dmul>
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	460d      	mov	r5, r1
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007ac0 <_strtod_l>:
 8007ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	469b      	mov	fp, r3
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	b09f      	sub	sp, #124	; 0x7c
 8007aca:	931a      	str	r3, [sp, #104]	; 0x68
 8007acc:	4b9e      	ldr	r3, [pc, #632]	; (8007d48 <_strtod_l+0x288>)
 8007ace:	4682      	mov	sl, r0
 8007ad0:	681f      	ldr	r7, [r3, #0]
 8007ad2:	460e      	mov	r6, r1
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	9215      	str	r2, [sp, #84]	; 0x54
 8007ad8:	f7f8 fba6 	bl	8000228 <strlen>
 8007adc:	f04f 0800 	mov.w	r8, #0
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	f04f 0900 	mov.w	r9, #0
 8007ae6:	9619      	str	r6, [sp, #100]	; 0x64
 8007ae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	2a2b      	cmp	r2, #43	; 0x2b
 8007aee:	d04c      	beq.n	8007b8a <_strtod_l+0xca>
 8007af0:	d83a      	bhi.n	8007b68 <_strtod_l+0xa8>
 8007af2:	2a0d      	cmp	r2, #13
 8007af4:	d833      	bhi.n	8007b5e <_strtod_l+0x9e>
 8007af6:	2a08      	cmp	r2, #8
 8007af8:	d833      	bhi.n	8007b62 <_strtod_l+0xa2>
 8007afa:	2a00      	cmp	r2, #0
 8007afc:	d03d      	beq.n	8007b7a <_strtod_l+0xba>
 8007afe:	2300      	movs	r3, #0
 8007b00:	930a      	str	r3, [sp, #40]	; 0x28
 8007b02:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007b04:	782b      	ldrb	r3, [r5, #0]
 8007b06:	2b30      	cmp	r3, #48	; 0x30
 8007b08:	f040 80aa 	bne.w	8007c60 <_strtod_l+0x1a0>
 8007b0c:	786b      	ldrb	r3, [r5, #1]
 8007b0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b12:	2b58      	cmp	r3, #88	; 0x58
 8007b14:	d166      	bne.n	8007be4 <_strtod_l+0x124>
 8007b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b18:	4650      	mov	r0, sl
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	ab1a      	add	r3, sp, #104	; 0x68
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	4a8a      	ldr	r2, [pc, #552]	; (8007d4c <_strtod_l+0x28c>)
 8007b22:	f8cd b008 	str.w	fp, [sp, #8]
 8007b26:	ab1b      	add	r3, sp, #108	; 0x6c
 8007b28:	a919      	add	r1, sp, #100	; 0x64
 8007b2a:	f001 fe0d 	bl	8009748 <__gethex>
 8007b2e:	f010 0607 	ands.w	r6, r0, #7
 8007b32:	4604      	mov	r4, r0
 8007b34:	d005      	beq.n	8007b42 <_strtod_l+0x82>
 8007b36:	2e06      	cmp	r6, #6
 8007b38:	d129      	bne.n	8007b8e <_strtod_l+0xce>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	3501      	adds	r5, #1
 8007b3e:	9519      	str	r5, [sp, #100]	; 0x64
 8007b40:	930a      	str	r3, [sp, #40]	; 0x28
 8007b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f040 858a 	bne.w	800865e <_strtod_l+0xb9e>
 8007b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4c:	b1d3      	cbz	r3, 8007b84 <_strtod_l+0xc4>
 8007b4e:	4642      	mov	r2, r8
 8007b50:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b54:	4610      	mov	r0, r2
 8007b56:	4619      	mov	r1, r3
 8007b58:	b01f      	add	sp, #124	; 0x7c
 8007b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5e:	2a20      	cmp	r2, #32
 8007b60:	d1cd      	bne.n	8007afe <_strtod_l+0x3e>
 8007b62:	3301      	adds	r3, #1
 8007b64:	9319      	str	r3, [sp, #100]	; 0x64
 8007b66:	e7bf      	b.n	8007ae8 <_strtod_l+0x28>
 8007b68:	2a2d      	cmp	r2, #45	; 0x2d
 8007b6a:	d1c8      	bne.n	8007afe <_strtod_l+0x3e>
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	920a      	str	r2, [sp, #40]	; 0x28
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	9219      	str	r2, [sp, #100]	; 0x64
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1c3      	bne.n	8007b02 <_strtod_l+0x42>
 8007b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b7c:	9619      	str	r6, [sp, #100]	; 0x64
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f040 856b 	bne.w	800865a <_strtod_l+0xb9a>
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	e7e4      	b.n	8007b54 <_strtod_l+0x94>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	e7ef      	b.n	8007b6e <_strtod_l+0xae>
 8007b8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b90:	b13a      	cbz	r2, 8007ba2 <_strtod_l+0xe2>
 8007b92:	2135      	movs	r1, #53	; 0x35
 8007b94:	a81c      	add	r0, sp, #112	; 0x70
 8007b96:	f002 fd87 	bl	800a6a8 <__copybits>
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b9e:	f002 f94f 	bl	8009e40 <_Bfree>
 8007ba2:	3e01      	subs	r6, #1
 8007ba4:	2e04      	cmp	r6, #4
 8007ba6:	d806      	bhi.n	8007bb6 <_strtod_l+0xf6>
 8007ba8:	e8df f006 	tbb	[pc, r6]
 8007bac:	1714030a 	.word	0x1714030a
 8007bb0:	0a          	.byte	0x0a
 8007bb1:	00          	.byte	0x00
 8007bb2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007bb6:	0721      	lsls	r1, r4, #28
 8007bb8:	d5c3      	bpl.n	8007b42 <_strtod_l+0x82>
 8007bba:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007bbe:	e7c0      	b.n	8007b42 <_strtod_l+0x82>
 8007bc0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007bc2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007bc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007bca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007bce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007bd2:	e7f0      	b.n	8007bb6 <_strtod_l+0xf6>
 8007bd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007d50 <_strtod_l+0x290>
 8007bd8:	e7ed      	b.n	8007bb6 <_strtod_l+0xf6>
 8007bda:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007bde:	f04f 38ff 	mov.w	r8, #4294967295
 8007be2:	e7e8      	b.n	8007bb6 <_strtod_l+0xf6>
 8007be4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	9219      	str	r2, [sp, #100]	; 0x64
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	2b30      	cmp	r3, #48	; 0x30
 8007bee:	d0f9      	beq.n	8007be4 <_strtod_l+0x124>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0a6      	beq.n	8007b42 <_strtod_l+0x82>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	9307      	str	r3, [sp, #28]
 8007bf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bfa:	220a      	movs	r2, #10
 8007bfc:	9308      	str	r3, [sp, #32]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	469b      	mov	fp, r3
 8007c02:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007c06:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c08:	7805      	ldrb	r5, [r0, #0]
 8007c0a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007c0e:	b2d9      	uxtb	r1, r3
 8007c10:	2909      	cmp	r1, #9
 8007c12:	d927      	bls.n	8007c64 <_strtod_l+0x1a4>
 8007c14:	4622      	mov	r2, r4
 8007c16:	4639      	mov	r1, r7
 8007c18:	f003 f987 	bl	800af2a <strncmp>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d033      	beq.n	8007c88 <_strtod_l+0x1c8>
 8007c20:	2000      	movs	r0, #0
 8007c22:	462a      	mov	r2, r5
 8007c24:	465c      	mov	r4, fp
 8007c26:	4603      	mov	r3, r0
 8007c28:	9004      	str	r0, [sp, #16]
 8007c2a:	2a65      	cmp	r2, #101	; 0x65
 8007c2c:	d001      	beq.n	8007c32 <_strtod_l+0x172>
 8007c2e:	2a45      	cmp	r2, #69	; 0x45
 8007c30:	d114      	bne.n	8007c5c <_strtod_l+0x19c>
 8007c32:	b91c      	cbnz	r4, 8007c3c <_strtod_l+0x17c>
 8007c34:	9a07      	ldr	r2, [sp, #28]
 8007c36:	4302      	orrs	r2, r0
 8007c38:	d09f      	beq.n	8007b7a <_strtod_l+0xba>
 8007c3a:	2400      	movs	r4, #0
 8007c3c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007c3e:	1c72      	adds	r2, r6, #1
 8007c40:	9219      	str	r2, [sp, #100]	; 0x64
 8007c42:	7872      	ldrb	r2, [r6, #1]
 8007c44:	2a2b      	cmp	r2, #43	; 0x2b
 8007c46:	d079      	beq.n	8007d3c <_strtod_l+0x27c>
 8007c48:	2a2d      	cmp	r2, #45	; 0x2d
 8007c4a:	f000 8083 	beq.w	8007d54 <_strtod_l+0x294>
 8007c4e:	2700      	movs	r7, #0
 8007c50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007c54:	2909      	cmp	r1, #9
 8007c56:	f240 8083 	bls.w	8007d60 <_strtod_l+0x2a0>
 8007c5a:	9619      	str	r6, [sp, #100]	; 0x64
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	e09f      	b.n	8007da0 <_strtod_l+0x2e0>
 8007c60:	2300      	movs	r3, #0
 8007c62:	e7c8      	b.n	8007bf6 <_strtod_l+0x136>
 8007c64:	f1bb 0f08 	cmp.w	fp, #8
 8007c68:	bfd5      	itete	le
 8007c6a:	9906      	ldrle	r1, [sp, #24]
 8007c6c:	9905      	ldrgt	r1, [sp, #20]
 8007c6e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c72:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c76:	f100 0001 	add.w	r0, r0, #1
 8007c7a:	bfd4      	ite	le
 8007c7c:	9306      	strle	r3, [sp, #24]
 8007c7e:	9305      	strgt	r3, [sp, #20]
 8007c80:	f10b 0b01 	add.w	fp, fp, #1
 8007c84:	9019      	str	r0, [sp, #100]	; 0x64
 8007c86:	e7be      	b.n	8007c06 <_strtod_l+0x146>
 8007c88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c8a:	191a      	adds	r2, r3, r4
 8007c8c:	9219      	str	r2, [sp, #100]	; 0x64
 8007c8e:	5d1a      	ldrb	r2, [r3, r4]
 8007c90:	f1bb 0f00 	cmp.w	fp, #0
 8007c94:	d036      	beq.n	8007d04 <_strtod_l+0x244>
 8007c96:	465c      	mov	r4, fp
 8007c98:	9004      	str	r0, [sp, #16]
 8007c9a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c9e:	2b09      	cmp	r3, #9
 8007ca0:	d912      	bls.n	8007cc8 <_strtod_l+0x208>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e7c1      	b.n	8007c2a <_strtod_l+0x16a>
 8007ca6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ca8:	3001      	adds	r0, #1
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	9219      	str	r2, [sp, #100]	; 0x64
 8007cae:	785a      	ldrb	r2, [r3, #1]
 8007cb0:	2a30      	cmp	r2, #48	; 0x30
 8007cb2:	d0f8      	beq.n	8007ca6 <_strtod_l+0x1e6>
 8007cb4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	f200 84d5 	bhi.w	8008668 <_strtod_l+0xba8>
 8007cbe:	9004      	str	r0, [sp, #16]
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cc6:	9308      	str	r3, [sp, #32]
 8007cc8:	3a30      	subs	r2, #48	; 0x30
 8007cca:	f100 0301 	add.w	r3, r0, #1
 8007cce:	d013      	beq.n	8007cf8 <_strtod_l+0x238>
 8007cd0:	9904      	ldr	r1, [sp, #16]
 8007cd2:	1905      	adds	r5, r0, r4
 8007cd4:	4419      	add	r1, r3
 8007cd6:	9104      	str	r1, [sp, #16]
 8007cd8:	4623      	mov	r3, r4
 8007cda:	210a      	movs	r1, #10
 8007cdc:	42ab      	cmp	r3, r5
 8007cde:	d113      	bne.n	8007d08 <_strtod_l+0x248>
 8007ce0:	1823      	adds	r3, r4, r0
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	f104 0401 	add.w	r4, r4, #1
 8007ce8:	4404      	add	r4, r0
 8007cea:	dc1b      	bgt.n	8007d24 <_strtod_l+0x264>
 8007cec:	230a      	movs	r3, #10
 8007cee:	9906      	ldr	r1, [sp, #24]
 8007cf0:	fb03 2301 	mla	r3, r3, r1, r2
 8007cf4:	9306      	str	r3, [sp, #24]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	1c51      	adds	r1, r2, #1
 8007cfe:	9119      	str	r1, [sp, #100]	; 0x64
 8007d00:	7852      	ldrb	r2, [r2, #1]
 8007d02:	e7ca      	b.n	8007c9a <_strtod_l+0x1da>
 8007d04:	4658      	mov	r0, fp
 8007d06:	e7d3      	b.n	8007cb0 <_strtod_l+0x1f0>
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	dc04      	bgt.n	8007d16 <_strtod_l+0x256>
 8007d0c:	9f06      	ldr	r7, [sp, #24]
 8007d0e:	434f      	muls	r7, r1
 8007d10:	9706      	str	r7, [sp, #24]
 8007d12:	3301      	adds	r3, #1
 8007d14:	e7e2      	b.n	8007cdc <_strtod_l+0x21c>
 8007d16:	1c5f      	adds	r7, r3, #1
 8007d18:	2f10      	cmp	r7, #16
 8007d1a:	bfde      	ittt	le
 8007d1c:	9f05      	ldrle	r7, [sp, #20]
 8007d1e:	434f      	mulle	r7, r1
 8007d20:	9705      	strle	r7, [sp, #20]
 8007d22:	e7f6      	b.n	8007d12 <_strtod_l+0x252>
 8007d24:	2c10      	cmp	r4, #16
 8007d26:	bfdf      	itttt	le
 8007d28:	230a      	movle	r3, #10
 8007d2a:	9905      	ldrle	r1, [sp, #20]
 8007d2c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007d30:	9305      	strle	r3, [sp, #20]
 8007d32:	e7e0      	b.n	8007cf6 <_strtod_l+0x236>
 8007d34:	2300      	movs	r3, #0
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e77b      	b.n	8007c34 <_strtod_l+0x174>
 8007d3c:	2700      	movs	r7, #0
 8007d3e:	1cb2      	adds	r2, r6, #2
 8007d40:	9219      	str	r2, [sp, #100]	; 0x64
 8007d42:	78b2      	ldrb	r2, [r6, #2]
 8007d44:	e784      	b.n	8007c50 <_strtod_l+0x190>
 8007d46:	bf00      	nop
 8007d48:	0800d15c 	.word	0x0800d15c
 8007d4c:	0800ceb0 	.word	0x0800ceb0
 8007d50:	7ff00000 	.word	0x7ff00000
 8007d54:	2701      	movs	r7, #1
 8007d56:	e7f2      	b.n	8007d3e <_strtod_l+0x27e>
 8007d58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d5a:	1c51      	adds	r1, r2, #1
 8007d5c:	9119      	str	r1, [sp, #100]	; 0x64
 8007d5e:	7852      	ldrb	r2, [r2, #1]
 8007d60:	2a30      	cmp	r2, #48	; 0x30
 8007d62:	d0f9      	beq.n	8007d58 <_strtod_l+0x298>
 8007d64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d68:	2908      	cmp	r1, #8
 8007d6a:	f63f af77 	bhi.w	8007c5c <_strtod_l+0x19c>
 8007d6e:	f04f 0e0a 	mov.w	lr, #10
 8007d72:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007d76:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d78:	9209      	str	r2, [sp, #36]	; 0x24
 8007d7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d7c:	1c51      	adds	r1, r2, #1
 8007d7e:	9119      	str	r1, [sp, #100]	; 0x64
 8007d80:	7852      	ldrb	r2, [r2, #1]
 8007d82:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007d86:	2d09      	cmp	r5, #9
 8007d88:	d935      	bls.n	8007df6 <_strtod_l+0x336>
 8007d8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d8c:	1b49      	subs	r1, r1, r5
 8007d8e:	2908      	cmp	r1, #8
 8007d90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007d94:	dc02      	bgt.n	8007d9c <_strtod_l+0x2dc>
 8007d96:	4565      	cmp	r5, ip
 8007d98:	bfa8      	it	ge
 8007d9a:	4665      	movge	r5, ip
 8007d9c:	b107      	cbz	r7, 8007da0 <_strtod_l+0x2e0>
 8007d9e:	426d      	negs	r5, r5
 8007da0:	2c00      	cmp	r4, #0
 8007da2:	d14c      	bne.n	8007e3e <_strtod_l+0x37e>
 8007da4:	9907      	ldr	r1, [sp, #28]
 8007da6:	4301      	orrs	r1, r0
 8007da8:	f47f aecb 	bne.w	8007b42 <_strtod_l+0x82>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f47f aee4 	bne.w	8007b7a <_strtod_l+0xba>
 8007db2:	2a69      	cmp	r2, #105	; 0x69
 8007db4:	d026      	beq.n	8007e04 <_strtod_l+0x344>
 8007db6:	dc23      	bgt.n	8007e00 <_strtod_l+0x340>
 8007db8:	2a49      	cmp	r2, #73	; 0x49
 8007dba:	d023      	beq.n	8007e04 <_strtod_l+0x344>
 8007dbc:	2a4e      	cmp	r2, #78	; 0x4e
 8007dbe:	f47f aedc 	bne.w	8007b7a <_strtod_l+0xba>
 8007dc2:	499d      	ldr	r1, [pc, #628]	; (8008038 <_strtod_l+0x578>)
 8007dc4:	a819      	add	r0, sp, #100	; 0x64
 8007dc6:	f001 ff0d 	bl	8009be4 <__match>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	f43f aed5 	beq.w	8007b7a <_strtod_l+0xba>
 8007dd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b28      	cmp	r3, #40	; 0x28
 8007dd6:	d12c      	bne.n	8007e32 <_strtod_l+0x372>
 8007dd8:	4998      	ldr	r1, [pc, #608]	; (800803c <_strtod_l+0x57c>)
 8007dda:	aa1c      	add	r2, sp, #112	; 0x70
 8007ddc:	a819      	add	r0, sp, #100	; 0x64
 8007dde:	f001 ff15 	bl	8009c0c <__hexnan>
 8007de2:	2805      	cmp	r0, #5
 8007de4:	d125      	bne.n	8007e32 <_strtod_l+0x372>
 8007de6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007de8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007dec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007df0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007df4:	e6a5      	b.n	8007b42 <_strtod_l+0x82>
 8007df6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007dfa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007dfe:	e7bc      	b.n	8007d7a <_strtod_l+0x2ba>
 8007e00:	2a6e      	cmp	r2, #110	; 0x6e
 8007e02:	e7dc      	b.n	8007dbe <_strtod_l+0x2fe>
 8007e04:	498e      	ldr	r1, [pc, #568]	; (8008040 <_strtod_l+0x580>)
 8007e06:	a819      	add	r0, sp, #100	; 0x64
 8007e08:	f001 feec 	bl	8009be4 <__match>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f43f aeb4 	beq.w	8007b7a <_strtod_l+0xba>
 8007e12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e14:	498b      	ldr	r1, [pc, #556]	; (8008044 <_strtod_l+0x584>)
 8007e16:	3b01      	subs	r3, #1
 8007e18:	a819      	add	r0, sp, #100	; 0x64
 8007e1a:	9319      	str	r3, [sp, #100]	; 0x64
 8007e1c:	f001 fee2 	bl	8009be4 <__match>
 8007e20:	b910      	cbnz	r0, 8007e28 <_strtod_l+0x368>
 8007e22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e24:	3301      	adds	r3, #1
 8007e26:	9319      	str	r3, [sp, #100]	; 0x64
 8007e28:	f04f 0800 	mov.w	r8, #0
 8007e2c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008048 <_strtod_l+0x588>
 8007e30:	e687      	b.n	8007b42 <_strtod_l+0x82>
 8007e32:	4886      	ldr	r0, [pc, #536]	; (800804c <_strtod_l+0x58c>)
 8007e34:	f003 f820 	bl	800ae78 <nan>
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4689      	mov	r9, r1
 8007e3c:	e681      	b.n	8007b42 <_strtod_l+0x82>
 8007e3e:	9b04      	ldr	r3, [sp, #16]
 8007e40:	f1bb 0f00 	cmp.w	fp, #0
 8007e44:	bf08      	it	eq
 8007e46:	46a3      	moveq	fp, r4
 8007e48:	1aeb      	subs	r3, r5, r3
 8007e4a:	2c10      	cmp	r4, #16
 8007e4c:	9806      	ldr	r0, [sp, #24]
 8007e4e:	4626      	mov	r6, r4
 8007e50:	9307      	str	r3, [sp, #28]
 8007e52:	bfa8      	it	ge
 8007e54:	2610      	movge	r6, #16
 8007e56:	f7f8 fb31 	bl	80004bc <__aeabi_ui2d>
 8007e5a:	2c09      	cmp	r4, #9
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	4689      	mov	r9, r1
 8007e60:	dd13      	ble.n	8007e8a <_strtod_l+0x3ca>
 8007e62:	4b7b      	ldr	r3, [pc, #492]	; (8008050 <_strtod_l+0x590>)
 8007e64:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e68:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e6c:	f7f8 fba0 	bl	80005b0 <__aeabi_dmul>
 8007e70:	4680      	mov	r8, r0
 8007e72:	9805      	ldr	r0, [sp, #20]
 8007e74:	4689      	mov	r9, r1
 8007e76:	f7f8 fb21 	bl	80004bc <__aeabi_ui2d>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 f9df 	bl	8000244 <__adddf3>
 8007e86:	4680      	mov	r8, r0
 8007e88:	4689      	mov	r9, r1
 8007e8a:	2c0f      	cmp	r4, #15
 8007e8c:	dc36      	bgt.n	8007efc <_strtod_l+0x43c>
 8007e8e:	9b07      	ldr	r3, [sp, #28]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f43f ae56 	beq.w	8007b42 <_strtod_l+0x82>
 8007e96:	dd22      	ble.n	8007ede <_strtod_l+0x41e>
 8007e98:	2b16      	cmp	r3, #22
 8007e9a:	dc09      	bgt.n	8007eb0 <_strtod_l+0x3f0>
 8007e9c:	496c      	ldr	r1, [pc, #432]	; (8008050 <_strtod_l+0x590>)
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eaa:	f7f8 fb81 	bl	80005b0 <__aeabi_dmul>
 8007eae:	e7c3      	b.n	8007e38 <_strtod_l+0x378>
 8007eb0:	9a07      	ldr	r2, [sp, #28]
 8007eb2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	db20      	blt.n	8007efc <_strtod_l+0x43c>
 8007eba:	4d65      	ldr	r5, [pc, #404]	; (8008050 <_strtod_l+0x590>)
 8007ebc:	f1c4 040f 	rsb	r4, r4, #15
 8007ec0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eca:	464b      	mov	r3, r9
 8007ecc:	f7f8 fb70 	bl	80005b0 <__aeabi_dmul>
 8007ed0:	9b07      	ldr	r3, [sp, #28]
 8007ed2:	1b1c      	subs	r4, r3, r4
 8007ed4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007ed8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007edc:	e7e5      	b.n	8007eaa <_strtod_l+0x3ea>
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	3316      	adds	r3, #22
 8007ee2:	db0b      	blt.n	8007efc <_strtod_l+0x43c>
 8007ee4:	9b04      	ldr	r3, [sp, #16]
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	1b5d      	subs	r5, r3, r5
 8007eea:	4b59      	ldr	r3, [pc, #356]	; (8008050 <_strtod_l+0x590>)
 8007eec:	4649      	mov	r1, r9
 8007eee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007ef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ef6:	f7f8 fc85 	bl	8000804 <__aeabi_ddiv>
 8007efa:	e79d      	b.n	8007e38 <_strtod_l+0x378>
 8007efc:	9b07      	ldr	r3, [sp, #28]
 8007efe:	1ba6      	subs	r6, r4, r6
 8007f00:	441e      	add	r6, r3
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	dd74      	ble.n	8007ff0 <_strtod_l+0x530>
 8007f06:	f016 030f 	ands.w	r3, r6, #15
 8007f0a:	d00a      	beq.n	8007f22 <_strtod_l+0x462>
 8007f0c:	4950      	ldr	r1, [pc, #320]	; (8008050 <_strtod_l+0x590>)
 8007f0e:	4642      	mov	r2, r8
 8007f10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f18:	464b      	mov	r3, r9
 8007f1a:	f7f8 fb49 	bl	80005b0 <__aeabi_dmul>
 8007f1e:	4680      	mov	r8, r0
 8007f20:	4689      	mov	r9, r1
 8007f22:	f036 060f 	bics.w	r6, r6, #15
 8007f26:	d052      	beq.n	8007fce <_strtod_l+0x50e>
 8007f28:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007f2c:	dd27      	ble.n	8007f7e <_strtod_l+0x4be>
 8007f2e:	f04f 0b00 	mov.w	fp, #0
 8007f32:	f8cd b010 	str.w	fp, [sp, #16]
 8007f36:	f8cd b020 	str.w	fp, [sp, #32]
 8007f3a:	f8cd b018 	str.w	fp, [sp, #24]
 8007f3e:	2322      	movs	r3, #34	; 0x22
 8007f40:	f04f 0800 	mov.w	r8, #0
 8007f44:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008048 <_strtod_l+0x588>
 8007f48:	f8ca 3000 	str.w	r3, [sl]
 8007f4c:	9b08      	ldr	r3, [sp, #32]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f43f adf7 	beq.w	8007b42 <_strtod_l+0x82>
 8007f54:	4650      	mov	r0, sl
 8007f56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f58:	f001 ff72 	bl	8009e40 <_Bfree>
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	9906      	ldr	r1, [sp, #24]
 8007f60:	f001 ff6e 	bl	8009e40 <_Bfree>
 8007f64:	4650      	mov	r0, sl
 8007f66:	9904      	ldr	r1, [sp, #16]
 8007f68:	f001 ff6a 	bl	8009e40 <_Bfree>
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	9908      	ldr	r1, [sp, #32]
 8007f70:	f001 ff66 	bl	8009e40 <_Bfree>
 8007f74:	4659      	mov	r1, fp
 8007f76:	4650      	mov	r0, sl
 8007f78:	f001 ff62 	bl	8009e40 <_Bfree>
 8007f7c:	e5e1      	b.n	8007b42 <_strtod_l+0x82>
 8007f7e:	4b35      	ldr	r3, [pc, #212]	; (8008054 <_strtod_l+0x594>)
 8007f80:	4640      	mov	r0, r8
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	2300      	movs	r3, #0
 8007f86:	4649      	mov	r1, r9
 8007f88:	461f      	mov	r7, r3
 8007f8a:	1136      	asrs	r6, r6, #4
 8007f8c:	2e01      	cmp	r6, #1
 8007f8e:	dc21      	bgt.n	8007fd4 <_strtod_l+0x514>
 8007f90:	b10b      	cbz	r3, 8007f96 <_strtod_l+0x4d6>
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	4b2f      	ldr	r3, [pc, #188]	; (8008054 <_strtod_l+0x594>)
 8007f98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007f9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	f7f8 fb02 	bl	80005b0 <__aeabi_dmul>
 8007fac:	4b26      	ldr	r3, [pc, #152]	; (8008048 <_strtod_l+0x588>)
 8007fae:	460a      	mov	r2, r1
 8007fb0:	400b      	ands	r3, r1
 8007fb2:	4929      	ldr	r1, [pc, #164]	; (8008058 <_strtod_l+0x598>)
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	428b      	cmp	r3, r1
 8007fb8:	d8b9      	bhi.n	8007f2e <_strtod_l+0x46e>
 8007fba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007fbe:	428b      	cmp	r3, r1
 8007fc0:	bf86      	itte	hi
 8007fc2:	f04f 38ff 	movhi.w	r8, #4294967295
 8007fc6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800805c <_strtod_l+0x59c>
 8007fca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9305      	str	r3, [sp, #20]
 8007fd2:	e07f      	b.n	80080d4 <_strtod_l+0x614>
 8007fd4:	07f2      	lsls	r2, r6, #31
 8007fd6:	d505      	bpl.n	8007fe4 <_strtod_l+0x524>
 8007fd8:	9b05      	ldr	r3, [sp, #20]
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 fae7 	bl	80005b0 <__aeabi_dmul>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	9a05      	ldr	r2, [sp, #20]
 8007fe6:	3701      	adds	r7, #1
 8007fe8:	3208      	adds	r2, #8
 8007fea:	1076      	asrs	r6, r6, #1
 8007fec:	9205      	str	r2, [sp, #20]
 8007fee:	e7cd      	b.n	8007f8c <_strtod_l+0x4cc>
 8007ff0:	d0ed      	beq.n	8007fce <_strtod_l+0x50e>
 8007ff2:	4276      	negs	r6, r6
 8007ff4:	f016 020f 	ands.w	r2, r6, #15
 8007ff8:	d00a      	beq.n	8008010 <_strtod_l+0x550>
 8007ffa:	4b15      	ldr	r3, [pc, #84]	; (8008050 <_strtod_l+0x590>)
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008002:	4649      	mov	r1, r9
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f7f8 fbfc 	bl	8000804 <__aeabi_ddiv>
 800800c:	4680      	mov	r8, r0
 800800e:	4689      	mov	r9, r1
 8008010:	1136      	asrs	r6, r6, #4
 8008012:	d0dc      	beq.n	8007fce <_strtod_l+0x50e>
 8008014:	2e1f      	cmp	r6, #31
 8008016:	dd23      	ble.n	8008060 <_strtod_l+0x5a0>
 8008018:	f04f 0b00 	mov.w	fp, #0
 800801c:	f8cd b010 	str.w	fp, [sp, #16]
 8008020:	f8cd b020 	str.w	fp, [sp, #32]
 8008024:	f8cd b018 	str.w	fp, [sp, #24]
 8008028:	2322      	movs	r3, #34	; 0x22
 800802a:	f04f 0800 	mov.w	r8, #0
 800802e:	f04f 0900 	mov.w	r9, #0
 8008032:	f8ca 3000 	str.w	r3, [sl]
 8008036:	e789      	b.n	8007f4c <_strtod_l+0x48c>
 8008038:	0800ce81 	.word	0x0800ce81
 800803c:	0800cec4 	.word	0x0800cec4
 8008040:	0800ce79 	.word	0x0800ce79
 8008044:	0800d004 	.word	0x0800d004
 8008048:	7ff00000 	.word	0x7ff00000
 800804c:	0800d318 	.word	0x0800d318
 8008050:	0800d1f8 	.word	0x0800d1f8
 8008054:	0800d1d0 	.word	0x0800d1d0
 8008058:	7ca00000 	.word	0x7ca00000
 800805c:	7fefffff 	.word	0x7fefffff
 8008060:	f016 0310 	ands.w	r3, r6, #16
 8008064:	bf18      	it	ne
 8008066:	236a      	movne	r3, #106	; 0x6a
 8008068:	4640      	mov	r0, r8
 800806a:	9305      	str	r3, [sp, #20]
 800806c:	4649      	mov	r1, r9
 800806e:	2300      	movs	r3, #0
 8008070:	4fb0      	ldr	r7, [pc, #704]	; (8008334 <_strtod_l+0x874>)
 8008072:	07f2      	lsls	r2, r6, #31
 8008074:	d504      	bpl.n	8008080 <_strtod_l+0x5c0>
 8008076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800807a:	f7f8 fa99 	bl	80005b0 <__aeabi_dmul>
 800807e:	2301      	movs	r3, #1
 8008080:	1076      	asrs	r6, r6, #1
 8008082:	f107 0708 	add.w	r7, r7, #8
 8008086:	d1f4      	bne.n	8008072 <_strtod_l+0x5b2>
 8008088:	b10b      	cbz	r3, 800808e <_strtod_l+0x5ce>
 800808a:	4680      	mov	r8, r0
 800808c:	4689      	mov	r9, r1
 800808e:	9b05      	ldr	r3, [sp, #20]
 8008090:	b1c3      	cbz	r3, 80080c4 <_strtod_l+0x604>
 8008092:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008096:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800809a:	2b00      	cmp	r3, #0
 800809c:	4649      	mov	r1, r9
 800809e:	dd11      	ble.n	80080c4 <_strtod_l+0x604>
 80080a0:	2b1f      	cmp	r3, #31
 80080a2:	f340 8127 	ble.w	80082f4 <_strtod_l+0x834>
 80080a6:	2b34      	cmp	r3, #52	; 0x34
 80080a8:	bfd8      	it	le
 80080aa:	f04f 33ff 	movle.w	r3, #4294967295
 80080ae:	f04f 0800 	mov.w	r8, #0
 80080b2:	bfcf      	iteee	gt
 80080b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80080b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80080bc:	fa03 f202 	lslle.w	r2, r3, r2
 80080c0:	ea02 0901 	andle.w	r9, r2, r1
 80080c4:	2200      	movs	r2, #0
 80080c6:	2300      	movs	r3, #0
 80080c8:	4640      	mov	r0, r8
 80080ca:	4649      	mov	r1, r9
 80080cc:	f7f8 fcd8 	bl	8000a80 <__aeabi_dcmpeq>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d1a1      	bne.n	8008018 <_strtod_l+0x558>
 80080d4:	9b06      	ldr	r3, [sp, #24]
 80080d6:	465a      	mov	r2, fp
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	4650      	mov	r0, sl
 80080dc:	4623      	mov	r3, r4
 80080de:	9908      	ldr	r1, [sp, #32]
 80080e0:	f001 ff16 	bl	8009f10 <__s2b>
 80080e4:	9008      	str	r0, [sp, #32]
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f43f af21 	beq.w	8007f2e <_strtod_l+0x46e>
 80080ec:	9b04      	ldr	r3, [sp, #16]
 80080ee:	f04f 0b00 	mov.w	fp, #0
 80080f2:	1b5d      	subs	r5, r3, r5
 80080f4:	9b07      	ldr	r3, [sp, #28]
 80080f6:	f8cd b010 	str.w	fp, [sp, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bfb4      	ite	lt
 80080fe:	462b      	movlt	r3, r5
 8008100:	2300      	movge	r3, #0
 8008102:	930e      	str	r3, [sp, #56]	; 0x38
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800810a:	9314      	str	r3, [sp, #80]	; 0x50
 800810c:	9b08      	ldr	r3, [sp, #32]
 800810e:	4650      	mov	r0, sl
 8008110:	6859      	ldr	r1, [r3, #4]
 8008112:	f001 fe55 	bl	8009dc0 <_Balloc>
 8008116:	9006      	str	r0, [sp, #24]
 8008118:	2800      	cmp	r0, #0
 800811a:	f43f af10 	beq.w	8007f3e <_strtod_l+0x47e>
 800811e:	9b08      	ldr	r3, [sp, #32]
 8008120:	300c      	adds	r0, #12
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	f103 010c 	add.w	r1, r3, #12
 8008128:	3202      	adds	r2, #2
 800812a:	0092      	lsls	r2, r2, #2
 800812c:	f001 fe3a 	bl	8009da4 <memcpy>
 8008130:	ab1c      	add	r3, sp, #112	; 0x70
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	ab1b      	add	r3, sp, #108	; 0x6c
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	4642      	mov	r2, r8
 800813a:	464b      	mov	r3, r9
 800813c:	4650      	mov	r0, sl
 800813e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008142:	f002 fa27 	bl	800a594 <__d2b>
 8008146:	901a      	str	r0, [sp, #104]	; 0x68
 8008148:	2800      	cmp	r0, #0
 800814a:	f43f aef8 	beq.w	8007f3e <_strtod_l+0x47e>
 800814e:	2101      	movs	r1, #1
 8008150:	4650      	mov	r0, sl
 8008152:	f001 ff75 	bl	800a040 <__i2b>
 8008156:	4603      	mov	r3, r0
 8008158:	9004      	str	r0, [sp, #16]
 800815a:	2800      	cmp	r0, #0
 800815c:	f43f aeef 	beq.w	8007f3e <_strtod_l+0x47e>
 8008160:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008162:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008164:	2d00      	cmp	r5, #0
 8008166:	bfab      	itete	ge
 8008168:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800816a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800816c:	18ee      	addge	r6, r5, r3
 800816e:	1b5c      	sublt	r4, r3, r5
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	bfa8      	it	ge
 8008174:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008176:	eba5 0503 	sub.w	r5, r5, r3
 800817a:	4415      	add	r5, r2
 800817c:	4b6e      	ldr	r3, [pc, #440]	; (8008338 <_strtod_l+0x878>)
 800817e:	f105 35ff 	add.w	r5, r5, #4294967295
 8008182:	bfb8      	it	lt
 8008184:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008186:	429d      	cmp	r5, r3
 8008188:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800818c:	f280 80c4 	bge.w	8008318 <_strtod_l+0x858>
 8008190:	1b5b      	subs	r3, r3, r5
 8008192:	2b1f      	cmp	r3, #31
 8008194:	f04f 0701 	mov.w	r7, #1
 8008198:	eba2 0203 	sub.w	r2, r2, r3
 800819c:	f300 80b1 	bgt.w	8008302 <_strtod_l+0x842>
 80081a0:	2500      	movs	r5, #0
 80081a2:	fa07 f303 	lsl.w	r3, r7, r3
 80081a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081a8:	18b7      	adds	r7, r6, r2
 80081aa:	9b05      	ldr	r3, [sp, #20]
 80081ac:	42be      	cmp	r6, r7
 80081ae:	4414      	add	r4, r2
 80081b0:	441c      	add	r4, r3
 80081b2:	4633      	mov	r3, r6
 80081b4:	bfa8      	it	ge
 80081b6:	463b      	movge	r3, r7
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	bfa8      	it	ge
 80081bc:	4623      	movge	r3, r4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	bfc2      	ittt	gt
 80081c2:	1aff      	subgt	r7, r7, r3
 80081c4:	1ae4      	subgt	r4, r4, r3
 80081c6:	1af6      	subgt	r6, r6, r3
 80081c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dd17      	ble.n	80081fe <_strtod_l+0x73e>
 80081ce:	461a      	mov	r2, r3
 80081d0:	4650      	mov	r0, sl
 80081d2:	9904      	ldr	r1, [sp, #16]
 80081d4:	f001 fff2 	bl	800a1bc <__pow5mult>
 80081d8:	9004      	str	r0, [sp, #16]
 80081da:	2800      	cmp	r0, #0
 80081dc:	f43f aeaf 	beq.w	8007f3e <_strtod_l+0x47e>
 80081e0:	4601      	mov	r1, r0
 80081e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80081e4:	4650      	mov	r0, sl
 80081e6:	f001 ff41 	bl	800a06c <__multiply>
 80081ea:	9009      	str	r0, [sp, #36]	; 0x24
 80081ec:	2800      	cmp	r0, #0
 80081ee:	f43f aea6 	beq.w	8007f3e <_strtod_l+0x47e>
 80081f2:	4650      	mov	r0, sl
 80081f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081f6:	f001 fe23 	bl	8009e40 <_Bfree>
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	931a      	str	r3, [sp, #104]	; 0x68
 80081fe:	2f00      	cmp	r7, #0
 8008200:	f300 808e 	bgt.w	8008320 <_strtod_l+0x860>
 8008204:	9b07      	ldr	r3, [sp, #28]
 8008206:	2b00      	cmp	r3, #0
 8008208:	dd08      	ble.n	800821c <_strtod_l+0x75c>
 800820a:	4650      	mov	r0, sl
 800820c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800820e:	9906      	ldr	r1, [sp, #24]
 8008210:	f001 ffd4 	bl	800a1bc <__pow5mult>
 8008214:	9006      	str	r0, [sp, #24]
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f ae91 	beq.w	8007f3e <_strtod_l+0x47e>
 800821c:	2c00      	cmp	r4, #0
 800821e:	dd08      	ble.n	8008232 <_strtod_l+0x772>
 8008220:	4622      	mov	r2, r4
 8008222:	4650      	mov	r0, sl
 8008224:	9906      	ldr	r1, [sp, #24]
 8008226:	f002 f823 	bl	800a270 <__lshift>
 800822a:	9006      	str	r0, [sp, #24]
 800822c:	2800      	cmp	r0, #0
 800822e:	f43f ae86 	beq.w	8007f3e <_strtod_l+0x47e>
 8008232:	2e00      	cmp	r6, #0
 8008234:	dd08      	ble.n	8008248 <_strtod_l+0x788>
 8008236:	4632      	mov	r2, r6
 8008238:	4650      	mov	r0, sl
 800823a:	9904      	ldr	r1, [sp, #16]
 800823c:	f002 f818 	bl	800a270 <__lshift>
 8008240:	9004      	str	r0, [sp, #16]
 8008242:	2800      	cmp	r0, #0
 8008244:	f43f ae7b 	beq.w	8007f3e <_strtod_l+0x47e>
 8008248:	4650      	mov	r0, sl
 800824a:	9a06      	ldr	r2, [sp, #24]
 800824c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800824e:	f002 f89b 	bl	800a388 <__mdiff>
 8008252:	4683      	mov	fp, r0
 8008254:	2800      	cmp	r0, #0
 8008256:	f43f ae72 	beq.w	8007f3e <_strtod_l+0x47e>
 800825a:	2400      	movs	r4, #0
 800825c:	68c3      	ldr	r3, [r0, #12]
 800825e:	9904      	ldr	r1, [sp, #16]
 8008260:	60c4      	str	r4, [r0, #12]
 8008262:	930b      	str	r3, [sp, #44]	; 0x2c
 8008264:	f002 f874 	bl	800a350 <__mcmp>
 8008268:	42a0      	cmp	r0, r4
 800826a:	da6b      	bge.n	8008344 <_strtod_l+0x884>
 800826c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800826e:	ea53 0308 	orrs.w	r3, r3, r8
 8008272:	f040 8091 	bne.w	8008398 <_strtod_l+0x8d8>
 8008276:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800827a:	2b00      	cmp	r3, #0
 800827c:	f040 808c 	bne.w	8008398 <_strtod_l+0x8d8>
 8008280:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008284:	0d1b      	lsrs	r3, r3, #20
 8008286:	051b      	lsls	r3, r3, #20
 8008288:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800828c:	f240 8084 	bls.w	8008398 <_strtod_l+0x8d8>
 8008290:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008294:	b91b      	cbnz	r3, 800829e <_strtod_l+0x7de>
 8008296:	f8db 3010 	ldr.w	r3, [fp, #16]
 800829a:	2b01      	cmp	r3, #1
 800829c:	dd7c      	ble.n	8008398 <_strtod_l+0x8d8>
 800829e:	4659      	mov	r1, fp
 80082a0:	2201      	movs	r2, #1
 80082a2:	4650      	mov	r0, sl
 80082a4:	f001 ffe4 	bl	800a270 <__lshift>
 80082a8:	9904      	ldr	r1, [sp, #16]
 80082aa:	4683      	mov	fp, r0
 80082ac:	f002 f850 	bl	800a350 <__mcmp>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	dd71      	ble.n	8008398 <_strtod_l+0x8d8>
 80082b4:	9905      	ldr	r1, [sp, #20]
 80082b6:	464b      	mov	r3, r9
 80082b8:	4a20      	ldr	r2, [pc, #128]	; (800833c <_strtod_l+0x87c>)
 80082ba:	2900      	cmp	r1, #0
 80082bc:	f000 808c 	beq.w	80083d8 <_strtod_l+0x918>
 80082c0:	ea02 0109 	and.w	r1, r2, r9
 80082c4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082c8:	f300 8086 	bgt.w	80083d8 <_strtod_l+0x918>
 80082cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082d0:	f77f aeaa 	ble.w	8008028 <_strtod_l+0x568>
 80082d4:	4640      	mov	r0, r8
 80082d6:	4649      	mov	r1, r9
 80082d8:	4b19      	ldr	r3, [pc, #100]	; (8008340 <_strtod_l+0x880>)
 80082da:	2200      	movs	r2, #0
 80082dc:	f7f8 f968 	bl	80005b0 <__aeabi_dmul>
 80082e0:	460b      	mov	r3, r1
 80082e2:	4303      	orrs	r3, r0
 80082e4:	bf08      	it	eq
 80082e6:	2322      	moveq	r3, #34	; 0x22
 80082e8:	4680      	mov	r8, r0
 80082ea:	4689      	mov	r9, r1
 80082ec:	bf08      	it	eq
 80082ee:	f8ca 3000 	streq.w	r3, [sl]
 80082f2:	e62f      	b.n	8007f54 <_strtod_l+0x494>
 80082f4:	f04f 32ff 	mov.w	r2, #4294967295
 80082f8:	fa02 f303 	lsl.w	r3, r2, r3
 80082fc:	ea03 0808 	and.w	r8, r3, r8
 8008300:	e6e0      	b.n	80080c4 <_strtod_l+0x604>
 8008302:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008306:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800830a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800830e:	35e2      	adds	r5, #226	; 0xe2
 8008310:	fa07 f505 	lsl.w	r5, r7, r5
 8008314:	970f      	str	r7, [sp, #60]	; 0x3c
 8008316:	e747      	b.n	80081a8 <_strtod_l+0x6e8>
 8008318:	2301      	movs	r3, #1
 800831a:	2500      	movs	r5, #0
 800831c:	930f      	str	r3, [sp, #60]	; 0x3c
 800831e:	e743      	b.n	80081a8 <_strtod_l+0x6e8>
 8008320:	463a      	mov	r2, r7
 8008322:	4650      	mov	r0, sl
 8008324:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008326:	f001 ffa3 	bl	800a270 <__lshift>
 800832a:	901a      	str	r0, [sp, #104]	; 0x68
 800832c:	2800      	cmp	r0, #0
 800832e:	f47f af69 	bne.w	8008204 <_strtod_l+0x744>
 8008332:	e604      	b.n	8007f3e <_strtod_l+0x47e>
 8008334:	0800ced8 	.word	0x0800ced8
 8008338:	fffffc02 	.word	0xfffffc02
 800833c:	7ff00000 	.word	0x7ff00000
 8008340:	39500000 	.word	0x39500000
 8008344:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008348:	d165      	bne.n	8008416 <_strtod_l+0x956>
 800834a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800834c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008350:	b35a      	cbz	r2, 80083aa <_strtod_l+0x8ea>
 8008352:	4a99      	ldr	r2, [pc, #612]	; (80085b8 <_strtod_l+0xaf8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d12b      	bne.n	80083b0 <_strtod_l+0x8f0>
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	4641      	mov	r1, r8
 800835c:	b303      	cbz	r3, 80083a0 <_strtod_l+0x8e0>
 800835e:	464a      	mov	r2, r9
 8008360:	4b96      	ldr	r3, [pc, #600]	; (80085bc <_strtod_l+0xafc>)
 8008362:	4013      	ands	r3, r2
 8008364:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008368:	f04f 32ff 	mov.w	r2, #4294967295
 800836c:	d81b      	bhi.n	80083a6 <_strtod_l+0x8e6>
 800836e:	0d1b      	lsrs	r3, r3, #20
 8008370:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	4299      	cmp	r1, r3
 800837a:	d119      	bne.n	80083b0 <_strtod_l+0x8f0>
 800837c:	4b90      	ldr	r3, [pc, #576]	; (80085c0 <_strtod_l+0xb00>)
 800837e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008380:	429a      	cmp	r2, r3
 8008382:	d102      	bne.n	800838a <_strtod_l+0x8ca>
 8008384:	3101      	adds	r1, #1
 8008386:	f43f adda 	beq.w	8007f3e <_strtod_l+0x47e>
 800838a:	f04f 0800 	mov.w	r8, #0
 800838e:	4b8b      	ldr	r3, [pc, #556]	; (80085bc <_strtod_l+0xafc>)
 8008390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008392:	401a      	ands	r2, r3
 8008394:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008398:	9b05      	ldr	r3, [sp, #20]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d19a      	bne.n	80082d4 <_strtod_l+0x814>
 800839e:	e5d9      	b.n	8007f54 <_strtod_l+0x494>
 80083a0:	f04f 33ff 	mov.w	r3, #4294967295
 80083a4:	e7e8      	b.n	8008378 <_strtod_l+0x8b8>
 80083a6:	4613      	mov	r3, r2
 80083a8:	e7e6      	b.n	8008378 <_strtod_l+0x8b8>
 80083aa:	ea53 0308 	orrs.w	r3, r3, r8
 80083ae:	d081      	beq.n	80082b4 <_strtod_l+0x7f4>
 80083b0:	b1e5      	cbz	r5, 80083ec <_strtod_l+0x92c>
 80083b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b4:	421d      	tst	r5, r3
 80083b6:	d0ef      	beq.n	8008398 <_strtod_l+0x8d8>
 80083b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ba:	4640      	mov	r0, r8
 80083bc:	4649      	mov	r1, r9
 80083be:	9a05      	ldr	r2, [sp, #20]
 80083c0:	b1c3      	cbz	r3, 80083f4 <_strtod_l+0x934>
 80083c2:	f7ff fb5b 	bl	8007a7c <sulp>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083ce:	f7f7 ff39 	bl	8000244 <__adddf3>
 80083d2:	4680      	mov	r8, r0
 80083d4:	4689      	mov	r9, r1
 80083d6:	e7df      	b.n	8008398 <_strtod_l+0x8d8>
 80083d8:	4013      	ands	r3, r2
 80083da:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083de:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80083e2:	f04f 38ff 	mov.w	r8, #4294967295
 80083e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80083ea:	e7d5      	b.n	8008398 <_strtod_l+0x8d8>
 80083ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ee:	ea13 0f08 	tst.w	r3, r8
 80083f2:	e7e0      	b.n	80083b6 <_strtod_l+0x8f6>
 80083f4:	f7ff fb42 	bl	8007a7c <sulp>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008400:	f7f7 ff1e 	bl	8000240 <__aeabi_dsub>
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4680      	mov	r8, r0
 800840a:	4689      	mov	r9, r1
 800840c:	f7f8 fb38 	bl	8000a80 <__aeabi_dcmpeq>
 8008410:	2800      	cmp	r0, #0
 8008412:	d0c1      	beq.n	8008398 <_strtod_l+0x8d8>
 8008414:	e608      	b.n	8008028 <_strtod_l+0x568>
 8008416:	4658      	mov	r0, fp
 8008418:	9904      	ldr	r1, [sp, #16]
 800841a:	f002 f917 	bl	800a64c <__ratio>
 800841e:	2200      	movs	r2, #0
 8008420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008424:	4606      	mov	r6, r0
 8008426:	460f      	mov	r7, r1
 8008428:	f7f8 fb3e 	bl	8000aa8 <__aeabi_dcmple>
 800842c:	2800      	cmp	r0, #0
 800842e:	d070      	beq.n	8008512 <_strtod_l+0xa52>
 8008430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d042      	beq.n	80084bc <_strtod_l+0x9fc>
 8008436:	2600      	movs	r6, #0
 8008438:	4f62      	ldr	r7, [pc, #392]	; (80085c4 <_strtod_l+0xb04>)
 800843a:	4d62      	ldr	r5, [pc, #392]	; (80085c4 <_strtod_l+0xb04>)
 800843c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008442:	0d1b      	lsrs	r3, r3, #20
 8008444:	051b      	lsls	r3, r3, #20
 8008446:	930f      	str	r3, [sp, #60]	; 0x3c
 8008448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800844a:	4b5f      	ldr	r3, [pc, #380]	; (80085c8 <_strtod_l+0xb08>)
 800844c:	429a      	cmp	r2, r3
 800844e:	f040 80c3 	bne.w	80085d8 <_strtod_l+0xb18>
 8008452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008454:	4640      	mov	r0, r8
 8008456:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800845a:	4649      	mov	r1, r9
 800845c:	f002 f820 	bl	800a4a0 <__ulp>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4630      	mov	r0, r6
 8008466:	4639      	mov	r1, r7
 8008468:	f7f8 f8a2 	bl	80005b0 <__aeabi_dmul>
 800846c:	4642      	mov	r2, r8
 800846e:	464b      	mov	r3, r9
 8008470:	f7f7 fee8 	bl	8000244 <__adddf3>
 8008474:	460b      	mov	r3, r1
 8008476:	4951      	ldr	r1, [pc, #324]	; (80085bc <_strtod_l+0xafc>)
 8008478:	4a54      	ldr	r2, [pc, #336]	; (80085cc <_strtod_l+0xb0c>)
 800847a:	4019      	ands	r1, r3
 800847c:	4291      	cmp	r1, r2
 800847e:	4680      	mov	r8, r0
 8008480:	d95d      	bls.n	800853e <_strtod_l+0xa7e>
 8008482:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008484:	4b4e      	ldr	r3, [pc, #312]	; (80085c0 <_strtod_l+0xb00>)
 8008486:	429a      	cmp	r2, r3
 8008488:	d103      	bne.n	8008492 <_strtod_l+0x9d2>
 800848a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800848c:	3301      	adds	r3, #1
 800848e:	f43f ad56 	beq.w	8007f3e <_strtod_l+0x47e>
 8008492:	f04f 38ff 	mov.w	r8, #4294967295
 8008496:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80085c0 <_strtod_l+0xb00>
 800849a:	4650      	mov	r0, sl
 800849c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800849e:	f001 fccf 	bl	8009e40 <_Bfree>
 80084a2:	4650      	mov	r0, sl
 80084a4:	9906      	ldr	r1, [sp, #24]
 80084a6:	f001 fccb 	bl	8009e40 <_Bfree>
 80084aa:	4650      	mov	r0, sl
 80084ac:	9904      	ldr	r1, [sp, #16]
 80084ae:	f001 fcc7 	bl	8009e40 <_Bfree>
 80084b2:	4659      	mov	r1, fp
 80084b4:	4650      	mov	r0, sl
 80084b6:	f001 fcc3 	bl	8009e40 <_Bfree>
 80084ba:	e627      	b.n	800810c <_strtod_l+0x64c>
 80084bc:	f1b8 0f00 	cmp.w	r8, #0
 80084c0:	d119      	bne.n	80084f6 <_strtod_l+0xa36>
 80084c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084c8:	b9e3      	cbnz	r3, 8008504 <_strtod_l+0xa44>
 80084ca:	2200      	movs	r2, #0
 80084cc:	4630      	mov	r0, r6
 80084ce:	4639      	mov	r1, r7
 80084d0:	4b3c      	ldr	r3, [pc, #240]	; (80085c4 <_strtod_l+0xb04>)
 80084d2:	f7f8 fadf 	bl	8000a94 <__aeabi_dcmplt>
 80084d6:	b9c8      	cbnz	r0, 800850c <_strtod_l+0xa4c>
 80084d8:	2200      	movs	r2, #0
 80084da:	4630      	mov	r0, r6
 80084dc:	4639      	mov	r1, r7
 80084de:	4b3c      	ldr	r3, [pc, #240]	; (80085d0 <_strtod_l+0xb10>)
 80084e0:	f7f8 f866 	bl	80005b0 <__aeabi_dmul>
 80084e4:	4604      	mov	r4, r0
 80084e6:	460d      	mov	r5, r1
 80084e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80084ec:	9416      	str	r4, [sp, #88]	; 0x58
 80084ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80084f0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80084f4:	e7a2      	b.n	800843c <_strtod_l+0x97c>
 80084f6:	f1b8 0f01 	cmp.w	r8, #1
 80084fa:	d103      	bne.n	8008504 <_strtod_l+0xa44>
 80084fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f43f ad92 	beq.w	8008028 <_strtod_l+0x568>
 8008504:	2600      	movs	r6, #0
 8008506:	2400      	movs	r4, #0
 8008508:	4f32      	ldr	r7, [pc, #200]	; (80085d4 <_strtod_l+0xb14>)
 800850a:	e796      	b.n	800843a <_strtod_l+0x97a>
 800850c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800850e:	4d30      	ldr	r5, [pc, #192]	; (80085d0 <_strtod_l+0xb10>)
 8008510:	e7ea      	b.n	80084e8 <_strtod_l+0xa28>
 8008512:	4b2f      	ldr	r3, [pc, #188]	; (80085d0 <_strtod_l+0xb10>)
 8008514:	2200      	movs	r2, #0
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f8 f849 	bl	80005b0 <__aeabi_dmul>
 800851e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008520:	4604      	mov	r4, r0
 8008522:	460d      	mov	r5, r1
 8008524:	b933      	cbnz	r3, 8008534 <_strtod_l+0xa74>
 8008526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800852a:	9010      	str	r0, [sp, #64]	; 0x40
 800852c:	9311      	str	r3, [sp, #68]	; 0x44
 800852e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008532:	e783      	b.n	800843c <_strtod_l+0x97c>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800853c:	e7f7      	b.n	800852e <_strtod_l+0xa6e>
 800853e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008542:	9b05      	ldr	r3, [sp, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1a8      	bne.n	800849a <_strtod_l+0x9da>
 8008548:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800854c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800854e:	0d1b      	lsrs	r3, r3, #20
 8008550:	051b      	lsls	r3, r3, #20
 8008552:	429a      	cmp	r2, r3
 8008554:	d1a1      	bne.n	800849a <_strtod_l+0x9da>
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f8 fb71 	bl	8000c40 <__aeabi_d2lz>
 800855e:	f7f7 fff9 	bl	8000554 <__aeabi_l2d>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f7 fe69 	bl	8000240 <__aeabi_dsub>
 800856e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008574:	ea43 0308 	orr.w	r3, r3, r8
 8008578:	4313      	orrs	r3, r2
 800857a:	4604      	mov	r4, r0
 800857c:	460d      	mov	r5, r1
 800857e:	d066      	beq.n	800864e <_strtod_l+0xb8e>
 8008580:	a309      	add	r3, pc, #36	; (adr r3, 80085a8 <_strtod_l+0xae8>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	f7f8 fa85 	bl	8000a94 <__aeabi_dcmplt>
 800858a:	2800      	cmp	r0, #0
 800858c:	f47f ace2 	bne.w	8007f54 <_strtod_l+0x494>
 8008590:	a307      	add	r3, pc, #28	; (adr r3, 80085b0 <_strtod_l+0xaf0>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f8 fa99 	bl	8000ad0 <__aeabi_dcmpgt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	f43f af7b 	beq.w	800849a <_strtod_l+0x9da>
 80085a4:	e4d6      	b.n	8007f54 <_strtod_l+0x494>
 80085a6:	bf00      	nop
 80085a8:	94a03595 	.word	0x94a03595
 80085ac:	3fdfffff 	.word	0x3fdfffff
 80085b0:	35afe535 	.word	0x35afe535
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	000fffff 	.word	0x000fffff
 80085bc:	7ff00000 	.word	0x7ff00000
 80085c0:	7fefffff 	.word	0x7fefffff
 80085c4:	3ff00000 	.word	0x3ff00000
 80085c8:	7fe00000 	.word	0x7fe00000
 80085cc:	7c9fffff 	.word	0x7c9fffff
 80085d0:	3fe00000 	.word	0x3fe00000
 80085d4:	bff00000 	.word	0xbff00000
 80085d8:	9b05      	ldr	r3, [sp, #20]
 80085da:	b313      	cbz	r3, 8008622 <_strtod_l+0xb62>
 80085dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085e2:	d81e      	bhi.n	8008622 <_strtod_l+0xb62>
 80085e4:	a326      	add	r3, pc, #152	; (adr r3, 8008680 <_strtod_l+0xbc0>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7f8 fa5b 	bl	8000aa8 <__aeabi_dcmple>
 80085f2:	b190      	cbz	r0, 800861a <_strtod_l+0xb5a>
 80085f4:	4629      	mov	r1, r5
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7f8 fab2 	bl	8000b60 <__aeabi_d2uiz>
 80085fc:	2801      	cmp	r0, #1
 80085fe:	bf38      	it	cc
 8008600:	2001      	movcc	r0, #1
 8008602:	f7f7 ff5b 	bl	80004bc <__aeabi_ui2d>
 8008606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	b9d3      	cbnz	r3, 8008644 <_strtod_l+0xb84>
 800860e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008612:	9012      	str	r0, [sp, #72]	; 0x48
 8008614:	9313      	str	r3, [sp, #76]	; 0x4c
 8008616:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800861a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800861c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008620:	1a9f      	subs	r7, r3, r2
 8008622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008626:	f001 ff3b 	bl	800a4a0 <__ulp>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4630      	mov	r0, r6
 8008630:	4639      	mov	r1, r7
 8008632:	f7f7 ffbd 	bl	80005b0 <__aeabi_dmul>
 8008636:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800863a:	f7f7 fe03 	bl	8000244 <__adddf3>
 800863e:	4680      	mov	r8, r0
 8008640:	4689      	mov	r9, r1
 8008642:	e77e      	b.n	8008542 <_strtod_l+0xa82>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800864c:	e7e3      	b.n	8008616 <_strtod_l+0xb56>
 800864e:	a30e      	add	r3, pc, #56	; (adr r3, 8008688 <_strtod_l+0xbc8>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f7f8 fa1e 	bl	8000a94 <__aeabi_dcmplt>
 8008658:	e7a1      	b.n	800859e <_strtod_l+0xade>
 800865a:	2300      	movs	r3, #0
 800865c:	930a      	str	r3, [sp, #40]	; 0x28
 800865e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008660:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	f7ff ba71 	b.w	8007b4a <_strtod_l+0x8a>
 8008668:	2a65      	cmp	r2, #101	; 0x65
 800866a:	f43f ab63 	beq.w	8007d34 <_strtod_l+0x274>
 800866e:	2a45      	cmp	r2, #69	; 0x45
 8008670:	f43f ab60 	beq.w	8007d34 <_strtod_l+0x274>
 8008674:	2301      	movs	r3, #1
 8008676:	f7ff bb95 	b.w	8007da4 <_strtod_l+0x2e4>
 800867a:	bf00      	nop
 800867c:	f3af 8000 	nop.w
 8008680:	ffc00000 	.word	0xffc00000
 8008684:	41dfffff 	.word	0x41dfffff
 8008688:	94a03595 	.word	0x94a03595
 800868c:	3fcfffff 	.word	0x3fcfffff

08008690 <_strtod_r>:
 8008690:	4b01      	ldr	r3, [pc, #4]	; (8008698 <_strtod_r+0x8>)
 8008692:	f7ff ba15 	b.w	8007ac0 <_strtod_l>
 8008696:	bf00      	nop
 8008698:	2000007c 	.word	0x2000007c

0800869c <_strtol_l.constprop.0>:
 800869c:	2b01      	cmp	r3, #1
 800869e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a2:	4680      	mov	r8, r0
 80086a4:	d001      	beq.n	80086aa <_strtol_l.constprop.0+0xe>
 80086a6:	2b24      	cmp	r3, #36	; 0x24
 80086a8:	d906      	bls.n	80086b8 <_strtol_l.constprop.0+0x1c>
 80086aa:	f7fe fb0b 	bl	8006cc4 <__errno>
 80086ae:	2316      	movs	r3, #22
 80086b0:	6003      	str	r3, [r0, #0]
 80086b2:	2000      	movs	r0, #0
 80086b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b8:	460d      	mov	r5, r1
 80086ba:	4f35      	ldr	r7, [pc, #212]	; (8008790 <_strtol_l.constprop.0+0xf4>)
 80086bc:	4628      	mov	r0, r5
 80086be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086c2:	5de6      	ldrb	r6, [r4, r7]
 80086c4:	f016 0608 	ands.w	r6, r6, #8
 80086c8:	d1f8      	bne.n	80086bc <_strtol_l.constprop.0+0x20>
 80086ca:	2c2d      	cmp	r4, #45	; 0x2d
 80086cc:	d12f      	bne.n	800872e <_strtol_l.constprop.0+0x92>
 80086ce:	2601      	movs	r6, #1
 80086d0:	782c      	ldrb	r4, [r5, #0]
 80086d2:	1c85      	adds	r5, r0, #2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d057      	beq.n	8008788 <_strtol_l.constprop.0+0xec>
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d109      	bne.n	80086f0 <_strtol_l.constprop.0+0x54>
 80086dc:	2c30      	cmp	r4, #48	; 0x30
 80086de:	d107      	bne.n	80086f0 <_strtol_l.constprop.0+0x54>
 80086e0:	7828      	ldrb	r0, [r5, #0]
 80086e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80086e6:	2858      	cmp	r0, #88	; 0x58
 80086e8:	d149      	bne.n	800877e <_strtol_l.constprop.0+0xe2>
 80086ea:	2310      	movs	r3, #16
 80086ec:	786c      	ldrb	r4, [r5, #1]
 80086ee:	3502      	adds	r5, #2
 80086f0:	2700      	movs	r7, #0
 80086f2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80086f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80086fa:	fbbe f9f3 	udiv	r9, lr, r3
 80086fe:	4638      	mov	r0, r7
 8008700:	fb03 ea19 	mls	sl, r3, r9, lr
 8008704:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008708:	f1bc 0f09 	cmp.w	ip, #9
 800870c:	d814      	bhi.n	8008738 <_strtol_l.constprop.0+0x9c>
 800870e:	4664      	mov	r4, ip
 8008710:	42a3      	cmp	r3, r4
 8008712:	dd22      	ble.n	800875a <_strtol_l.constprop.0+0xbe>
 8008714:	2f00      	cmp	r7, #0
 8008716:	db1d      	blt.n	8008754 <_strtol_l.constprop.0+0xb8>
 8008718:	4581      	cmp	r9, r0
 800871a:	d31b      	bcc.n	8008754 <_strtol_l.constprop.0+0xb8>
 800871c:	d101      	bne.n	8008722 <_strtol_l.constprop.0+0x86>
 800871e:	45a2      	cmp	sl, r4
 8008720:	db18      	blt.n	8008754 <_strtol_l.constprop.0+0xb8>
 8008722:	2701      	movs	r7, #1
 8008724:	fb00 4003 	mla	r0, r0, r3, r4
 8008728:	f815 4b01 	ldrb.w	r4, [r5], #1
 800872c:	e7ea      	b.n	8008704 <_strtol_l.constprop.0+0x68>
 800872e:	2c2b      	cmp	r4, #43	; 0x2b
 8008730:	bf04      	itt	eq
 8008732:	782c      	ldrbeq	r4, [r5, #0]
 8008734:	1c85      	addeq	r5, r0, #2
 8008736:	e7cd      	b.n	80086d4 <_strtol_l.constprop.0+0x38>
 8008738:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800873c:	f1bc 0f19 	cmp.w	ip, #25
 8008740:	d801      	bhi.n	8008746 <_strtol_l.constprop.0+0xaa>
 8008742:	3c37      	subs	r4, #55	; 0x37
 8008744:	e7e4      	b.n	8008710 <_strtol_l.constprop.0+0x74>
 8008746:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800874a:	f1bc 0f19 	cmp.w	ip, #25
 800874e:	d804      	bhi.n	800875a <_strtol_l.constprop.0+0xbe>
 8008750:	3c57      	subs	r4, #87	; 0x57
 8008752:	e7dd      	b.n	8008710 <_strtol_l.constprop.0+0x74>
 8008754:	f04f 37ff 	mov.w	r7, #4294967295
 8008758:	e7e6      	b.n	8008728 <_strtol_l.constprop.0+0x8c>
 800875a:	2f00      	cmp	r7, #0
 800875c:	da07      	bge.n	800876e <_strtol_l.constprop.0+0xd2>
 800875e:	2322      	movs	r3, #34	; 0x22
 8008760:	4670      	mov	r0, lr
 8008762:	f8c8 3000 	str.w	r3, [r8]
 8008766:	2a00      	cmp	r2, #0
 8008768:	d0a4      	beq.n	80086b4 <_strtol_l.constprop.0+0x18>
 800876a:	1e69      	subs	r1, r5, #1
 800876c:	e005      	b.n	800877a <_strtol_l.constprop.0+0xde>
 800876e:	b106      	cbz	r6, 8008772 <_strtol_l.constprop.0+0xd6>
 8008770:	4240      	negs	r0, r0
 8008772:	2a00      	cmp	r2, #0
 8008774:	d09e      	beq.n	80086b4 <_strtol_l.constprop.0+0x18>
 8008776:	2f00      	cmp	r7, #0
 8008778:	d1f7      	bne.n	800876a <_strtol_l.constprop.0+0xce>
 800877a:	6011      	str	r1, [r2, #0]
 800877c:	e79a      	b.n	80086b4 <_strtol_l.constprop.0+0x18>
 800877e:	2430      	movs	r4, #48	; 0x30
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1b5      	bne.n	80086f0 <_strtol_l.constprop.0+0x54>
 8008784:	2308      	movs	r3, #8
 8008786:	e7b3      	b.n	80086f0 <_strtol_l.constprop.0+0x54>
 8008788:	2c30      	cmp	r4, #48	; 0x30
 800878a:	d0a9      	beq.n	80086e0 <_strtol_l.constprop.0+0x44>
 800878c:	230a      	movs	r3, #10
 800878e:	e7af      	b.n	80086f0 <_strtol_l.constprop.0+0x54>
 8008790:	0800cf01 	.word	0x0800cf01

08008794 <_strtol_r>:
 8008794:	f7ff bf82 	b.w	800869c <_strtol_l.constprop.0>

08008798 <quorem>:
 8008798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	6903      	ldr	r3, [r0, #16]
 800879e:	690c      	ldr	r4, [r1, #16]
 80087a0:	4607      	mov	r7, r0
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	f2c0 8082 	blt.w	80088ac <quorem+0x114>
 80087a8:	3c01      	subs	r4, #1
 80087aa:	f100 0514 	add.w	r5, r0, #20
 80087ae:	f101 0814 	add.w	r8, r1, #20
 80087b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087b6:	9301      	str	r3, [sp, #4]
 80087b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087c0:	3301      	adds	r3, #1
 80087c2:	429a      	cmp	r2, r3
 80087c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80087c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087d0:	d331      	bcc.n	8008836 <quorem+0x9e>
 80087d2:	f04f 0e00 	mov.w	lr, #0
 80087d6:	4640      	mov	r0, r8
 80087d8:	46ac      	mov	ip, r5
 80087da:	46f2      	mov	sl, lr
 80087dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80087e0:	b293      	uxth	r3, r2
 80087e2:	fb06 e303 	mla	r3, r6, r3, lr
 80087e6:	0c12      	lsrs	r2, r2, #16
 80087e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	fb06 e202 	mla	r2, r6, r2, lr
 80087f2:	ebaa 0303 	sub.w	r3, sl, r3
 80087f6:	f8dc a000 	ldr.w	sl, [ip]
 80087fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087fe:	fa1f fa8a 	uxth.w	sl, sl
 8008802:	4453      	add	r3, sl
 8008804:	f8dc a000 	ldr.w	sl, [ip]
 8008808:	b292      	uxth	r2, r2
 800880a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800880e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008812:	b29b      	uxth	r3, r3
 8008814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008818:	4581      	cmp	r9, r0
 800881a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800881e:	f84c 3b04 	str.w	r3, [ip], #4
 8008822:	d2db      	bcs.n	80087dc <quorem+0x44>
 8008824:	f855 300b 	ldr.w	r3, [r5, fp]
 8008828:	b92b      	cbnz	r3, 8008836 <quorem+0x9e>
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	3b04      	subs	r3, #4
 800882e:	429d      	cmp	r5, r3
 8008830:	461a      	mov	r2, r3
 8008832:	d32f      	bcc.n	8008894 <quorem+0xfc>
 8008834:	613c      	str	r4, [r7, #16]
 8008836:	4638      	mov	r0, r7
 8008838:	f001 fd8a 	bl	800a350 <__mcmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	db25      	blt.n	800888c <quorem+0xf4>
 8008840:	4628      	mov	r0, r5
 8008842:	f04f 0c00 	mov.w	ip, #0
 8008846:	3601      	adds	r6, #1
 8008848:	f858 1b04 	ldr.w	r1, [r8], #4
 800884c:	f8d0 e000 	ldr.w	lr, [r0]
 8008850:	b28b      	uxth	r3, r1
 8008852:	ebac 0303 	sub.w	r3, ip, r3
 8008856:	fa1f f28e 	uxth.w	r2, lr
 800885a:	4413      	add	r3, r2
 800885c:	0c0a      	lsrs	r2, r1, #16
 800885e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008862:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008866:	b29b      	uxth	r3, r3
 8008868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800886c:	45c1      	cmp	r9, r8
 800886e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008872:	f840 3b04 	str.w	r3, [r0], #4
 8008876:	d2e7      	bcs.n	8008848 <quorem+0xb0>
 8008878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800887c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008880:	b922      	cbnz	r2, 800888c <quorem+0xf4>
 8008882:	3b04      	subs	r3, #4
 8008884:	429d      	cmp	r5, r3
 8008886:	461a      	mov	r2, r3
 8008888:	d30a      	bcc.n	80088a0 <quorem+0x108>
 800888a:	613c      	str	r4, [r7, #16]
 800888c:	4630      	mov	r0, r6
 800888e:	b003      	add	sp, #12
 8008890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	3b04      	subs	r3, #4
 8008898:	2a00      	cmp	r2, #0
 800889a:	d1cb      	bne.n	8008834 <quorem+0x9c>
 800889c:	3c01      	subs	r4, #1
 800889e:	e7c6      	b.n	800882e <quorem+0x96>
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	3b04      	subs	r3, #4
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	d1f0      	bne.n	800888a <quorem+0xf2>
 80088a8:	3c01      	subs	r4, #1
 80088aa:	e7eb      	b.n	8008884 <quorem+0xec>
 80088ac:	2000      	movs	r0, #0
 80088ae:	e7ee      	b.n	800888e <quorem+0xf6>

080088b0 <_dtoa_r>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	4616      	mov	r6, r2
 80088b6:	461f      	mov	r7, r3
 80088b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80088ba:	b099      	sub	sp, #100	; 0x64
 80088bc:	4605      	mov	r5, r0
 80088be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80088c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80088c6:	b974      	cbnz	r4, 80088e6 <_dtoa_r+0x36>
 80088c8:	2010      	movs	r0, #16
 80088ca:	f001 fa43 	bl	8009d54 <malloc>
 80088ce:	4602      	mov	r2, r0
 80088d0:	6268      	str	r0, [r5, #36]	; 0x24
 80088d2:	b920      	cbnz	r0, 80088de <_dtoa_r+0x2e>
 80088d4:	21ea      	movs	r1, #234	; 0xea
 80088d6:	4ba8      	ldr	r3, [pc, #672]	; (8008b78 <_dtoa_r+0x2c8>)
 80088d8:	48a8      	ldr	r0, [pc, #672]	; (8008b7c <_dtoa_r+0x2cc>)
 80088da:	f002 fc1b 	bl	800b114 <__assert_func>
 80088de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088e2:	6004      	str	r4, [r0, #0]
 80088e4:	60c4      	str	r4, [r0, #12]
 80088e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088e8:	6819      	ldr	r1, [r3, #0]
 80088ea:	b151      	cbz	r1, 8008902 <_dtoa_r+0x52>
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	2301      	movs	r3, #1
 80088f0:	4093      	lsls	r3, r2
 80088f2:	604a      	str	r2, [r1, #4]
 80088f4:	608b      	str	r3, [r1, #8]
 80088f6:	4628      	mov	r0, r5
 80088f8:	f001 faa2 	bl	8009e40 <_Bfree>
 80088fc:	2200      	movs	r2, #0
 80088fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	1e3b      	subs	r3, r7, #0
 8008904:	bfaf      	iteee	ge
 8008906:	2300      	movge	r3, #0
 8008908:	2201      	movlt	r2, #1
 800890a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800890e:	9305      	strlt	r3, [sp, #20]
 8008910:	bfa8      	it	ge
 8008912:	f8c8 3000 	strge.w	r3, [r8]
 8008916:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800891a:	4b99      	ldr	r3, [pc, #612]	; (8008b80 <_dtoa_r+0x2d0>)
 800891c:	bfb8      	it	lt
 800891e:	f8c8 2000 	strlt.w	r2, [r8]
 8008922:	ea33 0309 	bics.w	r3, r3, r9
 8008926:	d119      	bne.n	800895c <_dtoa_r+0xac>
 8008928:	f242 730f 	movw	r3, #9999	; 0x270f
 800892c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008934:	4333      	orrs	r3, r6
 8008936:	f000 857f 	beq.w	8009438 <_dtoa_r+0xb88>
 800893a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800893c:	b953      	cbnz	r3, 8008954 <_dtoa_r+0xa4>
 800893e:	4b91      	ldr	r3, [pc, #580]	; (8008b84 <_dtoa_r+0x2d4>)
 8008940:	e022      	b.n	8008988 <_dtoa_r+0xd8>
 8008942:	4b91      	ldr	r3, [pc, #580]	; (8008b88 <_dtoa_r+0x2d8>)
 8008944:	9303      	str	r3, [sp, #12]
 8008946:	3308      	adds	r3, #8
 8008948:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	9803      	ldr	r0, [sp, #12]
 800894e:	b019      	add	sp, #100	; 0x64
 8008950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008954:	4b8b      	ldr	r3, [pc, #556]	; (8008b84 <_dtoa_r+0x2d4>)
 8008956:	9303      	str	r3, [sp, #12]
 8008958:	3303      	adds	r3, #3
 800895a:	e7f5      	b.n	8008948 <_dtoa_r+0x98>
 800895c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008960:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008968:	2200      	movs	r2, #0
 800896a:	2300      	movs	r3, #0
 800896c:	f7f8 f888 	bl	8000a80 <__aeabi_dcmpeq>
 8008970:	4680      	mov	r8, r0
 8008972:	b158      	cbz	r0, 800898c <_dtoa_r+0xdc>
 8008974:	2301      	movs	r3, #1
 8008976:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8558 	beq.w	8009432 <_dtoa_r+0xb82>
 8008982:	4882      	ldr	r0, [pc, #520]	; (8008b8c <_dtoa_r+0x2dc>)
 8008984:	6018      	str	r0, [r3, #0]
 8008986:	1e43      	subs	r3, r0, #1
 8008988:	9303      	str	r3, [sp, #12]
 800898a:	e7df      	b.n	800894c <_dtoa_r+0x9c>
 800898c:	ab16      	add	r3, sp, #88	; 0x58
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	ab17      	add	r3, sp, #92	; 0x5c
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	4628      	mov	r0, r5
 8008996:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800899a:	f001 fdfb 	bl	800a594 <__d2b>
 800899e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80089a2:	4683      	mov	fp, r0
 80089a4:	2c00      	cmp	r4, #0
 80089a6:	d07f      	beq.n	8008aa8 <_dtoa_r+0x1f8>
 80089a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80089b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80089ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80089be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80089c2:	2200      	movs	r2, #0
 80089c4:	4b72      	ldr	r3, [pc, #456]	; (8008b90 <_dtoa_r+0x2e0>)
 80089c6:	f7f7 fc3b 	bl	8000240 <__aeabi_dsub>
 80089ca:	a365      	add	r3, pc, #404	; (adr r3, 8008b60 <_dtoa_r+0x2b0>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	f7f7 fdee 	bl	80005b0 <__aeabi_dmul>
 80089d4:	a364      	add	r3, pc, #400	; (adr r3, 8008b68 <_dtoa_r+0x2b8>)
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f7f7 fc33 	bl	8000244 <__adddf3>
 80089de:	4606      	mov	r6, r0
 80089e0:	4620      	mov	r0, r4
 80089e2:	460f      	mov	r7, r1
 80089e4:	f7f7 fd7a 	bl	80004dc <__aeabi_i2d>
 80089e8:	a361      	add	r3, pc, #388	; (adr r3, 8008b70 <_dtoa_r+0x2c0>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 fddf 	bl	80005b0 <__aeabi_dmul>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4630      	mov	r0, r6
 80089f8:	4639      	mov	r1, r7
 80089fa:	f7f7 fc23 	bl	8000244 <__adddf3>
 80089fe:	4606      	mov	r6, r0
 8008a00:	460f      	mov	r7, r1
 8008a02:	f7f8 f885 	bl	8000b10 <__aeabi_d2iz>
 8008a06:	2200      	movs	r2, #0
 8008a08:	4682      	mov	sl, r0
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	4639      	mov	r1, r7
 8008a10:	f7f8 f840 	bl	8000a94 <__aeabi_dcmplt>
 8008a14:	b148      	cbz	r0, 8008a2a <_dtoa_r+0x17a>
 8008a16:	4650      	mov	r0, sl
 8008a18:	f7f7 fd60 	bl	80004dc <__aeabi_i2d>
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	463b      	mov	r3, r7
 8008a20:	f7f8 f82e 	bl	8000a80 <__aeabi_dcmpeq>
 8008a24:	b908      	cbnz	r0, 8008a2a <_dtoa_r+0x17a>
 8008a26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a2a:	f1ba 0f16 	cmp.w	sl, #22
 8008a2e:	d858      	bhi.n	8008ae2 <_dtoa_r+0x232>
 8008a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a34:	4b57      	ldr	r3, [pc, #348]	; (8008b94 <_dtoa_r+0x2e4>)
 8008a36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f8 f829 	bl	8000a94 <__aeabi_dcmplt>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d04f      	beq.n	8008ae6 <_dtoa_r+0x236>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a50:	1b1c      	subs	r4, r3, r4
 8008a52:	1e63      	subs	r3, r4, #1
 8008a54:	9309      	str	r3, [sp, #36]	; 0x24
 8008a56:	bf49      	itett	mi
 8008a58:	f1c4 0301 	rsbmi	r3, r4, #1
 8008a5c:	2300      	movpl	r3, #0
 8008a5e:	9306      	strmi	r3, [sp, #24]
 8008a60:	2300      	movmi	r3, #0
 8008a62:	bf54      	ite	pl
 8008a64:	9306      	strpl	r3, [sp, #24]
 8008a66:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008a68:	f1ba 0f00 	cmp.w	sl, #0
 8008a6c:	db3d      	blt.n	8008aea <_dtoa_r+0x23a>
 8008a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a70:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008a74:	4453      	add	r3, sl
 8008a76:	9309      	str	r3, [sp, #36]	; 0x24
 8008a78:	2300      	movs	r3, #0
 8008a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a7e:	2b09      	cmp	r3, #9
 8008a80:	f200 808c 	bhi.w	8008b9c <_dtoa_r+0x2ec>
 8008a84:	2b05      	cmp	r3, #5
 8008a86:	bfc4      	itt	gt
 8008a88:	3b04      	subgt	r3, #4
 8008a8a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a8e:	bfc8      	it	gt
 8008a90:	2400      	movgt	r4, #0
 8008a92:	f1a3 0302 	sub.w	r3, r3, #2
 8008a96:	bfd8      	it	le
 8008a98:	2401      	movle	r4, #1
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	f200 808a 	bhi.w	8008bb4 <_dtoa_r+0x304>
 8008aa0:	e8df f003 	tbb	[pc, r3]
 8008aa4:	5b4d4f2d 	.word	0x5b4d4f2d
 8008aa8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008aac:	441c      	add	r4, r3
 8008aae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008ab2:	2b20      	cmp	r3, #32
 8008ab4:	bfc3      	ittte	gt
 8008ab6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008aba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008abe:	fa09 f303 	lslgt.w	r3, r9, r3
 8008ac2:	f1c3 0320 	rsble	r3, r3, #32
 8008ac6:	bfc6      	itte	gt
 8008ac8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008acc:	4318      	orrgt	r0, r3
 8008ace:	fa06 f003 	lslle.w	r0, r6, r3
 8008ad2:	f7f7 fcf3 	bl	80004bc <__aeabi_ui2d>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008adc:	3c01      	subs	r4, #1
 8008ade:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ae0:	e76f      	b.n	80089c2 <_dtoa_r+0x112>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e7b2      	b.n	8008a4c <_dtoa_r+0x19c>
 8008ae6:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ae8:	e7b1      	b.n	8008a4e <_dtoa_r+0x19e>
 8008aea:	9b06      	ldr	r3, [sp, #24]
 8008aec:	eba3 030a 	sub.w	r3, r3, sl
 8008af0:	9306      	str	r3, [sp, #24]
 8008af2:	f1ca 0300 	rsb	r3, sl, #0
 8008af6:	930a      	str	r3, [sp, #40]	; 0x28
 8008af8:	2300      	movs	r3, #0
 8008afa:	930e      	str	r3, [sp, #56]	; 0x38
 8008afc:	e7be      	b.n	8008a7c <_dtoa_r+0x1cc>
 8008afe:	2300      	movs	r3, #0
 8008b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dc58      	bgt.n	8008bba <_dtoa_r+0x30a>
 8008b08:	f04f 0901 	mov.w	r9, #1
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008b12:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008b16:	2200      	movs	r2, #0
 8008b18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008b1a:	6042      	str	r2, [r0, #4]
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	f102 0614 	add.w	r6, r2, #20
 8008b22:	429e      	cmp	r6, r3
 8008b24:	6841      	ldr	r1, [r0, #4]
 8008b26:	d94e      	bls.n	8008bc6 <_dtoa_r+0x316>
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f001 f949 	bl	8009dc0 <_Balloc>
 8008b2e:	9003      	str	r0, [sp, #12]
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d14c      	bne.n	8008bce <_dtoa_r+0x31e>
 8008b34:	4602      	mov	r2, r0
 8008b36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b3a:	4b17      	ldr	r3, [pc, #92]	; (8008b98 <_dtoa_r+0x2e8>)
 8008b3c:	e6cc      	b.n	80088d8 <_dtoa_r+0x28>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e7de      	b.n	8008b00 <_dtoa_r+0x250>
 8008b42:	2300      	movs	r3, #0
 8008b44:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b48:	eb0a 0903 	add.w	r9, sl, r3
 8008b4c:	f109 0301 	add.w	r3, r9, #1
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	9308      	str	r3, [sp, #32]
 8008b54:	bfb8      	it	lt
 8008b56:	2301      	movlt	r3, #1
 8008b58:	e7dd      	b.n	8008b16 <_dtoa_r+0x266>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e7f2      	b.n	8008b44 <_dtoa_r+0x294>
 8008b5e:	bf00      	nop
 8008b60:	636f4361 	.word	0x636f4361
 8008b64:	3fd287a7 	.word	0x3fd287a7
 8008b68:	8b60c8b3 	.word	0x8b60c8b3
 8008b6c:	3fc68a28 	.word	0x3fc68a28
 8008b70:	509f79fb 	.word	0x509f79fb
 8008b74:	3fd34413 	.word	0x3fd34413
 8008b78:	0800d00e 	.word	0x0800d00e
 8008b7c:	0800d025 	.word	0x0800d025
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	0800d00a 	.word	0x0800d00a
 8008b88:	0800d001 	.word	0x0800d001
 8008b8c:	0800ce85 	.word	0x0800ce85
 8008b90:	3ff80000 	.word	0x3ff80000
 8008b94:	0800d1f8 	.word	0x0800d1f8
 8008b98:	0800d080 	.word	0x0800d080
 8008b9c:	2401      	movs	r4, #1
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	940b      	str	r4, [sp, #44]	; 0x2c
 8008ba2:	9322      	str	r3, [sp, #136]	; 0x88
 8008ba4:	f04f 39ff 	mov.w	r9, #4294967295
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2312      	movs	r3, #18
 8008bac:	f8cd 9020 	str.w	r9, [sp, #32]
 8008bb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8008bb2:	e7b0      	b.n	8008b16 <_dtoa_r+0x266>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bb8:	e7f4      	b.n	8008ba4 <_dtoa_r+0x2f4>
 8008bba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008bbe:	464b      	mov	r3, r9
 8008bc0:	f8cd 9020 	str.w	r9, [sp, #32]
 8008bc4:	e7a7      	b.n	8008b16 <_dtoa_r+0x266>
 8008bc6:	3101      	adds	r1, #1
 8008bc8:	6041      	str	r1, [r0, #4]
 8008bca:	0052      	lsls	r2, r2, #1
 8008bcc:	e7a7      	b.n	8008b1e <_dtoa_r+0x26e>
 8008bce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bd0:	9a03      	ldr	r2, [sp, #12]
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	9b08      	ldr	r3, [sp, #32]
 8008bd6:	2b0e      	cmp	r3, #14
 8008bd8:	f200 80a8 	bhi.w	8008d2c <_dtoa_r+0x47c>
 8008bdc:	2c00      	cmp	r4, #0
 8008bde:	f000 80a5 	beq.w	8008d2c <_dtoa_r+0x47c>
 8008be2:	f1ba 0f00 	cmp.w	sl, #0
 8008be6:	dd34      	ble.n	8008c52 <_dtoa_r+0x3a2>
 8008be8:	4a9a      	ldr	r2, [pc, #616]	; (8008e54 <_dtoa_r+0x5a4>)
 8008bea:	f00a 030f 	and.w	r3, sl, #15
 8008bee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008bf2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008bf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008bfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008bfe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008c02:	d016      	beq.n	8008c32 <_dtoa_r+0x382>
 8008c04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c08:	4b93      	ldr	r3, [pc, #588]	; (8008e58 <_dtoa_r+0x5a8>)
 8008c0a:	2703      	movs	r7, #3
 8008c0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c10:	f7f7 fdf8 	bl	8000804 <__aeabi_ddiv>
 8008c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c18:	f004 040f 	and.w	r4, r4, #15
 8008c1c:	4e8e      	ldr	r6, [pc, #568]	; (8008e58 <_dtoa_r+0x5a8>)
 8008c1e:	b954      	cbnz	r4, 8008c36 <_dtoa_r+0x386>
 8008c20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c28:	f7f7 fdec 	bl	8000804 <__aeabi_ddiv>
 8008c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c30:	e029      	b.n	8008c86 <_dtoa_r+0x3d6>
 8008c32:	2702      	movs	r7, #2
 8008c34:	e7f2      	b.n	8008c1c <_dtoa_r+0x36c>
 8008c36:	07e1      	lsls	r1, r4, #31
 8008c38:	d508      	bpl.n	8008c4c <_dtoa_r+0x39c>
 8008c3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c42:	f7f7 fcb5 	bl	80005b0 <__aeabi_dmul>
 8008c46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c4a:	3701      	adds	r7, #1
 8008c4c:	1064      	asrs	r4, r4, #1
 8008c4e:	3608      	adds	r6, #8
 8008c50:	e7e5      	b.n	8008c1e <_dtoa_r+0x36e>
 8008c52:	f000 80a5 	beq.w	8008da0 <_dtoa_r+0x4f0>
 8008c56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c5a:	f1ca 0400 	rsb	r4, sl, #0
 8008c5e:	4b7d      	ldr	r3, [pc, #500]	; (8008e54 <_dtoa_r+0x5a4>)
 8008c60:	f004 020f 	and.w	r2, r4, #15
 8008c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 fca0 	bl	80005b0 <__aeabi_dmul>
 8008c70:	2702      	movs	r7, #2
 8008c72:	2300      	movs	r3, #0
 8008c74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c78:	4e77      	ldr	r6, [pc, #476]	; (8008e58 <_dtoa_r+0x5a8>)
 8008c7a:	1124      	asrs	r4, r4, #4
 8008c7c:	2c00      	cmp	r4, #0
 8008c7e:	f040 8084 	bne.w	8008d8a <_dtoa_r+0x4da>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1d2      	bne.n	8008c2c <_dtoa_r+0x37c>
 8008c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 808b 	beq.w	8008da4 <_dtoa_r+0x4f4>
 8008c8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008c96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4b6f      	ldr	r3, [pc, #444]	; (8008e5c <_dtoa_r+0x5ac>)
 8008c9e:	f7f7 fef9 	bl	8000a94 <__aeabi_dcmplt>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d07e      	beq.n	8008da4 <_dtoa_r+0x4f4>
 8008ca6:	9b08      	ldr	r3, [sp, #32]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d07b      	beq.n	8008da4 <_dtoa_r+0x4f4>
 8008cac:	f1b9 0f00 	cmp.w	r9, #0
 8008cb0:	dd38      	ble.n	8008d24 <_dtoa_r+0x474>
 8008cb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4b69      	ldr	r3, [pc, #420]	; (8008e60 <_dtoa_r+0x5b0>)
 8008cba:	f7f7 fc79 	bl	80005b0 <__aeabi_dmul>
 8008cbe:	464c      	mov	r4, r9
 8008cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cc4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008cc8:	3701      	adds	r7, #1
 8008cca:	4638      	mov	r0, r7
 8008ccc:	f7f7 fc06 	bl	80004dc <__aeabi_i2d>
 8008cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd4:	f7f7 fc6c 	bl	80005b0 <__aeabi_dmul>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4b62      	ldr	r3, [pc, #392]	; (8008e64 <_dtoa_r+0x5b4>)
 8008cdc:	f7f7 fab2 	bl	8000244 <__adddf3>
 8008ce0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008ce4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ce8:	9611      	str	r6, [sp, #68]	; 0x44
 8008cea:	2c00      	cmp	r4, #0
 8008cec:	d15d      	bne.n	8008daa <_dtoa_r+0x4fa>
 8008cee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	4b5c      	ldr	r3, [pc, #368]	; (8008e68 <_dtoa_r+0x5b8>)
 8008cf6:	f7f7 faa3 	bl	8000240 <__aeabi_dsub>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d02:	4633      	mov	r3, r6
 8008d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d06:	f7f7 fee3 	bl	8000ad0 <__aeabi_dcmpgt>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	f040 829c 	bne.w	8009248 <_dtoa_r+0x998>
 8008d10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008d1a:	f7f7 febb 	bl	8000a94 <__aeabi_dcmplt>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	f040 8290 	bne.w	8009244 <_dtoa_r+0x994>
 8008d24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008d28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f2c0 8152 	blt.w	8008fd8 <_dtoa_r+0x728>
 8008d34:	f1ba 0f0e 	cmp.w	sl, #14
 8008d38:	f300 814e 	bgt.w	8008fd8 <_dtoa_r+0x728>
 8008d3c:	4b45      	ldr	r3, [pc, #276]	; (8008e54 <_dtoa_r+0x5a4>)
 8008d3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008d4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f280 80db 	bge.w	8008f08 <_dtoa_r+0x658>
 8008d52:	9b08      	ldr	r3, [sp, #32]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f300 80d7 	bgt.w	8008f08 <_dtoa_r+0x658>
 8008d5a:	f040 8272 	bne.w	8009242 <_dtoa_r+0x992>
 8008d5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d62:	2200      	movs	r2, #0
 8008d64:	4b40      	ldr	r3, [pc, #256]	; (8008e68 <_dtoa_r+0x5b8>)
 8008d66:	f7f7 fc23 	bl	80005b0 <__aeabi_dmul>
 8008d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d6e:	f7f7 fea5 	bl	8000abc <__aeabi_dcmpge>
 8008d72:	9c08      	ldr	r4, [sp, #32]
 8008d74:	4626      	mov	r6, r4
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f040 8248 	bne.w	800920c <_dtoa_r+0x95c>
 8008d7c:	2331      	movs	r3, #49	; 0x31
 8008d7e:	9f03      	ldr	r7, [sp, #12]
 8008d80:	f10a 0a01 	add.w	sl, sl, #1
 8008d84:	f807 3b01 	strb.w	r3, [r7], #1
 8008d88:	e244      	b.n	8009214 <_dtoa_r+0x964>
 8008d8a:	07e2      	lsls	r2, r4, #31
 8008d8c:	d505      	bpl.n	8008d9a <_dtoa_r+0x4ea>
 8008d8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d92:	f7f7 fc0d 	bl	80005b0 <__aeabi_dmul>
 8008d96:	2301      	movs	r3, #1
 8008d98:	3701      	adds	r7, #1
 8008d9a:	1064      	asrs	r4, r4, #1
 8008d9c:	3608      	adds	r6, #8
 8008d9e:	e76d      	b.n	8008c7c <_dtoa_r+0x3cc>
 8008da0:	2702      	movs	r7, #2
 8008da2:	e770      	b.n	8008c86 <_dtoa_r+0x3d6>
 8008da4:	46d0      	mov	r8, sl
 8008da6:	9c08      	ldr	r4, [sp, #32]
 8008da8:	e78f      	b.n	8008cca <_dtoa_r+0x41a>
 8008daa:	9903      	ldr	r1, [sp, #12]
 8008dac:	4b29      	ldr	r3, [pc, #164]	; (8008e54 <_dtoa_r+0x5a4>)
 8008dae:	4421      	add	r1, r4
 8008db0:	9112      	str	r1, [sp, #72]	; 0x48
 8008db2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008db4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008db8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008dbc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	d055      	beq.n	8008e70 <_dtoa_r+0x5c0>
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	4929      	ldr	r1, [pc, #164]	; (8008e6c <_dtoa_r+0x5bc>)
 8008dc8:	f7f7 fd1c 	bl	8000804 <__aeabi_ddiv>
 8008dcc:	463b      	mov	r3, r7
 8008dce:	4632      	mov	r2, r6
 8008dd0:	f7f7 fa36 	bl	8000240 <__aeabi_dsub>
 8008dd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008dd8:	9f03      	ldr	r7, [sp, #12]
 8008dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dde:	f7f7 fe97 	bl	8000b10 <__aeabi_d2iz>
 8008de2:	4604      	mov	r4, r0
 8008de4:	f7f7 fb7a 	bl	80004dc <__aeabi_i2d>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008df0:	f7f7 fa26 	bl	8000240 <__aeabi_dsub>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	3430      	adds	r4, #48	; 0x30
 8008dfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008dfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e02:	f807 4b01 	strb.w	r4, [r7], #1
 8008e06:	f7f7 fe45 	bl	8000a94 <__aeabi_dcmplt>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d174      	bne.n	8008ef8 <_dtoa_r+0x648>
 8008e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e12:	2000      	movs	r0, #0
 8008e14:	4911      	ldr	r1, [pc, #68]	; (8008e5c <_dtoa_r+0x5ac>)
 8008e16:	f7f7 fa13 	bl	8000240 <__aeabi_dsub>
 8008e1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e1e:	f7f7 fe39 	bl	8000a94 <__aeabi_dcmplt>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	f040 80b7 	bne.w	8008f96 <_dtoa_r+0x6e6>
 8008e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e2a:	429f      	cmp	r7, r3
 8008e2c:	f43f af7a 	beq.w	8008d24 <_dtoa_r+0x474>
 8008e30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e34:	2200      	movs	r2, #0
 8008e36:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <_dtoa_r+0x5b0>)
 8008e38:	f7f7 fbba 	bl	80005b0 <__aeabi_dmul>
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e46:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <_dtoa_r+0x5b0>)
 8008e48:	f7f7 fbb2 	bl	80005b0 <__aeabi_dmul>
 8008e4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e50:	e7c3      	b.n	8008dda <_dtoa_r+0x52a>
 8008e52:	bf00      	nop
 8008e54:	0800d1f8 	.word	0x0800d1f8
 8008e58:	0800d1d0 	.word	0x0800d1d0
 8008e5c:	3ff00000 	.word	0x3ff00000
 8008e60:	40240000 	.word	0x40240000
 8008e64:	401c0000 	.word	0x401c0000
 8008e68:	40140000 	.word	0x40140000
 8008e6c:	3fe00000 	.word	0x3fe00000
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 fb9c 	bl	80005b0 <__aeabi_dmul>
 8008e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e7e:	9c03      	ldr	r4, [sp, #12]
 8008e80:	9314      	str	r3, [sp, #80]	; 0x50
 8008e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e86:	f7f7 fe43 	bl	8000b10 <__aeabi_d2iz>
 8008e8a:	9015      	str	r0, [sp, #84]	; 0x54
 8008e8c:	f7f7 fb26 	bl	80004dc <__aeabi_i2d>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e98:	f7f7 f9d2 	bl	8000240 <__aeabi_dsub>
 8008e9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	3330      	adds	r3, #48	; 0x30
 8008ea2:	f804 3b01 	strb.w	r3, [r4], #1
 8008ea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ea8:	460f      	mov	r7, r1
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	f04f 0200 	mov.w	r2, #0
 8008eb0:	d124      	bne.n	8008efc <_dtoa_r+0x64c>
 8008eb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008eb6:	4bb0      	ldr	r3, [pc, #704]	; (8009178 <_dtoa_r+0x8c8>)
 8008eb8:	f7f7 f9c4 	bl	8000244 <__adddf3>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	f7f7 fe04 	bl	8000ad0 <__aeabi_dcmpgt>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d163      	bne.n	8008f94 <_dtoa_r+0x6e4>
 8008ecc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	49a9      	ldr	r1, [pc, #676]	; (8009178 <_dtoa_r+0x8c8>)
 8008ed4:	f7f7 f9b4 	bl	8000240 <__aeabi_dsub>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4630      	mov	r0, r6
 8008ede:	4639      	mov	r1, r7
 8008ee0:	f7f7 fdd8 	bl	8000a94 <__aeabi_dcmplt>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	f43f af1d 	beq.w	8008d24 <_dtoa_r+0x474>
 8008eea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008eec:	1e7b      	subs	r3, r7, #1
 8008eee:	9314      	str	r3, [sp, #80]	; 0x50
 8008ef0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008ef4:	2b30      	cmp	r3, #48	; 0x30
 8008ef6:	d0f8      	beq.n	8008eea <_dtoa_r+0x63a>
 8008ef8:	46c2      	mov	sl, r8
 8008efa:	e03b      	b.n	8008f74 <_dtoa_r+0x6c4>
 8008efc:	4b9f      	ldr	r3, [pc, #636]	; (800917c <_dtoa_r+0x8cc>)
 8008efe:	f7f7 fb57 	bl	80005b0 <__aeabi_dmul>
 8008f02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f06:	e7bc      	b.n	8008e82 <_dtoa_r+0x5d2>
 8008f08:	9f03      	ldr	r7, [sp, #12]
 8008f0a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008f0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f12:	4640      	mov	r0, r8
 8008f14:	4649      	mov	r1, r9
 8008f16:	f7f7 fc75 	bl	8000804 <__aeabi_ddiv>
 8008f1a:	f7f7 fdf9 	bl	8000b10 <__aeabi_d2iz>
 8008f1e:	4604      	mov	r4, r0
 8008f20:	f7f7 fadc 	bl	80004dc <__aeabi_i2d>
 8008f24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f28:	f7f7 fb42 	bl	80005b0 <__aeabi_dmul>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4640      	mov	r0, r8
 8008f32:	4649      	mov	r1, r9
 8008f34:	f7f7 f984 	bl	8000240 <__aeabi_dsub>
 8008f38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008f3c:	f807 6b01 	strb.w	r6, [r7], #1
 8008f40:	9e03      	ldr	r6, [sp, #12]
 8008f42:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008f46:	1bbe      	subs	r6, r7, r6
 8008f48:	45b4      	cmp	ip, r6
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	d136      	bne.n	8008fbe <_dtoa_r+0x70e>
 8008f50:	f7f7 f978 	bl	8000244 <__adddf3>
 8008f54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f58:	4680      	mov	r8, r0
 8008f5a:	4689      	mov	r9, r1
 8008f5c:	f7f7 fdb8 	bl	8000ad0 <__aeabi_dcmpgt>
 8008f60:	bb58      	cbnz	r0, 8008fba <_dtoa_r+0x70a>
 8008f62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f66:	4640      	mov	r0, r8
 8008f68:	4649      	mov	r1, r9
 8008f6a:	f7f7 fd89 	bl	8000a80 <__aeabi_dcmpeq>
 8008f6e:	b108      	cbz	r0, 8008f74 <_dtoa_r+0x6c4>
 8008f70:	07e1      	lsls	r1, r4, #31
 8008f72:	d422      	bmi.n	8008fba <_dtoa_r+0x70a>
 8008f74:	4628      	mov	r0, r5
 8008f76:	4659      	mov	r1, fp
 8008f78:	f000 ff62 	bl	8009e40 <_Bfree>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	703b      	strb	r3, [r7, #0]
 8008f80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f82:	f10a 0001 	add.w	r0, sl, #1
 8008f86:	6018      	str	r0, [r3, #0]
 8008f88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f43f acde 	beq.w	800894c <_dtoa_r+0x9c>
 8008f90:	601f      	str	r7, [r3, #0]
 8008f92:	e4db      	b.n	800894c <_dtoa_r+0x9c>
 8008f94:	4627      	mov	r7, r4
 8008f96:	463b      	mov	r3, r7
 8008f98:	461f      	mov	r7, r3
 8008f9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f9e:	2a39      	cmp	r2, #57	; 0x39
 8008fa0:	d107      	bne.n	8008fb2 <_dtoa_r+0x702>
 8008fa2:	9a03      	ldr	r2, [sp, #12]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d1f7      	bne.n	8008f98 <_dtoa_r+0x6e8>
 8008fa8:	2230      	movs	r2, #48	; 0x30
 8008faa:	9903      	ldr	r1, [sp, #12]
 8008fac:	f108 0801 	add.w	r8, r8, #1
 8008fb0:	700a      	strb	r2, [r1, #0]
 8008fb2:	781a      	ldrb	r2, [r3, #0]
 8008fb4:	3201      	adds	r2, #1
 8008fb6:	701a      	strb	r2, [r3, #0]
 8008fb8:	e79e      	b.n	8008ef8 <_dtoa_r+0x648>
 8008fba:	46d0      	mov	r8, sl
 8008fbc:	e7eb      	b.n	8008f96 <_dtoa_r+0x6e6>
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4b6e      	ldr	r3, [pc, #440]	; (800917c <_dtoa_r+0x8cc>)
 8008fc2:	f7f7 faf5 	bl	80005b0 <__aeabi_dmul>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4680      	mov	r8, r0
 8008fcc:	4689      	mov	r9, r1
 8008fce:	f7f7 fd57 	bl	8000a80 <__aeabi_dcmpeq>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d09b      	beq.n	8008f0e <_dtoa_r+0x65e>
 8008fd6:	e7cd      	b.n	8008f74 <_dtoa_r+0x6c4>
 8008fd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	f000 80d0 	beq.w	8009180 <_dtoa_r+0x8d0>
 8008fe0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fe2:	2a01      	cmp	r2, #1
 8008fe4:	f300 80ae 	bgt.w	8009144 <_dtoa_r+0x894>
 8008fe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	f000 80a6 	beq.w	800913c <_dtoa_r+0x88c>
 8008ff0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ff4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ff6:	9f06      	ldr	r7, [sp, #24]
 8008ff8:	9a06      	ldr	r2, [sp, #24]
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	441a      	add	r2, r3
 8008ffe:	9206      	str	r2, [sp, #24]
 8009000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009002:	4628      	mov	r0, r5
 8009004:	441a      	add	r2, r3
 8009006:	9209      	str	r2, [sp, #36]	; 0x24
 8009008:	f001 f81a 	bl	800a040 <__i2b>
 800900c:	4606      	mov	r6, r0
 800900e:	2f00      	cmp	r7, #0
 8009010:	dd0c      	ble.n	800902c <_dtoa_r+0x77c>
 8009012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	dd09      	ble.n	800902c <_dtoa_r+0x77c>
 8009018:	42bb      	cmp	r3, r7
 800901a:	bfa8      	it	ge
 800901c:	463b      	movge	r3, r7
 800901e:	9a06      	ldr	r2, [sp, #24]
 8009020:	1aff      	subs	r7, r7, r3
 8009022:	1ad2      	subs	r2, r2, r3
 8009024:	9206      	str	r2, [sp, #24]
 8009026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	9309      	str	r3, [sp, #36]	; 0x24
 800902c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800902e:	b1f3      	cbz	r3, 800906e <_dtoa_r+0x7be>
 8009030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 80a8 	beq.w	8009188 <_dtoa_r+0x8d8>
 8009038:	2c00      	cmp	r4, #0
 800903a:	dd10      	ble.n	800905e <_dtoa_r+0x7ae>
 800903c:	4631      	mov	r1, r6
 800903e:	4622      	mov	r2, r4
 8009040:	4628      	mov	r0, r5
 8009042:	f001 f8bb 	bl	800a1bc <__pow5mult>
 8009046:	465a      	mov	r2, fp
 8009048:	4601      	mov	r1, r0
 800904a:	4606      	mov	r6, r0
 800904c:	4628      	mov	r0, r5
 800904e:	f001 f80d 	bl	800a06c <__multiply>
 8009052:	4680      	mov	r8, r0
 8009054:	4659      	mov	r1, fp
 8009056:	4628      	mov	r0, r5
 8009058:	f000 fef2 	bl	8009e40 <_Bfree>
 800905c:	46c3      	mov	fp, r8
 800905e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009060:	1b1a      	subs	r2, r3, r4
 8009062:	d004      	beq.n	800906e <_dtoa_r+0x7be>
 8009064:	4659      	mov	r1, fp
 8009066:	4628      	mov	r0, r5
 8009068:	f001 f8a8 	bl	800a1bc <__pow5mult>
 800906c:	4683      	mov	fp, r0
 800906e:	2101      	movs	r1, #1
 8009070:	4628      	mov	r0, r5
 8009072:	f000 ffe5 	bl	800a040 <__i2b>
 8009076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009078:	4604      	mov	r4, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	f340 8086 	ble.w	800918c <_dtoa_r+0x8dc>
 8009080:	461a      	mov	r2, r3
 8009082:	4601      	mov	r1, r0
 8009084:	4628      	mov	r0, r5
 8009086:	f001 f899 	bl	800a1bc <__pow5mult>
 800908a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800908c:	4604      	mov	r4, r0
 800908e:	2b01      	cmp	r3, #1
 8009090:	dd7f      	ble.n	8009192 <_dtoa_r+0x8e2>
 8009092:	f04f 0800 	mov.w	r8, #0
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800909c:	6918      	ldr	r0, [r3, #16]
 800909e:	f000 ff81 	bl	8009fa4 <__hi0bits>
 80090a2:	f1c0 0020 	rsb	r0, r0, #32
 80090a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a8:	4418      	add	r0, r3
 80090aa:	f010 001f 	ands.w	r0, r0, #31
 80090ae:	f000 8092 	beq.w	80091d6 <_dtoa_r+0x926>
 80090b2:	f1c0 0320 	rsb	r3, r0, #32
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	f340 808a 	ble.w	80091d0 <_dtoa_r+0x920>
 80090bc:	f1c0 001c 	rsb	r0, r0, #28
 80090c0:	9b06      	ldr	r3, [sp, #24]
 80090c2:	4407      	add	r7, r0
 80090c4:	4403      	add	r3, r0
 80090c6:	9306      	str	r3, [sp, #24]
 80090c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ca:	4403      	add	r3, r0
 80090cc:	9309      	str	r3, [sp, #36]	; 0x24
 80090ce:	9b06      	ldr	r3, [sp, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	dd05      	ble.n	80090e0 <_dtoa_r+0x830>
 80090d4:	4659      	mov	r1, fp
 80090d6:	461a      	mov	r2, r3
 80090d8:	4628      	mov	r0, r5
 80090da:	f001 f8c9 	bl	800a270 <__lshift>
 80090de:	4683      	mov	fp, r0
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dd05      	ble.n	80090f2 <_dtoa_r+0x842>
 80090e6:	4621      	mov	r1, r4
 80090e8:	461a      	mov	r2, r3
 80090ea:	4628      	mov	r0, r5
 80090ec:	f001 f8c0 	bl	800a270 <__lshift>
 80090f0:	4604      	mov	r4, r0
 80090f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d070      	beq.n	80091da <_dtoa_r+0x92a>
 80090f8:	4621      	mov	r1, r4
 80090fa:	4658      	mov	r0, fp
 80090fc:	f001 f928 	bl	800a350 <__mcmp>
 8009100:	2800      	cmp	r0, #0
 8009102:	da6a      	bge.n	80091da <_dtoa_r+0x92a>
 8009104:	2300      	movs	r3, #0
 8009106:	4659      	mov	r1, fp
 8009108:	220a      	movs	r2, #10
 800910a:	4628      	mov	r0, r5
 800910c:	f000 feba 	bl	8009e84 <__multadd>
 8009110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009112:	4683      	mov	fp, r0
 8009114:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 8194 	beq.w	8009446 <_dtoa_r+0xb96>
 800911e:	4631      	mov	r1, r6
 8009120:	2300      	movs	r3, #0
 8009122:	220a      	movs	r2, #10
 8009124:	4628      	mov	r0, r5
 8009126:	f000 fead 	bl	8009e84 <__multadd>
 800912a:	f1b9 0f00 	cmp.w	r9, #0
 800912e:	4606      	mov	r6, r0
 8009130:	f300 8093 	bgt.w	800925a <_dtoa_r+0x9aa>
 8009134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009136:	2b02      	cmp	r3, #2
 8009138:	dc57      	bgt.n	80091ea <_dtoa_r+0x93a>
 800913a:	e08e      	b.n	800925a <_dtoa_r+0x9aa>
 800913c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800913e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009142:	e757      	b.n	8008ff4 <_dtoa_r+0x744>
 8009144:	9b08      	ldr	r3, [sp, #32]
 8009146:	1e5c      	subs	r4, r3, #1
 8009148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800914a:	42a3      	cmp	r3, r4
 800914c:	bfb7      	itett	lt
 800914e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009150:	1b1c      	subge	r4, r3, r4
 8009152:	1ae2      	sublt	r2, r4, r3
 8009154:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009156:	bfbe      	ittt	lt
 8009158:	940a      	strlt	r4, [sp, #40]	; 0x28
 800915a:	189b      	addlt	r3, r3, r2
 800915c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800915e:	9b08      	ldr	r3, [sp, #32]
 8009160:	bfb8      	it	lt
 8009162:	2400      	movlt	r4, #0
 8009164:	2b00      	cmp	r3, #0
 8009166:	bfbb      	ittet	lt
 8009168:	9b06      	ldrlt	r3, [sp, #24]
 800916a:	9a08      	ldrlt	r2, [sp, #32]
 800916c:	9f06      	ldrge	r7, [sp, #24]
 800916e:	1a9f      	sublt	r7, r3, r2
 8009170:	bfac      	ite	ge
 8009172:	9b08      	ldrge	r3, [sp, #32]
 8009174:	2300      	movlt	r3, #0
 8009176:	e73f      	b.n	8008ff8 <_dtoa_r+0x748>
 8009178:	3fe00000 	.word	0x3fe00000
 800917c:	40240000 	.word	0x40240000
 8009180:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009182:	9f06      	ldr	r7, [sp, #24]
 8009184:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009186:	e742      	b.n	800900e <_dtoa_r+0x75e>
 8009188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800918a:	e76b      	b.n	8009064 <_dtoa_r+0x7b4>
 800918c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800918e:	2b01      	cmp	r3, #1
 8009190:	dc19      	bgt.n	80091c6 <_dtoa_r+0x916>
 8009192:	9b04      	ldr	r3, [sp, #16]
 8009194:	b9bb      	cbnz	r3, 80091c6 <_dtoa_r+0x916>
 8009196:	9b05      	ldr	r3, [sp, #20]
 8009198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800919c:	b99b      	cbnz	r3, 80091c6 <_dtoa_r+0x916>
 800919e:	9b05      	ldr	r3, [sp, #20]
 80091a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091a4:	0d1b      	lsrs	r3, r3, #20
 80091a6:	051b      	lsls	r3, r3, #20
 80091a8:	b183      	cbz	r3, 80091cc <_dtoa_r+0x91c>
 80091aa:	f04f 0801 	mov.w	r8, #1
 80091ae:	9b06      	ldr	r3, [sp, #24]
 80091b0:	3301      	adds	r3, #1
 80091b2:	9306      	str	r3, [sp, #24]
 80091b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b6:	3301      	adds	r3, #1
 80091b8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f47f af6a 	bne.w	8009096 <_dtoa_r+0x7e6>
 80091c2:	2001      	movs	r0, #1
 80091c4:	e76f      	b.n	80090a6 <_dtoa_r+0x7f6>
 80091c6:	f04f 0800 	mov.w	r8, #0
 80091ca:	e7f6      	b.n	80091ba <_dtoa_r+0x90a>
 80091cc:	4698      	mov	r8, r3
 80091ce:	e7f4      	b.n	80091ba <_dtoa_r+0x90a>
 80091d0:	f43f af7d 	beq.w	80090ce <_dtoa_r+0x81e>
 80091d4:	4618      	mov	r0, r3
 80091d6:	301c      	adds	r0, #28
 80091d8:	e772      	b.n	80090c0 <_dtoa_r+0x810>
 80091da:	9b08      	ldr	r3, [sp, #32]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dc36      	bgt.n	800924e <_dtoa_r+0x99e>
 80091e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	dd33      	ble.n	800924e <_dtoa_r+0x99e>
 80091e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	d10d      	bne.n	800920c <_dtoa_r+0x95c>
 80091f0:	4621      	mov	r1, r4
 80091f2:	464b      	mov	r3, r9
 80091f4:	2205      	movs	r2, #5
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 fe44 	bl	8009e84 <__multadd>
 80091fc:	4601      	mov	r1, r0
 80091fe:	4604      	mov	r4, r0
 8009200:	4658      	mov	r0, fp
 8009202:	f001 f8a5 	bl	800a350 <__mcmp>
 8009206:	2800      	cmp	r0, #0
 8009208:	f73f adb8 	bgt.w	8008d7c <_dtoa_r+0x4cc>
 800920c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800920e:	9f03      	ldr	r7, [sp, #12]
 8009210:	ea6f 0a03 	mvn.w	sl, r3
 8009214:	f04f 0800 	mov.w	r8, #0
 8009218:	4621      	mov	r1, r4
 800921a:	4628      	mov	r0, r5
 800921c:	f000 fe10 	bl	8009e40 <_Bfree>
 8009220:	2e00      	cmp	r6, #0
 8009222:	f43f aea7 	beq.w	8008f74 <_dtoa_r+0x6c4>
 8009226:	f1b8 0f00 	cmp.w	r8, #0
 800922a:	d005      	beq.n	8009238 <_dtoa_r+0x988>
 800922c:	45b0      	cmp	r8, r6
 800922e:	d003      	beq.n	8009238 <_dtoa_r+0x988>
 8009230:	4641      	mov	r1, r8
 8009232:	4628      	mov	r0, r5
 8009234:	f000 fe04 	bl	8009e40 <_Bfree>
 8009238:	4631      	mov	r1, r6
 800923a:	4628      	mov	r0, r5
 800923c:	f000 fe00 	bl	8009e40 <_Bfree>
 8009240:	e698      	b.n	8008f74 <_dtoa_r+0x6c4>
 8009242:	2400      	movs	r4, #0
 8009244:	4626      	mov	r6, r4
 8009246:	e7e1      	b.n	800920c <_dtoa_r+0x95c>
 8009248:	46c2      	mov	sl, r8
 800924a:	4626      	mov	r6, r4
 800924c:	e596      	b.n	8008d7c <_dtoa_r+0x4cc>
 800924e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009250:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 80fd 	beq.w	8009454 <_dtoa_r+0xba4>
 800925a:	2f00      	cmp	r7, #0
 800925c:	dd05      	ble.n	800926a <_dtoa_r+0x9ba>
 800925e:	4631      	mov	r1, r6
 8009260:	463a      	mov	r2, r7
 8009262:	4628      	mov	r0, r5
 8009264:	f001 f804 	bl	800a270 <__lshift>
 8009268:	4606      	mov	r6, r0
 800926a:	f1b8 0f00 	cmp.w	r8, #0
 800926e:	d05c      	beq.n	800932a <_dtoa_r+0xa7a>
 8009270:	4628      	mov	r0, r5
 8009272:	6871      	ldr	r1, [r6, #4]
 8009274:	f000 fda4 	bl	8009dc0 <_Balloc>
 8009278:	4607      	mov	r7, r0
 800927a:	b928      	cbnz	r0, 8009288 <_dtoa_r+0x9d8>
 800927c:	4602      	mov	r2, r0
 800927e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009282:	4b7f      	ldr	r3, [pc, #508]	; (8009480 <_dtoa_r+0xbd0>)
 8009284:	f7ff bb28 	b.w	80088d8 <_dtoa_r+0x28>
 8009288:	6932      	ldr	r2, [r6, #16]
 800928a:	f106 010c 	add.w	r1, r6, #12
 800928e:	3202      	adds	r2, #2
 8009290:	0092      	lsls	r2, r2, #2
 8009292:	300c      	adds	r0, #12
 8009294:	f000 fd86 	bl	8009da4 <memcpy>
 8009298:	2201      	movs	r2, #1
 800929a:	4639      	mov	r1, r7
 800929c:	4628      	mov	r0, r5
 800929e:	f000 ffe7 	bl	800a270 <__lshift>
 80092a2:	46b0      	mov	r8, r6
 80092a4:	4606      	mov	r6, r0
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	3301      	adds	r3, #1
 80092aa:	9308      	str	r3, [sp, #32]
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	444b      	add	r3, r9
 80092b0:	930a      	str	r3, [sp, #40]	; 0x28
 80092b2:	9b04      	ldr	r3, [sp, #16]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ba:	9b08      	ldr	r3, [sp, #32]
 80092bc:	4621      	mov	r1, r4
 80092be:	3b01      	subs	r3, #1
 80092c0:	4658      	mov	r0, fp
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	f7ff fa68 	bl	8008798 <quorem>
 80092c8:	4603      	mov	r3, r0
 80092ca:	4641      	mov	r1, r8
 80092cc:	3330      	adds	r3, #48	; 0x30
 80092ce:	9006      	str	r0, [sp, #24]
 80092d0:	4658      	mov	r0, fp
 80092d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80092d4:	f001 f83c 	bl	800a350 <__mcmp>
 80092d8:	4632      	mov	r2, r6
 80092da:	4681      	mov	r9, r0
 80092dc:	4621      	mov	r1, r4
 80092de:	4628      	mov	r0, r5
 80092e0:	f001 f852 	bl	800a388 <__mdiff>
 80092e4:	68c2      	ldr	r2, [r0, #12]
 80092e6:	4607      	mov	r7, r0
 80092e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ea:	bb02      	cbnz	r2, 800932e <_dtoa_r+0xa7e>
 80092ec:	4601      	mov	r1, r0
 80092ee:	4658      	mov	r0, fp
 80092f0:	f001 f82e 	bl	800a350 <__mcmp>
 80092f4:	4602      	mov	r2, r0
 80092f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f8:	4639      	mov	r1, r7
 80092fa:	4628      	mov	r0, r5
 80092fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009300:	f000 fd9e 	bl	8009e40 <_Bfree>
 8009304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009308:	9f08      	ldr	r7, [sp, #32]
 800930a:	ea43 0102 	orr.w	r1, r3, r2
 800930e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009310:	430b      	orrs	r3, r1
 8009312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009314:	d10d      	bne.n	8009332 <_dtoa_r+0xa82>
 8009316:	2b39      	cmp	r3, #57	; 0x39
 8009318:	d029      	beq.n	800936e <_dtoa_r+0xabe>
 800931a:	f1b9 0f00 	cmp.w	r9, #0
 800931e:	dd01      	ble.n	8009324 <_dtoa_r+0xa74>
 8009320:	9b06      	ldr	r3, [sp, #24]
 8009322:	3331      	adds	r3, #49	; 0x31
 8009324:	9a04      	ldr	r2, [sp, #16]
 8009326:	7013      	strb	r3, [r2, #0]
 8009328:	e776      	b.n	8009218 <_dtoa_r+0x968>
 800932a:	4630      	mov	r0, r6
 800932c:	e7b9      	b.n	80092a2 <_dtoa_r+0x9f2>
 800932e:	2201      	movs	r2, #1
 8009330:	e7e2      	b.n	80092f8 <_dtoa_r+0xa48>
 8009332:	f1b9 0f00 	cmp.w	r9, #0
 8009336:	db06      	blt.n	8009346 <_dtoa_r+0xa96>
 8009338:	9922      	ldr	r1, [sp, #136]	; 0x88
 800933a:	ea41 0909 	orr.w	r9, r1, r9
 800933e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009340:	ea59 0101 	orrs.w	r1, r9, r1
 8009344:	d120      	bne.n	8009388 <_dtoa_r+0xad8>
 8009346:	2a00      	cmp	r2, #0
 8009348:	ddec      	ble.n	8009324 <_dtoa_r+0xa74>
 800934a:	4659      	mov	r1, fp
 800934c:	2201      	movs	r2, #1
 800934e:	4628      	mov	r0, r5
 8009350:	9308      	str	r3, [sp, #32]
 8009352:	f000 ff8d 	bl	800a270 <__lshift>
 8009356:	4621      	mov	r1, r4
 8009358:	4683      	mov	fp, r0
 800935a:	f000 fff9 	bl	800a350 <__mcmp>
 800935e:	2800      	cmp	r0, #0
 8009360:	9b08      	ldr	r3, [sp, #32]
 8009362:	dc02      	bgt.n	800936a <_dtoa_r+0xaba>
 8009364:	d1de      	bne.n	8009324 <_dtoa_r+0xa74>
 8009366:	07da      	lsls	r2, r3, #31
 8009368:	d5dc      	bpl.n	8009324 <_dtoa_r+0xa74>
 800936a:	2b39      	cmp	r3, #57	; 0x39
 800936c:	d1d8      	bne.n	8009320 <_dtoa_r+0xa70>
 800936e:	2339      	movs	r3, #57	; 0x39
 8009370:	9a04      	ldr	r2, [sp, #16]
 8009372:	7013      	strb	r3, [r2, #0]
 8009374:	463b      	mov	r3, r7
 8009376:	461f      	mov	r7, r3
 8009378:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800937c:	3b01      	subs	r3, #1
 800937e:	2a39      	cmp	r2, #57	; 0x39
 8009380:	d050      	beq.n	8009424 <_dtoa_r+0xb74>
 8009382:	3201      	adds	r2, #1
 8009384:	701a      	strb	r2, [r3, #0]
 8009386:	e747      	b.n	8009218 <_dtoa_r+0x968>
 8009388:	2a00      	cmp	r2, #0
 800938a:	dd03      	ble.n	8009394 <_dtoa_r+0xae4>
 800938c:	2b39      	cmp	r3, #57	; 0x39
 800938e:	d0ee      	beq.n	800936e <_dtoa_r+0xabe>
 8009390:	3301      	adds	r3, #1
 8009392:	e7c7      	b.n	8009324 <_dtoa_r+0xa74>
 8009394:	9a08      	ldr	r2, [sp, #32]
 8009396:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009398:	f802 3c01 	strb.w	r3, [r2, #-1]
 800939c:	428a      	cmp	r2, r1
 800939e:	d02a      	beq.n	80093f6 <_dtoa_r+0xb46>
 80093a0:	4659      	mov	r1, fp
 80093a2:	2300      	movs	r3, #0
 80093a4:	220a      	movs	r2, #10
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 fd6c 	bl	8009e84 <__multadd>
 80093ac:	45b0      	cmp	r8, r6
 80093ae:	4683      	mov	fp, r0
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	f04f 020a 	mov.w	r2, #10
 80093b8:	4641      	mov	r1, r8
 80093ba:	4628      	mov	r0, r5
 80093bc:	d107      	bne.n	80093ce <_dtoa_r+0xb1e>
 80093be:	f000 fd61 	bl	8009e84 <__multadd>
 80093c2:	4680      	mov	r8, r0
 80093c4:	4606      	mov	r6, r0
 80093c6:	9b08      	ldr	r3, [sp, #32]
 80093c8:	3301      	adds	r3, #1
 80093ca:	9308      	str	r3, [sp, #32]
 80093cc:	e775      	b.n	80092ba <_dtoa_r+0xa0a>
 80093ce:	f000 fd59 	bl	8009e84 <__multadd>
 80093d2:	4631      	mov	r1, r6
 80093d4:	4680      	mov	r8, r0
 80093d6:	2300      	movs	r3, #0
 80093d8:	220a      	movs	r2, #10
 80093da:	4628      	mov	r0, r5
 80093dc:	f000 fd52 	bl	8009e84 <__multadd>
 80093e0:	4606      	mov	r6, r0
 80093e2:	e7f0      	b.n	80093c6 <_dtoa_r+0xb16>
 80093e4:	f1b9 0f00 	cmp.w	r9, #0
 80093e8:	bfcc      	ite	gt
 80093ea:	464f      	movgt	r7, r9
 80093ec:	2701      	movle	r7, #1
 80093ee:	f04f 0800 	mov.w	r8, #0
 80093f2:	9a03      	ldr	r2, [sp, #12]
 80093f4:	4417      	add	r7, r2
 80093f6:	4659      	mov	r1, fp
 80093f8:	2201      	movs	r2, #1
 80093fa:	4628      	mov	r0, r5
 80093fc:	9308      	str	r3, [sp, #32]
 80093fe:	f000 ff37 	bl	800a270 <__lshift>
 8009402:	4621      	mov	r1, r4
 8009404:	4683      	mov	fp, r0
 8009406:	f000 ffa3 	bl	800a350 <__mcmp>
 800940a:	2800      	cmp	r0, #0
 800940c:	dcb2      	bgt.n	8009374 <_dtoa_r+0xac4>
 800940e:	d102      	bne.n	8009416 <_dtoa_r+0xb66>
 8009410:	9b08      	ldr	r3, [sp, #32]
 8009412:	07db      	lsls	r3, r3, #31
 8009414:	d4ae      	bmi.n	8009374 <_dtoa_r+0xac4>
 8009416:	463b      	mov	r3, r7
 8009418:	461f      	mov	r7, r3
 800941a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800941e:	2a30      	cmp	r2, #48	; 0x30
 8009420:	d0fa      	beq.n	8009418 <_dtoa_r+0xb68>
 8009422:	e6f9      	b.n	8009218 <_dtoa_r+0x968>
 8009424:	9a03      	ldr	r2, [sp, #12]
 8009426:	429a      	cmp	r2, r3
 8009428:	d1a5      	bne.n	8009376 <_dtoa_r+0xac6>
 800942a:	2331      	movs	r3, #49	; 0x31
 800942c:	f10a 0a01 	add.w	sl, sl, #1
 8009430:	e779      	b.n	8009326 <_dtoa_r+0xa76>
 8009432:	4b14      	ldr	r3, [pc, #80]	; (8009484 <_dtoa_r+0xbd4>)
 8009434:	f7ff baa8 	b.w	8008988 <_dtoa_r+0xd8>
 8009438:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800943a:	2b00      	cmp	r3, #0
 800943c:	f47f aa81 	bne.w	8008942 <_dtoa_r+0x92>
 8009440:	4b11      	ldr	r3, [pc, #68]	; (8009488 <_dtoa_r+0xbd8>)
 8009442:	f7ff baa1 	b.w	8008988 <_dtoa_r+0xd8>
 8009446:	f1b9 0f00 	cmp.w	r9, #0
 800944a:	dc03      	bgt.n	8009454 <_dtoa_r+0xba4>
 800944c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800944e:	2b02      	cmp	r3, #2
 8009450:	f73f aecb 	bgt.w	80091ea <_dtoa_r+0x93a>
 8009454:	9f03      	ldr	r7, [sp, #12]
 8009456:	4621      	mov	r1, r4
 8009458:	4658      	mov	r0, fp
 800945a:	f7ff f99d 	bl	8008798 <quorem>
 800945e:	9a03      	ldr	r2, [sp, #12]
 8009460:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009464:	f807 3b01 	strb.w	r3, [r7], #1
 8009468:	1aba      	subs	r2, r7, r2
 800946a:	4591      	cmp	r9, r2
 800946c:	ddba      	ble.n	80093e4 <_dtoa_r+0xb34>
 800946e:	4659      	mov	r1, fp
 8009470:	2300      	movs	r3, #0
 8009472:	220a      	movs	r2, #10
 8009474:	4628      	mov	r0, r5
 8009476:	f000 fd05 	bl	8009e84 <__multadd>
 800947a:	4683      	mov	fp, r0
 800947c:	e7eb      	b.n	8009456 <_dtoa_r+0xba6>
 800947e:	bf00      	nop
 8009480:	0800d080 	.word	0x0800d080
 8009484:	0800ce84 	.word	0x0800ce84
 8009488:	0800d001 	.word	0x0800d001

0800948c <std>:
 800948c:	2300      	movs	r3, #0
 800948e:	b510      	push	{r4, lr}
 8009490:	4604      	mov	r4, r0
 8009492:	e9c0 3300 	strd	r3, r3, [r0]
 8009496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800949a:	6083      	str	r3, [r0, #8]
 800949c:	8181      	strh	r1, [r0, #12]
 800949e:	6643      	str	r3, [r0, #100]	; 0x64
 80094a0:	81c2      	strh	r2, [r0, #14]
 80094a2:	6183      	str	r3, [r0, #24]
 80094a4:	4619      	mov	r1, r3
 80094a6:	2208      	movs	r2, #8
 80094a8:	305c      	adds	r0, #92	; 0x5c
 80094aa:	f7fd fc35 	bl	8006d18 <memset>
 80094ae:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <std+0x38>)
 80094b0:	6224      	str	r4, [r4, #32]
 80094b2:	6263      	str	r3, [r4, #36]	; 0x24
 80094b4:	4b04      	ldr	r3, [pc, #16]	; (80094c8 <std+0x3c>)
 80094b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80094b8:	4b04      	ldr	r3, [pc, #16]	; (80094cc <std+0x40>)
 80094ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094bc:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <std+0x44>)
 80094be:	6323      	str	r3, [r4, #48]	; 0x30
 80094c0:	bd10      	pop	{r4, pc}
 80094c2:	bf00      	nop
 80094c4:	0800aea5 	.word	0x0800aea5
 80094c8:	0800aec7 	.word	0x0800aec7
 80094cc:	0800aeff 	.word	0x0800aeff
 80094d0:	0800af23 	.word	0x0800af23

080094d4 <_cleanup_r>:
 80094d4:	4901      	ldr	r1, [pc, #4]	; (80094dc <_cleanup_r+0x8>)
 80094d6:	f000 b8af 	b.w	8009638 <_fwalk_reent>
 80094da:	bf00      	nop
 80094dc:	0800b275 	.word	0x0800b275

080094e0 <__sfmoreglue>:
 80094e0:	2268      	movs	r2, #104	; 0x68
 80094e2:	b570      	push	{r4, r5, r6, lr}
 80094e4:	1e4d      	subs	r5, r1, #1
 80094e6:	4355      	muls	r5, r2
 80094e8:	460e      	mov	r6, r1
 80094ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094ee:	f001 f99b 	bl	800a828 <_malloc_r>
 80094f2:	4604      	mov	r4, r0
 80094f4:	b140      	cbz	r0, 8009508 <__sfmoreglue+0x28>
 80094f6:	2100      	movs	r1, #0
 80094f8:	e9c0 1600 	strd	r1, r6, [r0]
 80094fc:	300c      	adds	r0, #12
 80094fe:	60a0      	str	r0, [r4, #8]
 8009500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009504:	f7fd fc08 	bl	8006d18 <memset>
 8009508:	4620      	mov	r0, r4
 800950a:	bd70      	pop	{r4, r5, r6, pc}

0800950c <__sfp_lock_acquire>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__sfp_lock_acquire+0x8>)
 800950e:	f000 bc1e 	b.w	8009d4e <__retarget_lock_acquire_recursive>
 8009512:	bf00      	nop
 8009514:	20000ad1 	.word	0x20000ad1

08009518 <__sfp_lock_release>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__sfp_lock_release+0x8>)
 800951a:	f000 bc19 	b.w	8009d50 <__retarget_lock_release_recursive>
 800951e:	bf00      	nop
 8009520:	20000ad1 	.word	0x20000ad1

08009524 <__sinit_lock_acquire>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__sinit_lock_acquire+0x8>)
 8009526:	f000 bc12 	b.w	8009d4e <__retarget_lock_acquire_recursive>
 800952a:	bf00      	nop
 800952c:	20000ad2 	.word	0x20000ad2

08009530 <__sinit_lock_release>:
 8009530:	4801      	ldr	r0, [pc, #4]	; (8009538 <__sinit_lock_release+0x8>)
 8009532:	f000 bc0d 	b.w	8009d50 <__retarget_lock_release_recursive>
 8009536:	bf00      	nop
 8009538:	20000ad2 	.word	0x20000ad2

0800953c <__sinit>:
 800953c:	b510      	push	{r4, lr}
 800953e:	4604      	mov	r4, r0
 8009540:	f7ff fff0 	bl	8009524 <__sinit_lock_acquire>
 8009544:	69a3      	ldr	r3, [r4, #24]
 8009546:	b11b      	cbz	r3, 8009550 <__sinit+0x14>
 8009548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800954c:	f7ff bff0 	b.w	8009530 <__sinit_lock_release>
 8009550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009554:	6523      	str	r3, [r4, #80]	; 0x50
 8009556:	4b13      	ldr	r3, [pc, #76]	; (80095a4 <__sinit+0x68>)
 8009558:	4a13      	ldr	r2, [pc, #76]	; (80095a8 <__sinit+0x6c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	62a2      	str	r2, [r4, #40]	; 0x28
 800955e:	42a3      	cmp	r3, r4
 8009560:	bf08      	it	eq
 8009562:	2301      	moveq	r3, #1
 8009564:	4620      	mov	r0, r4
 8009566:	bf08      	it	eq
 8009568:	61a3      	streq	r3, [r4, #24]
 800956a:	f000 f81f 	bl	80095ac <__sfp>
 800956e:	6060      	str	r0, [r4, #4]
 8009570:	4620      	mov	r0, r4
 8009572:	f000 f81b 	bl	80095ac <__sfp>
 8009576:	60a0      	str	r0, [r4, #8]
 8009578:	4620      	mov	r0, r4
 800957a:	f000 f817 	bl	80095ac <__sfp>
 800957e:	2200      	movs	r2, #0
 8009580:	2104      	movs	r1, #4
 8009582:	60e0      	str	r0, [r4, #12]
 8009584:	6860      	ldr	r0, [r4, #4]
 8009586:	f7ff ff81 	bl	800948c <std>
 800958a:	2201      	movs	r2, #1
 800958c:	2109      	movs	r1, #9
 800958e:	68a0      	ldr	r0, [r4, #8]
 8009590:	f7ff ff7c 	bl	800948c <std>
 8009594:	2202      	movs	r2, #2
 8009596:	2112      	movs	r1, #18
 8009598:	68e0      	ldr	r0, [r4, #12]
 800959a:	f7ff ff77 	bl	800948c <std>
 800959e:	2301      	movs	r3, #1
 80095a0:	61a3      	str	r3, [r4, #24]
 80095a2:	e7d1      	b.n	8009548 <__sinit+0xc>
 80095a4:	0800ce70 	.word	0x0800ce70
 80095a8:	080094d5 	.word	0x080094d5

080095ac <__sfp>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	4607      	mov	r7, r0
 80095b0:	f7ff ffac 	bl	800950c <__sfp_lock_acquire>
 80095b4:	4b1e      	ldr	r3, [pc, #120]	; (8009630 <__sfp+0x84>)
 80095b6:	681e      	ldr	r6, [r3, #0]
 80095b8:	69b3      	ldr	r3, [r6, #24]
 80095ba:	b913      	cbnz	r3, 80095c2 <__sfp+0x16>
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff ffbd 	bl	800953c <__sinit>
 80095c2:	3648      	adds	r6, #72	; 0x48
 80095c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	d503      	bpl.n	80095d4 <__sfp+0x28>
 80095cc:	6833      	ldr	r3, [r6, #0]
 80095ce:	b30b      	cbz	r3, 8009614 <__sfp+0x68>
 80095d0:	6836      	ldr	r6, [r6, #0]
 80095d2:	e7f7      	b.n	80095c4 <__sfp+0x18>
 80095d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095d8:	b9d5      	cbnz	r5, 8009610 <__sfp+0x64>
 80095da:	4b16      	ldr	r3, [pc, #88]	; (8009634 <__sfp+0x88>)
 80095dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095e0:	60e3      	str	r3, [r4, #12]
 80095e2:	6665      	str	r5, [r4, #100]	; 0x64
 80095e4:	f000 fbb2 	bl	8009d4c <__retarget_lock_init_recursive>
 80095e8:	f7ff ff96 	bl	8009518 <__sfp_lock_release>
 80095ec:	2208      	movs	r2, #8
 80095ee:	4629      	mov	r1, r5
 80095f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095f8:	6025      	str	r5, [r4, #0]
 80095fa:	61a5      	str	r5, [r4, #24]
 80095fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009600:	f7fd fb8a 	bl	8006d18 <memset>
 8009604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800960c:	4620      	mov	r0, r4
 800960e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009610:	3468      	adds	r4, #104	; 0x68
 8009612:	e7d9      	b.n	80095c8 <__sfp+0x1c>
 8009614:	2104      	movs	r1, #4
 8009616:	4638      	mov	r0, r7
 8009618:	f7ff ff62 	bl	80094e0 <__sfmoreglue>
 800961c:	4604      	mov	r4, r0
 800961e:	6030      	str	r0, [r6, #0]
 8009620:	2800      	cmp	r0, #0
 8009622:	d1d5      	bne.n	80095d0 <__sfp+0x24>
 8009624:	f7ff ff78 	bl	8009518 <__sfp_lock_release>
 8009628:	230c      	movs	r3, #12
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	e7ee      	b.n	800960c <__sfp+0x60>
 800962e:	bf00      	nop
 8009630:	0800ce70 	.word	0x0800ce70
 8009634:	ffff0001 	.word	0xffff0001

08009638 <_fwalk_reent>:
 8009638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800963c:	4606      	mov	r6, r0
 800963e:	4688      	mov	r8, r1
 8009640:	2700      	movs	r7, #0
 8009642:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800964a:	f1b9 0901 	subs.w	r9, r9, #1
 800964e:	d505      	bpl.n	800965c <_fwalk_reent+0x24>
 8009650:	6824      	ldr	r4, [r4, #0]
 8009652:	2c00      	cmp	r4, #0
 8009654:	d1f7      	bne.n	8009646 <_fwalk_reent+0xe>
 8009656:	4638      	mov	r0, r7
 8009658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965c:	89ab      	ldrh	r3, [r5, #12]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d907      	bls.n	8009672 <_fwalk_reent+0x3a>
 8009662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009666:	3301      	adds	r3, #1
 8009668:	d003      	beq.n	8009672 <_fwalk_reent+0x3a>
 800966a:	4629      	mov	r1, r5
 800966c:	4630      	mov	r0, r6
 800966e:	47c0      	blx	r8
 8009670:	4307      	orrs	r7, r0
 8009672:	3568      	adds	r5, #104	; 0x68
 8009674:	e7e9      	b.n	800964a <_fwalk_reent+0x12>

08009676 <rshift>:
 8009676:	6903      	ldr	r3, [r0, #16]
 8009678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800967c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009680:	f100 0414 	add.w	r4, r0, #20
 8009684:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009688:	dd46      	ble.n	8009718 <rshift+0xa2>
 800968a:	f011 011f 	ands.w	r1, r1, #31
 800968e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009692:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009696:	d10c      	bne.n	80096b2 <rshift+0x3c>
 8009698:	4629      	mov	r1, r5
 800969a:	f100 0710 	add.w	r7, r0, #16
 800969e:	42b1      	cmp	r1, r6
 80096a0:	d335      	bcc.n	800970e <rshift+0x98>
 80096a2:	1a9b      	subs	r3, r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	1eea      	subs	r2, r5, #3
 80096a8:	4296      	cmp	r6, r2
 80096aa:	bf38      	it	cc
 80096ac:	2300      	movcc	r3, #0
 80096ae:	4423      	add	r3, r4
 80096b0:	e015      	b.n	80096de <rshift+0x68>
 80096b2:	46a1      	mov	r9, r4
 80096b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096b8:	f1c1 0820 	rsb	r8, r1, #32
 80096bc:	40cf      	lsrs	r7, r1
 80096be:	f105 0e04 	add.w	lr, r5, #4
 80096c2:	4576      	cmp	r6, lr
 80096c4:	46f4      	mov	ip, lr
 80096c6:	d816      	bhi.n	80096f6 <rshift+0x80>
 80096c8:	1a9a      	subs	r2, r3, r2
 80096ca:	0092      	lsls	r2, r2, #2
 80096cc:	3a04      	subs	r2, #4
 80096ce:	3501      	adds	r5, #1
 80096d0:	42ae      	cmp	r6, r5
 80096d2:	bf38      	it	cc
 80096d4:	2200      	movcc	r2, #0
 80096d6:	18a3      	adds	r3, r4, r2
 80096d8:	50a7      	str	r7, [r4, r2]
 80096da:	b107      	cbz	r7, 80096de <rshift+0x68>
 80096dc:	3304      	adds	r3, #4
 80096de:	42a3      	cmp	r3, r4
 80096e0:	eba3 0204 	sub.w	r2, r3, r4
 80096e4:	bf08      	it	eq
 80096e6:	2300      	moveq	r3, #0
 80096e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096ec:	6102      	str	r2, [r0, #16]
 80096ee:	bf08      	it	eq
 80096f0:	6143      	streq	r3, [r0, #20]
 80096f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096f6:	f8dc c000 	ldr.w	ip, [ip]
 80096fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80096fe:	ea4c 0707 	orr.w	r7, ip, r7
 8009702:	f849 7b04 	str.w	r7, [r9], #4
 8009706:	f85e 7b04 	ldr.w	r7, [lr], #4
 800970a:	40cf      	lsrs	r7, r1
 800970c:	e7d9      	b.n	80096c2 <rshift+0x4c>
 800970e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009712:	f847 cf04 	str.w	ip, [r7, #4]!
 8009716:	e7c2      	b.n	800969e <rshift+0x28>
 8009718:	4623      	mov	r3, r4
 800971a:	e7e0      	b.n	80096de <rshift+0x68>

0800971c <__hexdig_fun>:
 800971c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009720:	2b09      	cmp	r3, #9
 8009722:	d802      	bhi.n	800972a <__hexdig_fun+0xe>
 8009724:	3820      	subs	r0, #32
 8009726:	b2c0      	uxtb	r0, r0
 8009728:	4770      	bx	lr
 800972a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800972e:	2b05      	cmp	r3, #5
 8009730:	d801      	bhi.n	8009736 <__hexdig_fun+0x1a>
 8009732:	3847      	subs	r0, #71	; 0x47
 8009734:	e7f7      	b.n	8009726 <__hexdig_fun+0xa>
 8009736:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800973a:	2b05      	cmp	r3, #5
 800973c:	d801      	bhi.n	8009742 <__hexdig_fun+0x26>
 800973e:	3827      	subs	r0, #39	; 0x27
 8009740:	e7f1      	b.n	8009726 <__hexdig_fun+0xa>
 8009742:	2000      	movs	r0, #0
 8009744:	4770      	bx	lr
	...

08009748 <__gethex>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	b08b      	sub	sp, #44	; 0x2c
 800974e:	9305      	str	r3, [sp, #20]
 8009750:	4bb2      	ldr	r3, [pc, #712]	; (8009a1c <__gethex+0x2d4>)
 8009752:	9002      	str	r0, [sp, #8]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	468b      	mov	fp, r1
 8009758:	4618      	mov	r0, r3
 800975a:	4690      	mov	r8, r2
 800975c:	9303      	str	r3, [sp, #12]
 800975e:	f7f6 fd63 	bl	8000228 <strlen>
 8009762:	4682      	mov	sl, r0
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	f8db 2000 	ldr.w	r2, [fp]
 800976a:	4403      	add	r3, r0
 800976c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009770:	9306      	str	r3, [sp, #24]
 8009772:	1c93      	adds	r3, r2, #2
 8009774:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009778:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800977c:	32fe      	adds	r2, #254	; 0xfe
 800977e:	18d1      	adds	r1, r2, r3
 8009780:	461f      	mov	r7, r3
 8009782:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009786:	9101      	str	r1, [sp, #4]
 8009788:	2830      	cmp	r0, #48	; 0x30
 800978a:	d0f8      	beq.n	800977e <__gethex+0x36>
 800978c:	f7ff ffc6 	bl	800971c <__hexdig_fun>
 8009790:	4604      	mov	r4, r0
 8009792:	2800      	cmp	r0, #0
 8009794:	d13a      	bne.n	800980c <__gethex+0xc4>
 8009796:	4652      	mov	r2, sl
 8009798:	4638      	mov	r0, r7
 800979a:	9903      	ldr	r1, [sp, #12]
 800979c:	f001 fbc5 	bl	800af2a <strncmp>
 80097a0:	4605      	mov	r5, r0
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d166      	bne.n	8009874 <__gethex+0x12c>
 80097a6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80097aa:	eb07 060a 	add.w	r6, r7, sl
 80097ae:	f7ff ffb5 	bl	800971c <__hexdig_fun>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d060      	beq.n	8009878 <__gethex+0x130>
 80097b6:	4633      	mov	r3, r6
 80097b8:	7818      	ldrb	r0, [r3, #0]
 80097ba:	461f      	mov	r7, r3
 80097bc:	2830      	cmp	r0, #48	; 0x30
 80097be:	f103 0301 	add.w	r3, r3, #1
 80097c2:	d0f9      	beq.n	80097b8 <__gethex+0x70>
 80097c4:	f7ff ffaa 	bl	800971c <__hexdig_fun>
 80097c8:	2301      	movs	r3, #1
 80097ca:	fab0 f480 	clz	r4, r0
 80097ce:	4635      	mov	r5, r6
 80097d0:	0964      	lsrs	r4, r4, #5
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	463a      	mov	r2, r7
 80097d6:	4616      	mov	r6, r2
 80097d8:	7830      	ldrb	r0, [r6, #0]
 80097da:	3201      	adds	r2, #1
 80097dc:	f7ff ff9e 	bl	800971c <__hexdig_fun>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d1f8      	bne.n	80097d6 <__gethex+0x8e>
 80097e4:	4652      	mov	r2, sl
 80097e6:	4630      	mov	r0, r6
 80097e8:	9903      	ldr	r1, [sp, #12]
 80097ea:	f001 fb9e 	bl	800af2a <strncmp>
 80097ee:	b980      	cbnz	r0, 8009812 <__gethex+0xca>
 80097f0:	b94d      	cbnz	r5, 8009806 <__gethex+0xbe>
 80097f2:	eb06 050a 	add.w	r5, r6, sl
 80097f6:	462a      	mov	r2, r5
 80097f8:	4616      	mov	r6, r2
 80097fa:	7830      	ldrb	r0, [r6, #0]
 80097fc:	3201      	adds	r2, #1
 80097fe:	f7ff ff8d 	bl	800971c <__hexdig_fun>
 8009802:	2800      	cmp	r0, #0
 8009804:	d1f8      	bne.n	80097f8 <__gethex+0xb0>
 8009806:	1bad      	subs	r5, r5, r6
 8009808:	00ad      	lsls	r5, r5, #2
 800980a:	e004      	b.n	8009816 <__gethex+0xce>
 800980c:	2400      	movs	r4, #0
 800980e:	4625      	mov	r5, r4
 8009810:	e7e0      	b.n	80097d4 <__gethex+0x8c>
 8009812:	2d00      	cmp	r5, #0
 8009814:	d1f7      	bne.n	8009806 <__gethex+0xbe>
 8009816:	7833      	ldrb	r3, [r6, #0]
 8009818:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800981c:	2b50      	cmp	r3, #80	; 0x50
 800981e:	d139      	bne.n	8009894 <__gethex+0x14c>
 8009820:	7873      	ldrb	r3, [r6, #1]
 8009822:	2b2b      	cmp	r3, #43	; 0x2b
 8009824:	d02a      	beq.n	800987c <__gethex+0x134>
 8009826:	2b2d      	cmp	r3, #45	; 0x2d
 8009828:	d02c      	beq.n	8009884 <__gethex+0x13c>
 800982a:	f04f 0900 	mov.w	r9, #0
 800982e:	1c71      	adds	r1, r6, #1
 8009830:	7808      	ldrb	r0, [r1, #0]
 8009832:	f7ff ff73 	bl	800971c <__hexdig_fun>
 8009836:	1e43      	subs	r3, r0, #1
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b18      	cmp	r3, #24
 800983c:	d82a      	bhi.n	8009894 <__gethex+0x14c>
 800983e:	f1a0 0210 	sub.w	r2, r0, #16
 8009842:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009846:	f7ff ff69 	bl	800971c <__hexdig_fun>
 800984a:	1e43      	subs	r3, r0, #1
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b18      	cmp	r3, #24
 8009850:	d91b      	bls.n	800988a <__gethex+0x142>
 8009852:	f1b9 0f00 	cmp.w	r9, #0
 8009856:	d000      	beq.n	800985a <__gethex+0x112>
 8009858:	4252      	negs	r2, r2
 800985a:	4415      	add	r5, r2
 800985c:	f8cb 1000 	str.w	r1, [fp]
 8009860:	b1d4      	cbz	r4, 8009898 <__gethex+0x150>
 8009862:	9b01      	ldr	r3, [sp, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	bf14      	ite	ne
 8009868:	2700      	movne	r7, #0
 800986a:	2706      	moveq	r7, #6
 800986c:	4638      	mov	r0, r7
 800986e:	b00b      	add	sp, #44	; 0x2c
 8009870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009874:	463e      	mov	r6, r7
 8009876:	4625      	mov	r5, r4
 8009878:	2401      	movs	r4, #1
 800987a:	e7cc      	b.n	8009816 <__gethex+0xce>
 800987c:	f04f 0900 	mov.w	r9, #0
 8009880:	1cb1      	adds	r1, r6, #2
 8009882:	e7d5      	b.n	8009830 <__gethex+0xe8>
 8009884:	f04f 0901 	mov.w	r9, #1
 8009888:	e7fa      	b.n	8009880 <__gethex+0x138>
 800988a:	230a      	movs	r3, #10
 800988c:	fb03 0202 	mla	r2, r3, r2, r0
 8009890:	3a10      	subs	r2, #16
 8009892:	e7d6      	b.n	8009842 <__gethex+0xfa>
 8009894:	4631      	mov	r1, r6
 8009896:	e7e1      	b.n	800985c <__gethex+0x114>
 8009898:	4621      	mov	r1, r4
 800989a:	1bf3      	subs	r3, r6, r7
 800989c:	3b01      	subs	r3, #1
 800989e:	2b07      	cmp	r3, #7
 80098a0:	dc0a      	bgt.n	80098b8 <__gethex+0x170>
 80098a2:	9802      	ldr	r0, [sp, #8]
 80098a4:	f000 fa8c 	bl	8009dc0 <_Balloc>
 80098a8:	4604      	mov	r4, r0
 80098aa:	b940      	cbnz	r0, 80098be <__gethex+0x176>
 80098ac:	4602      	mov	r2, r0
 80098ae:	21de      	movs	r1, #222	; 0xde
 80098b0:	4b5b      	ldr	r3, [pc, #364]	; (8009a20 <__gethex+0x2d8>)
 80098b2:	485c      	ldr	r0, [pc, #368]	; (8009a24 <__gethex+0x2dc>)
 80098b4:	f001 fc2e 	bl	800b114 <__assert_func>
 80098b8:	3101      	adds	r1, #1
 80098ba:	105b      	asrs	r3, r3, #1
 80098bc:	e7ef      	b.n	800989e <__gethex+0x156>
 80098be:	f04f 0b00 	mov.w	fp, #0
 80098c2:	f100 0914 	add.w	r9, r0, #20
 80098c6:	f1ca 0301 	rsb	r3, sl, #1
 80098ca:	f8cd 9010 	str.w	r9, [sp, #16]
 80098ce:	f8cd b004 	str.w	fp, [sp, #4]
 80098d2:	9308      	str	r3, [sp, #32]
 80098d4:	42b7      	cmp	r7, r6
 80098d6:	d33f      	bcc.n	8009958 <__gethex+0x210>
 80098d8:	9f04      	ldr	r7, [sp, #16]
 80098da:	9b01      	ldr	r3, [sp, #4]
 80098dc:	f847 3b04 	str.w	r3, [r7], #4
 80098e0:	eba7 0709 	sub.w	r7, r7, r9
 80098e4:	10bf      	asrs	r7, r7, #2
 80098e6:	6127      	str	r7, [r4, #16]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f000 fb5b 	bl	8009fa4 <__hi0bits>
 80098ee:	017f      	lsls	r7, r7, #5
 80098f0:	f8d8 6000 	ldr.w	r6, [r8]
 80098f4:	1a3f      	subs	r7, r7, r0
 80098f6:	42b7      	cmp	r7, r6
 80098f8:	dd62      	ble.n	80099c0 <__gethex+0x278>
 80098fa:	1bbf      	subs	r7, r7, r6
 80098fc:	4639      	mov	r1, r7
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 fef5 	bl	800a6ee <__any_on>
 8009904:	4682      	mov	sl, r0
 8009906:	b1a8      	cbz	r0, 8009934 <__gethex+0x1ec>
 8009908:	f04f 0a01 	mov.w	sl, #1
 800990c:	1e7b      	subs	r3, r7, #1
 800990e:	1159      	asrs	r1, r3, #5
 8009910:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009914:	f003 021f 	and.w	r2, r3, #31
 8009918:	fa0a f202 	lsl.w	r2, sl, r2
 800991c:	420a      	tst	r2, r1
 800991e:	d009      	beq.n	8009934 <__gethex+0x1ec>
 8009920:	4553      	cmp	r3, sl
 8009922:	dd05      	ble.n	8009930 <__gethex+0x1e8>
 8009924:	4620      	mov	r0, r4
 8009926:	1eb9      	subs	r1, r7, #2
 8009928:	f000 fee1 	bl	800a6ee <__any_on>
 800992c:	2800      	cmp	r0, #0
 800992e:	d144      	bne.n	80099ba <__gethex+0x272>
 8009930:	f04f 0a02 	mov.w	sl, #2
 8009934:	4639      	mov	r1, r7
 8009936:	4620      	mov	r0, r4
 8009938:	f7ff fe9d 	bl	8009676 <rshift>
 800993c:	443d      	add	r5, r7
 800993e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009942:	42ab      	cmp	r3, r5
 8009944:	da4a      	bge.n	80099dc <__gethex+0x294>
 8009946:	4621      	mov	r1, r4
 8009948:	9802      	ldr	r0, [sp, #8]
 800994a:	f000 fa79 	bl	8009e40 <_Bfree>
 800994e:	2300      	movs	r3, #0
 8009950:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009952:	27a3      	movs	r7, #163	; 0xa3
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	e789      	b.n	800986c <__gethex+0x124>
 8009958:	1e73      	subs	r3, r6, #1
 800995a:	9a06      	ldr	r2, [sp, #24]
 800995c:	9307      	str	r3, [sp, #28]
 800995e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009962:	4293      	cmp	r3, r2
 8009964:	d019      	beq.n	800999a <__gethex+0x252>
 8009966:	f1bb 0f20 	cmp.w	fp, #32
 800996a:	d107      	bne.n	800997c <__gethex+0x234>
 800996c:	9b04      	ldr	r3, [sp, #16]
 800996e:	9a01      	ldr	r2, [sp, #4]
 8009970:	f843 2b04 	str.w	r2, [r3], #4
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	2300      	movs	r3, #0
 8009978:	469b      	mov	fp, r3
 800997a:	9301      	str	r3, [sp, #4]
 800997c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009980:	f7ff fecc 	bl	800971c <__hexdig_fun>
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	f000 000f 	and.w	r0, r0, #15
 800998a:	fa00 f00b 	lsl.w	r0, r0, fp
 800998e:	4303      	orrs	r3, r0
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	f10b 0b04 	add.w	fp, fp, #4
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	e00d      	b.n	80099b6 <__gethex+0x26e>
 800999a:	9a08      	ldr	r2, [sp, #32]
 800999c:	1e73      	subs	r3, r6, #1
 800999e:	4413      	add	r3, r2
 80099a0:	42bb      	cmp	r3, r7
 80099a2:	d3e0      	bcc.n	8009966 <__gethex+0x21e>
 80099a4:	4618      	mov	r0, r3
 80099a6:	4652      	mov	r2, sl
 80099a8:	9903      	ldr	r1, [sp, #12]
 80099aa:	9309      	str	r3, [sp, #36]	; 0x24
 80099ac:	f001 fabd 	bl	800af2a <strncmp>
 80099b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d1d7      	bne.n	8009966 <__gethex+0x21e>
 80099b6:	461e      	mov	r6, r3
 80099b8:	e78c      	b.n	80098d4 <__gethex+0x18c>
 80099ba:	f04f 0a03 	mov.w	sl, #3
 80099be:	e7b9      	b.n	8009934 <__gethex+0x1ec>
 80099c0:	da09      	bge.n	80099d6 <__gethex+0x28e>
 80099c2:	1bf7      	subs	r7, r6, r7
 80099c4:	4621      	mov	r1, r4
 80099c6:	463a      	mov	r2, r7
 80099c8:	9802      	ldr	r0, [sp, #8]
 80099ca:	f000 fc51 	bl	800a270 <__lshift>
 80099ce:	4604      	mov	r4, r0
 80099d0:	1bed      	subs	r5, r5, r7
 80099d2:	f100 0914 	add.w	r9, r0, #20
 80099d6:	f04f 0a00 	mov.w	sl, #0
 80099da:	e7b0      	b.n	800993e <__gethex+0x1f6>
 80099dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80099e0:	42a8      	cmp	r0, r5
 80099e2:	dd72      	ble.n	8009aca <__gethex+0x382>
 80099e4:	1b45      	subs	r5, r0, r5
 80099e6:	42ae      	cmp	r6, r5
 80099e8:	dc35      	bgt.n	8009a56 <__gethex+0x30e>
 80099ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d029      	beq.n	8009a46 <__gethex+0x2fe>
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d02b      	beq.n	8009a4e <__gethex+0x306>
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d11c      	bne.n	8009a34 <__gethex+0x2ec>
 80099fa:	42ae      	cmp	r6, r5
 80099fc:	d11a      	bne.n	8009a34 <__gethex+0x2ec>
 80099fe:	2e01      	cmp	r6, #1
 8009a00:	d112      	bne.n	8009a28 <__gethex+0x2e0>
 8009a02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a06:	9a05      	ldr	r2, [sp, #20]
 8009a08:	2762      	movs	r7, #98	; 0x62
 8009a0a:	6013      	str	r3, [r2, #0]
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	6123      	str	r3, [r4, #16]
 8009a10:	f8c9 3000 	str.w	r3, [r9]
 8009a14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a16:	601c      	str	r4, [r3, #0]
 8009a18:	e728      	b.n	800986c <__gethex+0x124>
 8009a1a:	bf00      	nop
 8009a1c:	0800d15c 	.word	0x0800d15c
 8009a20:	0800d080 	.word	0x0800d080
 8009a24:	0800d0f4 	.word	0x0800d0f4
 8009a28:	4620      	mov	r0, r4
 8009a2a:	1e71      	subs	r1, r6, #1
 8009a2c:	f000 fe5f 	bl	800a6ee <__any_on>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d1e6      	bne.n	8009a02 <__gethex+0x2ba>
 8009a34:	4621      	mov	r1, r4
 8009a36:	9802      	ldr	r0, [sp, #8]
 8009a38:	f000 fa02 	bl	8009e40 <_Bfree>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a40:	2750      	movs	r7, #80	; 0x50
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	e712      	b.n	800986c <__gethex+0x124>
 8009a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1f3      	bne.n	8009a34 <__gethex+0x2ec>
 8009a4c:	e7d9      	b.n	8009a02 <__gethex+0x2ba>
 8009a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1d6      	bne.n	8009a02 <__gethex+0x2ba>
 8009a54:	e7ee      	b.n	8009a34 <__gethex+0x2ec>
 8009a56:	1e6f      	subs	r7, r5, #1
 8009a58:	f1ba 0f00 	cmp.w	sl, #0
 8009a5c:	d132      	bne.n	8009ac4 <__gethex+0x37c>
 8009a5e:	b127      	cbz	r7, 8009a6a <__gethex+0x322>
 8009a60:	4639      	mov	r1, r7
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fe43 	bl	800a6ee <__any_on>
 8009a68:	4682      	mov	sl, r0
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	117b      	asrs	r3, r7, #5
 8009a6e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009a72:	f007 071f 	and.w	r7, r7, #31
 8009a76:	fa01 f707 	lsl.w	r7, r1, r7
 8009a7a:	421f      	tst	r7, r3
 8009a7c:	f04f 0702 	mov.w	r7, #2
 8009a80:	4629      	mov	r1, r5
 8009a82:	4620      	mov	r0, r4
 8009a84:	bf18      	it	ne
 8009a86:	f04a 0a02 	orrne.w	sl, sl, #2
 8009a8a:	1b76      	subs	r6, r6, r5
 8009a8c:	f7ff fdf3 	bl	8009676 <rshift>
 8009a90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a94:	f1ba 0f00 	cmp.w	sl, #0
 8009a98:	d048      	beq.n	8009b2c <__gethex+0x3e4>
 8009a9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d015      	beq.n	8009ace <__gethex+0x386>
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d017      	beq.n	8009ad6 <__gethex+0x38e>
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d109      	bne.n	8009abe <__gethex+0x376>
 8009aaa:	f01a 0f02 	tst.w	sl, #2
 8009aae:	d006      	beq.n	8009abe <__gethex+0x376>
 8009ab0:	f8d9 0000 	ldr.w	r0, [r9]
 8009ab4:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ab8:	f01a 0f01 	tst.w	sl, #1
 8009abc:	d10e      	bne.n	8009adc <__gethex+0x394>
 8009abe:	f047 0710 	orr.w	r7, r7, #16
 8009ac2:	e033      	b.n	8009b2c <__gethex+0x3e4>
 8009ac4:	f04f 0a01 	mov.w	sl, #1
 8009ac8:	e7cf      	b.n	8009a6a <__gethex+0x322>
 8009aca:	2701      	movs	r7, #1
 8009acc:	e7e2      	b.n	8009a94 <__gethex+0x34c>
 8009ace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ad0:	f1c3 0301 	rsb	r3, r3, #1
 8009ad4:	9315      	str	r3, [sp, #84]	; 0x54
 8009ad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0f0      	beq.n	8009abe <__gethex+0x376>
 8009adc:	f04f 0c00 	mov.w	ip, #0
 8009ae0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ae4:	f104 0314 	add.w	r3, r4, #20
 8009ae8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009aec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009afa:	d01c      	beq.n	8009b36 <__gethex+0x3ee>
 8009afc:	3201      	adds	r2, #1
 8009afe:	6002      	str	r2, [r0, #0]
 8009b00:	2f02      	cmp	r7, #2
 8009b02:	f104 0314 	add.w	r3, r4, #20
 8009b06:	d13d      	bne.n	8009b84 <__gethex+0x43c>
 8009b08:	f8d8 2000 	ldr.w	r2, [r8]
 8009b0c:	3a01      	subs	r2, #1
 8009b0e:	42b2      	cmp	r2, r6
 8009b10:	d10a      	bne.n	8009b28 <__gethex+0x3e0>
 8009b12:	2201      	movs	r2, #1
 8009b14:	1171      	asrs	r1, r6, #5
 8009b16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b1a:	f006 061f 	and.w	r6, r6, #31
 8009b1e:	fa02 f606 	lsl.w	r6, r2, r6
 8009b22:	421e      	tst	r6, r3
 8009b24:	bf18      	it	ne
 8009b26:	4617      	movne	r7, r2
 8009b28:	f047 0720 	orr.w	r7, r7, #32
 8009b2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b2e:	601c      	str	r4, [r3, #0]
 8009b30:	9b05      	ldr	r3, [sp, #20]
 8009b32:	601d      	str	r5, [r3, #0]
 8009b34:	e69a      	b.n	800986c <__gethex+0x124>
 8009b36:	4299      	cmp	r1, r3
 8009b38:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b3c:	d8d8      	bhi.n	8009af0 <__gethex+0x3a8>
 8009b3e:	68a3      	ldr	r3, [r4, #8]
 8009b40:	459b      	cmp	fp, r3
 8009b42:	db17      	blt.n	8009b74 <__gethex+0x42c>
 8009b44:	6861      	ldr	r1, [r4, #4]
 8009b46:	9802      	ldr	r0, [sp, #8]
 8009b48:	3101      	adds	r1, #1
 8009b4a:	f000 f939 	bl	8009dc0 <_Balloc>
 8009b4e:	4681      	mov	r9, r0
 8009b50:	b918      	cbnz	r0, 8009b5a <__gethex+0x412>
 8009b52:	4602      	mov	r2, r0
 8009b54:	2184      	movs	r1, #132	; 0x84
 8009b56:	4b19      	ldr	r3, [pc, #100]	; (8009bbc <__gethex+0x474>)
 8009b58:	e6ab      	b.n	80098b2 <__gethex+0x16a>
 8009b5a:	6922      	ldr	r2, [r4, #16]
 8009b5c:	f104 010c 	add.w	r1, r4, #12
 8009b60:	3202      	adds	r2, #2
 8009b62:	0092      	lsls	r2, r2, #2
 8009b64:	300c      	adds	r0, #12
 8009b66:	f000 f91d 	bl	8009da4 <memcpy>
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	9802      	ldr	r0, [sp, #8]
 8009b6e:	f000 f967 	bl	8009e40 <_Bfree>
 8009b72:	464c      	mov	r4, r9
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	6122      	str	r2, [r4, #16]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b80:	615a      	str	r2, [r3, #20]
 8009b82:	e7bd      	b.n	8009b00 <__gethex+0x3b8>
 8009b84:	6922      	ldr	r2, [r4, #16]
 8009b86:	455a      	cmp	r2, fp
 8009b88:	dd0b      	ble.n	8009ba2 <__gethex+0x45a>
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f7ff fd72 	bl	8009676 <rshift>
 8009b92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b96:	3501      	adds	r5, #1
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	f6ff aed4 	blt.w	8009946 <__gethex+0x1fe>
 8009b9e:	2701      	movs	r7, #1
 8009ba0:	e7c2      	b.n	8009b28 <__gethex+0x3e0>
 8009ba2:	f016 061f 	ands.w	r6, r6, #31
 8009ba6:	d0fa      	beq.n	8009b9e <__gethex+0x456>
 8009ba8:	4453      	add	r3, sl
 8009baa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bae:	f000 f9f9 	bl	8009fa4 <__hi0bits>
 8009bb2:	f1c6 0620 	rsb	r6, r6, #32
 8009bb6:	42b0      	cmp	r0, r6
 8009bb8:	dbe7      	blt.n	8009b8a <__gethex+0x442>
 8009bba:	e7f0      	b.n	8009b9e <__gethex+0x456>
 8009bbc:	0800d080 	.word	0x0800d080

08009bc0 <L_shift>:
 8009bc0:	f1c2 0208 	rsb	r2, r2, #8
 8009bc4:	0092      	lsls	r2, r2, #2
 8009bc6:	b570      	push	{r4, r5, r6, lr}
 8009bc8:	f1c2 0620 	rsb	r6, r2, #32
 8009bcc:	6843      	ldr	r3, [r0, #4]
 8009bce:	6804      	ldr	r4, [r0, #0]
 8009bd0:	fa03 f506 	lsl.w	r5, r3, r6
 8009bd4:	432c      	orrs	r4, r5
 8009bd6:	40d3      	lsrs	r3, r2
 8009bd8:	6004      	str	r4, [r0, #0]
 8009bda:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bde:	4288      	cmp	r0, r1
 8009be0:	d3f4      	bcc.n	8009bcc <L_shift+0xc>
 8009be2:	bd70      	pop	{r4, r5, r6, pc}

08009be4 <__match>:
 8009be4:	b530      	push	{r4, r5, lr}
 8009be6:	6803      	ldr	r3, [r0, #0]
 8009be8:	3301      	adds	r3, #1
 8009bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bee:	b914      	cbnz	r4, 8009bf6 <__match+0x12>
 8009bf0:	6003      	str	r3, [r0, #0]
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	bd30      	pop	{r4, r5, pc}
 8009bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bfa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009bfe:	2d19      	cmp	r5, #25
 8009c00:	bf98      	it	ls
 8009c02:	3220      	addls	r2, #32
 8009c04:	42a2      	cmp	r2, r4
 8009c06:	d0f0      	beq.n	8009bea <__match+0x6>
 8009c08:	2000      	movs	r0, #0
 8009c0a:	e7f3      	b.n	8009bf4 <__match+0x10>

08009c0c <__hexnan>:
 8009c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	2500      	movs	r5, #0
 8009c12:	680b      	ldr	r3, [r1, #0]
 8009c14:	4682      	mov	sl, r0
 8009c16:	115e      	asrs	r6, r3, #5
 8009c18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c1c:	f013 031f 	ands.w	r3, r3, #31
 8009c20:	bf18      	it	ne
 8009c22:	3604      	addne	r6, #4
 8009c24:	1f37      	subs	r7, r6, #4
 8009c26:	46b9      	mov	r9, r7
 8009c28:	463c      	mov	r4, r7
 8009c2a:	46ab      	mov	fp, r5
 8009c2c:	b087      	sub	sp, #28
 8009c2e:	4690      	mov	r8, r2
 8009c30:	6802      	ldr	r2, [r0, #0]
 8009c32:	9301      	str	r3, [sp, #4]
 8009c34:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c38:	9502      	str	r5, [sp, #8]
 8009c3a:	7851      	ldrb	r1, [r2, #1]
 8009c3c:	1c53      	adds	r3, r2, #1
 8009c3e:	9303      	str	r3, [sp, #12]
 8009c40:	b341      	cbz	r1, 8009c94 <__hexnan+0x88>
 8009c42:	4608      	mov	r0, r1
 8009c44:	9205      	str	r2, [sp, #20]
 8009c46:	9104      	str	r1, [sp, #16]
 8009c48:	f7ff fd68 	bl	800971c <__hexdig_fun>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d14f      	bne.n	8009cf0 <__hexnan+0xe4>
 8009c50:	9904      	ldr	r1, [sp, #16]
 8009c52:	9a05      	ldr	r2, [sp, #20]
 8009c54:	2920      	cmp	r1, #32
 8009c56:	d818      	bhi.n	8009c8a <__hexnan+0x7e>
 8009c58:	9b02      	ldr	r3, [sp, #8]
 8009c5a:	459b      	cmp	fp, r3
 8009c5c:	dd13      	ble.n	8009c86 <__hexnan+0x7a>
 8009c5e:	454c      	cmp	r4, r9
 8009c60:	d206      	bcs.n	8009c70 <__hexnan+0x64>
 8009c62:	2d07      	cmp	r5, #7
 8009c64:	dc04      	bgt.n	8009c70 <__hexnan+0x64>
 8009c66:	462a      	mov	r2, r5
 8009c68:	4649      	mov	r1, r9
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f7ff ffa8 	bl	8009bc0 <L_shift>
 8009c70:	4544      	cmp	r4, r8
 8009c72:	d950      	bls.n	8009d16 <__hexnan+0x10a>
 8009c74:	2300      	movs	r3, #0
 8009c76:	f1a4 0904 	sub.w	r9, r4, #4
 8009c7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c7e:	461d      	mov	r5, r3
 8009c80:	464c      	mov	r4, r9
 8009c82:	f8cd b008 	str.w	fp, [sp, #8]
 8009c86:	9a03      	ldr	r2, [sp, #12]
 8009c88:	e7d7      	b.n	8009c3a <__hexnan+0x2e>
 8009c8a:	2929      	cmp	r1, #41	; 0x29
 8009c8c:	d156      	bne.n	8009d3c <__hexnan+0x130>
 8009c8e:	3202      	adds	r2, #2
 8009c90:	f8ca 2000 	str.w	r2, [sl]
 8009c94:	f1bb 0f00 	cmp.w	fp, #0
 8009c98:	d050      	beq.n	8009d3c <__hexnan+0x130>
 8009c9a:	454c      	cmp	r4, r9
 8009c9c:	d206      	bcs.n	8009cac <__hexnan+0xa0>
 8009c9e:	2d07      	cmp	r5, #7
 8009ca0:	dc04      	bgt.n	8009cac <__hexnan+0xa0>
 8009ca2:	462a      	mov	r2, r5
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7ff ff8a 	bl	8009bc0 <L_shift>
 8009cac:	4544      	cmp	r4, r8
 8009cae:	d934      	bls.n	8009d1a <__hexnan+0x10e>
 8009cb0:	4623      	mov	r3, r4
 8009cb2:	f1a8 0204 	sub.w	r2, r8, #4
 8009cb6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cba:	429f      	cmp	r7, r3
 8009cbc:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cc0:	d2f9      	bcs.n	8009cb6 <__hexnan+0xaa>
 8009cc2:	1b3b      	subs	r3, r7, r4
 8009cc4:	f023 0303 	bic.w	r3, r3, #3
 8009cc8:	3304      	adds	r3, #4
 8009cca:	3401      	adds	r4, #1
 8009ccc:	3e03      	subs	r6, #3
 8009cce:	42b4      	cmp	r4, r6
 8009cd0:	bf88      	it	hi
 8009cd2:	2304      	movhi	r3, #4
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	4443      	add	r3, r8
 8009cd8:	f843 2b04 	str.w	r2, [r3], #4
 8009cdc:	429f      	cmp	r7, r3
 8009cde:	d2fb      	bcs.n	8009cd8 <__hexnan+0xcc>
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	b91b      	cbnz	r3, 8009cec <__hexnan+0xe0>
 8009ce4:	4547      	cmp	r7, r8
 8009ce6:	d127      	bne.n	8009d38 <__hexnan+0x12c>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	2005      	movs	r0, #5
 8009cee:	e026      	b.n	8009d3e <__hexnan+0x132>
 8009cf0:	3501      	adds	r5, #1
 8009cf2:	2d08      	cmp	r5, #8
 8009cf4:	f10b 0b01 	add.w	fp, fp, #1
 8009cf8:	dd06      	ble.n	8009d08 <__hexnan+0xfc>
 8009cfa:	4544      	cmp	r4, r8
 8009cfc:	d9c3      	bls.n	8009c86 <__hexnan+0x7a>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2501      	movs	r5, #1
 8009d02:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d06:	3c04      	subs	r4, #4
 8009d08:	6822      	ldr	r2, [r4, #0]
 8009d0a:	f000 000f 	and.w	r0, r0, #15
 8009d0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d12:	6022      	str	r2, [r4, #0]
 8009d14:	e7b7      	b.n	8009c86 <__hexnan+0x7a>
 8009d16:	2508      	movs	r5, #8
 8009d18:	e7b5      	b.n	8009c86 <__hexnan+0x7a>
 8009d1a:	9b01      	ldr	r3, [sp, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0df      	beq.n	8009ce0 <__hexnan+0xd4>
 8009d20:	f04f 32ff 	mov.w	r2, #4294967295
 8009d24:	f1c3 0320 	rsb	r3, r3, #32
 8009d28:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d30:	401a      	ands	r2, r3
 8009d32:	f846 2c04 	str.w	r2, [r6, #-4]
 8009d36:	e7d3      	b.n	8009ce0 <__hexnan+0xd4>
 8009d38:	3f04      	subs	r7, #4
 8009d3a:	e7d1      	b.n	8009ce0 <__hexnan+0xd4>
 8009d3c:	2004      	movs	r0, #4
 8009d3e:	b007      	add	sp, #28
 8009d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d44 <_localeconv_r>:
 8009d44:	4800      	ldr	r0, [pc, #0]	; (8009d48 <_localeconv_r+0x4>)
 8009d46:	4770      	bx	lr
 8009d48:	2000016c 	.word	0x2000016c

08009d4c <__retarget_lock_init_recursive>:
 8009d4c:	4770      	bx	lr

08009d4e <__retarget_lock_acquire_recursive>:
 8009d4e:	4770      	bx	lr

08009d50 <__retarget_lock_release_recursive>:
 8009d50:	4770      	bx	lr
	...

08009d54 <malloc>:
 8009d54:	4b02      	ldr	r3, [pc, #8]	; (8009d60 <malloc+0xc>)
 8009d56:	4601      	mov	r1, r0
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	f000 bd65 	b.w	800a828 <_malloc_r>
 8009d5e:	bf00      	nop
 8009d60:	20000014 	.word	0x20000014

08009d64 <__ascii_mbtowc>:
 8009d64:	b082      	sub	sp, #8
 8009d66:	b901      	cbnz	r1, 8009d6a <__ascii_mbtowc+0x6>
 8009d68:	a901      	add	r1, sp, #4
 8009d6a:	b142      	cbz	r2, 8009d7e <__ascii_mbtowc+0x1a>
 8009d6c:	b14b      	cbz	r3, 8009d82 <__ascii_mbtowc+0x1e>
 8009d6e:	7813      	ldrb	r3, [r2, #0]
 8009d70:	600b      	str	r3, [r1, #0]
 8009d72:	7812      	ldrb	r2, [r2, #0]
 8009d74:	1e10      	subs	r0, r2, #0
 8009d76:	bf18      	it	ne
 8009d78:	2001      	movne	r0, #1
 8009d7a:	b002      	add	sp, #8
 8009d7c:	4770      	bx	lr
 8009d7e:	4610      	mov	r0, r2
 8009d80:	e7fb      	b.n	8009d7a <__ascii_mbtowc+0x16>
 8009d82:	f06f 0001 	mvn.w	r0, #1
 8009d86:	e7f8      	b.n	8009d7a <__ascii_mbtowc+0x16>

08009d88 <memchr>:
 8009d88:	4603      	mov	r3, r0
 8009d8a:	b510      	push	{r4, lr}
 8009d8c:	b2c9      	uxtb	r1, r1
 8009d8e:	4402      	add	r2, r0
 8009d90:	4293      	cmp	r3, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	d101      	bne.n	8009d9a <memchr+0x12>
 8009d96:	2000      	movs	r0, #0
 8009d98:	e003      	b.n	8009da2 <memchr+0x1a>
 8009d9a:	7804      	ldrb	r4, [r0, #0]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	428c      	cmp	r4, r1
 8009da0:	d1f6      	bne.n	8009d90 <memchr+0x8>
 8009da2:	bd10      	pop	{r4, pc}

08009da4 <memcpy>:
 8009da4:	440a      	add	r2, r1
 8009da6:	4291      	cmp	r1, r2
 8009da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dac:	d100      	bne.n	8009db0 <memcpy+0xc>
 8009dae:	4770      	bx	lr
 8009db0:	b510      	push	{r4, lr}
 8009db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009db6:	4291      	cmp	r1, r2
 8009db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dbc:	d1f9      	bne.n	8009db2 <memcpy+0xe>
 8009dbe:	bd10      	pop	{r4, pc}

08009dc0 <_Balloc>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	b976      	cbnz	r6, 8009de8 <_Balloc+0x28>
 8009dca:	2010      	movs	r0, #16
 8009dcc:	f7ff ffc2 	bl	8009d54 <malloc>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	6260      	str	r0, [r4, #36]	; 0x24
 8009dd4:	b920      	cbnz	r0, 8009de0 <_Balloc+0x20>
 8009dd6:	2166      	movs	r1, #102	; 0x66
 8009dd8:	4b17      	ldr	r3, [pc, #92]	; (8009e38 <_Balloc+0x78>)
 8009dda:	4818      	ldr	r0, [pc, #96]	; (8009e3c <_Balloc+0x7c>)
 8009ddc:	f001 f99a 	bl	800b114 <__assert_func>
 8009de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009de4:	6006      	str	r6, [r0, #0]
 8009de6:	60c6      	str	r6, [r0, #12]
 8009de8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009dea:	68f3      	ldr	r3, [r6, #12]
 8009dec:	b183      	cbz	r3, 8009e10 <_Balloc+0x50>
 8009dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009df6:	b9b8      	cbnz	r0, 8009e28 <_Balloc+0x68>
 8009df8:	2101      	movs	r1, #1
 8009dfa:	fa01 f605 	lsl.w	r6, r1, r5
 8009dfe:	1d72      	adds	r2, r6, #5
 8009e00:	4620      	mov	r0, r4
 8009e02:	0092      	lsls	r2, r2, #2
 8009e04:	f000 fc94 	bl	800a730 <_calloc_r>
 8009e08:	b160      	cbz	r0, 8009e24 <_Balloc+0x64>
 8009e0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e0e:	e00e      	b.n	8009e2e <_Balloc+0x6e>
 8009e10:	2221      	movs	r2, #33	; 0x21
 8009e12:	2104      	movs	r1, #4
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 fc8b 	bl	800a730 <_calloc_r>
 8009e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e1c:	60f0      	str	r0, [r6, #12]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1e4      	bne.n	8009dee <_Balloc+0x2e>
 8009e24:	2000      	movs	r0, #0
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	6802      	ldr	r2, [r0, #0]
 8009e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e34:	e7f7      	b.n	8009e26 <_Balloc+0x66>
 8009e36:	bf00      	nop
 8009e38:	0800d00e 	.word	0x0800d00e
 8009e3c:	0800d170 	.word	0x0800d170

08009e40 <_Bfree>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	b976      	cbnz	r6, 8009e68 <_Bfree+0x28>
 8009e4a:	2010      	movs	r0, #16
 8009e4c:	f7ff ff82 	bl	8009d54 <malloc>
 8009e50:	4602      	mov	r2, r0
 8009e52:	6268      	str	r0, [r5, #36]	; 0x24
 8009e54:	b920      	cbnz	r0, 8009e60 <_Bfree+0x20>
 8009e56:	218a      	movs	r1, #138	; 0x8a
 8009e58:	4b08      	ldr	r3, [pc, #32]	; (8009e7c <_Bfree+0x3c>)
 8009e5a:	4809      	ldr	r0, [pc, #36]	; (8009e80 <_Bfree+0x40>)
 8009e5c:	f001 f95a 	bl	800b114 <__assert_func>
 8009e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e64:	6006      	str	r6, [r0, #0]
 8009e66:	60c6      	str	r6, [r0, #12]
 8009e68:	b13c      	cbz	r4, 8009e7a <_Bfree+0x3a>
 8009e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e6c:	6862      	ldr	r2, [r4, #4]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e74:	6021      	str	r1, [r4, #0]
 8009e76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	0800d00e 	.word	0x0800d00e
 8009e80:	0800d170 	.word	0x0800d170

08009e84 <__multadd>:
 8009e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e88:	4607      	mov	r7, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	461e      	mov	r6, r3
 8009e8e:	2000      	movs	r0, #0
 8009e90:	690d      	ldr	r5, [r1, #16]
 8009e92:	f101 0c14 	add.w	ip, r1, #20
 8009e96:	f8dc 3000 	ldr.w	r3, [ip]
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	b299      	uxth	r1, r3
 8009e9e:	fb02 6101 	mla	r1, r2, r1, r6
 8009ea2:	0c1e      	lsrs	r6, r3, #16
 8009ea4:	0c0b      	lsrs	r3, r1, #16
 8009ea6:	fb02 3306 	mla	r3, r2, r6, r3
 8009eaa:	b289      	uxth	r1, r1
 8009eac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009eb0:	4285      	cmp	r5, r0
 8009eb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009eb6:	f84c 1b04 	str.w	r1, [ip], #4
 8009eba:	dcec      	bgt.n	8009e96 <__multadd+0x12>
 8009ebc:	b30e      	cbz	r6, 8009f02 <__multadd+0x7e>
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	dc19      	bgt.n	8009ef8 <__multadd+0x74>
 8009ec4:	6861      	ldr	r1, [r4, #4]
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	3101      	adds	r1, #1
 8009eca:	f7ff ff79 	bl	8009dc0 <_Balloc>
 8009ece:	4680      	mov	r8, r0
 8009ed0:	b928      	cbnz	r0, 8009ede <__multadd+0x5a>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	21b5      	movs	r1, #181	; 0xb5
 8009ed6:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <__multadd+0x84>)
 8009ed8:	480c      	ldr	r0, [pc, #48]	; (8009f0c <__multadd+0x88>)
 8009eda:	f001 f91b 	bl	800b114 <__assert_func>
 8009ede:	6922      	ldr	r2, [r4, #16]
 8009ee0:	f104 010c 	add.w	r1, r4, #12
 8009ee4:	3202      	adds	r2, #2
 8009ee6:	0092      	lsls	r2, r2, #2
 8009ee8:	300c      	adds	r0, #12
 8009eea:	f7ff ff5b 	bl	8009da4 <memcpy>
 8009eee:	4621      	mov	r1, r4
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f7ff ffa5 	bl	8009e40 <_Bfree>
 8009ef6:	4644      	mov	r4, r8
 8009ef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009efc:	3501      	adds	r5, #1
 8009efe:	615e      	str	r6, [r3, #20]
 8009f00:	6125      	str	r5, [r4, #16]
 8009f02:	4620      	mov	r0, r4
 8009f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f08:	0800d080 	.word	0x0800d080
 8009f0c:	0800d170 	.word	0x0800d170

08009f10 <__s2b>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4615      	mov	r5, r2
 8009f16:	2209      	movs	r2, #9
 8009f18:	461f      	mov	r7, r3
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f22:	4606      	mov	r6, r0
 8009f24:	2201      	movs	r2, #1
 8009f26:	2100      	movs	r1, #0
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	db09      	blt.n	8009f40 <__s2b+0x30>
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f7ff ff47 	bl	8009dc0 <_Balloc>
 8009f32:	b940      	cbnz	r0, 8009f46 <__s2b+0x36>
 8009f34:	4602      	mov	r2, r0
 8009f36:	21ce      	movs	r1, #206	; 0xce
 8009f38:	4b18      	ldr	r3, [pc, #96]	; (8009f9c <__s2b+0x8c>)
 8009f3a:	4819      	ldr	r0, [pc, #100]	; (8009fa0 <__s2b+0x90>)
 8009f3c:	f001 f8ea 	bl	800b114 <__assert_func>
 8009f40:	0052      	lsls	r2, r2, #1
 8009f42:	3101      	adds	r1, #1
 8009f44:	e7f0      	b.n	8009f28 <__s2b+0x18>
 8009f46:	9b08      	ldr	r3, [sp, #32]
 8009f48:	2d09      	cmp	r5, #9
 8009f4a:	6143      	str	r3, [r0, #20]
 8009f4c:	f04f 0301 	mov.w	r3, #1
 8009f50:	6103      	str	r3, [r0, #16]
 8009f52:	dd16      	ble.n	8009f82 <__s2b+0x72>
 8009f54:	f104 0909 	add.w	r9, r4, #9
 8009f58:	46c8      	mov	r8, r9
 8009f5a:	442c      	add	r4, r5
 8009f5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f60:	4601      	mov	r1, r0
 8009f62:	220a      	movs	r2, #10
 8009f64:	4630      	mov	r0, r6
 8009f66:	3b30      	subs	r3, #48	; 0x30
 8009f68:	f7ff ff8c 	bl	8009e84 <__multadd>
 8009f6c:	45a0      	cmp	r8, r4
 8009f6e:	d1f5      	bne.n	8009f5c <__s2b+0x4c>
 8009f70:	f1a5 0408 	sub.w	r4, r5, #8
 8009f74:	444c      	add	r4, r9
 8009f76:	1b2d      	subs	r5, r5, r4
 8009f78:	1963      	adds	r3, r4, r5
 8009f7a:	42bb      	cmp	r3, r7
 8009f7c:	db04      	blt.n	8009f88 <__s2b+0x78>
 8009f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f82:	2509      	movs	r5, #9
 8009f84:	340a      	adds	r4, #10
 8009f86:	e7f6      	b.n	8009f76 <__s2b+0x66>
 8009f88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f8c:	4601      	mov	r1, r0
 8009f8e:	220a      	movs	r2, #10
 8009f90:	4630      	mov	r0, r6
 8009f92:	3b30      	subs	r3, #48	; 0x30
 8009f94:	f7ff ff76 	bl	8009e84 <__multadd>
 8009f98:	e7ee      	b.n	8009f78 <__s2b+0x68>
 8009f9a:	bf00      	nop
 8009f9c:	0800d080 	.word	0x0800d080
 8009fa0:	0800d170 	.word	0x0800d170

08009fa4 <__hi0bits>:
 8009fa4:	0c02      	lsrs	r2, r0, #16
 8009fa6:	0412      	lsls	r2, r2, #16
 8009fa8:	4603      	mov	r3, r0
 8009faa:	b9ca      	cbnz	r2, 8009fe0 <__hi0bits+0x3c>
 8009fac:	0403      	lsls	r3, r0, #16
 8009fae:	2010      	movs	r0, #16
 8009fb0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009fb4:	bf04      	itt	eq
 8009fb6:	021b      	lsleq	r3, r3, #8
 8009fb8:	3008      	addeq	r0, #8
 8009fba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009fbe:	bf04      	itt	eq
 8009fc0:	011b      	lsleq	r3, r3, #4
 8009fc2:	3004      	addeq	r0, #4
 8009fc4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009fc8:	bf04      	itt	eq
 8009fca:	009b      	lsleq	r3, r3, #2
 8009fcc:	3002      	addeq	r0, #2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	db05      	blt.n	8009fde <__hi0bits+0x3a>
 8009fd2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009fd6:	f100 0001 	add.w	r0, r0, #1
 8009fda:	bf08      	it	eq
 8009fdc:	2020      	moveq	r0, #32
 8009fde:	4770      	bx	lr
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	e7e5      	b.n	8009fb0 <__hi0bits+0xc>

08009fe4 <__lo0bits>:
 8009fe4:	6803      	ldr	r3, [r0, #0]
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	f013 0007 	ands.w	r0, r3, #7
 8009fec:	d00b      	beq.n	800a006 <__lo0bits+0x22>
 8009fee:	07d9      	lsls	r1, r3, #31
 8009ff0:	d421      	bmi.n	800a036 <__lo0bits+0x52>
 8009ff2:	0798      	lsls	r0, r3, #30
 8009ff4:	bf49      	itett	mi
 8009ff6:	085b      	lsrmi	r3, r3, #1
 8009ff8:	089b      	lsrpl	r3, r3, #2
 8009ffa:	2001      	movmi	r0, #1
 8009ffc:	6013      	strmi	r3, [r2, #0]
 8009ffe:	bf5c      	itt	pl
 800a000:	2002      	movpl	r0, #2
 800a002:	6013      	strpl	r3, [r2, #0]
 800a004:	4770      	bx	lr
 800a006:	b299      	uxth	r1, r3
 800a008:	b909      	cbnz	r1, 800a00e <__lo0bits+0x2a>
 800a00a:	2010      	movs	r0, #16
 800a00c:	0c1b      	lsrs	r3, r3, #16
 800a00e:	b2d9      	uxtb	r1, r3
 800a010:	b909      	cbnz	r1, 800a016 <__lo0bits+0x32>
 800a012:	3008      	adds	r0, #8
 800a014:	0a1b      	lsrs	r3, r3, #8
 800a016:	0719      	lsls	r1, r3, #28
 800a018:	bf04      	itt	eq
 800a01a:	091b      	lsreq	r3, r3, #4
 800a01c:	3004      	addeq	r0, #4
 800a01e:	0799      	lsls	r1, r3, #30
 800a020:	bf04      	itt	eq
 800a022:	089b      	lsreq	r3, r3, #2
 800a024:	3002      	addeq	r0, #2
 800a026:	07d9      	lsls	r1, r3, #31
 800a028:	d403      	bmi.n	800a032 <__lo0bits+0x4e>
 800a02a:	085b      	lsrs	r3, r3, #1
 800a02c:	f100 0001 	add.w	r0, r0, #1
 800a030:	d003      	beq.n	800a03a <__lo0bits+0x56>
 800a032:	6013      	str	r3, [r2, #0]
 800a034:	4770      	bx	lr
 800a036:	2000      	movs	r0, #0
 800a038:	4770      	bx	lr
 800a03a:	2020      	movs	r0, #32
 800a03c:	4770      	bx	lr
	...

0800a040 <__i2b>:
 800a040:	b510      	push	{r4, lr}
 800a042:	460c      	mov	r4, r1
 800a044:	2101      	movs	r1, #1
 800a046:	f7ff febb 	bl	8009dc0 <_Balloc>
 800a04a:	4602      	mov	r2, r0
 800a04c:	b928      	cbnz	r0, 800a05a <__i2b+0x1a>
 800a04e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a052:	4b04      	ldr	r3, [pc, #16]	; (800a064 <__i2b+0x24>)
 800a054:	4804      	ldr	r0, [pc, #16]	; (800a068 <__i2b+0x28>)
 800a056:	f001 f85d 	bl	800b114 <__assert_func>
 800a05a:	2301      	movs	r3, #1
 800a05c:	6144      	str	r4, [r0, #20]
 800a05e:	6103      	str	r3, [r0, #16]
 800a060:	bd10      	pop	{r4, pc}
 800a062:	bf00      	nop
 800a064:	0800d080 	.word	0x0800d080
 800a068:	0800d170 	.word	0x0800d170

0800a06c <__multiply>:
 800a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a070:	4691      	mov	r9, r2
 800a072:	690a      	ldr	r2, [r1, #16]
 800a074:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a078:	460c      	mov	r4, r1
 800a07a:	429a      	cmp	r2, r3
 800a07c:	bfbe      	ittt	lt
 800a07e:	460b      	movlt	r3, r1
 800a080:	464c      	movlt	r4, r9
 800a082:	4699      	movlt	r9, r3
 800a084:	6927      	ldr	r7, [r4, #16]
 800a086:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a08a:	68a3      	ldr	r3, [r4, #8]
 800a08c:	6861      	ldr	r1, [r4, #4]
 800a08e:	eb07 060a 	add.w	r6, r7, sl
 800a092:	42b3      	cmp	r3, r6
 800a094:	b085      	sub	sp, #20
 800a096:	bfb8      	it	lt
 800a098:	3101      	addlt	r1, #1
 800a09a:	f7ff fe91 	bl	8009dc0 <_Balloc>
 800a09e:	b930      	cbnz	r0, 800a0ae <__multiply+0x42>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	f240 115d 	movw	r1, #349	; 0x15d
 800a0a6:	4b43      	ldr	r3, [pc, #268]	; (800a1b4 <__multiply+0x148>)
 800a0a8:	4843      	ldr	r0, [pc, #268]	; (800a1b8 <__multiply+0x14c>)
 800a0aa:	f001 f833 	bl	800b114 <__assert_func>
 800a0ae:	f100 0514 	add.w	r5, r0, #20
 800a0b2:	462b      	mov	r3, r5
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0ba:	4543      	cmp	r3, r8
 800a0bc:	d321      	bcc.n	800a102 <__multiply+0x96>
 800a0be:	f104 0314 	add.w	r3, r4, #20
 800a0c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a0c6:	f109 0314 	add.w	r3, r9, #20
 800a0ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a0ce:	9202      	str	r2, [sp, #8]
 800a0d0:	1b3a      	subs	r2, r7, r4
 800a0d2:	3a15      	subs	r2, #21
 800a0d4:	f022 0203 	bic.w	r2, r2, #3
 800a0d8:	3204      	adds	r2, #4
 800a0da:	f104 0115 	add.w	r1, r4, #21
 800a0de:	428f      	cmp	r7, r1
 800a0e0:	bf38      	it	cc
 800a0e2:	2204      	movcc	r2, #4
 800a0e4:	9201      	str	r2, [sp, #4]
 800a0e6:	9a02      	ldr	r2, [sp, #8]
 800a0e8:	9303      	str	r3, [sp, #12]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d80c      	bhi.n	800a108 <__multiply+0x9c>
 800a0ee:	2e00      	cmp	r6, #0
 800a0f0:	dd03      	ble.n	800a0fa <__multiply+0x8e>
 800a0f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d059      	beq.n	800a1ae <__multiply+0x142>
 800a0fa:	6106      	str	r6, [r0, #16]
 800a0fc:	b005      	add	sp, #20
 800a0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a102:	f843 2b04 	str.w	r2, [r3], #4
 800a106:	e7d8      	b.n	800a0ba <__multiply+0x4e>
 800a108:	f8b3 a000 	ldrh.w	sl, [r3]
 800a10c:	f1ba 0f00 	cmp.w	sl, #0
 800a110:	d023      	beq.n	800a15a <__multiply+0xee>
 800a112:	46a9      	mov	r9, r5
 800a114:	f04f 0c00 	mov.w	ip, #0
 800a118:	f104 0e14 	add.w	lr, r4, #20
 800a11c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a120:	f8d9 1000 	ldr.w	r1, [r9]
 800a124:	fa1f fb82 	uxth.w	fp, r2
 800a128:	b289      	uxth	r1, r1
 800a12a:	fb0a 110b 	mla	r1, sl, fp, r1
 800a12e:	4461      	add	r1, ip
 800a130:	f8d9 c000 	ldr.w	ip, [r9]
 800a134:	0c12      	lsrs	r2, r2, #16
 800a136:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a13a:	fb0a c202 	mla	r2, sl, r2, ip
 800a13e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a142:	b289      	uxth	r1, r1
 800a144:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a148:	4577      	cmp	r7, lr
 800a14a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a14e:	f849 1b04 	str.w	r1, [r9], #4
 800a152:	d8e3      	bhi.n	800a11c <__multiply+0xb0>
 800a154:	9a01      	ldr	r2, [sp, #4]
 800a156:	f845 c002 	str.w	ip, [r5, r2]
 800a15a:	9a03      	ldr	r2, [sp, #12]
 800a15c:	3304      	adds	r3, #4
 800a15e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a162:	f1b9 0f00 	cmp.w	r9, #0
 800a166:	d020      	beq.n	800a1aa <__multiply+0x13e>
 800a168:	46ae      	mov	lr, r5
 800a16a:	f04f 0a00 	mov.w	sl, #0
 800a16e:	6829      	ldr	r1, [r5, #0]
 800a170:	f104 0c14 	add.w	ip, r4, #20
 800a174:	f8bc b000 	ldrh.w	fp, [ip]
 800a178:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a17c:	b289      	uxth	r1, r1
 800a17e:	fb09 220b 	mla	r2, r9, fp, r2
 800a182:	4492      	add	sl, r2
 800a184:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a188:	f84e 1b04 	str.w	r1, [lr], #4
 800a18c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a190:	f8be 1000 	ldrh.w	r1, [lr]
 800a194:	0c12      	lsrs	r2, r2, #16
 800a196:	fb09 1102 	mla	r1, r9, r2, r1
 800a19a:	4567      	cmp	r7, ip
 800a19c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a1a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1a4:	d8e6      	bhi.n	800a174 <__multiply+0x108>
 800a1a6:	9a01      	ldr	r2, [sp, #4]
 800a1a8:	50a9      	str	r1, [r5, r2]
 800a1aa:	3504      	adds	r5, #4
 800a1ac:	e79b      	b.n	800a0e6 <__multiply+0x7a>
 800a1ae:	3e01      	subs	r6, #1
 800a1b0:	e79d      	b.n	800a0ee <__multiply+0x82>
 800a1b2:	bf00      	nop
 800a1b4:	0800d080 	.word	0x0800d080
 800a1b8:	0800d170 	.word	0x0800d170

0800a1bc <__pow5mult>:
 800a1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1c0:	4615      	mov	r5, r2
 800a1c2:	f012 0203 	ands.w	r2, r2, #3
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	460f      	mov	r7, r1
 800a1ca:	d007      	beq.n	800a1dc <__pow5mult+0x20>
 800a1cc:	4c25      	ldr	r4, [pc, #148]	; (800a264 <__pow5mult+0xa8>)
 800a1ce:	3a01      	subs	r2, #1
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1d6:	f7ff fe55 	bl	8009e84 <__multadd>
 800a1da:	4607      	mov	r7, r0
 800a1dc:	10ad      	asrs	r5, r5, #2
 800a1de:	d03d      	beq.n	800a25c <__pow5mult+0xa0>
 800a1e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a1e2:	b97c      	cbnz	r4, 800a204 <__pow5mult+0x48>
 800a1e4:	2010      	movs	r0, #16
 800a1e6:	f7ff fdb5 	bl	8009d54 <malloc>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	6270      	str	r0, [r6, #36]	; 0x24
 800a1ee:	b928      	cbnz	r0, 800a1fc <__pow5mult+0x40>
 800a1f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1f4:	4b1c      	ldr	r3, [pc, #112]	; (800a268 <__pow5mult+0xac>)
 800a1f6:	481d      	ldr	r0, [pc, #116]	; (800a26c <__pow5mult+0xb0>)
 800a1f8:	f000 ff8c 	bl	800b114 <__assert_func>
 800a1fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a200:	6004      	str	r4, [r0, #0]
 800a202:	60c4      	str	r4, [r0, #12]
 800a204:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a208:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a20c:	b94c      	cbnz	r4, 800a222 <__pow5mult+0x66>
 800a20e:	f240 2171 	movw	r1, #625	; 0x271
 800a212:	4630      	mov	r0, r6
 800a214:	f7ff ff14 	bl	800a040 <__i2b>
 800a218:	2300      	movs	r3, #0
 800a21a:	4604      	mov	r4, r0
 800a21c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	f04f 0900 	mov.w	r9, #0
 800a226:	07eb      	lsls	r3, r5, #31
 800a228:	d50a      	bpl.n	800a240 <__pow5mult+0x84>
 800a22a:	4639      	mov	r1, r7
 800a22c:	4622      	mov	r2, r4
 800a22e:	4630      	mov	r0, r6
 800a230:	f7ff ff1c 	bl	800a06c <__multiply>
 800a234:	4680      	mov	r8, r0
 800a236:	4639      	mov	r1, r7
 800a238:	4630      	mov	r0, r6
 800a23a:	f7ff fe01 	bl	8009e40 <_Bfree>
 800a23e:	4647      	mov	r7, r8
 800a240:	106d      	asrs	r5, r5, #1
 800a242:	d00b      	beq.n	800a25c <__pow5mult+0xa0>
 800a244:	6820      	ldr	r0, [r4, #0]
 800a246:	b938      	cbnz	r0, 800a258 <__pow5mult+0x9c>
 800a248:	4622      	mov	r2, r4
 800a24a:	4621      	mov	r1, r4
 800a24c:	4630      	mov	r0, r6
 800a24e:	f7ff ff0d 	bl	800a06c <__multiply>
 800a252:	6020      	str	r0, [r4, #0]
 800a254:	f8c0 9000 	str.w	r9, [r0]
 800a258:	4604      	mov	r4, r0
 800a25a:	e7e4      	b.n	800a226 <__pow5mult+0x6a>
 800a25c:	4638      	mov	r0, r7
 800a25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a262:	bf00      	nop
 800a264:	0800d2c0 	.word	0x0800d2c0
 800a268:	0800d00e 	.word	0x0800d00e
 800a26c:	0800d170 	.word	0x0800d170

0800a270 <__lshift>:
 800a270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a274:	460c      	mov	r4, r1
 800a276:	4607      	mov	r7, r0
 800a278:	4691      	mov	r9, r2
 800a27a:	6923      	ldr	r3, [r4, #16]
 800a27c:	6849      	ldr	r1, [r1, #4]
 800a27e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a282:	68a3      	ldr	r3, [r4, #8]
 800a284:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a288:	f108 0601 	add.w	r6, r8, #1
 800a28c:	42b3      	cmp	r3, r6
 800a28e:	db0b      	blt.n	800a2a8 <__lshift+0x38>
 800a290:	4638      	mov	r0, r7
 800a292:	f7ff fd95 	bl	8009dc0 <_Balloc>
 800a296:	4605      	mov	r5, r0
 800a298:	b948      	cbnz	r0, 800a2ae <__lshift+0x3e>
 800a29a:	4602      	mov	r2, r0
 800a29c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a2a0:	4b29      	ldr	r3, [pc, #164]	; (800a348 <__lshift+0xd8>)
 800a2a2:	482a      	ldr	r0, [pc, #168]	; (800a34c <__lshift+0xdc>)
 800a2a4:	f000 ff36 	bl	800b114 <__assert_func>
 800a2a8:	3101      	adds	r1, #1
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	e7ee      	b.n	800a28c <__lshift+0x1c>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f100 0114 	add.w	r1, r0, #20
 800a2b4:	f100 0210 	add.w	r2, r0, #16
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	4553      	cmp	r3, sl
 800a2bc:	db37      	blt.n	800a32e <__lshift+0xbe>
 800a2be:	6920      	ldr	r0, [r4, #16]
 800a2c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2c4:	f104 0314 	add.w	r3, r4, #20
 800a2c8:	f019 091f 	ands.w	r9, r9, #31
 800a2cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2d4:	d02f      	beq.n	800a336 <__lshift+0xc6>
 800a2d6:	468a      	mov	sl, r1
 800a2d8:	f04f 0c00 	mov.w	ip, #0
 800a2dc:	f1c9 0e20 	rsb	lr, r9, #32
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	fa02 f209 	lsl.w	r2, r2, r9
 800a2e6:	ea42 020c 	orr.w	r2, r2, ip
 800a2ea:	f84a 2b04 	str.w	r2, [sl], #4
 800a2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f2:	4298      	cmp	r0, r3
 800a2f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a2f8:	d8f2      	bhi.n	800a2e0 <__lshift+0x70>
 800a2fa:	1b03      	subs	r3, r0, r4
 800a2fc:	3b15      	subs	r3, #21
 800a2fe:	f023 0303 	bic.w	r3, r3, #3
 800a302:	3304      	adds	r3, #4
 800a304:	f104 0215 	add.w	r2, r4, #21
 800a308:	4290      	cmp	r0, r2
 800a30a:	bf38      	it	cc
 800a30c:	2304      	movcc	r3, #4
 800a30e:	f841 c003 	str.w	ip, [r1, r3]
 800a312:	f1bc 0f00 	cmp.w	ip, #0
 800a316:	d001      	beq.n	800a31c <__lshift+0xac>
 800a318:	f108 0602 	add.w	r6, r8, #2
 800a31c:	3e01      	subs	r6, #1
 800a31e:	4638      	mov	r0, r7
 800a320:	4621      	mov	r1, r4
 800a322:	612e      	str	r6, [r5, #16]
 800a324:	f7ff fd8c 	bl	8009e40 <_Bfree>
 800a328:	4628      	mov	r0, r5
 800a32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a332:	3301      	adds	r3, #1
 800a334:	e7c1      	b.n	800a2ba <__lshift+0x4a>
 800a336:	3904      	subs	r1, #4
 800a338:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33c:	4298      	cmp	r0, r3
 800a33e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a342:	d8f9      	bhi.n	800a338 <__lshift+0xc8>
 800a344:	e7ea      	b.n	800a31c <__lshift+0xac>
 800a346:	bf00      	nop
 800a348:	0800d080 	.word	0x0800d080
 800a34c:	0800d170 	.word	0x0800d170

0800a350 <__mcmp>:
 800a350:	4603      	mov	r3, r0
 800a352:	690a      	ldr	r2, [r1, #16]
 800a354:	6900      	ldr	r0, [r0, #16]
 800a356:	b530      	push	{r4, r5, lr}
 800a358:	1a80      	subs	r0, r0, r2
 800a35a:	d10d      	bne.n	800a378 <__mcmp+0x28>
 800a35c:	3314      	adds	r3, #20
 800a35e:	3114      	adds	r1, #20
 800a360:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a364:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a368:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a36c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a370:	4295      	cmp	r5, r2
 800a372:	d002      	beq.n	800a37a <__mcmp+0x2a>
 800a374:	d304      	bcc.n	800a380 <__mcmp+0x30>
 800a376:	2001      	movs	r0, #1
 800a378:	bd30      	pop	{r4, r5, pc}
 800a37a:	42a3      	cmp	r3, r4
 800a37c:	d3f4      	bcc.n	800a368 <__mcmp+0x18>
 800a37e:	e7fb      	b.n	800a378 <__mcmp+0x28>
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	e7f8      	b.n	800a378 <__mcmp+0x28>
	...

0800a388 <__mdiff>:
 800a388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	460d      	mov	r5, r1
 800a38e:	4607      	mov	r7, r0
 800a390:	4611      	mov	r1, r2
 800a392:	4628      	mov	r0, r5
 800a394:	4614      	mov	r4, r2
 800a396:	f7ff ffdb 	bl	800a350 <__mcmp>
 800a39a:	1e06      	subs	r6, r0, #0
 800a39c:	d111      	bne.n	800a3c2 <__mdiff+0x3a>
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f7ff fd0d 	bl	8009dc0 <_Balloc>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	b928      	cbnz	r0, 800a3b6 <__mdiff+0x2e>
 800a3aa:	f240 2132 	movw	r1, #562	; 0x232
 800a3ae:	4b3a      	ldr	r3, [pc, #232]	; (800a498 <__mdiff+0x110>)
 800a3b0:	483a      	ldr	r0, [pc, #232]	; (800a49c <__mdiff+0x114>)
 800a3b2:	f000 feaf 	bl	800b114 <__assert_func>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a3bc:	4610      	mov	r0, r2
 800a3be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c2:	bfa4      	itt	ge
 800a3c4:	4623      	movge	r3, r4
 800a3c6:	462c      	movge	r4, r5
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	6861      	ldr	r1, [r4, #4]
 800a3cc:	bfa6      	itte	ge
 800a3ce:	461d      	movge	r5, r3
 800a3d0:	2600      	movge	r6, #0
 800a3d2:	2601      	movlt	r6, #1
 800a3d4:	f7ff fcf4 	bl	8009dc0 <_Balloc>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	b918      	cbnz	r0, 800a3e4 <__mdiff+0x5c>
 800a3dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a3e0:	4b2d      	ldr	r3, [pc, #180]	; (800a498 <__mdiff+0x110>)
 800a3e2:	e7e5      	b.n	800a3b0 <__mdiff+0x28>
 800a3e4:	f102 0814 	add.w	r8, r2, #20
 800a3e8:	46c2      	mov	sl, r8
 800a3ea:	f04f 0c00 	mov.w	ip, #0
 800a3ee:	6927      	ldr	r7, [r4, #16]
 800a3f0:	60c6      	str	r6, [r0, #12]
 800a3f2:	692e      	ldr	r6, [r5, #16]
 800a3f4:	f104 0014 	add.w	r0, r4, #20
 800a3f8:	f105 0914 	add.w	r9, r5, #20
 800a3fc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a400:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a404:	3410      	adds	r4, #16
 800a406:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a40a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a40e:	fa1f f18b 	uxth.w	r1, fp
 800a412:	448c      	add	ip, r1
 800a414:	b299      	uxth	r1, r3
 800a416:	0c1b      	lsrs	r3, r3, #16
 800a418:	ebac 0101 	sub.w	r1, ip, r1
 800a41c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a420:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a424:	b289      	uxth	r1, r1
 800a426:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a42a:	454e      	cmp	r6, r9
 800a42c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a430:	f84a 3b04 	str.w	r3, [sl], #4
 800a434:	d8e7      	bhi.n	800a406 <__mdiff+0x7e>
 800a436:	1b73      	subs	r3, r6, r5
 800a438:	3b15      	subs	r3, #21
 800a43a:	f023 0303 	bic.w	r3, r3, #3
 800a43e:	3515      	adds	r5, #21
 800a440:	3304      	adds	r3, #4
 800a442:	42ae      	cmp	r6, r5
 800a444:	bf38      	it	cc
 800a446:	2304      	movcc	r3, #4
 800a448:	4418      	add	r0, r3
 800a44a:	4443      	add	r3, r8
 800a44c:	461e      	mov	r6, r3
 800a44e:	4605      	mov	r5, r0
 800a450:	4575      	cmp	r5, lr
 800a452:	d30e      	bcc.n	800a472 <__mdiff+0xea>
 800a454:	f10e 0103 	add.w	r1, lr, #3
 800a458:	1a09      	subs	r1, r1, r0
 800a45a:	f021 0103 	bic.w	r1, r1, #3
 800a45e:	3803      	subs	r0, #3
 800a460:	4586      	cmp	lr, r0
 800a462:	bf38      	it	cc
 800a464:	2100      	movcc	r1, #0
 800a466:	4419      	add	r1, r3
 800a468:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a46c:	b18b      	cbz	r3, 800a492 <__mdiff+0x10a>
 800a46e:	6117      	str	r7, [r2, #16]
 800a470:	e7a4      	b.n	800a3bc <__mdiff+0x34>
 800a472:	f855 8b04 	ldr.w	r8, [r5], #4
 800a476:	fa1f f188 	uxth.w	r1, r8
 800a47a:	4461      	add	r1, ip
 800a47c:	140c      	asrs	r4, r1, #16
 800a47e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a482:	b289      	uxth	r1, r1
 800a484:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a488:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a48c:	f846 1b04 	str.w	r1, [r6], #4
 800a490:	e7de      	b.n	800a450 <__mdiff+0xc8>
 800a492:	3f01      	subs	r7, #1
 800a494:	e7e8      	b.n	800a468 <__mdiff+0xe0>
 800a496:	bf00      	nop
 800a498:	0800d080 	.word	0x0800d080
 800a49c:	0800d170 	.word	0x0800d170

0800a4a0 <__ulp>:
 800a4a0:	4b11      	ldr	r3, [pc, #68]	; (800a4e8 <__ulp+0x48>)
 800a4a2:	400b      	ands	r3, r1
 800a4a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dd02      	ble.n	800a4b2 <__ulp+0x12>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	4770      	bx	lr
 800a4b2:	425b      	negs	r3, r3
 800a4b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a4b8:	f04f 0000 	mov.w	r0, #0
 800a4bc:	f04f 0100 	mov.w	r1, #0
 800a4c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a4c4:	da04      	bge.n	800a4d0 <__ulp+0x30>
 800a4c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a4ca:	fa43 f102 	asr.w	r1, r3, r2
 800a4ce:	4770      	bx	lr
 800a4d0:	f1a2 0314 	sub.w	r3, r2, #20
 800a4d4:	2b1e      	cmp	r3, #30
 800a4d6:	bfd6      	itet	le
 800a4d8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a4dc:	2301      	movgt	r3, #1
 800a4de:	fa22 f303 	lsrle.w	r3, r2, r3
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	7ff00000 	.word	0x7ff00000

0800a4ec <__b2d>:
 800a4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f0:	6907      	ldr	r7, [r0, #16]
 800a4f2:	f100 0914 	add.w	r9, r0, #20
 800a4f6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a4fa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a4fe:	f1a7 0804 	sub.w	r8, r7, #4
 800a502:	4630      	mov	r0, r6
 800a504:	f7ff fd4e 	bl	8009fa4 <__hi0bits>
 800a508:	f1c0 0320 	rsb	r3, r0, #32
 800a50c:	280a      	cmp	r0, #10
 800a50e:	600b      	str	r3, [r1, #0]
 800a510:	491f      	ldr	r1, [pc, #124]	; (800a590 <__b2d+0xa4>)
 800a512:	dc17      	bgt.n	800a544 <__b2d+0x58>
 800a514:	45c1      	cmp	r9, r8
 800a516:	bf28      	it	cs
 800a518:	2200      	movcs	r2, #0
 800a51a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a51e:	fa26 f30c 	lsr.w	r3, r6, ip
 800a522:	bf38      	it	cc
 800a524:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a528:	ea43 0501 	orr.w	r5, r3, r1
 800a52c:	f100 0315 	add.w	r3, r0, #21
 800a530:	fa06 f303 	lsl.w	r3, r6, r3
 800a534:	fa22 f20c 	lsr.w	r2, r2, ip
 800a538:	ea43 0402 	orr.w	r4, r3, r2
 800a53c:	4620      	mov	r0, r4
 800a53e:	4629      	mov	r1, r5
 800a540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a544:	45c1      	cmp	r9, r8
 800a546:	bf2e      	itee	cs
 800a548:	2200      	movcs	r2, #0
 800a54a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a54e:	f1a7 0808 	subcc.w	r8, r7, #8
 800a552:	f1b0 030b 	subs.w	r3, r0, #11
 800a556:	d016      	beq.n	800a586 <__b2d+0x9a>
 800a558:	f1c3 0720 	rsb	r7, r3, #32
 800a55c:	fa22 f107 	lsr.w	r1, r2, r7
 800a560:	45c8      	cmp	r8, r9
 800a562:	fa06 f603 	lsl.w	r6, r6, r3
 800a566:	ea46 0601 	orr.w	r6, r6, r1
 800a56a:	bf94      	ite	ls
 800a56c:	2100      	movls	r1, #0
 800a56e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a572:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a576:	fa02 f003 	lsl.w	r0, r2, r3
 800a57a:	40f9      	lsrs	r1, r7
 800a57c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a580:	ea40 0401 	orr.w	r4, r0, r1
 800a584:	e7da      	b.n	800a53c <__b2d+0x50>
 800a586:	4614      	mov	r4, r2
 800a588:	ea46 0501 	orr.w	r5, r6, r1
 800a58c:	e7d6      	b.n	800a53c <__b2d+0x50>
 800a58e:	bf00      	nop
 800a590:	3ff00000 	.word	0x3ff00000

0800a594 <__d2b>:
 800a594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a598:	2101      	movs	r1, #1
 800a59a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a59e:	4690      	mov	r8, r2
 800a5a0:	461d      	mov	r5, r3
 800a5a2:	f7ff fc0d 	bl	8009dc0 <_Balloc>
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	b930      	cbnz	r0, 800a5b8 <__d2b+0x24>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	f240 310a 	movw	r1, #778	; 0x30a
 800a5b0:	4b24      	ldr	r3, [pc, #144]	; (800a644 <__d2b+0xb0>)
 800a5b2:	4825      	ldr	r0, [pc, #148]	; (800a648 <__d2b+0xb4>)
 800a5b4:	f000 fdae 	bl	800b114 <__assert_func>
 800a5b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a5bc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a5c0:	bb2d      	cbnz	r5, 800a60e <__d2b+0x7a>
 800a5c2:	9301      	str	r3, [sp, #4]
 800a5c4:	f1b8 0300 	subs.w	r3, r8, #0
 800a5c8:	d026      	beq.n	800a618 <__d2b+0x84>
 800a5ca:	4668      	mov	r0, sp
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	f7ff fd09 	bl	8009fe4 <__lo0bits>
 800a5d2:	9900      	ldr	r1, [sp, #0]
 800a5d4:	b1f0      	cbz	r0, 800a614 <__d2b+0x80>
 800a5d6:	9a01      	ldr	r2, [sp, #4]
 800a5d8:	f1c0 0320 	rsb	r3, r0, #32
 800a5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e0:	430b      	orrs	r3, r1
 800a5e2:	40c2      	lsrs	r2, r0
 800a5e4:	6163      	str	r3, [r4, #20]
 800a5e6:	9201      	str	r2, [sp, #4]
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	bf14      	ite	ne
 800a5ee:	2102      	movne	r1, #2
 800a5f0:	2101      	moveq	r1, #1
 800a5f2:	61a3      	str	r3, [r4, #24]
 800a5f4:	6121      	str	r1, [r4, #16]
 800a5f6:	b1c5      	cbz	r5, 800a62a <__d2b+0x96>
 800a5f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5fc:	4405      	add	r5, r0
 800a5fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a602:	603d      	str	r5, [r7, #0]
 800a604:	6030      	str	r0, [r6, #0]
 800a606:	4620      	mov	r0, r4
 800a608:	b002      	add	sp, #8
 800a60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a60e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a612:	e7d6      	b.n	800a5c2 <__d2b+0x2e>
 800a614:	6161      	str	r1, [r4, #20]
 800a616:	e7e7      	b.n	800a5e8 <__d2b+0x54>
 800a618:	a801      	add	r0, sp, #4
 800a61a:	f7ff fce3 	bl	8009fe4 <__lo0bits>
 800a61e:	2101      	movs	r1, #1
 800a620:	9b01      	ldr	r3, [sp, #4]
 800a622:	6121      	str	r1, [r4, #16]
 800a624:	6163      	str	r3, [r4, #20]
 800a626:	3020      	adds	r0, #32
 800a628:	e7e5      	b.n	800a5f6 <__d2b+0x62>
 800a62a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a62e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a632:	6038      	str	r0, [r7, #0]
 800a634:	6918      	ldr	r0, [r3, #16]
 800a636:	f7ff fcb5 	bl	8009fa4 <__hi0bits>
 800a63a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a63e:	6031      	str	r1, [r6, #0]
 800a640:	e7e1      	b.n	800a606 <__d2b+0x72>
 800a642:	bf00      	nop
 800a644:	0800d080 	.word	0x0800d080
 800a648:	0800d170 	.word	0x0800d170

0800a64c <__ratio>:
 800a64c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	4688      	mov	r8, r1
 800a652:	4669      	mov	r1, sp
 800a654:	4681      	mov	r9, r0
 800a656:	f7ff ff49 	bl	800a4ec <__b2d>
 800a65a:	460f      	mov	r7, r1
 800a65c:	4604      	mov	r4, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	4640      	mov	r0, r8
 800a662:	a901      	add	r1, sp, #4
 800a664:	f7ff ff42 	bl	800a4ec <__b2d>
 800a668:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a66c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a670:	468b      	mov	fp, r1
 800a672:	eba3 0c02 	sub.w	ip, r3, r2
 800a676:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a67a:	1a9b      	subs	r3, r3, r2
 800a67c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a680:	2b00      	cmp	r3, #0
 800a682:	bfd5      	itete	le
 800a684:	460a      	movle	r2, r1
 800a686:	462a      	movgt	r2, r5
 800a688:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a68c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a690:	bfd8      	it	le
 800a692:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a696:	465b      	mov	r3, fp
 800a698:	4602      	mov	r2, r0
 800a69a:	4639      	mov	r1, r7
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7f6 f8b1 	bl	8000804 <__aeabi_ddiv>
 800a6a2:	b003      	add	sp, #12
 800a6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6a8 <__copybits>:
 800a6a8:	3901      	subs	r1, #1
 800a6aa:	b570      	push	{r4, r5, r6, lr}
 800a6ac:	1149      	asrs	r1, r1, #5
 800a6ae:	6914      	ldr	r4, [r2, #16]
 800a6b0:	3101      	adds	r1, #1
 800a6b2:	f102 0314 	add.w	r3, r2, #20
 800a6b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6be:	1f05      	subs	r5, r0, #4
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	d30c      	bcc.n	800a6de <__copybits+0x36>
 800a6c4:	1aa3      	subs	r3, r4, r2
 800a6c6:	3b11      	subs	r3, #17
 800a6c8:	f023 0303 	bic.w	r3, r3, #3
 800a6cc:	3211      	adds	r2, #17
 800a6ce:	42a2      	cmp	r2, r4
 800a6d0:	bf88      	it	hi
 800a6d2:	2300      	movhi	r3, #0
 800a6d4:	4418      	add	r0, r3
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4288      	cmp	r0, r1
 800a6da:	d305      	bcc.n	800a6e8 <__copybits+0x40>
 800a6dc:	bd70      	pop	{r4, r5, r6, pc}
 800a6de:	f853 6b04 	ldr.w	r6, [r3], #4
 800a6e2:	f845 6f04 	str.w	r6, [r5, #4]!
 800a6e6:	e7eb      	b.n	800a6c0 <__copybits+0x18>
 800a6e8:	f840 3b04 	str.w	r3, [r0], #4
 800a6ec:	e7f4      	b.n	800a6d8 <__copybits+0x30>

0800a6ee <__any_on>:
 800a6ee:	f100 0214 	add.w	r2, r0, #20
 800a6f2:	6900      	ldr	r0, [r0, #16]
 800a6f4:	114b      	asrs	r3, r1, #5
 800a6f6:	4298      	cmp	r0, r3
 800a6f8:	b510      	push	{r4, lr}
 800a6fa:	db11      	blt.n	800a720 <__any_on+0x32>
 800a6fc:	dd0a      	ble.n	800a714 <__any_on+0x26>
 800a6fe:	f011 011f 	ands.w	r1, r1, #31
 800a702:	d007      	beq.n	800a714 <__any_on+0x26>
 800a704:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a708:	fa24 f001 	lsr.w	r0, r4, r1
 800a70c:	fa00 f101 	lsl.w	r1, r0, r1
 800a710:	428c      	cmp	r4, r1
 800a712:	d10b      	bne.n	800a72c <__any_on+0x3e>
 800a714:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a718:	4293      	cmp	r3, r2
 800a71a:	d803      	bhi.n	800a724 <__any_on+0x36>
 800a71c:	2000      	movs	r0, #0
 800a71e:	bd10      	pop	{r4, pc}
 800a720:	4603      	mov	r3, r0
 800a722:	e7f7      	b.n	800a714 <__any_on+0x26>
 800a724:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a728:	2900      	cmp	r1, #0
 800a72a:	d0f5      	beq.n	800a718 <__any_on+0x2a>
 800a72c:	2001      	movs	r0, #1
 800a72e:	e7f6      	b.n	800a71e <__any_on+0x30>

0800a730 <_calloc_r>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	fba1 5402 	umull	r5, r4, r1, r2
 800a736:	b934      	cbnz	r4, 800a746 <_calloc_r+0x16>
 800a738:	4629      	mov	r1, r5
 800a73a:	f000 f875 	bl	800a828 <_malloc_r>
 800a73e:	4606      	mov	r6, r0
 800a740:	b928      	cbnz	r0, 800a74e <_calloc_r+0x1e>
 800a742:	4630      	mov	r0, r6
 800a744:	bd70      	pop	{r4, r5, r6, pc}
 800a746:	220c      	movs	r2, #12
 800a748:	2600      	movs	r6, #0
 800a74a:	6002      	str	r2, [r0, #0]
 800a74c:	e7f9      	b.n	800a742 <_calloc_r+0x12>
 800a74e:	462a      	mov	r2, r5
 800a750:	4621      	mov	r1, r4
 800a752:	f7fc fae1 	bl	8006d18 <memset>
 800a756:	e7f4      	b.n	800a742 <_calloc_r+0x12>

0800a758 <_free_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4605      	mov	r5, r0
 800a75c:	2900      	cmp	r1, #0
 800a75e:	d040      	beq.n	800a7e2 <_free_r+0x8a>
 800a760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a764:	1f0c      	subs	r4, r1, #4
 800a766:	2b00      	cmp	r3, #0
 800a768:	bfb8      	it	lt
 800a76a:	18e4      	addlt	r4, r4, r3
 800a76c:	f000 fe62 	bl	800b434 <__malloc_lock>
 800a770:	4a1c      	ldr	r2, [pc, #112]	; (800a7e4 <_free_r+0x8c>)
 800a772:	6813      	ldr	r3, [r2, #0]
 800a774:	b933      	cbnz	r3, 800a784 <_free_r+0x2c>
 800a776:	6063      	str	r3, [r4, #4]
 800a778:	6014      	str	r4, [r2, #0]
 800a77a:	4628      	mov	r0, r5
 800a77c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a780:	f000 be5e 	b.w	800b440 <__malloc_unlock>
 800a784:	42a3      	cmp	r3, r4
 800a786:	d908      	bls.n	800a79a <_free_r+0x42>
 800a788:	6820      	ldr	r0, [r4, #0]
 800a78a:	1821      	adds	r1, r4, r0
 800a78c:	428b      	cmp	r3, r1
 800a78e:	bf01      	itttt	eq
 800a790:	6819      	ldreq	r1, [r3, #0]
 800a792:	685b      	ldreq	r3, [r3, #4]
 800a794:	1809      	addeq	r1, r1, r0
 800a796:	6021      	streq	r1, [r4, #0]
 800a798:	e7ed      	b.n	800a776 <_free_r+0x1e>
 800a79a:	461a      	mov	r2, r3
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	b10b      	cbz	r3, 800a7a4 <_free_r+0x4c>
 800a7a0:	42a3      	cmp	r3, r4
 800a7a2:	d9fa      	bls.n	800a79a <_free_r+0x42>
 800a7a4:	6811      	ldr	r1, [r2, #0]
 800a7a6:	1850      	adds	r0, r2, r1
 800a7a8:	42a0      	cmp	r0, r4
 800a7aa:	d10b      	bne.n	800a7c4 <_free_r+0x6c>
 800a7ac:	6820      	ldr	r0, [r4, #0]
 800a7ae:	4401      	add	r1, r0
 800a7b0:	1850      	adds	r0, r2, r1
 800a7b2:	4283      	cmp	r3, r0
 800a7b4:	6011      	str	r1, [r2, #0]
 800a7b6:	d1e0      	bne.n	800a77a <_free_r+0x22>
 800a7b8:	6818      	ldr	r0, [r3, #0]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	4401      	add	r1, r0
 800a7be:	6011      	str	r1, [r2, #0]
 800a7c0:	6053      	str	r3, [r2, #4]
 800a7c2:	e7da      	b.n	800a77a <_free_r+0x22>
 800a7c4:	d902      	bls.n	800a7cc <_free_r+0x74>
 800a7c6:	230c      	movs	r3, #12
 800a7c8:	602b      	str	r3, [r5, #0]
 800a7ca:	e7d6      	b.n	800a77a <_free_r+0x22>
 800a7cc:	6820      	ldr	r0, [r4, #0]
 800a7ce:	1821      	adds	r1, r4, r0
 800a7d0:	428b      	cmp	r3, r1
 800a7d2:	bf01      	itttt	eq
 800a7d4:	6819      	ldreq	r1, [r3, #0]
 800a7d6:	685b      	ldreq	r3, [r3, #4]
 800a7d8:	1809      	addeq	r1, r1, r0
 800a7da:	6021      	streq	r1, [r4, #0]
 800a7dc:	6063      	str	r3, [r4, #4]
 800a7de:	6054      	str	r4, [r2, #4]
 800a7e0:	e7cb      	b.n	800a77a <_free_r+0x22>
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	20000ad4 	.word	0x20000ad4

0800a7e8 <sbrk_aligned>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	4e0e      	ldr	r6, [pc, #56]	; (800a824 <sbrk_aligned+0x3c>)
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	6831      	ldr	r1, [r6, #0]
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	b911      	cbnz	r1, 800a7fa <sbrk_aligned+0x12>
 800a7f4:	f000 fb46 	bl	800ae84 <_sbrk_r>
 800a7f8:	6030      	str	r0, [r6, #0]
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	f000 fb41 	bl	800ae84 <_sbrk_r>
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	d00a      	beq.n	800a81c <sbrk_aligned+0x34>
 800a806:	1cc4      	adds	r4, r0, #3
 800a808:	f024 0403 	bic.w	r4, r4, #3
 800a80c:	42a0      	cmp	r0, r4
 800a80e:	d007      	beq.n	800a820 <sbrk_aligned+0x38>
 800a810:	1a21      	subs	r1, r4, r0
 800a812:	4628      	mov	r0, r5
 800a814:	f000 fb36 	bl	800ae84 <_sbrk_r>
 800a818:	3001      	adds	r0, #1
 800a81a:	d101      	bne.n	800a820 <sbrk_aligned+0x38>
 800a81c:	f04f 34ff 	mov.w	r4, #4294967295
 800a820:	4620      	mov	r0, r4
 800a822:	bd70      	pop	{r4, r5, r6, pc}
 800a824:	20000ad8 	.word	0x20000ad8

0800a828 <_malloc_r>:
 800a828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a82c:	1ccd      	adds	r5, r1, #3
 800a82e:	f025 0503 	bic.w	r5, r5, #3
 800a832:	3508      	adds	r5, #8
 800a834:	2d0c      	cmp	r5, #12
 800a836:	bf38      	it	cc
 800a838:	250c      	movcc	r5, #12
 800a83a:	2d00      	cmp	r5, #0
 800a83c:	4607      	mov	r7, r0
 800a83e:	db01      	blt.n	800a844 <_malloc_r+0x1c>
 800a840:	42a9      	cmp	r1, r5
 800a842:	d905      	bls.n	800a850 <_malloc_r+0x28>
 800a844:	230c      	movs	r3, #12
 800a846:	2600      	movs	r6, #0
 800a848:	603b      	str	r3, [r7, #0]
 800a84a:	4630      	mov	r0, r6
 800a84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a850:	4e2e      	ldr	r6, [pc, #184]	; (800a90c <_malloc_r+0xe4>)
 800a852:	f000 fdef 	bl	800b434 <__malloc_lock>
 800a856:	6833      	ldr	r3, [r6, #0]
 800a858:	461c      	mov	r4, r3
 800a85a:	bb34      	cbnz	r4, 800a8aa <_malloc_r+0x82>
 800a85c:	4629      	mov	r1, r5
 800a85e:	4638      	mov	r0, r7
 800a860:	f7ff ffc2 	bl	800a7e8 <sbrk_aligned>
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	4604      	mov	r4, r0
 800a868:	d14d      	bne.n	800a906 <_malloc_r+0xde>
 800a86a:	6834      	ldr	r4, [r6, #0]
 800a86c:	4626      	mov	r6, r4
 800a86e:	2e00      	cmp	r6, #0
 800a870:	d140      	bne.n	800a8f4 <_malloc_r+0xcc>
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	4631      	mov	r1, r6
 800a876:	4638      	mov	r0, r7
 800a878:	eb04 0803 	add.w	r8, r4, r3
 800a87c:	f000 fb02 	bl	800ae84 <_sbrk_r>
 800a880:	4580      	cmp	r8, r0
 800a882:	d13a      	bne.n	800a8fa <_malloc_r+0xd2>
 800a884:	6821      	ldr	r1, [r4, #0]
 800a886:	3503      	adds	r5, #3
 800a888:	1a6d      	subs	r5, r5, r1
 800a88a:	f025 0503 	bic.w	r5, r5, #3
 800a88e:	3508      	adds	r5, #8
 800a890:	2d0c      	cmp	r5, #12
 800a892:	bf38      	it	cc
 800a894:	250c      	movcc	r5, #12
 800a896:	4638      	mov	r0, r7
 800a898:	4629      	mov	r1, r5
 800a89a:	f7ff ffa5 	bl	800a7e8 <sbrk_aligned>
 800a89e:	3001      	adds	r0, #1
 800a8a0:	d02b      	beq.n	800a8fa <_malloc_r+0xd2>
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	442b      	add	r3, r5
 800a8a6:	6023      	str	r3, [r4, #0]
 800a8a8:	e00e      	b.n	800a8c8 <_malloc_r+0xa0>
 800a8aa:	6822      	ldr	r2, [r4, #0]
 800a8ac:	1b52      	subs	r2, r2, r5
 800a8ae:	d41e      	bmi.n	800a8ee <_malloc_r+0xc6>
 800a8b0:	2a0b      	cmp	r2, #11
 800a8b2:	d916      	bls.n	800a8e2 <_malloc_r+0xba>
 800a8b4:	1961      	adds	r1, r4, r5
 800a8b6:	42a3      	cmp	r3, r4
 800a8b8:	6025      	str	r5, [r4, #0]
 800a8ba:	bf18      	it	ne
 800a8bc:	6059      	strne	r1, [r3, #4]
 800a8be:	6863      	ldr	r3, [r4, #4]
 800a8c0:	bf08      	it	eq
 800a8c2:	6031      	streq	r1, [r6, #0]
 800a8c4:	5162      	str	r2, [r4, r5]
 800a8c6:	604b      	str	r3, [r1, #4]
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f104 060b 	add.w	r6, r4, #11
 800a8ce:	f000 fdb7 	bl	800b440 <__malloc_unlock>
 800a8d2:	f026 0607 	bic.w	r6, r6, #7
 800a8d6:	1d23      	adds	r3, r4, #4
 800a8d8:	1af2      	subs	r2, r6, r3
 800a8da:	d0b6      	beq.n	800a84a <_malloc_r+0x22>
 800a8dc:	1b9b      	subs	r3, r3, r6
 800a8de:	50a3      	str	r3, [r4, r2]
 800a8e0:	e7b3      	b.n	800a84a <_malloc_r+0x22>
 800a8e2:	6862      	ldr	r2, [r4, #4]
 800a8e4:	42a3      	cmp	r3, r4
 800a8e6:	bf0c      	ite	eq
 800a8e8:	6032      	streq	r2, [r6, #0]
 800a8ea:	605a      	strne	r2, [r3, #4]
 800a8ec:	e7ec      	b.n	800a8c8 <_malloc_r+0xa0>
 800a8ee:	4623      	mov	r3, r4
 800a8f0:	6864      	ldr	r4, [r4, #4]
 800a8f2:	e7b2      	b.n	800a85a <_malloc_r+0x32>
 800a8f4:	4634      	mov	r4, r6
 800a8f6:	6876      	ldr	r6, [r6, #4]
 800a8f8:	e7b9      	b.n	800a86e <_malloc_r+0x46>
 800a8fa:	230c      	movs	r3, #12
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	603b      	str	r3, [r7, #0]
 800a900:	f000 fd9e 	bl	800b440 <__malloc_unlock>
 800a904:	e7a1      	b.n	800a84a <_malloc_r+0x22>
 800a906:	6025      	str	r5, [r4, #0]
 800a908:	e7de      	b.n	800a8c8 <_malloc_r+0xa0>
 800a90a:	bf00      	nop
 800a90c:	20000ad4 	.word	0x20000ad4

0800a910 <__ssputs_r>:
 800a910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a914:	688e      	ldr	r6, [r1, #8]
 800a916:	4682      	mov	sl, r0
 800a918:	429e      	cmp	r6, r3
 800a91a:	460c      	mov	r4, r1
 800a91c:	4690      	mov	r8, r2
 800a91e:	461f      	mov	r7, r3
 800a920:	d838      	bhi.n	800a994 <__ssputs_r+0x84>
 800a922:	898a      	ldrh	r2, [r1, #12]
 800a924:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a928:	d032      	beq.n	800a990 <__ssputs_r+0x80>
 800a92a:	6825      	ldr	r5, [r4, #0]
 800a92c:	6909      	ldr	r1, [r1, #16]
 800a92e:	3301      	adds	r3, #1
 800a930:	eba5 0901 	sub.w	r9, r5, r1
 800a934:	6965      	ldr	r5, [r4, #20]
 800a936:	444b      	add	r3, r9
 800a938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a93c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a940:	106d      	asrs	r5, r5, #1
 800a942:	429d      	cmp	r5, r3
 800a944:	bf38      	it	cc
 800a946:	461d      	movcc	r5, r3
 800a948:	0553      	lsls	r3, r2, #21
 800a94a:	d531      	bpl.n	800a9b0 <__ssputs_r+0xa0>
 800a94c:	4629      	mov	r1, r5
 800a94e:	f7ff ff6b 	bl	800a828 <_malloc_r>
 800a952:	4606      	mov	r6, r0
 800a954:	b950      	cbnz	r0, 800a96c <__ssputs_r+0x5c>
 800a956:	230c      	movs	r3, #12
 800a958:	f04f 30ff 	mov.w	r0, #4294967295
 800a95c:	f8ca 3000 	str.w	r3, [sl]
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a966:	81a3      	strh	r3, [r4, #12]
 800a968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a96c:	464a      	mov	r2, r9
 800a96e:	6921      	ldr	r1, [r4, #16]
 800a970:	f7ff fa18 	bl	8009da4 <memcpy>
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a97a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a97e:	81a3      	strh	r3, [r4, #12]
 800a980:	6126      	str	r6, [r4, #16]
 800a982:	444e      	add	r6, r9
 800a984:	6026      	str	r6, [r4, #0]
 800a986:	463e      	mov	r6, r7
 800a988:	6165      	str	r5, [r4, #20]
 800a98a:	eba5 0509 	sub.w	r5, r5, r9
 800a98e:	60a5      	str	r5, [r4, #8]
 800a990:	42be      	cmp	r6, r7
 800a992:	d900      	bls.n	800a996 <__ssputs_r+0x86>
 800a994:	463e      	mov	r6, r7
 800a996:	4632      	mov	r2, r6
 800a998:	4641      	mov	r1, r8
 800a99a:	6820      	ldr	r0, [r4, #0]
 800a99c:	f000 fd30 	bl	800b400 <memmove>
 800a9a0:	68a3      	ldr	r3, [r4, #8]
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	1b9b      	subs	r3, r3, r6
 800a9a6:	60a3      	str	r3, [r4, #8]
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	4433      	add	r3, r6
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	e7db      	b.n	800a968 <__ssputs_r+0x58>
 800a9b0:	462a      	mov	r2, r5
 800a9b2:	f000 fd4b 	bl	800b44c <_realloc_r>
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d1e1      	bne.n	800a980 <__ssputs_r+0x70>
 800a9bc:	4650      	mov	r0, sl
 800a9be:	6921      	ldr	r1, [r4, #16]
 800a9c0:	f7ff feca 	bl	800a758 <_free_r>
 800a9c4:	e7c7      	b.n	800a956 <__ssputs_r+0x46>
	...

0800a9c8 <_svfiprintf_r>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	4698      	mov	r8, r3
 800a9ce:	898b      	ldrh	r3, [r1, #12]
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	061b      	lsls	r3, r3, #24
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	4614      	mov	r4, r2
 800a9d8:	b09d      	sub	sp, #116	; 0x74
 800a9da:	d50e      	bpl.n	800a9fa <_svfiprintf_r+0x32>
 800a9dc:	690b      	ldr	r3, [r1, #16]
 800a9de:	b963      	cbnz	r3, 800a9fa <_svfiprintf_r+0x32>
 800a9e0:	2140      	movs	r1, #64	; 0x40
 800a9e2:	f7ff ff21 	bl	800a828 <_malloc_r>
 800a9e6:	6028      	str	r0, [r5, #0]
 800a9e8:	6128      	str	r0, [r5, #16]
 800a9ea:	b920      	cbnz	r0, 800a9f6 <_svfiprintf_r+0x2e>
 800a9ec:	230c      	movs	r3, #12
 800a9ee:	603b      	str	r3, [r7, #0]
 800a9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f4:	e0d1      	b.n	800ab9a <_svfiprintf_r+0x1d2>
 800a9f6:	2340      	movs	r3, #64	; 0x40
 800a9f8:	616b      	str	r3, [r5, #20]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9fe:	2320      	movs	r3, #32
 800aa00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa04:	2330      	movs	r3, #48	; 0x30
 800aa06:	f04f 0901 	mov.w	r9, #1
 800aa0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800abb4 <_svfiprintf_r+0x1ec>
 800aa12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa16:	4623      	mov	r3, r4
 800aa18:	469a      	mov	sl, r3
 800aa1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa1e:	b10a      	cbz	r2, 800aa24 <_svfiprintf_r+0x5c>
 800aa20:	2a25      	cmp	r2, #37	; 0x25
 800aa22:	d1f9      	bne.n	800aa18 <_svfiprintf_r+0x50>
 800aa24:	ebba 0b04 	subs.w	fp, sl, r4
 800aa28:	d00b      	beq.n	800aa42 <_svfiprintf_r+0x7a>
 800aa2a:	465b      	mov	r3, fp
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	4629      	mov	r1, r5
 800aa30:	4638      	mov	r0, r7
 800aa32:	f7ff ff6d 	bl	800a910 <__ssputs_r>
 800aa36:	3001      	adds	r0, #1
 800aa38:	f000 80aa 	beq.w	800ab90 <_svfiprintf_r+0x1c8>
 800aa3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa3e:	445a      	add	r2, fp
 800aa40:	9209      	str	r2, [sp, #36]	; 0x24
 800aa42:	f89a 3000 	ldrb.w	r3, [sl]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 80a2 	beq.w	800ab90 <_svfiprintf_r+0x1c8>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa56:	f10a 0a01 	add.w	sl, sl, #1
 800aa5a:	9304      	str	r3, [sp, #16]
 800aa5c:	9307      	str	r3, [sp, #28]
 800aa5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa62:	931a      	str	r3, [sp, #104]	; 0x68
 800aa64:	4654      	mov	r4, sl
 800aa66:	2205      	movs	r2, #5
 800aa68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa6c:	4851      	ldr	r0, [pc, #324]	; (800abb4 <_svfiprintf_r+0x1ec>)
 800aa6e:	f7ff f98b 	bl	8009d88 <memchr>
 800aa72:	9a04      	ldr	r2, [sp, #16]
 800aa74:	b9d8      	cbnz	r0, 800aaae <_svfiprintf_r+0xe6>
 800aa76:	06d0      	lsls	r0, r2, #27
 800aa78:	bf44      	itt	mi
 800aa7a:	2320      	movmi	r3, #32
 800aa7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa80:	0711      	lsls	r1, r2, #28
 800aa82:	bf44      	itt	mi
 800aa84:	232b      	movmi	r3, #43	; 0x2b
 800aa86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa8a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa8e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa90:	d015      	beq.n	800aabe <_svfiprintf_r+0xf6>
 800aa92:	4654      	mov	r4, sl
 800aa94:	2000      	movs	r0, #0
 800aa96:	f04f 0c0a 	mov.w	ip, #10
 800aa9a:	9a07      	ldr	r2, [sp, #28]
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaa2:	3b30      	subs	r3, #48	; 0x30
 800aaa4:	2b09      	cmp	r3, #9
 800aaa6:	d94e      	bls.n	800ab46 <_svfiprintf_r+0x17e>
 800aaa8:	b1b0      	cbz	r0, 800aad8 <_svfiprintf_r+0x110>
 800aaaa:	9207      	str	r2, [sp, #28]
 800aaac:	e014      	b.n	800aad8 <_svfiprintf_r+0x110>
 800aaae:	eba0 0308 	sub.w	r3, r0, r8
 800aab2:	fa09 f303 	lsl.w	r3, r9, r3
 800aab6:	4313      	orrs	r3, r2
 800aab8:	46a2      	mov	sl, r4
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	e7d2      	b.n	800aa64 <_svfiprintf_r+0x9c>
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	1d19      	adds	r1, r3, #4
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	9103      	str	r1, [sp, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	bfbb      	ittet	lt
 800aaca:	425b      	neglt	r3, r3
 800aacc:	f042 0202 	orrlt.w	r2, r2, #2
 800aad0:	9307      	strge	r3, [sp, #28]
 800aad2:	9307      	strlt	r3, [sp, #28]
 800aad4:	bfb8      	it	lt
 800aad6:	9204      	strlt	r2, [sp, #16]
 800aad8:	7823      	ldrb	r3, [r4, #0]
 800aada:	2b2e      	cmp	r3, #46	; 0x2e
 800aadc:	d10c      	bne.n	800aaf8 <_svfiprintf_r+0x130>
 800aade:	7863      	ldrb	r3, [r4, #1]
 800aae0:	2b2a      	cmp	r3, #42	; 0x2a
 800aae2:	d135      	bne.n	800ab50 <_svfiprintf_r+0x188>
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	3402      	adds	r4, #2
 800aae8:	1d1a      	adds	r2, r3, #4
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	9203      	str	r2, [sp, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bfb8      	it	lt
 800aaf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaf6:	9305      	str	r3, [sp, #20]
 800aaf8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800abb8 <_svfiprintf_r+0x1f0>
 800aafc:	2203      	movs	r2, #3
 800aafe:	4650      	mov	r0, sl
 800ab00:	7821      	ldrb	r1, [r4, #0]
 800ab02:	f7ff f941 	bl	8009d88 <memchr>
 800ab06:	b140      	cbz	r0, 800ab1a <_svfiprintf_r+0x152>
 800ab08:	2340      	movs	r3, #64	; 0x40
 800ab0a:	eba0 000a 	sub.w	r0, r0, sl
 800ab0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab12:	9b04      	ldr	r3, [sp, #16]
 800ab14:	3401      	adds	r4, #1
 800ab16:	4303      	orrs	r3, r0
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab1e:	2206      	movs	r2, #6
 800ab20:	4826      	ldr	r0, [pc, #152]	; (800abbc <_svfiprintf_r+0x1f4>)
 800ab22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab26:	f7ff f92f 	bl	8009d88 <memchr>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d038      	beq.n	800aba0 <_svfiprintf_r+0x1d8>
 800ab2e:	4b24      	ldr	r3, [pc, #144]	; (800abc0 <_svfiprintf_r+0x1f8>)
 800ab30:	bb1b      	cbnz	r3, 800ab7a <_svfiprintf_r+0x1b2>
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	3307      	adds	r3, #7
 800ab36:	f023 0307 	bic.w	r3, r3, #7
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	9303      	str	r3, [sp, #12]
 800ab3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab40:	4433      	add	r3, r6
 800ab42:	9309      	str	r3, [sp, #36]	; 0x24
 800ab44:	e767      	b.n	800aa16 <_svfiprintf_r+0x4e>
 800ab46:	460c      	mov	r4, r1
 800ab48:	2001      	movs	r0, #1
 800ab4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab4e:	e7a5      	b.n	800aa9c <_svfiprintf_r+0xd4>
 800ab50:	2300      	movs	r3, #0
 800ab52:	f04f 0c0a 	mov.w	ip, #10
 800ab56:	4619      	mov	r1, r3
 800ab58:	3401      	adds	r4, #1
 800ab5a:	9305      	str	r3, [sp, #20]
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab62:	3a30      	subs	r2, #48	; 0x30
 800ab64:	2a09      	cmp	r2, #9
 800ab66:	d903      	bls.n	800ab70 <_svfiprintf_r+0x1a8>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0c5      	beq.n	800aaf8 <_svfiprintf_r+0x130>
 800ab6c:	9105      	str	r1, [sp, #20]
 800ab6e:	e7c3      	b.n	800aaf8 <_svfiprintf_r+0x130>
 800ab70:	4604      	mov	r4, r0
 800ab72:	2301      	movs	r3, #1
 800ab74:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab78:	e7f0      	b.n	800ab5c <_svfiprintf_r+0x194>
 800ab7a:	ab03      	add	r3, sp, #12
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	462a      	mov	r2, r5
 800ab80:	4638      	mov	r0, r7
 800ab82:	4b10      	ldr	r3, [pc, #64]	; (800abc4 <_svfiprintf_r+0x1fc>)
 800ab84:	a904      	add	r1, sp, #16
 800ab86:	f7fc f96d 	bl	8006e64 <_printf_float>
 800ab8a:	1c42      	adds	r2, r0, #1
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	d1d6      	bne.n	800ab3e <_svfiprintf_r+0x176>
 800ab90:	89ab      	ldrh	r3, [r5, #12]
 800ab92:	065b      	lsls	r3, r3, #25
 800ab94:	f53f af2c 	bmi.w	800a9f0 <_svfiprintf_r+0x28>
 800ab98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab9a:	b01d      	add	sp, #116	; 0x74
 800ab9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba0:	ab03      	add	r3, sp, #12
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	462a      	mov	r2, r5
 800aba6:	4638      	mov	r0, r7
 800aba8:	4b06      	ldr	r3, [pc, #24]	; (800abc4 <_svfiprintf_r+0x1fc>)
 800abaa:	a904      	add	r1, sp, #16
 800abac:	f7fc fbf6 	bl	800739c <_printf_i>
 800abb0:	e7eb      	b.n	800ab8a <_svfiprintf_r+0x1c2>
 800abb2:	bf00      	nop
 800abb4:	0800d2cc 	.word	0x0800d2cc
 800abb8:	0800d2d2 	.word	0x0800d2d2
 800abbc:	0800d2d6 	.word	0x0800d2d6
 800abc0:	08006e65 	.word	0x08006e65
 800abc4:	0800a911 	.word	0x0800a911

0800abc8 <__sfputc_r>:
 800abc8:	6893      	ldr	r3, [r2, #8]
 800abca:	b410      	push	{r4}
 800abcc:	3b01      	subs	r3, #1
 800abce:	2b00      	cmp	r3, #0
 800abd0:	6093      	str	r3, [r2, #8]
 800abd2:	da07      	bge.n	800abe4 <__sfputc_r+0x1c>
 800abd4:	6994      	ldr	r4, [r2, #24]
 800abd6:	42a3      	cmp	r3, r4
 800abd8:	db01      	blt.n	800abde <__sfputc_r+0x16>
 800abda:	290a      	cmp	r1, #10
 800abdc:	d102      	bne.n	800abe4 <__sfputc_r+0x1c>
 800abde:	bc10      	pop	{r4}
 800abe0:	f000 b9b8 	b.w	800af54 <__swbuf_r>
 800abe4:	6813      	ldr	r3, [r2, #0]
 800abe6:	1c58      	adds	r0, r3, #1
 800abe8:	6010      	str	r0, [r2, #0]
 800abea:	7019      	strb	r1, [r3, #0]
 800abec:	4608      	mov	r0, r1
 800abee:	bc10      	pop	{r4}
 800abf0:	4770      	bx	lr

0800abf2 <__sfputs_r>:
 800abf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf4:	4606      	mov	r6, r0
 800abf6:	460f      	mov	r7, r1
 800abf8:	4614      	mov	r4, r2
 800abfa:	18d5      	adds	r5, r2, r3
 800abfc:	42ac      	cmp	r4, r5
 800abfe:	d101      	bne.n	800ac04 <__sfputs_r+0x12>
 800ac00:	2000      	movs	r0, #0
 800ac02:	e007      	b.n	800ac14 <__sfputs_r+0x22>
 800ac04:	463a      	mov	r2, r7
 800ac06:	4630      	mov	r0, r6
 800ac08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac0c:	f7ff ffdc 	bl	800abc8 <__sfputc_r>
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	d1f3      	bne.n	800abfc <__sfputs_r+0xa>
 800ac14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac18 <_vfiprintf_r>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	4614      	mov	r4, r2
 800ac20:	4698      	mov	r8, r3
 800ac22:	4606      	mov	r6, r0
 800ac24:	b09d      	sub	sp, #116	; 0x74
 800ac26:	b118      	cbz	r0, 800ac30 <_vfiprintf_r+0x18>
 800ac28:	6983      	ldr	r3, [r0, #24]
 800ac2a:	b90b      	cbnz	r3, 800ac30 <_vfiprintf_r+0x18>
 800ac2c:	f7fe fc86 	bl	800953c <__sinit>
 800ac30:	4b89      	ldr	r3, [pc, #548]	; (800ae58 <_vfiprintf_r+0x240>)
 800ac32:	429d      	cmp	r5, r3
 800ac34:	d11b      	bne.n	800ac6e <_vfiprintf_r+0x56>
 800ac36:	6875      	ldr	r5, [r6, #4]
 800ac38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac3a:	07d9      	lsls	r1, r3, #31
 800ac3c:	d405      	bmi.n	800ac4a <_vfiprintf_r+0x32>
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	059a      	lsls	r2, r3, #22
 800ac42:	d402      	bmi.n	800ac4a <_vfiprintf_r+0x32>
 800ac44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac46:	f7ff f882 	bl	8009d4e <__retarget_lock_acquire_recursive>
 800ac4a:	89ab      	ldrh	r3, [r5, #12]
 800ac4c:	071b      	lsls	r3, r3, #28
 800ac4e:	d501      	bpl.n	800ac54 <_vfiprintf_r+0x3c>
 800ac50:	692b      	ldr	r3, [r5, #16]
 800ac52:	b9eb      	cbnz	r3, 800ac90 <_vfiprintf_r+0x78>
 800ac54:	4629      	mov	r1, r5
 800ac56:	4630      	mov	r0, r6
 800ac58:	f000 f9ee 	bl	800b038 <__swsetup_r>
 800ac5c:	b1c0      	cbz	r0, 800ac90 <_vfiprintf_r+0x78>
 800ac5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac60:	07dc      	lsls	r4, r3, #31
 800ac62:	d50e      	bpl.n	800ac82 <_vfiprintf_r+0x6a>
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	b01d      	add	sp, #116	; 0x74
 800ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6e:	4b7b      	ldr	r3, [pc, #492]	; (800ae5c <_vfiprintf_r+0x244>)
 800ac70:	429d      	cmp	r5, r3
 800ac72:	d101      	bne.n	800ac78 <_vfiprintf_r+0x60>
 800ac74:	68b5      	ldr	r5, [r6, #8]
 800ac76:	e7df      	b.n	800ac38 <_vfiprintf_r+0x20>
 800ac78:	4b79      	ldr	r3, [pc, #484]	; (800ae60 <_vfiprintf_r+0x248>)
 800ac7a:	429d      	cmp	r5, r3
 800ac7c:	bf08      	it	eq
 800ac7e:	68f5      	ldreq	r5, [r6, #12]
 800ac80:	e7da      	b.n	800ac38 <_vfiprintf_r+0x20>
 800ac82:	89ab      	ldrh	r3, [r5, #12]
 800ac84:	0598      	lsls	r0, r3, #22
 800ac86:	d4ed      	bmi.n	800ac64 <_vfiprintf_r+0x4c>
 800ac88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac8a:	f7ff f861 	bl	8009d50 <__retarget_lock_release_recursive>
 800ac8e:	e7e9      	b.n	800ac64 <_vfiprintf_r+0x4c>
 800ac90:	2300      	movs	r3, #0
 800ac92:	9309      	str	r3, [sp, #36]	; 0x24
 800ac94:	2320      	movs	r3, #32
 800ac96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac9a:	2330      	movs	r3, #48	; 0x30
 800ac9c:	f04f 0901 	mov.w	r9, #1
 800aca0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aca4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ae64 <_vfiprintf_r+0x24c>
 800aca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acac:	4623      	mov	r3, r4
 800acae:	469a      	mov	sl, r3
 800acb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acb4:	b10a      	cbz	r2, 800acba <_vfiprintf_r+0xa2>
 800acb6:	2a25      	cmp	r2, #37	; 0x25
 800acb8:	d1f9      	bne.n	800acae <_vfiprintf_r+0x96>
 800acba:	ebba 0b04 	subs.w	fp, sl, r4
 800acbe:	d00b      	beq.n	800acd8 <_vfiprintf_r+0xc0>
 800acc0:	465b      	mov	r3, fp
 800acc2:	4622      	mov	r2, r4
 800acc4:	4629      	mov	r1, r5
 800acc6:	4630      	mov	r0, r6
 800acc8:	f7ff ff93 	bl	800abf2 <__sfputs_r>
 800accc:	3001      	adds	r0, #1
 800acce:	f000 80aa 	beq.w	800ae26 <_vfiprintf_r+0x20e>
 800acd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acd4:	445a      	add	r2, fp
 800acd6:	9209      	str	r2, [sp, #36]	; 0x24
 800acd8:	f89a 3000 	ldrb.w	r3, [sl]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 80a2 	beq.w	800ae26 <_vfiprintf_r+0x20e>
 800ace2:	2300      	movs	r3, #0
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295
 800ace8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acec:	f10a 0a01 	add.w	sl, sl, #1
 800acf0:	9304      	str	r3, [sp, #16]
 800acf2:	9307      	str	r3, [sp, #28]
 800acf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acf8:	931a      	str	r3, [sp, #104]	; 0x68
 800acfa:	4654      	mov	r4, sl
 800acfc:	2205      	movs	r2, #5
 800acfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad02:	4858      	ldr	r0, [pc, #352]	; (800ae64 <_vfiprintf_r+0x24c>)
 800ad04:	f7ff f840 	bl	8009d88 <memchr>
 800ad08:	9a04      	ldr	r2, [sp, #16]
 800ad0a:	b9d8      	cbnz	r0, 800ad44 <_vfiprintf_r+0x12c>
 800ad0c:	06d1      	lsls	r1, r2, #27
 800ad0e:	bf44      	itt	mi
 800ad10:	2320      	movmi	r3, #32
 800ad12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad16:	0713      	lsls	r3, r2, #28
 800ad18:	bf44      	itt	mi
 800ad1a:	232b      	movmi	r3, #43	; 0x2b
 800ad1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad20:	f89a 3000 	ldrb.w	r3, [sl]
 800ad24:	2b2a      	cmp	r3, #42	; 0x2a
 800ad26:	d015      	beq.n	800ad54 <_vfiprintf_r+0x13c>
 800ad28:	4654      	mov	r4, sl
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	f04f 0c0a 	mov.w	ip, #10
 800ad30:	9a07      	ldr	r2, [sp, #28]
 800ad32:	4621      	mov	r1, r4
 800ad34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad38:	3b30      	subs	r3, #48	; 0x30
 800ad3a:	2b09      	cmp	r3, #9
 800ad3c:	d94e      	bls.n	800addc <_vfiprintf_r+0x1c4>
 800ad3e:	b1b0      	cbz	r0, 800ad6e <_vfiprintf_r+0x156>
 800ad40:	9207      	str	r2, [sp, #28]
 800ad42:	e014      	b.n	800ad6e <_vfiprintf_r+0x156>
 800ad44:	eba0 0308 	sub.w	r3, r0, r8
 800ad48:	fa09 f303 	lsl.w	r3, r9, r3
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	46a2      	mov	sl, r4
 800ad50:	9304      	str	r3, [sp, #16]
 800ad52:	e7d2      	b.n	800acfa <_vfiprintf_r+0xe2>
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	1d19      	adds	r1, r3, #4
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	9103      	str	r1, [sp, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bfbb      	ittet	lt
 800ad60:	425b      	neglt	r3, r3
 800ad62:	f042 0202 	orrlt.w	r2, r2, #2
 800ad66:	9307      	strge	r3, [sp, #28]
 800ad68:	9307      	strlt	r3, [sp, #28]
 800ad6a:	bfb8      	it	lt
 800ad6c:	9204      	strlt	r2, [sp, #16]
 800ad6e:	7823      	ldrb	r3, [r4, #0]
 800ad70:	2b2e      	cmp	r3, #46	; 0x2e
 800ad72:	d10c      	bne.n	800ad8e <_vfiprintf_r+0x176>
 800ad74:	7863      	ldrb	r3, [r4, #1]
 800ad76:	2b2a      	cmp	r3, #42	; 0x2a
 800ad78:	d135      	bne.n	800ade6 <_vfiprintf_r+0x1ce>
 800ad7a:	9b03      	ldr	r3, [sp, #12]
 800ad7c:	3402      	adds	r4, #2
 800ad7e:	1d1a      	adds	r2, r3, #4
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	9203      	str	r2, [sp, #12]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	bfb8      	it	lt
 800ad88:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad8c:	9305      	str	r3, [sp, #20]
 800ad8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ae68 <_vfiprintf_r+0x250>
 800ad92:	2203      	movs	r2, #3
 800ad94:	4650      	mov	r0, sl
 800ad96:	7821      	ldrb	r1, [r4, #0]
 800ad98:	f7fe fff6 	bl	8009d88 <memchr>
 800ad9c:	b140      	cbz	r0, 800adb0 <_vfiprintf_r+0x198>
 800ad9e:	2340      	movs	r3, #64	; 0x40
 800ada0:	eba0 000a 	sub.w	r0, r0, sl
 800ada4:	fa03 f000 	lsl.w	r0, r3, r0
 800ada8:	9b04      	ldr	r3, [sp, #16]
 800adaa:	3401      	adds	r4, #1
 800adac:	4303      	orrs	r3, r0
 800adae:	9304      	str	r3, [sp, #16]
 800adb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb4:	2206      	movs	r2, #6
 800adb6:	482d      	ldr	r0, [pc, #180]	; (800ae6c <_vfiprintf_r+0x254>)
 800adb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adbc:	f7fe ffe4 	bl	8009d88 <memchr>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d03f      	beq.n	800ae44 <_vfiprintf_r+0x22c>
 800adc4:	4b2a      	ldr	r3, [pc, #168]	; (800ae70 <_vfiprintf_r+0x258>)
 800adc6:	bb1b      	cbnz	r3, 800ae10 <_vfiprintf_r+0x1f8>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	3307      	adds	r3, #7
 800adcc:	f023 0307 	bic.w	r3, r3, #7
 800add0:	3308      	adds	r3, #8
 800add2:	9303      	str	r3, [sp, #12]
 800add4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add6:	443b      	add	r3, r7
 800add8:	9309      	str	r3, [sp, #36]	; 0x24
 800adda:	e767      	b.n	800acac <_vfiprintf_r+0x94>
 800addc:	460c      	mov	r4, r1
 800adde:	2001      	movs	r0, #1
 800ade0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ade4:	e7a5      	b.n	800ad32 <_vfiprintf_r+0x11a>
 800ade6:	2300      	movs	r3, #0
 800ade8:	f04f 0c0a 	mov.w	ip, #10
 800adec:	4619      	mov	r1, r3
 800adee:	3401      	adds	r4, #1
 800adf0:	9305      	str	r3, [sp, #20]
 800adf2:	4620      	mov	r0, r4
 800adf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adf8:	3a30      	subs	r2, #48	; 0x30
 800adfa:	2a09      	cmp	r2, #9
 800adfc:	d903      	bls.n	800ae06 <_vfiprintf_r+0x1ee>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0c5      	beq.n	800ad8e <_vfiprintf_r+0x176>
 800ae02:	9105      	str	r1, [sp, #20]
 800ae04:	e7c3      	b.n	800ad8e <_vfiprintf_r+0x176>
 800ae06:	4604      	mov	r4, r0
 800ae08:	2301      	movs	r3, #1
 800ae0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae0e:	e7f0      	b.n	800adf2 <_vfiprintf_r+0x1da>
 800ae10:	ab03      	add	r3, sp, #12
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	462a      	mov	r2, r5
 800ae16:	4630      	mov	r0, r6
 800ae18:	4b16      	ldr	r3, [pc, #88]	; (800ae74 <_vfiprintf_r+0x25c>)
 800ae1a:	a904      	add	r1, sp, #16
 800ae1c:	f7fc f822 	bl	8006e64 <_printf_float>
 800ae20:	4607      	mov	r7, r0
 800ae22:	1c78      	adds	r0, r7, #1
 800ae24:	d1d6      	bne.n	800add4 <_vfiprintf_r+0x1bc>
 800ae26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae28:	07d9      	lsls	r1, r3, #31
 800ae2a:	d405      	bmi.n	800ae38 <_vfiprintf_r+0x220>
 800ae2c:	89ab      	ldrh	r3, [r5, #12]
 800ae2e:	059a      	lsls	r2, r3, #22
 800ae30:	d402      	bmi.n	800ae38 <_vfiprintf_r+0x220>
 800ae32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae34:	f7fe ff8c 	bl	8009d50 <__retarget_lock_release_recursive>
 800ae38:	89ab      	ldrh	r3, [r5, #12]
 800ae3a:	065b      	lsls	r3, r3, #25
 800ae3c:	f53f af12 	bmi.w	800ac64 <_vfiprintf_r+0x4c>
 800ae40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae42:	e711      	b.n	800ac68 <_vfiprintf_r+0x50>
 800ae44:	ab03      	add	r3, sp, #12
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	462a      	mov	r2, r5
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <_vfiprintf_r+0x25c>)
 800ae4e:	a904      	add	r1, sp, #16
 800ae50:	f7fc faa4 	bl	800739c <_printf_i>
 800ae54:	e7e4      	b.n	800ae20 <_vfiprintf_r+0x208>
 800ae56:	bf00      	nop
 800ae58:	0800d0b4 	.word	0x0800d0b4
 800ae5c:	0800d0d4 	.word	0x0800d0d4
 800ae60:	0800d094 	.word	0x0800d094
 800ae64:	0800d2cc 	.word	0x0800d2cc
 800ae68:	0800d2d2 	.word	0x0800d2d2
 800ae6c:	0800d2d6 	.word	0x0800d2d6
 800ae70:	08006e65 	.word	0x08006e65
 800ae74:	0800abf3 	.word	0x0800abf3

0800ae78 <nan>:
 800ae78:	2000      	movs	r0, #0
 800ae7a:	4901      	ldr	r1, [pc, #4]	; (800ae80 <nan+0x8>)
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	7ff80000 	.word	0x7ff80000

0800ae84 <_sbrk_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	2300      	movs	r3, #0
 800ae88:	4d05      	ldr	r5, [pc, #20]	; (800aea0 <_sbrk_r+0x1c>)
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	602b      	str	r3, [r5, #0]
 800ae90:	f7f9 fc32 	bl	80046f8 <_sbrk>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d102      	bne.n	800ae9e <_sbrk_r+0x1a>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	b103      	cbz	r3, 800ae9e <_sbrk_r+0x1a>
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	20000adc 	.word	0x20000adc

0800aea4 <__sread>:
 800aea4:	b510      	push	{r4, lr}
 800aea6:	460c      	mov	r4, r1
 800aea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeac:	f000 fafe 	bl	800b4ac <_read_r>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	bfab      	itete	ge
 800aeb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aeb6:	89a3      	ldrhlt	r3, [r4, #12]
 800aeb8:	181b      	addge	r3, r3, r0
 800aeba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aebe:	bfac      	ite	ge
 800aec0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aec2:	81a3      	strhlt	r3, [r4, #12]
 800aec4:	bd10      	pop	{r4, pc}

0800aec6 <__swrite>:
 800aec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	461f      	mov	r7, r3
 800aecc:	898b      	ldrh	r3, [r1, #12]
 800aece:	4605      	mov	r5, r0
 800aed0:	05db      	lsls	r3, r3, #23
 800aed2:	460c      	mov	r4, r1
 800aed4:	4616      	mov	r6, r2
 800aed6:	d505      	bpl.n	800aee4 <__swrite+0x1e>
 800aed8:	2302      	movs	r3, #2
 800aeda:	2200      	movs	r2, #0
 800aedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee0:	f000 fa16 	bl	800b310 <_lseek_r>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	4632      	mov	r2, r6
 800aee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	4628      	mov	r0, r5
 800aef0:	463b      	mov	r3, r7
 800aef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aefa:	f000 b88b 	b.w	800b014 <_write_r>

0800aefe <__sseek>:
 800aefe:	b510      	push	{r4, lr}
 800af00:	460c      	mov	r4, r1
 800af02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af06:	f000 fa03 	bl	800b310 <_lseek_r>
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	bf15      	itete	ne
 800af10:	6560      	strne	r0, [r4, #84]	; 0x54
 800af12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af1a:	81a3      	strheq	r3, [r4, #12]
 800af1c:	bf18      	it	ne
 800af1e:	81a3      	strhne	r3, [r4, #12]
 800af20:	bd10      	pop	{r4, pc}

0800af22 <__sclose>:
 800af22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af26:	f000 b913 	b.w	800b150 <_close_r>

0800af2a <strncmp>:
 800af2a:	4603      	mov	r3, r0
 800af2c:	b510      	push	{r4, lr}
 800af2e:	b172      	cbz	r2, 800af4e <strncmp+0x24>
 800af30:	3901      	subs	r1, #1
 800af32:	1884      	adds	r4, r0, r2
 800af34:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af3c:	4290      	cmp	r0, r2
 800af3e:	d101      	bne.n	800af44 <strncmp+0x1a>
 800af40:	42a3      	cmp	r3, r4
 800af42:	d101      	bne.n	800af48 <strncmp+0x1e>
 800af44:	1a80      	subs	r0, r0, r2
 800af46:	bd10      	pop	{r4, pc}
 800af48:	2800      	cmp	r0, #0
 800af4a:	d1f3      	bne.n	800af34 <strncmp+0xa>
 800af4c:	e7fa      	b.n	800af44 <strncmp+0x1a>
 800af4e:	4610      	mov	r0, r2
 800af50:	e7f9      	b.n	800af46 <strncmp+0x1c>
	...

0800af54 <__swbuf_r>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	460e      	mov	r6, r1
 800af58:	4614      	mov	r4, r2
 800af5a:	4605      	mov	r5, r0
 800af5c:	b118      	cbz	r0, 800af66 <__swbuf_r+0x12>
 800af5e:	6983      	ldr	r3, [r0, #24]
 800af60:	b90b      	cbnz	r3, 800af66 <__swbuf_r+0x12>
 800af62:	f7fe faeb 	bl	800953c <__sinit>
 800af66:	4b21      	ldr	r3, [pc, #132]	; (800afec <__swbuf_r+0x98>)
 800af68:	429c      	cmp	r4, r3
 800af6a:	d12b      	bne.n	800afc4 <__swbuf_r+0x70>
 800af6c:	686c      	ldr	r4, [r5, #4]
 800af6e:	69a3      	ldr	r3, [r4, #24]
 800af70:	60a3      	str	r3, [r4, #8]
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	071a      	lsls	r2, r3, #28
 800af76:	d52f      	bpl.n	800afd8 <__swbuf_r+0x84>
 800af78:	6923      	ldr	r3, [r4, #16]
 800af7a:	b36b      	cbz	r3, 800afd8 <__swbuf_r+0x84>
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	6820      	ldr	r0, [r4, #0]
 800af80:	b2f6      	uxtb	r6, r6
 800af82:	1ac0      	subs	r0, r0, r3
 800af84:	6963      	ldr	r3, [r4, #20]
 800af86:	4637      	mov	r7, r6
 800af88:	4283      	cmp	r3, r0
 800af8a:	dc04      	bgt.n	800af96 <__swbuf_r+0x42>
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f970 	bl	800b274 <_fflush_r>
 800af94:	bb30      	cbnz	r0, 800afe4 <__swbuf_r+0x90>
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	3001      	adds	r0, #1
 800af9a:	3b01      	subs	r3, #1
 800af9c:	60a3      	str	r3, [r4, #8]
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	6022      	str	r2, [r4, #0]
 800afa4:	701e      	strb	r6, [r3, #0]
 800afa6:	6963      	ldr	r3, [r4, #20]
 800afa8:	4283      	cmp	r3, r0
 800afaa:	d004      	beq.n	800afb6 <__swbuf_r+0x62>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	07db      	lsls	r3, r3, #31
 800afb0:	d506      	bpl.n	800afc0 <__swbuf_r+0x6c>
 800afb2:	2e0a      	cmp	r6, #10
 800afb4:	d104      	bne.n	800afc0 <__swbuf_r+0x6c>
 800afb6:	4621      	mov	r1, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	f000 f95b 	bl	800b274 <_fflush_r>
 800afbe:	b988      	cbnz	r0, 800afe4 <__swbuf_r+0x90>
 800afc0:	4638      	mov	r0, r7
 800afc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc4:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <__swbuf_r+0x9c>)
 800afc6:	429c      	cmp	r4, r3
 800afc8:	d101      	bne.n	800afce <__swbuf_r+0x7a>
 800afca:	68ac      	ldr	r4, [r5, #8]
 800afcc:	e7cf      	b.n	800af6e <__swbuf_r+0x1a>
 800afce:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <__swbuf_r+0xa0>)
 800afd0:	429c      	cmp	r4, r3
 800afd2:	bf08      	it	eq
 800afd4:	68ec      	ldreq	r4, [r5, #12]
 800afd6:	e7ca      	b.n	800af6e <__swbuf_r+0x1a>
 800afd8:	4621      	mov	r1, r4
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 f82c 	bl	800b038 <__swsetup_r>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d0cb      	beq.n	800af7c <__swbuf_r+0x28>
 800afe4:	f04f 37ff 	mov.w	r7, #4294967295
 800afe8:	e7ea      	b.n	800afc0 <__swbuf_r+0x6c>
 800afea:	bf00      	nop
 800afec:	0800d0b4 	.word	0x0800d0b4
 800aff0:	0800d0d4 	.word	0x0800d0d4
 800aff4:	0800d094 	.word	0x0800d094

0800aff8 <__ascii_wctomb>:
 800aff8:	4603      	mov	r3, r0
 800affa:	4608      	mov	r0, r1
 800affc:	b141      	cbz	r1, 800b010 <__ascii_wctomb+0x18>
 800affe:	2aff      	cmp	r2, #255	; 0xff
 800b000:	d904      	bls.n	800b00c <__ascii_wctomb+0x14>
 800b002:	228a      	movs	r2, #138	; 0x8a
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	601a      	str	r2, [r3, #0]
 800b00a:	4770      	bx	lr
 800b00c:	2001      	movs	r0, #1
 800b00e:	700a      	strb	r2, [r1, #0]
 800b010:	4770      	bx	lr
	...

0800b014 <_write_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4604      	mov	r4, r0
 800b018:	4608      	mov	r0, r1
 800b01a:	4611      	mov	r1, r2
 800b01c:	2200      	movs	r2, #0
 800b01e:	4d05      	ldr	r5, [pc, #20]	; (800b034 <_write_r+0x20>)
 800b020:	602a      	str	r2, [r5, #0]
 800b022:	461a      	mov	r2, r3
 800b024:	f7f9 fb1c 	bl	8004660 <_write>
 800b028:	1c43      	adds	r3, r0, #1
 800b02a:	d102      	bne.n	800b032 <_write_r+0x1e>
 800b02c:	682b      	ldr	r3, [r5, #0]
 800b02e:	b103      	cbz	r3, 800b032 <_write_r+0x1e>
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	bd38      	pop	{r3, r4, r5, pc}
 800b034:	20000adc 	.word	0x20000adc

0800b038 <__swsetup_r>:
 800b038:	4b32      	ldr	r3, [pc, #200]	; (800b104 <__swsetup_r+0xcc>)
 800b03a:	b570      	push	{r4, r5, r6, lr}
 800b03c:	681d      	ldr	r5, [r3, #0]
 800b03e:	4606      	mov	r6, r0
 800b040:	460c      	mov	r4, r1
 800b042:	b125      	cbz	r5, 800b04e <__swsetup_r+0x16>
 800b044:	69ab      	ldr	r3, [r5, #24]
 800b046:	b913      	cbnz	r3, 800b04e <__swsetup_r+0x16>
 800b048:	4628      	mov	r0, r5
 800b04a:	f7fe fa77 	bl	800953c <__sinit>
 800b04e:	4b2e      	ldr	r3, [pc, #184]	; (800b108 <__swsetup_r+0xd0>)
 800b050:	429c      	cmp	r4, r3
 800b052:	d10f      	bne.n	800b074 <__swsetup_r+0x3c>
 800b054:	686c      	ldr	r4, [r5, #4]
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b05c:	0719      	lsls	r1, r3, #28
 800b05e:	d42c      	bmi.n	800b0ba <__swsetup_r+0x82>
 800b060:	06dd      	lsls	r5, r3, #27
 800b062:	d411      	bmi.n	800b088 <__swsetup_r+0x50>
 800b064:	2309      	movs	r3, #9
 800b066:	6033      	str	r3, [r6, #0]
 800b068:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b06c:	f04f 30ff 	mov.w	r0, #4294967295
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	e03e      	b.n	800b0f2 <__swsetup_r+0xba>
 800b074:	4b25      	ldr	r3, [pc, #148]	; (800b10c <__swsetup_r+0xd4>)
 800b076:	429c      	cmp	r4, r3
 800b078:	d101      	bne.n	800b07e <__swsetup_r+0x46>
 800b07a:	68ac      	ldr	r4, [r5, #8]
 800b07c:	e7eb      	b.n	800b056 <__swsetup_r+0x1e>
 800b07e:	4b24      	ldr	r3, [pc, #144]	; (800b110 <__swsetup_r+0xd8>)
 800b080:	429c      	cmp	r4, r3
 800b082:	bf08      	it	eq
 800b084:	68ec      	ldreq	r4, [r5, #12]
 800b086:	e7e6      	b.n	800b056 <__swsetup_r+0x1e>
 800b088:	0758      	lsls	r0, r3, #29
 800b08a:	d512      	bpl.n	800b0b2 <__swsetup_r+0x7a>
 800b08c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b08e:	b141      	cbz	r1, 800b0a2 <__swsetup_r+0x6a>
 800b090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b094:	4299      	cmp	r1, r3
 800b096:	d002      	beq.n	800b09e <__swsetup_r+0x66>
 800b098:	4630      	mov	r0, r6
 800b09a:	f7ff fb5d 	bl	800a758 <_free_r>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	6363      	str	r3, [r4, #52]	; 0x34
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	6063      	str	r3, [r4, #4]
 800b0ae:	6923      	ldr	r3, [r4, #16]
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	f043 0308 	orr.w	r3, r3, #8
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	6923      	ldr	r3, [r4, #16]
 800b0bc:	b94b      	cbnz	r3, 800b0d2 <__swsetup_r+0x9a>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0c8:	d003      	beq.n	800b0d2 <__swsetup_r+0x9a>
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f000 f957 	bl	800b380 <__smakebuf_r>
 800b0d2:	89a0      	ldrh	r0, [r4, #12]
 800b0d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0d8:	f010 0301 	ands.w	r3, r0, #1
 800b0dc:	d00a      	beq.n	800b0f4 <__swsetup_r+0xbc>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60a3      	str	r3, [r4, #8]
 800b0e2:	6963      	ldr	r3, [r4, #20]
 800b0e4:	425b      	negs	r3, r3
 800b0e6:	61a3      	str	r3, [r4, #24]
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	b943      	cbnz	r3, 800b0fe <__swsetup_r+0xc6>
 800b0ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0f0:	d1ba      	bne.n	800b068 <__swsetup_r+0x30>
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	0781      	lsls	r1, r0, #30
 800b0f6:	bf58      	it	pl
 800b0f8:	6963      	ldrpl	r3, [r4, #20]
 800b0fa:	60a3      	str	r3, [r4, #8]
 800b0fc:	e7f4      	b.n	800b0e8 <__swsetup_r+0xb0>
 800b0fe:	2000      	movs	r0, #0
 800b100:	e7f7      	b.n	800b0f2 <__swsetup_r+0xba>
 800b102:	bf00      	nop
 800b104:	20000014 	.word	0x20000014
 800b108:	0800d0b4 	.word	0x0800d0b4
 800b10c:	0800d0d4 	.word	0x0800d0d4
 800b110:	0800d094 	.word	0x0800d094

0800b114 <__assert_func>:
 800b114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b116:	4614      	mov	r4, r2
 800b118:	461a      	mov	r2, r3
 800b11a:	4b09      	ldr	r3, [pc, #36]	; (800b140 <__assert_func+0x2c>)
 800b11c:	4605      	mov	r5, r0
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68d8      	ldr	r0, [r3, #12]
 800b122:	b14c      	cbz	r4, 800b138 <__assert_func+0x24>
 800b124:	4b07      	ldr	r3, [pc, #28]	; (800b144 <__assert_func+0x30>)
 800b126:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b12a:	9100      	str	r1, [sp, #0]
 800b12c:	462b      	mov	r3, r5
 800b12e:	4906      	ldr	r1, [pc, #24]	; (800b148 <__assert_func+0x34>)
 800b130:	f000 f8dc 	bl	800b2ec <fiprintf>
 800b134:	f000 f9cc 	bl	800b4d0 <abort>
 800b138:	4b04      	ldr	r3, [pc, #16]	; (800b14c <__assert_func+0x38>)
 800b13a:	461c      	mov	r4, r3
 800b13c:	e7f3      	b.n	800b126 <__assert_func+0x12>
 800b13e:	bf00      	nop
 800b140:	20000014 	.word	0x20000014
 800b144:	0800d2dd 	.word	0x0800d2dd
 800b148:	0800d2ea 	.word	0x0800d2ea
 800b14c:	0800d318 	.word	0x0800d318

0800b150 <_close_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	2300      	movs	r3, #0
 800b154:	4d05      	ldr	r5, [pc, #20]	; (800b16c <_close_r+0x1c>)
 800b156:	4604      	mov	r4, r0
 800b158:	4608      	mov	r0, r1
 800b15a:	602b      	str	r3, [r5, #0]
 800b15c:	f7f9 fa9c 	bl	8004698 <_close>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d102      	bne.n	800b16a <_close_r+0x1a>
 800b164:	682b      	ldr	r3, [r5, #0]
 800b166:	b103      	cbz	r3, 800b16a <_close_r+0x1a>
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	bd38      	pop	{r3, r4, r5, pc}
 800b16c:	20000adc 	.word	0x20000adc

0800b170 <__sflush_r>:
 800b170:	898a      	ldrh	r2, [r1, #12]
 800b172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b174:	4605      	mov	r5, r0
 800b176:	0710      	lsls	r0, r2, #28
 800b178:	460c      	mov	r4, r1
 800b17a:	d457      	bmi.n	800b22c <__sflush_r+0xbc>
 800b17c:	684b      	ldr	r3, [r1, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dc04      	bgt.n	800b18c <__sflush_r+0x1c>
 800b182:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b184:	2b00      	cmp	r3, #0
 800b186:	dc01      	bgt.n	800b18c <__sflush_r+0x1c>
 800b188:	2000      	movs	r0, #0
 800b18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b18c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b18e:	2e00      	cmp	r6, #0
 800b190:	d0fa      	beq.n	800b188 <__sflush_r+0x18>
 800b192:	2300      	movs	r3, #0
 800b194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b198:	682f      	ldr	r7, [r5, #0]
 800b19a:	602b      	str	r3, [r5, #0]
 800b19c:	d032      	beq.n	800b204 <__sflush_r+0x94>
 800b19e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	075a      	lsls	r2, r3, #29
 800b1a4:	d505      	bpl.n	800b1b2 <__sflush_r+0x42>
 800b1a6:	6863      	ldr	r3, [r4, #4]
 800b1a8:	1ac0      	subs	r0, r0, r3
 800b1aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1ac:	b10b      	cbz	r3, 800b1b2 <__sflush_r+0x42>
 800b1ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1b0:	1ac0      	subs	r0, r0, r3
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	6a21      	ldr	r1, [r4, #32]
 800b1bc:	47b0      	blx	r6
 800b1be:	1c43      	adds	r3, r0, #1
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	d106      	bne.n	800b1d2 <__sflush_r+0x62>
 800b1c4:	6829      	ldr	r1, [r5, #0]
 800b1c6:	291d      	cmp	r1, #29
 800b1c8:	d82c      	bhi.n	800b224 <__sflush_r+0xb4>
 800b1ca:	4a29      	ldr	r2, [pc, #164]	; (800b270 <__sflush_r+0x100>)
 800b1cc:	40ca      	lsrs	r2, r1
 800b1ce:	07d6      	lsls	r6, r2, #31
 800b1d0:	d528      	bpl.n	800b224 <__sflush_r+0xb4>
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	6062      	str	r2, [r4, #4]
 800b1d6:	6922      	ldr	r2, [r4, #16]
 800b1d8:	04d9      	lsls	r1, r3, #19
 800b1da:	6022      	str	r2, [r4, #0]
 800b1dc:	d504      	bpl.n	800b1e8 <__sflush_r+0x78>
 800b1de:	1c42      	adds	r2, r0, #1
 800b1e0:	d101      	bne.n	800b1e6 <__sflush_r+0x76>
 800b1e2:	682b      	ldr	r3, [r5, #0]
 800b1e4:	b903      	cbnz	r3, 800b1e8 <__sflush_r+0x78>
 800b1e6:	6560      	str	r0, [r4, #84]	; 0x54
 800b1e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1ea:	602f      	str	r7, [r5, #0]
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	d0cb      	beq.n	800b188 <__sflush_r+0x18>
 800b1f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1f4:	4299      	cmp	r1, r3
 800b1f6:	d002      	beq.n	800b1fe <__sflush_r+0x8e>
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	f7ff faad 	bl	800a758 <_free_r>
 800b1fe:	2000      	movs	r0, #0
 800b200:	6360      	str	r0, [r4, #52]	; 0x34
 800b202:	e7c2      	b.n	800b18a <__sflush_r+0x1a>
 800b204:	6a21      	ldr	r1, [r4, #32]
 800b206:	2301      	movs	r3, #1
 800b208:	4628      	mov	r0, r5
 800b20a:	47b0      	blx	r6
 800b20c:	1c41      	adds	r1, r0, #1
 800b20e:	d1c7      	bne.n	800b1a0 <__sflush_r+0x30>
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0c4      	beq.n	800b1a0 <__sflush_r+0x30>
 800b216:	2b1d      	cmp	r3, #29
 800b218:	d001      	beq.n	800b21e <__sflush_r+0xae>
 800b21a:	2b16      	cmp	r3, #22
 800b21c:	d101      	bne.n	800b222 <__sflush_r+0xb2>
 800b21e:	602f      	str	r7, [r5, #0]
 800b220:	e7b2      	b.n	800b188 <__sflush_r+0x18>
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	e7ae      	b.n	800b18a <__sflush_r+0x1a>
 800b22c:	690f      	ldr	r7, [r1, #16]
 800b22e:	2f00      	cmp	r7, #0
 800b230:	d0aa      	beq.n	800b188 <__sflush_r+0x18>
 800b232:	0793      	lsls	r3, r2, #30
 800b234:	bf18      	it	ne
 800b236:	2300      	movne	r3, #0
 800b238:	680e      	ldr	r6, [r1, #0]
 800b23a:	bf08      	it	eq
 800b23c:	694b      	ldreq	r3, [r1, #20]
 800b23e:	1bf6      	subs	r6, r6, r7
 800b240:	600f      	str	r7, [r1, #0]
 800b242:	608b      	str	r3, [r1, #8]
 800b244:	2e00      	cmp	r6, #0
 800b246:	dd9f      	ble.n	800b188 <__sflush_r+0x18>
 800b248:	4633      	mov	r3, r6
 800b24a:	463a      	mov	r2, r7
 800b24c:	4628      	mov	r0, r5
 800b24e:	6a21      	ldr	r1, [r4, #32]
 800b250:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b254:	47e0      	blx	ip
 800b256:	2800      	cmp	r0, #0
 800b258:	dc06      	bgt.n	800b268 <__sflush_r+0xf8>
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	e790      	b.n	800b18a <__sflush_r+0x1a>
 800b268:	4407      	add	r7, r0
 800b26a:	1a36      	subs	r6, r6, r0
 800b26c:	e7ea      	b.n	800b244 <__sflush_r+0xd4>
 800b26e:	bf00      	nop
 800b270:	20400001 	.word	0x20400001

0800b274 <_fflush_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	690b      	ldr	r3, [r1, #16]
 800b278:	4605      	mov	r5, r0
 800b27a:	460c      	mov	r4, r1
 800b27c:	b913      	cbnz	r3, 800b284 <_fflush_r+0x10>
 800b27e:	2500      	movs	r5, #0
 800b280:	4628      	mov	r0, r5
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	b118      	cbz	r0, 800b28e <_fflush_r+0x1a>
 800b286:	6983      	ldr	r3, [r0, #24]
 800b288:	b90b      	cbnz	r3, 800b28e <_fflush_r+0x1a>
 800b28a:	f7fe f957 	bl	800953c <__sinit>
 800b28e:	4b14      	ldr	r3, [pc, #80]	; (800b2e0 <_fflush_r+0x6c>)
 800b290:	429c      	cmp	r4, r3
 800b292:	d11b      	bne.n	800b2cc <_fflush_r+0x58>
 800b294:	686c      	ldr	r4, [r5, #4]
 800b296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d0ef      	beq.n	800b27e <_fflush_r+0xa>
 800b29e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2a0:	07d0      	lsls	r0, r2, #31
 800b2a2:	d404      	bmi.n	800b2ae <_fflush_r+0x3a>
 800b2a4:	0599      	lsls	r1, r3, #22
 800b2a6:	d402      	bmi.n	800b2ae <_fflush_r+0x3a>
 800b2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2aa:	f7fe fd50 	bl	8009d4e <__retarget_lock_acquire_recursive>
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	f7ff ff5d 	bl	800b170 <__sflush_r>
 800b2b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	07da      	lsls	r2, r3, #31
 800b2bc:	d4e0      	bmi.n	800b280 <_fflush_r+0xc>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	059b      	lsls	r3, r3, #22
 800b2c2:	d4dd      	bmi.n	800b280 <_fflush_r+0xc>
 800b2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2c6:	f7fe fd43 	bl	8009d50 <__retarget_lock_release_recursive>
 800b2ca:	e7d9      	b.n	800b280 <_fflush_r+0xc>
 800b2cc:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <_fflush_r+0x70>)
 800b2ce:	429c      	cmp	r4, r3
 800b2d0:	d101      	bne.n	800b2d6 <_fflush_r+0x62>
 800b2d2:	68ac      	ldr	r4, [r5, #8]
 800b2d4:	e7df      	b.n	800b296 <_fflush_r+0x22>
 800b2d6:	4b04      	ldr	r3, [pc, #16]	; (800b2e8 <_fflush_r+0x74>)
 800b2d8:	429c      	cmp	r4, r3
 800b2da:	bf08      	it	eq
 800b2dc:	68ec      	ldreq	r4, [r5, #12]
 800b2de:	e7da      	b.n	800b296 <_fflush_r+0x22>
 800b2e0:	0800d0b4 	.word	0x0800d0b4
 800b2e4:	0800d0d4 	.word	0x0800d0d4
 800b2e8:	0800d094 	.word	0x0800d094

0800b2ec <fiprintf>:
 800b2ec:	b40e      	push	{r1, r2, r3}
 800b2ee:	b503      	push	{r0, r1, lr}
 800b2f0:	4601      	mov	r1, r0
 800b2f2:	ab03      	add	r3, sp, #12
 800b2f4:	4805      	ldr	r0, [pc, #20]	; (800b30c <fiprintf+0x20>)
 800b2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fa:	6800      	ldr	r0, [r0, #0]
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	f7ff fc8b 	bl	800ac18 <_vfiprintf_r>
 800b302:	b002      	add	sp, #8
 800b304:	f85d eb04 	ldr.w	lr, [sp], #4
 800b308:	b003      	add	sp, #12
 800b30a:	4770      	bx	lr
 800b30c:	20000014 	.word	0x20000014

0800b310 <_lseek_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	4611      	mov	r1, r2
 800b318:	2200      	movs	r2, #0
 800b31a:	4d05      	ldr	r5, [pc, #20]	; (800b330 <_lseek_r+0x20>)
 800b31c:	602a      	str	r2, [r5, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	f7f9 f9de 	bl	80046e0 <_lseek>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_lseek_r+0x1e>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_lseek_r+0x1e>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	20000adc 	.word	0x20000adc

0800b334 <__swhatbuf_r>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	460e      	mov	r6, r1
 800b338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b33c:	4614      	mov	r4, r2
 800b33e:	2900      	cmp	r1, #0
 800b340:	461d      	mov	r5, r3
 800b342:	b096      	sub	sp, #88	; 0x58
 800b344:	da08      	bge.n	800b358 <__swhatbuf_r+0x24>
 800b346:	2200      	movs	r2, #0
 800b348:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b34c:	602a      	str	r2, [r5, #0]
 800b34e:	061a      	lsls	r2, r3, #24
 800b350:	d410      	bmi.n	800b374 <__swhatbuf_r+0x40>
 800b352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b356:	e00e      	b.n	800b376 <__swhatbuf_r+0x42>
 800b358:	466a      	mov	r2, sp
 800b35a:	f000 f8c1 	bl	800b4e0 <_fstat_r>
 800b35e:	2800      	cmp	r0, #0
 800b360:	dbf1      	blt.n	800b346 <__swhatbuf_r+0x12>
 800b362:	9a01      	ldr	r2, [sp, #4]
 800b364:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b368:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b36c:	425a      	negs	r2, r3
 800b36e:	415a      	adcs	r2, r3
 800b370:	602a      	str	r2, [r5, #0]
 800b372:	e7ee      	b.n	800b352 <__swhatbuf_r+0x1e>
 800b374:	2340      	movs	r3, #64	; 0x40
 800b376:	2000      	movs	r0, #0
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	b016      	add	sp, #88	; 0x58
 800b37c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b380 <__smakebuf_r>:
 800b380:	898b      	ldrh	r3, [r1, #12]
 800b382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b384:	079d      	lsls	r5, r3, #30
 800b386:	4606      	mov	r6, r0
 800b388:	460c      	mov	r4, r1
 800b38a:	d507      	bpl.n	800b39c <__smakebuf_r+0x1c>
 800b38c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	6123      	str	r3, [r4, #16]
 800b394:	2301      	movs	r3, #1
 800b396:	6163      	str	r3, [r4, #20]
 800b398:	b002      	add	sp, #8
 800b39a:	bd70      	pop	{r4, r5, r6, pc}
 800b39c:	466a      	mov	r2, sp
 800b39e:	ab01      	add	r3, sp, #4
 800b3a0:	f7ff ffc8 	bl	800b334 <__swhatbuf_r>
 800b3a4:	9900      	ldr	r1, [sp, #0]
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f7ff fa3d 	bl	800a828 <_malloc_r>
 800b3ae:	b948      	cbnz	r0, 800b3c4 <__smakebuf_r+0x44>
 800b3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3b4:	059a      	lsls	r2, r3, #22
 800b3b6:	d4ef      	bmi.n	800b398 <__smakebuf_r+0x18>
 800b3b8:	f023 0303 	bic.w	r3, r3, #3
 800b3bc:	f043 0302 	orr.w	r3, r3, #2
 800b3c0:	81a3      	strh	r3, [r4, #12]
 800b3c2:	e7e3      	b.n	800b38c <__smakebuf_r+0xc>
 800b3c4:	4b0d      	ldr	r3, [pc, #52]	; (800b3fc <__smakebuf_r+0x7c>)
 800b3c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	6020      	str	r0, [r4, #0]
 800b3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3d0:	81a3      	strh	r3, [r4, #12]
 800b3d2:	9b00      	ldr	r3, [sp, #0]
 800b3d4:	6120      	str	r0, [r4, #16]
 800b3d6:	6163      	str	r3, [r4, #20]
 800b3d8:	9b01      	ldr	r3, [sp, #4]
 800b3da:	b15b      	cbz	r3, 800b3f4 <__smakebuf_r+0x74>
 800b3dc:	4630      	mov	r0, r6
 800b3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3e2:	f000 f88f 	bl	800b504 <_isatty_r>
 800b3e6:	b128      	cbz	r0, 800b3f4 <__smakebuf_r+0x74>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f023 0303 	bic.w	r3, r3, #3
 800b3ee:	f043 0301 	orr.w	r3, r3, #1
 800b3f2:	81a3      	strh	r3, [r4, #12]
 800b3f4:	89a0      	ldrh	r0, [r4, #12]
 800b3f6:	4305      	orrs	r5, r0
 800b3f8:	81a5      	strh	r5, [r4, #12]
 800b3fa:	e7cd      	b.n	800b398 <__smakebuf_r+0x18>
 800b3fc:	080094d5 	.word	0x080094d5

0800b400 <memmove>:
 800b400:	4288      	cmp	r0, r1
 800b402:	b510      	push	{r4, lr}
 800b404:	eb01 0402 	add.w	r4, r1, r2
 800b408:	d902      	bls.n	800b410 <memmove+0x10>
 800b40a:	4284      	cmp	r4, r0
 800b40c:	4623      	mov	r3, r4
 800b40e:	d807      	bhi.n	800b420 <memmove+0x20>
 800b410:	1e43      	subs	r3, r0, #1
 800b412:	42a1      	cmp	r1, r4
 800b414:	d008      	beq.n	800b428 <memmove+0x28>
 800b416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b41a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b41e:	e7f8      	b.n	800b412 <memmove+0x12>
 800b420:	4601      	mov	r1, r0
 800b422:	4402      	add	r2, r0
 800b424:	428a      	cmp	r2, r1
 800b426:	d100      	bne.n	800b42a <memmove+0x2a>
 800b428:	bd10      	pop	{r4, pc}
 800b42a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b42e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b432:	e7f7      	b.n	800b424 <memmove+0x24>

0800b434 <__malloc_lock>:
 800b434:	4801      	ldr	r0, [pc, #4]	; (800b43c <__malloc_lock+0x8>)
 800b436:	f7fe bc8a 	b.w	8009d4e <__retarget_lock_acquire_recursive>
 800b43a:	bf00      	nop
 800b43c:	20000ad0 	.word	0x20000ad0

0800b440 <__malloc_unlock>:
 800b440:	4801      	ldr	r0, [pc, #4]	; (800b448 <__malloc_unlock+0x8>)
 800b442:	f7fe bc85 	b.w	8009d50 <__retarget_lock_release_recursive>
 800b446:	bf00      	nop
 800b448:	20000ad0 	.word	0x20000ad0

0800b44c <_realloc_r>:
 800b44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b450:	4680      	mov	r8, r0
 800b452:	4614      	mov	r4, r2
 800b454:	460e      	mov	r6, r1
 800b456:	b921      	cbnz	r1, 800b462 <_realloc_r+0x16>
 800b458:	4611      	mov	r1, r2
 800b45a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b45e:	f7ff b9e3 	b.w	800a828 <_malloc_r>
 800b462:	b92a      	cbnz	r2, 800b470 <_realloc_r+0x24>
 800b464:	f7ff f978 	bl	800a758 <_free_r>
 800b468:	4625      	mov	r5, r4
 800b46a:	4628      	mov	r0, r5
 800b46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b470:	f000 f858 	bl	800b524 <_malloc_usable_size_r>
 800b474:	4284      	cmp	r4, r0
 800b476:	4607      	mov	r7, r0
 800b478:	d802      	bhi.n	800b480 <_realloc_r+0x34>
 800b47a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b47e:	d812      	bhi.n	800b4a6 <_realloc_r+0x5a>
 800b480:	4621      	mov	r1, r4
 800b482:	4640      	mov	r0, r8
 800b484:	f7ff f9d0 	bl	800a828 <_malloc_r>
 800b488:	4605      	mov	r5, r0
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d0ed      	beq.n	800b46a <_realloc_r+0x1e>
 800b48e:	42bc      	cmp	r4, r7
 800b490:	4622      	mov	r2, r4
 800b492:	4631      	mov	r1, r6
 800b494:	bf28      	it	cs
 800b496:	463a      	movcs	r2, r7
 800b498:	f7fe fc84 	bl	8009da4 <memcpy>
 800b49c:	4631      	mov	r1, r6
 800b49e:	4640      	mov	r0, r8
 800b4a0:	f7ff f95a 	bl	800a758 <_free_r>
 800b4a4:	e7e1      	b.n	800b46a <_realloc_r+0x1e>
 800b4a6:	4635      	mov	r5, r6
 800b4a8:	e7df      	b.n	800b46a <_realloc_r+0x1e>
	...

0800b4ac <_read_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	4d05      	ldr	r5, [pc, #20]	; (800b4cc <_read_r+0x20>)
 800b4b8:	602a      	str	r2, [r5, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	f7f9 f8b3 	bl	8004626 <_read>
 800b4c0:	1c43      	adds	r3, r0, #1
 800b4c2:	d102      	bne.n	800b4ca <_read_r+0x1e>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	b103      	cbz	r3, 800b4ca <_read_r+0x1e>
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	bd38      	pop	{r3, r4, r5, pc}
 800b4cc:	20000adc 	.word	0x20000adc

0800b4d0 <abort>:
 800b4d0:	2006      	movs	r0, #6
 800b4d2:	b508      	push	{r3, lr}
 800b4d4:	f000 f856 	bl	800b584 <raise>
 800b4d8:	2001      	movs	r0, #1
 800b4da:	f7f9 f89a 	bl	8004612 <_exit>
	...

0800b4e0 <_fstat_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	4d06      	ldr	r5, [pc, #24]	; (800b500 <_fstat_r+0x20>)
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	4608      	mov	r0, r1
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	602b      	str	r3, [r5, #0]
 800b4ee:	f7f9 f8de 	bl	80046ae <_fstat>
 800b4f2:	1c43      	adds	r3, r0, #1
 800b4f4:	d102      	bne.n	800b4fc <_fstat_r+0x1c>
 800b4f6:	682b      	ldr	r3, [r5, #0]
 800b4f8:	b103      	cbz	r3, 800b4fc <_fstat_r+0x1c>
 800b4fa:	6023      	str	r3, [r4, #0]
 800b4fc:	bd38      	pop	{r3, r4, r5, pc}
 800b4fe:	bf00      	nop
 800b500:	20000adc 	.word	0x20000adc

0800b504 <_isatty_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	2300      	movs	r3, #0
 800b508:	4d05      	ldr	r5, [pc, #20]	; (800b520 <_isatty_r+0x1c>)
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7f9 f8dc 	bl	80046cc <_isatty>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_isatty_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_isatty_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20000adc 	.word	0x20000adc

0800b524 <_malloc_usable_size_r>:
 800b524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b528:	1f18      	subs	r0, r3, #4
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	bfbc      	itt	lt
 800b52e:	580b      	ldrlt	r3, [r1, r0]
 800b530:	18c0      	addlt	r0, r0, r3
 800b532:	4770      	bx	lr

0800b534 <_raise_r>:
 800b534:	291f      	cmp	r1, #31
 800b536:	b538      	push	{r3, r4, r5, lr}
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	d904      	bls.n	800b548 <_raise_r+0x14>
 800b53e:	2316      	movs	r3, #22
 800b540:	6003      	str	r3, [r0, #0]
 800b542:	f04f 30ff 	mov.w	r0, #4294967295
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b54a:	b112      	cbz	r2, 800b552 <_raise_r+0x1e>
 800b54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b550:	b94b      	cbnz	r3, 800b566 <_raise_r+0x32>
 800b552:	4620      	mov	r0, r4
 800b554:	f000 f830 	bl	800b5b8 <_getpid_r>
 800b558:	462a      	mov	r2, r5
 800b55a:	4601      	mov	r1, r0
 800b55c:	4620      	mov	r0, r4
 800b55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b562:	f000 b817 	b.w	800b594 <_kill_r>
 800b566:	2b01      	cmp	r3, #1
 800b568:	d00a      	beq.n	800b580 <_raise_r+0x4c>
 800b56a:	1c59      	adds	r1, r3, #1
 800b56c:	d103      	bne.n	800b576 <_raise_r+0x42>
 800b56e:	2316      	movs	r3, #22
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	2001      	movs	r0, #1
 800b574:	e7e7      	b.n	800b546 <_raise_r+0x12>
 800b576:	2400      	movs	r4, #0
 800b578:	4628      	mov	r0, r5
 800b57a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b57e:	4798      	blx	r3
 800b580:	2000      	movs	r0, #0
 800b582:	e7e0      	b.n	800b546 <_raise_r+0x12>

0800b584 <raise>:
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <raise+0xc>)
 800b586:	4601      	mov	r1, r0
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	f7ff bfd3 	b.w	800b534 <_raise_r>
 800b58e:	bf00      	nop
 800b590:	20000014 	.word	0x20000014

0800b594 <_kill_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	2300      	movs	r3, #0
 800b598:	4d06      	ldr	r5, [pc, #24]	; (800b5b4 <_kill_r+0x20>)
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	4611      	mov	r1, r2
 800b5a0:	602b      	str	r3, [r5, #0]
 800b5a2:	f7f9 f826 	bl	80045f2 <_kill>
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	d102      	bne.n	800b5b0 <_kill_r+0x1c>
 800b5aa:	682b      	ldr	r3, [r5, #0]
 800b5ac:	b103      	cbz	r3, 800b5b0 <_kill_r+0x1c>
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	bd38      	pop	{r3, r4, r5, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20000adc 	.word	0x20000adc

0800b5b8 <_getpid_r>:
 800b5b8:	f7f9 b814 	b.w	80045e4 <_getpid>

0800b5bc <_init>:
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	bf00      	nop
 800b5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5c2:	bc08      	pop	{r3}
 800b5c4:	469e      	mov	lr, r3
 800b5c6:	4770      	bx	lr

0800b5c8 <_fini>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	bf00      	nop
 800b5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ce:	bc08      	pop	{r3}
 800b5d0:	469e      	mov	lr, r3
 800b5d2:	4770      	bx	lr
