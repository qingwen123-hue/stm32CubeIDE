
FREERTOS_TASKINFO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb58  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e84  0800fd48  0800fd48  0001fd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bcc  08011bcc  000301ec  2**0
                  CONTENTS
  4 .ARM          00000000  08011bcc  08011bcc  000301ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011bcc  08011bcc  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bcc  08011bcc  00021bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bd0  08011bd0  00021bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08011bd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  200001ec  08011dc0  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d08  08011dc0  00031d08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002197c  00000000  00000000  00030215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000536b  00000000  00000000  00051b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d60  00000000  00000000  00056f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b28  00000000  00000000  00058c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020759  00000000  00000000  0005a788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002433f  00000000  00000000  0007aee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1b62  00000000  00000000  0009f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150d82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008eac  00000000  00000000  00150dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001ec 	.word	0x200001ec
 800020c:	00000000 	.word	0x00000000
 8000210:	0800fd30 	.word	0x0800fd30

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001f0 	.word	0x200001f0
 800022c:	0800fd30 	.word	0x0800fd30

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2lz>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	4605      	mov	r5, r0
 8000c4c:	460c      	mov	r4, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2300      	movs	r3, #0
 8000c52:	4628      	mov	r0, r5
 8000c54:	4621      	mov	r1, r4
 8000c56:	f7ff ff21 	bl	8000a9c <__aeabi_dcmplt>
 8000c5a:	b928      	cbnz	r0, 8000c68 <__aeabi_d2lz+0x20>
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	4621      	mov	r1, r4
 8000c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c64:	f000 b80a 	b.w	8000c7c <__aeabi_d2ulz>
 8000c68:	4628      	mov	r0, r5
 8000c6a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c6e:	f000 f805 	bl	8000c7c <__aeabi_d2ulz>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	bf00      	nop

08000c7c <__aeabi_d2ulz>:
 8000c7c:	b5d0      	push	{r4, r6, r7, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <__aeabi_d2ulz+0x34>)
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fc97 	bl	80005b8 <__aeabi_dmul>
 8000c8a:	f7ff ff6d 	bl	8000b68 <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc18 	bl	80004c4 <__aeabi_ui2d>
 8000c94:	2200      	movs	r2, #0
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <__aeabi_d2ulz+0x38>)
 8000c98:	f7ff fc8e 	bl	80005b8 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff fad0 	bl	8000248 <__aeabi_dsub>
 8000ca8:	f7ff ff5e 	bl	8000b68 <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(vu16 regval)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
    regval = regval;        //使用-O2优化的时候,必须插入的延时
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regval;  //写入要写的寄存器序号
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <LCD_WR_REG+0x24>)
 8000cca:	88fa      	ldrh	r2, [r7, #6]
 8000ccc:	b292      	uxth	r2, r2
 8000cce:	801a      	strh	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	6c0007fe 	.word	0x6c0007fe

08000ce0 <LCD_WR_DATA>:

//写LCD数据
//data:要写入的值
void LCD_WR_DATA(vu16 data)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
    data = data;            //使用-O2优化的时候,必须插入的延时
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <LCD_WR_DATA+0x24>)
 8000cf2:	88fa      	ldrh	r2, [r7, #6]
 8000cf4:	b292      	uxth	r2, r2
 8000cf6:	805a      	strh	r2, [r3, #2]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	6c0007fe 	.word	0x6c0007fe

08000d08 <LCD_RD_DATA>:

//读LCD数据
//返回值:读到的值
u16 LCD_RD_DATA(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
    vu16 ram;               //防止被优化
    ram = LCD->LCD_RAM;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <LCD_RD_DATA+0x1c>)
 8000d10:	885b      	ldrh	r3, [r3, #2]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	80fb      	strh	r3, [r7, #6]
    return ram;
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	b29b      	uxth	r3, r3
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	6c0007fe 	.word	0x6c0007fe

08000d28 <LCD_WriteReg>:

//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	460a      	mov	r2, r1
 8000d32:	80fb      	strh	r3, [r7, #6]
 8000d34:	4613      	mov	r3, r2
 8000d36:	80bb      	strh	r3, [r7, #4]
    LCD->LCD_REG = LCD_Reg;         //写入要写的寄存器序号
 8000d38:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <LCD_WriteReg+0x28>)
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	8013      	strh	r3, [r2, #0]
    LCD->LCD_RAM = LCD_RegValue;    //写入数据
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <LCD_WriteReg+0x28>)
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	8053      	strh	r3, [r2, #2]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	6c0007fe 	.word	0x6c0007fe

08000d54 <LCD_WriteRAM_Prepare>:
    return LCD_RD_DATA();           //返回读到的值
}

//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <LCD_WriteRAM_Prepare+0x14>)
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <LCD_WriteRAM_Prepare+0x18>)
 8000d5c:	8912      	ldrh	r2, [r2, #8]
 8000d5e:	801a      	strh	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	6c0007fe 	.word	0x6c0007fe
 8000d6c:	20000208 	.word	0x20000208

08000d70 <LCD_SetCursor>:

//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8000d80:	4b65      	ldr	r3, [pc, #404]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000d82:	889b      	ldrh	r3, [r3, #4]
 8000d84:	f641 1263 	movw	r2, #6499	; 0x1963
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d167      	bne.n	8000e5c <LCD_SetCursor+0xec>
    {
        if (lcddev.dir == 0)   //x坐标需要变换
 8000d8c:	4b62      	ldr	r3, [pc, #392]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000d8e:	799b      	ldrb	r3, [r3, #6]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d11e      	bne.n	8000dd2 <LCD_SetCursor+0x62>
        {
            Xpos = lcddev.width - 1 - Xpos;
 8000d94:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	80fb      	strh	r3, [r7, #6]
            LCD_WR_REG(lcddev.setxcmd);
 8000da2:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000da4:	895b      	ldrh	r3, [r3, #10]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff86 	bl	8000cb8 <LCD_WR_REG>
            LCD_WR_DATA(0);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff ff97 	bl	8000ce0 <LCD_WR_DATA>
            LCD_WR_DATA(0);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff ff94 	bl	8000ce0 <LCD_WR_DATA>
            LCD_WR_DATA(Xpos >> 8);
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff8e 	bl	8000ce0 <LCD_WR_DATA>
            LCD_WR_DATA(Xpos & 0XFF);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff88 	bl	8000ce0 <LCD_WR_DATA>
 8000dd0:	e021      	b.n	8000e16 <LCD_SetCursor+0xa6>
        }
        else
        {
            LCD_WR_REG(lcddev.setxcmd);
 8000dd2:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000dd4:	895b      	ldrh	r3, [r3, #10]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff6e 	bl	8000cb8 <LCD_WR_REG>
            LCD_WR_DATA(Xpos >> 8);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff7c 	bl	8000ce0 <LCD_WR_DATA>
            LCD_WR_DATA(Xpos & 0XFF);
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff76 	bl	8000ce0 <LCD_WR_DATA>
            LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000df4:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	121b      	asrs	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff6e 	bl	8000ce0 <LCD_WR_DATA>
            LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000e04:	4b44      	ldr	r3, [pc, #272]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff65 	bl	8000ce0 <LCD_WR_DATA>
        }

        LCD_WR_REG(lcddev.setycmd);
 8000e16:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000e18:	899b      	ldrh	r3, [r3, #12]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff4c 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000e20:	88bb      	ldrh	r3, [r7, #4]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff5a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(Ypos & 0XFF);
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff54 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000e38:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000e3a:	885b      	ldrh	r3, [r3, #2]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff4c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000e4a:	885b      	ldrh	r3, [r3, #2]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff43 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(Xpos & 0XFF);
        LCD_WR_REG(lcddev.setycmd);
        LCD_WR_DATA(Ypos >> 8);
        LCD_WR_DATA(Ypos & 0XFF);
    }
}
 8000e5a:	e058      	b.n	8000f0e <LCD_SetCursor+0x19e>
    else if (lcddev.id == 0X5510)
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000e5e:	889b      	ldrh	r3, [r3, #4]
 8000e60:	f245 5210 	movw	r2, #21776	; 0x5510
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d130      	bne.n	8000eca <LCD_SetCursor+0x15a>
        LCD_WR_REG(lcddev.setxcmd);
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000e6a:	895b      	ldrh	r3, [r3, #10]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff23 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(Xpos >> 8);
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff31 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 1);
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000e80:	895b      	ldrh	r3, [r3, #10]
 8000e82:	3301      	adds	r3, #1
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff16 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(Xpos & 0XFF);
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff24 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000e9a:	899b      	ldrh	r3, [r3, #12]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff0b 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff19 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 1);
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000eb0:	899b      	ldrh	r3, [r3, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fefe 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(Ypos & 0XFF);
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff0c 	bl	8000ce0 <LCD_WR_DATA>
}
 8000ec8:	e021      	b.n	8000f0e <LCD_SetCursor+0x19e>
        LCD_WR_REG(lcddev.setxcmd);
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000ecc:	895b      	ldrh	r3, [r3, #10]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fef2 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(Xpos >> 8);
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff00 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(Xpos & 0XFF);
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fefa 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <LCD_SetCursor+0x1a8>)
 8000eee:	899b      	ldrh	r3, [r3, #12]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fee1 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff feef 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(Ypos & 0XFF);
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fee9 	bl	8000ce0 <LCD_WR_DATA>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000208 	.word	0x20000208

08000f1c <LCD_Scan_Dir>:
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963/7789等IC已经实际测试
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
void LCD_Scan_Dir(u8 dir)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
    u16 regval = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	81fb      	strh	r3, [r7, #14]
    u16 dirreg = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	81bb      	strh	r3, [r7, #12]
    u16 temp;

    //横屏时，对1963不改变扫描方向, 其他IC改变扫描方向！竖屏时1963改变方向, 其他IC不改变扫描方向
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 8000f2e:	4b9a      	ldr	r3, [pc, #616]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8000f30:	799b      	ldrb	r3, [r3, #6]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d105      	bne.n	8000f42 <LCD_Scan_Dir+0x26>
 8000f36:	4b98      	ldr	r3, [pc, #608]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8000f38:	889b      	ldrh	r3, [r3, #4]
 8000f3a:	f641 1263 	movw	r2, #6499	; 0x1963
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d109      	bne.n	8000f56 <LCD_Scan_Dir+0x3a>
 8000f42:	4b95      	ldr	r3, [pc, #596]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8000f44:	799b      	ldrb	r3, [r3, #6]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d134      	bne.n	8000fb4 <LCD_Scan_Dir+0x98>
 8000f4a:	4b93      	ldr	r3, [pc, #588]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8000f4c:	889b      	ldrh	r3, [r3, #4]
 8000f4e:	f641 1263 	movw	r2, #6499	; 0x1963
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12e      	bne.n	8000fb4 <LCD_Scan_Dir+0x98>
    {
        switch (dir)   //方向转换
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	d82c      	bhi.n	8000fb6 <LCD_Scan_Dir+0x9a>
 8000f5c:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <LCD_Scan_Dir+0x48>)
 8000f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f62:	bf00      	nop
 8000f64:	08000f85 	.word	0x08000f85
 8000f68:	08000f8b 	.word	0x08000f8b
 8000f6c:	08000f91 	.word	0x08000f91
 8000f70:	08000f97 	.word	0x08000f97
 8000f74:	08000f9d 	.word	0x08000f9d
 8000f78:	08000fa3 	.word	0x08000fa3
 8000f7c:	08000fa9 	.word	0x08000fa9
 8000f80:	08000faf 	.word	0x08000faf
        {
            case 0:
                dir = 6;
 8000f84:	2306      	movs	r3, #6
 8000f86:	71fb      	strb	r3, [r7, #7]
                break;
 8000f88:	e015      	b.n	8000fb6 <LCD_Scan_Dir+0x9a>

            case 1:
                dir = 7;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	71fb      	strb	r3, [r7, #7]
                break;
 8000f8e:	e012      	b.n	8000fb6 <LCD_Scan_Dir+0x9a>

            case 2:
                dir = 4;
 8000f90:	2304      	movs	r3, #4
 8000f92:	71fb      	strb	r3, [r7, #7]
                break;
 8000f94:	e00f      	b.n	8000fb6 <LCD_Scan_Dir+0x9a>

            case 3:
                dir = 5;
 8000f96:	2305      	movs	r3, #5
 8000f98:	71fb      	strb	r3, [r7, #7]
                break;
 8000f9a:	e00c      	b.n	8000fb6 <LCD_Scan_Dir+0x9a>

            case 4:
                dir = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	71fb      	strb	r3, [r7, #7]
                break;
 8000fa0:	e009      	b.n	8000fb6 <LCD_Scan_Dir+0x9a>

            case 5:
                dir = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]
                break;
 8000fa6:	e006      	b.n	8000fb6 <LCD_Scan_Dir+0x9a>

            case 6:
                dir = 3;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	71fb      	strb	r3, [r7, #7]
                break;
 8000fac:	e003      	b.n	8000fb6 <LCD_Scan_Dir+0x9a>

            case 7:
                dir = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	71fb      	strb	r3, [r7, #7]
                break;
 8000fb2:	e000      	b.n	8000fb6 <LCD_Scan_Dir+0x9a>
        }
    }
 8000fb4:	bf00      	nop

    switch (dir)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d836      	bhi.n	800102a <LCD_Scan_Dir+0x10e>
 8000fbc:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <LCD_Scan_Dir+0xa8>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	0800102b 	.word	0x0800102b
 8000fc8:	08000fe5 	.word	0x08000fe5
 8000fcc:	08000fef 	.word	0x08000fef
 8000fd0:	08000ff9 	.word	0x08000ff9
 8000fd4:	08001003 	.word	0x08001003
 8000fd8:	0800100d 	.word	0x0800100d
 8000fdc:	08001017 	.word	0x08001017
 8000fe0:	08001021 	.word	0x08001021
        case L2R_U2D://从左到右,从上到下
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U://从左到右,从下到上
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fea:	81fb      	strh	r3, [r7, #14]
            break;
 8000fec:	e01d      	b.n	800102a <LCD_Scan_Dir+0x10e>

        case R2L_U2D://从右到左,从上到下
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff4:	81fb      	strh	r3, [r7, #14]
            break;
 8000ff6:	e018      	b.n	800102a <LCD_Scan_Dir+0x10e>

        case R2L_D2U://从右到左,从下到上
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8000ff8:	89fb      	ldrh	r3, [r7, #14]
 8000ffa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ffe:	81fb      	strh	r3, [r7, #14]
            break;
 8001000:	e013      	b.n	800102a <LCD_Scan_Dir+0x10e>

        case U2D_L2R://从上到下,从左到右
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	f043 0320 	orr.w	r3, r3, #32
 8001008:	81fb      	strh	r3, [r7, #14]
            break;
 800100a:	e00e      	b.n	800102a <LCD_Scan_Dir+0x10e>

        case U2D_R2L://从上到下,从右到左
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001012:	81fb      	strh	r3, [r7, #14]
            break;
 8001014:	e009      	b.n	800102a <LCD_Scan_Dir+0x10e>

        case D2U_L2R://从下到上,从左到右
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800101c:	81fb      	strh	r3, [r7, #14]
            break;
 800101e:	e004      	b.n	800102a <LCD_Scan_Dir+0x10e>

        case D2U_R2L://从下到上,从右到左
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001026:	81fb      	strh	r3, [r7, #14]
            break;
 8001028:	bf00      	nop
    }

    if (lcddev.id == 0X5510)dirreg = 0X3600;
 800102a:	4b5b      	ldr	r3, [pc, #364]	; (8001198 <LCD_Scan_Dir+0x27c>)
 800102c:	889b      	ldrh	r3, [r3, #4]
 800102e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001032:	4293      	cmp	r3, r2
 8001034:	d103      	bne.n	800103e <LCD_Scan_Dir+0x122>
 8001036:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800103a:	81bb      	strh	r3, [r7, #12]
 800103c:	e001      	b.n	8001042 <LCD_Scan_Dir+0x126>
    else dirreg = 0X36;
 800103e:	2336      	movs	r3, #54	; 0x36
 8001040:	81bb      	strh	r3, [r7, #12]

    if (lcddev.id == 0X9341 || lcddev.id == 0X7789)   //9341 & 7789 要设置BGR位
 8001042:	4b55      	ldr	r3, [pc, #340]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001044:	889b      	ldrh	r3, [r3, #4]
 8001046:	f249 3241 	movw	r2, #37697	; 0x9341
 800104a:	4293      	cmp	r3, r2
 800104c:	d005      	beq.n	800105a <LCD_Scan_Dir+0x13e>
 800104e:	4b52      	ldr	r3, [pc, #328]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001050:	889b      	ldrh	r3, [r3, #4]
 8001052:	f247 7289 	movw	r2, #30601	; 0x7789
 8001056:	4293      	cmp	r3, r2
 8001058:	d103      	bne.n	8001062 <LCD_Scan_Dir+0x146>
    {
        regval |= 0X08;
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	81fb      	strh	r3, [r7, #14]
    }

    LCD_WriteReg(dirreg, regval);
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	89bb      	ldrh	r3, [r7, #12]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe5d 	bl	8000d28 <LCD_WriteReg>

    if (lcddev.id != 0X1963)   //1963不做坐标处理
 800106e:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001070:	889b      	ldrh	r3, [r3, #4]
 8001072:	f641 1263 	movw	r2, #6499	; 0x1963
 8001076:	4293      	cmp	r3, r2
 8001078:	d025      	beq.n	80010c6 <LCD_Scan_Dir+0x1aa>
    {
        if (regval & 0X20)
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	f003 0320 	and.w	r3, r3, #32
 8001080:	2b00      	cmp	r3, #0
 8001082:	d010      	beq.n	80010a6 <LCD_Scan_Dir+0x18a>
        {
            if (lcddev.width < lcddev.height)   //交换X,Y
 8001084:	4b44      	ldr	r3, [pc, #272]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001086:	881a      	ldrh	r2, [r3, #0]
 8001088:	4b43      	ldr	r3, [pc, #268]	; (8001198 <LCD_Scan_Dir+0x27c>)
 800108a:	885b      	ldrh	r3, [r3, #2]
 800108c:	429a      	cmp	r2, r3
 800108e:	d21a      	bcs.n	80010c6 <LCD_Scan_Dir+0x1aa>
            {
                temp = lcddev.width;
 8001090:	4b41      	ldr	r3, [pc, #260]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8001096:	4b40      	ldr	r3, [pc, #256]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001098:	885a      	ldrh	r2, [r3, #2]
 800109a:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <LCD_Scan_Dir+0x27c>)
 800109c:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 800109e:	4a3e      	ldr	r2, [pc, #248]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	8053      	strh	r3, [r2, #2]
 80010a4:	e00f      	b.n	80010c6 <LCD_Scan_Dir+0x1aa>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   //交换X,Y
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010ac:	885b      	ldrh	r3, [r3, #2]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d909      	bls.n	80010c6 <LCD_Scan_Dir+0x1aa>
            {
                temp = lcddev.width;
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010ba:	885a      	ldrh	r2, [r3, #2]
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010be:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80010c0:	4a35      	ldr	r2, [pc, #212]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010c2:	897b      	ldrh	r3, [r7, #10]
 80010c4:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    //设置显示区域(开窗)大小
    if (lcddev.id == 0X5510)
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	f245 5210 	movw	r2, #21776	; 0x5510
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d164      	bne.n	800119c <LCD_Scan_Dir+0x280>
    {
        LCD_WR_REG(lcddev.setxcmd);
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010d4:	895b      	ldrh	r3, [r3, #10]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fdee 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fdff 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 1);
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010e4:	895b      	ldrh	r3, [r3, #10]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fde4 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fdf5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 2);
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <LCD_Scan_Dir+0x27c>)
 80010f8:	895b      	ldrh	r3, [r3, #10]
 80010fa:	3302      	adds	r3, #2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fdda 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	3b01      	subs	r3, #1
 800110a:	121b      	asrs	r3, r3, #8
 800110c:	b29b      	uxth	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fde6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 3);
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001116:	895b      	ldrh	r3, [r3, #10]
 8001118:	3303      	adds	r3, #3
 800111a:	b29b      	uxth	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fdcb 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	3b01      	subs	r3, #1
 8001128:	b29b      	uxth	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	b29b      	uxth	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fdd6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001136:	899b      	ldrh	r3, [r3, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fdbd 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fdce 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 1);
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001146:	899b      	ldrh	r3, [r3, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	b29b      	uxth	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fdb3 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fdc4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 2);
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <LCD_Scan_Dir+0x27c>)
 800115a:	899b      	ldrh	r3, [r3, #12]
 800115c:	3302      	adds	r3, #2
 800115e:	b29b      	uxth	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fda9 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001168:	885b      	ldrh	r3, [r3, #2]
 800116a:	3b01      	subs	r3, #1
 800116c:	121b      	asrs	r3, r3, #8
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fdb5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 3);
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001178:	899b      	ldrh	r3, [r3, #12]
 800117a:	3303      	adds	r3, #3
 800117c:	b29b      	uxth	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fd9a 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <LCD_Scan_Dir+0x27c>)
 8001186:	885b      	ldrh	r3, [r3, #2]
 8001188:	3b01      	subs	r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fda5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0);
        LCD_WR_DATA(0);
        LCD_WR_DATA((lcddev.height - 1) >> 8);
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
    }
}
 8001196:	e039      	b.n	800120c <LCD_Scan_Dir+0x2f0>
 8001198:	20000208 	.word	0x20000208
        LCD_WR_REG(lcddev.setxcmd);
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <LCD_Scan_Dir+0x2f8>)
 800119e:	895b      	ldrh	r3, [r3, #10]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fd89 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff fd9a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fd97 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.width - 1) >> 8);
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <LCD_Scan_Dir+0x2f8>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	121b      	asrs	r3, r3, #8
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd8f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <LCD_Scan_Dir+0x2f8>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fd86 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <LCD_Scan_Dir+0x2f8>)
 80011d6:	899b      	ldrh	r3, [r3, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd6d 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fd7e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fd7b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <LCD_Scan_Dir+0x2f8>)
 80011ec:	885b      	ldrh	r3, [r3, #2]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	121b      	asrs	r3, r3, #8
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fd73 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <LCD_Scan_Dir+0x2f8>)
 80011fc:	885b      	ldrh	r3, [r3, #2]
 80011fe:	3b01      	subs	r3, #1
 8001200:	b29b      	uxth	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fd6a 	bl	8000ce0 <LCD_WR_DATA>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000208 	.word	0x20000208

08001218 <LCD_Fast_DrawPoint>:

//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(u16 x, u16 y, u16 color)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
 8001222:	460b      	mov	r3, r1
 8001224:	80bb      	strh	r3, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	807b      	strh	r3, [r7, #2]
    if (lcddev.id == 0X5510)
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001232:	4293      	cmp	r3, r2
 8001234:	d130      	bne.n	8001298 <LCD_Fast_DrawPoint+0x80>
    {
        LCD_WR_REG(lcddev.setxcmd);
 8001236:	4b55      	ldr	r3, [pc, #340]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 8001238:	895b      	ldrh	r3, [r3, #10]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fd3c 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	b29b      	uxth	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fd4a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setxcmd + 1);
 800124c:	4b4f      	ldr	r3, [pc, #316]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 800124e:	895b      	ldrh	r3, [r3, #10]
 8001250:	3301      	adds	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fd2f 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(x & 0XFF);
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fd3d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8001266:	4b49      	ldr	r3, [pc, #292]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 8001268:	899b      	ldrh	r3, [r3, #12]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fd24 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd32 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd + 1);
 800127c:	4b43      	ldr	r3, [pc, #268]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 800127e:	899b      	ldrh	r3, [r3, #12]
 8001280:	3301      	adds	r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fd17 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(y & 0XFF);
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fd25 	bl	8000ce0 <LCD_WR_DATA>
 8001296:	e06d      	b.n	8001374 <LCD_Fast_DrawPoint+0x15c>
    }
    else if (lcddev.id == 0X1963)
 8001298:	4b3c      	ldr	r3, [pc, #240]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 800129a:	889b      	ldrh	r3, [r3, #4]
 800129c:	f641 1263 	movw	r2, #6499	; 0x1963
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d145      	bne.n	8001330 <LCD_Fast_DrawPoint+0x118>
    {
        if (lcddev.dir == 0)x = lcddev.width - 1 - x;
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 80012a6:	799b      	ldrb	r3, [r3, #6]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d106      	bne.n	80012ba <LCD_Fast_DrawPoint+0xa2>
 80012ac:	4b37      	ldr	r3, [pc, #220]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 80012ae:	881a      	ldrh	r2, [r3, #0]
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	80fb      	strh	r3, [r7, #6]

        LCD_WR_REG(lcddev.setxcmd);
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 80012bc:	895b      	ldrh	r3, [r3, #10]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fcfa 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd08 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(x & 0XFF);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fd02 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(x >> 8);
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fcfc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(x & 0XFF);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fcf6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 80012f6:	899b      	ldrh	r3, [r3, #12]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fcdd 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	b29b      	uxth	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fceb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(y & 0XFF);
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fce5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(y >> 8);
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	b29b      	uxth	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fcdf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(y & 0XFF);
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	b29b      	uxth	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fcd9 	bl	8000ce0 <LCD_WR_DATA>
 800132e:	e021      	b.n	8001374 <LCD_Fast_DrawPoint+0x15c>
    }
    else     //9341/5310/7789等设置坐标
    {
        LCD_WR_REG(lcddev.setxcmd);
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 8001332:	895b      	ldrh	r3, [r3, #10]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fcbf 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	b29b      	uxth	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fccd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(x & 0XFF);
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	b29b      	uxth	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fcc7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(lcddev.setycmd);
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 8001354:	899b      	ldrh	r3, [r3, #12]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fcae 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	b29b      	uxth	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fcbc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(y & 0XFF);
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	b29b      	uxth	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fcb6 	bl	8000ce0 <LCD_WR_DATA>
    }

    LCD->LCD_REG=lcddev.wramcmd; 
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <LCD_Fast_DrawPoint+0x178>)
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <LCD_Fast_DrawPoint+0x174>)
 8001378:	8912      	ldrh	r2, [r2, #8]
 800137a:	801a      	strh	r2, [r3, #0]
    LCD->LCD_RAM=color; 
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <LCD_Fast_DrawPoint+0x178>)
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	8053      	strh	r3, [r2, #2]
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000208 	.word	0x20000208
 8001390:	6c0007fe 	.word	0x6c0007fe
 8001394:	00000000 	.word	0x00000000

08001398 <LCD_SSD_BackLightSet>:

//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(u8 pwm)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
    LCD_WR_REG(0xBE);           //配置PWM输出
 80013a2:	20be      	movs	r0, #190	; 0xbe
 80013a4:	f7ff fc88 	bl	8000cb8 <LCD_WR_REG>
    LCD_WR_DATA(0x05);          //1设置PWM频率
 80013a8:	2005      	movs	r0, #5
 80013aa:	f7ff fc99 	bl	8000ce0 <LCD_WR_DATA>
    LCD_WR_DATA(pwm * 2.55);    //2设置PWM占空比
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f897 	bl	80004e4 <__aeabi_i2d>
 80013b6:	a310      	add	r3, pc, #64	; (adr r3, 80013f8 <LCD_SSD_BackLightSet+0x60>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f8fc 	bl	80005b8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fbce 	bl	8000b68 <__aeabi_d2uiz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fc85 	bl	8000ce0 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);          //3设置C
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff fc82 	bl	8000ce0 <LCD_WR_DATA>
    LCD_WR_DATA(0xFF);          //4设置D
 80013dc:	20ff      	movs	r0, #255	; 0xff
 80013de:	f7ff fc7f 	bl	8000ce0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);          //5设置E
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff fc7c 	bl	8000ce0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);          //6设置F
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fc79 	bl	8000ce0 <LCD_WR_DATA>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	66666666 	.word	0x66666666
 80013fc:	40046666 	.word	0x40046666

08001400 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(u8 dir)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;       //竖屏/横屏
 800140a:	4a58      	ldr	r2, [pc, #352]	; (800156c <LCD_Display_Dir+0x16c>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	7193      	strb	r3, [r2, #6]

    if (dir == 0)           //竖屏
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d151      	bne.n	80014ba <LCD_Display_Dir+0xba>
    {
        lcddev.width = 240;
 8001416:	4b55      	ldr	r3, [pc, #340]	; (800156c <LCD_Display_Dir+0x16c>)
 8001418:	22f0      	movs	r2, #240	; 0xf0
 800141a:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <LCD_Display_Dir+0x16c>)
 800141e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001422:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <LCD_Display_Dir+0x16c>)
 8001426:	889b      	ldrh	r3, [r3, #4]
 8001428:	f245 5210 	movw	r2, #21776	; 0x5510
 800142c:	4293      	cmp	r3, r2
 800142e:	d114      	bne.n	800145a <LCD_Display_Dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <LCD_Display_Dir+0x16c>)
 8001432:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001436:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001438:	4b4c      	ldr	r3, [pc, #304]	; (800156c <LCD_Display_Dir+0x16c>)
 800143a:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800143e:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001440:	4b4a      	ldr	r3, [pc, #296]	; (800156c <LCD_Display_Dir+0x16c>)
 8001442:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001446:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <LCD_Display_Dir+0x16c>)
 800144a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800144e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <LCD_Display_Dir+0x16c>)
 8001452:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001456:	805a      	strh	r2, [r3, #2]
 8001458:	e020      	b.n	800149c <LCD_Display_Dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <LCD_Display_Dir+0x16c>)
 800145c:	889b      	ldrh	r3, [r3, #4]
 800145e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001462:	4293      	cmp	r3, r2
 8001464:	d111      	bne.n	800148a <LCD_Display_Dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  //设置写入GRAM的指令
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <LCD_Display_Dir+0x16c>)
 8001468:	222c      	movs	r2, #44	; 0x2c
 800146a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  //设置写X坐标指令
 800146c:	4b3f      	ldr	r3, [pc, #252]	; (800156c <LCD_Display_Dir+0x16c>)
 800146e:	222b      	movs	r2, #43	; 0x2b
 8001470:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  //设置写Y坐标指令
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <LCD_Display_Dir+0x16c>)
 8001474:	222a      	movs	r2, #42	; 0x2a
 8001476:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     //设置宽度480
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <LCD_Display_Dir+0x16c>)
 800147a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800147e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    //设置高度800
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <LCD_Display_Dir+0x16c>)
 8001482:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001486:	805a      	strh	r2, [r3, #2]
 8001488:	e008      	b.n	800149c <LCD_Display_Dir+0x9c>
        }
        else                        //其他IC, 包括: 9341 / 5310 / 7789等IC
        {
            lcddev.wramcmd = 0X2C;
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <LCD_Display_Dir+0x16c>)
 800148c:	222c      	movs	r2, #44	; 0x2c
 800148e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <LCD_Display_Dir+0x16c>)
 8001492:	222a      	movs	r2, #42	; 0x2a
 8001494:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001496:	4b35      	ldr	r3, [pc, #212]	; (800156c <LCD_Display_Dir+0x16c>)
 8001498:	222b      	movs	r2, #43	; 0x2b
 800149a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310)    //如果是5310 则表示是 320*480分辨率
 800149c:	4b33      	ldr	r3, [pc, #204]	; (800156c <LCD_Display_Dir+0x16c>)
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	f245 3210 	movw	r2, #21264	; 0x5310
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d159      	bne.n	800155c <LCD_Display_Dir+0x15c>
        {
            lcddev.width = 320;
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <LCD_Display_Dir+0x16c>)
 80014aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014ae:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80014b0:	4b2e      	ldr	r3, [pc, #184]	; (800156c <LCD_Display_Dir+0x16c>)
 80014b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80014b6:	805a      	strh	r2, [r3, #2]
 80014b8:	e050      	b.n	800155c <LCD_Display_Dir+0x15c>
        }
    }
    else     //横屏
    {
        lcddev.width = 320;
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <LCD_Display_Dir+0x16c>)
 80014bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014c0:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <LCD_Display_Dir+0x16c>)
 80014c4:	22f0      	movs	r2, #240	; 0xf0
 80014c6:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <LCD_Display_Dir+0x16c>)
 80014ca:	889b      	ldrh	r3, [r3, #4]
 80014cc:	f245 5210 	movw	r2, #21776	; 0x5510
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d114      	bne.n	80014fe <LCD_Display_Dir+0xfe>
        {
            lcddev.wramcmd = 0X2C00;
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <LCD_Display_Dir+0x16c>)
 80014d6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80014da:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <LCD_Display_Dir+0x16c>)
 80014de:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80014e2:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <LCD_Display_Dir+0x16c>)
 80014e6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80014ea:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <LCD_Display_Dir+0x16c>)
 80014ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80014f2:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <LCD_Display_Dir+0x16c>)
 80014f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80014fa:	805a      	strh	r2, [r3, #2]
 80014fc:	e020      	b.n	8001540 <LCD_Display_Dir+0x140>
        }
        else if (lcddev.id == 0X1963)
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <LCD_Display_Dir+0x16c>)
 8001500:	889b      	ldrh	r3, [r3, #4]
 8001502:	f641 1263 	movw	r2, #6499	; 0x1963
 8001506:	4293      	cmp	r3, r2
 8001508:	d111      	bne.n	800152e <LCD_Display_Dir+0x12e>
        {
            lcddev.wramcmd = 0X2C;  //设置写入GRAM的指令
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <LCD_Display_Dir+0x16c>)
 800150c:	222c      	movs	r2, #44	; 0x2c
 800150e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  //设置写X坐标指令
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <LCD_Display_Dir+0x16c>)
 8001512:	222a      	movs	r2, #42	; 0x2a
 8001514:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  //设置写Y坐标指令
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <LCD_Display_Dir+0x16c>)
 8001518:	222b      	movs	r2, #43	; 0x2b
 800151a:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     //设置宽度800
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <LCD_Display_Dir+0x16c>)
 800151e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001522:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    //设置高度480
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <LCD_Display_Dir+0x16c>)
 8001526:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800152a:	805a      	strh	r2, [r3, #2]
 800152c:	e008      	b.n	8001540 <LCD_Display_Dir+0x140>
        }
        else                        //其他IC, 包括: 9341 / 5310 / 7789等IC
        {
            lcddev.wramcmd = 0X2C;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <LCD_Display_Dir+0x16c>)
 8001530:	222c      	movs	r2, #44	; 0x2c
 8001532:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <LCD_Display_Dir+0x16c>)
 8001536:	222a      	movs	r2, #42	; 0x2a
 8001538:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <LCD_Display_Dir+0x16c>)
 800153c:	222b      	movs	r2, #43	; 0x2b
 800153e:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310)    //如果是5310 则表示是 320*480分辨率
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <LCD_Display_Dir+0x16c>)
 8001542:	889b      	ldrh	r3, [r3, #4]
 8001544:	f245 3210 	movw	r2, #21264	; 0x5310
 8001548:	4293      	cmp	r3, r2
 800154a:	d107      	bne.n	800155c <LCD_Display_Dir+0x15c>
        {
            lcddev.width = 480;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <LCD_Display_Dir+0x16c>)
 800154e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001552:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <LCD_Display_Dir+0x16c>)
 8001556:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800155a:	805a      	strh	r2, [r3, #2]
        }
    }

    LCD_Scan_Dir(DFT_SCAN_DIR);     //默认扫描方向
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff fcdd 	bl	8000f1c <LCD_Scan_Dir>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000208 	.word	0x20000208

08001570 <LCD_Init>:

//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
//    FSMC_NORSRAM_TimingTypeDef FSMC_ReadWriteTim;
//    FSMC_NORSRAM_TimingTypeDef FSMC_WriteTim;

    __HAL_RCC_GPIOB_CLK_ENABLE();           //开启GPIOB时钟
 8001576:	4b8c      	ldr	r3, [pc, #560]	; (80017a8 <LCD_Init+0x238>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	4a8b      	ldr	r2, [pc, #556]	; (80017a8 <LCD_Init+0x238>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6193      	str	r3, [r2, #24]
 8001582:	4b89      	ldr	r3, [pc, #548]	; (80017a8 <LCD_Init+0x238>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
    GPIO_Initure.Pin=GPIO_PIN_0;            //PB0,背光控制
 800158e:	2301      	movs	r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
 8001592:	2301      	movs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8001596:	2301      	movs	r3, #1
 8001598:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速
 800159a:	2303      	movs	r3, #3
 800159c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure); 
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4619      	mov	r1, r3
 80015a4:	4881      	ldr	r0, [pc, #516]	; (80017ac <LCD_Init+0x23c>)
 80015a6:	f004 fd17 	bl	8005fd8 <HAL_GPIO_Init>
//    FSMC_WriteTim.AddressHoldTime=0;
//    FSMC_WriteTim.DataSetupTime=0x06;               //数据保存时间为13.8ns*7个HCLK=96.6ns
//    FSMC_WriteTim.AccessMode=FSMC_ACCESS_MODE_A;    //模式A
//    HAL_SRAM_Init(&TFTSRAM_Handler,&FSMC_ReadWriteTim,&FSMC_WriteTim);

    delay_ms(50); // delay 50 ms 
 80015aa:	2032      	movs	r0, #50	; 0x32
 80015ac:	f003 f944 	bl	8004838 <delay_ms>

    //尝试9341 ID的读取
    LCD_WR_REG(0XD3);
 80015b0:	20d3      	movs	r0, #211	; 0xd3
 80015b2:	f7ff fb81 	bl	8000cb8 <LCD_WR_REG>
    lcddev.id = LCD_RD_DATA();          //dummy read
 80015b6:	f7ff fba7 	bl	8000d08 <LCD_RD_DATA>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <LCD_Init+0x240>)
 80015c0:	809a      	strh	r2, [r3, #4]
    lcddev.id = LCD_RD_DATA();          //读到0X00
 80015c2:	f7ff fba1 	bl	8000d08 <LCD_RD_DATA>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b79      	ldr	r3, [pc, #484]	; (80017b0 <LCD_Init+0x240>)
 80015cc:	809a      	strh	r2, [r3, #4]
    lcddev.id = LCD_RD_DATA();          //读取0X93
 80015ce:	f7ff fb9b 	bl	8000d08 <LCD_RD_DATA>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <LCD_Init+0x240>)
 80015d8:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 80015da:	4b75      	ldr	r3, [pc, #468]	; (80017b0 <LCD_Init+0x240>)
 80015dc:	889b      	ldrh	r3, [r3, #4]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <LCD_Init+0x240>)
 80015e4:	809a      	strh	r2, [r3, #4]
    lcddev.id |= LCD_RD_DATA();         //读取0X41
 80015e6:	f7ff fb8f 	bl	8000d08 <LCD_RD_DATA>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <LCD_Init+0x240>)
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b6e      	ldr	r3, [pc, #440]	; (80017b0 <LCD_Init+0x240>)
 80015f8:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)            //不是 9341 , 尝试看看是不是 ST7789
 80015fa:	4b6d      	ldr	r3, [pc, #436]	; (80017b0 <LCD_Init+0x240>)
 80015fc:	889b      	ldrh	r3, [r3, #4]
 80015fe:	f249 3241 	movw	r2, #37697	; 0x9341
 8001602:	4293      	cmp	r3, r2
 8001604:	f000 80c7 	beq.w	8001796 <LCD_Init+0x226>
    {
        LCD_WR_REG(0X04);
 8001608:	2004      	movs	r0, #4
 800160a:	f7ff fb55 	bl	8000cb8 <LCD_WR_REG>
        lcddev.id = LCD_RD_DATA();      //dummy read
 800160e:	f7ff fb7b 	bl	8000d08 <LCD_RD_DATA>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <LCD_Init+0x240>)
 8001618:	809a      	strh	r2, [r3, #4]
        lcddev.id = LCD_RD_DATA();      //读到0X85
 800161a:	f7ff fb75 	bl	8000d08 <LCD_RD_DATA>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <LCD_Init+0x240>)
 8001624:	809a      	strh	r2, [r3, #4]
        lcddev.id = LCD_RD_DATA();      //读取0X85
 8001626:	f7ff fb6f 	bl	8000d08 <LCD_RD_DATA>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <LCD_Init+0x240>)
 8001630:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8001632:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <LCD_Init+0x240>)
 8001634:	889b      	ldrh	r3, [r3, #4]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <LCD_Init+0x240>)
 800163c:	809a      	strh	r2, [r3, #4]
        lcddev.id |= LCD_RD_DATA();     //读取0X52
 800163e:	f7ff fb63 	bl	8000d08 <LCD_RD_DATA>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <LCD_Init+0x240>)
 8001648:	889b      	ldrh	r3, [r3, #4]
 800164a:	4313      	orrs	r3, r2
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <LCD_Init+0x240>)
 8001650:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        //将8552的ID转换成7789
 8001652:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <LCD_Init+0x240>)
 8001654:	889b      	ldrh	r3, [r3, #4]
 8001656:	f248 5252 	movw	r2, #34130	; 0x8552
 800165a:	4293      	cmp	r3, r2
 800165c:	d103      	bne.n	8001666 <LCD_Init+0xf6>
        {
            lcddev.id = 0x7789;
 800165e:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <LCD_Init+0x240>)
 8001660:	f247 7289 	movw	r2, #30601	; 0x7789
 8001664:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        //也不是ST7789, 尝试是不是 NT35310
 8001666:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <LCD_Init+0x240>)
 8001668:	889b      	ldrh	r3, [r3, #4]
 800166a:	f247 7289 	movw	r2, #30601	; 0x7789
 800166e:	4293      	cmp	r3, r2
 8001670:	f000 8091 	beq.w	8001796 <LCD_Init+0x226>
        {
            LCD_WR_REG(0XD4);
 8001674:	20d4      	movs	r0, #212	; 0xd4
 8001676:	f7ff fb1f 	bl	8000cb8 <LCD_WR_REG>
            lcddev.id = LCD_RD_DATA();  //dummy read
 800167a:	f7ff fb45 	bl	8000d08 <LCD_RD_DATA>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	4b4b      	ldr	r3, [pc, #300]	; (80017b0 <LCD_Init+0x240>)
 8001684:	809a      	strh	r2, [r3, #4]
            lcddev.id = LCD_RD_DATA();  //读回0X01
 8001686:	f7ff fb3f 	bl	8000d08 <LCD_RD_DATA>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b48      	ldr	r3, [pc, #288]	; (80017b0 <LCD_Init+0x240>)
 8001690:	809a      	strh	r2, [r3, #4]
            lcddev.id = LCD_RD_DATA();  //读回0X53
 8001692:	f7ff fb39 	bl	8000d08 <LCD_RD_DATA>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <LCD_Init+0x240>)
 800169c:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 800169e:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <LCD_Init+0x240>)
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <LCD_Init+0x240>)
 80016a8:	809a      	strh	r2, [r3, #4]
            lcddev.id |= LCD_RD_DATA(); //这里读回0X10
 80016aa:	f7ff fb2d 	bl	8000d08 <LCD_RD_DATA>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <LCD_Init+0x240>)
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <LCD_Init+0x240>)
 80016bc:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0X5310)    //也不是NT35310,尝试看看是不是NT35510
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <LCD_Init+0x240>)
 80016c0:	889b      	ldrh	r3, [r3, #4]
 80016c2:	f245 3210 	movw	r2, #21264	; 0x5310
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d065      	beq.n	8001796 <LCD_Init+0x226>
            {
                //发送秘钥（厂家提供,照搬即可）
                LCD_WriteReg(0xF000, 0x0055);
 80016ca:	2155      	movs	r1, #85	; 0x55
 80016cc:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80016d0:	f7ff fb2a 	bl	8000d28 <LCD_WriteReg>
                LCD_WriteReg(0xF001, 0x00AA);
 80016d4:	21aa      	movs	r1, #170	; 0xaa
 80016d6:	f24f 0001 	movw	r0, #61441	; 0xf001
 80016da:	f7ff fb25 	bl	8000d28 <LCD_WriteReg>
                LCD_WriteReg(0xF002, 0x0052);
 80016de:	2152      	movs	r1, #82	; 0x52
 80016e0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80016e4:	f7ff fb20 	bl	8000d28 <LCD_WriteReg>
                LCD_WriteReg(0xF003, 0x0008);
 80016e8:	2108      	movs	r1, #8
 80016ea:	f24f 0003 	movw	r0, #61443	; 0xf003
 80016ee:	f7ff fb1b 	bl	8000d28 <LCD_WriteReg>
                LCD_WriteReg(0xF004, 0x0001);
 80016f2:	2101      	movs	r1, #1
 80016f4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80016f8:	f7ff fb16 	bl	8000d28 <LCD_WriteReg>

                LCD_WR_REG(0xC500);             //读取ID高8位
 80016fc:	f44f 4045 	mov.w	r0, #50432	; 0xc500
 8001700:	f7ff fada 	bl	8000cb8 <LCD_WR_REG>
                lcddev.id = LCD_RD_DATA();      //读回0X55
 8001704:	f7ff fb00 	bl	8000d08 <LCD_RD_DATA>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <LCD_Init+0x240>)
 800170e:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8001710:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <LCD_Init+0x240>)
 8001712:	889b      	ldrh	r3, [r3, #4]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <LCD_Init+0x240>)
 800171a:	809a      	strh	r2, [r3, #4]

                LCD_WR_REG(0xC501);             //读取ID低8位
 800171c:	f24c 5001 	movw	r0, #50433	; 0xc501
 8001720:	f7ff faca 	bl	8000cb8 <LCD_WR_REG>
                lcddev.id |= LCD_RD_DATA();     //读回0X10
 8001724:	f7ff faf0 	bl	8000d08 <LCD_RD_DATA>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <LCD_Init+0x240>)
 800172e:	889b      	ldrh	r3, [r3, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <LCD_Init+0x240>)
 8001736:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0X5510)        //也不是NT5510,尝试看看是不是SSD1963
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <LCD_Init+0x240>)
 800173a:	889b      	ldrh	r3, [r3, #4]
 800173c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001740:	4293      	cmp	r3, r2
 8001742:	d028      	beq.n	8001796 <LCD_Init+0x226>
                {
                    LCD_WR_REG(0XA1);
 8001744:	20a1      	movs	r0, #161	; 0xa1
 8001746:	f7ff fab7 	bl	8000cb8 <LCD_WR_REG>
                    lcddev.id = LCD_RD_DATA();
 800174a:	f7ff fadd 	bl	8000d08 <LCD_RD_DATA>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <LCD_Init+0x240>)
 8001754:	809a      	strh	r2, [r3, #4]
                    lcddev.id = LCD_RD_DATA();  //读回0X57
 8001756:	f7ff fad7 	bl	8000d08 <LCD_RD_DATA>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <LCD_Init+0x240>)
 8001760:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <LCD_Init+0x240>)
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <LCD_Init+0x240>)
 800176c:	809a      	strh	r2, [r3, #4]
                    lcddev.id |= LCD_RD_DATA(); //读回0X61
 800176e:	f7ff facb 	bl	8000d08 <LCD_RD_DATA>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <LCD_Init+0x240>)
 8001778:	889b      	ldrh	r3, [r3, #4]
 800177a:	4313      	orrs	r3, r2
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <LCD_Init+0x240>)
 8001780:	809a      	strh	r2, [r3, #4]

                    if (lcddev.id == 0X5761)lcddev.id = 0X1963; //SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <LCD_Init+0x240>)
 8001784:	889b      	ldrh	r3, [r3, #4]
 8001786:	f245 7261 	movw	r2, #22369	; 0x5761
 800178a:	4293      	cmp	r3, r2
 800178c:	d103      	bne.n	8001796 <LCD_Init+0x226>
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <LCD_Init+0x240>)
 8001790:	f641 1263 	movw	r2, #6499	; 0x1963
 8001794:	809a      	strh	r2, [r3, #4]
        }
    }

    //printf(" LCD ID:%x\r\n", lcddev.id); //打印LCD ID

    if (lcddev.id == 0X9341)    //9341初始化
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <LCD_Init+0x240>)
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	f249 3241 	movw	r2, #37697	; 0x9341
 800179e:	4293      	cmp	r3, r2
 80017a0:	f040 811e 	bne.w	80019e0 <LCD_Init+0x470>
 80017a4:	e006      	b.n	80017b4 <LCD_Init+0x244>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	20000208 	.word	0x20000208
    {
        LCD_WR_REG(0xCF);
 80017b4:	20cf      	movs	r0, #207	; 0xcf
 80017b6:	f7ff fa7f 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fa90 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC1);
 80017c0:	20c1      	movs	r0, #193	; 0xc1
 80017c2:	f7ff fa8d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0X30);
 80017c6:	2030      	movs	r0, #48	; 0x30
 80017c8:	f7ff fa8a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xED);
 80017cc:	20ed      	movs	r0, #237	; 0xed
 80017ce:	f7ff fa73 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x64);
 80017d2:	2064      	movs	r0, #100	; 0x64
 80017d4:	f7ff fa84 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 80017d8:	2003      	movs	r0, #3
 80017da:	f7ff fa81 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0X12);
 80017de:	2012      	movs	r0, #18
 80017e0:	f7ff fa7e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0X81);
 80017e4:	2081      	movs	r0, #129	; 0x81
 80017e6:	f7ff fa7b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xE8);
 80017ea:	20e8      	movs	r0, #232	; 0xe8
 80017ec:	f7ff fa64 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x85);
 80017f0:	2085      	movs	r0, #133	; 0x85
 80017f2:	f7ff fa75 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 80017f6:	2010      	movs	r0, #16
 80017f8:	f7ff fa72 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 80017fc:	207a      	movs	r0, #122	; 0x7a
 80017fe:	f7ff fa6f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xCB);
 8001802:	20cb      	movs	r0, #203	; 0xcb
 8001804:	f7ff fa58 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x39);
 8001808:	2039      	movs	r0, #57	; 0x39
 800180a:	f7ff fa69 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 800180e:	202c      	movs	r0, #44	; 0x2c
 8001810:	f7ff fa66 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fa63 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 800181a:	2034      	movs	r0, #52	; 0x34
 800181c:	f7ff fa60 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8001820:	2002      	movs	r0, #2
 8001822:	f7ff fa5d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xF7);
 8001826:	20f7      	movs	r0, #247	; 0xf7
 8001828:	f7ff fa46 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);
 800182c:	2020      	movs	r0, #32
 800182e:	f7ff fa57 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xEA);
 8001832:	20ea      	movs	r0, #234	; 0xea
 8001834:	f7ff fa40 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fa51 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff fa4e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xC0);       //Power control
 8001844:	20c0      	movs	r0, #192	; 0xc0
 8001846:	f7ff fa37 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x1B);      //VRH[5:0]
 800184a:	201b      	movs	r0, #27
 800184c:	f7ff fa48 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xC1);       //Power control
 8001850:	20c1      	movs	r0, #193	; 0xc1
 8001852:	f7ff fa31 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);      //SAP[2:0];BT[3:0]
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff fa42 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xC5);       //VCM control
 800185c:	20c5      	movs	r0, #197	; 0xc5
 800185e:	f7ff fa2b 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x30);      //3F
 8001862:	2030      	movs	r0, #48	; 0x30
 8001864:	f7ff fa3c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x30);      //3C
 8001868:	2030      	movs	r0, #48	; 0x30
 800186a:	f7ff fa39 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xC7);       //VCM control2
 800186e:	20c7      	movs	r0, #199	; 0xc7
 8001870:	f7ff fa22 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0XB7);
 8001874:	20b7      	movs	r0, #183	; 0xb7
 8001876:	f7ff fa33 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0x36);       // Memory Access Control
 800187a:	2036      	movs	r0, #54	; 0x36
 800187c:	f7ff fa1c 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x48);
 8001880:	2048      	movs	r0, #72	; 0x48
 8001882:	f7ff fa2d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0x3A);
 8001886:	203a      	movs	r0, #58	; 0x3a
 8001888:	f7ff fa16 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x55);
 800188c:	2055      	movs	r0, #85	; 0x55
 800188e:	f7ff fa27 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xB1);
 8001892:	20b1      	movs	r0, #177	; 0xb1
 8001894:	f7ff fa10 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff fa21 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1A);
 800189e:	201a      	movs	r0, #26
 80018a0:	f7ff fa1e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xB6);       // Display Function Control
 80018a4:	20b6      	movs	r0, #182	; 0xb6
 80018a6:	f7ff fa07 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x0A);
 80018aa:	200a      	movs	r0, #10
 80018ac:	f7ff fa18 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 80018b0:	20a2      	movs	r0, #162	; 0xa2
 80018b2:	f7ff fa15 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xF2);       // 3Gamma Function Disable
 80018b6:	20f2      	movs	r0, #242	; 0xf2
 80018b8:	f7ff f9fe 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff fa0f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0x26);       //Gamma curve selected
 80018c2:	2026      	movs	r0, #38	; 0x26
 80018c4:	f7ff f9f8 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f7ff fa09 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xE0);       //Set Gamma
 80018ce:	20e0      	movs	r0, #224	; 0xe0
 80018d0:	f7ff f9f2 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x0F);
 80018d4:	200f      	movs	r0, #15
 80018d6:	f7ff fa03 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 80018da:	202a      	movs	r0, #42	; 0x2a
 80018dc:	f7ff fa00 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 80018e0:	2028      	movs	r0, #40	; 0x28
 80018e2:	f7ff f9fd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 80018e6:	2008      	movs	r0, #8
 80018e8:	f7ff f9fa 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0E);
 80018ec:	200e      	movs	r0, #14
 80018ee:	f7ff f9f7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 80018f2:	2008      	movs	r0, #8
 80018f4:	f7ff f9f4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 80018f8:	2054      	movs	r0, #84	; 0x54
 80018fa:	f7ff f9f1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0XA9);
 80018fe:	20a9      	movs	r0, #169	; 0xa9
 8001900:	f7ff f9ee 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 8001904:	2043      	movs	r0, #67	; 0x43
 8001906:	f7ff f9eb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0A);
 800190a:	200a      	movs	r0, #10
 800190c:	f7ff f9e8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 8001910:	200f      	movs	r0, #15
 8001912:	f7ff f9e5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff f9e2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff f9df 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff f9dc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff f9d9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0XE1);       //Set Gamma
 800192e:	20e1      	movs	r0, #225	; 0xe1
 8001930:	f7ff f9c2 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff f9d3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x15);
 800193a:	2015      	movs	r0, #21
 800193c:	f7ff f9d0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8001940:	2017      	movs	r0, #23
 8001942:	f7ff f9cd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 8001946:	2007      	movs	r0, #7
 8001948:	f7ff f9ca 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 800194c:	2011      	movs	r0, #17
 800194e:	f7ff f9c7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x06);
 8001952:	2006      	movs	r0, #6
 8001954:	f7ff f9c4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2B);
 8001958:	202b      	movs	r0, #43	; 0x2b
 800195a:	f7ff f9c1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 800195e:	2056      	movs	r0, #86	; 0x56
 8001960:	f7ff f9be 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 8001964:	203c      	movs	r0, #60	; 0x3c
 8001966:	f7ff f9bb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 800196a:	2005      	movs	r0, #5
 800196c:	f7ff f9b8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 8001970:	2010      	movs	r0, #16
 8001972:	f7ff f9b5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 8001976:	200f      	movs	r0, #15
 8001978:	f7ff f9b2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 800197c:	203f      	movs	r0, #63	; 0x3f
 800197e:	f7ff f9af 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 8001982:	203f      	movs	r0, #63	; 0x3f
 8001984:	f7ff f9ac 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 8001988:	200f      	movs	r0, #15
 800198a:	f7ff f9a9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0x2B);
 800198e:	202b      	movs	r0, #43	; 0x2b
 8001990:	f7ff f992 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff f9a3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff f9a0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff f99d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3f);
 80019a6:	203f      	movs	r0, #63	; 0x3f
 80019a8:	f7ff f99a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0x2A);
 80019ac:	202a      	movs	r0, #42	; 0x2a
 80019ae:	f7ff f983 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff f994 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff f991 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff f98e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xef);
 80019c4:	20ef      	movs	r0, #239	; 0xef
 80019c6:	f7ff f98b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0x11);       //Exit Sleep
 80019ca:	2011      	movs	r0, #17
 80019cc:	f7ff f974 	bl	8000cb8 <LCD_WR_REG>
        delay_ms(120);
 80019d0:	2078      	movs	r0, #120	; 0x78
 80019d2:	f002 ff31 	bl	8004838 <delay_ms>
        LCD_WR_REG(0x29);       //display on
 80019d6:	2029      	movs	r0, #41	; 0x29
 80019d8:	f7ff f96e 	bl	8000cb8 <LCD_WR_REG>
 80019dc:	f002 b8a8 	b.w	8003b30 <LCD_Init+0x25c0>
    }
    else if (lcddev.id == 0x7789)   //7789初始化
 80019e0:	4b6d      	ldr	r3, [pc, #436]	; (8001b98 <LCD_Init+0x628>)
 80019e2:	889b      	ldrh	r3, [r3, #4]
 80019e4:	f247 7289 	movw	r2, #30601	; 0x7789
 80019e8:	4293      	cmp	r3, r2
 80019ea:	f040 80d7 	bne.w	8001b9c <LCD_Init+0x62c>
    {
        LCD_WR_REG(0x11);
 80019ee:	2011      	movs	r0, #17
 80019f0:	f7ff f962 	bl	8000cb8 <LCD_WR_REG>

        delay_ms(120);
 80019f4:	2078      	movs	r0, #120	; 0x78
 80019f6:	f002 ff1f 	bl	8004838 <delay_ms>

        LCD_WR_REG(0x36);
 80019fa:	2036      	movs	r0, #54	; 0x36
 80019fc:	f7ff f95c 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff f96d 	bl	8000ce0 <LCD_WR_DATA>


        LCD_WR_REG(0x3A);
 8001a06:	203a      	movs	r0, #58	; 0x3a
 8001a08:	f7ff f956 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0X05);
 8001a0c:	2005      	movs	r0, #5
 8001a0e:	f7ff f967 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB2);
 8001a12:	20b2      	movs	r0, #178	; 0xb2
 8001a14:	f7ff f950 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x0C);
 8001a18:	200c      	movs	r0, #12
 8001a1a:	f7ff f961 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0C);
 8001a1e:	200c      	movs	r0, #12
 8001a20:	f7ff f95e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff f95b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 8001a2a:	2033      	movs	r0, #51	; 0x33
 8001a2c:	f7ff f958 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 8001a30:	2033      	movs	r0, #51	; 0x33
 8001a32:	f7ff f955 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB7);
 8001a36:	20b7      	movs	r0, #183	; 0xb7
 8001a38:	f7ff f93e 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x35);
 8001a3c:	2035      	movs	r0, #53	; 0x35
 8001a3e:	f7ff f94f 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xBB);       //vcom
 8001a42:	20bb      	movs	r0, #187	; 0xbb
 8001a44:	f7ff f938 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x32);      //30
 8001a48:	2032      	movs	r0, #50	; 0x32
 8001a4a:	f7ff f949 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC0);
 8001a4e:	20c0      	movs	r0, #192	; 0xc0
 8001a50:	f7ff f932 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x0C);
 8001a54:	200c      	movs	r0, #12
 8001a56:	f7ff f943 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC2);
 8001a5a:	20c2      	movs	r0, #194	; 0xc2
 8001a5c:	f7ff f92c 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff f93d 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC3);       //vrh
 8001a66:	20c3      	movs	r0, #195	; 0xc3
 8001a68:	f7ff f926 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x10);      //17 0D
 8001a6c:	2010      	movs	r0, #16
 8001a6e:	f7ff f937 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC4);       //vdv
 8001a72:	20c4      	movs	r0, #196	; 0xc4
 8001a74:	f7ff f920 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);      //20
 8001a78:	2020      	movs	r0, #32
 8001a7a:	f7ff f931 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC6);
 8001a7e:	20c6      	movs	r0, #198	; 0xc6
 8001a80:	f7ff f91a 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x0f);
 8001a84:	200f      	movs	r0, #15
 8001a86:	f7ff f92b 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xD0);
 8001a8a:	20d0      	movs	r0, #208	; 0xd0
 8001a8c:	f7ff f914 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0xA4);
 8001a90:	20a4      	movs	r0, #164	; 0xa4
 8001a92:	f7ff f925 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA1);
 8001a96:	20a1      	movs	r0, #161	; 0xa1
 8001a98:	f7ff f922 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xE0);       //Set Gamma
 8001a9c:	20e0      	movs	r0, #224	; 0xe0
 8001a9e:	f7ff f90b 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0xd0);
 8001aa2:	20d0      	movs	r0, #208	; 0xd0
 8001aa4:	f7ff f91c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff f919 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f7ff f916 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 8001ab4:	2007      	movs	r0, #7
 8001ab6:	f7ff f913 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0a);
 8001aba:	200a      	movs	r0, #10
 8001abc:	f7ff f910 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 8001ac0:	2028      	movs	r0, #40	; 0x28
 8001ac2:	f7ff f90d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 8001ac6:	2032      	movs	r0, #50	; 0x32
 8001ac8:	f7ff f90a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0X44);
 8001acc:	2044      	movs	r0, #68	; 0x44
 8001ace:	f7ff f907 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x42);
 8001ad2:	2042      	movs	r0, #66	; 0x42
 8001ad4:	f7ff f904 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x06);
 8001ad8:	2006      	movs	r0, #6
 8001ada:	f7ff f901 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0e);
 8001ade:	200e      	movs	r0, #14
 8001ae0:	f7ff f8fe 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x12);
 8001ae4:	2012      	movs	r0, #18
 8001ae6:	f7ff f8fb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x14);
 8001aea:	2014      	movs	r0, #20
 8001aec:	f7ff f8f8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8001af0:	2017      	movs	r0, #23
 8001af2:	f7ff f8f5 	bl	8000ce0 <LCD_WR_DATA>


        LCD_WR_REG(0XE1);       //Set Gamma
 8001af6:	20e1      	movs	r0, #225	; 0xe1
 8001af8:	f7ff f8de 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0xd0);
 8001afc:	20d0      	movs	r0, #208	; 0xd0
 8001afe:	f7ff f8ef 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff f8ec 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f7ff f8e9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 8001b0e:	2007      	movs	r0, #7
 8001b10:	f7ff f8e6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0a);
 8001b14:	200a      	movs	r0, #10
 8001b16:	f7ff f8e3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 8001b1a:	2028      	movs	r0, #40	; 0x28
 8001b1c:	f7ff f8e0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x31);
 8001b20:	2031      	movs	r0, #49	; 0x31
 8001b22:	f7ff f8dd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 8001b26:	2054      	movs	r0, #84	; 0x54
 8001b28:	f7ff f8da 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x47);
 8001b2c:	2047      	movs	r0, #71	; 0x47
 8001b2e:	f7ff f8d7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0e);
 8001b32:	200e      	movs	r0, #14
 8001b34:	f7ff f8d4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1c);
 8001b38:	201c      	movs	r0, #28
 8001b3a:	f7ff f8d1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8001b3e:	2017      	movs	r0, #23
 8001b40:	f7ff f8ce 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1b);
 8001b44:	201b      	movs	r0, #27
 8001b46:	f7ff f8cb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1e);
 8001b4a:	201e      	movs	r0, #30
 8001b4c:	f7ff f8c8 	bl	8000ce0 <LCD_WR_DATA>


        LCD_WR_REG(0x2A);
 8001b50:	202a      	movs	r0, #42	; 0x2a
 8001b52:	f7ff f8b1 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff f8c2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff f8bf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff f8bc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xef);
 8001b68:	20ef      	movs	r0, #239	; 0xef
 8001b6a:	f7ff f8b9 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0x2B);
 8001b6e:	202b      	movs	r0, #43	; 0x2b
 8001b70:	f7ff f8a2 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff f8b3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff f8b0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff f8ad 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3f);
 8001b86:	203f      	movs	r0, #63	; 0x3f
 8001b88:	f7ff f8aa 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0x29);       //display on
 8001b8c:	2029      	movs	r0, #41	; 0x29
 8001b8e:	f7ff f893 	bl	8000cb8 <LCD_WR_REG>
 8001b92:	f001 bfcd 	b.w	8003b30 <LCD_Init+0x25c0>
 8001b96:	bf00      	nop
 8001b98:	20000208 	.word	0x20000208
    }
    else if (lcddev.id == 0x5310)
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <LCD_Init+0x63c>)
 8001b9e:	889b      	ldrh	r3, [r3, #4]
 8001ba0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	f040 877c 	bne.w	8002aa2 <LCD_Init+0x1532>
 8001baa:	e001      	b.n	8001bb0 <LCD_Init+0x640>
 8001bac:	20000208 	.word	0x20000208
    {
        LCD_WR_REG(0xED);
 8001bb0:	20ed      	movs	r0, #237	; 0xed
 8001bb2:	f7ff f881 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f7ff f892 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);
 8001bbc:	20fe      	movs	r0, #254	; 0xfe
 8001bbe:	f7ff f88f 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xEE);
 8001bc2:	20ee      	movs	r0, #238	; 0xee
 8001bc4:	f7ff f878 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0xDE);
 8001bc8:	20de      	movs	r0, #222	; 0xde
 8001bca:	f7ff f889 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 8001bce:	2021      	movs	r0, #33	; 0x21
 8001bd0:	f7ff f886 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xF1);
 8001bd4:	20f1      	movs	r0, #241	; 0xf1
 8001bd6:	f7ff f86f 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f7ff f880 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xDF);
 8001be0:	20df      	movs	r0, #223	; 0xdf
 8001be2:	f7ff f869 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x10);
 8001be6:	2010      	movs	r0, #16
 8001be8:	f7ff f87a 	bl	8000ce0 <LCD_WR_DATA>

        //VCOMvoltage//
        LCD_WR_REG(0xC4);
 8001bec:	20c4      	movs	r0, #196	; 0xc4
 8001bee:	f7ff f863 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x8F);      //5f
 8001bf2:	208f      	movs	r0, #143	; 0x8f
 8001bf4:	f7ff f874 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC6);
 8001bf8:	20c6      	movs	r0, #198	; 0xc6
 8001bfa:	f7ff f85d 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff f86e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 8001c04:	20e2      	movs	r0, #226	; 0xe2
 8001c06:	f7ff f86b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 8001c0a:	20e2      	movs	r0, #226	; 0xe2
 8001c0c:	f7ff f868 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 8001c10:	20e2      	movs	r0, #226	; 0xe2
 8001c12:	f7ff f865 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xBF);
 8001c16:	20bf      	movs	r0, #191	; 0xbf
 8001c18:	f7ff f84e 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0xAA);
 8001c1c:	20aa      	movs	r0, #170	; 0xaa
 8001c1e:	f7ff f85f 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB0);
 8001c22:	20b0      	movs	r0, #176	; 0xb0
 8001c24:	f7ff f848 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x0D);
 8001c28:	200d      	movs	r0, #13
 8001c2a:	f7ff f859 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff f856 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0D);
 8001c34:	200d      	movs	r0, #13
 8001c36:	f7ff f853 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff f850 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 8001c40:	2011      	movs	r0, #17
 8001c42:	f7ff f84d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff f84a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x19);
 8001c4c:	2019      	movs	r0, #25
 8001c4e:	f7ff f847 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff f844 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 8001c58:	2021      	movs	r0, #33	; 0x21
 8001c5a:	f7ff f841 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff f83e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2D);
 8001c64:	202d      	movs	r0, #45	; 0x2d
 8001c66:	f7ff f83b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f7ff f838 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3D);
 8001c70:	203d      	movs	r0, #61	; 0x3d
 8001c72:	f7ff f835 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff f832 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 8001c7c:	205d      	movs	r0, #93	; 0x5d
 8001c7e:	f7ff f82f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f7ff f82c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 8001c88:	205d      	movs	r0, #93	; 0x5d
 8001c8a:	f7ff f829 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff f826 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB1);
 8001c94:	20b1      	movs	r0, #177	; 0xb1
 8001c96:	f7ff f80f 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x80);
 8001c9a:	2080      	movs	r0, #128	; 0x80
 8001c9c:	f7ff f820 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff f81d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 8001ca6:	208b      	movs	r0, #139	; 0x8b
 8001ca8:	f7ff f81a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff f817 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 8001cb2:	2096      	movs	r0, #150	; 0x96
 8001cb4:	f7ff f814 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff f811 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB2);
 8001cbe:	20b2      	movs	r0, #178	; 0xb2
 8001cc0:	f7fe fffa 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7ff f80b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff f808 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8001cd0:	2002      	movs	r0, #2
 8001cd2:	f7ff f805 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff f802 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f7fe ffff 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7fe fffc 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB3);
 8001ce8:	20b3      	movs	r0, #179	; 0xb3
 8001cea:	f7fe ffe5 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7fe fff6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7fe fff3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7fe fff0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7fe ffed 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7fe ffea 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7fe ffe7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7fe ffe4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7fe ffe1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7fe ffde 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7fe ffdb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7fe ffd8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7fe ffd5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7fe ffd2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7fe ffcf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7fe ffcc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7fe ffc9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7fe ffc6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7fe ffc3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7fe ffc0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7fe ffbd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7fe ffba 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7fe ffb7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7fe ffb4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7fe ffb1 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB4);
 8001d7e:	20b4      	movs	r0, #180	; 0xb4
 8001d80:	f7fe ff9a 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x8B);
 8001d84:	208b      	movs	r0, #139	; 0x8b
 8001d86:	f7fe ffab 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7fe ffa8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 8001d90:	2096      	movs	r0, #150	; 0x96
 8001d92:	f7fe ffa5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7fe ffa2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA1);
 8001d9c:	20a1      	movs	r0, #161	; 0xa1
 8001d9e:	f7fe ff9f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7fe ff9c 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB5);
 8001da8:	20b5      	movs	r0, #181	; 0xb5
 8001daa:	f7fe ff85 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x02);
 8001dae:	2002      	movs	r0, #2
 8001db0:	f7fe ff96 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7fe ff93 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f7fe ff90 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7fe ff8d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 8001dc6:	2004      	movs	r0, #4
 8001dc8:	f7fe ff8a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7fe ff87 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB6);
 8001dd2:	20b6      	movs	r0, #182	; 0xb6
 8001dd4:	f7fe ff70 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7fe ff81 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7fe ff7e 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB7);
 8001de4:	20b7      	movs	r0, #183	; 0xb7
 8001de6:	f7fe ff67 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7fe ff78 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7fe ff75 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 8001df6:	203f      	movs	r0, #63	; 0x3f
 8001df8:	f7fe ff72 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7fe ff6f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5E);
 8001e02:	205e      	movs	r0, #94	; 0x5e
 8001e04:	f7fe ff6c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7fe ff69 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 8001e0e:	2064      	movs	r0, #100	; 0x64
 8001e10:	f7fe ff66 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe ff63 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8C);
 8001e1a:	208c      	movs	r0, #140	; 0x8c
 8001e1c:	f7fe ff60 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7fe ff5d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xAC);
 8001e26:	20ac      	movs	r0, #172	; 0xac
 8001e28:	f7fe ff5a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7fe ff57 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 8001e32:	20dc      	movs	r0, #220	; 0xdc
 8001e34:	f7fe ff54 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7fe ff51 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x70);
 8001e3e:	2070      	movs	r0, #112	; 0x70
 8001e40:	f7fe ff4e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7fe ff4b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x90);
 8001e4a:	2090      	movs	r0, #144	; 0x90
 8001e4c:	f7fe ff48 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7fe ff45 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xEB);
 8001e56:	20eb      	movs	r0, #235	; 0xeb
 8001e58:	f7fe ff42 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7fe ff3f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 8001e62:	20dc      	movs	r0, #220	; 0xdc
 8001e64:	f7fe ff3c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7fe ff39 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB8);
 8001e6e:	20b8      	movs	r0, #184	; 0xb8
 8001e70:	f7fe ff22 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7fe ff33 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7fe ff30 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7fe ff2d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7fe ff2a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7fe ff27 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7fe ff24 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7fe ff21 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7fe ff1e 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xBA);
 8001ea4:	20ba      	movs	r0, #186	; 0xba
 8001ea6:	f7fe ff07 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x24);
 8001eaa:	2024      	movs	r0, #36	; 0x24
 8001eac:	f7fe ff18 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7fe ff15 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7fe ff12 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7fe ff0f 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC1);
 8001ec2:	20c1      	movs	r0, #193	; 0xc1
 8001ec4:	f7fe fef8 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);
 8001ec8:	2020      	movs	r0, #32
 8001eca:	f7fe ff09 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7fe ff06 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 8001ed4:	2054      	movs	r0, #84	; 0x54
 8001ed6:	f7fe ff03 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7fe ff00 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 8001ee0:	20ff      	movs	r0, #255	; 0xff
 8001ee2:	f7fe fefd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7fe fefa 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC2);
 8001eec:	20c2      	movs	r0, #194	; 0xc2
 8001eee:	f7fe fee3 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x0A);
 8001ef2:	200a      	movs	r0, #10
 8001ef4:	f7fe fef4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7fe fef1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 8001efe:	2004      	movs	r0, #4
 8001f00:	f7fe feee 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7fe feeb 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC3);
 8001f0a:	20c3      	movs	r0, #195	; 0xc3
 8001f0c:	f7fe fed4 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x3C);
 8001f10:	203c      	movs	r0, #60	; 0x3c
 8001f12:	f7fe fee5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7fe fee2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3A);
 8001f1c:	203a      	movs	r0, #58	; 0x3a
 8001f1e:	f7fe fedf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7fe fedc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x39);
 8001f28:	2039      	movs	r0, #57	; 0x39
 8001f2a:	f7fe fed9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7fe fed6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x37);
 8001f34:	2037      	movs	r0, #55	; 0x37
 8001f36:	f7fe fed3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7fe fed0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 8001f40:	203c      	movs	r0, #60	; 0x3c
 8001f42:	f7fe fecd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7fe feca 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 8001f4c:	2036      	movs	r0, #54	; 0x36
 8001f4e:	f7fe fec7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7fe fec4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 8001f58:	2032      	movs	r0, #50	; 0x32
 8001f5a:	f7fe fec1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7fe febe 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 8001f64:	202f      	movs	r0, #47	; 0x2f
 8001f66:	f7fe febb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7fe feb8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 8001f70:	202c      	movs	r0, #44	; 0x2c
 8001f72:	f7fe feb5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f7fe feb2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 8001f7c:	2029      	movs	r0, #41	; 0x29
 8001f7e:	f7fe feaf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7fe feac 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 8001f88:	2026      	movs	r0, #38	; 0x26
 8001f8a:	f7fe fea9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7fe fea6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 8001f94:	2024      	movs	r0, #36	; 0x24
 8001f96:	f7fe fea3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7fe fea0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 8001fa0:	2024      	movs	r0, #36	; 0x24
 8001fa2:	f7fe fe9d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7fe fe9a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 8001fac:	2023      	movs	r0, #35	; 0x23
 8001fae:	f7fe fe97 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7fe fe94 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 8001fb8:	203c      	movs	r0, #60	; 0x3c
 8001fba:	f7fe fe91 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7fe fe8e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 8001fc4:	2036      	movs	r0, #54	; 0x36
 8001fc6:	f7fe fe8b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7fe fe88 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 8001fd0:	2032      	movs	r0, #50	; 0x32
 8001fd2:	f7fe fe85 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7fe fe82 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 8001fdc:	202f      	movs	r0, #47	; 0x2f
 8001fde:	f7fe fe7f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7fe fe7c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 8001fe8:	202c      	movs	r0, #44	; 0x2c
 8001fea:	f7fe fe79 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7fe fe76 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 8001ff4:	2029      	movs	r0, #41	; 0x29
 8001ff6:	f7fe fe73 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7fe fe70 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 8002000:	2026      	movs	r0, #38	; 0x26
 8002002:	f7fe fe6d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002006:	2000      	movs	r0, #0
 8002008:	f7fe fe6a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 800200c:	2024      	movs	r0, #36	; 0x24
 800200e:	f7fe fe67 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002012:	2000      	movs	r0, #0
 8002014:	f7fe fe64 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 8002018:	2024      	movs	r0, #36	; 0x24
 800201a:	f7fe fe61 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800201e:	2000      	movs	r0, #0
 8002020:	f7fe fe5e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 8002024:	2023      	movs	r0, #35	; 0x23
 8002026:	f7fe fe5b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800202a:	2000      	movs	r0, #0
 800202c:	f7fe fe58 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC4);
 8002030:	20c4      	movs	r0, #196	; 0xc4
 8002032:	f7fe fe41 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x62);
 8002036:	2062      	movs	r0, #98	; 0x62
 8002038:	f7fe fe52 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800203c:	2000      	movs	r0, #0
 800203e:	f7fe fe4f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 8002042:	2005      	movs	r0, #5
 8002044:	f7fe fe4c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002048:	2000      	movs	r0, #0
 800204a:	f7fe fe49 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 800204e:	2084      	movs	r0, #132	; 0x84
 8002050:	f7fe fe46 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002054:	2000      	movs	r0, #0
 8002056:	f7fe fe43 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF0);
 800205a:	20f0      	movs	r0, #240	; 0xf0
 800205c:	f7fe fe40 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002060:	2000      	movs	r0, #0
 8002062:	f7fe fe3d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 8002066:	2018      	movs	r0, #24
 8002068:	f7fe fe3a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800206c:	2000      	movs	r0, #0
 800206e:	f7fe fe37 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA4);
 8002072:	20a4      	movs	r0, #164	; 0xa4
 8002074:	f7fe fe34 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f7fe fe31 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 800207e:	2018      	movs	r0, #24
 8002080:	f7fe fe2e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002084:	2000      	movs	r0, #0
 8002086:	f7fe fe2b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 800208a:	2050      	movs	r0, #80	; 0x50
 800208c:	f7fe fe28 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002090:	2000      	movs	r0, #0
 8002092:	f7fe fe25 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0C);
 8002096:	200c      	movs	r0, #12
 8002098:	f7fe fe22 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800209c:	2000      	movs	r0, #0
 800209e:	f7fe fe1f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 80020a2:	2017      	movs	r0, #23
 80020a4:	f7fe fe1c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7fe fe19 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x95);
 80020ae:	2095      	movs	r0, #149	; 0x95
 80020b0:	f7fe fe16 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020b4:	2000      	movs	r0, #0
 80020b6:	f7fe fe13 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 80020ba:	20f3      	movs	r0, #243	; 0xf3
 80020bc:	f7fe fe10 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f7fe fe0d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE6);
 80020c6:	20e6      	movs	r0, #230	; 0xe6
 80020c8:	f7fe fe0a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7fe fe07 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC5);
 80020d2:	20c5      	movs	r0, #197	; 0xc5
 80020d4:	f7fe fdf0 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x32);
 80020d8:	2032      	movs	r0, #50	; 0x32
 80020da:	f7fe fe01 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020de:	2000      	movs	r0, #0
 80020e0:	f7fe fdfe 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80020e4:	2044      	movs	r0, #68	; 0x44
 80020e6:	f7fe fdfb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7fe fdf8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x65);
 80020f0:	2065      	movs	r0, #101	; 0x65
 80020f2:	f7fe fdf5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7fe fdf2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 80020fc:	2076      	movs	r0, #118	; 0x76
 80020fe:	f7fe fdef 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002102:	2000      	movs	r0, #0
 8002104:	f7fe fdec 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 8002108:	2088      	movs	r0, #136	; 0x88
 800210a:	f7fe fde9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800210e:	2000      	movs	r0, #0
 8002110:	f7fe fde6 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC6);
 8002114:	20c6      	movs	r0, #198	; 0xc6
 8002116:	f7fe fdcf 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);
 800211a:	2020      	movs	r0, #32
 800211c:	f7fe fde0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002120:	2000      	movs	r0, #0
 8002122:	f7fe fddd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 8002126:	2017      	movs	r0, #23
 8002128:	f7fe fdda 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800212c:	2000      	movs	r0, #0
 800212e:	f7fe fdd7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 8002132:	2001      	movs	r0, #1
 8002134:	f7fe fdd4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002138:	2000      	movs	r0, #0
 800213a:	f7fe fdd1 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC7);
 800213e:	20c7      	movs	r0, #199	; 0xc7
 8002140:	f7fe fdba 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f7fe fdcb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800214a:	2000      	movs	r0, #0
 800214c:	f7fe fdc8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002150:	2000      	movs	r0, #0
 8002152:	f7fe fdc5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002156:	2000      	movs	r0, #0
 8002158:	f7fe fdc2 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC8);
 800215c:	20c8      	movs	r0, #200	; 0xc8
 800215e:	f7fe fdab 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002162:	2000      	movs	r0, #0
 8002164:	f7fe fdbc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002168:	2000      	movs	r0, #0
 800216a:	f7fe fdb9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800216e:	2000      	movs	r0, #0
 8002170:	f7fe fdb6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002174:	2000      	movs	r0, #0
 8002176:	f7fe fdb3 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xC9);
 800217a:	20c9      	movs	r0, #201	; 0xc9
 800217c:	f7fe fd9c 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002180:	2000      	movs	r0, #0
 8002182:	f7fe fdad 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002186:	2000      	movs	r0, #0
 8002188:	f7fe fdaa 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800218c:	2000      	movs	r0, #0
 800218e:	f7fe fda7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002192:	2000      	movs	r0, #0
 8002194:	f7fe fda4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002198:	2000      	movs	r0, #0
 800219a:	f7fe fda1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800219e:	2000      	movs	r0, #0
 80021a0:	f7fe fd9e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f7fe fd9b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7fe fd98 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe fd95 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7fe fd92 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021bc:	2000      	movs	r0, #0
 80021be:	f7fe fd8f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7fe fd8c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7fe fd89 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7fe fd86 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7fe fd83 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7fe fd80 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xE0);
 80021e0:	20e0      	movs	r0, #224	; 0xe0
 80021e2:	f7fe fd69 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x16);
 80021e6:	2016      	movs	r0, #22
 80021e8:	f7fe fd7a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7fe fd77 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 80021f2:	201c      	movs	r0, #28
 80021f4:	f7fe fd74 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7fe fd71 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 80021fe:	2021      	movs	r0, #33	; 0x21
 8002200:	f7fe fd6e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002204:	2000      	movs	r0, #0
 8002206:	f7fe fd6b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 800220a:	2036      	movs	r0, #54	; 0x36
 800220c:	f7fe fd68 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002210:	2000      	movs	r0, #0
 8002212:	f7fe fd65 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x46);
 8002216:	2046      	movs	r0, #70	; 0x46
 8002218:	f7fe fd62 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800221c:	2000      	movs	r0, #0
 800221e:	f7fe fd5f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 8002222:	2052      	movs	r0, #82	; 0x52
 8002224:	f7fe fd5c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe fd59 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 800222e:	2064      	movs	r0, #100	; 0x64
 8002230:	f7fe fd56 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f7fe fd53 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 800223a:	207a      	movs	r0, #122	; 0x7a
 800223c:	f7fe fd50 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002240:	2000      	movs	r0, #0
 8002242:	f7fe fd4d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 8002246:	208b      	movs	r0, #139	; 0x8b
 8002248:	f7fe fd4a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe fd47 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8002252:	2099      	movs	r0, #153	; 0x99
 8002254:	f7fe fd44 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002258:	2000      	movs	r0, #0
 800225a:	f7fe fd41 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 800225e:	20a8      	movs	r0, #168	; 0xa8
 8002260:	f7fe fd3e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002264:	2000      	movs	r0, #0
 8002266:	f7fe fd3b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 800226a:	20b9      	movs	r0, #185	; 0xb9
 800226c:	f7fe fd38 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002270:	2000      	movs	r0, #0
 8002272:	f7fe fd35 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 8002276:	20c4      	movs	r0, #196	; 0xc4
 8002278:	f7fe fd32 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800227c:	2000      	movs	r0, #0
 800227e:	f7fe fd2f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 8002282:	20ca      	movs	r0, #202	; 0xca
 8002284:	f7fe fd2c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002288:	2000      	movs	r0, #0
 800228a:	f7fe fd29 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 800228e:	20d2      	movs	r0, #210	; 0xd2
 8002290:	f7fe fd26 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fd23 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD9);
 800229a:	20d9      	movs	r0, #217	; 0xd9
 800229c:	f7fe fd20 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7fe fd1d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 80022a6:	20e0      	movs	r0, #224	; 0xe0
 80022a8:	f7fe fd1a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7fe fd17 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 80022b2:	20f3      	movs	r0, #243	; 0xf3
 80022b4:	f7fe fd14 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe fd11 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xE1);
 80022be:	20e1      	movs	r0, #225	; 0xe1
 80022c0:	f7fe fcfa 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x16);
 80022c4:	2016      	movs	r0, #22
 80022c6:	f7fe fd0b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7fe fd08 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 80022d0:	201c      	movs	r0, #28
 80022d2:	f7fe fd05 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7fe fd02 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x22);
 80022dc:	2022      	movs	r0, #34	; 0x22
 80022de:	f7fe fcff 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe fcfc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 80022e8:	2036      	movs	r0, #54	; 0x36
 80022ea:	f7fe fcf9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7fe fcf6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 80022f4:	2045      	movs	r0, #69	; 0x45
 80022f6:	f7fe fcf3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7fe fcf0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 8002300:	2052      	movs	r0, #82	; 0x52
 8002302:	f7fe fced 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe fcea 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 800230c:	2064      	movs	r0, #100	; 0x64
 800230e:	f7fe fce7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe fce4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 8002318:	207a      	movs	r0, #122	; 0x7a
 800231a:	f7fe fce1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800231e:	2000      	movs	r0, #0
 8002320:	f7fe fcde 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 8002324:	208b      	movs	r0, #139	; 0x8b
 8002326:	f7fe fcdb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe fcd8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8002330:	2099      	movs	r0, #153	; 0x99
 8002332:	f7fe fcd5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe fcd2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 800233c:	20a8      	movs	r0, #168	; 0xa8
 800233e:	f7fe fccf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe fccc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 8002348:	20b9      	movs	r0, #185	; 0xb9
 800234a:	f7fe fcc9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800234e:	2000      	movs	r0, #0
 8002350:	f7fe fcc6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 8002354:	20c4      	movs	r0, #196	; 0xc4
 8002356:	f7fe fcc3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe fcc0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 8002360:	20ca      	movs	r0, #202	; 0xca
 8002362:	f7fe fcbd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe fcba 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 800236c:	20d2      	movs	r0, #210	; 0xd2
 800236e:	f7fe fcb7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002372:	2000      	movs	r0, #0
 8002374:	f7fe fcb4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD8);
 8002378:	20d8      	movs	r0, #216	; 0xd8
 800237a:	f7fe fcb1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800237e:	2000      	movs	r0, #0
 8002380:	f7fe fcae 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 8002384:	20e0      	movs	r0, #224	; 0xe0
 8002386:	f7fe fcab 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800238a:	2000      	movs	r0, #0
 800238c:	f7fe fca8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 8002390:	20f3      	movs	r0, #243	; 0xf3
 8002392:	f7fe fca5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fca2 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xE2);
 800239c:	20e2      	movs	r0, #226	; 0xe2
 800239e:	f7fe fc8b 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x05);
 80023a2:	2005      	movs	r0, #5
 80023a4:	f7fe fc9c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fc99 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0B);
 80023ae:	200b      	movs	r0, #11
 80023b0:	f7fe fc96 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe fc93 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1B);
 80023ba:	201b      	movs	r0, #27
 80023bc:	f7fe fc90 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fc8d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 80023c6:	2034      	movs	r0, #52	; 0x34
 80023c8:	f7fe fc8a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7fe fc87 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80023d2:	2044      	movs	r0, #68	; 0x44
 80023d4:	f7fe fc84 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe fc81 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x4F);
 80023de:	204f      	movs	r0, #79	; 0x4f
 80023e0:	f7fe fc7e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe fc7b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x61);
 80023ea:	2061      	movs	r0, #97	; 0x61
 80023ec:	f7fe fc78 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe fc75 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x79);
 80023f6:	2079      	movs	r0, #121	; 0x79
 80023f8:	f7fe fc72 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe fc6f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 8002402:	2088      	movs	r0, #136	; 0x88
 8002404:	f7fe fc6c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe fc69 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 800240e:	2097      	movs	r0, #151	; 0x97
 8002410:	f7fe fc66 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe fc63 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 800241a:	20a6      	movs	r0, #166	; 0xa6
 800241c:	f7fe fc60 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fc5d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 8002426:	20b7      	movs	r0, #183	; 0xb7
 8002428:	f7fe fc5a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe fc57 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 8002432:	20c2      	movs	r0, #194	; 0xc2
 8002434:	f7fe fc54 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fc51 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 800243e:	20c7      	movs	r0, #199	; 0xc7
 8002440:	f7fe fc4e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe fc4b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 800244a:	20d1      	movs	r0, #209	; 0xd1
 800244c:	f7fe fc48 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe fc45 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD6);
 8002456:	20d6      	movs	r0, #214	; 0xd6
 8002458:	f7fe fc42 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe fc3f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 8002462:	20dd      	movs	r0, #221	; 0xdd
 8002464:	f7fe fc3c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe fc39 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 800246e:	20f3      	movs	r0, #243	; 0xf3
 8002470:	f7fe fc36 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe fc33 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xE3);
 800247a:	20e3      	movs	r0, #227	; 0xe3
 800247c:	f7fe fc1c 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x05);
 8002480:	2005      	movs	r0, #5
 8002482:	f7fe fc2d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe fc2a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA);
 800248c:	200a      	movs	r0, #10
 800248e:	f7fe fc27 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe fc24 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 8002498:	201c      	movs	r0, #28
 800249a:	f7fe fc21 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fe fc1e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 80024a4:	2033      	movs	r0, #51	; 0x33
 80024a6:	f7fe fc1b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe fc18 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80024b0:	2044      	movs	r0, #68	; 0x44
 80024b2:	f7fe fc15 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7fe fc12 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 80024bc:	2050      	movs	r0, #80	; 0x50
 80024be:	f7fe fc0f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe fc0c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x62);
 80024c8:	2062      	movs	r0, #98	; 0x62
 80024ca:	f7fe fc09 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe fc06 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x78);
 80024d4:	2078      	movs	r0, #120	; 0x78
 80024d6:	f7fe fc03 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe fc00 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 80024e0:	2088      	movs	r0, #136	; 0x88
 80024e2:	f7fe fbfd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7fe fbfa 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 80024ec:	2097      	movs	r0, #151	; 0x97
 80024ee:	f7fe fbf7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fe fbf4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 80024f8:	20a6      	movs	r0, #166	; 0xa6
 80024fa:	f7fe fbf1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe fbee 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 8002504:	20b7      	movs	r0, #183	; 0xb7
 8002506:	f7fe fbeb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800250a:	2000      	movs	r0, #0
 800250c:	f7fe fbe8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 8002510:	20c2      	movs	r0, #194	; 0xc2
 8002512:	f7fe fbe5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fbe2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 800251c:	20c7      	movs	r0, #199	; 0xc7
 800251e:	f7fe fbdf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe fbdc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 8002528:	20d1      	movs	r0, #209	; 0xd1
 800252a:	f7fe fbd9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe fbd6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD5);
 8002534:	20d5      	movs	r0, #213	; 0xd5
 8002536:	f7fe fbd3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe fbd0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 8002540:	20dd      	movs	r0, #221	; 0xdd
 8002542:	f7fe fbcd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe fbca 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 800254c:	20f3      	movs	r0, #243	; 0xf3
 800254e:	f7fe fbc7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe fbc4 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xE4);
 8002558:	20e4      	movs	r0, #228	; 0xe4
 800255a:	f7fe fbad 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);
 800255e:	2001      	movs	r0, #1
 8002560:	f7fe fbbe 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe fbbb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 800256a:	2001      	movs	r0, #1
 800256c:	f7fe fbb8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002570:	2000      	movs	r0, #0
 8002572:	f7fe fbb5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8002576:	2002      	movs	r0, #2
 8002578:	f7fe fbb2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800257c:	2000      	movs	r0, #0
 800257e:	f7fe fbaf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 8002582:	202a      	movs	r0, #42	; 0x2a
 8002584:	f7fe fbac 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe fba9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 800258e:	203c      	movs	r0, #60	; 0x3c
 8002590:	f7fe fba6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002594:	2000      	movs	r0, #0
 8002596:	f7fe fba3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 800259a:	204b      	movs	r0, #75	; 0x4b
 800259c:	f7fe fba0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7fe fb9d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 80025a6:	205d      	movs	r0, #93	; 0x5d
 80025a8:	f7fe fb9a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe fb97 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 80025b2:	2074      	movs	r0, #116	; 0x74
 80025b4:	f7fe fb94 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe fb91 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 80025be:	2084      	movs	r0, #132	; 0x84
 80025c0:	f7fe fb8e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe fb8b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 80025ca:	2093      	movs	r0, #147	; 0x93
 80025cc:	f7fe fb88 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7fe fb85 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 80025d6:	20a2      	movs	r0, #162	; 0xa2
 80025d8:	f7fe fb82 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe fb7f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 80025e2:	20b3      	movs	r0, #179	; 0xb3
 80025e4:	f7fe fb7c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fe fb79 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 80025ee:	20be      	movs	r0, #190	; 0xbe
 80025f0:	f7fe fb76 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe fb73 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 80025fa:	20c4      	movs	r0, #196	; 0xc4
 80025fc:	f7fe fb70 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe fb6d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 8002606:	20cd      	movs	r0, #205	; 0xcd
 8002608:	f7fe fb6a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe fb67 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 8002612:	20d3      	movs	r0, #211	; 0xd3
 8002614:	f7fe fb64 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe fb61 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 800261e:	20dd      	movs	r0, #221	; 0xdd
 8002620:	f7fe fb5e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe fb5b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 800262a:	20f3      	movs	r0, #243	; 0xf3
 800262c:	f7fe fb58 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe fb55 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xE5);
 8002636:	20e5      	movs	r0, #229	; 0xe5
 8002638:	f7fe fb3e 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe fb4f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002642:	2000      	movs	r0, #0
 8002644:	f7fe fb4c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe fb49 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe fb46 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 8002654:	2002      	movs	r0, #2
 8002656:	f7fe fb43 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe fb40 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 8002660:	2029      	movs	r0, #41	; 0x29
 8002662:	f7fe fb3d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002666:	2000      	movs	r0, #0
 8002668:	f7fe fb3a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 800266c:	203c      	movs	r0, #60	; 0x3c
 800266e:	f7fe fb37 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe fb34 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 8002678:	204b      	movs	r0, #75	; 0x4b
 800267a:	f7fe fb31 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe fb2e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 8002684:	205d      	movs	r0, #93	; 0x5d
 8002686:	f7fe fb2b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe fb28 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 8002690:	2074      	movs	r0, #116	; 0x74
 8002692:	f7fe fb25 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe fb22 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 800269c:	2084      	movs	r0, #132	; 0x84
 800269e:	f7fe fb1f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe fb1c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 80026a8:	2093      	movs	r0, #147	; 0x93
 80026aa:	f7fe fb19 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe fb16 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 80026b4:	20a2      	movs	r0, #162	; 0xa2
 80026b6:	f7fe fb13 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe fb10 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 80026c0:	20b3      	movs	r0, #179	; 0xb3
 80026c2:	f7fe fb0d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7fe fb0a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 80026cc:	20be      	movs	r0, #190	; 0xbe
 80026ce:	f7fe fb07 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe fb04 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 80026d8:	20c4      	movs	r0, #196	; 0xc4
 80026da:	f7fe fb01 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe fafe 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 80026e4:	20cd      	movs	r0, #205	; 0xcd
 80026e6:	f7fe fafb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe faf8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 80026f0:	20d3      	movs	r0, #211	; 0xd3
 80026f2:	f7fe faf5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe faf2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 80026fc:	20dc      	movs	r0, #220	; 0xdc
 80026fe:	f7fe faef 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe faec 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 8002708:	20f3      	movs	r0, #243	; 0xf3
 800270a:	f7fe fae9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800270e:	2000      	movs	r0, #0
 8002710:	f7fe fae6 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xE6);
 8002714:	20e6      	movs	r0, #230	; 0xe6
 8002716:	f7fe facf 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x11);
 800271a:	2011      	movs	r0, #17
 800271c:	f7fe fae0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fadd 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 8002726:	2034      	movs	r0, #52	; 0x34
 8002728:	f7fe fada 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe fad7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 8002732:	2056      	movs	r0, #86	; 0x56
 8002734:	f7fe fad4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe fad1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 800273e:	2076      	movs	r0, #118	; 0x76
 8002740:	f7fe face 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe facb 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 800274a:	2077      	movs	r0, #119	; 0x77
 800274c:	f7fe fac8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe fac5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 8002756:	2066      	movs	r0, #102	; 0x66
 8002758:	f7fe fac2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe fabf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 8002762:	2088      	movs	r0, #136	; 0x88
 8002764:	f7fe fabc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe fab9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 800276e:	2099      	movs	r0, #153	; 0x99
 8002770:	f7fe fab6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe fab3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 800277a:	20bb      	movs	r0, #187	; 0xbb
 800277c:	f7fe fab0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe faad 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8002786:	2099      	movs	r0, #153	; 0x99
 8002788:	f7fe faaa 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe faa7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 8002792:	2066      	movs	r0, #102	; 0x66
 8002794:	f7fe faa4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe faa1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 800279e:	2055      	movs	r0, #85	; 0x55
 80027a0:	f7fe fa9e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe fa9b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 80027aa:	2055      	movs	r0, #85	; 0x55
 80027ac:	f7fe fa98 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe fa95 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 80027b6:	2045      	movs	r0, #69	; 0x45
 80027b8:	f7fe fa92 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe fa8f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 80027c2:	2043      	movs	r0, #67	; 0x43
 80027c4:	f7fe fa8c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe fa89 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 80027ce:	2044      	movs	r0, #68	; 0x44
 80027d0:	f7fe fa86 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe fa83 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xE7);
 80027da:	20e7      	movs	r0, #231	; 0xe7
 80027dc:	f7fe fa6c 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x32);
 80027e0:	2032      	movs	r0, #50	; 0x32
 80027e2:	f7fe fa7d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe fa7a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 80027ec:	2055      	movs	r0, #85	; 0x55
 80027ee:	f7fe fa77 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe fa74 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 80027f8:	2076      	movs	r0, #118	; 0x76
 80027fa:	f7fe fa71 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe fa6e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 8002804:	2066      	movs	r0, #102	; 0x66
 8002806:	f7fe fa6b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe fa68 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 8002810:	2067      	movs	r0, #103	; 0x67
 8002812:	f7fe fa65 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe fa62 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 800281c:	2067      	movs	r0, #103	; 0x67
 800281e:	f7fe fa5f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7fe fa5c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 8002828:	2087      	movs	r0, #135	; 0x87
 800282a:	f7fe fa59 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe fa56 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8002834:	2099      	movs	r0, #153	; 0x99
 8002836:	f7fe fa53 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe fa50 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 8002840:	20bb      	movs	r0, #187	; 0xbb
 8002842:	f7fe fa4d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe fa4a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 800284c:	2099      	movs	r0, #153	; 0x99
 800284e:	f7fe fa47 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe fa44 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 8002858:	2077      	movs	r0, #119	; 0x77
 800285a:	f7fe fa41 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe fa3e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 8002864:	2044      	movs	r0, #68	; 0x44
 8002866:	f7fe fa3b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe fa38 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 8002870:	2056      	movs	r0, #86	; 0x56
 8002872:	f7fe fa35 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fa32 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 800287c:	2023      	movs	r0, #35	; 0x23
 800287e:	f7fe fa2f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe fa2c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 8002888:	2033      	movs	r0, #51	; 0x33
 800288a:	f7fe fa29 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe fa26 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 8002894:	2045      	movs	r0, #69	; 0x45
 8002896:	f7fe fa23 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe fa20 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xE8);
 80028a0:	20e8      	movs	r0, #232	; 0xe8
 80028a2:	f7fe fa09 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe fa1a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe fa17 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 80028b2:	2099      	movs	r0, #153	; 0x99
 80028b4:	f7fe fa14 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7fe fa11 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 80028be:	2087      	movs	r0, #135	; 0x87
 80028c0:	f7fe fa0e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe fa0b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 80028ca:	2088      	movs	r0, #136	; 0x88
 80028cc:	f7fe fa08 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7fe fa05 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 80028d6:	2077      	movs	r0, #119	; 0x77
 80028d8:	f7fe fa02 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fe f9ff 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 80028e2:	2066      	movs	r0, #102	; 0x66
 80028e4:	f7fe f9fc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7fe f9f9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 80028ee:	2088      	movs	r0, #136	; 0x88
 80028f0:	f7fe f9f6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7fe f9f3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xAA);
 80028fa:	20aa      	movs	r0, #170	; 0xaa
 80028fc:	f7fe f9f0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002900:	2000      	movs	r0, #0
 8002902:	f7fe f9ed 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 8002906:	20bb      	movs	r0, #187	; 0xbb
 8002908:	f7fe f9ea 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800290c:	2000      	movs	r0, #0
 800290e:	f7fe f9e7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 8002912:	2099      	movs	r0, #153	; 0x99
 8002914:	f7fe f9e4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002918:	2000      	movs	r0, #0
 800291a:	f7fe f9e1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 800291e:	2066      	movs	r0, #102	; 0x66
 8002920:	f7fe f9de 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002924:	2000      	movs	r0, #0
 8002926:	f7fe f9db 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 800292a:	2055      	movs	r0, #85	; 0x55
 800292c:	f7fe f9d8 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002930:	2000      	movs	r0, #0
 8002932:	f7fe f9d5 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 8002936:	2055      	movs	r0, #85	; 0x55
 8002938:	f7fe f9d2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800293c:	2000      	movs	r0, #0
 800293e:	f7fe f9cf 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 8002942:	2044      	movs	r0, #68	; 0x44
 8002944:	f7fe f9cc 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002948:	2000      	movs	r0, #0
 800294a:	f7fe f9c9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 800294e:	2044      	movs	r0, #68	; 0x44
 8002950:	f7fe f9c6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002954:	2000      	movs	r0, #0
 8002956:	f7fe f9c3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 800295a:	2055      	movs	r0, #85	; 0x55
 800295c:	f7fe f9c0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7fe f9bd 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xE9);
 8002966:	20e9      	movs	r0, #233	; 0xe9
 8002968:	f7fe f9a6 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0xAA);
 800296c:	20aa      	movs	r0, #170	; 0xaa
 800296e:	f7fe f9b7 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002972:	2000      	movs	r0, #0
 8002974:	f7fe f9b4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe f9b1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fe f9ae 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0x00);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe f997 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0xAA);
 800298a:	20aa      	movs	r0, #170	; 0xaa
 800298c:	f7fe f9a8 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xCF);
 8002990:	20cf      	movs	r0, #207	; 0xcf
 8002992:	f7fe f991 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002996:	2000      	movs	r0, #0
 8002998:	f7fe f9a2 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe f99f 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7fe f99c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe f999 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7fe f996 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe f993 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7fe f990 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe f98d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe f98a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe f987 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7fe f984 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe f981 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fe f97e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe f97b 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7fe f978 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe f975 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fe f972 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xF0);
 80029fc:	20f0      	movs	r0, #240	; 0xf0
 80029fe:	f7fe f95b 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe f96c 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 8002a08:	2050      	movs	r0, #80	; 0x50
 8002a0a:	f7fe f969 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fe f966 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe f963 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fe f960 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xF3);
 8002a20:	20f3      	movs	r0, #243	; 0xf3
 8002a22:	f7fe f949 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fe f95a 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xF9);
 8002a2c:	20f9      	movs	r0, #249	; 0xf9
 8002a2e:	f7fe f943 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x06);
 8002a32:	2006      	movs	r0, #6
 8002a34:	f7fe f954 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 8002a38:	2010      	movs	r0, #16
 8002a3a:	f7fe f951 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 8002a3e:	2029      	movs	r0, #41	; 0x29
 8002a40:	f7fe f94e 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe f94b 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0x3A);
 8002a4a:	203a      	movs	r0, #58	; 0x3a
 8002a4c:	f7fe f934 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x55);	//66
 8002a50:	2055      	movs	r0, #85	; 0x55
 8002a52:	f7fe f945 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0x11);
 8002a56:	2011      	movs	r0, #17
 8002a58:	f7fe f92e 	bl	8000cb8 <LCD_WR_REG>
        delay_ms(100);
 8002a5c:	2064      	movs	r0, #100	; 0x64
 8002a5e:	f001 feeb 	bl	8004838 <delay_ms>
        LCD_WR_REG(0x29);
 8002a62:	2029      	movs	r0, #41	; 0x29
 8002a64:	f7fe f928 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_REG(0x35);
 8002a68:	2035      	movs	r0, #53	; 0x35
 8002a6a:	f7fe f925 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe f936 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0x51);
 8002a74:	2051      	movs	r0, #81	; 0x51
 8002a76:	f7fe f91f 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0xFF);
 8002a7a:	20ff      	movs	r0, #255	; 0xff
 8002a7c:	f7fe f930 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0x53);
 8002a80:	2053      	movs	r0, #83	; 0x53
 8002a82:	f7fe f919 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x2C);
 8002a86:	202c      	movs	r0, #44	; 0x2c
 8002a88:	f7fe f92a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0x55);
 8002a8c:	2055      	movs	r0, #85	; 0x55
 8002a8e:	f7fe f913 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x82);
 8002a92:	2082      	movs	r0, #130	; 0x82
 8002a94:	f7fe f924 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0x2c);
 8002a98:	202c      	movs	r0, #44	; 0x2c
 8002a9a:	f7fe f90d 	bl	8000cb8 <LCD_WR_REG>
 8002a9e:	f001 b847 	b.w	8003b30 <LCD_Init+0x25c0>
    }
    else if (lcddev.id == 0x5510)
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <LCD_Init+0x1544>)
 8002aa4:	889b      	ldrh	r3, [r3, #4]
 8002aa6:	f245 5210 	movw	r2, #21776	; 0x5510
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f040 8781 	bne.w	80039b2 <LCD_Init+0x2442>
 8002ab0:	e002      	b.n	8002ab8 <LCD_Init+0x1548>
 8002ab2:	bf00      	nop
 8002ab4:	20000208 	.word	0x20000208
    {
        LCD_WriteReg(0xF000, 0x55);
 8002ab8:	2155      	movs	r1, #85	; 0x55
 8002aba:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002abe:	f7fe f933 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xF001, 0xAA);
 8002ac2:	21aa      	movs	r1, #170	; 0xaa
 8002ac4:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002ac8:	f7fe f92e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xF002, 0x52);
 8002acc:	2152      	movs	r1, #82	; 0x52
 8002ace:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002ad2:	f7fe f929 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xF003, 0x08);
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002adc:	f7fe f924 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xF004, 0x01);
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002ae6:	f7fe f91f 	bl	8000d28 <LCD_WriteReg>
        //AVDD Set AVDD 5.2V
        LCD_WriteReg(0xB000, 0x0D);
 8002aea:	210d      	movs	r1, #13
 8002aec:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002af0:	f7fe f91a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB001, 0x0D);
 8002af4:	210d      	movs	r1, #13
 8002af6:	f24b 0001 	movw	r0, #45057	; 0xb001
 8002afa:	f7fe f915 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB002, 0x0D);
 8002afe:	210d      	movs	r1, #13
 8002b00:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002b04:	f7fe f910 	bl	8000d28 <LCD_WriteReg>
        //AVDD ratio
        LCD_WriteReg(0xB600, 0x34);
 8002b08:	2134      	movs	r1, #52	; 0x34
 8002b0a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002b0e:	f7fe f90b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB601, 0x34);
 8002b12:	2134      	movs	r1, #52	; 0x34
 8002b14:	f24b 6001 	movw	r0, #46593	; 0xb601
 8002b18:	f7fe f906 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB602, 0x34);
 8002b1c:	2134      	movs	r1, #52	; 0x34
 8002b1e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002b22:	f7fe f901 	bl	8000d28 <LCD_WriteReg>
        //AVEE -5.2V
        LCD_WriteReg(0xB100, 0x0D);
 8002b26:	210d      	movs	r1, #13
 8002b28:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002b2c:	f7fe f8fc 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x0D);
 8002b30:	210d      	movs	r1, #13
 8002b32:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002b36:	f7fe f8f7 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB102, 0x0D);
 8002b3a:	210d      	movs	r1, #13
 8002b3c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8002b40:	f7fe f8f2 	bl	8000d28 <LCD_WriteReg>
        //AVEE ratio
        LCD_WriteReg(0xB700, 0x34);
 8002b44:	2134      	movs	r1, #52	; 0x34
 8002b46:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002b4a:	f7fe f8ed 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB701, 0x34);
 8002b4e:	2134      	movs	r1, #52	; 0x34
 8002b50:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002b54:	f7fe f8e8 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB702, 0x34);
 8002b58:	2134      	movs	r1, #52	; 0x34
 8002b5a:	f24b 7002 	movw	r0, #46850	; 0xb702
 8002b5e:	f7fe f8e3 	bl	8000d28 <LCD_WriteReg>
        //VCL -2.5V
        LCD_WriteReg(0xB200, 0x00);
 8002b62:	2100      	movs	r1, #0
 8002b64:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002b68:	f7fe f8de 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB201, 0x00);
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8002b72:	f7fe f8d9 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB202, 0x00);
 8002b76:	2100      	movs	r1, #0
 8002b78:	f24b 2002 	movw	r0, #45570	; 0xb202
 8002b7c:	f7fe f8d4 	bl	8000d28 <LCD_WriteReg>
        //VCL ratio
        LCD_WriteReg(0xB800, 0x24);
 8002b80:	2124      	movs	r1, #36	; 0x24
 8002b82:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002b86:	f7fe f8cf 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB801, 0x24);
 8002b8a:	2124      	movs	r1, #36	; 0x24
 8002b8c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002b90:	f7fe f8ca 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB802, 0x24);
 8002b94:	2124      	movs	r1, #36	; 0x24
 8002b96:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002b9a:	f7fe f8c5 	bl	8000d28 <LCD_WriteReg>
        //VGH 15V (Free pump)
        LCD_WriteReg(0xBF00, 0x01);
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8002ba4:	f7fe f8c0 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB300, 0x0F);
 8002ba8:	210f      	movs	r1, #15
 8002baa:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8002bae:	f7fe f8bb 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB301, 0x0F);
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	f24b 3001 	movw	r0, #45825	; 0xb301
 8002bb8:	f7fe f8b6 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB302, 0x0F);
 8002bbc:	210f      	movs	r1, #15
 8002bbe:	f24b 3002 	movw	r0, #45826	; 0xb302
 8002bc2:	f7fe f8b1 	bl	8000d28 <LCD_WriteReg>
        //VGH ratio
        LCD_WriteReg(0xB900, 0x34);
 8002bc6:	2134      	movs	r1, #52	; 0x34
 8002bc8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8002bcc:	f7fe f8ac 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB901, 0x34);
 8002bd0:	2134      	movs	r1, #52	; 0x34
 8002bd2:	f64b 1001 	movw	r0, #47361	; 0xb901
 8002bd6:	f7fe f8a7 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB902, 0x34);
 8002bda:	2134      	movs	r1, #52	; 0x34
 8002bdc:	f64b 1002 	movw	r0, #47362	; 0xb902
 8002be0:	f7fe f8a2 	bl	8000d28 <LCD_WriteReg>
        //VGL_REG -10V
        LCD_WriteReg(0xB500, 0x08);
 8002be4:	2108      	movs	r1, #8
 8002be6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8002bea:	f7fe f89d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB501, 0x08);
 8002bee:	2108      	movs	r1, #8
 8002bf0:	f24b 5001 	movw	r0, #46337	; 0xb501
 8002bf4:	f7fe f898 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB502, 0x08);
 8002bf8:	2108      	movs	r1, #8
 8002bfa:	f24b 5002 	movw	r0, #46338	; 0xb502
 8002bfe:	f7fe f893 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xC200, 0x03);
 8002c02:	2103      	movs	r1, #3
 8002c04:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8002c08:	f7fe f88e 	bl	8000d28 <LCD_WriteReg>
        //VGLX ratio
        LCD_WriteReg(0xBA00, 0x24);
 8002c0c:	2124      	movs	r1, #36	; 0x24
 8002c0e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8002c12:	f7fe f889 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xBA01, 0x24);
 8002c16:	2124      	movs	r1, #36	; 0x24
 8002c18:	f64b 2001 	movw	r0, #47617	; 0xba01
 8002c1c:	f7fe f884 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xBA02, 0x24);
 8002c20:	2124      	movs	r1, #36	; 0x24
 8002c22:	f64b 2002 	movw	r0, #47618	; 0xba02
 8002c26:	f7fe f87f 	bl	8000d28 <LCD_WriteReg>
        //VGMP/VGSP 4.5V/0V
        LCD_WriteReg(0xBC00, 0x00);
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002c30:	f7fe f87a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xBC01, 0x78);
 8002c34:	2178      	movs	r1, #120	; 0x78
 8002c36:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8002c3a:	f7fe f875 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xBC02, 0x00);
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002c44:	f7fe f870 	bl	8000d28 <LCD_WriteReg>
        //VGMN/VGSN -4.5V/0V
        LCD_WriteReg(0xBD00, 0x00);
 8002c48:	2100      	movs	r1, #0
 8002c4a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8002c4e:	f7fe f86b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xBD01, 0x78);
 8002c52:	2178      	movs	r1, #120	; 0x78
 8002c54:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8002c58:	f7fe f866 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xBD02, 0x00);
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8002c62:	f7fe f861 	bl	8000d28 <LCD_WriteReg>
        //VCOM
        LCD_WriteReg(0xBE00, 0x00);
 8002c66:	2100      	movs	r1, #0
 8002c68:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8002c6c:	f7fe f85c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xBE01, 0x64);
 8002c70:	2164      	movs	r1, #100	; 0x64
 8002c72:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8002c76:	f7fe f857 	bl	8000d28 <LCD_WriteReg>
        //Gamma Setting
        LCD_WriteReg(0xD100, 0x00);
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8002c80:	f7fe f852 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD101, 0x33);
 8002c84:	2133      	movs	r1, #51	; 0x33
 8002c86:	f24d 1001 	movw	r0, #53505	; 0xd101
 8002c8a:	f7fe f84d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD102, 0x00);
 8002c8e:	2100      	movs	r1, #0
 8002c90:	f24d 1002 	movw	r0, #53506	; 0xd102
 8002c94:	f7fe f848 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD103, 0x34);
 8002c98:	2134      	movs	r1, #52	; 0x34
 8002c9a:	f24d 1003 	movw	r0, #53507	; 0xd103
 8002c9e:	f7fe f843 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD104, 0x00);
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f24d 1004 	movw	r0, #53508	; 0xd104
 8002ca8:	f7fe f83e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD105, 0x3A);
 8002cac:	213a      	movs	r1, #58	; 0x3a
 8002cae:	f24d 1005 	movw	r0, #53509	; 0xd105
 8002cb2:	f7fe f839 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD106, 0x00);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f24d 1006 	movw	r0, #53510	; 0xd106
 8002cbc:	f7fe f834 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD107, 0x4A);
 8002cc0:	214a      	movs	r1, #74	; 0x4a
 8002cc2:	f24d 1007 	movw	r0, #53511	; 0xd107
 8002cc6:	f7fe f82f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD108, 0x00);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	f24d 1008 	movw	r0, #53512	; 0xd108
 8002cd0:	f7fe f82a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD109, 0x5C);
 8002cd4:	215c      	movs	r1, #92	; 0x5c
 8002cd6:	f24d 1009 	movw	r0, #53513	; 0xd109
 8002cda:	f7fe f825 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD10A, 0x00);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8002ce4:	f7fe f820 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD10B, 0x81);
 8002ce8:	2181      	movs	r1, #129	; 0x81
 8002cea:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8002cee:	f7fe f81b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD10C, 0x00);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8002cf8:	f7fe f816 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD10D, 0xA6);
 8002cfc:	21a6      	movs	r1, #166	; 0xa6
 8002cfe:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8002d02:	f7fe f811 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD10E, 0x00);
 8002d06:	2100      	movs	r1, #0
 8002d08:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8002d0c:	f7fe f80c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD10F, 0xE5);
 8002d10:	21e5      	movs	r1, #229	; 0xe5
 8002d12:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8002d16:	f7fe f807 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD110, 0x01);
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8002d20:	f7fe f802 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD111, 0x13);
 8002d24:	2113      	movs	r1, #19
 8002d26:	f24d 1011 	movw	r0, #53521	; 0xd111
 8002d2a:	f7fd fffd 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD112, 0x01);
 8002d2e:	2101      	movs	r1, #1
 8002d30:	f24d 1012 	movw	r0, #53522	; 0xd112
 8002d34:	f7fd fff8 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD113, 0x54);
 8002d38:	2154      	movs	r1, #84	; 0x54
 8002d3a:	f24d 1013 	movw	r0, #53523	; 0xd113
 8002d3e:	f7fd fff3 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD114, 0x01);
 8002d42:	2101      	movs	r1, #1
 8002d44:	f24d 1014 	movw	r0, #53524	; 0xd114
 8002d48:	f7fd ffee 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD115, 0x82);
 8002d4c:	2182      	movs	r1, #130	; 0x82
 8002d4e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8002d52:	f7fd ffe9 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD116, 0x01);
 8002d56:	2101      	movs	r1, #1
 8002d58:	f24d 1016 	movw	r0, #53526	; 0xd116
 8002d5c:	f7fd ffe4 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD117, 0xCA);
 8002d60:	21ca      	movs	r1, #202	; 0xca
 8002d62:	f24d 1017 	movw	r0, #53527	; 0xd117
 8002d66:	f7fd ffdf 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD118, 0x02);
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8002d70:	f7fd ffda 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD119, 0x00);
 8002d74:	2100      	movs	r1, #0
 8002d76:	f24d 1019 	movw	r0, #53529	; 0xd119
 8002d7a:	f7fd ffd5 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD11A, 0x02);
 8002d7e:	2102      	movs	r1, #2
 8002d80:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8002d84:	f7fd ffd0 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD11B, 0x01);
 8002d88:	2101      	movs	r1, #1
 8002d8a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8002d8e:	f7fd ffcb 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD11C, 0x02);
 8002d92:	2102      	movs	r1, #2
 8002d94:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8002d98:	f7fd ffc6 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD11D, 0x34);
 8002d9c:	2134      	movs	r1, #52	; 0x34
 8002d9e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8002da2:	f7fd ffc1 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD11E, 0x02);
 8002da6:	2102      	movs	r1, #2
 8002da8:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8002dac:	f7fd ffbc 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD11F, 0x67);
 8002db0:	2167      	movs	r1, #103	; 0x67
 8002db2:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8002db6:	f7fd ffb7 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD120, 0x02);
 8002dba:	2102      	movs	r1, #2
 8002dbc:	f24d 1020 	movw	r0, #53536	; 0xd120
 8002dc0:	f7fd ffb2 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD121, 0x84);
 8002dc4:	2184      	movs	r1, #132	; 0x84
 8002dc6:	f24d 1021 	movw	r0, #53537	; 0xd121
 8002dca:	f7fd ffad 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD122, 0x02);
 8002dce:	2102      	movs	r1, #2
 8002dd0:	f24d 1022 	movw	r0, #53538	; 0xd122
 8002dd4:	f7fd ffa8 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD123, 0xA4);
 8002dd8:	21a4      	movs	r1, #164	; 0xa4
 8002dda:	f24d 1023 	movw	r0, #53539	; 0xd123
 8002dde:	f7fd ffa3 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD124, 0x02);
 8002de2:	2102      	movs	r1, #2
 8002de4:	f24d 1024 	movw	r0, #53540	; 0xd124
 8002de8:	f7fd ff9e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD125, 0xB7);
 8002dec:	21b7      	movs	r1, #183	; 0xb7
 8002dee:	f24d 1025 	movw	r0, #53541	; 0xd125
 8002df2:	f7fd ff99 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD126, 0x02);
 8002df6:	2102      	movs	r1, #2
 8002df8:	f24d 1026 	movw	r0, #53542	; 0xd126
 8002dfc:	f7fd ff94 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD127, 0xCF);
 8002e00:	21cf      	movs	r1, #207	; 0xcf
 8002e02:	f24d 1027 	movw	r0, #53543	; 0xd127
 8002e06:	f7fd ff8f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD128, 0x02);
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8002e10:	f7fd ff8a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD129, 0xDE);
 8002e14:	21de      	movs	r1, #222	; 0xde
 8002e16:	f24d 1029 	movw	r0, #53545	; 0xd129
 8002e1a:	f7fd ff85 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD12A, 0x02);
 8002e1e:	2102      	movs	r1, #2
 8002e20:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8002e24:	f7fd ff80 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD12B, 0xF2);
 8002e28:	21f2      	movs	r1, #242	; 0xf2
 8002e2a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8002e2e:	f7fd ff7b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD12C, 0x02);
 8002e32:	2102      	movs	r1, #2
 8002e34:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8002e38:	f7fd ff76 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD12D, 0xFE);
 8002e3c:	21fe      	movs	r1, #254	; 0xfe
 8002e3e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8002e42:	f7fd ff71 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD12E, 0x03);
 8002e46:	2103      	movs	r1, #3
 8002e48:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8002e4c:	f7fd ff6c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD12F, 0x10);
 8002e50:	2110      	movs	r1, #16
 8002e52:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8002e56:	f7fd ff67 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD130, 0x03);
 8002e5a:	2103      	movs	r1, #3
 8002e5c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8002e60:	f7fd ff62 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD131, 0x33);
 8002e64:	2133      	movs	r1, #51	; 0x33
 8002e66:	f24d 1031 	movw	r0, #53553	; 0xd131
 8002e6a:	f7fd ff5d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD132, 0x03);
 8002e6e:	2103      	movs	r1, #3
 8002e70:	f24d 1032 	movw	r0, #53554	; 0xd132
 8002e74:	f7fd ff58 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD133, 0x6D);
 8002e78:	216d      	movs	r1, #109	; 0x6d
 8002e7a:	f24d 1033 	movw	r0, #53555	; 0xd133
 8002e7e:	f7fd ff53 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD200, 0x00);
 8002e82:	2100      	movs	r1, #0
 8002e84:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8002e88:	f7fd ff4e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD201, 0x33);
 8002e8c:	2133      	movs	r1, #51	; 0x33
 8002e8e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8002e92:	f7fd ff49 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD202, 0x00);
 8002e96:	2100      	movs	r1, #0
 8002e98:	f24d 2002 	movw	r0, #53762	; 0xd202
 8002e9c:	f7fd ff44 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD203, 0x34);
 8002ea0:	2134      	movs	r1, #52	; 0x34
 8002ea2:	f24d 2003 	movw	r0, #53763	; 0xd203
 8002ea6:	f7fd ff3f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD204, 0x00);
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f24d 2004 	movw	r0, #53764	; 0xd204
 8002eb0:	f7fd ff3a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD205, 0x3A);
 8002eb4:	213a      	movs	r1, #58	; 0x3a
 8002eb6:	f24d 2005 	movw	r0, #53765	; 0xd205
 8002eba:	f7fd ff35 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD206, 0x00);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	f24d 2006 	movw	r0, #53766	; 0xd206
 8002ec4:	f7fd ff30 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD207, 0x4A);
 8002ec8:	214a      	movs	r1, #74	; 0x4a
 8002eca:	f24d 2007 	movw	r0, #53767	; 0xd207
 8002ece:	f7fd ff2b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD208, 0x00);
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	f24d 2008 	movw	r0, #53768	; 0xd208
 8002ed8:	f7fd ff26 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD209, 0x5C);
 8002edc:	215c      	movs	r1, #92	; 0x5c
 8002ede:	f24d 2009 	movw	r0, #53769	; 0xd209
 8002ee2:	f7fd ff21 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD20A, 0x00);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8002eec:	f7fd ff1c 	bl	8000d28 <LCD_WriteReg>

        LCD_WriteReg(0xD20B, 0x81);
 8002ef0:	2181      	movs	r1, #129	; 0x81
 8002ef2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8002ef6:	f7fd ff17 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD20C, 0x00);
 8002efa:	2100      	movs	r1, #0
 8002efc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8002f00:	f7fd ff12 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD20D, 0xA6);
 8002f04:	21a6      	movs	r1, #166	; 0xa6
 8002f06:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8002f0a:	f7fd ff0d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD20E, 0x00);
 8002f0e:	2100      	movs	r1, #0
 8002f10:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8002f14:	f7fd ff08 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD20F, 0xE5);
 8002f18:	21e5      	movs	r1, #229	; 0xe5
 8002f1a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8002f1e:	f7fd ff03 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD210, 0x01);
 8002f22:	2101      	movs	r1, #1
 8002f24:	f24d 2010 	movw	r0, #53776	; 0xd210
 8002f28:	f7fd fefe 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD211, 0x13);
 8002f2c:	2113      	movs	r1, #19
 8002f2e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8002f32:	f7fd fef9 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD212, 0x01);
 8002f36:	2101      	movs	r1, #1
 8002f38:	f24d 2012 	movw	r0, #53778	; 0xd212
 8002f3c:	f7fd fef4 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD213, 0x54);
 8002f40:	2154      	movs	r1, #84	; 0x54
 8002f42:	f24d 2013 	movw	r0, #53779	; 0xd213
 8002f46:	f7fd feef 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD214, 0x01);
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8002f50:	f7fd feea 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD215, 0x82);
 8002f54:	2182      	movs	r1, #130	; 0x82
 8002f56:	f24d 2015 	movw	r0, #53781	; 0xd215
 8002f5a:	f7fd fee5 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD216, 0x01);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	f24d 2016 	movw	r0, #53782	; 0xd216
 8002f64:	f7fd fee0 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD217, 0xCA);
 8002f68:	21ca      	movs	r1, #202	; 0xca
 8002f6a:	f24d 2017 	movw	r0, #53783	; 0xd217
 8002f6e:	f7fd fedb 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD218, 0x02);
 8002f72:	2102      	movs	r1, #2
 8002f74:	f24d 2018 	movw	r0, #53784	; 0xd218
 8002f78:	f7fd fed6 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD219, 0x00);
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8002f82:	f7fd fed1 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD21A, 0x02);
 8002f86:	2102      	movs	r1, #2
 8002f88:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8002f8c:	f7fd fecc 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD21B, 0x01);
 8002f90:	2101      	movs	r1, #1
 8002f92:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8002f96:	f7fd fec7 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD21C, 0x02);
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8002fa0:	f7fd fec2 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD21D, 0x34);
 8002fa4:	2134      	movs	r1, #52	; 0x34
 8002fa6:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8002faa:	f7fd febd 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD21E, 0x02);
 8002fae:	2102      	movs	r1, #2
 8002fb0:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8002fb4:	f7fd feb8 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD21F, 0x67);
 8002fb8:	2167      	movs	r1, #103	; 0x67
 8002fba:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8002fbe:	f7fd feb3 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD220, 0x02);
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	f24d 2020 	movw	r0, #53792	; 0xd220
 8002fc8:	f7fd feae 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD221, 0x84);
 8002fcc:	2184      	movs	r1, #132	; 0x84
 8002fce:	f24d 2021 	movw	r0, #53793	; 0xd221
 8002fd2:	f7fd fea9 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD222, 0x02);
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	f24d 2022 	movw	r0, #53794	; 0xd222
 8002fdc:	f7fd fea4 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD223, 0xA4);
 8002fe0:	21a4      	movs	r1, #164	; 0xa4
 8002fe2:	f24d 2023 	movw	r0, #53795	; 0xd223
 8002fe6:	f7fd fe9f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD224, 0x02);
 8002fea:	2102      	movs	r1, #2
 8002fec:	f24d 2024 	movw	r0, #53796	; 0xd224
 8002ff0:	f7fd fe9a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD225, 0xB7);
 8002ff4:	21b7      	movs	r1, #183	; 0xb7
 8002ff6:	f24d 2025 	movw	r0, #53797	; 0xd225
 8002ffa:	f7fd fe95 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD226, 0x02);
 8002ffe:	2102      	movs	r1, #2
 8003000:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003004:	f7fd fe90 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD227, 0xCF);
 8003008:	21cf      	movs	r1, #207	; 0xcf
 800300a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800300e:	f7fd fe8b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD228, 0x02);
 8003012:	2102      	movs	r1, #2
 8003014:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003018:	f7fd fe86 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD229, 0xDE);
 800301c:	21de      	movs	r1, #222	; 0xde
 800301e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003022:	f7fd fe81 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD22A, 0x02);
 8003026:	2102      	movs	r1, #2
 8003028:	f24d 202a 	movw	r0, #53802	; 0xd22a
 800302c:	f7fd fe7c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD22B, 0xF2);
 8003030:	21f2      	movs	r1, #242	; 0xf2
 8003032:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003036:	f7fd fe77 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD22C, 0x02);
 800303a:	2102      	movs	r1, #2
 800303c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003040:	f7fd fe72 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD22D, 0xFE);
 8003044:	21fe      	movs	r1, #254	; 0xfe
 8003046:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800304a:	f7fd fe6d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD22E, 0x03);
 800304e:	2103      	movs	r1, #3
 8003050:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003054:	f7fd fe68 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD22F, 0x10);
 8003058:	2110      	movs	r1, #16
 800305a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800305e:	f7fd fe63 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD230, 0x03);
 8003062:	2103      	movs	r1, #3
 8003064:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003068:	f7fd fe5e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD231, 0x33);
 800306c:	2133      	movs	r1, #51	; 0x33
 800306e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003072:	f7fd fe59 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD232, 0x03);
 8003076:	2103      	movs	r1, #3
 8003078:	f24d 2032 	movw	r0, #53810	; 0xd232
 800307c:	f7fd fe54 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD233, 0x6D);
 8003080:	216d      	movs	r1, #109	; 0x6d
 8003082:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003086:	f7fd fe4f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD300, 0x00);
 800308a:	2100      	movs	r1, #0
 800308c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003090:	f7fd fe4a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD301, 0x33);
 8003094:	2133      	movs	r1, #51	; 0x33
 8003096:	f24d 3001 	movw	r0, #54017	; 0xd301
 800309a:	f7fd fe45 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD302, 0x00);
 800309e:	2100      	movs	r1, #0
 80030a0:	f24d 3002 	movw	r0, #54018	; 0xd302
 80030a4:	f7fd fe40 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD303, 0x34);
 80030a8:	2134      	movs	r1, #52	; 0x34
 80030aa:	f24d 3003 	movw	r0, #54019	; 0xd303
 80030ae:	f7fd fe3b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD304, 0x00);
 80030b2:	2100      	movs	r1, #0
 80030b4:	f24d 3004 	movw	r0, #54020	; 0xd304
 80030b8:	f7fd fe36 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD305, 0x3A);
 80030bc:	213a      	movs	r1, #58	; 0x3a
 80030be:	f24d 3005 	movw	r0, #54021	; 0xd305
 80030c2:	f7fd fe31 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD306, 0x00);
 80030c6:	2100      	movs	r1, #0
 80030c8:	f24d 3006 	movw	r0, #54022	; 0xd306
 80030cc:	f7fd fe2c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD307, 0x4A);
 80030d0:	214a      	movs	r1, #74	; 0x4a
 80030d2:	f24d 3007 	movw	r0, #54023	; 0xd307
 80030d6:	f7fd fe27 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD308, 0x00);
 80030da:	2100      	movs	r1, #0
 80030dc:	f24d 3008 	movw	r0, #54024	; 0xd308
 80030e0:	f7fd fe22 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD309, 0x5C);
 80030e4:	215c      	movs	r1, #92	; 0x5c
 80030e6:	f24d 3009 	movw	r0, #54025	; 0xd309
 80030ea:	f7fd fe1d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD30A, 0x00);
 80030ee:	2100      	movs	r1, #0
 80030f0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80030f4:	f7fd fe18 	bl	8000d28 <LCD_WriteReg>

        LCD_WriteReg(0xD30B, 0x81);
 80030f8:	2181      	movs	r1, #129	; 0x81
 80030fa:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80030fe:	f7fd fe13 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD30C, 0x00);
 8003102:	2100      	movs	r1, #0
 8003104:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003108:	f7fd fe0e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD30D, 0xA6);
 800310c:	21a6      	movs	r1, #166	; 0xa6
 800310e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003112:	f7fd fe09 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD30E, 0x00);
 8003116:	2100      	movs	r1, #0
 8003118:	f24d 300e 	movw	r0, #54030	; 0xd30e
 800311c:	f7fd fe04 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD30F, 0xE5);
 8003120:	21e5      	movs	r1, #229	; 0xe5
 8003122:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003126:	f7fd fdff 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD310, 0x01);
 800312a:	2101      	movs	r1, #1
 800312c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003130:	f7fd fdfa 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD311, 0x13);
 8003134:	2113      	movs	r1, #19
 8003136:	f24d 3011 	movw	r0, #54033	; 0xd311
 800313a:	f7fd fdf5 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD312, 0x01);
 800313e:	2101      	movs	r1, #1
 8003140:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003144:	f7fd fdf0 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD313, 0x54);
 8003148:	2154      	movs	r1, #84	; 0x54
 800314a:	f24d 3013 	movw	r0, #54035	; 0xd313
 800314e:	f7fd fdeb 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD314, 0x01);
 8003152:	2101      	movs	r1, #1
 8003154:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003158:	f7fd fde6 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD315, 0x82);
 800315c:	2182      	movs	r1, #130	; 0x82
 800315e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003162:	f7fd fde1 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD316, 0x01);
 8003166:	2101      	movs	r1, #1
 8003168:	f24d 3016 	movw	r0, #54038	; 0xd316
 800316c:	f7fd fddc 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD317, 0xCA);
 8003170:	21ca      	movs	r1, #202	; 0xca
 8003172:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003176:	f7fd fdd7 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD318, 0x02);
 800317a:	2102      	movs	r1, #2
 800317c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003180:	f7fd fdd2 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD319, 0x00);
 8003184:	2100      	movs	r1, #0
 8003186:	f24d 3019 	movw	r0, #54041	; 0xd319
 800318a:	f7fd fdcd 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD31A, 0x02);
 800318e:	2102      	movs	r1, #2
 8003190:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003194:	f7fd fdc8 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD31B, 0x01);
 8003198:	2101      	movs	r1, #1
 800319a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800319e:	f7fd fdc3 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD31C, 0x02);
 80031a2:	2102      	movs	r1, #2
 80031a4:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80031a8:	f7fd fdbe 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD31D, 0x34);
 80031ac:	2134      	movs	r1, #52	; 0x34
 80031ae:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80031b2:	f7fd fdb9 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD31E, 0x02);
 80031b6:	2102      	movs	r1, #2
 80031b8:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80031bc:	f7fd fdb4 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD31F, 0x67);
 80031c0:	2167      	movs	r1, #103	; 0x67
 80031c2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80031c6:	f7fd fdaf 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD320, 0x02);
 80031ca:	2102      	movs	r1, #2
 80031cc:	f24d 3020 	movw	r0, #54048	; 0xd320
 80031d0:	f7fd fdaa 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD321, 0x84);
 80031d4:	2184      	movs	r1, #132	; 0x84
 80031d6:	f24d 3021 	movw	r0, #54049	; 0xd321
 80031da:	f7fd fda5 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD322, 0x02);
 80031de:	2102      	movs	r1, #2
 80031e0:	f24d 3022 	movw	r0, #54050	; 0xd322
 80031e4:	f7fd fda0 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD323, 0xA4);
 80031e8:	21a4      	movs	r1, #164	; 0xa4
 80031ea:	f24d 3023 	movw	r0, #54051	; 0xd323
 80031ee:	f7fd fd9b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD324, 0x02);
 80031f2:	2102      	movs	r1, #2
 80031f4:	f24d 3024 	movw	r0, #54052	; 0xd324
 80031f8:	f7fd fd96 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD325, 0xB7);
 80031fc:	21b7      	movs	r1, #183	; 0xb7
 80031fe:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003202:	f7fd fd91 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD326, 0x02);
 8003206:	2102      	movs	r1, #2
 8003208:	f24d 3026 	movw	r0, #54054	; 0xd326
 800320c:	f7fd fd8c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD327, 0xCF);
 8003210:	21cf      	movs	r1, #207	; 0xcf
 8003212:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003216:	f7fd fd87 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD328, 0x02);
 800321a:	2102      	movs	r1, #2
 800321c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003220:	f7fd fd82 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD329, 0xDE);
 8003224:	21de      	movs	r1, #222	; 0xde
 8003226:	f24d 3029 	movw	r0, #54057	; 0xd329
 800322a:	f7fd fd7d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD32A, 0x02);
 800322e:	2102      	movs	r1, #2
 8003230:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003234:	f7fd fd78 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD32B, 0xF2);
 8003238:	21f2      	movs	r1, #242	; 0xf2
 800323a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 800323e:	f7fd fd73 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD32C, 0x02);
 8003242:	2102      	movs	r1, #2
 8003244:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003248:	f7fd fd6e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD32D, 0xFE);
 800324c:	21fe      	movs	r1, #254	; 0xfe
 800324e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003252:	f7fd fd69 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD32E, 0x03);
 8003256:	2103      	movs	r1, #3
 8003258:	f24d 302e 	movw	r0, #54062	; 0xd32e
 800325c:	f7fd fd64 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD32F, 0x10);
 8003260:	2110      	movs	r1, #16
 8003262:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003266:	f7fd fd5f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD330, 0x03);
 800326a:	2103      	movs	r1, #3
 800326c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003270:	f7fd fd5a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD331, 0x33);
 8003274:	2133      	movs	r1, #51	; 0x33
 8003276:	f24d 3031 	movw	r0, #54065	; 0xd331
 800327a:	f7fd fd55 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD332, 0x03);
 800327e:	2103      	movs	r1, #3
 8003280:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003284:	f7fd fd50 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD333, 0x6D);
 8003288:	216d      	movs	r1, #109	; 0x6d
 800328a:	f24d 3033 	movw	r0, #54067	; 0xd333
 800328e:	f7fd fd4b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD400, 0x00);
 8003292:	2100      	movs	r1, #0
 8003294:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003298:	f7fd fd46 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD401, 0x33);
 800329c:	2133      	movs	r1, #51	; 0x33
 800329e:	f24d 4001 	movw	r0, #54273	; 0xd401
 80032a2:	f7fd fd41 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD402, 0x00);
 80032a6:	2100      	movs	r1, #0
 80032a8:	f24d 4002 	movw	r0, #54274	; 0xd402
 80032ac:	f7fd fd3c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD403, 0x34);
 80032b0:	2134      	movs	r1, #52	; 0x34
 80032b2:	f24d 4003 	movw	r0, #54275	; 0xd403
 80032b6:	f7fd fd37 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD404, 0x00);
 80032ba:	2100      	movs	r1, #0
 80032bc:	f24d 4004 	movw	r0, #54276	; 0xd404
 80032c0:	f7fd fd32 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD405, 0x3A);
 80032c4:	213a      	movs	r1, #58	; 0x3a
 80032c6:	f24d 4005 	movw	r0, #54277	; 0xd405
 80032ca:	f7fd fd2d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD406, 0x00);
 80032ce:	2100      	movs	r1, #0
 80032d0:	f24d 4006 	movw	r0, #54278	; 0xd406
 80032d4:	f7fd fd28 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD407, 0x4A);
 80032d8:	214a      	movs	r1, #74	; 0x4a
 80032da:	f24d 4007 	movw	r0, #54279	; 0xd407
 80032de:	f7fd fd23 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD408, 0x00);
 80032e2:	2100      	movs	r1, #0
 80032e4:	f24d 4008 	movw	r0, #54280	; 0xd408
 80032e8:	f7fd fd1e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD409, 0x5C);
 80032ec:	215c      	movs	r1, #92	; 0x5c
 80032ee:	f24d 4009 	movw	r0, #54281	; 0xd409
 80032f2:	f7fd fd19 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD40A, 0x00);
 80032f6:	2100      	movs	r1, #0
 80032f8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80032fc:	f7fd fd14 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD40B, 0x81);
 8003300:	2181      	movs	r1, #129	; 0x81
 8003302:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003306:	f7fd fd0f 	bl	8000d28 <LCD_WriteReg>

        LCD_WriteReg(0xD40C, 0x00);
 800330a:	2100      	movs	r1, #0
 800330c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003310:	f7fd fd0a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD40D, 0xA6);
 8003314:	21a6      	movs	r1, #166	; 0xa6
 8003316:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800331a:	f7fd fd05 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD40E, 0x00);
 800331e:	2100      	movs	r1, #0
 8003320:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003324:	f7fd fd00 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD40F, 0xE5);
 8003328:	21e5      	movs	r1, #229	; 0xe5
 800332a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800332e:	f7fd fcfb 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD410, 0x01);
 8003332:	2101      	movs	r1, #1
 8003334:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003338:	f7fd fcf6 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD411, 0x13);
 800333c:	2113      	movs	r1, #19
 800333e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003342:	f7fd fcf1 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD412, 0x01);
 8003346:	2101      	movs	r1, #1
 8003348:	f24d 4012 	movw	r0, #54290	; 0xd412
 800334c:	f7fd fcec 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD413, 0x54);
 8003350:	2154      	movs	r1, #84	; 0x54
 8003352:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003356:	f7fd fce7 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD414, 0x01);
 800335a:	2101      	movs	r1, #1
 800335c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003360:	f7fd fce2 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD415, 0x82);
 8003364:	2182      	movs	r1, #130	; 0x82
 8003366:	f24d 4015 	movw	r0, #54293	; 0xd415
 800336a:	f7fd fcdd 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD416, 0x01);
 800336e:	2101      	movs	r1, #1
 8003370:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003374:	f7fd fcd8 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD417, 0xCA);
 8003378:	21ca      	movs	r1, #202	; 0xca
 800337a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800337e:	f7fd fcd3 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD418, 0x02);
 8003382:	2102      	movs	r1, #2
 8003384:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003388:	f7fd fcce 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD419, 0x00);
 800338c:	2100      	movs	r1, #0
 800338e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003392:	f7fd fcc9 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD41A, 0x02);
 8003396:	2102      	movs	r1, #2
 8003398:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800339c:	f7fd fcc4 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD41B, 0x01);
 80033a0:	2101      	movs	r1, #1
 80033a2:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80033a6:	f7fd fcbf 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD41C, 0x02);
 80033aa:	2102      	movs	r1, #2
 80033ac:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80033b0:	f7fd fcba 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD41D, 0x34);
 80033b4:	2134      	movs	r1, #52	; 0x34
 80033b6:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80033ba:	f7fd fcb5 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD41E, 0x02);
 80033be:	2102      	movs	r1, #2
 80033c0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80033c4:	f7fd fcb0 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD41F, 0x67);
 80033c8:	2167      	movs	r1, #103	; 0x67
 80033ca:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80033ce:	f7fd fcab 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD420, 0x02);
 80033d2:	2102      	movs	r1, #2
 80033d4:	f24d 4020 	movw	r0, #54304	; 0xd420
 80033d8:	f7fd fca6 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD421, 0x84);
 80033dc:	2184      	movs	r1, #132	; 0x84
 80033de:	f24d 4021 	movw	r0, #54305	; 0xd421
 80033e2:	f7fd fca1 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD422, 0x02);
 80033e6:	2102      	movs	r1, #2
 80033e8:	f24d 4022 	movw	r0, #54306	; 0xd422
 80033ec:	f7fd fc9c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD423, 0xA4);
 80033f0:	21a4      	movs	r1, #164	; 0xa4
 80033f2:	f24d 4023 	movw	r0, #54307	; 0xd423
 80033f6:	f7fd fc97 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD424, 0x02);
 80033fa:	2102      	movs	r1, #2
 80033fc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003400:	f7fd fc92 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD425, 0xB7);
 8003404:	21b7      	movs	r1, #183	; 0xb7
 8003406:	f24d 4025 	movw	r0, #54309	; 0xd425
 800340a:	f7fd fc8d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD426, 0x02);
 800340e:	2102      	movs	r1, #2
 8003410:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003414:	f7fd fc88 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD427, 0xCF);
 8003418:	21cf      	movs	r1, #207	; 0xcf
 800341a:	f24d 4027 	movw	r0, #54311	; 0xd427
 800341e:	f7fd fc83 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD428, 0x02);
 8003422:	2102      	movs	r1, #2
 8003424:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003428:	f7fd fc7e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD429, 0xDE);
 800342c:	21de      	movs	r1, #222	; 0xde
 800342e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003432:	f7fd fc79 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD42A, 0x02);
 8003436:	2102      	movs	r1, #2
 8003438:	f24d 402a 	movw	r0, #54314	; 0xd42a
 800343c:	f7fd fc74 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD42B, 0xF2);
 8003440:	21f2      	movs	r1, #242	; 0xf2
 8003442:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003446:	f7fd fc6f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD42C, 0x02);
 800344a:	2102      	movs	r1, #2
 800344c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003450:	f7fd fc6a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD42D, 0xFE);
 8003454:	21fe      	movs	r1, #254	; 0xfe
 8003456:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800345a:	f7fd fc65 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD42E, 0x03);
 800345e:	2103      	movs	r1, #3
 8003460:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003464:	f7fd fc60 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD42F, 0x10);
 8003468:	2110      	movs	r1, #16
 800346a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800346e:	f7fd fc5b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD430, 0x03);
 8003472:	2103      	movs	r1, #3
 8003474:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003478:	f7fd fc56 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD431, 0x33);
 800347c:	2133      	movs	r1, #51	; 0x33
 800347e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003482:	f7fd fc51 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD432, 0x03);
 8003486:	2103      	movs	r1, #3
 8003488:	f24d 4032 	movw	r0, #54322	; 0xd432
 800348c:	f7fd fc4c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD433, 0x6D);
 8003490:	216d      	movs	r1, #109	; 0x6d
 8003492:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003496:	f7fd fc47 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD500, 0x00);
 800349a:	2100      	movs	r1, #0
 800349c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80034a0:	f7fd fc42 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD501, 0x33);
 80034a4:	2133      	movs	r1, #51	; 0x33
 80034a6:	f24d 5001 	movw	r0, #54529	; 0xd501
 80034aa:	f7fd fc3d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD502, 0x00);
 80034ae:	2100      	movs	r1, #0
 80034b0:	f24d 5002 	movw	r0, #54530	; 0xd502
 80034b4:	f7fd fc38 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD503, 0x34);
 80034b8:	2134      	movs	r1, #52	; 0x34
 80034ba:	f24d 5003 	movw	r0, #54531	; 0xd503
 80034be:	f7fd fc33 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD504, 0x00);
 80034c2:	2100      	movs	r1, #0
 80034c4:	f24d 5004 	movw	r0, #54532	; 0xd504
 80034c8:	f7fd fc2e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD505, 0x3A);
 80034cc:	213a      	movs	r1, #58	; 0x3a
 80034ce:	f24d 5005 	movw	r0, #54533	; 0xd505
 80034d2:	f7fd fc29 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD506, 0x00);
 80034d6:	2100      	movs	r1, #0
 80034d8:	f24d 5006 	movw	r0, #54534	; 0xd506
 80034dc:	f7fd fc24 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD507, 0x4A);
 80034e0:	214a      	movs	r1, #74	; 0x4a
 80034e2:	f24d 5007 	movw	r0, #54535	; 0xd507
 80034e6:	f7fd fc1f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD508, 0x00);
 80034ea:	2100      	movs	r1, #0
 80034ec:	f24d 5008 	movw	r0, #54536	; 0xd508
 80034f0:	f7fd fc1a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD509, 0x5C);
 80034f4:	215c      	movs	r1, #92	; 0x5c
 80034f6:	f24d 5009 	movw	r0, #54537	; 0xd509
 80034fa:	f7fd fc15 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD50A, 0x00);
 80034fe:	2100      	movs	r1, #0
 8003500:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003504:	f7fd fc10 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD50B, 0x81);
 8003508:	2181      	movs	r1, #129	; 0x81
 800350a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 800350e:	f7fd fc0b 	bl	8000d28 <LCD_WriteReg>

        LCD_WriteReg(0xD50C, 0x00);
 8003512:	2100      	movs	r1, #0
 8003514:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003518:	f7fd fc06 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD50D, 0xA6);
 800351c:	21a6      	movs	r1, #166	; 0xa6
 800351e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003522:	f7fd fc01 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD50E, 0x00);
 8003526:	2100      	movs	r1, #0
 8003528:	f24d 500e 	movw	r0, #54542	; 0xd50e
 800352c:	f7fd fbfc 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD50F, 0xE5);
 8003530:	21e5      	movs	r1, #229	; 0xe5
 8003532:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003536:	f7fd fbf7 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD510, 0x01);
 800353a:	2101      	movs	r1, #1
 800353c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003540:	f7fd fbf2 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD511, 0x13);
 8003544:	2113      	movs	r1, #19
 8003546:	f24d 5011 	movw	r0, #54545	; 0xd511
 800354a:	f7fd fbed 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD512, 0x01);
 800354e:	2101      	movs	r1, #1
 8003550:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003554:	f7fd fbe8 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD513, 0x54);
 8003558:	2154      	movs	r1, #84	; 0x54
 800355a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800355e:	f7fd fbe3 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD514, 0x01);
 8003562:	2101      	movs	r1, #1
 8003564:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003568:	f7fd fbde 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD515, 0x82);
 800356c:	2182      	movs	r1, #130	; 0x82
 800356e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003572:	f7fd fbd9 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD516, 0x01);
 8003576:	2101      	movs	r1, #1
 8003578:	f24d 5016 	movw	r0, #54550	; 0xd516
 800357c:	f7fd fbd4 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD517, 0xCA);
 8003580:	21ca      	movs	r1, #202	; 0xca
 8003582:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003586:	f7fd fbcf 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD518, 0x02);
 800358a:	2102      	movs	r1, #2
 800358c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003590:	f7fd fbca 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD519, 0x00);
 8003594:	2100      	movs	r1, #0
 8003596:	f24d 5019 	movw	r0, #54553	; 0xd519
 800359a:	f7fd fbc5 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD51A, 0x02);
 800359e:	2102      	movs	r1, #2
 80035a0:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80035a4:	f7fd fbc0 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD51B, 0x01);
 80035a8:	2101      	movs	r1, #1
 80035aa:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80035ae:	f7fd fbbb 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD51C, 0x02);
 80035b2:	2102      	movs	r1, #2
 80035b4:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80035b8:	f7fd fbb6 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD51D, 0x34);
 80035bc:	2134      	movs	r1, #52	; 0x34
 80035be:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80035c2:	f7fd fbb1 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD51E, 0x02);
 80035c6:	2102      	movs	r1, #2
 80035c8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80035cc:	f7fd fbac 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD51F, 0x67);
 80035d0:	2167      	movs	r1, #103	; 0x67
 80035d2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80035d6:	f7fd fba7 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD520, 0x02);
 80035da:	2102      	movs	r1, #2
 80035dc:	f24d 5020 	movw	r0, #54560	; 0xd520
 80035e0:	f7fd fba2 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD521, 0x84);
 80035e4:	2184      	movs	r1, #132	; 0x84
 80035e6:	f24d 5021 	movw	r0, #54561	; 0xd521
 80035ea:	f7fd fb9d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD522, 0x02);
 80035ee:	2102      	movs	r1, #2
 80035f0:	f24d 5022 	movw	r0, #54562	; 0xd522
 80035f4:	f7fd fb98 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD523, 0xA4);
 80035f8:	21a4      	movs	r1, #164	; 0xa4
 80035fa:	f24d 5023 	movw	r0, #54563	; 0xd523
 80035fe:	f7fd fb93 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD524, 0x02);
 8003602:	2102      	movs	r1, #2
 8003604:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003608:	f7fd fb8e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD525, 0xB7);
 800360c:	21b7      	movs	r1, #183	; 0xb7
 800360e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003612:	f7fd fb89 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD526, 0x02);
 8003616:	2102      	movs	r1, #2
 8003618:	f24d 5026 	movw	r0, #54566	; 0xd526
 800361c:	f7fd fb84 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD527, 0xCF);
 8003620:	21cf      	movs	r1, #207	; 0xcf
 8003622:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003626:	f7fd fb7f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD528, 0x02);
 800362a:	2102      	movs	r1, #2
 800362c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003630:	f7fd fb7a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD529, 0xDE);
 8003634:	21de      	movs	r1, #222	; 0xde
 8003636:	f24d 5029 	movw	r0, #54569	; 0xd529
 800363a:	f7fd fb75 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD52A, 0x02);
 800363e:	2102      	movs	r1, #2
 8003640:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003644:	f7fd fb70 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD52B, 0xF2);
 8003648:	21f2      	movs	r1, #242	; 0xf2
 800364a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800364e:	f7fd fb6b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD52C, 0x02);
 8003652:	2102      	movs	r1, #2
 8003654:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003658:	f7fd fb66 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD52D, 0xFE);
 800365c:	21fe      	movs	r1, #254	; 0xfe
 800365e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003662:	f7fd fb61 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD52E, 0x03);
 8003666:	2103      	movs	r1, #3
 8003668:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800366c:	f7fd fb5c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD52F, 0x10);
 8003670:	2110      	movs	r1, #16
 8003672:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003676:	f7fd fb57 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD530, 0x03);
 800367a:	2103      	movs	r1, #3
 800367c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003680:	f7fd fb52 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD531, 0x33);
 8003684:	2133      	movs	r1, #51	; 0x33
 8003686:	f24d 5031 	movw	r0, #54577	; 0xd531
 800368a:	f7fd fb4d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD532, 0x03);
 800368e:	2103      	movs	r1, #3
 8003690:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003694:	f7fd fb48 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD533, 0x6D);
 8003698:	216d      	movs	r1, #109	; 0x6d
 800369a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800369e:	f7fd fb43 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD600, 0x00);
 80036a2:	2100      	movs	r1, #0
 80036a4:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80036a8:	f7fd fb3e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD601, 0x33);
 80036ac:	2133      	movs	r1, #51	; 0x33
 80036ae:	f24d 6001 	movw	r0, #54785	; 0xd601
 80036b2:	f7fd fb39 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD602, 0x00);
 80036b6:	2100      	movs	r1, #0
 80036b8:	f24d 6002 	movw	r0, #54786	; 0xd602
 80036bc:	f7fd fb34 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD603, 0x34);
 80036c0:	2134      	movs	r1, #52	; 0x34
 80036c2:	f24d 6003 	movw	r0, #54787	; 0xd603
 80036c6:	f7fd fb2f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD604, 0x00);
 80036ca:	2100      	movs	r1, #0
 80036cc:	f24d 6004 	movw	r0, #54788	; 0xd604
 80036d0:	f7fd fb2a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD605, 0x3A);
 80036d4:	213a      	movs	r1, #58	; 0x3a
 80036d6:	f24d 6005 	movw	r0, #54789	; 0xd605
 80036da:	f7fd fb25 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD606, 0x00);
 80036de:	2100      	movs	r1, #0
 80036e0:	f24d 6006 	movw	r0, #54790	; 0xd606
 80036e4:	f7fd fb20 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD607, 0x4A);
 80036e8:	214a      	movs	r1, #74	; 0x4a
 80036ea:	f24d 6007 	movw	r0, #54791	; 0xd607
 80036ee:	f7fd fb1b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD608, 0x00);
 80036f2:	2100      	movs	r1, #0
 80036f4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80036f8:	f7fd fb16 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD609, 0x5C);
 80036fc:	215c      	movs	r1, #92	; 0x5c
 80036fe:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003702:	f7fd fb11 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD60A, 0x00);
 8003706:	2100      	movs	r1, #0
 8003708:	f24d 600a 	movw	r0, #54794	; 0xd60a
 800370c:	f7fd fb0c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD60B, 0x81);
 8003710:	2181      	movs	r1, #129	; 0x81
 8003712:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003716:	f7fd fb07 	bl	8000d28 <LCD_WriteReg>

        LCD_WriteReg(0xD60C, 0x00);
 800371a:	2100      	movs	r1, #0
 800371c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003720:	f7fd fb02 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD60D, 0xA6);
 8003724:	21a6      	movs	r1, #166	; 0xa6
 8003726:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800372a:	f7fd fafd 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD60E, 0x00);
 800372e:	2100      	movs	r1, #0
 8003730:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003734:	f7fd faf8 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD60F, 0xE5);
 8003738:	21e5      	movs	r1, #229	; 0xe5
 800373a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800373e:	f7fd faf3 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD610, 0x01);
 8003742:	2101      	movs	r1, #1
 8003744:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003748:	f7fd faee 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD611, 0x13);
 800374c:	2113      	movs	r1, #19
 800374e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003752:	f7fd fae9 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD612, 0x01);
 8003756:	2101      	movs	r1, #1
 8003758:	f24d 6012 	movw	r0, #54802	; 0xd612
 800375c:	f7fd fae4 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD613, 0x54);
 8003760:	2154      	movs	r1, #84	; 0x54
 8003762:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003766:	f7fd fadf 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD614, 0x01);
 800376a:	2101      	movs	r1, #1
 800376c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003770:	f7fd fada 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD615, 0x82);
 8003774:	2182      	movs	r1, #130	; 0x82
 8003776:	f24d 6015 	movw	r0, #54805	; 0xd615
 800377a:	f7fd fad5 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD616, 0x01);
 800377e:	2101      	movs	r1, #1
 8003780:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003784:	f7fd fad0 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD617, 0xCA);
 8003788:	21ca      	movs	r1, #202	; 0xca
 800378a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800378e:	f7fd facb 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD618, 0x02);
 8003792:	2102      	movs	r1, #2
 8003794:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003798:	f7fd fac6 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD619, 0x00);
 800379c:	2100      	movs	r1, #0
 800379e:	f24d 6019 	movw	r0, #54809	; 0xd619
 80037a2:	f7fd fac1 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD61A, 0x02);
 80037a6:	2102      	movs	r1, #2
 80037a8:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80037ac:	f7fd fabc 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD61B, 0x01);
 80037b0:	2101      	movs	r1, #1
 80037b2:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80037b6:	f7fd fab7 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD61C, 0x02);
 80037ba:	2102      	movs	r1, #2
 80037bc:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80037c0:	f7fd fab2 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD61D, 0x34);
 80037c4:	2134      	movs	r1, #52	; 0x34
 80037c6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80037ca:	f7fd faad 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD61E, 0x02);
 80037ce:	2102      	movs	r1, #2
 80037d0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80037d4:	f7fd faa8 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD61F, 0x67);
 80037d8:	2167      	movs	r1, #103	; 0x67
 80037da:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80037de:	f7fd faa3 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD620, 0x02);
 80037e2:	2102      	movs	r1, #2
 80037e4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80037e8:	f7fd fa9e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD621, 0x84);
 80037ec:	2184      	movs	r1, #132	; 0x84
 80037ee:	f24d 6021 	movw	r0, #54817	; 0xd621
 80037f2:	f7fd fa99 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD622, 0x02);
 80037f6:	2102      	movs	r1, #2
 80037f8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80037fc:	f7fd fa94 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD623, 0xA4);
 8003800:	21a4      	movs	r1, #164	; 0xa4
 8003802:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003806:	f7fd fa8f 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD624, 0x02);
 800380a:	2102      	movs	r1, #2
 800380c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003810:	f7fd fa8a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD625, 0xB7);
 8003814:	21b7      	movs	r1, #183	; 0xb7
 8003816:	f24d 6025 	movw	r0, #54821	; 0xd625
 800381a:	f7fd fa85 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD626, 0x02);
 800381e:	2102      	movs	r1, #2
 8003820:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003824:	f7fd fa80 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD627, 0xCF);
 8003828:	21cf      	movs	r1, #207	; 0xcf
 800382a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800382e:	f7fd fa7b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD628, 0x02);
 8003832:	2102      	movs	r1, #2
 8003834:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003838:	f7fd fa76 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD629, 0xDE);
 800383c:	21de      	movs	r1, #222	; 0xde
 800383e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003842:	f7fd fa71 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD62A, 0x02);
 8003846:	2102      	movs	r1, #2
 8003848:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800384c:	f7fd fa6c 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD62B, 0xF2);
 8003850:	21f2      	movs	r1, #242	; 0xf2
 8003852:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003856:	f7fd fa67 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD62C, 0x02);
 800385a:	2102      	movs	r1, #2
 800385c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003860:	f7fd fa62 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD62D, 0xFE);
 8003864:	21fe      	movs	r1, #254	; 0xfe
 8003866:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800386a:	f7fd fa5d 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD62E, 0x03);
 800386e:	2103      	movs	r1, #3
 8003870:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003874:	f7fd fa58 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD62F, 0x10);
 8003878:	2110      	movs	r1, #16
 800387a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800387e:	f7fd fa53 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD630, 0x03);
 8003882:	2103      	movs	r1, #3
 8003884:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003888:	f7fd fa4e 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD631, 0x33);
 800388c:	2133      	movs	r1, #51	; 0x33
 800388e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003892:	f7fd fa49 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD632, 0x03);
 8003896:	2103      	movs	r1, #3
 8003898:	f24d 6032 	movw	r0, #54834	; 0xd632
 800389c:	f7fd fa44 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xD633, 0x6D);
 80038a0:	216d      	movs	r1, #109	; 0x6d
 80038a2:	f24d 6033 	movw	r0, #54835	; 0xd633
 80038a6:	f7fd fa3f 	bl	8000d28 <LCD_WriteReg>
        //LV2 Page 0 enable
        LCD_WriteReg(0xF000, 0x55);
 80038aa:	2155      	movs	r1, #85	; 0x55
 80038ac:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80038b0:	f7fd fa3a 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xF001, 0xAA);
 80038b4:	21aa      	movs	r1, #170	; 0xaa
 80038b6:	f24f 0001 	movw	r0, #61441	; 0xf001
 80038ba:	f7fd fa35 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xF002, 0x52);
 80038be:	2152      	movs	r1, #82	; 0x52
 80038c0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80038c4:	f7fd fa30 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xF003, 0x08);
 80038c8:	2108      	movs	r1, #8
 80038ca:	f24f 0003 	movw	r0, #61443	; 0xf003
 80038ce:	f7fd fa2b 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xF004, 0x00);
 80038d2:	2100      	movs	r1, #0
 80038d4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80038d8:	f7fd fa26 	bl	8000d28 <LCD_WriteReg>
        //Display control
        LCD_WriteReg(0xB100, 0xCC);
 80038dc:	21cc      	movs	r1, #204	; 0xcc
 80038de:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80038e2:	f7fd fa21 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x00);
 80038e6:	2100      	movs	r1, #0
 80038e8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80038ec:	f7fd fa1c 	bl	8000d28 <LCD_WriteReg>
        //Source hold time
        LCD_WriteReg(0xB600, 0x05);
 80038f0:	2105      	movs	r1, #5
 80038f2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80038f6:	f7fd fa17 	bl	8000d28 <LCD_WriteReg>
        //Gate EQ control
        LCD_WriteReg(0xB700, 0x70);
 80038fa:	2170      	movs	r1, #112	; 0x70
 80038fc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003900:	f7fd fa12 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB701, 0x70);
 8003904:	2170      	movs	r1, #112	; 0x70
 8003906:	f24b 7001 	movw	r0, #46849	; 0xb701
 800390a:	f7fd fa0d 	bl	8000d28 <LCD_WriteReg>
        //Source EQ control (Mode 2)
        LCD_WriteReg(0xB800, 0x01);
 800390e:	2101      	movs	r1, #1
 8003910:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003914:	f7fd fa08 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB801, 0x03);
 8003918:	2103      	movs	r1, #3
 800391a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800391e:	f7fd fa03 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB802, 0x03);
 8003922:	2103      	movs	r1, #3
 8003924:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003928:	f7fd f9fe 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xB803, 0x03);
 800392c:	2103      	movs	r1, #3
 800392e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003932:	f7fd f9f9 	bl	8000d28 <LCD_WriteReg>
        //Inversion mode (2-dot)
        LCD_WriteReg(0xBC00, 0x02);
 8003936:	2102      	movs	r1, #2
 8003938:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800393c:	f7fd f9f4 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xBC01, 0x00);
 8003940:	2100      	movs	r1, #0
 8003942:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003946:	f7fd f9ef 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xBC02, 0x00);
 800394a:	2100      	movs	r1, #0
 800394c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003950:	f7fd f9ea 	bl	8000d28 <LCD_WriteReg>
        //Timing control 4H w/ 4-delay
        LCD_WriteReg(0xC900, 0xD0);
 8003954:	21d0      	movs	r1, #208	; 0xd0
 8003956:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800395a:	f7fd f9e5 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xC901, 0x02);
 800395e:	2102      	movs	r1, #2
 8003960:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003964:	f7fd f9e0 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xC902, 0x50);
 8003968:	2150      	movs	r1, #80	; 0x50
 800396a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800396e:	f7fd f9db 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xC903, 0x50);
 8003972:	2150      	movs	r1, #80	; 0x50
 8003974:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003978:	f7fd f9d6 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0xC904, 0x50);
 800397c:	2150      	movs	r1, #80	; 0x50
 800397e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003982:	f7fd f9d1 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0x3500, 0x00);
 8003986:	2100      	movs	r1, #0
 8003988:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800398c:	f7fd f9cc 	bl	8000d28 <LCD_WriteReg>
        LCD_WriteReg(0x3A00, 0x55); //16-bit/pixel
 8003990:	2155      	movs	r1, #85	; 0x55
 8003992:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003996:	f7fd f9c7 	bl	8000d28 <LCD_WriteReg>
        LCD_WR_REG(0x1100);
 800399a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800399e:	f7fd f98b 	bl	8000cb8 <LCD_WR_REG>
        delay_us(120);
 80039a2:	2078      	movs	r0, #120	; 0x78
 80039a4:	f000 ff08 	bl	80047b8 <delay_us>
        LCD_WR_REG(0x2900);
 80039a8:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80039ac:	f7fd f984 	bl	8000cb8 <LCD_WR_REG>
 80039b0:	e0be      	b.n	8003b30 <LCD_Init+0x25c0>
    }
    else if (lcddev.id == 0X1963)
 80039b2:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <LCD_Init+0x25dc>)
 80039b4:	889b      	ldrh	r3, [r3, #4]
 80039b6:	f641 1263 	movw	r2, #6499	; 0x1963
 80039ba:	4293      	cmp	r3, r2
 80039bc:	f040 80b8 	bne.w	8003b30 <LCD_Init+0x25c0>
    {
        LCD_WR_REG(0xE2);       //Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80039c0:	20e2      	movs	r0, #226	; 0xe2
 80039c2:	f7fd f979 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x1D);      //参数1
 80039c6:	201d      	movs	r0, #29
 80039c8:	f7fd f98a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);      //参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80039cc:	2002      	movs	r0, #2
 80039ce:	f7fd f987 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);      //参数3 Validate M and N values
 80039d2:	2004      	movs	r0, #4
 80039d4:	f7fd f984 	bl	8000ce0 <LCD_WR_DATA>
        delay_us(100);
 80039d8:	2064      	movs	r0, #100	; 0x64
 80039da:	f000 feed 	bl	80047b8 <delay_us>
        LCD_WR_REG(0xE0);       // Start PLL command
 80039de:	20e0      	movs	r0, #224	; 0xe0
 80039e0:	f7fd f96a 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x01);      // enable PLL
 80039e4:	2001      	movs	r0, #1
 80039e6:	f7fd f97b 	bl	8000ce0 <LCD_WR_DATA>
        delay_ms(10);
 80039ea:	200a      	movs	r0, #10
 80039ec:	f000 ff24 	bl	8004838 <delay_ms>
        LCD_WR_REG(0xE0);       // Start PLL command again
 80039f0:	20e0      	movs	r0, #224	; 0xe0
 80039f2:	f7fd f961 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x03);      // now, use PLL output as system clock
 80039f6:	2003      	movs	r0, #3
 80039f8:	f7fd f972 	bl	8000ce0 <LCD_WR_DATA>
        delay_ms(12);
 80039fc:	200c      	movs	r0, #12
 80039fe:	f000 ff1b 	bl	8004838 <delay_ms>
        LCD_WR_REG(0x01);       //软复位
 8003a02:	2001      	movs	r0, #1
 8003a04:	f7fd f958 	bl	8000cb8 <LCD_WR_REG>
        delay_ms(10);
 8003a08:	200a      	movs	r0, #10
 8003a0a:	f000 ff15 	bl	8004838 <delay_ms>

        LCD_WR_REG(0xE6);       //设置像素频率,33Mhz
 8003a0e:	20e6      	movs	r0, #230	; 0xe6
 8003a10:	f7fd f952 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x2F);
 8003a14:	202f      	movs	r0, #47	; 0x2f
 8003a16:	f7fd f963 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 8003a1a:	20ff      	movs	r0, #255	; 0xff
 8003a1c:	f7fd f960 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 8003a20:	20ff      	movs	r0, #255	; 0xff
 8003a22:	f7fd f95d 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB0);       //设置LCD模式
 8003a26:	20b0      	movs	r0, #176	; 0xb0
 8003a28:	f7fd f946 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x20);      //24位模式
 8003a2c:	2020      	movs	r0, #32
 8003a2e:	f7fd f957 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //TFT 模式
 8003a32:	2000      	movs	r0, #0
 8003a34:	f7fd f954 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_DATA((SSD_HOR_RESOLUTION - 1) >> 8); //设置LCD水平像素
 8003a38:	2003      	movs	r0, #3
 8003a3a:	f7fd f951 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_RESOLUTION - 1);
 8003a3e:	f240 301f 	movw	r0, #799	; 0x31f
 8003a42:	f7fd f94d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA((SSD_VER_RESOLUTION - 1) >> 8); //设置LCD垂直像素
 8003a46:	2001      	movs	r0, #1
 8003a48:	f7fd f94a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_RESOLUTION - 1);
 8003a4c:	f240 10df 	movw	r0, #479	; 0x1df
 8003a50:	f7fd f946 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //RGB序列
 8003a54:	2000      	movs	r0, #0
 8003a56:	f7fd f943 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB4);       //Set horizontal period
 8003a5a:	20b4      	movs	r0, #180	; 0xb4
 8003a5c:	f7fd f92c 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA((SSD_HT - 1) >> 8);
 8003a60:	2004      	movs	r0, #4
 8003a62:	f7fd f93d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HT - 1);
 8003a66:	f240 401f 	movw	r0, #1055	; 0x41f
 8003a6a:	f7fd f939 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS >> 8);
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7fd f936 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS);
 8003a74:	202e      	movs	r0, #46	; 0x2e
 8003a76:	f7fd f933 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_PULSE_WIDTH - 1);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f7fd f930 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a80:	2000      	movs	r0, #0
 8003a82:	f7fd f92d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a86:	2000      	movs	r0, #0
 8003a88:	f7fd f92a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f7fd f927 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xB6);       //Set vertical period
 8003a92:	20b6      	movs	r0, #182	; 0xb6
 8003a94:	f7fd f910 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA((SSD_VT - 1) >> 8);
 8003a98:	2002      	movs	r0, #2
 8003a9a:	f7fd f921 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VT - 1);
 8003a9e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8003aa2:	f7fd f91d 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS >> 8);
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f7fd f91a 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS);
 8003aac:	2017      	movs	r0, #23
 8003aae:	f7fd f917 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_FRONT_PORCH - 1);
 8003ab2:	2015      	movs	r0, #21
 8003ab4:	f7fd f914 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7fd f911 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f7fd f90e 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xF0);       //设置SSD1963与CPU接口为16bit
 8003ac4:	20f0      	movs	r0, #240	; 0xf0
 8003ac6:	f7fd f8f7 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x03);      //16-bit(565 format) data for 16bpp
 8003aca:	2003      	movs	r0, #3
 8003acc:	f7fd f908 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0x29);       //开启显示
 8003ad0:	2029      	movs	r0, #41	; 0x29
 8003ad2:	f7fd f8f1 	bl	8000cb8 <LCD_WR_REG>
        //设置PWM输出  背光通过占空比可调
        LCD_WR_REG(0xD0);       //设置自动白平衡DBC
 8003ad6:	20d0      	movs	r0, #208	; 0xd0
 8003ad8:	f7fd f8ee 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x00);      //disable
 8003adc:	2000      	movs	r0, #0
 8003ade:	f7fd f8ff 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xBE);       //配置PWM输出
 8003ae2:	20be      	movs	r0, #190	; 0xbe
 8003ae4:	f7fd f8e8 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x05);      //1设置PWM频率
 8003ae8:	2005      	movs	r0, #5
 8003aea:	f7fd f8f9 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);      //2设置PWM占空比
 8003aee:	20fe      	movs	r0, #254	; 0xfe
 8003af0:	f7fd f8f6 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);      //3设置C
 8003af4:	2001      	movs	r0, #1
 8003af6:	f7fd f8f3 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //4设置D
 8003afa:	2000      	movs	r0, #0
 8003afc:	f7fd f8f0 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //5设置E
 8003b00:	2000      	movs	r0, #0
 8003b02:	f7fd f8ed 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);      //6设置F
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7fd f8ea 	bl	8000ce0 <LCD_WR_DATA>

        LCD_WR_REG(0xB8);       //设置GPIO配置
 8003b0c:	20b8      	movs	r0, #184	; 0xb8
 8003b0e:	f7fd f8d3 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0x03);      //2个IO口设置成输出
 8003b12:	2003      	movs	r0, #3
 8003b14:	f7fd f8e4 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);      //GPIO使用正常的IO功能
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f7fd f8e1 	bl	8000ce0 <LCD_WR_DATA>
        LCD_WR_REG(0xBA);
 8003b1e:	20ba      	movs	r0, #186	; 0xba
 8003b20:	f7fd f8ca 	bl	8000cb8 <LCD_WR_REG>
        LCD_WR_DATA(0X01);      //GPIO[1:0]=01,控制LCD方向
 8003b24:	2001      	movs	r0, #1
 8003b26:	f7fd f8db 	bl	8000ce0 <LCD_WR_DATA>

        LCD_SSD_BackLightSet(100);//背光设置为最亮
 8003b2a:	2064      	movs	r0, #100	; 0x64
 8003b2c:	f7fd fc34 	bl	8001398 <LCD_SSD_BackLightSet>
    }

    LCD_Display_Dir(0);         //默认为竖屏
 8003b30:	2000      	movs	r0, #0
 8003b32:	f7fd fc65 	bl	8001400 <LCD_Display_Dir>
    LCD_LED = 1;                //点亮背光
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <LCD_Init+0x25e0>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
    LCD_Clear(WHITE);
 8003b3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003b40:	f000 f808 	bl	8003b54 <LCD_Clear>
}  
 8003b44:	bf00      	nop
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000208 	.word	0x20000208
 8003b50:	42218180 	.word	0x42218180

08003b54 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(u16 color)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	80fb      	strh	r3, [r7, #6]
    u32 index = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
    u32 totalpoint = lcddev.width;
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <LCD_Clear+0x54>)
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	60bb      	str	r3, [r7, #8]
    totalpoint *= lcddev.height;    //得到总点数
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <LCD_Clear+0x54>)
 8003b6a:	885b      	ldrh	r3, [r3, #2]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	fb02 f303 	mul.w	r3, r2, r3
 8003b74:	60bb      	str	r3, [r7, #8]

    LCD_SetCursor(0x00, 0x0000);    //设置光标位置
 8003b76:	2100      	movs	r1, #0
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7fd f8f9 	bl	8000d70 <LCD_SetCursor>
    LCD_WriteRAM_Prepare();         //开始写入GRAM
 8003b7e:	f7fd f8e9 	bl	8000d54 <LCD_WriteRAM_Prepare>

    for (index = 0; index < totalpoint; index++)
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	e005      	b.n	8003b94 <LCD_Clear+0x40>
    {
        LCD->LCD_RAM = color;
 8003b88:	4a08      	ldr	r2, [pc, #32]	; (8003bac <LCD_Clear+0x58>)
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3301      	adds	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d3f5      	bcc.n	8003b88 <LCD_Clear+0x34>
    }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000208 	.word	0x20000208
 8003bac:	6c0007fe 	.word	0x6c0007fe

08003bb0 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(u16 x, u16 y, u8 num, u8 size, u8 mode)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	80fb      	strh	r3, [r7, #6]
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	80bb      	strh	r3, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	70fb      	strb	r3, [r7, #3]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	70bb      	strb	r3, [r7, #2]
    u8 temp, t1, t;
    u16 y0 = y;
 8003bce:	88bb      	ldrh	r3, [r7, #4]
 8003bd0:	817b      	strh	r3, [r7, #10]
    u8 csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);  //得到字体一个字符对应点阵集所占的字节数
 8003bd2:	78bb      	ldrb	r3, [r7, #2]
 8003bd4:	08db      	lsrs	r3, r3, #3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	78bb      	ldrb	r3, [r7, #2]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	78ba      	ldrb	r2, [r7, #2]
 8003bf2:	0852      	lsrs	r2, r2, #1
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	727b      	strb	r3, [r7, #9]
    num = num - ' ';    //得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	3b20      	subs	r3, #32
 8003c00:	70fb      	strb	r3, [r7, #3]

    for (t = 0; t < csize; t++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	737b      	strb	r3, [r7, #13]
 8003c06:	e06b      	b.n	8003ce0 <LCD_ShowChar+0x130>
    {
        if (size == 12)temp = asc2_1206[num][t];        //调用1206字体
 8003c08:	78bb      	ldrb	r3, [r7, #2]
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d10b      	bne.n	8003c26 <LCD_ShowChar+0x76>
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	7b79      	ldrb	r1, [r7, #13]
 8003c12:	4839      	ldr	r0, [pc, #228]	; (8003cf8 <LCD_ShowChar+0x148>)
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4403      	add	r3, r0
 8003c1e:	440b      	add	r3, r1
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	e019      	b.n	8003c5a <LCD_ShowChar+0xaa>
        else if (size == 16)temp = asc2_1608[num][t];   //调用1608字体
 8003c26:	78bb      	ldrb	r3, [r7, #2]
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d108      	bne.n	8003c3e <LCD_ShowChar+0x8e>
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	7b7b      	ldrb	r3, [r7, #13]
 8003c30:	4932      	ldr	r1, [pc, #200]	; (8003cfc <LCD_ShowChar+0x14c>)
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	440a      	add	r2, r1
 8003c36:	4413      	add	r3, r2
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e00d      	b.n	8003c5a <LCD_ShowChar+0xaa>
        else if (size == 24)temp = asc2_2412[num][t];   //调用2412字体
 8003c3e:	78bb      	ldrb	r3, [r7, #2]
 8003c40:	2b18      	cmp	r3, #24
 8003c42:	d152      	bne.n	8003cea <LCD_ShowChar+0x13a>
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	7b79      	ldrb	r1, [r7, #13]
 8003c48:	482d      	ldr	r0, [pc, #180]	; (8003d00 <LCD_ShowChar+0x150>)
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4403      	add	r3, r0
 8003c54:	440b      	add	r3, r1
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	73fb      	strb	r3, [r7, #15]
        else return;                                    //没有的字库

        for (t1 = 0; t1 < 8; t1++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73bb      	strb	r3, [r7, #14]
 8003c5e:	e037      	b.n	8003cd0 <LCD_ShowChar+0x120>
        {
            if (temp & 0x80)LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8003c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	da08      	bge.n	8003c7a <LCD_ShowChar+0xca>
 8003c68:	4b26      	ldr	r3, [pc, #152]	; (8003d04 <LCD_ShowChar+0x154>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	88b9      	ldrh	r1, [r7, #4]
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd fad0 	bl	8001218 <LCD_Fast_DrawPoint>
 8003c78:	e00b      	b.n	8003c92 <LCD_ShowChar+0xe2>
            else if (mode == 0)LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8003c7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d107      	bne.n	8003c92 <LCD_ShowChar+0xe2>
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <LCD_ShowChar+0x158>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	88b9      	ldrh	r1, [r7, #4]
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fd fac3 	bl	8001218 <LCD_Fast_DrawPoint>

            temp <<= 1;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
            y++;
 8003c98:	88bb      	ldrh	r3, [r7, #4]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;      //超区域了
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <LCD_ShowChar+0x15c>)
 8003ca0:	885b      	ldrh	r3, [r3, #2]
 8003ca2:	88ba      	ldrh	r2, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d222      	bcs.n	8003cee <LCD_ShowChar+0x13e>

            if ((y - y0) == size)
 8003ca8:	88ba      	ldrh	r2, [r7, #4]
 8003caa:	897b      	ldrh	r3, [r7, #10]
 8003cac:	1ad2      	subs	r2, r2, r3
 8003cae:	78bb      	ldrb	r3, [r7, #2]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d10a      	bne.n	8003cca <LCD_ShowChar+0x11a>
            {
                y = y0;
 8003cb4:	897b      	ldrh	r3, [r7, #10]
 8003cb6:	80bb      	strh	r3, [r7, #4]
                x++;
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   //超区域了
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <LCD_ShowChar+0x15c>)
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d307      	bcc.n	8003cd8 <LCD_ShowChar+0x128>
 8003cc8:	e012      	b.n	8003cf0 <LCD_ShowChar+0x140>
        for (t1 = 0; t1 < 8; t1++)
 8003cca:	7bbb      	ldrb	r3, [r7, #14]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	73bb      	strb	r3, [r7, #14]
 8003cd0:	7bbb      	ldrb	r3, [r7, #14]
 8003cd2:	2b07      	cmp	r3, #7
 8003cd4:	d9c4      	bls.n	8003c60 <LCD_ShowChar+0xb0>
 8003cd6:	e000      	b.n	8003cda <LCD_ShowChar+0x12a>

                break;
 8003cd8:	bf00      	nop
    for (t = 0; t < csize; t++)
 8003cda:	7b7b      	ldrb	r3, [r7, #13]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	737b      	strb	r3, [r7, #13]
 8003ce0:	7b7a      	ldrb	r2, [r7, #13]
 8003ce2:	7a7b      	ldrb	r3, [r7, #9]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d38f      	bcc.n	8003c08 <LCD_ShowChar+0x58>
 8003ce8:	e002      	b.n	8003cf0 <LCD_ShowChar+0x140>
        else return;                                    //没有的字库
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <LCD_ShowChar+0x140>
            if (y >= lcddev.height)return;      //超区域了
 8003cee:	bf00      	nop
            }
        }
    }
}
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd90      	pop	{r4, r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	0800fedc 	.word	0x0800fedc
 8003cfc:	08010350 	.word	0x08010350
 8003d00:	08010940 	.word	0x08010940
 8003d04:	20000000 	.word	0x20000000
 8003d08:	20000004 	.word	0x20000004
 8003d0c:	20000208 	.word	0x20000208

08003d10 <LCD_Pow>:

//m^n函数
//返回值:m^n次方.
u32 LCD_Pow(u8 m, u8 n)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	71fb      	strb	r3, [r7, #7]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71bb      	strb	r3, [r7, #6]
    u32 result = 1;
 8003d20:	2301      	movs	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]

    while (n--)result *= m;
 8003d24:	e004      	b.n	8003d30 <LCD_Pow+0x20>
 8003d26:	79fa      	ldrb	r2, [r7, #7]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	79bb      	ldrb	r3, [r7, #6]
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	71ba      	strb	r2, [r7, #6]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f5      	bne.n	8003d26 <LCD_Pow+0x16>

    return result;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
	...

08003d48 <LCD_ShowNum>:
//len :数字的位数
//size:字体大小
//color:颜色 
//num:数值(0~4294967295);	 
void LCD_ShowNum(u16 x, u16 y, u32 num, u8 len, u8 size)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60ba      	str	r2, [r7, #8]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	81fb      	strh	r3, [r7, #14]
 8003d56:	460b      	mov	r3, r1
 8003d58:	81bb      	strh	r3, [r7, #12]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	71fb      	strb	r3, [r7, #7]
    u8 t, temp;
    u8 enshow = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75bb      	strb	r3, [r7, #22]

    for (t = 0; t < len; t++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]
 8003d66:	e055      	b.n	8003e14 <LCD_ShowNum+0xcc>
    {
        temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 8003d68:	79fa      	ldrb	r2, [r7, #7]
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	4619      	mov	r1, r3
 8003d76:	200a      	movs	r0, #10
 8003d78:	f7ff ffca 	bl	8003d10 <LCD_Pow>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d84:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <LCD_ShowNum+0xe0>)
 8003d86:	fba3 2301 	umull	r2, r3, r3, r1
 8003d8a:	08da      	lsrs	r2, r3, #3
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	1aca      	subs	r2, r1, r3
 8003d96:	4613      	mov	r3, r2
 8003d98:	757b      	strb	r3, [r7, #21]

        if (enshow == 0 && t < (len - 1))
 8003d9a:	7dbb      	ldrb	r3, [r7, #22]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d11f      	bne.n	8003de0 <LCD_ShowNum+0x98>
 8003da0:	7dfa      	ldrb	r2, [r7, #23]
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	429a      	cmp	r2, r3
 8003da8:	da1a      	bge.n	8003de0 <LCD_ShowNum+0x98>
        {
            if (temp == 0)
 8003daa:	7d7b      	ldrb	r3, [r7, #21]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d115      	bne.n	8003ddc <LCD_ShowNum+0x94>
            {
                LCD_ShowChar(x + (size / 2)*t, y, ' ', size, 0);
 8003db0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	7dfa      	ldrb	r2, [r7, #23]
 8003dbc:	b292      	uxth	r2, r2
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	89fb      	ldrh	r3, [r7, #14]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	b298      	uxth	r0, r3
 8003dca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003dce:	89b9      	ldrh	r1, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	9200      	str	r2, [sp, #0]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f7ff feeb 	bl	8003bb0 <LCD_ShowChar>
                continue;
 8003dda:	e018      	b.n	8003e0e <LCD_ShowNum+0xc6>
            }
            else enshow = 1;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	75bb      	strb	r3, [r7, #22]

        }

        LCD_ShowChar(x + (size / 2)*t, y, temp + '0', size, 0);
 8003de0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	7dfa      	ldrb	r2, [r7, #23]
 8003dec:	b292      	uxth	r2, r2
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	89fb      	ldrh	r3, [r7, #14]
 8003df6:	4413      	add	r3, r2
 8003df8:	b298      	uxth	r0, r3
 8003dfa:	7d7b      	ldrb	r3, [r7, #21]
 8003dfc:	3330      	adds	r3, #48	; 0x30
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e04:	89b9      	ldrh	r1, [r7, #12]
 8003e06:	2400      	movs	r4, #0
 8003e08:	9400      	str	r4, [sp, #0]
 8003e0a:	f7ff fed1 	bl	8003bb0 <LCD_ShowChar>
    for (t = 0; t < len; t++)
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	3301      	adds	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
 8003e14:	7dfa      	ldrb	r2, [r7, #23]
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3a5      	bcc.n	8003d68 <LCD_ShowNum+0x20>
    }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd90      	pop	{r4, r7, pc}
 8003e26:	bf00      	nop
 8003e28:	cccccccd 	.word	0xcccccccd

08003e2c <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(u16 x, u16 y, u16 width, u16 height, u8 size, u8 *p)
{
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	4604      	mov	r4, r0
 8003e34:	4608      	mov	r0, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4623      	mov	r3, r4
 8003e3c:	80fb      	strh	r3, [r7, #6]
 8003e3e:	4603      	mov	r3, r0
 8003e40:	80bb      	strh	r3, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	807b      	strh	r3, [r7, #2]
 8003e46:	4613      	mov	r3, r2
 8003e48:	803b      	strh	r3, [r7, #0]
    u8 x0 = x;
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	73fb      	strb	r3, [r7, #15]
    width += x;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	4413      	add	r3, r2
 8003e54:	807b      	strh	r3, [r7, #2]
    height += y;
 8003e56:	883a      	ldrh	r2, [r7, #0]
 8003e58:	88bb      	ldrh	r3, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   //判断是不是非法字符!
 8003e5e:	e024      	b.n	8003eaa <LCD_ShowString+0x7e>
    {
        if (x >= width)
 8003e60:	88fa      	ldrh	r2, [r7, #6]
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d307      	bcc.n	8003e78 <LCD_ShowString+0x4c>
        {
            x = x0;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	80fb      	strh	r3, [r7, #6]
            y += size;
 8003e6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	88bb      	ldrh	r3, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break; //退出
 8003e78:	88ba      	ldrh	r2, [r7, #4]
 8003e7a:	883b      	ldrh	r3, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d21d      	bcs.n	8003ebc <LCD_ShowString+0x90>

        LCD_ShowChar(x, y, *p, size, 0);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	781a      	ldrb	r2, [r3, #0]
 8003e84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e88:	88b9      	ldrh	r1, [r7, #4]
 8003e8a:	88f8      	ldrh	r0, [r7, #6]
 8003e8c:	2400      	movs	r4, #0
 8003e8e:	9400      	str	r4, [sp, #0]
 8003e90:	f7ff fe8e 	bl	8003bb0 <LCD_ShowChar>
        x += size / 2;
 8003e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	80fb      	strh	r3, [r7, #6]
        p++;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   //判断是不是非法字符!
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b7e      	cmp	r3, #126	; 0x7e
 8003eb0:	d805      	bhi.n	8003ebe <LCD_ShowString+0x92>
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b1f      	cmp	r3, #31
 8003eb8:	d8d2      	bhi.n	8003e60 <LCD_ShowString+0x34>
    }
}
 8003eba:	e000      	b.n	8003ebe <LCD_ShowString+0x92>
        if (y >= height)break; //退出
 8003ebc:	bf00      	nop
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd90      	pop	{r4, r7, pc}
	...

08003ec8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003ed8:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <MX_ADC1_Init+0x74>)
 8003eda:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <MX_ADC1_Init+0x78>)
 8003edc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ede:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <MX_ADC1_Init+0x74>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ee4:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <MX_ADC1_Init+0x74>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <MX_ADC1_Init+0x74>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <MX_ADC1_Init+0x74>)
 8003ef2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003ef6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <MX_ADC1_Init+0x74>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <MX_ADC1_Init+0x74>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f04:	480d      	ldr	r0, [pc, #52]	; (8003f3c <MX_ADC1_Init+0x74>)
 8003f06:	f001 fa07 	bl	8005318 <HAL_ADC_Init>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003f10:	f000 fcb0 	bl	8004874 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4805      	ldr	r0, [pc, #20]	; (8003f3c <MX_ADC1_Init+0x74>)
 8003f26:	f001 fca1 	bl	800586c <HAL_ADC_ConfigChannel>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003f30:	f000 fca0 	bl	8004874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000218 	.word	0x20000218
 8003f40:	40012400 	.word	0x40012400

08003f44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4c:	f107 0310 	add.w	r3, r7, #16
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <HAL_ADC_MspInit+0x6c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d121      	bne.n	8003fa8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_ADC_MspInit+0x70>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4a12      	ldr	r2, [pc, #72]	; (8003fb4 <HAL_ADC_MspInit+0x70>)
 8003f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f6e:	6193      	str	r3, [r2, #24]
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_ADC_MspInit+0x70>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7c:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <HAL_ADC_MspInit+0x70>)
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <HAL_ADC_MspInit+0x70>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6193      	str	r3, [r2, #24]
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_ADC_MspInit+0x70>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f94:	2302      	movs	r3, #2
 8003f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9c:	f107 0310 	add.w	r3, r7, #16
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4805      	ldr	r0, [pc, #20]	; (8003fb8 <HAL_ADC_MspInit+0x74>)
 8003fa4:	f002 f818 	bl	8005fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40012400 	.word	0x40012400
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40010800 	.word	0x40010800

08003fbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_ADC */
  Task_ADCHandle = osThreadNew(AppTask_ADC, NULL, &Task_ADC_attributes);
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <MX_FREERTOS_Init+0x28>)
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4808      	ldr	r0, [pc, #32]	; (8003fe8 <MX_FREERTOS_Init+0x2c>)
 8003fc6:	f004 fbbb 	bl	8008740 <osThreadNew>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4a07      	ldr	r2, [pc, #28]	; (8003fec <MX_FREERTOS_Init+0x30>)
 8003fce:	6013      	str	r3, [r2, #0]

  /* creation of Task_Info */
  Task_InfoHandle = osThreadNew(AppTask_Info, NULL, &Task_Info_attributes);
 8003fd0:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <MX_FREERTOS_Init+0x34>)
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4807      	ldr	r0, [pc, #28]	; (8003ff4 <MX_FREERTOS_Init+0x38>)
 8003fd6:	f004 fbb3 	bl	8008740 <osThreadNew>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a06      	ldr	r2, [pc, #24]	; (8003ff8 <MX_FREERTOS_Init+0x3c>)
 8003fde:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	0801169c 	.word	0x0801169c
 8003fe8:	08003ffd 	.word	0x08003ffd
 8003fec:	20000248 	.word	0x20000248
 8003ff0:	080116c0 	.word	0x080116c0
 8003ff4:	08004095 	.word	0x08004095
 8003ff8:	2000024c 	.word	0x2000024c

08003ffc <AppTask_ADC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_AppTask_ADC */
void AppTask_ADC(void *argument)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af02      	add	r7, sp, #8
 8004002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AppTask_ADC */
	LCD_ShowString(30,0,300,12,12,"Task_ADC: ADC by polling");
 8004004:	4b20      	ldr	r3, [pc, #128]	; (8004088 <AppTask_ADC+0x8c>)
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	230c      	movs	r3, #12
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	230c      	movs	r3, #12
 800400e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004012:	2100      	movs	r1, #0
 8004014:	201e      	movs	r0, #30
 8004016:	f7ff ff09 	bl	8003e2c <LCD_ShowString>
	LCD_ShowString(30,15,300,12,12,"ADC Value(mA)=");
 800401a:	4b1c      	ldr	r3, [pc, #112]	; (800408c <AppTask_ADC+0x90>)
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	230c      	movs	r3, #12
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	230c      	movs	r3, #12
 8004024:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004028:	210f      	movs	r1, #15
 800402a:	201e      	movs	r0, #30
 800402c:	f7ff fefe 	bl	8003e2c <LCD_ShowString>

	TickType_t previousWakeTime=xTaskGetTickCount();	//获取�?嗒信号计数�??
 8004030:	f005 fe50 	bl	8009cd4 <xTaskGetTickCount>
 8004034:	4603      	mov	r3, r0
 8004036:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		HAL_ADC_Start(&hadc1);
 8004038:	4815      	ldr	r0, [pc, #84]	; (8004090 <AppTask_ADC+0x94>)
 800403a:	f001 fa57 	bl	80054ec <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1,100)==HAL_OK)   //轮询方式等待转换完成
 800403e:	2164      	movs	r1, #100	; 0x64
 8004040:	4813      	ldr	r0, [pc, #76]	; (8004090 <AppTask_ADC+0x94>)
 8004042:	f001 fb01 	bl	8005648 <HAL_ADC_PollForConversion>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d114      	bne.n	8004076 <AppTask_ADC+0x7a>
		{
			uint32_t  val=HAL_ADC_GetValue(&hadc1);	//读取ADC转换原始数据
 800404c:	4810      	ldr	r0, [pc, #64]	; (8004090 <AppTask_ADC+0x94>)
 800404e:	f001 fc01 	bl	8005854 <HAL_ADC_GetValue>
 8004052:	6178      	str	r0, [r7, #20]
			uint32_t  Volt=3300*val;	//mV
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f640 42e4 	movw	r2, #3300	; 0xce4
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	613b      	str	r3, [r7, #16]
			Volt=Volt>>12;				//除以2^12
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	0b1b      	lsrs	r3, r3, #12
 8004064:	613b      	str	r3, [r7, #16]
			//LCD_ShowNum(200,15,Volt,4,12);
			LCD_ShowNum(150,15,Volt,4,12);
 8004066:	230c      	movs	r3, #12
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	2304      	movs	r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	210f      	movs	r1, #15
 8004070:	2096      	movs	r0, #150	; 0x96
 8004072:	f7ff fe69 	bl	8003d48 <LCD_ShowNum>
			//LCD_ShowUint(ADCX,40+LCD_SP10,Volt);	//转换为mV显示
		}
		vTaskDelayUntil(&previousWakeTime, pdMS_TO_TICKS(500));
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800407e:	4618      	mov	r0, r3
 8004080:	f005 fc0a 	bl	8009898 <vTaskDelayUntil>
		HAL_ADC_Start(&hadc1);
 8004084:	e7d8      	b.n	8004038 <AppTask_ADC+0x3c>
 8004086:	bf00      	nop
 8004088:	0800fd60 	.word	0x0800fd60
 800408c:	0800fd7c 	.word	0x0800fd7c
 8004090:	20000218 	.word	0x20000218

08004094 <AppTask_Info>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AppTask_Info */
void AppTask_Info(void *argument)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b092      	sub	sp, #72	; 0x48
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]

	//====获取单个任务的信�?=====
		//	TaskHandle_t taskHandle=xTaskGetCurrentTaskHandle();	//获取当前任务句柄
		//	TaskHandle_t taskHandle=xTaskGetIdleTaskHandle();		//获取空闲任务句柄
		//	TaskHandle_t taskHandle=xTaskGetHandle("Task_ADC");		//通过任务名称获取任务句柄
	TaskHandle_t taskHandle=Task_ADCHandle;		//直接使用任务句柄变量
 800409c:	4ba3      	ldr	r3, [pc, #652]	; (800432c <AppTask_Info+0x298>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	63bb      	str	r3, [r7, #56]	; 0x38

	TaskStatus_t taskInfo;
	BaseType_t getFreeStackSpace=pdTRUE;  	//是否获取高水位�??,
 80040a2:	2301      	movs	r3, #1
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
	eTaskState taskState=eInvalid; 			//当前的状�?
 80040a6:	2305      	movs	r3, #5
 80040a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	vTaskGetInfo(taskHandle, &taskInfo, getFreeStackSpace, taskState);	//获取任务信息
 80040ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040b0:	f107 010c 	add.w	r1, r7, #12
 80040b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040b8:	f006 f928 	bl	800a30c <vTaskGetInfo>

	taskENTER_CRITICAL();		//�?始临界代码段，不允许任务调度
 80040bc:	f006 fefe 	bl	800aebc <vPortEnterCritical>

	POINT_COLOR=RED;
 80040c0:	4b9b      	ldr	r3, [pc, #620]	; (8004330 <AppTask_Info+0x29c>)
 80040c2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80040c6:	601a      	str	r2, [r3, #0]
	LCD_ShowString(30,30,300,12,12,"Task_Info: Show task info");
 80040c8:	4b9a      	ldr	r3, [pc, #616]	; (8004334 <AppTask_Info+0x2a0>)
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	230c      	movs	r3, #12
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	230c      	movs	r3, #12
 80040d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040d6:	211e      	movs	r1, #30
 80040d8:	201e      	movs	r0, #30
 80040da:	f7ff fea7 	bl	8003e2c <LCD_ShowString>
	LCD_ShowString(30,45,300,12,12,"Get by vTaskGetInfo() ");
 80040de:	4b96      	ldr	r3, [pc, #600]	; (8004338 <AppTask_Info+0x2a4>)
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	230c      	movs	r3, #12
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	230c      	movs	r3, #12
 80040e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ec:	212d      	movs	r1, #45	; 0x2d
 80040ee:	201e      	movs	r0, #30
 80040f0:	f7ff fe9c 	bl	8003e2c <LCD_ShowString>
	LCD_ShowString(30,60,300,12,12,"Task Name= ");
 80040f4:	4b91      	ldr	r3, [pc, #580]	; (800433c <AppTask_Info+0x2a8>)
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	230c      	movs	r3, #12
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	230c      	movs	r3, #12
 80040fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004102:	213c      	movs	r1, #60	; 0x3c
 8004104:	201e      	movs	r0, #30
 8004106:	f7ff fe91 	bl	8003e2c <LCD_ShowString>
	LCD_ShowString(150,60,300,12,12,taskInfo.pcTaskName);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	230c      	movs	r3, #12
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	230c      	movs	r3, #12
 8004114:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004118:	213c      	movs	r1, #60	; 0x3c
 800411a:	2096      	movs	r0, #150	; 0x96
 800411c:	f7ff fe86 	bl	8003e2c <LCD_ShowString>
	LCD_ShowString(30,75,300,12,12,"Task Number=  ");
 8004120:	4b87      	ldr	r3, [pc, #540]	; (8004340 <AppTask_Info+0x2ac>)
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	230c      	movs	r3, #12
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	230c      	movs	r3, #12
 800412a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800412e:	214b      	movs	r1, #75	; 0x4b
 8004130:	201e      	movs	r0, #30
 8004132:	f7ff fe7b 	bl	8003e2c <LCD_ShowString>
	//LCD_ShowString(150,75,300,12,12,taskInfo.xTaskNumber);
	LCD_ShowNum(150,75,taskInfo.xTaskNumber,4,12);
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	230c      	movs	r3, #12
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2304      	movs	r3, #4
 800413e:	214b      	movs	r1, #75	; 0x4b
 8004140:	2096      	movs	r0, #150	; 0x96
 8004142:	f7ff fe01 	bl	8003d48 <LCD_ShowNum>
	LCD_ShowString(30,90,300,12,12,"Task State= ");
 8004146:	4b7f      	ldr	r3, [pc, #508]	; (8004344 <AppTask_Info+0x2b0>)
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	230c      	movs	r3, #12
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	230c      	movs	r3, #12
 8004150:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004154:	215a      	movs	r1, #90	; 0x5a
 8004156:	201e      	movs	r0, #30
 8004158:	f7ff fe68 	bl	8003e2c <LCD_ShowString>
	LCD_ShowNum(150,90,taskInfo.eCurrentState,4,12);
 800415c:	7e3b      	ldrb	r3, [r7, #24]
 800415e:	461a      	mov	r2, r3
 8004160:	230c      	movs	r3, #12
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2304      	movs	r3, #4
 8004166:	215a      	movs	r1, #90	; 0x5a
 8004168:	2096      	movs	r0, #150	; 0x96
 800416a:	f7ff fded 	bl	8003d48 <LCD_ShowNum>
	LCD_ShowString(30,105,300,12,12,"Task Priority= ");
 800416e:	4b76      	ldr	r3, [pc, #472]	; (8004348 <AppTask_Info+0x2b4>)
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	230c      	movs	r3, #12
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	230c      	movs	r3, #12
 8004178:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800417c:	2169      	movs	r1, #105	; 0x69
 800417e:	201e      	movs	r0, #30
 8004180:	f7ff fe54 	bl	8003e2c <LCD_ShowString>
	//LCD_ShowString(150,105,300,12,12,taskInfo.uxCurrentPriority);
	LCD_ShowNum(150,105,taskInfo.uxCurrentPriority,4,12);
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	230c      	movs	r3, #12
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2304      	movs	r3, #4
 800418c:	2169      	movs	r1, #105	; 0x69
 800418e:	2096      	movs	r0, #150	; 0x96
 8004190:	f7ff fdda 	bl	8003d48 <LCD_ShowNum>
	LCD_ShowString(30,120,300,12,12,"High Water Mark= ");
 8004194:	4b6d      	ldr	r3, [pc, #436]	; (800434c <AppTask_Info+0x2b8>)
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	230c      	movs	r3, #12
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	230c      	movs	r3, #12
 800419e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041a2:	2178      	movs	r1, #120	; 0x78
 80041a4:	201e      	movs	r0, #30
 80041a6:	f7ff fe41 	bl	8003e2c <LCD_ShowString>
	LCD_ShowNum(150,120,taskInfo.usStackHighWaterMark,4,12);
 80041aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80041ac:	461a      	mov	r2, r3
 80041ae:	230c      	movs	r3, #12
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2304      	movs	r3, #4
 80041b4:	2178      	movs	r1, #120	; 0x78
 80041b6:	2096      	movs	r0, #150	; 0x96
 80041b8:	f7ff fdc6 	bl	8003d48 <LCD_ShowNum>
//
//		LCD_ShowStr(30, LCD_CurY+LCD_SP10, (uint8_t *)"High Water Mark= ");
//		LCD_ShowUint(LCD_CurX+10, LCD_CurY, taskInfo.usStackHighWaterMark);

	//======用函数uxTaskGetStackHighWaterMark()单独获取每个任务的高水位�?=====
	POINT_COLOR=YELLOW;
 80041bc:	4b5c      	ldr	r3, [pc, #368]	; (8004330 <AppTask_Info+0x29c>)
 80041be:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80041c2:	601a      	str	r2, [r3, #0]
	LCD_ShowString(30,135,300,12,12,"High Water Mark of tasks");
 80041c4:	4b62      	ldr	r3, [pc, #392]	; (8004350 <AppTask_Info+0x2bc>)
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	230c      	movs	r3, #12
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	230c      	movs	r3, #12
 80041ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041d2:	2187      	movs	r1, #135	; 0x87
 80041d4:	201e      	movs	r0, #30
 80041d6:	f7ff fe29 	bl	8003e2c <LCD_ShowString>

	taskHandle=xTaskGetIdleTaskHandle();	//获取空闲任务句柄
 80041da:	f005 fd93 	bl	8009d04 <xTaskGetIdleTaskHandle>
 80041de:	63b8      	str	r0, [r7, #56]	; 0x38
	hwm=uxTaskGetStackHighWaterMark(taskHandle);
 80041e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041e2:	f006 f915 	bl	800a410 <uxTaskGetStackHighWaterMark>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	LCD_ShowString(30,150,300,12,12,"Idle Task= ");
 80041ec:	4b59      	ldr	r3, [pc, #356]	; (8004354 <AppTask_Info+0x2c0>)
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	230c      	movs	r3, #12
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	230c      	movs	r3, #12
 80041f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041fa:	2196      	movs	r1, #150	; 0x96
 80041fc:	201e      	movs	r0, #30
 80041fe:	f7ff fe15 	bl	8003e2c <LCD_ShowString>
	LCD_ShowNum(150,150,hwm,4,12);
 8004202:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8004206:	230c      	movs	r3, #12
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2304      	movs	r3, #4
 800420c:	2196      	movs	r1, #150	; 0x96
 800420e:	2096      	movs	r0, #150	; 0x96
 8004210:	f7ff fd9a 	bl	8003d48 <LCD_ShowNum>
	taskHandle=Task_ADCHandle;				//Task_ADC的任务句�?
 8004214:	4b45      	ldr	r3, [pc, #276]	; (800432c <AppTask_Info+0x298>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
	hwm=uxTaskGetStackHighWaterMark(taskHandle);
 800421a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800421c:	f006 f8f8 	bl	800a410 <uxTaskGetStackHighWaterMark>
 8004220:	4603      	mov	r3, r0
 8004222:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	LCD_ShowString(30,165,300,12,12,"Task_ADC= ");
 8004226:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <AppTask_Info+0x2c4>)
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	230c      	movs	r3, #12
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	230c      	movs	r3, #12
 8004230:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004234:	21a5      	movs	r1, #165	; 0xa5
 8004236:	201e      	movs	r0, #30
 8004238:	f7ff fdf8 	bl	8003e2c <LCD_ShowString>
	LCD_ShowNum(150,165,hwm,4,12);
 800423c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8004240:	230c      	movs	r3, #12
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2304      	movs	r3, #4
 8004246:	21a5      	movs	r1, #165	; 0xa5
 8004248:	2096      	movs	r0, #150	; 0x96
 800424a:	f7ff fd7d 	bl	8003d48 <LCD_ShowNum>
	taskHandle=Task_InfoHandle;				//Task_Info的任务句�?
 800424e:	4b43      	ldr	r3, [pc, #268]	; (800435c <AppTask_Info+0x2c8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	63bb      	str	r3, [r7, #56]	; 0x38
	hwm=uxTaskGetStackHighWaterMark(taskHandle);
 8004254:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004256:	f006 f8db 	bl	800a410 <uxTaskGetStackHighWaterMark>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	LCD_ShowString(30,180,300,12,12,"Task_Info= ");
 8004260:	4b3f      	ldr	r3, [pc, #252]	; (8004360 <AppTask_Info+0x2cc>)
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	230c      	movs	r3, #12
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	230c      	movs	r3, #12
 800426a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800426e:	21b4      	movs	r1, #180	; 0xb4
 8004270:	201e      	movs	r0, #30
 8004272:	f7ff fddb 	bl	8003e2c <LCD_ShowString>
	LCD_ShowNum(150,180,hwm,4,12);
 8004276:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800427a:	230c      	movs	r3, #12
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	2304      	movs	r3, #4
 8004280:	21b4      	movs	r1, #180	; 0xb4
 8004282:	2096      	movs	r0, #150	; 0x96
 8004284:	f7ff fd60 	bl	8003d48 <LCD_ShowNum>
//		hwm=uxTaskGetStackHighWaterMark(taskHandle);
//		LCD_ShowStr(30, LCD_CurY+LCD_SP10, (uint8_t *)"Task_Info= ");
//		LCD_ShowUint(LCD_CurX+10, LCD_CurY, hwm);

	//=======获取内核的信�?==========
	POINT_COLOR=GREEN;
 8004288:	4b29      	ldr	r3, [pc, #164]	; (8004330 <AppTask_Info+0x29c>)
 800428a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800428e:	601a      	str	r2, [r3, #0]
	LCD_ShowString(30,195,300,12,12,"Kernel Info ");
 8004290:	4b34      	ldr	r3, [pc, #208]	; (8004364 <AppTask_Info+0x2d0>)
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	230c      	movs	r3, #12
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	230c      	movs	r3, #12
 800429a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800429e:	21c3      	movs	r1, #195	; 0xc3
 80042a0:	201e      	movs	r0, #30
 80042a2:	f7ff fdc3 	bl	8003e2c <LCD_ShowString>
	u8 taskNum=uxTaskGetNumberOfTasks();  //获取系统任务个数
 80042a6:	f005 fd23 	bl	8009cf0 <uxTaskGetNumberOfTasks>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	LCD_ShowString(30,215,300,12,12,"uxTaskGetNumberOfTasks()= ");
 80042b0:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <AppTask_Info+0x2d4>)
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	230c      	movs	r3, #12
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	230c      	movs	r3, #12
 80042ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042be:	21d7      	movs	r1, #215	; 0xd7
 80042c0:	201e      	movs	r0, #30
 80042c2:	f7ff fdb3 	bl	8003e2c <LCD_ShowString>
	LCD_ShowNum(200,215,taskNum,4,12);
 80042c6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80042ca:	230c      	movs	r3, #12
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2304      	movs	r3, #4
 80042d0:	21d7      	movs	r1, #215	; 0xd7
 80042d2:	20c8      	movs	r0, #200	; 0xc8
 80042d4:	f7ff fd38 	bl	8003d48 <LCD_ShowNum>
//		UBaseType_t  taskNum=uxTaskGetNumberOfTasks();  //获取系统任务个数
//		LCD_ShowStr(20, LCD_CurY+LCD_SP10, (uint8_t *)"uxTaskGetNumberOfTasks()= ");
//		LCD_ShowUint(LCD_CurX, LCD_CurY, taskNum);
//
//		uint16_t lastRow=LCD_CurY;
		taskEXIT_CRITICAL();		//结束临界代码段，重新允许任务调度
 80042d8:	f006 fe20 	bl	800af1c <vPortExitCritical>

  /* Infinite loop */
	int loopCount=0;
 80042dc:	2300      	movs	r3, #0
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(;;)
	{
		loopCount++;
 80042e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e2:	3301      	adds	r3, #1
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80042e6:	2120      	movs	r1, #32
 80042e8:	4820      	ldr	r0, [pc, #128]	; (800436c <AppTask_Info+0x2d8>)
 80042ea:	f002 f821 	bl	8006330 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(300));
 80042ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80042f2:	f005 fb4f 	bl	8009994 <vTaskDelay>
		if(loopCount >= 10)
 80042f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f8:	2b09      	cmp	r3, #9
 80042fa:	dc00      	bgt.n	80042fe <AppTask_Info+0x26a>
		loopCount++;
 80042fc:	e7f0      	b.n	80042e0 <AppTask_Info+0x24c>
			break;
 80042fe:	bf00      	nop
		//osDelay(1);
	}
	POINT_COLOR=RED;
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <AppTask_Info+0x29c>)
 8004302:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004306:	601a      	str	r2, [r3, #0]
	LCD_ShowString(30,230,300,12,12,"Task_Info is deleted");
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <AppTask_Info+0x2dc>)
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	230c      	movs	r3, #12
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	230c      	movs	r3, #12
 8004312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004316:	21e6      	movs	r1, #230	; 0xe6
 8004318:	201e      	movs	r0, #30
 800431a:	f7ff fd87 	bl	8003e2c <LCD_ShowString>
	vTaskDelete(NULL);	//删除任务自己
 800431e:	2000      	movs	r0, #0
 8004320:	f005 fa48 	bl	80097b4 <vTaskDelete>
  /* USER CODE END AppTask_Info */
}
 8004324:	bf00      	nop
 8004326:	3740      	adds	r7, #64	; 0x40
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000248 	.word	0x20000248
 8004330:	20000000 	.word	0x20000000
 8004334:	0800fd8c 	.word	0x0800fd8c
 8004338:	0800fda8 	.word	0x0800fda8
 800433c:	0800fdc0 	.word	0x0800fdc0
 8004340:	0800fdcc 	.word	0x0800fdcc
 8004344:	0800fddc 	.word	0x0800fddc
 8004348:	0800fdec 	.word	0x0800fdec
 800434c:	0800fdfc 	.word	0x0800fdfc
 8004350:	0800fe10 	.word	0x0800fe10
 8004354:	0800fe2c 	.word	0x0800fe2c
 8004358:	0800fe38 	.word	0x0800fe38
 800435c:	2000024c 	.word	0x2000024c
 8004360:	0800fe44 	.word	0x0800fe44
 8004364:	0800fe50 	.word	0x0800fe50
 8004368:	0800fe60 	.word	0x0800fe60
 800436c:	40010c00 	.word	0x40010c00
 8004370:	0800fe7c 	.word	0x0800fe7c

08004374 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08e      	sub	sp, #56	; 0x38
 8004378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800437a:	f107 031c 	add.w	r3, r7, #28
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	605a      	str	r2, [r3, #4]
 8004384:	609a      	str	r2, [r3, #8]
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	611a      	str	r2, [r3, #16]
 800438a:	615a      	str	r2, [r3, #20]
 800438c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800438e:	463b      	mov	r3, r7
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	60da      	str	r2, [r3, #12]
 800439a:	611a      	str	r2, [r3, #16]
 800439c:	615a      	str	r2, [r3, #20]
 800439e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 80043a0:	4b30      	ldr	r3, [pc, #192]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80043a6:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80043a8:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043aa:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <MX_FSMC_Init+0xf4>)
 80043ac:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 80043ae:	4b2d      	ldr	r3, [pc, #180]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043b0:	2206      	movs	r2, #6
 80043b2:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80043ba:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043bc:	2200      	movs	r2, #0
 80043be:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80043c0:	4b28      	ldr	r3, [pc, #160]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043c2:	2210      	movs	r2, #16
 80043c4:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80043c6:	4b27      	ldr	r3, [pc, #156]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80043cc:	4b25      	ldr	r3, [pc, #148]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80043d2:	4b24      	ldr	r3, [pc, #144]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043da:	2200      	movs	r2, #0
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80043de:	4b21      	ldr	r3, [pc, #132]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80043e6:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80043ec:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80043fa:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <MX_FSMC_Init+0xf0>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 6;
 8004400:	2306      	movs	r3, #6
 8004402:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004404:	230f      	movs	r3, #15
 8004406:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 26;
 8004408:	231a      	movs	r3, #26
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004410:	2310      	movs	r3, #16
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8004414:	2311      	movs	r3, #17
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004418:	2300      	movs	r3, #0
 800441a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 3;
 800441c:	2303      	movs	r3, #3
 800441e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8004420:	230f      	movs	r3, #15
 8004422:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 6;
 8004424:	2306      	movs	r3, #6
 8004426:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800442c:	2310      	movs	r3, #16
 800442e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004430:	2311      	movs	r3, #17
 8004432:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8004434:	2300      	movs	r3, #0
 8004436:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8004438:	463a      	mov	r2, r7
 800443a:	f107 031c 	add.w	r3, r7, #28
 800443e:	4619      	mov	r1, r3
 8004440:	4808      	ldr	r0, [pc, #32]	; (8004464 <MX_FSMC_Init+0xf0>)
 8004442:	f002 ff60 	bl	8007306 <HAL_SRAM_Init>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 800444c:	f000 fa12 	bl	8004874 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <MX_FSMC_Init+0xf8>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	4a05      	ldr	r2, [pc, #20]	; (800446c <MX_FSMC_Init+0xf8>)
 8004456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800445a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800445c:	bf00      	nop
 800445e:	3738      	adds	r7, #56	; 0x38
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000250 	.word	0x20000250
 8004468:	a0000104 	.word	0xa0000104
 800446c:	40010000 	.word	0x40010000

08004470 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004476:	f107 0308 	add.w	r3, r7, #8
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	609a      	str	r2, [r3, #8]
 8004482:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8004484:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <HAL_FSMC_MspInit+0x94>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d136      	bne.n	80044fa <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 800448c:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <HAL_FSMC_MspInit+0x94>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <HAL_FSMC_MspInit+0x98>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <HAL_FSMC_MspInit+0x98>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449c:	6153      	str	r3, [r2, #20]
 800449e:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <HAL_FSMC_MspInit+0x98>)
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 80044aa:	f241 0301 	movw	r3, #4097	; 0x1001
 80044ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b0:	2302      	movs	r3, #2
 80044b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044b4:	2303      	movs	r3, #3
 80044b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044b8:	f107 0308 	add.w	r3, r7, #8
 80044bc:	4619      	mov	r1, r3
 80044be:	4813      	ldr	r0, [pc, #76]	; (800450c <HAL_FSMC_MspInit+0x9c>)
 80044c0:	f001 fd8a 	bl	8005fd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80044c4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80044c8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ca:	2302      	movs	r3, #2
 80044cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ce:	2303      	movs	r3, #3
 80044d0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	4619      	mov	r1, r3
 80044d8:	480d      	ldr	r0, [pc, #52]	; (8004510 <HAL_FSMC_MspInit+0xa0>)
 80044da:	f001 fd7d 	bl	8005fd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80044de:	f24c 7333 	movw	r3, #50995	; 0xc733
 80044e2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e4:	2302      	movs	r3, #2
 80044e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044e8:	2303      	movs	r3, #3
 80044ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044ec:	f107 0308 	add.w	r3, r7, #8
 80044f0:	4619      	mov	r1, r3
 80044f2:	4808      	ldr	r0, [pc, #32]	; (8004514 <HAL_FSMC_MspInit+0xa4>)
 80044f4:	f001 fd70 	bl	8005fd8 <HAL_GPIO_Init>
 80044f8:	e000      	b.n	80044fc <HAL_FSMC_MspInit+0x8c>
    return;
 80044fa:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000298 	.word	0x20000298
 8004508:	40021000 	.word	0x40021000
 800450c:	40012000 	.word	0x40012000
 8004510:	40011800 	.word	0x40011800
 8004514:	40011400 	.word	0x40011400

08004518 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004520:	f7ff ffa6 	bl	8004470 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004532:	f107 0318 	add.w	r3, r7, #24
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	605a      	str	r2, [r3, #4]
 800453c:	609a      	str	r2, [r3, #8]
 800453e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004540:	4b4f      	ldr	r3, [pc, #316]	; (8004680 <MX_GPIO_Init+0x154>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	4a4e      	ldr	r2, [pc, #312]	; (8004680 <MX_GPIO_Init+0x154>)
 8004546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454a:	6193      	str	r3, [r2, #24]
 800454c:	4b4c      	ldr	r3, [pc, #304]	; (8004680 <MX_GPIO_Init+0x154>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004558:	4b49      	ldr	r3, [pc, #292]	; (8004680 <MX_GPIO_Init+0x154>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4a48      	ldr	r2, [pc, #288]	; (8004680 <MX_GPIO_Init+0x154>)
 800455e:	f043 0310 	orr.w	r3, r3, #16
 8004562:	6193      	str	r3, [r2, #24]
 8004564:	4b46      	ldr	r3, [pc, #280]	; (8004680 <MX_GPIO_Init+0x154>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004570:	4b43      	ldr	r3, [pc, #268]	; (8004680 <MX_GPIO_Init+0x154>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	4a42      	ldr	r2, [pc, #264]	; (8004680 <MX_GPIO_Init+0x154>)
 8004576:	f043 0304 	orr.w	r3, r3, #4
 800457a:	6193      	str	r3, [r2, #24]
 800457c:	4b40      	ldr	r3, [pc, #256]	; (8004680 <MX_GPIO_Init+0x154>)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004588:	4b3d      	ldr	r3, [pc, #244]	; (8004680 <MX_GPIO_Init+0x154>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	4a3c      	ldr	r2, [pc, #240]	; (8004680 <MX_GPIO_Init+0x154>)
 800458e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004592:	6193      	str	r3, [r2, #24]
 8004594:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <MX_GPIO_Init+0x154>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a0:	4b37      	ldr	r3, [pc, #220]	; (8004680 <MX_GPIO_Init+0x154>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	4a36      	ldr	r2, [pc, #216]	; (8004680 <MX_GPIO_Init+0x154>)
 80045a6:	f043 0308 	orr.w	r3, r3, #8
 80045aa:	6193      	str	r3, [r2, #24]
 80045ac:	4b34      	ldr	r3, [pc, #208]	; (8004680 <MX_GPIO_Init+0x154>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045b8:	4b31      	ldr	r3, [pc, #196]	; (8004680 <MX_GPIO_Init+0x154>)
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	4a30      	ldr	r2, [pc, #192]	; (8004680 <MX_GPIO_Init+0x154>)
 80045be:	f043 0320 	orr.w	r3, r3, #32
 80045c2:	6193      	str	r3, [r2, #24]
 80045c4:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <MX_GPIO_Init+0x154>)
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80045d0:	2200      	movs	r2, #0
 80045d2:	2120      	movs	r1, #32
 80045d4:	482b      	ldr	r0, [pc, #172]	; (8004684 <MX_GPIO_Init+0x158>)
 80045d6:	f001 fe93 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin, GPIO_PIN_SET);
 80045da:	2201      	movs	r2, #1
 80045dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045e0:	4829      	ldr	r0, [pc, #164]	; (8004688 <MX_GPIO_Init+0x15c>)
 80045e2:	f001 fe8d 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80045e6:	2200      	movs	r2, #0
 80045e8:	2120      	movs	r1, #32
 80045ea:	4827      	ldr	r0, [pc, #156]	; (8004688 <MX_GPIO_Init+0x15c>)
 80045ec:	f001 fe88 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 80045f0:	2318      	movs	r3, #24
 80045f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f8:	2301      	movs	r3, #1
 80045fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045fc:	f107 0318 	add.w	r3, r7, #24
 8004600:	4619      	mov	r1, r3
 8004602:	4820      	ldr	r0, [pc, #128]	; (8004684 <MX_GPIO_Init+0x158>)
 8004604:	f001 fce8 	bl	8005fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8004608:	2320      	movs	r3, #32
 800460a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800460c:	2301      	movs	r3, #1
 800460e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2300      	movs	r3, #0
 8004612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004614:	2303      	movs	r3, #3
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8004618:	f107 0318 	add.w	r3, r7, #24
 800461c:	4619      	mov	r1, r3
 800461e:	4819      	ldr	r0, [pc, #100]	; (8004684 <MX_GPIO_Init+0x158>)
 8004620:	f001 fcda 	bl	8005fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8004624:	2301      	movs	r3, #1
 8004626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800462c:	2302      	movs	r3, #2
 800462e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8004630:	f107 0318 	add.w	r3, r7, #24
 8004634:	4619      	mov	r1, r3
 8004636:	4815      	ldr	r0, [pc, #84]	; (800468c <MX_GPIO_Init+0x160>)
 8004638:	f001 fcce 	bl	8005fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W25QXX_CS_Pin;
 800463c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004642:	2301      	movs	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004646:	2301      	movs	r3, #1
 8004648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800464a:	2303      	movs	r3, #3
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 800464e:	f107 0318 	add.w	r3, r7, #24
 8004652:	4619      	mov	r1, r3
 8004654:	480c      	ldr	r0, [pc, #48]	; (8004688 <MX_GPIO_Init+0x15c>)
 8004656:	f001 fcbf 	bl	8005fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800465a:	2320      	movs	r3, #32
 800465c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800465e:	2301      	movs	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004662:	2300      	movs	r3, #0
 8004664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004666:	2303      	movs	r3, #3
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800466a:	f107 0318 	add.w	r3, r7, #24
 800466e:	4619      	mov	r1, r3
 8004670:	4805      	ldr	r0, [pc, #20]	; (8004688 <MX_GPIO_Init+0x15c>)
 8004672:	f001 fcb1 	bl	8005fd8 <HAL_GPIO_Init>

}
 8004676:	bf00      	nop
 8004678:	3728      	adds	r7, #40	; 0x28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	40011800 	.word	0x40011800
 8004688:	40010c00 	.word	0x40010c00
 800468c:	40010800 	.word	0x40010800

08004690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int x = 0,FLASH_SIZE,id;
 8004696:	2300      	movs	r3, #0
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800469a:	f000 fde7 	bl	800526c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800469e:	f000 f829 	bl	80046f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046a2:	f7ff ff43 	bl	800452c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80046a6:	f000 fd27 	bl	80050f8 <MX_USART1_UART_Init>
  MX_FSMC_Init();
 80046aa:	f7ff fe63 	bl	8004374 <MX_FSMC_Init>
  MX_SPI2_Init();
 80046ae:	f000 fae7 	bl	8004c80 <MX_SPI2_Init>
  MX_RTC_Init();
 80046b2:	f000 f8e5 	bl	8004880 <MX_RTC_Init>
  MX_ADC1_Init();
 80046b6:	f7ff fc07 	bl	8003ec8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 80046ba:	f7fc ff59 	bl	8001570 <LCD_Init>
	POINT_COLOR=RED;     				//画笔颜色：红�???????????????
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <main+0x5c>)
 80046c0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80046c4:	601a      	str	r2, [r3, #0]
//	sprintf((char*)lcd_id,"LCD ID:%04X",lcddev.id);//将LCD ID打印到lcd_id数组�???????????????
	LCD_Clear(WHITE);
 80046c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80046ca:	f7ff fa43 	bl	8003b54 <LCD_Clear>
	//rtc_set_alarm(calendar.year, calendar.month, calendar.date, calendar.hour, calendar.min, calendar.sec);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80046ce:	f003 ffd1 	bl	8008674 <osKernelInitialize>
  MX_FREERTOS_Init();
 80046d2:	f7ff fc73 	bl	8003fbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80046d6:	f003 ffff 	bl	80086d8 <osKernelStart>
//		LCD_ShowString(30,130,200,12,12,datatemp);
//		memset(datatemp,'\0',sizeof(datatemp));
//		sprintf((char*)datatemp,"%02d h,%02d m,%02d s",calendar.hour,calendar.min,calendar.sec);
//		LCD_ShowString(30,150,200,12,12,datatemp);
		//printf("test\n\r");
		osDelay(500);
 80046da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046de:	f004 f8d9 	bl	8008894 <osDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80046e2:	2120      	movs	r1, #32
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <main+0x60>)
 80046e6:	f001 fe23 	bl	8006330 <HAL_GPIO_TogglePin>
		osDelay(500);
 80046ea:	e7f6      	b.n	80046da <main+0x4a>
 80046ec:	20000000 	.word	0x20000000
 80046f0:	40010c00 	.word	0x40010c00

080046f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b096      	sub	sp, #88	; 0x58
 80046f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046fe:	2228      	movs	r2, #40	; 0x28
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f006 feea 	bl	800b4dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004708:	f107 031c 	add.w	r3, r7, #28
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004718:	1d3b      	adds	r3, r7, #4
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	60da      	str	r2, [r3, #12]
 8004724:	611a      	str	r2, [r3, #16]
 8004726:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004728:	2305      	movs	r3, #5
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800472c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004732:	2300      	movs	r3, #0
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004736:	2301      	movs	r3, #1
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800473a:	2301      	movs	r3, #1
 800473c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800473e:	2302      	movs	r3, #2
 8004740:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004746:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004748:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800474c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800474e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004752:	4618      	mov	r0, r3
 8004754:	f001 fe12 	bl	800637c <HAL_RCC_OscConfig>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800475e:	f000 f889 	bl	8004874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004762:	230f      	movs	r3, #15
 8004764:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004766:	2302      	movs	r3, #2
 8004768:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800476e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004774:	2300      	movs	r3, #0
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004778:	f107 031c 	add.w	r3, r7, #28
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f002 f87e 	bl	8006880 <HAL_RCC_ClockConfig>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800478a:	f000 f873 	bl	8004874 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800478e:	2303      	movs	r3, #3
 8004790:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004796:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800479c:	1d3b      	adds	r3, r7, #4
 800479e:	4618      	mov	r0, r3
 80047a0:	f002 fa2c 	bl	8006bfc <HAL_RCCEx_PeriphCLKConfig>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <SystemClock_Config+0xba>
  {
    Error_Handler();
 80047aa:	f000 f863 	bl	8004874 <Error_Handler>
  }
}
 80047ae:	bf00      	nop
 80047b0:	3758      	adds	r7, #88	; 0x58
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <delay_us>:

/* USER CODE BEGIN 4 */


void delay_us(uint32_t udelay)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t startval,tickn,delays,wait;

  startval = SysTick->VAL;
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <delay_us+0x7c>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 80047c6:	f000 fd79 	bl	80052bc <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]
  //sysc = 72000;  //SystemCoreClock / (1000U / uwTickFreq);
  delays =udelay * 72; //sysc / 1000 * udelay;
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d915      	bls.n	800480c <delay_us+0x54>
    {
      while(HAL_GetTick() == tickn)
 80047e0:	bf00      	nop
 80047e2:	f000 fd6b 	bl	80052bc <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d0f9      	beq.n	80047e2 <delay_us+0x2a>
        {

        }
      wait = 72000 + startval - delays;
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80047f8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80047fc:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL)
 80047fe:	bf00      	nop
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <delay_us+0x7c>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	d3fa      	bcc.n	8004800 <delay_us+0x48>
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
        {

        }
    }
}
 800480a:	e00f      	b.n	800482c <delay_us+0x74>
      wait = startval - delays;
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
 8004814:	bf00      	nop
 8004816:	4b07      	ldr	r3, [pc, #28]	; (8004834 <delay_us+0x7c>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	429a      	cmp	r2, r3
 800481e:	d205      	bcs.n	800482c <delay_us+0x74>
 8004820:	f000 fd4c 	bl	80052bc <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4293      	cmp	r3, r2
 800482a:	d0f4      	beq.n	8004816 <delay_us+0x5e>
}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	e000e010 	.word	0xe000e010

08004838 <delay_ms>:

void delay_ms(uint32_t udelay)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	HAL_Delay(udelay);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fd45 	bl	80052d0 <HAL_Delay>
	//osDelay(udelay);
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a04      	ldr	r2, [pc, #16]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004862:	f000 fd19 	bl	8005298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40001000 	.word	0x40001000

08004874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004878:	b672      	cpsid	i
}
 800487a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800487c:	e7fe      	b.n	800487c <Error_Handler+0x8>
	...

08004880 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <MX_RTC_Init+0x30>)
 8004886:	4a0b      	ldr	r2, [pc, #44]	; (80048b4 <MX_RTC_Init+0x34>)
 8004888:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <MX_RTC_Init+0x30>)
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <MX_RTC_Init+0x30>)
 8004894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004898:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800489a:	4805      	ldr	r0, [pc, #20]	; (80048b0 <MX_RTC_Init+0x30>)
 800489c:	f002 fb3c 	bl	8006f18 <HAL_RTC_Init>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80048a6:	f7ff ffe5 	bl	8004874 <Error_Handler>
  ////3.秒中�???
//  __HAL_RTC_ALARM_ENABLE_IT(&hrtc, RTC_IT_SEC);   /* 允许秒中�??? */
//  __HAL_RTC_ALARM_ENABLE_IT(&hrtc, RTC_CRH_ALRIE);
  /* USER CODE END RTC_Init 2 */

}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	200002a8 	.word	0x200002a8
 80048b4:	40002800 	.word	0x40002800

080048b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a13      	ldr	r2, [pc, #76]	; (8004914 <HAL_RTC_MspInit+0x5c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d120      	bne.n	800490c <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80048ca:	f001 fd4b 	bl	8006364 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <HAL_RTC_MspInit+0x60>)
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	4a11      	ldr	r2, [pc, #68]	; (8004918 <HAL_RTC_MspInit+0x60>)
 80048d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048d8:	61d3      	str	r3, [r2, #28]
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <HAL_RTC_MspInit+0x60>)
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <HAL_RTC_MspInit+0x64>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 80048ec:	2200      	movs	r2, #0
 80048ee:	2105      	movs	r1, #5
 80048f0:	2003      	movs	r0, #3
 80048f2:	f001 fa04 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80048f6:	2003      	movs	r0, #3
 80048f8:	f001 fa1d 	bl	8005d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80048fc:	2200      	movs	r2, #0
 80048fe:	2105      	movs	r1, #5
 8004900:	2029      	movs	r0, #41	; 0x29
 8004902:	f001 f9fc 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004906:	2029      	movs	r0, #41	; 0x29
 8004908:	f001 fa15 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40002800 	.word	0x40002800
 8004918:	40021000 	.word	0x40021000
 800491c:	4242043c 	.word	0x4242043c

08004920 <rtc_is_leap_year>:
 *              非闰�????? 31 28 31 30 31 30 31 31 30 31 30 31
 * @param       year : 年份
 * @retval      0, 非闰�?????; 1, 是闰�?????;
 */
static uint8_t rtc_is_leap_year(uint16_t year)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	80fb      	strh	r3, [r7, #6]
    /* 闰年规则: 四年闰百年不闰，四百年又�????? */
    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <rtc_is_leap_year+0x2e>
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <rtc_is_leap_year+0x58>)
 800493a:	fba2 1203 	umull	r1, r2, r2, r3
 800493e:	0952      	lsrs	r2, r2, #5
 8004940:	2164      	movs	r1, #100	; 0x64
 8004942:	fb01 f202 	mul.w	r2, r1, r2
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10c      	bne.n	8004968 <rtc_is_leap_year+0x48>
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	4a09      	ldr	r2, [pc, #36]	; (8004978 <rtc_is_leap_year+0x58>)
 8004952:	fba2 1203 	umull	r1, r2, r2, r3
 8004956:	09d2      	lsrs	r2, r2, #7
 8004958:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800495c:	fb01 f202 	mul.w	r2, r1, r2
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <rtc_is_leap_year+0x4c>
    {
        return 1;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <rtc_is_leap_year+0x4e>
    }
    else
    {
        return 0;
 800496c:	2300      	movs	r3, #0
    }
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	51eb851f 	.word	0x51eb851f

0800497c <rtc_get_time>:
 *   @note      该函数不直接返回时间, 时间数据保存在calendar结构体里�?????
 * @param       �?????
 * @retval      �?????
 */
void rtc_get_time(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
    static uint16_t daycnt = 0;
    uint32_t seccount = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
    uint32_t temp = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
    uint16_t temp1 = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	827b      	strh	r3, [r7, #18]
    const uint8_t month_table[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; /* 平年的月份日期表 */
 800498e:	4a65      	ldr	r2, [pc, #404]	; (8004b24 <rtc_get_time+0x1a8>)
 8004990:	463b      	mov	r3, r7
 8004992:	ca07      	ldmia	r2, {r0, r1, r2}
 8004994:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    seccount = RTC->CNTH;       /* 得到计数器中的�??(秒钟�?????) */
 8004998:	4b63      	ldr	r3, [pc, #396]	; (8004b28 <rtc_get_time+0x1ac>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	60fb      	str	r3, [r7, #12]
    seccount <<= 16;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	041b      	lsls	r3, r3, #16
 80049a2:	60fb      	str	r3, [r7, #12]
    seccount += RTC->CNTL;
 80049a4:	4b60      	ldr	r3, [pc, #384]	; (8004b28 <rtc_get_time+0x1ac>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

    temp = seccount / 86400;    /* 得到天数(秒钟数对应的) */
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a5e      	ldr	r2, [pc, #376]	; (8004b2c <rtc_get_time+0x1b0>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	617b      	str	r3, [r7, #20]

    if (daycnt != temp)         /* 超过�?????天了 */
 80049ba:	4b5d      	ldr	r3, [pc, #372]	; (8004b30 <rtc_get_time+0x1b4>)
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d064      	beq.n	8004a90 <rtc_get_time+0x114>
    {
        daycnt = temp;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <rtc_get_time+0x1b4>)
 80049cc:	801a      	strh	r2, [r3, #0]
        temp1 = 1970;           /* �?????1970年开�????? */
 80049ce:	f240 73b2 	movw	r3, #1970	; 0x7b2
 80049d2:	827b      	strh	r3, [r7, #18]

        while (temp >= 365)
 80049d4:	e016      	b.n	8004a04 <rtc_get_time+0x88>
        {
            if (rtc_is_leap_year(temp1)) /* 是闰�????? */
 80049d6:	8a7b      	ldrh	r3, [r7, #18]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ffa1 	bl	8004920 <rtc_is_leap_year>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <rtc_get_time+0x7a>
            {
                if (temp >= 366)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 80049ea:	d310      	bcc.n	8004a0e <rtc_get_time+0x92>
                {
                    temp -= 366; /* 闰年的秒钟数 */
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e003      	b.n	80049fe <rtc_get_time+0x82>
                    break;
                }
            }
            else
            {
                temp -= 365;    /* 平年 */
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 80049fc:	617b      	str	r3, [r7, #20]
            }

            temp1++;
 80049fe:	8a7b      	ldrh	r3, [r7, #18]
 8004a00:	3301      	adds	r3, #1
 8004a02:	827b      	strh	r3, [r7, #18]
        while (temp >= 365)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8004a0a:	d8e4      	bhi.n	80049d6 <rtc_get_time+0x5a>
 8004a0c:	e000      	b.n	8004a10 <rtc_get_time+0x94>
                    break;
 8004a0e:	bf00      	nop
        }

        calendar.year = temp1;  /* 得到年份 */
 8004a10:	4a48      	ldr	r2, [pc, #288]	; (8004b34 <rtc_get_time+0x1b8>)
 8004a12:	8a7b      	ldrh	r3, [r7, #18]
 8004a14:	8093      	strh	r3, [r2, #4]
        temp1 = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	827b      	strh	r3, [r7, #18]

        while (temp >= 28)      /* 超过了一个月 */
 8004a1a:	e026      	b.n	8004a6a <rtc_get_time+0xee>
        {
            if (rtc_is_leap_year(calendar.year) && temp1 == 1) /* 当年是不是闰�?????/2月份 */
 8004a1c:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <rtc_get_time+0x1b8>)
 8004a1e:	889b      	ldrh	r3, [r3, #4]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff7d 	bl	8004920 <rtc_is_leap_year>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <rtc_get_time+0xc4>
 8004a2c:	8a7b      	ldrh	r3, [r7, #18]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d106      	bne.n	8004a40 <rtc_get_time+0xc4>
            {
                if (temp >= 29)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b1c      	cmp	r3, #28
 8004a36:	d91c      	bls.n	8004a72 <rtc_get_time+0xf6>
                {
                    temp -= 29; /* 闰年的秒钟数 */
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	3b1d      	subs	r3, #29
 8004a3c:	617b      	str	r3, [r7, #20]
                if (temp >= 29)
 8004a3e:	e011      	b.n	8004a64 <rtc_get_time+0xe8>
                    break;
                }
            }
            else
            {
                if (temp >= month_table[temp1])
 8004a40:	8a7b      	ldrh	r3, [r7, #18]
 8004a42:	3318      	adds	r3, #24
 8004a44:	443b      	add	r3, r7
 8004a46:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d311      	bcc.n	8004a76 <rtc_get_time+0xfa>
                {
                    temp -= month_table[temp1]; /* 平年 */
 8004a52:	8a7b      	ldrh	r3, [r7, #18]
 8004a54:	3318      	adds	r3, #24
 8004a56:	443b      	add	r3, r7
 8004a58:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
                {
                    break;
                }
            }

            temp1++;
 8004a64:	8a7b      	ldrh	r3, [r7, #18]
 8004a66:	3301      	adds	r3, #1
 8004a68:	827b      	strh	r3, [r7, #18]
        while (temp >= 28)      /* 超过了一个月 */
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b1b      	cmp	r3, #27
 8004a6e:	d8d5      	bhi.n	8004a1c <rtc_get_time+0xa0>
 8004a70:	e002      	b.n	8004a78 <rtc_get_time+0xfc>
                    break;
 8004a72:	bf00      	nop
 8004a74:	e000      	b.n	8004a78 <rtc_get_time+0xfc>
                    break;
 8004a76:	bf00      	nop
        }

        calendar.month = temp1 + 1; /* 得到月份 */
 8004a78:	8a7b      	ldrh	r3, [r7, #18]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <rtc_get_time+0x1b8>)
 8004a82:	719a      	strb	r2, [r3, #6]
        calendar.date = temp + 1;   /* 得到日期 */
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	4b29      	ldr	r3, [pc, #164]	; (8004b34 <rtc_get_time+0x1b8>)
 8004a8e:	71da      	strb	r2, [r3, #7]
    }

    temp = seccount % 86400;                                                    /* 得到秒钟�????? */
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a26      	ldr	r2, [pc, #152]	; (8004b2c <rtc_get_time+0x1b0>)
 8004a94:	fba2 1203 	umull	r1, r2, r2, r3
 8004a98:	0c12      	lsrs	r2, r2, #16
 8004a9a:	4927      	ldr	r1, [pc, #156]	; (8004b38 <rtc_get_time+0x1bc>)
 8004a9c:	fb01 f202 	mul.w	r2, r1, r2
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
    calendar.hour = temp / 3600;                                                /* 小时 */
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <rtc_get_time+0x1c0>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	0adb      	lsrs	r3, r3, #11
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <rtc_get_time+0x1b8>)
 8004ab2:	701a      	strb	r2, [r3, #0]
    calendar.min = (temp % 3600) / 60;                                          /* 分钟 */
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <rtc_get_time+0x1c0>)
 8004ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8004abc:	0adb      	lsrs	r3, r3, #11
 8004abe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <rtc_get_time+0x1c4>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <rtc_get_time+0x1b8>)
 8004ad4:	705a      	strb	r2, [r3, #1]
    calendar.sec = (temp % 3600) % 60;                                          /* 秒钟 */
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <rtc_get_time+0x1c0>)
 8004ada:	fba2 1203 	umull	r1, r2, r2, r3
 8004ade:	0ad2      	lsrs	r2, r2, #11
 8004ae0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004ae4:	fb01 f202 	mul.w	r2, r1, r2
 8004ae8:	1a9a      	subs	r2, r3, r2
 8004aea:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <rtc_get_time+0x1c4>)
 8004aec:	fba3 1302 	umull	r1, r3, r3, r2
 8004af0:	0959      	lsrs	r1, r3, #5
 8004af2:	460b      	mov	r3, r1
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a5b      	subs	r3, r3, r1
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	1ad1      	subs	r1, r2, r3
 8004afc:	b2ca      	uxtb	r2, r1
 8004afe:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <rtc_get_time+0x1b8>)
 8004b00:	709a      	strb	r2, [r3, #2]
    calendar.week = rtc_get_week(calendar.year, calendar.month, calendar.date); /* 获取星期 */
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <rtc_get_time+0x1b8>)
 8004b04:	889b      	ldrh	r3, [r3, #4]
 8004b06:	4a0b      	ldr	r2, [pc, #44]	; (8004b34 <rtc_get_time+0x1b8>)
 8004b08:	7991      	ldrb	r1, [r2, #6]
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <rtc_get_time+0x1b8>)
 8004b0c:	79d2      	ldrb	r2, [r2, #7]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f818 	bl	8004b44 <rtc_get_week>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461a      	mov	r2, r3
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <rtc_get_time+0x1b8>)
 8004b1a:	721a      	strb	r2, [r3, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	0800fe94 	.word	0x0800fe94
 8004b28:	40002800 	.word	0x40002800
 8004b2c:	c22e4507 	.word	0xc22e4507
 8004b30:	200002bc 	.word	0x200002bc
 8004b34:	2000029c 	.word	0x2000029c
 8004b38:	00015180 	.word	0x00015180
 8004b3c:	91a2b3c5 	.word	0x91a2b3c5
 8004b40:	88888889 	.word	0x88888889

08004b44 <rtc_get_week>:
 * @param       smon  : 月份
 * @param       sday  : 日期
 * @retval      0, 星期�?????; 1 ~ 6: 星期�????? ~ 星期�?????
 */
uint8_t rtc_get_week(uint16_t year, uint8_t month, uint8_t day)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	80fb      	strh	r3, [r7, #6]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	717b      	strb	r3, [r7, #5]
 8004b52:	4613      	mov	r3, r2
 8004b54:	713b      	strb	r3, [r7, #4]
    uint8_t week = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]

    if (month < 3)
 8004b5a:	797b      	ldrb	r3, [r7, #5]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d805      	bhi.n	8004b6c <rtc_get_week+0x28>
    {
        month += 12;
 8004b60:	797b      	ldrb	r3, [r7, #5]
 8004b62:	330c      	adds	r3, #12
 8004b64:	717b      	strb	r3, [r7, #5]
        --year;
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	80fb      	strh	r3, [r7, #6]
    }

    week = (day + 1 + 2 * month + 3 * (month + 1) / 5 + year + (year >> 2) - year / 100 + year / 400) % 7;
 8004b6c:	793b      	ldrb	r3, [r7, #4]
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	797b      	ldrb	r3, [r7, #5]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	18d1      	adds	r1, r2, r3
 8004b76:	797b      	ldrb	r3, [r7, #5]
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <rtc_get_week+0x98>)
 8004b82:	fb82 0203 	smull	r0, r2, r2, r3
 8004b86:	1052      	asrs	r2, r2, #1
 8004b88:	17db      	asrs	r3, r3, #31
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	18ca      	adds	r2, r1, r3
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	4413      	add	r3, r2
 8004b92:	88fa      	ldrh	r2, [r7, #6]
 8004b94:	0892      	lsrs	r2, r2, #2
 8004b96:	b292      	uxth	r2, r2
 8004b98:	4413      	add	r3, r2
 8004b9a:	88fa      	ldrh	r2, [r7, #6]
 8004b9c:	4910      	ldr	r1, [pc, #64]	; (8004be0 <rtc_get_week+0x9c>)
 8004b9e:	fba1 1202 	umull	r1, r2, r1, r2
 8004ba2:	0952      	lsrs	r2, r2, #5
 8004ba4:	b292      	uxth	r2, r2
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	490d      	ldr	r1, [pc, #52]	; (8004be0 <rtc_get_week+0x9c>)
 8004bac:	fba1 1202 	umull	r1, r2, r1, r2
 8004bb0:	09d2      	lsrs	r2, r2, #7
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <rtc_get_week+0xa0>)
 8004bb8:	fb83 1302 	smull	r1, r3, r3, r2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	1099      	asrs	r1, r3, #2
 8004bc0:	17d3      	asrs	r3, r2, #31
 8004bc2:	1ac9      	subs	r1, r1, r3
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	1a5b      	subs	r3, r3, r1
 8004bca:	1ad1      	subs	r1, r2, r3
 8004bcc:	460b      	mov	r3, r1
 8004bce:	73fb      	strb	r3, [r7, #15]
    return week;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	66666667 	.word	0x66666667
 8004be0:	51eb851f 	.word	0x51eb851f
 8004be4:	92492493 	.word	0x92492493

08004be8 <HAL_RTCEx_RTCEventCallback>:
    return T;
}


void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *nhrtc)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	; 0x28
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	6078      	str	r0, [r7, #4]
	u8 datatemp[20] = {'\0'};
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	f107 0310 	add.w	r3, r7, #16
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	60da      	str	r2, [r3, #12]
	rtc_get_time();
 8004c02:	f7ff febb 	bl	800497c <rtc_get_time>
	sprintf((char*)datatemp,"%02d h,%02d m,%02d s",calendar.hour,calendar.min,calendar.sec);
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <HAL_RTCEx_RTCEventCallback+0x5c>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <HAL_RTCEx_RTCEventCallback+0x5c>)
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	4619      	mov	r1, r3
 8004c12:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <HAL_RTCEx_RTCEventCallback+0x5c>)
 8004c14:	789b      	ldrb	r3, [r3, #2]
 8004c16:	f107 000c 	add.w	r0, r7, #12
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	490a      	ldr	r1, [pc, #40]	; (8004c48 <HAL_RTCEx_RTCEventCallback+0x60>)
 8004c20:	f007 fad6 	bl	800c1d0 <siprintf>
	LCD_ShowString(30,150,200,12,12,datatemp);
 8004c24:	f107 030c 	add.w	r3, r7, #12
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	230c      	movs	r3, #12
 8004c30:	22c8      	movs	r2, #200	; 0xc8
 8004c32:	2196      	movs	r1, #150	; 0x96
 8004c34:	201e      	movs	r0, #30
 8004c36:	f7ff f8f9 	bl	8003e2c <LCD_ShowString>
}
 8004c3a:	bf00      	nop
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	2000029c 	.word	0x2000029c
 8004c48:	0800fea0 	.word	0x0800fea0

08004c4c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *nhrtc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8004c54:	2120      	movs	r1, #32
 8004c56:	4808      	ldr	r0, [pc, #32]	; (8004c78 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8004c58:	f001 fb6a 	bl	8006330 <HAL_GPIO_TogglePin>
	LCD_ShowString(30,170,200,12,12,"Alarm OK!");
 8004c5c:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <HAL_RTC_AlarmAEventCallback+0x30>)
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	230c      	movs	r3, #12
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	230c      	movs	r3, #12
 8004c66:	22c8      	movs	r2, #200	; 0xc8
 8004c68:	21aa      	movs	r1, #170	; 0xaa
 8004c6a:	201e      	movs	r0, #30
 8004c6c:	f7ff f8de 	bl	8003e2c <LCD_ShowString>
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40011800 	.word	0x40011800
 8004c7c:	0800feb8 	.word	0x0800feb8

08004c80 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004c84:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004c86:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <MX_SPI2_Init+0x68>)
 8004c88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004c8a:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc4:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004ccc:	220a      	movs	r2, #10
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004cd0:	4804      	ldr	r0, [pc, #16]	; (8004ce4 <MX_SPI2_Init+0x64>)
 8004cd2:	f002 fa94 	bl	80071fe <HAL_SPI_Init>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004cdc:	f7ff fdca 	bl	8004874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004ce0:	bf00      	nop
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	200002c0 	.word	0x200002c0
 8004ce8:	40003800 	.word	0x40003800

08004cec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf4:	f107 0310 	add.w	r3, r7, #16
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	605a      	str	r2, [r3, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
 8004d00:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <HAL_SPI_MspInit+0x8c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d131      	bne.n	8004d70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_SPI_MspInit+0x90>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	4a1a      	ldr	r2, [pc, #104]	; (8004d7c <HAL_SPI_MspInit+0x90>)
 8004d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d16:	61d3      	str	r3, [r2, #28]
 8004d18:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <HAL_SPI_MspInit+0x90>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d24:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <HAL_SPI_MspInit+0x90>)
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <HAL_SPI_MspInit+0x90>)
 8004d2a:	f043 0308 	orr.w	r3, r3, #8
 8004d2e:	6193      	str	r3, [r2, #24]
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_SPI_MspInit+0x90>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004d3c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d42:	2302      	movs	r3, #2
 8004d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d46:	2303      	movs	r3, #3
 8004d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d4a:	f107 0310 	add.w	r3, r7, #16
 8004d4e:	4619      	mov	r1, r3
 8004d50:	480b      	ldr	r0, [pc, #44]	; (8004d80 <HAL_SPI_MspInit+0x94>)
 8004d52:	f001 f941 	bl	8005fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d64:	f107 0310 	add.w	r3, r7, #16
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4805      	ldr	r0, [pc, #20]	; (8004d80 <HAL_SPI_MspInit+0x94>)
 8004d6c:	f001 f934 	bl	8005fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004d70:	bf00      	nop
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40003800 	.word	0x40003800
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40010c00 	.word	0x40010c00

08004d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004d8a:	4b18      	ldr	r3, [pc, #96]	; (8004dec <HAL_MspInit+0x68>)
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	4a17      	ldr	r2, [pc, #92]	; (8004dec <HAL_MspInit+0x68>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6193      	str	r3, [r2, #24]
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <HAL_MspInit+0x68>)
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	4b12      	ldr	r3, [pc, #72]	; (8004dec <HAL_MspInit+0x68>)
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4a11      	ldr	r2, [pc, #68]	; (8004dec <HAL_MspInit+0x68>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dac:	61d3      	str	r3, [r2, #28]
 8004dae:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <HAL_MspInit+0x68>)
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	607b      	str	r3, [r7, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004dba:	2200      	movs	r2, #0
 8004dbc:	210f      	movs	r1, #15
 8004dbe:	f06f 0001 	mvn.w	r0, #1
 8004dc2:	f000 ff9c 	bl	8005cfe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <HAL_MspInit+0x6c>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <HAL_MspInit+0x6c>)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40010000 	.word	0x40010000

08004df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08e      	sub	sp, #56	; 0x38
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004e0a:	4b34      	ldr	r3, [pc, #208]	; (8004edc <HAL_InitTick+0xe8>)
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	4a33      	ldr	r2, [pc, #204]	; (8004edc <HAL_InitTick+0xe8>)
 8004e10:	f043 0310 	orr.w	r3, r3, #16
 8004e14:	61d3      	str	r3, [r2, #28]
 8004e16:	4b31      	ldr	r3, [pc, #196]	; (8004edc <HAL_InitTick+0xe8>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e22:	f107 0210 	add.w	r2, r7, #16
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 fe97 	bl	8006b60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f001 fe68 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8004e40:	6378      	str	r0, [r7, #52]	; 0x34
 8004e42:	e004      	b.n	8004e4e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004e44:	f001 fe64 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	4a23      	ldr	r2, [pc, #140]	; (8004ee0 <HAL_InitTick+0xec>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	0c9b      	lsrs	r3, r3, #18
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004e5c:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <HAL_InitTick+0xf0>)
 8004e5e:	4a22      	ldr	r2, [pc, #136]	; (8004ee8 <HAL_InitTick+0xf4>)
 8004e60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_InitTick+0xf0>)
 8004e64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <HAL_InitTick+0xf0>)
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004e70:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <HAL_InitTick+0xf0>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e76:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_InitTick+0xf0>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e7c:	4b19      	ldr	r3, [pc, #100]	; (8004ee4 <HAL_InitTick+0xf0>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004e82:	4818      	ldr	r0, [pc, #96]	; (8004ee4 <HAL_InitTick+0xf0>)
 8004e84:	f002 fa8c 	bl	80073a0 <HAL_TIM_Base_Init>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004e8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d11b      	bne.n	8004ece <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004e96:	4813      	ldr	r0, [pc, #76]	; (8004ee4 <HAL_InitTick+0xf0>)
 8004e98:	f002 fada 	bl	8007450 <HAL_TIM_Base_Start_IT>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d111      	bne.n	8004ece <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004eaa:	2036      	movs	r0, #54	; 0x36
 8004eac:	f000 ff43 	bl	8005d36 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b0f      	cmp	r3, #15
 8004eb4:	d808      	bhi.n	8004ec8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	2036      	movs	r0, #54	; 0x36
 8004ebc:	f000 ff1f 	bl	8005cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <HAL_InitTick+0xf8>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e002      	b.n	8004ece <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004ece:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3738      	adds	r7, #56	; 0x38
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	431bde83 	.word	0x431bde83
 8004ee4:	20000318 	.word	0x20000318
 8004ee8:	40001000 	.word	0x40001000
 8004eec:	2000000c 	.word	0x2000000c

08004ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ef4:	e7fe      	b.n	8004ef4 <NMI_Handler+0x4>

08004ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004efa:	e7fe      	b.n	8004efa <HardFault_Handler+0x4>

08004efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f00:	e7fe      	b.n	8004f00 <MemManage_Handler+0x4>

08004f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f02:	b480      	push	{r7}
 8004f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f06:	e7fe      	b.n	8004f06 <BusFault_Handler+0x4>

08004f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f0c:	e7fe      	b.n	8004f0c <UsageFault_Handler+0x4>

08004f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr
	...

08004f1c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <RTC_IRQHandler+0x10>)
 8004f22:	f002 f92c 	bl	800717e <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200002a8 	.word	0x200002a8

08004f30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <USART1_IRQHandler+0x10>)
 8004f36:	f002 fd77 	bl	8007a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000364 	.word	0x20000364

08004f44 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004f48:	4802      	ldr	r0, [pc, #8]	; (8004f54 <RTC_Alarm_IRQHandler+0x10>)
 8004f4a:	f002 f871 	bl	8007030 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200002a8 	.word	0x200002a8

08004f58 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f5c:	4802      	ldr	r0, [pc, #8]	; (8004f68 <TIM6_IRQHandler+0x10>)
 8004f5e:	f002 fad7 	bl	8007510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000318 	.word	0x20000318

08004f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return 1;
 8004f70:	2301      	movs	r3, #1
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <_kill>:

int _kill(int pid, int sig)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f84:	f006 fa72 	bl	800b46c <__errno>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2216      	movs	r2, #22
 8004f8c:	601a      	str	r2, [r3, #0]
  return -1;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <_exit>:

void _exit (int status)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff ffe7 	bl	8004f7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8004fac:	e7fe      	b.n	8004fac <_exit+0x12>

08004fae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b086      	sub	sp, #24
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	e00a      	b.n	8004fd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004fc0:	f3af 8000 	nop.w
 8004fc4:	4601      	mov	r1, r0
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	60ba      	str	r2, [r7, #8]
 8004fcc:	b2ca      	uxtb	r2, r1
 8004fce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	dbf0      	blt.n	8004fc0 <_read+0x12>
  }

  return len;
 8004fde:	687b      	ldr	r3, [r7, #4]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e009      	b.n	800500e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	60ba      	str	r2, [r7, #8]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f8f6 	bl	80051f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	3301      	adds	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	dbf1      	blt.n	8004ffa <_write+0x12>
  }
  return len;
 8005016:	687b      	ldr	r3, [r7, #4]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <_close>:

int _close(int file)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr

08005036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005046:	605a      	str	r2, [r3, #4]
  return 0;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr

08005054 <_isatty>:

int _isatty(int file)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800505c:	2301      	movs	r3, #1
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005088:	4a14      	ldr	r2, [pc, #80]	; (80050dc <_sbrk+0x5c>)
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <_sbrk+0x60>)
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <_sbrk+0x64>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800509c:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <_sbrk+0x64>)
 800509e:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <_sbrk+0x68>)
 80050a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <_sbrk+0x64>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d207      	bcs.n	80050c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050b0:	f006 f9dc 	bl	800b46c <__errno>
 80050b4:	4603      	mov	r3, r0
 80050b6:	220c      	movs	r2, #12
 80050b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	e009      	b.n	80050d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050c0:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <_sbrk+0x64>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <_sbrk+0x64>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <_sbrk+0x64>)
 80050d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050d2:	68fb      	ldr	r3, [r7, #12]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20010000 	.word	0x20010000
 80050e0:	00000400 	.word	0x00000400
 80050e4:	20000360 	.word	0x20000360
 80050e8:	20001d08 	.word	0x20001d08

080050ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050f0:	bf00      	nop
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr

080050f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <MX_USART1_UART_Init+0x4c>)
 80050fe:	4a12      	ldr	r2, [pc, #72]	; (8005148 <MX_USART1_UART_Init+0x50>)
 8005100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005102:	4b10      	ldr	r3, [pc, #64]	; (8005144 <MX_USART1_UART_Init+0x4c>)
 8005104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800510a:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <MX_USART1_UART_Init+0x4c>)
 800510c:	2200      	movs	r2, #0
 800510e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <MX_USART1_UART_Init+0x4c>)
 8005112:	2200      	movs	r2, #0
 8005114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <MX_USART1_UART_Init+0x4c>)
 8005118:	2200      	movs	r2, #0
 800511a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800511c:	4b09      	ldr	r3, [pc, #36]	; (8005144 <MX_USART1_UART_Init+0x4c>)
 800511e:	220c      	movs	r2, #12
 8005120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <MX_USART1_UART_Init+0x4c>)
 8005124:	2200      	movs	r2, #0
 8005126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <MX_USART1_UART_Init+0x4c>)
 800512a:	2200      	movs	r2, #0
 800512c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800512e:	4805      	ldr	r0, [pc, #20]	; (8005144 <MX_USART1_UART_Init+0x4c>)
 8005130:	f002 fba6 	bl	8007880 <HAL_UART_Init>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800513a:	f7ff fb9b 	bl	8004874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000364 	.word	0x20000364
 8005148:	40013800 	.word	0x40013800

0800514c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005154:	f107 0310 	add.w	r3, r7, #16
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <HAL_UART_MspInit+0x9c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d139      	bne.n	80051e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800516c:	4b1f      	ldr	r3, [pc, #124]	; (80051ec <HAL_UART_MspInit+0xa0>)
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <HAL_UART_MspInit+0xa0>)
 8005172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005176:	6193      	str	r3, [r2, #24]
 8005178:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <HAL_UART_MspInit+0xa0>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <HAL_UART_MspInit+0xa0>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	4a18      	ldr	r2, [pc, #96]	; (80051ec <HAL_UART_MspInit+0xa0>)
 800518a:	f043 0304 	orr.w	r3, r3, #4
 800518e:	6193      	str	r3, [r2, #24]
 8005190:	4b16      	ldr	r3, [pc, #88]	; (80051ec <HAL_UART_MspInit+0xa0>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800519c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a2:	2302      	movs	r3, #2
 80051a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051a6:	2303      	movs	r3, #3
 80051a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051aa:	f107 0310 	add.w	r3, r7, #16
 80051ae:	4619      	mov	r1, r3
 80051b0:	480f      	ldr	r0, [pc, #60]	; (80051f0 <HAL_UART_MspInit+0xa4>)
 80051b2:	f000 ff11 	bl	8005fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80051b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c4:	f107 0310 	add.w	r3, r7, #16
 80051c8:	4619      	mov	r1, r3
 80051ca:	4809      	ldr	r0, [pc, #36]	; (80051f0 <HAL_UART_MspInit+0xa4>)
 80051cc:	f000 ff04 	bl	8005fd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80051d0:	2200      	movs	r2, #0
 80051d2:	2105      	movs	r1, #5
 80051d4:	2025      	movs	r0, #37	; 0x25
 80051d6:	f000 fd92 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80051da:	2025      	movs	r0, #37	; 0x25
 80051dc:	f000 fdab 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80051e0:	bf00      	nop
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40013800 	.word	0x40013800
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40010800 	.word	0x40010800

080051f4 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	uint8_t c=ch;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 8005202:	f107 010f 	add.w	r1, r7, #15
 8005206:	2364      	movs	r3, #100	; 0x64
 8005208:	2201      	movs	r2, #1
 800520a:	4804      	ldr	r0, [pc, #16]	; (800521c <__io_putchar+0x28>)
 800520c:	f002 fb88 	bl	8007920 <HAL_UART_Transmit>
	return ch;
 8005210:	687b      	ldr	r3, [r7, #4]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000364 	.word	0x20000364

08005220 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005220:	f7ff ff64 	bl	80050ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005224:	480b      	ldr	r0, [pc, #44]	; (8005254 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005226:	490c      	ldr	r1, [pc, #48]	; (8005258 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005228:	4a0c      	ldr	r2, [pc, #48]	; (800525c <LoopFillZerobss+0x16>)
  movs r3, #0
 800522a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800522c:	e002      	b.n	8005234 <LoopCopyDataInit>

0800522e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800522e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005232:	3304      	adds	r3, #4

08005234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005238:	d3f9      	bcc.n	800522e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800523c:	4c09      	ldr	r4, [pc, #36]	; (8005264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800523e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005240:	e001      	b.n	8005246 <LoopFillZerobss>

08005242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005244:	3204      	adds	r2, #4

08005246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005248:	d3fb      	bcc.n	8005242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800524a:	f006 f915 	bl	800b478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800524e:	f7ff fa1f 	bl	8004690 <main>
  bx lr
 8005252:	4770      	bx	lr
  ldr r0, =_sdata
 8005254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005258:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800525c:	08011bd4 	.word	0x08011bd4
  ldr r2, =_sbss
 8005260:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8005264:	20001d08 	.word	0x20001d08

08005268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005268:	e7fe      	b.n	8005268 <ADC1_2_IRQHandler>
	...

0800526c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005270:	4b08      	ldr	r3, [pc, #32]	; (8005294 <HAL_Init+0x28>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a07      	ldr	r2, [pc, #28]	; (8005294 <HAL_Init+0x28>)
 8005276:	f043 0310 	orr.w	r3, r3, #16
 800527a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800527c:	2003      	movs	r0, #3
 800527e:	f000 fd33 	bl	8005ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005282:	200f      	movs	r0, #15
 8005284:	f7ff fdb6 	bl	8004df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005288:	f7ff fd7c 	bl	8004d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40022000 	.word	0x40022000

08005298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_IncTick+0x1c>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_IncTick+0x20>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4413      	add	r3, r2
 80052a8:	4a03      	ldr	r2, [pc, #12]	; (80052b8 <HAL_IncTick+0x20>)
 80052aa:	6013      	str	r3, [r2, #0]
}
 80052ac:	bf00      	nop
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	20000010 	.word	0x20000010
 80052b8:	200003ac 	.word	0x200003ac

080052bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return uwTick;
 80052c0:	4b02      	ldr	r3, [pc, #8]	; (80052cc <HAL_GetTick+0x10>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr
 80052cc:	200003ac 	.word	0x200003ac

080052d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052d8:	f7ff fff0 	bl	80052bc <HAL_GetTick>
 80052dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e8:	d005      	beq.n	80052f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <HAL_Delay+0x44>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052f6:	bf00      	nop
 80052f8:	f7ff ffe0 	bl	80052bc <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d8f7      	bhi.n	80052f8 <HAL_Delay+0x28>
  {
  }
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000010 	.word	0x20000010

08005318 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e0ce      	b.n	80054d8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fe fdf4 	bl	8003f44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fbd7 	bl	8005b10 <ADC_ConversionStop_Disable>
 8005362:	4603      	mov	r3, r0
 8005364:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 80a9 	bne.w	80054c6 <HAL_ADC_Init+0x1ae>
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 80a5 	bne.w	80054c6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005384:	f023 0302 	bic.w	r3, r3, #2
 8005388:	f043 0202 	orr.w	r2, r3, #2
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4951      	ldr	r1, [pc, #324]	; (80054e0 <HAL_ADC_Init+0x1c8>)
 800539a:	428b      	cmp	r3, r1
 800539c:	d10a      	bne.n	80053b4 <HAL_ADC_Init+0x9c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053a6:	d002      	beq.n	80053ae <HAL_ADC_Init+0x96>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	e004      	b.n	80053b8 <HAL_ADC_Init+0xa0>
 80053ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80053b2:	e001      	b.n	80053b8 <HAL_ADC_Init+0xa0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80053b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	7b1b      	ldrb	r3, [r3, #12]
 80053be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80053c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d0:	d003      	beq.n	80053da <HAL_ADC_Init+0xc2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d102      	bne.n	80053e0 <HAL_ADC_Init+0xc8>
 80053da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053de:	e000      	b.n	80053e2 <HAL_ADC_Init+0xca>
 80053e0:	2300      	movs	r3, #0
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	7d1b      	ldrb	r3, [r3, #20]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d119      	bne.n	8005424 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7b1b      	ldrb	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	035a      	lsls	r2, r3, #13
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e00b      	b.n	8005424 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	f043 0201 	orr.w	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	430a      	orrs	r2, r1
 8005436:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <HAL_ADC_Init+0x1cc>)
 8005440:	4013      	ands	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	430b      	orrs	r3, r1
 800544a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005454:	d003      	beq.n	800545e <HAL_ADC_Init+0x146>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d104      	bne.n	8005468 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	3b01      	subs	r3, #1
 8005464:	051b      	lsls	r3, r3, #20
 8005466:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	430a      	orrs	r2, r1
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <HAL_ADC_Init+0x1d0>)
 8005484:	4013      	ands	r3, r2
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	d10b      	bne.n	80054a4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	f023 0303 	bic.w	r3, r3, #3
 800549a:	f043 0201 	orr.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80054a2:	e018      	b.n	80054d6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	f023 0312 	bic.w	r3, r3, #18
 80054ac:	f043 0210 	orr.w	r2, r3, #16
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	f043 0201 	orr.w	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80054c4:	e007      	b.n	80054d6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	f043 0210 	orr.w	r2, r3, #16
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40013c00 	.word	0x40013c00
 80054e4:	ffe1f7fd 	.word	0xffe1f7fd
 80054e8:	ff1f0efe 	.word	0xff1f0efe

080054ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_ADC_Start+0x1a>
 8005502:	2302      	movs	r3, #2
 8005504:	e098      	b.n	8005638 <HAL_ADC_Start+0x14c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 faa4 	bl	8005a5c <ADC_Enable>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f040 8087 	bne.w	800562e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a41      	ldr	r2, [pc, #260]	; (8005640 <HAL_ADC_Start+0x154>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d105      	bne.n	800554a <HAL_ADC_Start+0x5e>
 800553e:	4b41      	ldr	r3, [pc, #260]	; (8005644 <HAL_ADC_Start+0x158>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d115      	bne.n	8005576 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005560:	2b00      	cmp	r3, #0
 8005562:	d026      	beq.n	80055b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800556c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005574:	e01d      	b.n	80055b2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2f      	ldr	r2, [pc, #188]	; (8005644 <HAL_ADC_Start+0x158>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_ADC_Start+0xaa>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2b      	ldr	r2, [pc, #172]	; (8005640 <HAL_ADC_Start+0x154>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d10d      	bne.n	80055b2 <HAL_ADC_Start+0xc6>
 8005596:	4b2b      	ldr	r3, [pc, #172]	; (8005644 <HAL_ADC_Start+0x158>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d006      	beq.n	80055cc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	f023 0206 	bic.w	r2, r3, #6
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80055ca:	e002      	b.n	80055d2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f06f 0202 	mvn.w	r2, #2
 80055e2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80055ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80055f2:	d113      	bne.n	800561c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80055f8:	4a11      	ldr	r2, [pc, #68]	; (8005640 <HAL_ADC_Start+0x154>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d105      	bne.n	800560a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80055fe:	4b11      	ldr	r3, [pc, #68]	; (8005644 <HAL_ADC_Start+0x158>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005606:	2b00      	cmp	r3, #0
 8005608:	d108      	bne.n	800561c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005618:	609a      	str	r2, [r3, #8]
 800561a:	e00c      	b.n	8005636 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800562a:	609a      	str	r2, [r3, #8]
 800562c:	e003      	b.n	8005636 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40012800 	.word	0x40012800
 8005644:	40012400 	.word	0x40012400

08005648 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800565e:	f7ff fe2d 	bl	80052bc <HAL_GetTick>
 8005662:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0d3      	b.n	8005832 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d131      	bne.n	80056fc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d12a      	bne.n	80056fc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80056a6:	e021      	b.n	80056ec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d01d      	beq.n	80056ec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_ADC_PollForConversion+0x7e>
 80056b6:	f7ff fe01 	bl	80052bc <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d212      	bcs.n	80056ec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	f043 0204 	orr.w	r2, r3, #4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e0a2      	b.n	8005832 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0d6      	beq.n	80056a8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80056fa:	e070      	b.n	80057de <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80056fc:	4b4f      	ldr	r3, [pc, #316]	; (800583c <HAL_ADC_PollForConversion+0x1f4>)
 80056fe:	681c      	ldr	r4, [r3, #0]
 8005700:	2002      	movs	r0, #2
 8005702:	f001 fb31 	bl	8006d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8005706:	4603      	mov	r3, r0
 8005708:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6919      	ldr	r1, [r3, #16]
 8005712:	4b4b      	ldr	r3, [pc, #300]	; (8005840 <HAL_ADC_PollForConversion+0x1f8>)
 8005714:	400b      	ands	r3, r1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d118      	bne.n	800574c <HAL_ADC_PollForConversion+0x104>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68d9      	ldr	r1, [r3, #12]
 8005720:	4b48      	ldr	r3, [pc, #288]	; (8005844 <HAL_ADC_PollForConversion+0x1fc>)
 8005722:	400b      	ands	r3, r1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d111      	bne.n	800574c <HAL_ADC_PollForConversion+0x104>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6919      	ldr	r1, [r3, #16]
 800572e:	4b46      	ldr	r3, [pc, #280]	; (8005848 <HAL_ADC_PollForConversion+0x200>)
 8005730:	400b      	ands	r3, r1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d108      	bne.n	8005748 <HAL_ADC_PollForConversion+0x100>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68d9      	ldr	r1, [r3, #12]
 800573c:	4b43      	ldr	r3, [pc, #268]	; (800584c <HAL_ADC_PollForConversion+0x204>)
 800573e:	400b      	ands	r3, r1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_ADC_PollForConversion+0x100>
 8005744:	2314      	movs	r3, #20
 8005746:	e020      	b.n	800578a <HAL_ADC_PollForConversion+0x142>
 8005748:	2329      	movs	r3, #41	; 0x29
 800574a:	e01e      	b.n	800578a <HAL_ADC_PollForConversion+0x142>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6919      	ldr	r1, [r3, #16]
 8005752:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <HAL_ADC_PollForConversion+0x200>)
 8005754:	400b      	ands	r3, r1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_ADC_PollForConversion+0x120>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68d9      	ldr	r1, [r3, #12]
 8005760:	4b3a      	ldr	r3, [pc, #232]	; (800584c <HAL_ADC_PollForConversion+0x204>)
 8005762:	400b      	ands	r3, r1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00d      	beq.n	8005784 <HAL_ADC_PollForConversion+0x13c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6919      	ldr	r1, [r3, #16]
 800576e:	4b38      	ldr	r3, [pc, #224]	; (8005850 <HAL_ADC_PollForConversion+0x208>)
 8005770:	400b      	ands	r3, r1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d108      	bne.n	8005788 <HAL_ADC_PollForConversion+0x140>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68d9      	ldr	r1, [r3, #12]
 800577c:	4b34      	ldr	r3, [pc, #208]	; (8005850 <HAL_ADC_PollForConversion+0x208>)
 800577e:	400b      	ands	r3, r1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_ADC_PollForConversion+0x140>
 8005784:	2354      	movs	r3, #84	; 0x54
 8005786:	e000      	b.n	800578a <HAL_ADC_PollForConversion+0x142>
 8005788:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005790:	e021      	b.n	80057d6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d01a      	beq.n	80057d0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d007      	beq.n	80057b0 <HAL_ADC_PollForConversion+0x168>
 80057a0:	f7ff fd8c 	bl	80052bc <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d20f      	bcs.n	80057d0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d90b      	bls.n	80057d0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	f043 0204 	orr.w	r2, r3, #4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e030      	b.n	8005832 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3301      	adds	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d8d9      	bhi.n	8005792 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0212 	mvn.w	r2, #18
 80057e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80057fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005802:	d115      	bne.n	8005830 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005808:	2b00      	cmp	r3, #0
 800580a:	d111      	bne.n	8005830 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	f043 0201 	orr.w	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	bd90      	pop	{r4, r7, pc}
 800583a:	bf00      	nop
 800583c:	20000008 	.word	0x20000008
 8005840:	24924924 	.word	0x24924924
 8005844:	00924924 	.word	0x00924924
 8005848:	12492492 	.word	0x12492492
 800584c:	00492492 	.word	0x00492492
 8005850:	00249249 	.word	0x00249249

08005854 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_ADC_ConfigChannel+0x20>
 8005888:	2302      	movs	r3, #2
 800588a:	e0dc      	b.n	8005a46 <HAL_ADC_ConfigChannel+0x1da>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b06      	cmp	r3, #6
 800589a:	d81c      	bhi.n	80058d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	3b05      	subs	r3, #5
 80058ae:	221f      	movs	r2, #31
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	4019      	ands	r1, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	3b05      	subs	r3, #5
 80058c8:	fa00 f203 	lsl.w	r2, r0, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	635a      	str	r2, [r3, #52]	; 0x34
 80058d4:	e03c      	b.n	8005950 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d81c      	bhi.n	8005918 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	3b23      	subs	r3, #35	; 0x23
 80058f0:	221f      	movs	r2, #31
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	4019      	ands	r1, r3
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	3b23      	subs	r3, #35	; 0x23
 800590a:	fa00 f203 	lsl.w	r2, r0, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
 8005916:	e01b      	b.n	8005950 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	3b41      	subs	r3, #65	; 0x41
 800592a:	221f      	movs	r2, #31
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	43db      	mvns	r3, r3
 8005932:	4019      	ands	r1, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	3b41      	subs	r3, #65	; 0x41
 8005944:	fa00 f203 	lsl.w	r2, r0, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b09      	cmp	r3, #9
 8005956:	d91c      	bls.n	8005992 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68d9      	ldr	r1, [r3, #12]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4613      	mov	r3, r2
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4413      	add	r3, r2
 8005968:	3b1e      	subs	r3, #30
 800596a:	2207      	movs	r2, #7
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	4019      	ands	r1, r3
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	6898      	ldr	r0, [r3, #8]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4613      	mov	r3, r2
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	4413      	add	r3, r2
 8005982:	3b1e      	subs	r3, #30
 8005984:	fa00 f203 	lsl.w	r2, r0, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	60da      	str	r2, [r3, #12]
 8005990:	e019      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6919      	ldr	r1, [r3, #16]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	4413      	add	r3, r2
 80059a2:	2207      	movs	r2, #7
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	4019      	ands	r1, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	6898      	ldr	r0, [r3, #8]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4613      	mov	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4413      	add	r3, r2
 80059ba:	fa00 f203 	lsl.w	r2, r0, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d003      	beq.n	80059d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80059d2:	2b11      	cmp	r3, #17
 80059d4:	d132      	bne.n	8005a3c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <HAL_ADC_ConfigChannel+0x1e4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d125      	bne.n	8005a2c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d126      	bne.n	8005a3c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80059fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b10      	cmp	r3, #16
 8005a04:	d11a      	bne.n	8005a3c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <HAL_ADC_ConfigChannel+0x1e8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <HAL_ADC_ConfigChannel+0x1ec>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	0c9a      	lsrs	r2, r3, #18
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a1c:	e002      	b.n	8005a24 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f9      	bne.n	8005a1e <HAL_ADC_ConfigChannel+0x1b2>
 8005a2a:	e007      	b.n	8005a3c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr
 8005a50:	40012400 	.word	0x40012400
 8005a54:	20000008 	.word	0x20000008
 8005a58:	431bde83 	.word	0x431bde83

08005a5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d040      	beq.n	8005afc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005a8a:	4b1f      	ldr	r3, [pc, #124]	; (8005b08 <ADC_Enable+0xac>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <ADC_Enable+0xb0>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	0c9b      	lsrs	r3, r3, #18
 8005a96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005a98:	e002      	b.n	8005aa0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f9      	bne.n	8005a9a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005aa6:	f7ff fc09 	bl	80052bc <HAL_GetTick>
 8005aaa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005aac:	e01f      	b.n	8005aee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005aae:	f7ff fc05 	bl	80052bc <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d918      	bls.n	8005aee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d011      	beq.n	8005aee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	f043 0210 	orr.w	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	f043 0201 	orr.w	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e007      	b.n	8005afe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d1d8      	bne.n	8005aae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000008 	.word	0x20000008
 8005b0c:	431bde83 	.word	0x431bde83

08005b10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d12e      	bne.n	8005b88 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b3a:	f7ff fbbf 	bl	80052bc <HAL_GetTick>
 8005b3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005b40:	e01b      	b.n	8005b7a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b42:	f7ff fbbb 	bl	80052bc <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d914      	bls.n	8005b7a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d10d      	bne.n	8005b7a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	f043 0210 	orr.w	r2, r3, #16
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	f043 0201 	orr.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e007      	b.n	8005b8a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d0dc      	beq.n	8005b42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bc6:	4a04      	ldr	r2, [pc, #16]	; (8005bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	60d3      	str	r3, [r2, #12]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	e000ed00 	.word	0xe000ed00

08005bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005be0:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	0a1b      	lsrs	r3, r3, #8
 8005be6:	f003 0307 	and.w	r3, r3, #7
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	e000ed00 	.word	0xe000ed00

08005bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	db0b      	blt.n	8005c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	f003 021f 	and.w	r2, r3, #31
 8005c10:	4906      	ldr	r1, [pc, #24]	; (8005c2c <__NVIC_EnableIRQ+0x34>)
 8005c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	2001      	movs	r0, #1
 8005c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr
 8005c2c:	e000e100 	.word	0xe000e100

08005c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	6039      	str	r1, [r7, #0]
 8005c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	db0a      	blt.n	8005c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	490c      	ldr	r1, [pc, #48]	; (8005c7c <__NVIC_SetPriority+0x4c>)
 8005c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c4e:	0112      	lsls	r2, r2, #4
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	440b      	add	r3, r1
 8005c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c58:	e00a      	b.n	8005c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	4908      	ldr	r1, [pc, #32]	; (8005c80 <__NVIC_SetPriority+0x50>)
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	3b04      	subs	r3, #4
 8005c68:	0112      	lsls	r2, r2, #4
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	761a      	strb	r2, [r3, #24]
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	e000e100 	.word	0xe000e100
 8005c80:	e000ed00 	.word	0xe000ed00

08005c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b089      	sub	sp, #36	; 0x24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f1c3 0307 	rsb	r3, r3, #7
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	bf28      	it	cs
 8005ca2:	2304      	movcs	r3, #4
 8005ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	2b06      	cmp	r3, #6
 8005cac:	d902      	bls.n	8005cb4 <NVIC_EncodePriority+0x30>
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3b03      	subs	r3, #3
 8005cb2:	e000      	b.n	8005cb6 <NVIC_EncodePriority+0x32>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd6:	43d9      	mvns	r1, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cdc:	4313      	orrs	r3, r2
         );
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3724      	adds	r7, #36	; 0x24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff4f 	bl	8005b94 <__NVIC_SetPriorityGrouping>
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	4603      	mov	r3, r0
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d10:	f7ff ff64 	bl	8005bdc <__NVIC_GetPriorityGrouping>
 8005d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	6978      	ldr	r0, [r7, #20]
 8005d1c:	f7ff ffb2 	bl	8005c84 <NVIC_EncodePriority>
 8005d20:	4602      	mov	r2, r0
 8005d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d26:	4611      	mov	r1, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ff81 	bl	8005c30 <__NVIC_SetPriority>
}
 8005d2e:	bf00      	nop
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ff57 	bl	8005bf8 <__NVIC_EnableIRQ>
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d008      	beq.n	8005d7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e020      	b.n	8005dbe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 020e 	bic.w	r2, r2, #14
 8005d8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0201 	bic.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da4:	2101      	movs	r1, #1
 8005da6:	fa01 f202 	lsl.w	r2, r1, r2
 8005daa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d005      	beq.n	8005dec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2204      	movs	r2, #4
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
 8005dea:	e0d6      	b.n	8005f9a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 020e 	bic.w	r2, r2, #14
 8005dfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	4b64      	ldr	r3, [pc, #400]	; (8005fa4 <HAL_DMA_Abort_IT+0x1dc>)
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d958      	bls.n	8005eca <HAL_DMA_Abort_IT+0x102>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a62      	ldr	r2, [pc, #392]	; (8005fa8 <HAL_DMA_Abort_IT+0x1e0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d04f      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0xfa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a61      	ldr	r2, [pc, #388]	; (8005fac <HAL_DMA_Abort_IT+0x1e4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d048      	beq.n	8005ebe <HAL_DMA_Abort_IT+0xf6>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a5f      	ldr	r2, [pc, #380]	; (8005fb0 <HAL_DMA_Abort_IT+0x1e8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d040      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0xf0>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a5e      	ldr	r2, [pc, #376]	; (8005fb4 <HAL_DMA_Abort_IT+0x1ec>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d038      	beq.n	8005eb2 <HAL_DMA_Abort_IT+0xea>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a5c      	ldr	r2, [pc, #368]	; (8005fb8 <HAL_DMA_Abort_IT+0x1f0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d030      	beq.n	8005eac <HAL_DMA_Abort_IT+0xe4>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a5b      	ldr	r2, [pc, #364]	; (8005fbc <HAL_DMA_Abort_IT+0x1f4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d028      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0xde>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a52      	ldr	r2, [pc, #328]	; (8005fa4 <HAL_DMA_Abort_IT+0x1dc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d020      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0xd8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a57      	ldr	r2, [pc, #348]	; (8005fc0 <HAL_DMA_Abort_IT+0x1f8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d019      	beq.n	8005e9c <HAL_DMA_Abort_IT+0xd4>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a55      	ldr	r2, [pc, #340]	; (8005fc4 <HAL_DMA_Abort_IT+0x1fc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d012      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xd0>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a54      	ldr	r2, [pc, #336]	; (8005fc8 <HAL_DMA_Abort_IT+0x200>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00a      	beq.n	8005e92 <HAL_DMA_Abort_IT+0xca>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a52      	ldr	r2, [pc, #328]	; (8005fcc <HAL_DMA_Abort_IT+0x204>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d102      	bne.n	8005e8c <HAL_DMA_Abort_IT+0xc4>
 8005e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e8a:	e01b      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e90:	e018      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e96:	e015      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	e013      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e011      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ea4:	e00e      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005ea6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005eaa:	e00b      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005eb0:	e008      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eb6:	e005      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ebc:	e002      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005ebe:	2310      	movs	r3, #16
 8005ec0:	e000      	b.n	8005ec4 <HAL_DMA_Abort_IT+0xfc>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4a42      	ldr	r2, [pc, #264]	; (8005fd0 <HAL_DMA_Abort_IT+0x208>)
 8005ec6:	6053      	str	r3, [r2, #4]
 8005ec8:	e057      	b.n	8005f7a <HAL_DMA_Abort_IT+0x1b2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a36      	ldr	r2, [pc, #216]	; (8005fa8 <HAL_DMA_Abort_IT+0x1e0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d04f      	beq.n	8005f74 <HAL_DMA_Abort_IT+0x1ac>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a34      	ldr	r2, [pc, #208]	; (8005fac <HAL_DMA_Abort_IT+0x1e4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d048      	beq.n	8005f70 <HAL_DMA_Abort_IT+0x1a8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a33      	ldr	r2, [pc, #204]	; (8005fb0 <HAL_DMA_Abort_IT+0x1e8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d040      	beq.n	8005f6a <HAL_DMA_Abort_IT+0x1a2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a31      	ldr	r2, [pc, #196]	; (8005fb4 <HAL_DMA_Abort_IT+0x1ec>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d038      	beq.n	8005f64 <HAL_DMA_Abort_IT+0x19c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a30      	ldr	r2, [pc, #192]	; (8005fb8 <HAL_DMA_Abort_IT+0x1f0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d030      	beq.n	8005f5e <HAL_DMA_Abort_IT+0x196>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2e      	ldr	r2, [pc, #184]	; (8005fbc <HAL_DMA_Abort_IT+0x1f4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d028      	beq.n	8005f58 <HAL_DMA_Abort_IT+0x190>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a26      	ldr	r2, [pc, #152]	; (8005fa4 <HAL_DMA_Abort_IT+0x1dc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d020      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x18a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a2a      	ldr	r2, [pc, #168]	; (8005fc0 <HAL_DMA_Abort_IT+0x1f8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d019      	beq.n	8005f4e <HAL_DMA_Abort_IT+0x186>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a29      	ldr	r2, [pc, #164]	; (8005fc4 <HAL_DMA_Abort_IT+0x1fc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d012      	beq.n	8005f4a <HAL_DMA_Abort_IT+0x182>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a27      	ldr	r2, [pc, #156]	; (8005fc8 <HAL_DMA_Abort_IT+0x200>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00a      	beq.n	8005f44 <HAL_DMA_Abort_IT+0x17c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <HAL_DMA_Abort_IT+0x204>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d102      	bne.n	8005f3e <HAL_DMA_Abort_IT+0x176>
 8005f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f3c:	e01b      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f42:	e018      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f48:	e015      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f4a:	2310      	movs	r3, #16
 8005f4c:	e013      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e011      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f56:	e00e      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f5c:	e00b      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f62:	e008      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f68:	e005      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f6e:	e002      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f70:	2310      	movs	r3, #16
 8005f72:	e000      	b.n	8005f76 <HAL_DMA_Abort_IT+0x1ae>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <HAL_DMA_Abort_IT+0x20c>)
 8005f78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
    } 
  }
  return status;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40020080 	.word	0x40020080
 8005fa8:	40020008 	.word	0x40020008
 8005fac:	4002001c 	.word	0x4002001c
 8005fb0:	40020030 	.word	0x40020030
 8005fb4:	40020044 	.word	0x40020044
 8005fb8:	40020058 	.word	0x40020058
 8005fbc:	4002006c 	.word	0x4002006c
 8005fc0:	40020408 	.word	0x40020408
 8005fc4:	4002041c 	.word	0x4002041c
 8005fc8:	40020430 	.word	0x40020430
 8005fcc:	40020444 	.word	0x40020444
 8005fd0:	40020400 	.word	0x40020400
 8005fd4:	40020000 	.word	0x40020000

08005fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b08b      	sub	sp, #44	; 0x2c
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fea:	e179      	b.n	80062e0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005fec:	2201      	movs	r2, #1
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	429a      	cmp	r2, r3
 8006006:	f040 8168 	bne.w	80062da <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	4a96      	ldr	r2, [pc, #600]	; (8006268 <HAL_GPIO_Init+0x290>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d05e      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 8006014:	4a94      	ldr	r2, [pc, #592]	; (8006268 <HAL_GPIO_Init+0x290>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d875      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 800601a:	4a94      	ldr	r2, [pc, #592]	; (800626c <HAL_GPIO_Init+0x294>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d058      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 8006020:	4a92      	ldr	r2, [pc, #584]	; (800626c <HAL_GPIO_Init+0x294>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d86f      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 8006026:	4a92      	ldr	r2, [pc, #584]	; (8006270 <HAL_GPIO_Init+0x298>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d052      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 800602c:	4a90      	ldr	r2, [pc, #576]	; (8006270 <HAL_GPIO_Init+0x298>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d869      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 8006032:	4a90      	ldr	r2, [pc, #576]	; (8006274 <HAL_GPIO_Init+0x29c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d04c      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 8006038:	4a8e      	ldr	r2, [pc, #568]	; (8006274 <HAL_GPIO_Init+0x29c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d863      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 800603e:	4a8e      	ldr	r2, [pc, #568]	; (8006278 <HAL_GPIO_Init+0x2a0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d046      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 8006044:	4a8c      	ldr	r2, [pc, #560]	; (8006278 <HAL_GPIO_Init+0x2a0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d85d      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 800604a:	2b12      	cmp	r3, #18
 800604c:	d82a      	bhi.n	80060a4 <HAL_GPIO_Init+0xcc>
 800604e:	2b12      	cmp	r3, #18
 8006050:	d859      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <HAL_GPIO_Init+0x80>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	080060d3 	.word	0x080060d3
 800605c:	080060ad 	.word	0x080060ad
 8006060:	080060bf 	.word	0x080060bf
 8006064:	08006101 	.word	0x08006101
 8006068:	08006107 	.word	0x08006107
 800606c:	08006107 	.word	0x08006107
 8006070:	08006107 	.word	0x08006107
 8006074:	08006107 	.word	0x08006107
 8006078:	08006107 	.word	0x08006107
 800607c:	08006107 	.word	0x08006107
 8006080:	08006107 	.word	0x08006107
 8006084:	08006107 	.word	0x08006107
 8006088:	08006107 	.word	0x08006107
 800608c:	08006107 	.word	0x08006107
 8006090:	08006107 	.word	0x08006107
 8006094:	08006107 	.word	0x08006107
 8006098:	08006107 	.word	0x08006107
 800609c:	080060b5 	.word	0x080060b5
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	4a75      	ldr	r2, [pc, #468]	; (800627c <HAL_GPIO_Init+0x2a4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80060aa:	e02c      	b.n	8006106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	623b      	str	r3, [r7, #32]
          break;
 80060b2:	e029      	b.n	8006108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	3304      	adds	r3, #4
 80060ba:	623b      	str	r3, [r7, #32]
          break;
 80060bc:	e024      	b.n	8006108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	3308      	adds	r3, #8
 80060c4:	623b      	str	r3, [r7, #32]
          break;
 80060c6:	e01f      	b.n	8006108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	330c      	adds	r3, #12
 80060ce:	623b      	str	r3, [r7, #32]
          break;
 80060d0:	e01a      	b.n	8006108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d102      	bne.n	80060e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80060da:	2304      	movs	r3, #4
 80060dc:	623b      	str	r3, [r7, #32]
          break;
 80060de:	e013      	b.n	8006108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d105      	bne.n	80060f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060e8:	2308      	movs	r3, #8
 80060ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	611a      	str	r2, [r3, #16]
          break;
 80060f2:	e009      	b.n	8006108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060f4:	2308      	movs	r3, #8
 80060f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	615a      	str	r2, [r3, #20]
          break;
 80060fe:	e003      	b.n	8006108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006100:	2300      	movs	r3, #0
 8006102:	623b      	str	r3, [r7, #32]
          break;
 8006104:	e000      	b.n	8006108 <HAL_GPIO_Init+0x130>
          break;
 8006106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2bff      	cmp	r3, #255	; 0xff
 800610c:	d801      	bhi.n	8006112 <HAL_GPIO_Init+0x13a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	e001      	b.n	8006116 <HAL_GPIO_Init+0x13e>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3304      	adds	r3, #4
 8006116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2bff      	cmp	r3, #255	; 0xff
 800611c:	d802      	bhi.n	8006124 <HAL_GPIO_Init+0x14c>
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	e002      	b.n	800612a <HAL_GPIO_Init+0x152>
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	3b08      	subs	r3, #8
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	210f      	movs	r1, #15
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	fa01 f303 	lsl.w	r3, r1, r3
 8006138:	43db      	mvns	r3, r3
 800613a:	401a      	ands	r2, r3
 800613c:	6a39      	ldr	r1, [r7, #32]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	fa01 f303 	lsl.w	r3, r1, r3
 8006144:	431a      	orrs	r2, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80c1 	beq.w	80062da <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006158:	4b49      	ldr	r3, [pc, #292]	; (8006280 <HAL_GPIO_Init+0x2a8>)
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	4a48      	ldr	r2, [pc, #288]	; (8006280 <HAL_GPIO_Init+0x2a8>)
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	6193      	str	r3, [r2, #24]
 8006164:	4b46      	ldr	r3, [pc, #280]	; (8006280 <HAL_GPIO_Init+0x2a8>)
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006170:	4a44      	ldr	r2, [pc, #272]	; (8006284 <HAL_GPIO_Init+0x2ac>)
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	3302      	adds	r3, #2
 8006178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	220f      	movs	r2, #15
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	43db      	mvns	r3, r3
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4013      	ands	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a3c      	ldr	r2, [pc, #240]	; (8006288 <HAL_GPIO_Init+0x2b0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d01f      	beq.n	80061dc <HAL_GPIO_Init+0x204>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3b      	ldr	r2, [pc, #236]	; (800628c <HAL_GPIO_Init+0x2b4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d019      	beq.n	80061d8 <HAL_GPIO_Init+0x200>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <HAL_GPIO_Init+0x2b8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <HAL_GPIO_Init+0x1fc>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a39      	ldr	r2, [pc, #228]	; (8006294 <HAL_GPIO_Init+0x2bc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00d      	beq.n	80061d0 <HAL_GPIO_Init+0x1f8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a38      	ldr	r2, [pc, #224]	; (8006298 <HAL_GPIO_Init+0x2c0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d007      	beq.n	80061cc <HAL_GPIO_Init+0x1f4>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a37      	ldr	r2, [pc, #220]	; (800629c <HAL_GPIO_Init+0x2c4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d101      	bne.n	80061c8 <HAL_GPIO_Init+0x1f0>
 80061c4:	2305      	movs	r3, #5
 80061c6:	e00a      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061c8:	2306      	movs	r3, #6
 80061ca:	e008      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061cc:	2304      	movs	r3, #4
 80061ce:	e006      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061d0:	2303      	movs	r3, #3
 80061d2:	e004      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e002      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061dc:	2300      	movs	r3, #0
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	f002 0203 	and.w	r2, r2, #3
 80061e4:	0092      	lsls	r2, r2, #2
 80061e6:	4093      	lsls	r3, r2
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80061ee:	4925      	ldr	r1, [pc, #148]	; (8006284 <HAL_GPIO_Init+0x2ac>)
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	089b      	lsrs	r3, r3, #2
 80061f4:	3302      	adds	r3, #2
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006208:	4b25      	ldr	r3, [pc, #148]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	4924      	ldr	r1, [pc, #144]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	4313      	orrs	r3, r2
 8006212:	608b      	str	r3, [r1, #8]
 8006214:	e006      	b.n	8006224 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006216:	4b22      	ldr	r3, [pc, #136]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	43db      	mvns	r3, r3
 800621e:	4920      	ldr	r1, [pc, #128]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006220:	4013      	ands	r3, r2
 8006222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d006      	beq.n	800623e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	491a      	ldr	r1, [pc, #104]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	4313      	orrs	r3, r2
 800623a:	60cb      	str	r3, [r1, #12]
 800623c:	e006      	b.n	800624c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800623e:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	43db      	mvns	r3, r3
 8006246:	4916      	ldr	r1, [pc, #88]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006248:	4013      	ands	r3, r2
 800624a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d025      	beq.n	80062a4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006258:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	4910      	ldr	r1, [pc, #64]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	4313      	orrs	r3, r2
 8006262:	604b      	str	r3, [r1, #4]
 8006264:	e025      	b.n	80062b2 <HAL_GPIO_Init+0x2da>
 8006266:	bf00      	nop
 8006268:	10320000 	.word	0x10320000
 800626c:	10310000 	.word	0x10310000
 8006270:	10220000 	.word	0x10220000
 8006274:	10210000 	.word	0x10210000
 8006278:	10120000 	.word	0x10120000
 800627c:	10110000 	.word	0x10110000
 8006280:	40021000 	.word	0x40021000
 8006284:	40010000 	.word	0x40010000
 8006288:	40010800 	.word	0x40010800
 800628c:	40010c00 	.word	0x40010c00
 8006290:	40011000 	.word	0x40011000
 8006294:	40011400 	.word	0x40011400
 8006298:	40011800 	.word	0x40011800
 800629c:	40011c00 	.word	0x40011c00
 80062a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80062a4:	4b15      	ldr	r3, [pc, #84]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	4913      	ldr	r1, [pc, #76]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d006      	beq.n	80062cc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80062be:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	490e      	ldr	r1, [pc, #56]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]
 80062ca:	e006      	b.n	80062da <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	43db      	mvns	r3, r3
 80062d4:	4909      	ldr	r1, [pc, #36]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	3301      	adds	r3, #1
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f47f ae7e 	bne.w	8005fec <HAL_GPIO_Init+0x14>
  }
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	372c      	adds	r7, #44	; 0x2c
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr
 80062fc:	40010400 	.word	0x40010400

08006300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	807b      	strh	r3, [r7, #2]
 800630c:	4613      	mov	r3, r2
 800630e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006310:	787b      	ldrb	r3, [r7, #1]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006316:	887a      	ldrh	r2, [r7, #2]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800631c:	e003      	b.n	8006326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800631e:	887b      	ldrh	r3, [r7, #2]
 8006320:	041a      	lsls	r2, r3, #16
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	611a      	str	r2, [r3, #16]
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr

08006330 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006342:	887a      	ldrh	r2, [r7, #2]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4013      	ands	r3, r2
 8006348:	041a      	lsls	r2, r3, #16
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	43d9      	mvns	r1, r3
 800634e:	887b      	ldrh	r3, [r7, #2]
 8006350:	400b      	ands	r3, r1
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	611a      	str	r2, [r3, #16]
}
 8006358:	bf00      	nop
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr
	...

08006364 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <HAL_PWR_EnableBkUpAccess+0x14>)
 800636a:	2201      	movs	r2, #1
 800636c:	601a      	str	r2, [r3, #0]
}
 800636e:	bf00      	nop
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	420e0020 	.word	0x420e0020

0800637c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e272      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8087 	beq.w	80064aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800639c:	4b92      	ldr	r3, [pc, #584]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d00c      	beq.n	80063c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063a8:	4b8f      	ldr	r3, [pc, #572]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d112      	bne.n	80063da <HAL_RCC_OscConfig+0x5e>
 80063b4:	4b8c      	ldr	r3, [pc, #560]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c0:	d10b      	bne.n	80063da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c2:	4b89      	ldr	r3, [pc, #548]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d06c      	beq.n	80064a8 <HAL_RCC_OscConfig+0x12c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d168      	bne.n	80064a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e24c      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d106      	bne.n	80063f2 <HAL_RCC_OscConfig+0x76>
 80063e4:	4b80      	ldr	r3, [pc, #512]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a7f      	ldr	r2, [pc, #508]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	e02e      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10c      	bne.n	8006414 <HAL_RCC_OscConfig+0x98>
 80063fa:	4b7b      	ldr	r3, [pc, #492]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a7a      	ldr	r2, [pc, #488]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4b78      	ldr	r3, [pc, #480]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a77      	ldr	r2, [pc, #476]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800640c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e01d      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800641c:	d10c      	bne.n	8006438 <HAL_RCC_OscConfig+0xbc>
 800641e:	4b72      	ldr	r3, [pc, #456]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a71      	ldr	r2, [pc, #452]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	4b6f      	ldr	r3, [pc, #444]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6e      	ldr	r2, [pc, #440]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	e00b      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 8006438:	4b6b      	ldr	r3, [pc, #428]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a6a      	ldr	r2, [pc, #424]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800643e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b68      	ldr	r3, [pc, #416]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a67      	ldr	r2, [pc, #412]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800644a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d013      	beq.n	8006480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fe ff30 	bl	80052bc <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006460:	f7fe ff2c 	bl	80052bc <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e200      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	4b5d      	ldr	r3, [pc, #372]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0xe4>
 800647e:	e014      	b.n	80064aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006480:	f7fe ff1c 	bl	80052bc <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006488:	f7fe ff18 	bl	80052bc <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	; 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1ec      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649a:	4b53      	ldr	r3, [pc, #332]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f0      	bne.n	8006488 <HAL_RCC_OscConfig+0x10c>
 80064a6:	e000      	b.n	80064aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d063      	beq.n	800657e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064b6:	4b4c      	ldr	r3, [pc, #304]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064c2:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 030c 	and.w	r3, r3, #12
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d11c      	bne.n	8006508 <HAL_RCC_OscConfig+0x18c>
 80064ce:	4b46      	ldr	r3, [pc, #280]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d116      	bne.n	8006508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	4b43      	ldr	r3, [pc, #268]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCC_OscConfig+0x176>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e1c0      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f2:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4939      	ldr	r1, [pc, #228]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006502:	4313      	orrs	r3, r2
 8006504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006506:	e03a      	b.n	800657e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d020      	beq.n	8006552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006510:	4b36      	ldr	r3, [pc, #216]	; (80065ec <HAL_RCC_OscConfig+0x270>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006516:	f7fe fed1 	bl	80052bc <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800651e:	f7fe fecd 	bl	80052bc <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e1a1      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653c:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4927      	ldr	r1, [pc, #156]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800654c:	4313      	orrs	r3, r2
 800654e:	600b      	str	r3, [r1, #0]
 8006550:	e015      	b.n	800657e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006552:	4b26      	ldr	r3, [pc, #152]	; (80065ec <HAL_RCC_OscConfig+0x270>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006558:	f7fe feb0 	bl	80052bc <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006560:	f7fe feac 	bl	80052bc <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e180      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d03a      	beq.n	8006600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d019      	beq.n	80065c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006592:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <HAL_RCC_OscConfig+0x274>)
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006598:	f7fe fe90 	bl	80052bc <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a0:	f7fe fe8c 	bl	80052bc <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e160      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065be:	2001      	movs	r0, #1
 80065c0:	f000 fafe 	bl	8006bc0 <RCC_Delay>
 80065c4:	e01c      	b.n	8006600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <HAL_RCC_OscConfig+0x274>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065cc:	f7fe fe76 	bl	80052bc <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d2:	e00f      	b.n	80065f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d4:	f7fe fe72 	bl	80052bc <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d908      	bls.n	80065f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e146      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
 80065e6:	bf00      	nop
 80065e8:	40021000 	.word	0x40021000
 80065ec:	42420000 	.word	0x42420000
 80065f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f4:	4b92      	ldr	r3, [pc, #584]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e9      	bne.n	80065d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80a6 	beq.w	800675a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006612:	4b8b      	ldr	r3, [pc, #556]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661e:	4b88      	ldr	r3, [pc, #544]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	4a87      	ldr	r2, [pc, #540]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006628:	61d3      	str	r3, [r2, #28]
 800662a:	4b85      	ldr	r3, [pc, #532]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663a:	4b82      	ldr	r3, [pc, #520]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d118      	bne.n	8006678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006646:	4b7f      	ldr	r3, [pc, #508]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7e      	ldr	r2, [pc, #504]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 800664c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006652:	f7fe fe33 	bl	80052bc <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665a:	f7fe fe2f 	bl	80052bc <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b64      	cmp	r3, #100	; 0x64
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e103      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	4b75      	ldr	r3, [pc, #468]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d106      	bne.n	800668e <HAL_RCC_OscConfig+0x312>
 8006680:	4b6f      	ldr	r3, [pc, #444]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	4a6e      	ldr	r2, [pc, #440]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6213      	str	r3, [r2, #32]
 800668c:	e02d      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x334>
 8006696:	4b6a      	ldr	r3, [pc, #424]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	4a69      	ldr	r2, [pc, #420]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	6213      	str	r3, [r2, #32]
 80066a2:	4b67      	ldr	r3, [pc, #412]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	4a66      	ldr	r2, [pc, #408]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066a8:	f023 0304 	bic.w	r3, r3, #4
 80066ac:	6213      	str	r3, [r2, #32]
 80066ae:	e01c      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d10c      	bne.n	80066d2 <HAL_RCC_OscConfig+0x356>
 80066b8:	4b61      	ldr	r3, [pc, #388]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	4a60      	ldr	r2, [pc, #384]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066be:	f043 0304 	orr.w	r3, r3, #4
 80066c2:	6213      	str	r3, [r2, #32]
 80066c4:	4b5e      	ldr	r3, [pc, #376]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	4a5d      	ldr	r2, [pc, #372]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	6213      	str	r3, [r2, #32]
 80066d0:	e00b      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 80066d2:	4b5b      	ldr	r3, [pc, #364]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4a5a      	ldr	r2, [pc, #360]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6213      	str	r3, [r2, #32]
 80066de:	4b58      	ldr	r3, [pc, #352]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	4a57      	ldr	r2, [pc, #348]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d015      	beq.n	800671e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f2:	f7fe fde3 	bl	80052bc <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fe fddf 	bl	80052bc <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e0b1      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006710:	4b4b      	ldr	r3, [pc, #300]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0ee      	beq.n	80066fa <HAL_RCC_OscConfig+0x37e>
 800671c:	e014      	b.n	8006748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800671e:	f7fe fdcd 	bl	80052bc <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fe fdc9 	bl	80052bc <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	; 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e09b      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673c:	4b40      	ldr	r3, [pc, #256]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1ee      	bne.n	8006726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d105      	bne.n	800675a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800674e:	4b3c      	ldr	r3, [pc, #240]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	4a3b      	ldr	r2, [pc, #236]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006758:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8087 	beq.w	8006872 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006764:	4b36      	ldr	r3, [pc, #216]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b08      	cmp	r3, #8
 800676e:	d061      	beq.n	8006834 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d146      	bne.n	8006806 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006778:	4b33      	ldr	r3, [pc, #204]	; (8006848 <HAL_RCC_OscConfig+0x4cc>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fe fd9d 	bl	80052bc <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006786:	f7fe fd99 	bl	80052bc <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e06d      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006798:	4b29      	ldr	r3, [pc, #164]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1f0      	bne.n	8006786 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d108      	bne.n	80067c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4921      	ldr	r1, [pc, #132]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067c0:	4b1f      	ldr	r3, [pc, #124]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a19      	ldr	r1, [r3, #32]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	430b      	orrs	r3, r1
 80067d2:	491b      	ldr	r1, [pc, #108]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d8:	4b1b      	ldr	r3, [pc, #108]	; (8006848 <HAL_RCC_OscConfig+0x4cc>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067de:	f7fe fd6d 	bl	80052bc <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e6:	f7fe fd69 	bl	80052bc <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e03d      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x46a>
 8006804:	e035      	b.n	8006872 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006806:	4b10      	ldr	r3, [pc, #64]	; (8006848 <HAL_RCC_OscConfig+0x4cc>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680c:	f7fe fd56 	bl	80052bc <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006814:	f7fe fd52 	bl	80052bc <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e026      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0x498>
 8006832:	e01e      	b.n	8006872 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d107      	bne.n	800684c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e019      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
 8006840:	40021000 	.word	0x40021000
 8006844:	40007000 	.word	0x40007000
 8006848:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800684c:	4b0b      	ldr	r3, [pc, #44]	; (800687c <HAL_RCC_OscConfig+0x500>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	429a      	cmp	r2, r3
 800685e:	d106      	bne.n	800686e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686a:	429a      	cmp	r2, r3
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40021000 	.word	0x40021000

08006880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0d0      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006894:	4b6a      	ldr	r3, [pc, #424]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d910      	bls.n	80068c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a2:	4b67      	ldr	r3, [pc, #412]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f023 0207 	bic.w	r2, r3, #7
 80068aa:	4965      	ldr	r1, [pc, #404]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b63      	ldr	r3, [pc, #396]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0b8      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d020      	beq.n	8006912 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068dc:	4b59      	ldr	r3, [pc, #356]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4a58      	ldr	r2, [pc, #352]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068f4:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a52      	ldr	r2, [pc, #328]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006900:	4b50      	ldr	r3, [pc, #320]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	494d      	ldr	r1, [pc, #308]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 800690e:	4313      	orrs	r3, r2
 8006910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d040      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d107      	bne.n	8006936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006926:	4b47      	ldr	r3, [pc, #284]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d115      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e07f      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d107      	bne.n	800694e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693e:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e073      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694e:	4b3d      	ldr	r3, [pc, #244]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e06b      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800695e:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f023 0203 	bic.w	r2, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4936      	ldr	r1, [pc, #216]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	4313      	orrs	r3, r2
 800696e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006970:	f7fe fca4 	bl	80052bc <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006976:	e00a      	b.n	800698e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006978:	f7fe fca0 	bl	80052bc <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	; 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e053      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698e:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f003 020c 	and.w	r2, r3, #12
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	429a      	cmp	r2, r3
 800699e:	d1eb      	bne.n	8006978 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069a0:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d210      	bcs.n	80069d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f023 0207 	bic.w	r2, r3, #7
 80069b6:	4922      	ldr	r1, [pc, #136]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d001      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e032      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069dc:	4b19      	ldr	r3, [pc, #100]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4916      	ldr	r1, [pc, #88]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	490e      	ldr	r1, [pc, #56]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a0e:	f000 f821 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	091b      	lsrs	r3, r3, #4
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	490a      	ldr	r1, [pc, #40]	; (8006a48 <HAL_RCC_ClockConfig+0x1c8>)
 8006a20:	5ccb      	ldrb	r3, [r1, r3]
 8006a22:	fa22 f303 	lsr.w	r3, r2, r3
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <HAL_RCC_ClockConfig+0x1cc>)
 8006a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <HAL_RCC_ClockConfig+0x1d0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe f9e0 	bl	8004df4 <HAL_InitTick>

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40022000 	.word	0x40022000
 8006a44:	40021000 	.word	0x40021000
 8006a48:	080116e4 	.word	0x080116e4
 8006a4c:	20000008 	.word	0x20000008
 8006a50:	2000000c 	.word	0x2000000c

08006a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	2300      	movs	r3, #0
 8006a68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ae8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d002      	beq.n	8006a84 <HAL_RCC_GetSysClockFreq+0x30>
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d003      	beq.n	8006a8a <HAL_RCC_GetSysClockFreq+0x36>
 8006a82:	e027      	b.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a84:	4b19      	ldr	r3, [pc, #100]	; (8006aec <HAL_RCC_GetSysClockFreq+0x98>)
 8006a86:	613b      	str	r3, [r7, #16]
      break;
 8006a88:	e027      	b.n	8006ada <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	0c9b      	lsrs	r3, r3, #18
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006a94:	5cd3      	ldrb	r3, [r2, r3]
 8006a96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d010      	beq.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006aa2:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	0c5b      	lsrs	r3, r3, #17
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	4a11      	ldr	r2, [pc, #68]	; (8006af4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006aae:	5cd3      	ldrb	r3, [r2, r3]
 8006ab0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a0d      	ldr	r2, [pc, #52]	; (8006aec <HAL_RCC_GetSysClockFreq+0x98>)
 8006ab6:	fb03 f202 	mul.w	r2, r3, r2
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e004      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ac8:	fb02 f303 	mul.w	r3, r2, r3
 8006acc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	613b      	str	r3, [r7, #16]
      break;
 8006ad2:	e002      	b.n	8006ada <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <HAL_RCC_GetSysClockFreq+0x98>)
 8006ad6:	613b      	str	r3, [r7, #16]
      break;
 8006ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ada:	693b      	ldr	r3, [r7, #16]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	371c      	adds	r7, #28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	007a1200 	.word	0x007a1200
 8006af0:	080116fc 	.word	0x080116fc
 8006af4:	0801170c 	.word	0x0801170c
 8006af8:	003d0900 	.word	0x003d0900

08006afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b00:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8006b02:	681b      	ldr	r3, [r3, #0]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr
 8006b0c:	20000008 	.word	0x20000008

08006b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b14:	f7ff fff2 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	4903      	ldr	r1, [pc, #12]	; (8006b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b26:	5ccb      	ldrb	r3, [r1, r3]
 8006b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40021000 	.word	0x40021000
 8006b34:	080116f4 	.word	0x080116f4

08006b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b3c:	f7ff ffde 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 8006b40:	4602      	mov	r2, r0
 8006b42:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	0adb      	lsrs	r3, r3, #11
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	4903      	ldr	r1, [pc, #12]	; (8006b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b4e:	5ccb      	ldrb	r3, [r1, r3]
 8006b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	080116f4 	.word	0x080116f4

08006b60 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	220f      	movs	r2, #15
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b70:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <HAL_RCC_GetClockConfig+0x58>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 0203 	and.w	r2, r3, #3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b7c:	4b0e      	ldr	r3, [pc, #56]	; (8006bb8 <HAL_RCC_GetClockConfig+0x58>)
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b88:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <HAL_RCC_GetClockConfig+0x58>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006b94:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <HAL_RCC_GetClockConfig+0x58>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	08db      	lsrs	r3, r3, #3
 8006b9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ba2:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <HAL_RCC_GetClockConfig+0x5c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0207 	and.w	r2, r3, #7
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	40022000 	.word	0x40022000

08006bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <RCC_Delay+0x34>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a0a      	ldr	r2, [pc, #40]	; (8006bf8 <RCC_Delay+0x38>)
 8006bce:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd2:	0a5b      	lsrs	r3, r3, #9
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	fb02 f303 	mul.w	r3, r2, r3
 8006bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006bdc:	bf00      	nop
  }
  while (Delay --);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1e5a      	subs	r2, r3, #1
 8006be2:	60fa      	str	r2, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f9      	bne.n	8006bdc <RCC_Delay+0x1c>
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr
 8006bf4:	20000008 	.word	0x20000008
 8006bf8:	10624dd3 	.word	0x10624dd3

08006bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d07d      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c1c:	4b4f      	ldr	r3, [pc, #316]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10d      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c28:	4b4c      	ldr	r3, [pc, #304]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	4a4b      	ldr	r2, [pc, #300]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c32:	61d3      	str	r3, [r2, #28]
 8006c34:	4b49      	ldr	r3, [pc, #292]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	60bb      	str	r3, [r7, #8]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c40:	2301      	movs	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c44:	4b46      	ldr	r3, [pc, #280]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d118      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c50:	4b43      	ldr	r3, [pc, #268]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a42      	ldr	r2, [pc, #264]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c5c:	f7fe fb2e 	bl	80052bc <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c62:	e008      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c64:	f7fe fb2a 	bl	80052bc <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b64      	cmp	r3, #100	; 0x64
 8006c70:	d901      	bls.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e06d      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c76:	4b3a      	ldr	r3, [pc, #232]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f0      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c82:	4b36      	ldr	r3, [pc, #216]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d02e      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d027      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ca0:	4b2e      	ldr	r3, [pc, #184]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006caa:	4b2e      	ldr	r3, [pc, #184]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cb0:	4b2c      	ldr	r3, [pc, #176]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006cb6:	4a29      	ldr	r2, [pc, #164]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d014      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc6:	f7fe faf9 	bl	80052bc <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ccc:	e00a      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cce:	f7fe faf5 	bl	80052bc <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e036      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce4:	4b1d      	ldr	r3, [pc, #116]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0ee      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cf0:	4b1a      	ldr	r3, [pc, #104]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	4917      	ldr	r1, [pc, #92]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d105      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d08:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d20:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	490b      	ldr	r1, [pc, #44]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d008      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d3e:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	4904      	ldr	r1, [pc, #16]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	40007000 	.word	0x40007000
 8006d64:	42420440 	.word	0x42420440

08006d68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	2300      	movs	r3, #0
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	2b0f      	cmp	r3, #15
 8006d8a:	f200 80af 	bhi.w	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8006d8e:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006e6b 	.word	0x08006e6b
 8006d98:	08006ed1 	.word	0x08006ed1
 8006d9c:	08006eed 	.word	0x08006eed
 8006da0:	08006e5b 	.word	0x08006e5b
 8006da4:	08006eed 	.word	0x08006eed
 8006da8:	08006eed 	.word	0x08006eed
 8006dac:	08006eed 	.word	0x08006eed
 8006db0:	08006e63 	.word	0x08006e63
 8006db4:	08006eed 	.word	0x08006eed
 8006db8:	08006eed 	.word	0x08006eed
 8006dbc:	08006eed 	.word	0x08006eed
 8006dc0:	08006eed 	.word	0x08006eed
 8006dc4:	08006eed 	.word	0x08006eed
 8006dc8:	08006eed 	.word	0x08006eed
 8006dcc:	08006eed 	.word	0x08006eed
 8006dd0:	08006dd5 	.word	0x08006dd5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006dd4:	4b4a      	ldr	r3, [pc, #296]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006dda:	4b49      	ldr	r3, [pc, #292]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8084 	beq.w	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	0c9b      	lsrs	r3, r3, #18
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	4a44      	ldr	r2, [pc, #272]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8006df2:	5cd3      	ldrb	r3, [r2, r3]
 8006df4:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d015      	beq.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e00:	4b3f      	ldr	r3, [pc, #252]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	0c5b      	lsrs	r3, r3, #17
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	4a3f      	ldr	r2, [pc, #252]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8006e0c:	5cd3      	ldrb	r3, [r2, r3]
 8006e0e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00d      	beq.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006e1a:	4a3c      	ldr	r2, [pc, #240]	; (8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	fb02 f303 	mul.w	r3, r2, r3
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	4a38      	ldr	r2, [pc, #224]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8006e30:	fb02 f303 	mul.w	r3, r2, r3
 8006e34:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006e36:	4b32      	ldr	r3, [pc, #200]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e42:	d102      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006e48:	e052      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	4a31      	ldr	r2, [pc, #196]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	085b      	lsrs	r3, r3, #1
 8006e56:	61bb      	str	r3, [r7, #24]
      break;
 8006e58:	e04a      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006e5a:	f7ff fdfb 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8006e5e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006e60:	e049      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006e62:	f7ff fdf7 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8006e66:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006e68:	e045      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006e6a:	4b25      	ldr	r3, [pc, #148]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7a:	d108      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8006e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	e01f      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e98:	d109      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006e9a:	4b19      	ldr	r3, [pc, #100]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8006ea6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	e00f      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eb8:	d11c      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006eba:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d016      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8006ec6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006eca:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006ecc:	e012      	b.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006ece:	e011      	b.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006ed0:	f7ff fe32 	bl	8006b38 <HAL_RCC_GetPCLK2Freq>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	0b9b      	lsrs	r3, r3, #14
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee8:	61bb      	str	r3, [r7, #24]
      break;
 8006eea:	e004      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8006eec:	bf00      	nop
 8006eee:	e002      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8006ef0:	bf00      	nop
 8006ef2:	e000      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8006ef4:	bf00      	nop
    }
  }
  return (frequency);
 8006ef6:	69bb      	ldr	r3, [r7, #24]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3720      	adds	r7, #32
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40021000 	.word	0x40021000
 8006f04:	08011710 	.word	0x08011710
 8006f08:	08011720 	.word	0x08011720
 8006f0c:	007a1200 	.word	0x007a1200
 8006f10:	003d0900 	.word	0x003d0900
 8006f14:	aaaaaaab 	.word	0xaaaaaaab

08006f18 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e07a      	b.n	8007024 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7c5b      	ldrb	r3, [r3, #17]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fd fcba 	bl	80048b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f89a 	bl	8007084 <HAL_RTC_WaitForSynchro>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2204      	movs	r2, #4
 8006f5a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e061      	b.n	8007024 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f8bc 	bl	80070de <RTC_EnterInitMode>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e056      	b.n	8007024 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0207 	bic.w	r2, r2, #7
 8006f84:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006f8e:	4b27      	ldr	r3, [pc, #156]	; (800702c <HAL_RTC_Init+0x114>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	4a26      	ldr	r2, [pc, #152]	; (800702c <HAL_RTC_Init+0x114>)
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006f9a:	4b24      	ldr	r3, [pc, #144]	; (800702c <HAL_RTC_Init+0x114>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	4921      	ldr	r1, [pc, #132]	; (800702c <HAL_RTC_Init+0x114>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb4:	d003      	beq.n	8006fbe <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	e00e      	b.n	8006fdc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	f7ff fed2 	bl	8006d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fc4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d104      	bne.n	8006fd6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2204      	movs	r2, #4
 8006fd0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e026      	b.n	8007024 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	0c1a      	lsrs	r2, r3, #16
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f002 020f 	and.w	r2, r2, #15
 8006fe8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	b292      	uxth	r2, r2
 8006ff2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f89a 	bl	800712e <RTC_ExitInitMode>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2204      	movs	r2, #4
 8007004:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e00c      	b.n	8007024 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007022:	2300      	movs	r3, #0
  }
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	40006c00 	.word	0x40006c00

08007030 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d011      	beq.n	800706a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fd fdf9 	bl	8004c4c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0202 	bic.w	r2, r2, #2
 8007068:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RTC_AlarmIRQHandler+0x50>)
 800706c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007070:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	745a      	strb	r2, [r3, #17]
}
 8007078:	bf00      	nop
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40010400 	.word	0x40010400

08007084 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e01d      	b.n	80070d6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0208 	bic.w	r2, r2, #8
 80070a8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80070aa:	f7fe f907 	bl	80052bc <HAL_GetTick>
 80070ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80070b0:	e009      	b.n	80070c6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80070b2:	f7fe f903 	bl	80052bc <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c0:	d901      	bls.n	80070c6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e007      	b.n	80070d6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0ee      	beq.n	80070b2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80070ea:	f7fe f8e7 	bl	80052bc <HAL_GetTick>
 80070ee:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80070f0:	e009      	b.n	8007106 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80070f2:	f7fe f8e3 	bl	80052bc <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007100:	d901      	bls.n	8007106 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e00f      	b.n	8007126 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0ee      	beq.n	80070f2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0210 	orr.w	r2, r2, #16
 8007122:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0210 	bic.w	r2, r2, #16
 8007148:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800714a:	f7fe f8b7 	bl	80052bc <HAL_GetTick>
 800714e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007150:	e009      	b.n	8007166 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007152:	f7fe f8b3 	bl	80052bc <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007160:	d901      	bls.n	8007166 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e007      	b.n	8007176 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0ee      	beq.n	8007152 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d027      	beq.n	80071e4 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d020      	beq.n	80071e4 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f81b 	bl	80071ec <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f06f 0204 	mvn.w	r2, #4
 80071be:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2204      	movs	r2, #4
 80071c4:	745a      	strb	r2, [r3, #17]
 80071c6:	e005      	b.n	80071d4 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fd fd0d 	bl	8004be8 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	605a      	str	r2, [r3, #4]
    }
  }
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e076      	b.n	80072fe <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d108      	bne.n	800722a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007220:	d009      	beq.n	8007236 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	61da      	str	r2, [r3, #28]
 8007228:	e005      	b.n	8007236 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d106      	bne.n	8007256 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7fd fd4b 	bl	8004cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800726c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ba:	ea42 0103 	orr.w	r1, r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	0c1a      	lsrs	r2, r3, #16
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f002 0204 	and.w	r2, r2, #4
 80072dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <HAL_SRAM_Init+0x1c>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007320:	d101      	bne.n	8007326 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e038      	b.n	8007398 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f7fd f8ec 	bl	8004518 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3308      	adds	r3, #8
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	f001 f8bc 	bl	80084c8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	461a      	mov	r2, r3
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	f001 f91e 	bl	800859c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6858      	ldr	r0, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	f001 f949 	bl	8008604 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	6892      	ldr	r2, [r2, #8]
 800737a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	6892      	ldr	r2, [r2, #8]
 8007386:	f041 0101 	orr.w	r1, r1, #1
 800738a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e041      	b.n	8007436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f839 	bl	800743e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3304      	adds	r3, #4
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f000 f9c2 	bl	8007768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr

08007450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d001      	beq.n	8007468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e044      	b.n	80074f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0201 	orr.w	r2, r2, #1
 800747e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1d      	ldr	r2, [pc, #116]	; (80074fc <HAL_TIM_Base_Start_IT+0xac>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d018      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x6c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1c      	ldr	r2, [pc, #112]	; (8007500 <HAL_TIM_Base_Start_IT+0xb0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x6c>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800749c:	d00e      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x6c>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <HAL_TIM_Base_Start_IT+0xb4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d009      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x6c>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a16      	ldr	r2, [pc, #88]	; (8007508 <HAL_TIM_Base_Start_IT+0xb8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x6c>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a15      	ldr	r2, [pc, #84]	; (800750c <HAL_TIM_Base_Start_IT+0xbc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d111      	bne.n	80074e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b06      	cmp	r3, #6
 80074cc:	d010      	beq.n	80074f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f042 0201 	orr.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074de:	e007      	b.n	80074f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr
 80074fc:	40012c00 	.word	0x40012c00
 8007500:	40013400 	.word	0x40013400
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40000c00 	.word	0x40000c00

08007510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b02      	cmp	r3, #2
 8007524:	d122      	bne.n	800756c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b02      	cmp	r3, #2
 8007532:	d11b      	bne.n	800756c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0202 	mvn.w	r2, #2
 800753c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f8ed 	bl	8007732 <HAL_TIM_IC_CaptureCallback>
 8007558:	e005      	b.n	8007566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8e0 	bl	8007720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f8ef 	bl	8007744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b04      	cmp	r3, #4
 8007578:	d122      	bne.n	80075c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b04      	cmp	r3, #4
 8007586:	d11b      	bne.n	80075c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0204 	mvn.w	r2, #4
 8007590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f8c3 	bl	8007732 <HAL_TIM_IC_CaptureCallback>
 80075ac:	e005      	b.n	80075ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f8b6 	bl	8007720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8c5 	bl	8007744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0308 	and.w	r3, r3, #8
 80075ca:	2b08      	cmp	r3, #8
 80075cc:	d122      	bne.n	8007614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d11b      	bne.n	8007614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0208 	mvn.w	r2, #8
 80075e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2204      	movs	r2, #4
 80075ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f899 	bl	8007732 <HAL_TIM_IC_CaptureCallback>
 8007600:	e005      	b.n	800760e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f88c 	bl	8007720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f89b 	bl	8007744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	2b10      	cmp	r3, #16
 8007620:	d122      	bne.n	8007668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b10      	cmp	r3, #16
 800762e:	d11b      	bne.n	8007668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0210 	mvn.w	r2, #16
 8007638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2208      	movs	r2, #8
 800763e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f86f 	bl	8007732 <HAL_TIM_IC_CaptureCallback>
 8007654:	e005      	b.n	8007662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f862 	bl	8007720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f871 	bl	8007744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b01      	cmp	r3, #1
 8007674:	d10e      	bne.n	8007694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b01      	cmp	r3, #1
 8007682:	d107      	bne.n	8007694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0201 	mvn.w	r2, #1
 800768c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fd f8de 	bl	8004850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b80      	cmp	r3, #128	; 0x80
 80076a0:	d10e      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ac:	2b80      	cmp	r3, #128	; 0x80
 80076ae:	d107      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8d7 	bl	800786e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d10e      	bne.n	80076ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b40      	cmp	r3, #64	; 0x40
 80076da:	d107      	bne.n	80076ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f835 	bl	8007756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d10e      	bne.n	8007718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b20      	cmp	r3, #32
 8007706:	d107      	bne.n	8007718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0220 	mvn.w	r2, #32
 8007710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f8a2 	bl	800785c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr

08007732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr

08007744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr

08007756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	bc80      	pop	{r7}
 8007766:	4770      	bx	lr

08007768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a33      	ldr	r2, [pc, #204]	; (8007848 <TIM_Base_SetConfig+0xe0>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d013      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a32      	ldr	r2, [pc, #200]	; (800784c <TIM_Base_SetConfig+0xe4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00f      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800778e:	d00b      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a2f      	ldr	r2, [pc, #188]	; (8007850 <TIM_Base_SetConfig+0xe8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d007      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a2e      	ldr	r2, [pc, #184]	; (8007854 <TIM_Base_SetConfig+0xec>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a2d      	ldr	r2, [pc, #180]	; (8007858 <TIM_Base_SetConfig+0xf0>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d108      	bne.n	80077ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a22      	ldr	r2, [pc, #136]	; (8007848 <TIM_Base_SetConfig+0xe0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <TIM_Base_SetConfig+0x82>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a21      	ldr	r2, [pc, #132]	; (800784c <TIM_Base_SetConfig+0xe4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00f      	beq.n	80077ea <TIM_Base_SetConfig+0x82>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d0:	d00b      	beq.n	80077ea <TIM_Base_SetConfig+0x82>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1e      	ldr	r2, [pc, #120]	; (8007850 <TIM_Base_SetConfig+0xe8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d007      	beq.n	80077ea <TIM_Base_SetConfig+0x82>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a1d      	ldr	r2, [pc, #116]	; (8007854 <TIM_Base_SetConfig+0xec>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d003      	beq.n	80077ea <TIM_Base_SetConfig+0x82>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a1c      	ldr	r2, [pc, #112]	; (8007858 <TIM_Base_SetConfig+0xf0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d108      	bne.n	80077fc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a09      	ldr	r2, [pc, #36]	; (8007848 <TIM_Base_SetConfig+0xe0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d003      	beq.n	8007830 <TIM_Base_SetConfig+0xc8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a08      	ldr	r2, [pc, #32]	; (800784c <TIM_Base_SetConfig+0xe4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d103      	bne.n	8007838 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	691a      	ldr	r2, [r3, #16]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	615a      	str	r2, [r3, #20]
}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00

0800785c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr

0800786e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr

08007880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e042      	b.n	8007918 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fd fc50 	bl	800514c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2224      	movs	r2, #36	; 0x24
 80078b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fd71 	bl	80083ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691a      	ldr	r2, [r3, #16]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695a      	ldr	r2, [r3, #20]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	4613      	mov	r3, r2
 800792e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b20      	cmp	r3, #32
 800793e:	d16d      	bne.n	8007a1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_UART_Transmit+0x2c>
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e066      	b.n	8007a1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2221      	movs	r2, #33	; 0x21
 800795a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800795e:	f7fd fcad 	bl	80052bc <HAL_GetTick>
 8007962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	88fa      	ldrh	r2, [r7, #6]
 8007968:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007978:	d108      	bne.n	800798c <HAL_UART_Transmit+0x6c>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d104      	bne.n	800798c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	e003      	b.n	8007994 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007994:	e02a      	b.n	80079ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2200      	movs	r2, #0
 800799e:	2180      	movs	r1, #128	; 0x80
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 faf9 	bl	8007f98 <UART_WaitOnFlagUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e036      	b.n	8007a1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10b      	bne.n	80079ce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	3302      	adds	r3, #2
 80079ca:	61bb      	str	r3, [r7, #24]
 80079cc:	e007      	b.n	80079de <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	781a      	ldrb	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	3301      	adds	r3, #1
 80079dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1cf      	bne.n	8007996 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2200      	movs	r2, #0
 80079fe:	2140      	movs	r1, #64	; 0x40
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fac9 	bl	8007f98 <UART_WaitOnFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e006      	b.n	8007a1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e000      	b.n	8007a1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3720      	adds	r7, #32
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b0ba      	sub	sp, #232	; 0xe8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f003 030f 	and.w	r3, r3, #15
 8007a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10f      	bne.n	8007a8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <HAL_UART_IRQHandler+0x66>
 8007a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fbd1 	bl	800822e <UART_Receive_IT>
      return;
 8007a8c:	e25b      	b.n	8007f46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 80de 	beq.w	8007c54 <HAL_UART_IRQHandler+0x22c>
 8007a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d106      	bne.n	8007ab2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80d1 	beq.w	8007c54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00b      	beq.n	8007ad6 <HAL_UART_IRQHandler+0xae>
 8007abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	f043 0201 	orr.w	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <HAL_UART_IRQHandler+0xd2>
 8007ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af2:	f043 0202 	orr.w	r2, r3, #2
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00b      	beq.n	8007b1e <HAL_UART_IRQHandler+0xf6>
 8007b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b16:	f043 0204 	orr.w	r2, r3, #4
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d011      	beq.n	8007b4e <HAL_UART_IRQHandler+0x126>
 8007b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d105      	bne.n	8007b42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d005      	beq.n	8007b4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b46:	f043 0208 	orr.w	r2, r3, #8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 81f2 	beq.w	8007f3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d008      	beq.n	8007b76 <HAL_UART_IRQHandler+0x14e>
 8007b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fb5c 	bl	800822e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bf14      	ite	ne
 8007b84:	2301      	movne	r3, #1
 8007b86:	2300      	moveq	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d103      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x17a>
 8007b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d04f      	beq.n	8007c42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa66 	bl	8008074 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d041      	beq.n	8007c3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3314      	adds	r3, #20
 8007bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3314      	adds	r3, #20
 8007bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1d9      	bne.n	8007bb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d013      	beq.n	8007c32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0e:	4a7e      	ldr	r2, [pc, #504]	; (8007e08 <HAL_UART_IRQHandler+0x3e0>)
 8007c10:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe f8d6 	bl	8005dc8 <HAL_DMA_Abort_IT>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d016      	beq.n	8007c50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c30:	e00e      	b.n	8007c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f99c 	bl	8007f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	e00a      	b.n	8007c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f998 	bl	8007f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c40:	e006      	b.n	8007c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f994 	bl	8007f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007c4e:	e175      	b.n	8007f3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c50:	bf00      	nop
    return;
 8007c52:	e173      	b.n	8007f3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	f040 814f 	bne.w	8007efc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c62:	f003 0310 	and.w	r3, r3, #16
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 8148 	beq.w	8007efc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8141 	beq.w	8007efc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60bb      	str	r3, [r7, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	60bb      	str	r3, [r7, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 80b6 	beq.w	8007e0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 8145 	beq.w	8007f40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	f080 813e 	bcs.w	8007f40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	f000 8088 	beq.w	8007de8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	330c      	adds	r3, #12
 8007cde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	330c      	adds	r3, #12
 8007d00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d04:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1d9      	bne.n	8007cd8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3314      	adds	r3, #20
 8007d2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d36:	f023 0301 	bic.w	r3, r3, #1
 8007d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3314      	adds	r3, #20
 8007d44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d54:	e841 2300 	strex	r3, r2, [r1]
 8007d58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e1      	bne.n	8007d24 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3314      	adds	r3, #20
 8007d66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3314      	adds	r3, #20
 8007d80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e3      	bne.n	8007d60 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	330c      	adds	r3, #12
 8007dac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db8:	f023 0310 	bic.w	r3, r3, #16
 8007dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007dca:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dcc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e3      	bne.n	8007da6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fd ffb5 	bl	8005d52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f8bf 	bl	8007f82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e04:	e09c      	b.n	8007f40 <HAL_UART_IRQHandler+0x518>
 8007e06:	bf00      	nop
 8007e08:	08008139 	.word	0x08008139
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 808e 	beq.w	8007f44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 8089 	beq.w	8007f44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	330c      	adds	r3, #12
 8007e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	330c      	adds	r3, #12
 8007e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e56:	647a      	str	r2, [r7, #68]	; 0x44
 8007e58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e3      	bne.n	8007e32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3314      	adds	r3, #20
 8007e70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	623b      	str	r3, [r7, #32]
   return(result);
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	f023 0301 	bic.w	r3, r3, #1
 8007e80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3314      	adds	r3, #20
 8007e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e3      	bne.n	8007e6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	330c      	adds	r3, #12
 8007eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0310 	bic.w	r3, r3, #16
 8007ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	330c      	adds	r3, #12
 8007ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ed4:	61fa      	str	r2, [r7, #28]
 8007ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	69b9      	ldr	r1, [r7, #24]
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e3      	bne.n	8007eb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f844 	bl	8007f82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007efa:	e023      	b.n	8007f44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d009      	beq.n	8007f1c <HAL_UART_IRQHandler+0x4f4>
 8007f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f923 	bl	8008160 <UART_Transmit_IT>
    return;
 8007f1a:	e014      	b.n	8007f46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00e      	beq.n	8007f46 <HAL_UART_IRQHandler+0x51e>
 8007f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d008      	beq.n	8007f46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f962 	bl	80081fe <UART_EndTransmit_IT>
    return;
 8007f3a:	e004      	b.n	8007f46 <HAL_UART_IRQHandler+0x51e>
    return;
 8007f3c:	bf00      	nop
 8007f3e:	e002      	b.n	8007f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8007f40:	bf00      	nop
 8007f42:	e000      	b.n	8007f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8007f44:	bf00      	nop
  }
}
 8007f46:	37e8      	adds	r7, #232	; 0xe8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr

08007f5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr

08007f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bc80      	pop	{r7}
 8007f96:	4770      	bx	lr

08007f98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b090      	sub	sp, #64	; 0x40
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fa8:	e050      	b.n	800804c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb0:	d04c      	beq.n	800804c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d007      	beq.n	8007fc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fb8:	f7fd f980 	bl	80052bc <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d241      	bcs.n	800804c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fe8:	637a      	str	r2, [r7, #52]	; 0x34
 8007fea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e5      	bne.n	8007fc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3314      	adds	r3, #20
 8008002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	613b      	str	r3, [r7, #16]
   return(result);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	63bb      	str	r3, [r7, #56]	; 0x38
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800801c:	623a      	str	r2, [r7, #32]
 800801e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	69f9      	ldr	r1, [r7, #28]
 8008022:	6a3a      	ldr	r2, [r7, #32]
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	61bb      	str	r3, [r7, #24]
   return(result);
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e00f      	b.n	800806c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4013      	ands	r3, r2
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	429a      	cmp	r2, r3
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	429a      	cmp	r2, r3
 8008068:	d09f      	beq.n	8007faa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3740      	adds	r7, #64	; 0x40
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008074:	b480      	push	{r7}
 8008076:	b095      	sub	sp, #84	; 0x54
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	330c      	adds	r3, #12
 8008082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	330c      	adds	r3, #12
 800809a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800809c:	643a      	str	r2, [r7, #64]	; 0x40
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e5      	bne.n	800807c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3314      	adds	r3, #20
 80080b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	61fb      	str	r3, [r7, #28]
   return(result);
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3314      	adds	r3, #20
 80080ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e5      	bne.n	80080b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d119      	bne.n	8008120 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	330c      	adds	r3, #12
 80080f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f023 0310 	bic.w	r3, r3, #16
 8008102:	647b      	str	r3, [r7, #68]	; 0x44
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	330c      	adds	r3, #12
 800810a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800810c:	61ba      	str	r2, [r7, #24]
 800810e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6979      	ldr	r1, [r7, #20]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	613b      	str	r3, [r7, #16]
   return(result);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e5      	bne.n	80080ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800812e:	bf00      	nop
 8008130:	3754      	adds	r7, #84	; 0x54
 8008132:	46bd      	mov	sp, r7
 8008134:	bc80      	pop	{r7}
 8008136:	4770      	bx	lr

08008138 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff ff0c 	bl	8007f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008158:	bf00      	nop
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b21      	cmp	r3, #33	; 0x21
 8008172:	d13e      	bne.n	80081f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800817c:	d114      	bne.n	80081a8 <UART_Transmit_IT+0x48>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d110      	bne.n	80081a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800819a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	1c9a      	adds	r2, r3, #2
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	621a      	str	r2, [r3, #32]
 80081a6:	e008      	b.n	80081ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	1c59      	adds	r1, r3, #1
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6211      	str	r1, [r2, #32]
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081be:	b29b      	uxth	r3, r3
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	4619      	mov	r1, r3
 80081c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10f      	bne.n	80081ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e000      	b.n	80081f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081f2:	2302      	movs	r3, #2
  }
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr

080081fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff fe94 	bl	8007f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b08c      	sub	sp, #48	; 0x30
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b22      	cmp	r3, #34	; 0x22
 8008240:	f040 80ae 	bne.w	80083a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824c:	d117      	bne.n	800827e <UART_Receive_IT+0x50>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d113      	bne.n	800827e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	b29b      	uxth	r3, r3
 8008268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826c:	b29a      	uxth	r2, r3
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008276:	1c9a      	adds	r2, r3, #2
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	629a      	str	r2, [r3, #40]	; 0x28
 800827c:	e026      	b.n	80082cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008284:	2300      	movs	r3, #0
 8008286:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008290:	d007      	beq.n	80082a2 <UART_Receive_IT+0x74>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10a      	bne.n	80082b0 <UART_Receive_IT+0x82>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	e008      	b.n	80082c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	4619      	mov	r1, r3
 80082da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d15d      	bne.n	800839c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68da      	ldr	r2, [r3, #12]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 0220 	bic.w	r2, r2, #32
 80082ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	695a      	ldr	r2, [r3, #20]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0201 	bic.w	r2, r2, #1
 800830e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	2b01      	cmp	r3, #1
 8008324:	d135      	bne.n	8008392 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	330c      	adds	r3, #12
 8008332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	e853 3f00 	ldrex	r3, [r3]
 800833a:	613b      	str	r3, [r7, #16]
   return(result);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f023 0310 	bic.w	r3, r3, #16
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	330c      	adds	r3, #12
 800834a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834c:	623a      	str	r2, [r7, #32]
 800834e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	69f9      	ldr	r1, [r7, #28]
 8008352:	6a3a      	ldr	r2, [r7, #32]
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	61bb      	str	r3, [r7, #24]
   return(result);
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e5      	bne.n	800832c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0310 	and.w	r3, r3, #16
 800836a:	2b10      	cmp	r3, #16
 800836c:	d10a      	bne.n	8008384 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff fdf9 	bl	8007f82 <HAL_UARTEx_RxEventCallback>
 8008390:	e002      	b.n	8008398 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fde3 	bl	8007f5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	e002      	b.n	80083a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	e000      	b.n	80083a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3730      	adds	r7, #48	; 0x30
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68da      	ldr	r2, [r3, #12]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80083e6:	f023 030c 	bic.w	r3, r3, #12
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	430b      	orrs	r3, r1
 80083f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a2c      	ldr	r2, [pc, #176]	; (80084c0 <UART_SetConfig+0x114>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d103      	bne.n	800841c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008414:	f7fe fb90 	bl	8006b38 <HAL_RCC_GetPCLK2Freq>
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	e002      	b.n	8008422 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800841c:	f7fe fb78 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8008420:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009a      	lsls	r2, r3, #2
 800842c:	441a      	add	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	fbb2 f3f3 	udiv	r3, r2, r3
 8008438:	4a22      	ldr	r2, [pc, #136]	; (80084c4 <UART_SetConfig+0x118>)
 800843a:	fba2 2303 	umull	r2, r3, r2, r3
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	0119      	lsls	r1, r3, #4
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	4613      	mov	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	009a      	lsls	r2, r3, #2
 800844c:	441a      	add	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	fbb2 f2f3 	udiv	r2, r2, r3
 8008458:	4b1a      	ldr	r3, [pc, #104]	; (80084c4 <UART_SetConfig+0x118>)
 800845a:	fba3 0302 	umull	r0, r3, r3, r2
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	2064      	movs	r0, #100	; 0x64
 8008462:	fb00 f303 	mul.w	r3, r0, r3
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	011b      	lsls	r3, r3, #4
 800846a:	3332      	adds	r3, #50	; 0x32
 800846c:	4a15      	ldr	r2, [pc, #84]	; (80084c4 <UART_SetConfig+0x118>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	095b      	lsrs	r3, r3, #5
 8008474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008478:	4419      	add	r1, r3
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009a      	lsls	r2, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <UART_SetConfig+0x118>)
 8008492:	fba3 0302 	umull	r0, r3, r3, r2
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	2064      	movs	r0, #100	; 0x64
 800849a:	fb00 f303 	mul.w	r3, r0, r3
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	3332      	adds	r3, #50	; 0x32
 80084a4:	4a07      	ldr	r2, [pc, #28]	; (80084c4 <UART_SetConfig+0x118>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	f003 020f 	and.w	r2, r3, #15
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	440a      	add	r2, r1
 80084b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80084b8:	bf00      	nop
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	40013800 	.word	0x40013800
 80084c4:	51eb851f 	.word	0x51eb851f

080084c8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	6812      	ldr	r2, [r2, #0]
 80084e0:	f023 0101 	bic.w	r1, r3, #1
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d102      	bne.n	80084f8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	617b      	str	r3, [r7, #20]
 80084f6:	e001      	b.n	80084fc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008508:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800850e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008514:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800851a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008520:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008526:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800852c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8008532:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8008538:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800853e:	4313      	orrs	r3, r2
 8008540:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8008556:	4b10      	ldr	r3, [pc, #64]	; (8008598 <FSMC_NORSRAM_Init+0xd0>)
 8008558:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008560:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008568:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	43db      	mvns	r3, r3
 8008578:	ea02 0103 	and.w	r1, r2, r3
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	4319      	orrs	r1, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	0008fb7f 	.word	0x0008fb7f

0800859c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	431a      	orrs	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	431a      	orrs	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	041b      	lsls	r3, r3, #16
 80085d0:	431a      	orrs	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	051b      	lsls	r3, r3, #20
 80085da:	431a      	orrs	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	3b02      	subs	r3, #2
 80085e2:	061b      	lsls	r3, r3, #24
 80085e4:	431a      	orrs	r2, r3
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	3201      	adds	r2, #1
 80085f0:	4319      	orrs	r1, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr

08008604 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008618:	d11d      	bne.n	8008656 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008622:	4b13      	ldr	r3, [pc, #76]	; (8008670 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008624:	4013      	ands	r3, r2
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	6811      	ldr	r1, [r2, #0]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	6852      	ldr	r2, [r2, #4]
 800862e:	0112      	lsls	r2, r2, #4
 8008630:	4311      	orrs	r1, r2
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	6892      	ldr	r2, [r2, #8]
 8008636:	0212      	lsls	r2, r2, #8
 8008638:	4311      	orrs	r1, r2
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	6992      	ldr	r2, [r2, #24]
 800863e:	4311      	orrs	r1, r2
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	68d2      	ldr	r2, [r2, #12]
 8008644:	0412      	lsls	r2, r2, #16
 8008646:	430a      	orrs	r2, r1
 8008648:	ea43 0102 	orr.w	r1, r3, r2
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008654:	e005      	b.n	8008662 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800865e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	cff00000 	.word	0xcff00000

08008674 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800867a:	f3ef 8305 	mrs	r3, IPSR
 800867e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10f      	bne.n	80086a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008686:	f3ef 8310 	mrs	r3, PRIMASK
 800868a:	607b      	str	r3, [r7, #4]
  return(result);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d109      	bne.n	80086a6 <osKernelInitialize+0x32>
 8008692:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <osKernelInitialize+0x60>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b02      	cmp	r3, #2
 8008698:	d109      	bne.n	80086ae <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800869a:	f3ef 8311 	mrs	r3, BASEPRI
 800869e:	603b      	str	r3, [r7, #0]
  return(result);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80086a6:	f06f 0305 	mvn.w	r3, #5
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e00c      	b.n	80086c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80086ae:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <osKernelInitialize+0x60>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d105      	bne.n	80086c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <osKernelInitialize+0x60>)
 80086b8:	2201      	movs	r2, #1
 80086ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80086bc:	2300      	movs	r3, #0
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e002      	b.n	80086c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80086c2:	f04f 33ff 	mov.w	r3, #4294967295
 80086c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80086c8:	68fb      	ldr	r3, [r7, #12]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr
 80086d4:	200003b0 	.word	0x200003b0

080086d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086de:	f3ef 8305 	mrs	r3, IPSR
 80086e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80086e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10f      	bne.n	800870a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ea:	f3ef 8310 	mrs	r3, PRIMASK
 80086ee:	607b      	str	r3, [r7, #4]
  return(result);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <osKernelStart+0x32>
 80086f6:	4b11      	ldr	r3, [pc, #68]	; (800873c <osKernelStart+0x64>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d109      	bne.n	8008712 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008702:	603b      	str	r3, [r7, #0]
  return(result);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <osKernelStart+0x3a>
    stat = osErrorISR;
 800870a:	f06f 0305 	mvn.w	r3, #5
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e00e      	b.n	8008730 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <osKernelStart+0x64>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d107      	bne.n	800872a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800871a:	4b08      	ldr	r3, [pc, #32]	; (800873c <osKernelStart+0x64>)
 800871c:	2202      	movs	r2, #2
 800871e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008720:	f001 f9c6 	bl	8009ab0 <vTaskStartScheduler>
      stat = osOK;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	e002      	b.n	8008730 <osKernelStart+0x58>
    } else {
      stat = osError;
 800872a:	f04f 33ff 	mov.w	r3, #4294967295
 800872e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008730:	68fb      	ldr	r3, [r7, #12]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	200003b0 	.word	0x200003b0

08008740 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008740:	b580      	push	{r7, lr}
 8008742:	b092      	sub	sp, #72	; 0x48
 8008744:	af04      	add	r7, sp, #16
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008750:	f3ef 8305 	mrs	r3, IPSR
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008758:	2b00      	cmp	r3, #0
 800875a:	f040 8094 	bne.w	8008886 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800875e:	f3ef 8310 	mrs	r3, PRIMASK
 8008762:	623b      	str	r3, [r7, #32]
  return(result);
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	2b00      	cmp	r3, #0
 8008768:	f040 808d 	bne.w	8008886 <osThreadNew+0x146>
 800876c:	4b48      	ldr	r3, [pc, #288]	; (8008890 <osThreadNew+0x150>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d106      	bne.n	8008782 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008774:	f3ef 8311 	mrs	r3, BASEPRI
 8008778:	61fb      	str	r3, [r7, #28]
  return(result);
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f040 8082 	bne.w	8008886 <osThreadNew+0x146>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d07e      	beq.n	8008886 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008788:	2380      	movs	r3, #128	; 0x80
 800878a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800878c:	2318      	movs	r3, #24
 800878e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008790:	2300      	movs	r3, #0
 8008792:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008794:	f107 031b 	add.w	r3, r7, #27
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800879a:	f04f 33ff 	mov.w	r3, #4294967295
 800879e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d045      	beq.n	8008832 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <osThreadNew+0x74>
        name = attr->name;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d008      	beq.n	80087da <osThreadNew+0x9a>
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	2b38      	cmp	r3, #56	; 0x38
 80087cc:	d805      	bhi.n	80087da <osThreadNew+0x9a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <osThreadNew+0x9e>
        return (NULL);
 80087da:	2300      	movs	r3, #0
 80087dc:	e054      	b.n	8008888 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	089b      	lsrs	r3, r3, #2
 80087ec:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00e      	beq.n	8008814 <osThreadNew+0xd4>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2b5b      	cmp	r3, #91	; 0x5b
 80087fc:	d90a      	bls.n	8008814 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008802:	2b00      	cmp	r3, #0
 8008804:	d006      	beq.n	8008814 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <osThreadNew+0xd4>
        mem = 1;
 800880e:	2301      	movs	r3, #1
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
 8008812:	e010      	b.n	8008836 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10c      	bne.n	8008836 <osThreadNew+0xf6>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d108      	bne.n	8008836 <osThreadNew+0xf6>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <osThreadNew+0xf6>
          mem = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008830:	e001      	b.n	8008836 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	2b01      	cmp	r3, #1
 800883a:	d110      	bne.n	800885e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008844:	9202      	str	r2, [sp, #8]
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008850:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 fe12 	bl	800947c <xTaskCreateStatic>
 8008858:	4603      	mov	r3, r0
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e013      	b.n	8008886 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	2b00      	cmp	r3, #0
 8008862:	d110      	bne.n	8008886 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008866:	b29a      	uxth	r2, r3
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 fe5c 	bl	8009534 <xTaskCreate>
 800887c:	4603      	mov	r3, r0
 800887e:	2b01      	cmp	r3, #1
 8008880:	d001      	beq.n	8008886 <osThreadNew+0x146>
          hTask = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008886:	697b      	ldr	r3, [r7, #20]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3738      	adds	r7, #56	; 0x38
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	200003b0 	.word	0x200003b0

08008894 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800889c:	f3ef 8305 	mrs	r3, IPSR
 80088a0:	613b      	str	r3, [r7, #16]
  return(result);
 80088a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10f      	bne.n	80088c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a8:	f3ef 8310 	mrs	r3, PRIMASK
 80088ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d109      	bne.n	80088c8 <osDelay+0x34>
 80088b4:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <osDelay+0x58>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d109      	bne.n	80088d0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088bc:	f3ef 8311 	mrs	r3, BASEPRI
 80088c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <osDelay+0x3c>
    stat = osErrorISR;
 80088c8:	f06f 0305 	mvn.w	r3, #5
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	e007      	b.n	80088e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 f85a 	bl	8009994 <vTaskDelay>
    }
  }

  return (stat);
 80088e0:	697b      	ldr	r3, [r7, #20]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	200003b0 	.word	0x200003b0

080088f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4a06      	ldr	r2, [pc, #24]	; (8008918 <vApplicationGetIdleTaskMemory+0x28>)
 8008900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	4a05      	ldr	r2, [pc, #20]	; (800891c <vApplicationGetIdleTaskMemory+0x2c>)
 8008906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2280      	movs	r2, #128	; 0x80
 800890c:	601a      	str	r2, [r3, #0]
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr
 8008918:	200003b4 	.word	0x200003b4
 800891c:	20000410 	.word	0x20000410

08008920 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4a07      	ldr	r2, [pc, #28]	; (800894c <vApplicationGetTimerTaskMemory+0x2c>)
 8008930:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	4a06      	ldr	r2, [pc, #24]	; (8008950 <vApplicationGetTimerTaskMemory+0x30>)
 8008936:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800893e:	601a      	str	r2, [r3, #0]
}
 8008940:	bf00      	nop
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	bc80      	pop	{r7}
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	20000610 	.word	0x20000610
 8008950:	2000066c 	.word	0x2000066c

08008954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f103 0208 	add.w	r2, r3, #8
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f04f 32ff 	mov.w	r2, #4294967295
 800896c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f103 0208 	add.w	r2, r3, #8
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f103 0208 	add.w	r2, r3, #8
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr

08008992 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr

080089aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089aa:	b480      	push	{r7}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
}
 80089e6:	bf00      	nop
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bc80      	pop	{r7}
 80089ee:	4770      	bx	lr

080089f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d103      	bne.n	8008a10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	e00c      	b.n	8008a2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3308      	adds	r3, #8
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e002      	b.n	8008a1e <vListInsert+0x2e>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	60fb      	str	r3, [r7, #12]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d2f6      	bcs.n	8008a18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	601a      	str	r2, [r3, #0]
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr

08008a60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6892      	ldr	r2, [r2, #8]
 8008a76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6852      	ldr	r2, [r2, #4]
 8008a80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d103      	bne.n	8008a94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	1e5a      	subs	r2, r3, #1
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bc80      	pop	{r7}
 8008ab0:	4770      	bx	lr
	...

08008ab4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ade:	f002 f9ed 	bl	800aebc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008aee:	fb01 f303 	mul.w	r3, r1, r3
 8008af2:	441a      	add	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	68f9      	ldr	r1, [r7, #12]
 8008b12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b14:	fb01 f303 	mul.w	r3, r1, r3
 8008b18:	441a      	add	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	22ff      	movs	r2, #255	; 0xff
 8008b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	22ff      	movs	r2, #255	; 0xff
 8008b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d114      	bne.n	8008b5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d01a      	beq.n	8008b72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3310      	adds	r3, #16
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 fa65 	bl	800a010 <xTaskRemoveFromEventList>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d012      	beq.n	8008b72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b4c:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <xQueueGenericReset+0xcc>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	e009      	b.n	8008b72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3310      	adds	r3, #16
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff fef6 	bl	8008954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3324      	adds	r3, #36	; 0x24
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff fef1 	bl	8008954 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b72:	f002 f9d3 	bl	800af1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b76:	2301      	movs	r3, #1
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08e      	sub	sp, #56	; 0x38
 8008b88:	af02      	add	r7, sp, #8
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10a      	bne.n	8008bae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008baa:	bf00      	nop
 8008bac:	e7fe      	b.n	8008bac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10a      	bne.n	8008bca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <xQueueGenericCreateStatic+0x52>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <xQueueGenericCreateStatic+0x56>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <xQueueGenericCreateStatic+0x58>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10a      	bne.n	8008bf6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	623b      	str	r3, [r7, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d102      	bne.n	8008c02 <xQueueGenericCreateStatic+0x7e>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <xQueueGenericCreateStatic+0x82>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e000      	b.n	8008c08 <xQueueGenericCreateStatic+0x84>
 8008c06:	2300      	movs	r3, #0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	61fb      	str	r3, [r7, #28]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c22:	2350      	movs	r3, #80	; 0x50
 8008c24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b50      	cmp	r3, #80	; 0x50
 8008c2a:	d00a      	beq.n	8008c42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	61bb      	str	r3, [r7, #24]
}
 8008c3e:	bf00      	nop
 8008c40:	e7fe      	b.n	8008c40 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00d      	beq.n	8008c68 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c54:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 f805 	bl	8008c72 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3730      	adds	r7, #48	; 0x30
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
 8008c7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d103      	bne.n	8008c8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	e002      	b.n	8008c94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	69b8      	ldr	r0, [r7, #24]
 8008ca4:	f7ff ff06 	bl	8008ab4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	78fa      	ldrb	r2, [r7, #3]
 8008cac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cb0:	bf00      	nop
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08e      	sub	sp, #56	; 0x38
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <xQueueGenericSend+0x32>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d103      	bne.n	8008cf8 <xQueueGenericSend+0x40>
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <xQueueGenericSend+0x44>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e000      	b.n	8008cfe <xQueueGenericSend+0x46>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10a      	bne.n	8008d18 <xQueueGenericSend+0x60>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d14:	bf00      	nop
 8008d16:	e7fe      	b.n	8008d16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d103      	bne.n	8008d26 <xQueueGenericSend+0x6e>
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <xQueueGenericSend+0x72>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e000      	b.n	8008d2c <xQueueGenericSend+0x74>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10a      	bne.n	8008d46 <xQueueGenericSend+0x8e>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	623b      	str	r3, [r7, #32]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d46:	f001 fbd3 	bl	800a4f0 <xTaskGetSchedulerState>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <xQueueGenericSend+0x9e>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <xQueueGenericSend+0xa2>
 8008d56:	2301      	movs	r3, #1
 8008d58:	e000      	b.n	8008d5c <xQueueGenericSend+0xa4>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <xQueueGenericSend+0xbe>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	61fb      	str	r3, [r7, #28]
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d76:	f002 f8a1 	bl	800aebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d302      	bcc.n	8008d8c <xQueueGenericSend+0xd4>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d129      	bne.n	8008de0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	68b9      	ldr	r1, [r7, #8]
 8008d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d92:	f000 fa07 	bl	80091a4 <prvCopyDataToQueue>
 8008d96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d010      	beq.n	8008dc2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	3324      	adds	r3, #36	; 0x24
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 f933 	bl	800a010 <xTaskRemoveFromEventList>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d013      	beq.n	8008dd8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008db0:	4b3f      	ldr	r3, [pc, #252]	; (8008eb0 <xQueueGenericSend+0x1f8>)
 8008db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	e00a      	b.n	8008dd8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008dc8:	4b39      	ldr	r3, [pc, #228]	; (8008eb0 <xQueueGenericSend+0x1f8>)
 8008dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008dd8:	f002 f8a0 	bl	800af1c <vPortExitCritical>
				return pdPASS;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e063      	b.n	8008ea8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008de6:	f002 f899 	bl	800af1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e05c      	b.n	8008ea8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d106      	bne.n	8008e02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008df4:	f107 0314 	add.w	r3, r7, #20
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 f96d 	bl	800a0d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e02:	f002 f88b 	bl	800af1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e06:	f000 feb9 	bl	8009b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e0a:	f002 f857 	bl	800aebc <vPortEnterCritical>
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e14:	b25b      	sxtb	r3, r3
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d103      	bne.n	8008e24 <xQueueGenericSend+0x16c>
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e2a:	b25b      	sxtb	r3, r3
 8008e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e30:	d103      	bne.n	8008e3a <xQueueGenericSend+0x182>
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e3a:	f002 f86f 	bl	800af1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e3e:	1d3a      	adds	r2, r7, #4
 8008e40:	f107 0314 	add.w	r3, r7, #20
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 f95c 	bl	800a104 <xTaskCheckForTimeOut>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d124      	bne.n	8008e9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e54:	f000 fa9e 	bl	8009394 <prvIsQueueFull>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d018      	beq.n	8008e90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	3310      	adds	r3, #16
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 f882 	bl	8009f70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e6e:	f000 fa29 	bl	80092c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e72:	f000 fe91 	bl	8009b98 <xTaskResumeAll>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f47f af7c 	bne.w	8008d76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008e7e:	4b0c      	ldr	r3, [pc, #48]	; (8008eb0 <xQueueGenericSend+0x1f8>)
 8008e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	e772      	b.n	8008d76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e92:	f000 fa17 	bl	80092c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e96:	f000 fe7f 	bl	8009b98 <xTaskResumeAll>
 8008e9a:	e76c      	b.n	8008d76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e9e:	f000 fa11 	bl	80092c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ea2:	f000 fe79 	bl	8009b98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ea6:	2300      	movs	r3, #0
		}
	}
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3738      	adds	r7, #56	; 0x38
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	e000ed04 	.word	0xe000ed04

08008eb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08e      	sub	sp, #56	; 0x38
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d103      	bne.n	8008ef0 <xQueueGenericSendFromISR+0x3c>
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <xQueueGenericSendFromISR+0x40>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e000      	b.n	8008ef6 <xQueueGenericSendFromISR+0x42>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10a      	bne.n	8008f10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	623b      	str	r3, [r7, #32]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d103      	bne.n	8008f1e <xQueueGenericSendFromISR+0x6a>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d101      	bne.n	8008f22 <xQueueGenericSendFromISR+0x6e>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e000      	b.n	8008f24 <xQueueGenericSendFromISR+0x70>
 8008f22:	2300      	movs	r3, #0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10a      	bne.n	8008f3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	61fb      	str	r3, [r7, #28]
}
 8008f3a:	bf00      	nop
 8008f3c:	e7fe      	b.n	8008f3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f3e:	f002 f87f 	bl	800b040 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f42:	f3ef 8211 	mrs	r2, BASEPRI
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	61ba      	str	r2, [r7, #24]
 8008f58:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d302      	bcc.n	8008f70 <xQueueGenericSendFromISR+0xbc>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d12c      	bne.n	8008fca <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f80:	f000 f910 	bl	80091a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8c:	d112      	bne.n	8008fb4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d016      	beq.n	8008fc4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	3324      	adds	r3, #36	; 0x24
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 f838 	bl	800a010 <xTaskRemoveFromEventList>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00e      	beq.n	8008fc4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	e007      	b.n	8008fc4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fb8:	3301      	adds	r3, #1
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	b25a      	sxtb	r2, r3
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008fc8:	e001      	b.n	8008fce <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008fd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3738      	adds	r7, #56	; 0x38
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08c      	sub	sp, #48	; 0x30
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <xQueueReceive+0x30>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	623b      	str	r3, [r7, #32]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d103      	bne.n	8009022 <xQueueReceive+0x3e>
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <xQueueReceive+0x42>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <xQueueReceive+0x44>
 8009026:	2300      	movs	r3, #0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10a      	bne.n	8009042 <xQueueReceive+0x5e>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	61fb      	str	r3, [r7, #28]
}
 800903e:	bf00      	nop
 8009040:	e7fe      	b.n	8009040 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009042:	f001 fa55 	bl	800a4f0 <xTaskGetSchedulerState>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <xQueueReceive+0x6e>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <xQueueReceive+0x72>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <xQueueReceive+0x74>
 8009056:	2300      	movs	r3, #0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <xQueueReceive+0x8e>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	61bb      	str	r3, [r7, #24]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009072:	f001 ff23 	bl	800aebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01f      	beq.n	80090c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009086:	f000 f8f7 	bl	8009278 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	1e5a      	subs	r2, r3, #1
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00f      	beq.n	80090ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	3310      	adds	r3, #16
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 ffb6 	bl	800a010 <xTaskRemoveFromEventList>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d007      	beq.n	80090ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090aa:	4b3d      	ldr	r3, [pc, #244]	; (80091a0 <xQueueReceive+0x1bc>)
 80090ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090ba:	f001 ff2f 	bl	800af1c <vPortExitCritical>
				return pdPASS;
 80090be:	2301      	movs	r3, #1
 80090c0:	e069      	b.n	8009196 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090c8:	f001 ff28 	bl	800af1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e062      	b.n	8009196 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090d6:	f107 0310 	add.w	r3, r7, #16
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fffc 	bl	800a0d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090e0:	2301      	movs	r3, #1
 80090e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090e4:	f001 ff1a 	bl	800af1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090e8:	f000 fd48 	bl	8009b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090ec:	f001 fee6 	bl	800aebc <vPortEnterCritical>
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090f6:	b25b      	sxtb	r3, r3
 80090f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fc:	d103      	bne.n	8009106 <xQueueReceive+0x122>
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800910c:	b25b      	sxtb	r3, r3
 800910e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009112:	d103      	bne.n	800911c <xQueueReceive+0x138>
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800911c:	f001 fefe 	bl	800af1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009120:	1d3a      	adds	r2, r7, #4
 8009122:	f107 0310 	add.w	r3, r7, #16
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f000 ffeb 	bl	800a104 <xTaskCheckForTimeOut>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d123      	bne.n	800917c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009136:	f000 f917 	bl	8009368 <prvIsQueueEmpty>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d017      	beq.n	8009170 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	3324      	adds	r3, #36	; 0x24
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	4611      	mov	r1, r2
 8009148:	4618      	mov	r0, r3
 800914a:	f000 ff11 	bl	8009f70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800914e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009150:	f000 f8b8 	bl	80092c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009154:	f000 fd20 	bl	8009b98 <xTaskResumeAll>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d189      	bne.n	8009072 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800915e:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <xQueueReceive+0x1bc>)
 8009160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	e780      	b.n	8009072 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009172:	f000 f8a7 	bl	80092c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009176:	f000 fd0f 	bl	8009b98 <xTaskResumeAll>
 800917a:	e77a      	b.n	8009072 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800917c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800917e:	f000 f8a1 	bl	80092c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009182:	f000 fd09 	bl	8009b98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009188:	f000 f8ee 	bl	8009368 <prvIsQueueEmpty>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	f43f af6f 	beq.w	8009072 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009196:	4618      	mov	r0, r3
 8009198:	3730      	adds	r7, #48	; 0x30
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	e000ed04 	.word	0xe000ed04

080091a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10d      	bne.n	80091de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d14d      	bne.n	8009266 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f001 f9ac 	bl	800a52c <xTaskPriorityDisinherit>
 80091d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	605a      	str	r2, [r3, #4]
 80091dc:	e043      	b.n	8009266 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d119      	bne.n	8009218 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6898      	ldr	r0, [r3, #8]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ec:	461a      	mov	r2, r3
 80091ee:	68b9      	ldr	r1, [r7, #8]
 80091f0:	f002 f966 	bl	800b4c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	689a      	ldr	r2, [r3, #8]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fc:	441a      	add	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	429a      	cmp	r2, r3
 800920c:	d32b      	bcc.n	8009266 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	609a      	str	r2, [r3, #8]
 8009216:	e026      	b.n	8009266 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68d8      	ldr	r0, [r3, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009220:	461a      	mov	r2, r3
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	f002 f94c 	bl	800b4c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009230:	425b      	negs	r3, r3
 8009232:	441a      	add	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d207      	bcs.n	8009254 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924c:	425b      	negs	r3, r3
 800924e:	441a      	add	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b02      	cmp	r3, #2
 8009258:	d105      	bne.n	8009266 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	3b01      	subs	r3, #1
 8009264:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800926e:	697b      	ldr	r3, [r7, #20]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d018      	beq.n	80092bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	441a      	add	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d303      	bcc.n	80092ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68d9      	ldr	r1, [r3, #12]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b4:	461a      	mov	r2, r3
 80092b6:	6838      	ldr	r0, [r7, #0]
 80092b8:	f002 f902 	bl	800b4c0 <memcpy>
	}
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092cc:	f001 fdf6 	bl	800aebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092d8:	e011      	b.n	80092fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d012      	beq.n	8009308 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3324      	adds	r3, #36	; 0x24
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 fe92 	bl	800a010 <xTaskRemoveFromEventList>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092f2:	f000 ff79 	bl	800a1e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009302:	2b00      	cmp	r3, #0
 8009304:	dce9      	bgt.n	80092da <prvUnlockQueue+0x16>
 8009306:	e000      	b.n	800930a <prvUnlockQueue+0x46>
					break;
 8009308:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	22ff      	movs	r2, #255	; 0xff
 800930e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009312:	f001 fe03 	bl	800af1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009316:	f001 fdd1 	bl	800aebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009320:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009322:	e011      	b.n	8009348 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d012      	beq.n	8009352 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3310      	adds	r3, #16
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fe6d 	bl	800a010 <xTaskRemoveFromEventList>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800933c:	f000 ff54 	bl	800a1e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	3b01      	subs	r3, #1
 8009344:	b2db      	uxtb	r3, r3
 8009346:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dce9      	bgt.n	8009324 <prvUnlockQueue+0x60>
 8009350:	e000      	b.n	8009354 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009352:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	22ff      	movs	r2, #255	; 0xff
 8009358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800935c:	f001 fdde 	bl	800af1c <vPortExitCritical>
}
 8009360:	bf00      	nop
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009370:	f001 fda4 	bl	800aebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	2b00      	cmp	r3, #0
 800937a:	d102      	bne.n	8009382 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800937c:	2301      	movs	r3, #1
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	e001      	b.n	8009386 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009386:	f001 fdc9 	bl	800af1c <vPortExitCritical>

	return xReturn;
 800938a:	68fb      	ldr	r3, [r7, #12]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800939c:	f001 fd8e 	bl	800aebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d102      	bne.n	80093b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093ac:	2301      	movs	r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	e001      	b.n	80093b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093b6:	f001 fdb1 	bl	800af1c <vPortExitCritical>

	return xReturn;
 80093ba:	68fb      	ldr	r3, [r7, #12]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093ce:	2300      	movs	r3, #0
 80093d0:	60fb      	str	r3, [r7, #12]
 80093d2:	e014      	b.n	80093fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093d4:	4a0e      	ldr	r2, [pc, #56]	; (8009410 <vQueueAddToRegistry+0x4c>)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10b      	bne.n	80093f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80093e0:	490b      	ldr	r1, [pc, #44]	; (8009410 <vQueueAddToRegistry+0x4c>)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80093ea:	4a09      	ldr	r2, [pc, #36]	; (8009410 <vQueueAddToRegistry+0x4c>)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	4413      	add	r3, r2
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80093f6:	e006      	b.n	8009406 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3301      	adds	r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b07      	cmp	r3, #7
 8009402:	d9e7      	bls.n	80093d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	bc80      	pop	{r7}
 800940e:	4770      	bx	lr
 8009410:	20000a6c 	.word	0x20000a6c

08009414 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009424:	f001 fd4a 	bl	800aebc <vPortEnterCritical>
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800942e:	b25b      	sxtb	r3, r3
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009434:	d103      	bne.n	800943e <vQueueWaitForMessageRestricted+0x2a>
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009444:	b25b      	sxtb	r3, r3
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	d103      	bne.n	8009454 <vQueueWaitForMessageRestricted+0x40>
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009454:	f001 fd62 	bl	800af1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	2b00      	cmp	r3, #0
 800945e:	d106      	bne.n	800946e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	3324      	adds	r3, #36	; 0x24
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fda5 	bl	8009fb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	f7ff ff28 	bl	80092c4 <prvUnlockQueue>
	}
 8009474:	bf00      	nop
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08e      	sub	sp, #56	; 0x38
 8009480:	af04      	add	r7, sp, #16
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
 8009488:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800948a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	623b      	str	r3, [r7, #32]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	61fb      	str	r3, [r7, #28]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094c2:	235c      	movs	r3, #92	; 0x5c
 80094c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2b5c      	cmp	r3, #92	; 0x5c
 80094ca:	d00a      	beq.n	80094e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	61bb      	str	r3, [r7, #24]
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d01e      	beq.n	8009526 <xTaskCreateStatic+0xaa>
 80094e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d01b      	beq.n	8009526 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009500:	2300      	movs	r3, #0
 8009502:	9303      	str	r3, [sp, #12]
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	9302      	str	r3, [sp, #8]
 8009508:	f107 0314 	add.w	r3, r7, #20
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	68b9      	ldr	r1, [r7, #8]
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 f850 	bl	80095be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800951e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009520:	f000 f8d8 	bl	80096d4 <prvAddNewTaskToReadyList>
 8009524:	e001      	b.n	800952a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800952a:	697b      	ldr	r3, [r7, #20]
	}
 800952c:	4618      	mov	r0, r3
 800952e:	3728      	adds	r7, #40	; 0x28
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08c      	sub	sp, #48	; 0x30
 8009538:	af04      	add	r7, sp, #16
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	4613      	mov	r3, r2
 8009542:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009544:	88fb      	ldrh	r3, [r7, #6]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4618      	mov	r0, r3
 800954a:	f001 fdb7 	bl	800b0bc <pvPortMalloc>
 800954e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00e      	beq.n	8009574 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009556:	205c      	movs	r0, #92	; 0x5c
 8009558:	f001 fdb0 	bl	800b0bc <pvPortMalloc>
 800955c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	631a      	str	r2, [r3, #48]	; 0x30
 800956a:	e005      	b.n	8009578 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800956c:	6978      	ldr	r0, [r7, #20]
 800956e:	f001 fe69 	bl	800b244 <vPortFree>
 8009572:	e001      	b.n	8009578 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009574:	2300      	movs	r3, #0
 8009576:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d017      	beq.n	80095ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	2300      	movs	r3, #0
 800958a:	9303      	str	r3, [sp, #12]
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	9302      	str	r3, [sp, #8]
 8009590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	68b9      	ldr	r1, [r7, #8]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 f80e 	bl	80095be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095a2:	69f8      	ldr	r0, [r7, #28]
 80095a4:	f000 f896 	bl	80096d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095a8:	2301      	movs	r3, #1
 80095aa:	61bb      	str	r3, [r7, #24]
 80095ac:	e002      	b.n	80095b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095ae:	f04f 33ff 	mov.w	r3, #4294967295
 80095b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095b4:	69bb      	ldr	r3, [r7, #24]
	}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3720      	adds	r7, #32
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b088      	sub	sp, #32
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	607a      	str	r2, [r7, #4]
 80095ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	461a      	mov	r2, r3
 80095d6:	21a5      	movs	r1, #165	; 0xa5
 80095d8:	f001 ff80 	bl	800b4dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095e6:	3b01      	subs	r3, #1
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	f023 0307 	bic.w	r3, r3, #7
 80095f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00a      	beq.n	8009616 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	617b      	str	r3, [r7, #20]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009616:	2300      	movs	r3, #0
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	e012      	b.n	8009642 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	4413      	add	r3, r2
 8009622:	7819      	ldrb	r1, [r3, #0]
 8009624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	4413      	add	r3, r2
 800962a:	3334      	adds	r3, #52	; 0x34
 800962c:	460a      	mov	r2, r1
 800962e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	4413      	add	r3, r2
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d006      	beq.n	800964a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	3301      	adds	r3, #1
 8009640:	61fb      	str	r3, [r7, #28]
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	2b0f      	cmp	r3, #15
 8009646:	d9e9      	bls.n	800961c <prvInitialiseNewTask+0x5e>
 8009648:	e000      	b.n	800964c <prvInitialiseNewTask+0x8e>
		{
			break;
 800964a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	2b37      	cmp	r3, #55	; 0x37
 8009658:	d901      	bls.n	800965e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800965a:	2337      	movs	r3, #55	; 0x37
 800965c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009662:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009668:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	2200      	movs	r2, #0
 800966e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	3304      	adds	r3, #4
 8009674:	4618      	mov	r0, r3
 8009676:	f7ff f98c 	bl	8008992 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	3318      	adds	r3, #24
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff f987 	bl	8008992 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009688:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800968a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009698:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	2200      	movs	r2, #0
 800969e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	68f9      	ldr	r1, [r7, #12]
 80096b4:	69b8      	ldr	r0, [r7, #24]
 80096b6:	f001 fb13 	bl	800ace0 <pxPortInitialiseStack>
 80096ba:	4602      	mov	r2, r0
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096cc:	bf00      	nop
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096dc:	f001 fbee 	bl	800aebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096e0:	4b2d      	ldr	r3, [pc, #180]	; (8009798 <prvAddNewTaskToReadyList+0xc4>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	4a2c      	ldr	r2, [pc, #176]	; (8009798 <prvAddNewTaskToReadyList+0xc4>)
 80096e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096ea:	4b2c      	ldr	r3, [pc, #176]	; (800979c <prvAddNewTaskToReadyList+0xc8>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d109      	bne.n	8009706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096f2:	4a2a      	ldr	r2, [pc, #168]	; (800979c <prvAddNewTaskToReadyList+0xc8>)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096f8:	4b27      	ldr	r3, [pc, #156]	; (8009798 <prvAddNewTaskToReadyList+0xc4>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d110      	bne.n	8009722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009700:	f000 fd96 	bl	800a230 <prvInitialiseTaskLists>
 8009704:	e00d      	b.n	8009722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009706:	4b26      	ldr	r3, [pc, #152]	; (80097a0 <prvAddNewTaskToReadyList+0xcc>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d109      	bne.n	8009722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800970e:	4b23      	ldr	r3, [pc, #140]	; (800979c <prvAddNewTaskToReadyList+0xc8>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	429a      	cmp	r2, r3
 800971a:	d802      	bhi.n	8009722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800971c:	4a1f      	ldr	r2, [pc, #124]	; (800979c <prvAddNewTaskToReadyList+0xc8>)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009722:	4b20      	ldr	r3, [pc, #128]	; (80097a4 <prvAddNewTaskToReadyList+0xd0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3301      	adds	r3, #1
 8009728:	4a1e      	ldr	r2, [pc, #120]	; (80097a4 <prvAddNewTaskToReadyList+0xd0>)
 800972a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800972c:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <prvAddNewTaskToReadyList+0xd0>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009738:	4b1b      	ldr	r3, [pc, #108]	; (80097a8 <prvAddNewTaskToReadyList+0xd4>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d903      	bls.n	8009748 <prvAddNewTaskToReadyList+0x74>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	4a18      	ldr	r2, [pc, #96]	; (80097a8 <prvAddNewTaskToReadyList+0xd4>)
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4a15      	ldr	r2, [pc, #84]	; (80097ac <prvAddNewTaskToReadyList+0xd8>)
 8009756:	441a      	add	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3304      	adds	r3, #4
 800975c:	4619      	mov	r1, r3
 800975e:	4610      	mov	r0, r2
 8009760:	f7ff f923 	bl	80089aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009764:	f001 fbda 	bl	800af1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009768:	4b0d      	ldr	r3, [pc, #52]	; (80097a0 <prvAddNewTaskToReadyList+0xcc>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00e      	beq.n	800978e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009770:	4b0a      	ldr	r3, [pc, #40]	; (800979c <prvAddNewTaskToReadyList+0xc8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977a:	429a      	cmp	r2, r3
 800977c:	d207      	bcs.n	800978e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800977e:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <prvAddNewTaskToReadyList+0xdc>)
 8009780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000f80 	.word	0x20000f80
 800979c:	20000aac 	.word	0x20000aac
 80097a0:	20000f8c 	.word	0x20000f8c
 80097a4:	20000f9c 	.word	0x20000f9c
 80097a8:	20000f88 	.word	0x20000f88
 80097ac:	20000ab0 	.word	0x20000ab0
 80097b0:	e000ed04 	.word	0xe000ed04

080097b4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80097bc:	f001 fb7e 	bl	800aebc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d102      	bne.n	80097cc <vTaskDelete+0x18>
 80097c6:	4b2c      	ldr	r3, [pc, #176]	; (8009878 <vTaskDelete+0xc4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	e000      	b.n	80097ce <vTaskDelete+0x1a>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff f943 	bl	8008a60 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d004      	beq.n	80097ec <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3318      	adds	r3, #24
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7ff f93a 	bl	8008a60 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80097ec:	4b23      	ldr	r3, [pc, #140]	; (800987c <vTaskDelete+0xc8>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3301      	adds	r3, #1
 80097f2:	4a22      	ldr	r2, [pc, #136]	; (800987c <vTaskDelete+0xc8>)
 80097f4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80097f6:	4b20      	ldr	r3, [pc, #128]	; (8009878 <vTaskDelete+0xc4>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d10b      	bne.n	8009818 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3304      	adds	r3, #4
 8009804:	4619      	mov	r1, r3
 8009806:	481e      	ldr	r0, [pc, #120]	; (8009880 <vTaskDelete+0xcc>)
 8009808:	f7ff f8cf 	bl	80089aa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800980c:	4b1d      	ldr	r3, [pc, #116]	; (8009884 <vTaskDelete+0xd0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	4a1c      	ldr	r2, [pc, #112]	; (8009884 <vTaskDelete+0xd0>)
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	e009      	b.n	800982c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009818:	4b1b      	ldr	r3, [pc, #108]	; (8009888 <vTaskDelete+0xd4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3b01      	subs	r3, #1
 800981e:	4a1a      	ldr	r2, [pc, #104]	; (8009888 <vTaskDelete+0xd4>)
 8009820:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f000 fe10 	bl	800a448 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009828:	f000 fe3e 	bl	800a4a8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800982c:	f001 fb76 	bl	800af1c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009830:	4b16      	ldr	r3, [pc, #88]	; (800988c <vTaskDelete+0xd8>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01b      	beq.n	8009870 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009838:	4b0f      	ldr	r3, [pc, #60]	; (8009878 <vTaskDelete+0xc4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	429a      	cmp	r2, r3
 8009840:	d116      	bne.n	8009870 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009842:	4b13      	ldr	r3, [pc, #76]	; (8009890 <vTaskDelete+0xdc>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00a      	beq.n	8009860 <vTaskDelete+0xac>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	60bb      	str	r3, [r7, #8]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009860:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <vTaskDelete+0xe0>)
 8009862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009870:	bf00      	nop
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20000aac 	.word	0x20000aac
 800987c:	20000f9c 	.word	0x20000f9c
 8009880:	20000f54 	.word	0x20000f54
 8009884:	20000f68 	.word	0x20000f68
 8009888:	20000f80 	.word	0x20000f80
 800988c:	20000f8c 	.word	0x20000f8c
 8009890:	20000fa8 	.word	0x20000fa8
 8009894:	e000ed04 	.word	0xe000ed04

08009898 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	; 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80098a2:	2300      	movs	r3, #0
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <vTaskDelayUntil+0x2a>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	617b      	str	r3, [r7, #20]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <vTaskDelayUntil+0x46>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	613b      	str	r3, [r7, #16]
}
 80098da:	bf00      	nop
 80098dc:	e7fe      	b.n	80098dc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80098de:	4b2a      	ldr	r3, [pc, #168]	; (8009988 <vTaskDelayUntil+0xf0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <vTaskDelayUntil+0x64>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	60fb      	str	r3, [r7, #12]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80098fc:	f000 f93e 	bl	8009b7c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009900:	4b22      	ldr	r3, [pc, #136]	; (800998c <vTaskDelayUntil+0xf4>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	4413      	add	r3, r2
 800990e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6a3a      	ldr	r2, [r7, #32]
 8009916:	429a      	cmp	r2, r3
 8009918:	d20b      	bcs.n	8009932 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	429a      	cmp	r2, r3
 8009922:	d211      	bcs.n	8009948 <vTaskDelayUntil+0xb0>
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	429a      	cmp	r2, r3
 800992a:	d90d      	bls.n	8009948 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
 8009930:	e00a      	b.n	8009948 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69fa      	ldr	r2, [r7, #28]
 8009938:	429a      	cmp	r2, r3
 800993a:	d303      	bcc.n	8009944 <vTaskDelayUntil+0xac>
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	429a      	cmp	r2, r3
 8009942:	d901      	bls.n	8009948 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009944:	2301      	movs	r3, #1
 8009946:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	69fa      	ldr	r2, [r7, #28]
 800994c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	d006      	beq.n	8009962 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	2100      	movs	r1, #0
 800995c:	4618      	mov	r0, r3
 800995e:	f000 fe53 	bl	800a608 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009962:	f000 f919 	bl	8009b98 <xTaskResumeAll>
 8009966:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d107      	bne.n	800997e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800996e:	4b08      	ldr	r3, [pc, #32]	; (8009990 <vTaskDelayUntil+0xf8>)
 8009970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800997e:	bf00      	nop
 8009980:	3728      	adds	r7, #40	; 0x28
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20000fa8 	.word	0x20000fa8
 800998c:	20000f84 	.word	0x20000f84
 8009990:	e000ed04 	.word	0xe000ed04

08009994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800999c:	2300      	movs	r3, #0
 800999e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d017      	beq.n	80099d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80099a6:	4b13      	ldr	r3, [pc, #76]	; (80099f4 <vTaskDelay+0x60>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <vTaskDelay+0x30>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	60bb      	str	r3, [r7, #8]
}
 80099c0:	bf00      	nop
 80099c2:	e7fe      	b.n	80099c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80099c4:	f000 f8da 	bl	8009b7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099c8:	2100      	movs	r1, #0
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fe1c 	bl	800a608 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099d0:	f000 f8e2 	bl	8009b98 <xTaskResumeAll>
 80099d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d107      	bne.n	80099ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80099dc:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <vTaskDelay+0x64>)
 80099de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099ec:	bf00      	nop
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	20000fa8 	.word	0x20000fa8
 80099f8:	e000ed04 	.word	0xe000ed04

080099fc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <eTaskGetState+0x28>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	60bb      	str	r3, [r7, #8]
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009a24:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <eTaskGetState+0xa0>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d102      	bne.n	8009a34 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	75fb      	strb	r3, [r7, #23]
 8009a32:	e02d      	b.n	8009a90 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 8009a34:	f001 fa42 	bl	800aebc <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009a3e:	f001 fa6d 	bl	800af1c <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8009a42:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <eTaskGetState+0xa4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d004      	beq.n	8009a56 <eTaskGetState+0x5a>
 8009a4c:	4b15      	ldr	r3, [pc, #84]	; (8009aa4 <eTaskGetState+0xa8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d102      	bne.n	8009a5c <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009a56:	2302      	movs	r3, #2
 8009a58:	75fb      	strb	r3, [r7, #23]
 8009a5a:	e019      	b.n	8009a90 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4a12      	ldr	r2, [pc, #72]	; (8009aa8 <eTaskGetState+0xac>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d109      	bne.n	8009a78 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d102      	bne.n	8009a72 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	75fb      	strb	r3, [r7, #23]
 8009a70:	e00e      	b.n	8009a90 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 8009a72:	2302      	movs	r3, #2
 8009a74:	75fb      	strb	r3, [r7, #23]
 8009a76:	e00b      	b.n	8009a90 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4a0c      	ldr	r2, [pc, #48]	; (8009aac <eTaskGetState+0xb0>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d002      	beq.n	8009a86 <eTaskGetState+0x8a>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009a86:	2304      	movs	r3, #4
 8009a88:	75fb      	strb	r3, [r7, #23]
 8009a8a:	e001      	b.n	8009a90 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20000aac 	.word	0x20000aac
 8009aa0:	20000f38 	.word	0x20000f38
 8009aa4:	20000f3c 	.word	0x20000f3c
 8009aa8:	20000f6c 	.word	0x20000f6c
 8009aac:	20000f54 	.word	0x20000f54

08009ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009abe:	463a      	mov	r2, r7
 8009ac0:	1d39      	adds	r1, r7, #4
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe ff12 	bl	80088f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	9202      	str	r2, [sp, #8]
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	2300      	movs	r3, #0
 8009adc:	460a      	mov	r2, r1
 8009ade:	4921      	ldr	r1, [pc, #132]	; (8009b64 <vTaskStartScheduler+0xb4>)
 8009ae0:	4821      	ldr	r0, [pc, #132]	; (8009b68 <vTaskStartScheduler+0xb8>)
 8009ae2:	f7ff fccb 	bl	800947c <xTaskCreateStatic>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	4a20      	ldr	r2, [pc, #128]	; (8009b6c <vTaskStartScheduler+0xbc>)
 8009aea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009aec:	4b1f      	ldr	r3, [pc, #124]	; (8009b6c <vTaskStartScheduler+0xbc>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009af4:	2301      	movs	r3, #1
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	e001      	b.n	8009afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d102      	bne.n	8009b0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b04:	f000 fdda 	bl	800a6bc <xTimerCreateTimerTask>
 8009b08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d116      	bne.n	8009b3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	613b      	str	r3, [r7, #16]
}
 8009b22:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b24:	4b12      	ldr	r3, [pc, #72]	; (8009b70 <vTaskStartScheduler+0xc0>)
 8009b26:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b2c:	4b11      	ldr	r3, [pc, #68]	; (8009b74 <vTaskStartScheduler+0xc4>)
 8009b2e:	2201      	movs	r2, #1
 8009b30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009b32:	4b11      	ldr	r3, [pc, #68]	; (8009b78 <vTaskStartScheduler+0xc8>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b38:	f001 f94e 	bl	800add8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b3c:	e00e      	b.n	8009b5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b44:	d10a      	bne.n	8009b5c <vTaskStartScheduler+0xac>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	60fb      	str	r3, [r7, #12]
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <vTaskStartScheduler+0xaa>
}
 8009b5c:	bf00      	nop
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	0800fec4 	.word	0x0800fec4
 8009b68:	0800a201 	.word	0x0800a201
 8009b6c:	20000fa4 	.word	0x20000fa4
 8009b70:	20000fa0 	.word	0x20000fa0
 8009b74:	20000f8c 	.word	0x20000f8c
 8009b78:	20000f84 	.word	0x20000f84

08009b7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b80:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <vTaskSuspendAll+0x18>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3301      	adds	r3, #1
 8009b86:	4a03      	ldr	r2, [pc, #12]	; (8009b94 <vTaskSuspendAll+0x18>)
 8009b88:	6013      	str	r3, [r2, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bc80      	pop	{r7}
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	20000fa8 	.word	0x20000fa8

08009b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ba6:	4b42      	ldr	r3, [pc, #264]	; (8009cb0 <xTaskResumeAll+0x118>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	603b      	str	r3, [r7, #0]
}
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bc4:	f001 f97a 	bl	800aebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bc8:	4b39      	ldr	r3, [pc, #228]	; (8009cb0 <xTaskResumeAll+0x118>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	4a38      	ldr	r2, [pc, #224]	; (8009cb0 <xTaskResumeAll+0x118>)
 8009bd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bd2:	4b37      	ldr	r3, [pc, #220]	; (8009cb0 <xTaskResumeAll+0x118>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d162      	bne.n	8009ca0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bda:	4b36      	ldr	r3, [pc, #216]	; (8009cb4 <xTaskResumeAll+0x11c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d05e      	beq.n	8009ca0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009be2:	e02f      	b.n	8009c44 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009be4:	4b34      	ldr	r3, [pc, #208]	; (8009cb8 <xTaskResumeAll+0x120>)
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3318      	adds	r3, #24
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fe ff35 	bl	8008a60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fe ff30 	bl	8008a60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	4b2d      	ldr	r3, [pc, #180]	; (8009cbc <xTaskResumeAll+0x124>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d903      	bls.n	8009c14 <xTaskResumeAll+0x7c>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c10:	4a2a      	ldr	r2, [pc, #168]	; (8009cbc <xTaskResumeAll+0x124>)
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4a27      	ldr	r2, [pc, #156]	; (8009cc0 <xTaskResumeAll+0x128>)
 8009c22:	441a      	add	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f7fe febd 	bl	80089aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c34:	4b23      	ldr	r3, [pc, #140]	; (8009cc4 <xTaskResumeAll+0x12c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d302      	bcc.n	8009c44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c3e:	4b22      	ldr	r3, [pc, #136]	; (8009cc8 <xTaskResumeAll+0x130>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c44:	4b1c      	ldr	r3, [pc, #112]	; (8009cb8 <xTaskResumeAll+0x120>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1cb      	bne.n	8009be4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d001      	beq.n	8009c56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c52:	f000 fc29 	bl	800a4a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c56:	4b1d      	ldr	r3, [pc, #116]	; (8009ccc <xTaskResumeAll+0x134>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d010      	beq.n	8009c84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c62:	f000 f86b 	bl	8009d3c <xTaskIncrementTick>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c6c:	4b16      	ldr	r3, [pc, #88]	; (8009cc8 <xTaskResumeAll+0x130>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1f1      	bne.n	8009c62 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <xTaskResumeAll+0x134>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c84:	4b10      	ldr	r3, [pc, #64]	; (8009cc8 <xTaskResumeAll+0x130>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d009      	beq.n	8009ca0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c90:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <xTaskResumeAll+0x138>)
 8009c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ca0:	f001 f93c 	bl	800af1c <vPortExitCritical>

	return xAlreadyYielded;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000fa8 	.word	0x20000fa8
 8009cb4:	20000f80 	.word	0x20000f80
 8009cb8:	20000f40 	.word	0x20000f40
 8009cbc:	20000f88 	.word	0x20000f88
 8009cc0:	20000ab0 	.word	0x20000ab0
 8009cc4:	20000aac 	.word	0x20000aac
 8009cc8:	20000f94 	.word	0x20000f94
 8009ccc:	20000f90 	.word	0x20000f90
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cda:	4b04      	ldr	r3, [pc, #16]	; (8009cec <xTaskGetTickCount+0x18>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ce0:	687b      	ldr	r3, [r7, #4]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bc80      	pop	{r7}
 8009cea:	4770      	bx	lr
 8009cec:	20000f84 	.word	0x20000f84

08009cf0 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8009cf4:	4b02      	ldr	r3, [pc, #8]	; (8009d00 <uxTaskGetNumberOfTasks+0x10>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr
 8009d00:	20000f80 	.word	0x20000f80

08009d04 <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	TaskHandle_t xTaskGetIdleTaskHandle( void )
	{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
 8009d0a:	4b0b      	ldr	r3, [pc, #44]	; (8009d38 <xTaskGetIdleTaskHandle+0x34>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <xTaskGetIdleTaskHandle+0x24>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	607b      	str	r3, [r7, #4]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <xTaskGetIdleTaskHandle+0x22>
		return xIdleTaskHandle;
 8009d28:	4b03      	ldr	r3, [pc, #12]	; (8009d38 <xTaskGetIdleTaskHandle+0x34>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
	}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bc80      	pop	{r7}
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	20000fa4 	.word	0x20000fa4

08009d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d46:	4b51      	ldr	r3, [pc, #324]	; (8009e8c <xTaskIncrementTick+0x150>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f040 808e 	bne.w	8009e6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d50:	4b4f      	ldr	r3, [pc, #316]	; (8009e90 <xTaskIncrementTick+0x154>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d58:	4a4d      	ldr	r2, [pc, #308]	; (8009e90 <xTaskIncrementTick+0x154>)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d120      	bne.n	8009da6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d64:	4b4b      	ldr	r3, [pc, #300]	; (8009e94 <xTaskIncrementTick+0x158>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <xTaskIncrementTick+0x48>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	603b      	str	r3, [r7, #0]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <xTaskIncrementTick+0x46>
 8009d84:	4b43      	ldr	r3, [pc, #268]	; (8009e94 <xTaskIncrementTick+0x158>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	4b43      	ldr	r3, [pc, #268]	; (8009e98 <xTaskIncrementTick+0x15c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a41      	ldr	r2, [pc, #260]	; (8009e94 <xTaskIncrementTick+0x158>)
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	4a41      	ldr	r2, [pc, #260]	; (8009e98 <xTaskIncrementTick+0x15c>)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	4b40      	ldr	r3, [pc, #256]	; (8009e9c <xTaskIncrementTick+0x160>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	4a3f      	ldr	r2, [pc, #252]	; (8009e9c <xTaskIncrementTick+0x160>)
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	f000 fb81 	bl	800a4a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009da6:	4b3e      	ldr	r3, [pc, #248]	; (8009ea0 <xTaskIncrementTick+0x164>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d34e      	bcc.n	8009e4e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009db0:	4b38      	ldr	r3, [pc, #224]	; (8009e94 <xTaskIncrementTick+0x158>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <xTaskIncrementTick+0x82>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e000      	b.n	8009dc0 <xTaskIncrementTick+0x84>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d004      	beq.n	8009dce <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dc4:	4b36      	ldr	r3, [pc, #216]	; (8009ea0 <xTaskIncrementTick+0x164>)
 8009dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dca:	601a      	str	r2, [r3, #0]
					break;
 8009dcc:	e03f      	b.n	8009e4e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009dce:	4b31      	ldr	r3, [pc, #196]	; (8009e94 <xTaskIncrementTick+0x158>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d203      	bcs.n	8009dee <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009de6:	4a2e      	ldr	r2, [pc, #184]	; (8009ea0 <xTaskIncrementTick+0x164>)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6013      	str	r3, [r2, #0]
						break;
 8009dec:	e02f      	b.n	8009e4e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe fe34 	bl	8008a60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	3318      	adds	r3, #24
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe fe2b 	bl	8008a60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0e:	4b25      	ldr	r3, [pc, #148]	; (8009ea4 <xTaskIncrementTick+0x168>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d903      	bls.n	8009e1e <xTaskIncrementTick+0xe2>
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1a:	4a22      	ldr	r2, [pc, #136]	; (8009ea4 <xTaskIncrementTick+0x168>)
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4a1f      	ldr	r2, [pc, #124]	; (8009ea8 <xTaskIncrementTick+0x16c>)
 8009e2c:	441a      	add	r2, r3
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	3304      	adds	r3, #4
 8009e32:	4619      	mov	r1, r3
 8009e34:	4610      	mov	r0, r2
 8009e36:	f7fe fdb8 	bl	80089aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3e:	4b1b      	ldr	r3, [pc, #108]	; (8009eac <xTaskIncrementTick+0x170>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d3b3      	bcc.n	8009db0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e4c:	e7b0      	b.n	8009db0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e4e:	4b17      	ldr	r3, [pc, #92]	; (8009eac <xTaskIncrementTick+0x170>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e54:	4914      	ldr	r1, [pc, #80]	; (8009ea8 <xTaskIncrementTick+0x16c>)
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d907      	bls.n	8009e76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009e66:	2301      	movs	r3, #1
 8009e68:	617b      	str	r3, [r7, #20]
 8009e6a:	e004      	b.n	8009e76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e6c:	4b10      	ldr	r3, [pc, #64]	; (8009eb0 <xTaskIncrementTick+0x174>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4a0f      	ldr	r2, [pc, #60]	; (8009eb0 <xTaskIncrementTick+0x174>)
 8009e74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e76:	4b0f      	ldr	r3, [pc, #60]	; (8009eb4 <xTaskIncrementTick+0x178>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e82:	697b      	ldr	r3, [r7, #20]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000fa8 	.word	0x20000fa8
 8009e90:	20000f84 	.word	0x20000f84
 8009e94:	20000f38 	.word	0x20000f38
 8009e98:	20000f3c 	.word	0x20000f3c
 8009e9c:	20000f98 	.word	0x20000f98
 8009ea0:	20000fa0 	.word	0x20000fa0
 8009ea4:	20000f88 	.word	0x20000f88
 8009ea8:	20000ab0 	.word	0x20000ab0
 8009eac:	20000aac 	.word	0x20000aac
 8009eb0:	20000f90 	.word	0x20000f90
 8009eb4:	20000f94 	.word	0x20000f94

08009eb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ebe:	4b27      	ldr	r3, [pc, #156]	; (8009f5c <vTaskSwitchContext+0xa4>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ec6:	4b26      	ldr	r3, [pc, #152]	; (8009f60 <vTaskSwitchContext+0xa8>)
 8009ec8:	2201      	movs	r2, #1
 8009eca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ecc:	e041      	b.n	8009f52 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009ece:	4b24      	ldr	r3, [pc, #144]	; (8009f60 <vTaskSwitchContext+0xa8>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009ed4:	4b23      	ldr	r3, [pc, #140]	; (8009f64 <vTaskSwitchContext+0xac>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	e010      	b.n	8009efe <vTaskSwitchContext+0x46>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10a      	bne.n	8009ef8 <vTaskSwitchContext+0x40>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	607b      	str	r3, [r7, #4]
}
 8009ef4:	bf00      	nop
 8009ef6:	e7fe      	b.n	8009ef6 <vTaskSwitchContext+0x3e>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3b01      	subs	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	491a      	ldr	r1, [pc, #104]	; (8009f68 <vTaskSwitchContext+0xb0>)
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	4613      	mov	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	440b      	add	r3, r1
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0e4      	beq.n	8009edc <vTaskSwitchContext+0x24>
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	4613      	mov	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4a12      	ldr	r2, [pc, #72]	; (8009f68 <vTaskSwitchContext+0xb0>)
 8009f1e:	4413      	add	r3, r2
 8009f20:	60bb      	str	r3, [r7, #8]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	605a      	str	r2, [r3, #4]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	3308      	adds	r3, #8
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d104      	bne.n	8009f42 <vTaskSwitchContext+0x8a>
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	605a      	str	r2, [r3, #4]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	4a08      	ldr	r2, [pc, #32]	; (8009f6c <vTaskSwitchContext+0xb4>)
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	4a05      	ldr	r2, [pc, #20]	; (8009f64 <vTaskSwitchContext+0xac>)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6013      	str	r3, [r2, #0]
}
 8009f52:	bf00      	nop
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bc80      	pop	{r7}
 8009f5a:	4770      	bx	lr
 8009f5c:	20000fa8 	.word	0x20000fa8
 8009f60:	20000f94 	.word	0x20000f94
 8009f64:	20000f88 	.word	0x20000f88
 8009f68:	20000ab0 	.word	0x20000ab0
 8009f6c:	20000aac 	.word	0x20000aac

08009f70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	60fb      	str	r3, [r7, #12]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f96:	4b07      	ldr	r3, [pc, #28]	; (8009fb4 <vTaskPlaceOnEventList+0x44>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3318      	adds	r3, #24
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7fe fd26 	bl	80089f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	6838      	ldr	r0, [r7, #0]
 8009fa8:	f000 fb2e 	bl	800a608 <prvAddCurrentTaskToDelayedList>
}
 8009fac:	bf00      	nop
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20000aac 	.word	0x20000aac

08009fb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	617b      	str	r3, [r7, #20]
}
 8009fdc:	bf00      	nop
 8009fde:	e7fe      	b.n	8009fde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fe0:	4b0a      	ldr	r3, [pc, #40]	; (800a00c <vTaskPlaceOnEventListRestricted+0x54>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3318      	adds	r3, #24
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7fe fcde 	bl	80089aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	68b8      	ldr	r0, [r7, #8]
 8009ffe:	f000 fb03 	bl	800a608 <prvAddCurrentTaskToDelayedList>
	}
 800a002:	bf00      	nop
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20000aac 	.word	0x20000aac

0800a010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10a      	bne.n	800a03c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	60fb      	str	r3, [r7, #12]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	3318      	adds	r3, #24
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe fd0d 	bl	8008a60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a046:	4b1e      	ldr	r3, [pc, #120]	; (800a0c0 <xTaskRemoveFromEventList+0xb0>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d11d      	bne.n	800a08a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	3304      	adds	r3, #4
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe fd04 	bl	8008a60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05c:	4b19      	ldr	r3, [pc, #100]	; (800a0c4 <xTaskRemoveFromEventList+0xb4>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	429a      	cmp	r2, r3
 800a062:	d903      	bls.n	800a06c <xTaskRemoveFromEventList+0x5c>
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	4a16      	ldr	r2, [pc, #88]	; (800a0c4 <xTaskRemoveFromEventList+0xb4>)
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4a13      	ldr	r2, [pc, #76]	; (800a0c8 <xTaskRemoveFromEventList+0xb8>)
 800a07a:	441a      	add	r2, r3
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	3304      	adds	r3, #4
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f7fe fc91 	bl	80089aa <vListInsertEnd>
 800a088:	e005      	b.n	800a096 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	3318      	adds	r3, #24
 800a08e:	4619      	mov	r1, r3
 800a090:	480e      	ldr	r0, [pc, #56]	; (800a0cc <xTaskRemoveFromEventList+0xbc>)
 800a092:	f7fe fc8a 	bl	80089aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09a:	4b0d      	ldr	r3, [pc, #52]	; (800a0d0 <xTaskRemoveFromEventList+0xc0>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d905      	bls.n	800a0b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0a8:	4b0a      	ldr	r3, [pc, #40]	; (800a0d4 <xTaskRemoveFromEventList+0xc4>)
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	e001      	b.n	800a0b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a0b4:	697b      	ldr	r3, [r7, #20]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000fa8 	.word	0x20000fa8
 800a0c4:	20000f88 	.word	0x20000f88
 800a0c8:	20000ab0 	.word	0x20000ab0
 800a0cc:	20000f40 	.word	0x20000f40
 800a0d0:	20000aac 	.word	0x20000aac
 800a0d4:	20000f94 	.word	0x20000f94

0800a0d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0e0:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <vTaskInternalSetTimeOutState+0x24>)
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0e8:	4b05      	ldr	r3, [pc, #20]	; (800a100 <vTaskInternalSetTimeOutState+0x28>)
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	605a      	str	r2, [r3, #4]
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bc80      	pop	{r7}
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	20000f98 	.word	0x20000f98
 800a100:	20000f84 	.word	0x20000f84

0800a104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	613b      	str	r3, [r7, #16]
}
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a146:	f000 feb9 	bl	800aebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a14a:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <xTaskCheckForTimeOut+0xd8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 800a15a:	4b21      	ldr	r3, [pc, #132]	; (800a1e0 <xTaskCheckForTimeOut+0xdc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a162:	2b00      	cmp	r3, #0
 800a164:	d007      	beq.n	800a176 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a166:	4b1e      	ldr	r3, [pc, #120]	; (800a1e0 <xTaskCheckForTimeOut+0xdc>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				xReturn = pdTRUE;
 800a170:	2301      	movs	r3, #1
 800a172:	61fb      	str	r3, [r7, #28]
 800a174:	e02b      	b.n	800a1ce <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17e:	d102      	bne.n	800a186 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a180:	2300      	movs	r3, #0
 800a182:	61fb      	str	r3, [r7, #28]
 800a184:	e023      	b.n	800a1ce <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	4b16      	ldr	r3, [pc, #88]	; (800a1e4 <xTaskCheckForTimeOut+0xe0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d007      	beq.n	800a1a2 <xTaskCheckForTimeOut+0x9e>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d302      	bcc.n	800a1a2 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a19c:	2301      	movs	r3, #1
 800a19e:	61fb      	str	r3, [r7, #28]
 800a1a0:	e015      	b.n	800a1ce <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d20b      	bcs.n	800a1c4 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	1ad2      	subs	r2, r2, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff ff8d 	bl	800a0d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	61fb      	str	r3, [r7, #28]
 800a1c2:	e004      	b.n	800a1ce <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1ce:	f000 fea5 	bl	800af1c <vPortExitCritical>

	return xReturn;
 800a1d2:	69fb      	ldr	r3, [r7, #28]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3720      	adds	r7, #32
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20000f84 	.word	0x20000f84
 800a1e0:	20000aac 	.word	0x20000aac
 800a1e4:	20000f98 	.word	0x20000f98

0800a1e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1ec:	4b03      	ldr	r3, [pc, #12]	; (800a1fc <vTaskMissedYield+0x14>)
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bc80      	pop	{r7}
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	20000f94 	.word	0x20000f94

0800a200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a208:	f000 f852 	bl	800a2b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a20c:	4b06      	ldr	r3, [pc, #24]	; (800a228 <prvIdleTask+0x28>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d9f9      	bls.n	800a208 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <prvIdleTask+0x2c>)
 800a216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a224:	e7f0      	b.n	800a208 <prvIdleTask+0x8>
 800a226:	bf00      	nop
 800a228:	20000ab0 	.word	0x20000ab0
 800a22c:	e000ed04 	.word	0xe000ed04

0800a230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a236:	2300      	movs	r3, #0
 800a238:	607b      	str	r3, [r7, #4]
 800a23a:	e00c      	b.n	800a256 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	4613      	mov	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4a12      	ldr	r2, [pc, #72]	; (800a290 <prvInitialiseTaskLists+0x60>)
 800a248:	4413      	add	r3, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fb82 	bl	8008954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3301      	adds	r3, #1
 800a254:	607b      	str	r3, [r7, #4]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b37      	cmp	r3, #55	; 0x37
 800a25a:	d9ef      	bls.n	800a23c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a25c:	480d      	ldr	r0, [pc, #52]	; (800a294 <prvInitialiseTaskLists+0x64>)
 800a25e:	f7fe fb79 	bl	8008954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a262:	480d      	ldr	r0, [pc, #52]	; (800a298 <prvInitialiseTaskLists+0x68>)
 800a264:	f7fe fb76 	bl	8008954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a268:	480c      	ldr	r0, [pc, #48]	; (800a29c <prvInitialiseTaskLists+0x6c>)
 800a26a:	f7fe fb73 	bl	8008954 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a26e:	480c      	ldr	r0, [pc, #48]	; (800a2a0 <prvInitialiseTaskLists+0x70>)
 800a270:	f7fe fb70 	bl	8008954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a274:	480b      	ldr	r0, [pc, #44]	; (800a2a4 <prvInitialiseTaskLists+0x74>)
 800a276:	f7fe fb6d 	bl	8008954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a27a:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <prvInitialiseTaskLists+0x78>)
 800a27c:	4a05      	ldr	r2, [pc, #20]	; (800a294 <prvInitialiseTaskLists+0x64>)
 800a27e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a280:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <prvInitialiseTaskLists+0x7c>)
 800a282:	4a05      	ldr	r2, [pc, #20]	; (800a298 <prvInitialiseTaskLists+0x68>)
 800a284:	601a      	str	r2, [r3, #0]
}
 800a286:	bf00      	nop
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000ab0 	.word	0x20000ab0
 800a294:	20000f10 	.word	0x20000f10
 800a298:	20000f24 	.word	0x20000f24
 800a29c:	20000f40 	.word	0x20000f40
 800a2a0:	20000f54 	.word	0x20000f54
 800a2a4:	20000f6c 	.word	0x20000f6c
 800a2a8:	20000f38 	.word	0x20000f38
 800a2ac:	20000f3c 	.word	0x20000f3c

0800a2b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2b6:	e019      	b.n	800a2ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2b8:	f000 fe00 	bl	800aebc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a2bc:	4b10      	ldr	r3, [pc, #64]	; (800a300 <prvCheckTasksWaitingTermination+0x50>)
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fe fbc9 	bl	8008a60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2ce:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <prvCheckTasksWaitingTermination+0x54>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	4a0b      	ldr	r2, [pc, #44]	; (800a304 <prvCheckTasksWaitingTermination+0x54>)
 800a2d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2d8:	4b0b      	ldr	r3, [pc, #44]	; (800a308 <prvCheckTasksWaitingTermination+0x58>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	4a0a      	ldr	r2, [pc, #40]	; (800a308 <prvCheckTasksWaitingTermination+0x58>)
 800a2e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2e2:	f000 fe1b 	bl	800af1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f8ae 	bl	800a448 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <prvCheckTasksWaitingTermination+0x58>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e1      	bne.n	800a2b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000f54 	.word	0x20000f54
 800a304:	20000f80 	.word	0x20000f80
 800a308:	20000f68 	.word	0x20000f68

0800a30c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d102      	bne.n	800a326 <vTaskGetInfo+0x1a>
 800a320:	4b2c      	ldr	r3, [pc, #176]	; (800a3d4 <vTaskGetInfo+0xc8>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	e000      	b.n	800a328 <vTaskGetInfo+0x1c>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2200      	movs	r2, #0
 800a35e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	2b05      	cmp	r3, #5
 800a364:	d01a      	beq.n	800a39c <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800a366:	4b1b      	ldr	r3, [pc, #108]	; (800a3d4 <vTaskGetInfo+0xc8>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d103      	bne.n	800a378 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2200      	movs	r2, #0
 800a374:	731a      	strb	r2, [r3, #12]
 800a376:	e018      	b.n	800a3aa <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	78fa      	ldrb	r2, [r7, #3]
 800a37c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800a37e:	78fb      	ldrb	r3, [r7, #3]
 800a380:	2b03      	cmp	r3, #3
 800a382:	d112      	bne.n	800a3aa <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800a384:	f7ff fbfa 	bl	8009b7c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2202      	movs	r2, #2
 800a394:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800a396:	f7ff fbff 	bl	8009b98 <xTaskResumeAll>
 800a39a:	e006      	b.n	800a3aa <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a39c:	6978      	ldr	r0, [r7, #20]
 800a39e:	f7ff fb2d 	bl	80099fc <eTaskGetState>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d009      	beq.n	800a3c4 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 f80f 	bl	800a3d8 <prvTaskCheckFreeStackSpace>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	461a      	mov	r2, r3
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800a3c2:	e002      	b.n	800a3ca <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	841a      	strh	r2, [r3, #32]
	}
 800a3ca:	bf00      	nop
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20000aac 	.word	0x20000aac

0800a3d8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a3e4:	e005      	b.n	800a3f2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2ba5      	cmp	r3, #165	; 0xa5
 800a3f8:	d0f5      	beq.n	800a3e6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	089b      	lsrs	r3, r3, #2
 800a3fe:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	b29b      	uxth	r3, r3
	}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	bc80      	pop	{r7}
 800a40c:	4770      	bx	lr
	...

0800a410 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d102      	bne.n	800a424 <uxTaskGetStackHighWaterMark+0x14>
 800a41e:	4b09      	ldr	r3, [pc, #36]	; (800a444 <uxTaskGetStackHighWaterMark+0x34>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	e000      	b.n	800a426 <uxTaskGetStackHighWaterMark+0x16>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800a42e:	6938      	ldr	r0, [r7, #16]
 800a430:	f7ff ffd2 	bl	800a3d8 <prvTaskCheckFreeStackSpace>
 800a434:	4603      	mov	r3, r0
 800a436:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800a438:	68fb      	ldr	r3, [r7, #12]
	}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	20000aac 	.word	0x20000aac

0800a448 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a456:	2b00      	cmp	r3, #0
 800a458:	d108      	bne.n	800a46c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fef0 	bl	800b244 <vPortFree>
				vPortFree( pxTCB );
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 feed 	bl	800b244 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a46a:	e018      	b.n	800a49e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a472:	2b01      	cmp	r3, #1
 800a474:	d103      	bne.n	800a47e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fee4 	bl	800b244 <vPortFree>
	}
 800a47c:	e00f      	b.n	800a49e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a484:	2b02      	cmp	r3, #2
 800a486:	d00a      	beq.n	800a49e <prvDeleteTCB+0x56>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	60fb      	str	r3, [r7, #12]
}
 800a49a:	bf00      	nop
 800a49c:	e7fe      	b.n	800a49c <prvDeleteTCB+0x54>
	}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ae:	4b0e      	ldr	r3, [pc, #56]	; (800a4e8 <prvResetNextTaskUnblockTime+0x40>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <prvResetNextTaskUnblockTime+0x14>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e000      	b.n	800a4be <prvResetNextTaskUnblockTime+0x16>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d004      	beq.n	800a4cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4c2:	4b0a      	ldr	r3, [pc, #40]	; (800a4ec <prvResetNextTaskUnblockTime+0x44>)
 800a4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4ca:	e008      	b.n	800a4de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4cc:	4b06      	ldr	r3, [pc, #24]	; (800a4e8 <prvResetNextTaskUnblockTime+0x40>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	4a04      	ldr	r2, [pc, #16]	; (800a4ec <prvResetNextTaskUnblockTime+0x44>)
 800a4dc:	6013      	str	r3, [r2, #0]
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bc80      	pop	{r7}
 800a4e6:	4770      	bx	lr
 800a4e8:	20000f38 	.word	0x20000f38
 800a4ec:	20000fa0 	.word	0x20000fa0

0800a4f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4f6:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <xTaskGetSchedulerState+0x34>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d102      	bne.n	800a504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4fe:	2301      	movs	r3, #1
 800a500:	607b      	str	r3, [r7, #4]
 800a502:	e008      	b.n	800a516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a504:	4b08      	ldr	r3, [pc, #32]	; (800a528 <xTaskGetSchedulerState+0x38>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d102      	bne.n	800a512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a50c:	2302      	movs	r3, #2
 800a50e:	607b      	str	r3, [r7, #4]
 800a510:	e001      	b.n	800a516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a512:	2300      	movs	r3, #0
 800a514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a516:	687b      	ldr	r3, [r7, #4]
	}
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bc80      	pop	{r7}
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	20000f8c 	.word	0x20000f8c
 800a528:	20000fa8 	.word	0x20000fa8

0800a52c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a538:	2300      	movs	r3, #0
 800a53a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d056      	beq.n	800a5f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a542:	4b2e      	ldr	r3, [pc, #184]	; (800a5fc <xTaskPriorityDisinherit+0xd0>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d00a      	beq.n	800a562 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	60fb      	str	r3, [r7, #12]
}
 800a55e:	bf00      	nop
 800a560:	e7fe      	b.n	800a560 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	60bb      	str	r3, [r7, #8]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a592:	429a      	cmp	r2, r3
 800a594:	d02c      	beq.n	800a5f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d128      	bne.n	800a5f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe fa5c 	bl	8008a60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c0:	4b0f      	ldr	r3, [pc, #60]	; (800a600 <xTaskPriorityDisinherit+0xd4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d903      	bls.n	800a5d0 <xTaskPriorityDisinherit+0xa4>
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	4a0c      	ldr	r2, [pc, #48]	; (800a600 <xTaskPriorityDisinherit+0xd4>)
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4a09      	ldr	r2, [pc, #36]	; (800a604 <xTaskPriorityDisinherit+0xd8>)
 800a5de:	441a      	add	r2, r3
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7fe f9df 	bl	80089aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5f0:	697b      	ldr	r3, [r7, #20]
	}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000aac 	.word	0x20000aac
 800a600:	20000f88 	.word	0x20000f88
 800a604:	20000ab0 	.word	0x20000ab0

0800a608 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a612:	4b24      	ldr	r3, [pc, #144]	; (800a6a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a618:	4b23      	ldr	r3, [pc, #140]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a622:	4b21      	ldr	r3, [pc, #132]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3304      	adds	r3, #4
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fe fa19 	bl	8008a60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a634:	d10a      	bne.n	800a64c <prvAddCurrentTaskToDelayedList+0x44>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d007      	beq.n	800a64c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a63c:	4b1a      	ldr	r3, [pc, #104]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3304      	adds	r3, #4
 800a642:	4619      	mov	r1, r3
 800a644:	4819      	ldr	r0, [pc, #100]	; (800a6ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800a646:	f7fe f9b0 	bl	80089aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a64a:	e026      	b.n	800a69a <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4413      	add	r3, r2
 800a652:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a654:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	429a      	cmp	r2, r3
 800a662:	d209      	bcs.n	800a678 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a664:	4b12      	ldr	r3, [pc, #72]	; (800a6b0 <prvAddCurrentTaskToDelayedList+0xa8>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3304      	adds	r3, #4
 800a66e:	4619      	mov	r1, r3
 800a670:	4610      	mov	r0, r2
 800a672:	f7fe f9bd 	bl	80089f0 <vListInsert>
}
 800a676:	e010      	b.n	800a69a <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a678:	4b0e      	ldr	r3, [pc, #56]	; (800a6b4 <prvAddCurrentTaskToDelayedList+0xac>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3304      	adds	r3, #4
 800a682:	4619      	mov	r1, r3
 800a684:	4610      	mov	r0, r2
 800a686:	f7fe f9b3 	bl	80089f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a68a:	4b0b      	ldr	r3, [pc, #44]	; (800a6b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	429a      	cmp	r2, r3
 800a692:	d202      	bcs.n	800a69a <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800a694:	4a08      	ldr	r2, [pc, #32]	; (800a6b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	6013      	str	r3, [r2, #0]
}
 800a69a:	bf00      	nop
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000f84 	.word	0x20000f84
 800a6a8:	20000aac 	.word	0x20000aac
 800a6ac:	20000f6c 	.word	0x20000f6c
 800a6b0:	20000f3c 	.word	0x20000f3c
 800a6b4:	20000f38 	.word	0x20000f38
 800a6b8:	20000fa0 	.word	0x20000fa0

0800a6bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b08a      	sub	sp, #40	; 0x28
 800a6c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a6c6:	f000 facb 	bl	800ac60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a6ca:	4b1c      	ldr	r3, [pc, #112]	; (800a73c <xTimerCreateTimerTask+0x80>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d021      	beq.n	800a716 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a6da:	1d3a      	adds	r2, r7, #4
 800a6dc:	f107 0108 	add.w	r1, r7, #8
 800a6e0:	f107 030c 	add.w	r3, r7, #12
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fe f91b 	bl	8008920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	9202      	str	r2, [sp, #8]
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	460a      	mov	r2, r1
 800a6fc:	4910      	ldr	r1, [pc, #64]	; (800a740 <xTimerCreateTimerTask+0x84>)
 800a6fe:	4811      	ldr	r0, [pc, #68]	; (800a744 <xTimerCreateTimerTask+0x88>)
 800a700:	f7fe febc 	bl	800947c <xTaskCreateStatic>
 800a704:	4603      	mov	r3, r0
 800a706:	4a10      	ldr	r2, [pc, #64]	; (800a748 <xTimerCreateTimerTask+0x8c>)
 800a708:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a70a:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <xTimerCreateTimerTask+0x8c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a712:	2301      	movs	r3, #1
 800a714:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	613b      	str	r3, [r7, #16]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a732:	697b      	ldr	r3, [r7, #20]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3718      	adds	r7, #24
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	20000fdc 	.word	0x20000fdc
 800a740:	0800fecc 	.word	0x0800fecc
 800a744:	0800a869 	.word	0x0800a869
 800a748:	20000fe0 	.word	0x20000fe0

0800a74c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b08a      	sub	sp, #40	; 0x28
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	623b      	str	r3, [r7, #32]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a77a:	4b1a      	ldr	r3, [pc, #104]	; (800a7e4 <xTimerGenericCommand+0x98>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d02a      	beq.n	800a7d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b05      	cmp	r3, #5
 800a792:	dc18      	bgt.n	800a7c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a794:	f7ff feac 	bl	800a4f0 <xTaskGetSchedulerState>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d109      	bne.n	800a7b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a79e:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <xTimerGenericCommand+0x98>)
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	f107 0110 	add.w	r1, r7, #16
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7aa:	f7fe fa85 	bl	8008cb8 <xQueueGenericSend>
 800a7ae:	6278      	str	r0, [r7, #36]	; 0x24
 800a7b0:	e012      	b.n	800a7d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7b2:	4b0c      	ldr	r3, [pc, #48]	; (800a7e4 <xTimerGenericCommand+0x98>)
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	f107 0110 	add.w	r1, r7, #16
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f7fe fa7b 	bl	8008cb8 <xQueueGenericSend>
 800a7c2:	6278      	str	r0, [r7, #36]	; 0x24
 800a7c4:	e008      	b.n	800a7d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a7c6:	4b07      	ldr	r3, [pc, #28]	; (800a7e4 <xTimerGenericCommand+0x98>)
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	f107 0110 	add.w	r1, r7, #16
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	f7fe fb6f 	bl	8008eb4 <xQueueGenericSendFromISR>
 800a7d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3728      	adds	r7, #40	; 0x28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000fdc 	.word	0x20000fdc

0800a7e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b088      	sub	sp, #32
 800a7ec:	af02      	add	r7, sp, #8
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7f2:	4b1c      	ldr	r3, [pc, #112]	; (800a864 <prvProcessExpiredTimer+0x7c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	3304      	adds	r3, #4
 800a800:	4618      	mov	r0, r3
 800a802:	f7fe f92d 	bl	8008a60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d122      	bne.n	800a854 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	699a      	ldr	r2, [r3, #24]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	18d1      	adds	r1, r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	6978      	ldr	r0, [r7, #20]
 800a81c:	f000 f8c8 	bl	800a9b0 <prvInsertTimerInActiveList>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d016      	beq.n	800a854 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a826:	2300      	movs	r3, #0
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	2300      	movs	r3, #0
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	2100      	movs	r1, #0
 800a830:	6978      	ldr	r0, [r7, #20]
 800a832:	f7ff ff8b 	bl	800a74c <xTimerGenericCommand>
 800a836:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10a      	bne.n	800a854 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	60fb      	str	r3, [r7, #12]
}
 800a850:	bf00      	nop
 800a852:	e7fe      	b.n	800a852 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	6978      	ldr	r0, [r7, #20]
 800a85a:	4798      	blx	r3
}
 800a85c:	bf00      	nop
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20000fd4 	.word	0x20000fd4

0800a868 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a870:	f107 0308 	add.w	r3, r7, #8
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f857 	bl	800a928 <prvGetNextExpireTime>
 800a87a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	4619      	mov	r1, r3
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 f803 	bl	800a88c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a886:	f000 f8d5 	bl	800aa34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a88a:	e7f1      	b.n	800a870 <prvTimerTask+0x8>

0800a88c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a896:	f7ff f971 	bl	8009b7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a89a:	f107 0308 	add.w	r3, r7, #8
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 f866 	bl	800a970 <prvSampleTimeNow>
 800a8a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d130      	bne.n	800a90e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10a      	bne.n	800a8c8 <prvProcessTimerOrBlockTask+0x3c>
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d806      	bhi.n	800a8c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a8ba:	f7ff f96d 	bl	8009b98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a8be:	68f9      	ldr	r1, [r7, #12]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff ff91 	bl	800a7e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a8c6:	e024      	b.n	800a912 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d008      	beq.n	800a8e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8ce:	4b13      	ldr	r3, [pc, #76]	; (800a91c <prvProcessTimerOrBlockTask+0x90>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	bf0c      	ite	eq
 800a8d8:	2301      	moveq	r3, #1
 800a8da:	2300      	movne	r3, #0
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8e0:	4b0f      	ldr	r3, [pc, #60]	; (800a920 <prvProcessTimerOrBlockTask+0x94>)
 800a8e2:	6818      	ldr	r0, [r3, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	683a      	ldr	r2, [r7, #0]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	f7fe fd91 	bl	8009414 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a8f2:	f7ff f951 	bl	8009b98 <xTaskResumeAll>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8fc:	4b09      	ldr	r3, [pc, #36]	; (800a924 <prvProcessTimerOrBlockTask+0x98>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	f3bf 8f6f 	isb	sy
}
 800a90c:	e001      	b.n	800a912 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a90e:	f7ff f943 	bl	8009b98 <xTaskResumeAll>
}
 800a912:	bf00      	nop
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20000fd8 	.word	0x20000fd8
 800a920:	20000fdc 	.word	0x20000fdc
 800a924:	e000ed04 	.word	0xe000ed04

0800a928 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a930:	4b0e      	ldr	r3, [pc, #56]	; (800a96c <prvGetNextExpireTime+0x44>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	bf0c      	ite	eq
 800a93a:	2301      	moveq	r3, #1
 800a93c:	2300      	movne	r3, #0
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	461a      	mov	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d105      	bne.n	800a95a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a94e:	4b07      	ldr	r3, [pc, #28]	; (800a96c <prvGetNextExpireTime+0x44>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	e001      	b.n	800a95e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a95a:	2300      	movs	r3, #0
 800a95c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a95e:	68fb      	ldr	r3, [r7, #12]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	bc80      	pop	{r7}
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	20000fd4 	.word	0x20000fd4

0800a970 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a978:	f7ff f9ac 	bl	8009cd4 <xTaskGetTickCount>
 800a97c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a97e:	4b0b      	ldr	r3, [pc, #44]	; (800a9ac <prvSampleTimeNow+0x3c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	429a      	cmp	r2, r3
 800a986:	d205      	bcs.n	800a994 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a988:	f000 f908 	bl	800ab9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	e002      	b.n	800a99a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a99a:	4a04      	ldr	r2, [pc, #16]	; (800a9ac <prvSampleTimeNow+0x3c>)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	20000fe4 	.word	0x20000fe4

0800a9b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d812      	bhi.n	800a9fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	1ad2      	subs	r2, r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d302      	bcc.n	800a9ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	e01b      	b.n	800aa22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9ea:	4b10      	ldr	r3, [pc, #64]	; (800aa2c <prvInsertTimerInActiveList+0x7c>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	f7fd fffb 	bl	80089f0 <vListInsert>
 800a9fa:	e012      	b.n	800aa22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d206      	bcs.n	800aa12 <prvInsertTimerInActiveList+0x62>
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d302      	bcc.n	800aa12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	617b      	str	r3, [r7, #20]
 800aa10:	e007      	b.n	800aa22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa12:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <prvInsertTimerInActiveList+0x80>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	3304      	adds	r3, #4
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	f7fd ffe7 	bl	80089f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa22:	697b      	ldr	r3, [r7, #20]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	20000fd8 	.word	0x20000fd8
 800aa30:	20000fd4 	.word	0x20000fd4

0800aa34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08e      	sub	sp, #56	; 0x38
 800aa38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa3a:	e09d      	b.n	800ab78 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	da18      	bge.n	800aa74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa42:	1d3b      	adds	r3, r7, #4
 800aa44:	3304      	adds	r3, #4
 800aa46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10a      	bne.n	800aa64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	61fb      	str	r3, [r7, #28]
}
 800aa60:	bf00      	nop
 800aa62:	e7fe      	b.n	800aa62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa6a:	6850      	ldr	r0, [r2, #4]
 800aa6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa6e:	6892      	ldr	r2, [r2, #8]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	db7d      	blt.n	800ab76 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d004      	beq.n	800aa90 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa88:	3304      	adds	r3, #4
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fd ffe8 	bl	8008a60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa90:	463b      	mov	r3, r7
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff ff6c 	bl	800a970 <prvSampleTimeNow>
 800aa98:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b09      	cmp	r3, #9
 800aa9e:	d86b      	bhi.n	800ab78 <prvProcessReceivedCommands+0x144>
 800aaa0:	a201      	add	r2, pc, #4	; (adr r2, 800aaa8 <prvProcessReceivedCommands+0x74>)
 800aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa6:	bf00      	nop
 800aaa8:	0800aad1 	.word	0x0800aad1
 800aaac:	0800aad1 	.word	0x0800aad1
 800aab0:	0800aad1 	.word	0x0800aad1
 800aab4:	0800ab79 	.word	0x0800ab79
 800aab8:	0800ab2d 	.word	0x0800ab2d
 800aabc:	0800ab65 	.word	0x0800ab65
 800aac0:	0800aad1 	.word	0x0800aad1
 800aac4:	0800aad1 	.word	0x0800aad1
 800aac8:	0800ab79 	.word	0x0800ab79
 800aacc:	0800ab2d 	.word	0x0800ab2d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	18d1      	adds	r1, r2, r3
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aade:	f7ff ff67 	bl	800a9b0 <prvInsertTimerInActiveList>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d047      	beq.n	800ab78 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d13f      	bne.n	800ab78 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	441a      	add	r2, r3
 800ab00:	2300      	movs	r3, #0
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	2300      	movs	r3, #0
 800ab06:	2100      	movs	r1, #0
 800ab08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0a:	f7ff fe1f 	bl	800a74c <xTimerGenericCommand>
 800ab0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d130      	bne.n	800ab78 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	61bb      	str	r3, [r7, #24]
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	617b      	str	r3, [r7, #20]
}
 800ab4c:	bf00      	nop
 800ab4e:	e7fe      	b.n	800ab4e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	699a      	ldr	r2, [r3, #24]
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	18d1      	adds	r1, r2, r3
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab5e:	f7ff ff27 	bl	800a9b0 <prvInsertTimerInActiveList>
					break;
 800ab62:	e009      	b.n	800ab78 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d104      	bne.n	800ab78 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800ab6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab70:	f000 fb68 	bl	800b244 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab74:	e000      	b.n	800ab78 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ab76:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab78:	4b07      	ldr	r3, [pc, #28]	; (800ab98 <prvProcessReceivedCommands+0x164>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	1d39      	adds	r1, r7, #4
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7fe fa2f 	bl	8008fe4 <xQueueReceive>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f47f af57 	bne.w	800aa3c <prvProcessReceivedCommands+0x8>
	}
}
 800ab8e:	bf00      	nop
 800ab90:	bf00      	nop
 800ab92:	3730      	adds	r7, #48	; 0x30
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	20000fdc 	.word	0x20000fdc

0800ab9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b088      	sub	sp, #32
 800aba0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aba2:	e045      	b.n	800ac30 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aba4:	4b2c      	ldr	r3, [pc, #176]	; (800ac58 <prvSwitchTimerLists+0xbc>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abae:	4b2a      	ldr	r3, [pc, #168]	; (800ac58 <prvSwitchTimerLists+0xbc>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3304      	adds	r3, #4
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fd ff4f 	bl	8008a60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d12e      	bne.n	800ac30 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	4413      	add	r3, r2
 800abda:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d90e      	bls.n	800ac02 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abf0:	4b19      	ldr	r3, [pc, #100]	; (800ac58 <prvSwitchTimerLists+0xbc>)
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3304      	adds	r3, #4
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7fd fef8 	bl	80089f0 <vListInsert>
 800ac00:	e016      	b.n	800ac30 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac02:	2300      	movs	r3, #0
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	2300      	movs	r3, #0
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f7ff fd9d 	bl	800a74c <xTimerGenericCommand>
 800ac12:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10a      	bne.n	800ac30 <prvSwitchTimerLists+0x94>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	603b      	str	r3, [r7, #0]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac30:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <prvSwitchTimerLists+0xbc>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1b4      	bne.n	800aba4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac3a:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <prvSwitchTimerLists+0xbc>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac40:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <prvSwitchTimerLists+0xc0>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a04      	ldr	r2, [pc, #16]	; (800ac58 <prvSwitchTimerLists+0xbc>)
 800ac46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac48:	4a04      	ldr	r2, [pc, #16]	; (800ac5c <prvSwitchTimerLists+0xc0>)
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	6013      	str	r3, [r2, #0]
}
 800ac4e:	bf00      	nop
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20000fd4 	.word	0x20000fd4
 800ac5c:	20000fd8 	.word	0x20000fd8

0800ac60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac66:	f000 f929 	bl	800aebc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac6a:	4b15      	ldr	r3, [pc, #84]	; (800acc0 <prvCheckForValidListAndQueue+0x60>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d120      	bne.n	800acb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac72:	4814      	ldr	r0, [pc, #80]	; (800acc4 <prvCheckForValidListAndQueue+0x64>)
 800ac74:	f7fd fe6e 	bl	8008954 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac78:	4813      	ldr	r0, [pc, #76]	; (800acc8 <prvCheckForValidListAndQueue+0x68>)
 800ac7a:	f7fd fe6b 	bl	8008954 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac7e:	4b13      	ldr	r3, [pc, #76]	; (800accc <prvCheckForValidListAndQueue+0x6c>)
 800ac80:	4a10      	ldr	r2, [pc, #64]	; (800acc4 <prvCheckForValidListAndQueue+0x64>)
 800ac82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac84:	4b12      	ldr	r3, [pc, #72]	; (800acd0 <prvCheckForValidListAndQueue+0x70>)
 800ac86:	4a10      	ldr	r2, [pc, #64]	; (800acc8 <prvCheckForValidListAndQueue+0x68>)
 800ac88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	4b11      	ldr	r3, [pc, #68]	; (800acd4 <prvCheckForValidListAndQueue+0x74>)
 800ac90:	4a11      	ldr	r2, [pc, #68]	; (800acd8 <prvCheckForValidListAndQueue+0x78>)
 800ac92:	2110      	movs	r1, #16
 800ac94:	200a      	movs	r0, #10
 800ac96:	f7fd ff75 	bl	8008b84 <xQueueGenericCreateStatic>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4a08      	ldr	r2, [pc, #32]	; (800acc0 <prvCheckForValidListAndQueue+0x60>)
 800ac9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aca0:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <prvCheckForValidListAndQueue+0x60>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d005      	beq.n	800acb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aca8:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <prvCheckForValidListAndQueue+0x60>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	490b      	ldr	r1, [pc, #44]	; (800acdc <prvCheckForValidListAndQueue+0x7c>)
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fe fb88 	bl	80093c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acb4:	f000 f932 	bl	800af1c <vPortExitCritical>
}
 800acb8:	bf00      	nop
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20000fdc 	.word	0x20000fdc
 800acc4:	20000fac 	.word	0x20000fac
 800acc8:	20000fc0 	.word	0x20000fc0
 800accc:	20000fd4 	.word	0x20000fd4
 800acd0:	20000fd8 	.word	0x20000fd8
 800acd4:	20001088 	.word	0x20001088
 800acd8:	20000fe8 	.word	0x20000fe8
 800acdc:	0800fed4 	.word	0x0800fed4

0800ace0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3b04      	subs	r3, #4
 800acf0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800acf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3b04      	subs	r3, #4
 800acfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	f023 0201 	bic.w	r2, r3, #1
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	3b04      	subs	r3, #4
 800ad0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad10:	4a08      	ldr	r2, [pc, #32]	; (800ad34 <pxPortInitialiseStack+0x54>)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3b14      	subs	r3, #20
 800ad1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3b20      	subs	r3, #32
 800ad26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad28:	68fb      	ldr	r3, [r7, #12]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bc80      	pop	{r7}
 800ad32:	4770      	bx	lr
 800ad34:	0800ad39 	.word	0x0800ad39

0800ad38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad42:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <prvTaskExitError+0x54>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4a:	d00a      	beq.n	800ad62 <prvTaskExitError+0x2a>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	60fb      	str	r3, [r7, #12]
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <prvTaskExitError+0x28>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	60bb      	str	r3, [r7, #8]
}
 800ad74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad76:	bf00      	nop
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0fc      	beq.n	800ad78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bc80      	pop	{r7}
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	20000014 	.word	0x20000014

0800ad90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad90:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <pxCurrentTCBConst2>)
 800ad92:	6819      	ldr	r1, [r3, #0]
 800ad94:	6808      	ldr	r0, [r1, #0]
 800ad96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ad9a:	f380 8809 	msr	PSP, r0
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f04f 0000 	mov.w	r0, #0
 800ada6:	f380 8811 	msr	BASEPRI, r0
 800adaa:	f04e 0e0d 	orr.w	lr, lr, #13
 800adae:	4770      	bx	lr

0800adb0 <pxCurrentTCBConst2>:
 800adb0:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop

0800adb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800adb8:	4806      	ldr	r0, [pc, #24]	; (800add4 <prvPortStartFirstTask+0x1c>)
 800adba:	6800      	ldr	r0, [r0, #0]
 800adbc:	6800      	ldr	r0, [r0, #0]
 800adbe:	f380 8808 	msr	MSP, r0
 800adc2:	b662      	cpsie	i
 800adc4:	b661      	cpsie	f
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	f3bf 8f6f 	isb	sy
 800adce:	df00      	svc	0
 800add0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800add2:	bf00      	nop
 800add4:	e000ed08 	.word	0xe000ed08

0800add8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adde:	4b32      	ldr	r3, [pc, #200]	; (800aea8 <xPortStartScheduler+0xd0>)
 800ade0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	22ff      	movs	r2, #255	; 0xff
 800adee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adf8:	78fb      	ldrb	r3, [r7, #3]
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	4b2a      	ldr	r3, [pc, #168]	; (800aeac <xPortStartScheduler+0xd4>)
 800ae04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae06:	4b2a      	ldr	r3, [pc, #168]	; (800aeb0 <xPortStartScheduler+0xd8>)
 800ae08:	2207      	movs	r2, #7
 800ae0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae0c:	e009      	b.n	800ae22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ae0e:	4b28      	ldr	r3, [pc, #160]	; (800aeb0 <xPortStartScheduler+0xd8>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3b01      	subs	r3, #1
 800ae14:	4a26      	ldr	r2, [pc, #152]	; (800aeb0 <xPortStartScheduler+0xd8>)
 800ae16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae18:	78fb      	ldrb	r3, [r7, #3]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	005b      	lsls	r3, r3, #1
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae22:	78fb      	ldrb	r3, [r7, #3]
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae2a:	2b80      	cmp	r3, #128	; 0x80
 800ae2c:	d0ef      	beq.n	800ae0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae2e:	4b20      	ldr	r3, [pc, #128]	; (800aeb0 <xPortStartScheduler+0xd8>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f1c3 0307 	rsb	r3, r3, #7
 800ae36:	2b04      	cmp	r3, #4
 800ae38:	d00a      	beq.n	800ae50 <xPortStartScheduler+0x78>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	60bb      	str	r3, [r7, #8]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae50:	4b17      	ldr	r3, [pc, #92]	; (800aeb0 <xPortStartScheduler+0xd8>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	4a16      	ldr	r2, [pc, #88]	; (800aeb0 <xPortStartScheduler+0xd8>)
 800ae58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae5a:	4b15      	ldr	r3, [pc, #84]	; (800aeb0 <xPortStartScheduler+0xd8>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae62:	4a13      	ldr	r2, [pc, #76]	; (800aeb0 <xPortStartScheduler+0xd8>)
 800ae64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae6e:	4b11      	ldr	r3, [pc, #68]	; (800aeb4 <xPortStartScheduler+0xdc>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a10      	ldr	r2, [pc, #64]	; (800aeb4 <xPortStartScheduler+0xdc>)
 800ae74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae7a:	4b0e      	ldr	r3, [pc, #56]	; (800aeb4 <xPortStartScheduler+0xdc>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a0d      	ldr	r2, [pc, #52]	; (800aeb4 <xPortStartScheduler+0xdc>)
 800ae80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae86:	f000 f8b9 	bl	800affc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae8a:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <xPortStartScheduler+0xe0>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae90:	f7ff ff92 	bl	800adb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae94:	f7ff f810 	bl	8009eb8 <vTaskSwitchContext>
	prvTaskExitError();
 800ae98:	f7ff ff4e 	bl	800ad38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	e000e400 	.word	0xe000e400
 800aeac:	200010d8 	.word	0x200010d8
 800aeb0:	200010dc 	.word	0x200010dc
 800aeb4:	e000ed20 	.word	0xe000ed20
 800aeb8:	20000014 	.word	0x20000014

0800aebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	607b      	str	r3, [r7, #4]
}
 800aed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aed6:	4b0f      	ldr	r3, [pc, #60]	; (800af14 <vPortEnterCritical+0x58>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3301      	adds	r3, #1
 800aedc:	4a0d      	ldr	r2, [pc, #52]	; (800af14 <vPortEnterCritical+0x58>)
 800aede:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aee0:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <vPortEnterCritical+0x58>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d10f      	bne.n	800af08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aee8:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <vPortEnterCritical+0x5c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00a      	beq.n	800af08 <vPortEnterCritical+0x4c>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	603b      	str	r3, [r7, #0]
}
 800af04:	bf00      	nop
 800af06:	e7fe      	b.n	800af06 <vPortEnterCritical+0x4a>
	}
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bc80      	pop	{r7}
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	20000014 	.word	0x20000014
 800af18:	e000ed04 	.word	0xe000ed04

0800af1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af22:	4b11      	ldr	r3, [pc, #68]	; (800af68 <vPortExitCritical+0x4c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10a      	bne.n	800af40 <vPortExitCritical+0x24>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	607b      	str	r3, [r7, #4]
}
 800af3c:	bf00      	nop
 800af3e:	e7fe      	b.n	800af3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af40:	4b09      	ldr	r3, [pc, #36]	; (800af68 <vPortExitCritical+0x4c>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	3b01      	subs	r3, #1
 800af46:	4a08      	ldr	r2, [pc, #32]	; (800af68 <vPortExitCritical+0x4c>)
 800af48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af4a:	4b07      	ldr	r3, [pc, #28]	; (800af68 <vPortExitCritical+0x4c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d105      	bne.n	800af5e <vPortExitCritical+0x42>
 800af52:	2300      	movs	r3, #0
 800af54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	f383 8811 	msr	BASEPRI, r3
}
 800af5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af5e:	bf00      	nop
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	bc80      	pop	{r7}
 800af66:	4770      	bx	lr
 800af68:	20000014 	.word	0x20000014
 800af6c:	00000000 	.word	0x00000000

0800af70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af70:	f3ef 8009 	mrs	r0, PSP
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <pxCurrentTCBConst>)
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800af80:	6010      	str	r0, [r2, #0]
 800af82:	e92d 4008 	stmdb	sp!, {r3, lr}
 800af86:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af8a:	f380 8811 	msr	BASEPRI, r0
 800af8e:	f7fe ff93 	bl	8009eb8 <vTaskSwitchContext>
 800af92:	f04f 0000 	mov.w	r0, #0
 800af96:	f380 8811 	msr	BASEPRI, r0
 800af9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800af9e:	6819      	ldr	r1, [r3, #0]
 800afa0:	6808      	ldr	r0, [r1, #0]
 800afa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800afa6:	f380 8809 	msr	PSP, r0
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	4770      	bx	lr

0800afb0 <pxCurrentTCBConst>:
 800afb0:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
}
 800afd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afd2:	f7fe feb3 	bl	8009d3c <xTaskIncrementTick>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afdc:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <SysTick_Handler+0x40>)
 800afde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	2300      	movs	r3, #0
 800afe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f383 8811 	msr	BASEPRI, r3
}
 800afee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b000:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <vPortSetupTimerInterrupt+0x30>)
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b006:	4b0a      	ldr	r3, [pc, #40]	; (800b030 <vPortSetupTimerInterrupt+0x34>)
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b00c:	4b09      	ldr	r3, [pc, #36]	; (800b034 <vPortSetupTimerInterrupt+0x38>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a09      	ldr	r2, [pc, #36]	; (800b038 <vPortSetupTimerInterrupt+0x3c>)
 800b012:	fba2 2303 	umull	r2, r3, r2, r3
 800b016:	099b      	lsrs	r3, r3, #6
 800b018:	4a08      	ldr	r2, [pc, #32]	; (800b03c <vPortSetupTimerInterrupt+0x40>)
 800b01a:	3b01      	subs	r3, #1
 800b01c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b01e:	4b03      	ldr	r3, [pc, #12]	; (800b02c <vPortSetupTimerInterrupt+0x30>)
 800b020:	2207      	movs	r2, #7
 800b022:	601a      	str	r2, [r3, #0]
}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	bc80      	pop	{r7}
 800b02a:	4770      	bx	lr
 800b02c:	e000e010 	.word	0xe000e010
 800b030:	e000e018 	.word	0xe000e018
 800b034:	20000008 	.word	0x20000008
 800b038:	10624dd3 	.word	0x10624dd3
 800b03c:	e000e014 	.word	0xe000e014

0800b040 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b046:	f3ef 8305 	mrs	r3, IPSR
 800b04a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2b0f      	cmp	r3, #15
 800b050:	d914      	bls.n	800b07c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b052:	4a16      	ldr	r2, [pc, #88]	; (800b0ac <vPortValidateInterruptPriority+0x6c>)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4413      	add	r3, r2
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b05c:	4b14      	ldr	r3, [pc, #80]	; (800b0b0 <vPortValidateInterruptPriority+0x70>)
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	7afa      	ldrb	r2, [r7, #11]
 800b062:	429a      	cmp	r2, r3
 800b064:	d20a      	bcs.n	800b07c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	607b      	str	r3, [r7, #4]
}
 800b078:	bf00      	nop
 800b07a:	e7fe      	b.n	800b07a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b07c:	4b0d      	ldr	r3, [pc, #52]	; (800b0b4 <vPortValidateInterruptPriority+0x74>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b084:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <vPortValidateInterruptPriority+0x78>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d90a      	bls.n	800b0a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	603b      	str	r3, [r7, #0]
}
 800b09e:	bf00      	nop
 800b0a0:	e7fe      	b.n	800b0a0 <vPortValidateInterruptPriority+0x60>
	}
 800b0a2:	bf00      	nop
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bc80      	pop	{r7}
 800b0aa:	4770      	bx	lr
 800b0ac:	e000e3f0 	.word	0xe000e3f0
 800b0b0:	200010d8 	.word	0x200010d8
 800b0b4:	e000ed0c 	.word	0xe000ed0c
 800b0b8:	200010dc 	.word	0x200010dc

0800b0bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b08a      	sub	sp, #40	; 0x28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0c8:	f7fe fd58 	bl	8009b7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0cc:	4b58      	ldr	r3, [pc, #352]	; (800b230 <pvPortMalloc+0x174>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b0d4:	f000 f910 	bl	800b2f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b0d8:	4b56      	ldr	r3, [pc, #344]	; (800b234 <pvPortMalloc+0x178>)
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4013      	ands	r3, r2
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f040 808e 	bne.w	800b202 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d01d      	beq.n	800b128 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b0ec:	2208      	movs	r2, #8
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f003 0307 	and.w	r3, r3, #7
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d014      	beq.n	800b128 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f023 0307 	bic.w	r3, r3, #7
 800b104:	3308      	adds	r3, #8
 800b106:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f003 0307 	and.w	r3, r3, #7
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00a      	beq.n	800b128 <pvPortMalloc+0x6c>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	617b      	str	r3, [r7, #20]
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d069      	beq.n	800b202 <pvPortMalloc+0x146>
 800b12e:	4b42      	ldr	r3, [pc, #264]	; (800b238 <pvPortMalloc+0x17c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d864      	bhi.n	800b202 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b138:	4b40      	ldr	r3, [pc, #256]	; (800b23c <pvPortMalloc+0x180>)
 800b13a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b13c:	4b3f      	ldr	r3, [pc, #252]	; (800b23c <pvPortMalloc+0x180>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b142:	e004      	b.n	800b14e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d903      	bls.n	800b160 <pvPortMalloc+0xa4>
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1f1      	bne.n	800b144 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b160:	4b33      	ldr	r3, [pc, #204]	; (800b230 <pvPortMalloc+0x174>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b166:	429a      	cmp	r2, r3
 800b168:	d04b      	beq.n	800b202 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b16a:	6a3b      	ldr	r3, [r7, #32]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2208      	movs	r2, #8
 800b170:	4413      	add	r3, r2
 800b172:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	1ad2      	subs	r2, r2, r3
 800b184:	2308      	movs	r3, #8
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	429a      	cmp	r2, r3
 800b18a:	d91f      	bls.n	800b1cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4413      	add	r3, r2
 800b192:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <pvPortMalloc+0xf8>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	613b      	str	r3, [r7, #16]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	1ad2      	subs	r2, r2, r3
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1c6:	69b8      	ldr	r0, [r7, #24]
 800b1c8:	f000 f8f8 	bl	800b3bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1cc:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <pvPortMalloc+0x17c>)
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	4a18      	ldr	r2, [pc, #96]	; (800b238 <pvPortMalloc+0x17c>)
 800b1d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1da:	4b17      	ldr	r3, [pc, #92]	; (800b238 <pvPortMalloc+0x17c>)
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	4b18      	ldr	r3, [pc, #96]	; (800b240 <pvPortMalloc+0x184>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d203      	bcs.n	800b1ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1e6:	4b14      	ldr	r3, [pc, #80]	; (800b238 <pvPortMalloc+0x17c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a15      	ldr	r2, [pc, #84]	; (800b240 <pvPortMalloc+0x184>)
 800b1ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	4b10      	ldr	r3, [pc, #64]	; (800b234 <pvPortMalloc+0x178>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	431a      	orrs	r2, r3
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	2200      	movs	r2, #0
 800b200:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b202:	f7fe fcc9 	bl	8009b98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	f003 0307 	and.w	r3, r3, #7
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00a      	beq.n	800b226 <pvPortMalloc+0x16a>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60fb      	str	r3, [r7, #12]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <pvPortMalloc+0x168>
	return pvReturn;
 800b226:	69fb      	ldr	r3, [r7, #28]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3728      	adds	r7, #40	; 0x28
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	20001ce8 	.word	0x20001ce8
 800b234:	20001cf4 	.word	0x20001cf4
 800b238:	20001cec 	.word	0x20001cec
 800b23c:	20001ce0 	.word	0x20001ce0
 800b240:	20001cf0 	.word	0x20001cf0

0800b244 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d048      	beq.n	800b2e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b256:	2308      	movs	r3, #8
 800b258:	425b      	negs	r3, r3
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	4413      	add	r3, r2
 800b25e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	685a      	ldr	r2, [r3, #4]
 800b268:	4b21      	ldr	r3, [pc, #132]	; (800b2f0 <vPortFree+0xac>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4013      	ands	r3, r2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10a      	bne.n	800b288 <vPortFree+0x44>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	60fb      	str	r3, [r7, #12]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00a      	beq.n	800b2a6 <vPortFree+0x62>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	60bb      	str	r3, [r7, #8]
}
 800b2a2:	bf00      	nop
 800b2a4:	e7fe      	b.n	800b2a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	685a      	ldr	r2, [r3, #4]
 800b2aa:	4b11      	ldr	r3, [pc, #68]	; (800b2f0 <vPortFree+0xac>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d019      	beq.n	800b2e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d115      	bne.n	800b2e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <vPortFree+0xac>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	43db      	mvns	r3, r3
 800b2c6:	401a      	ands	r2, r3
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b2cc:	f7fe fc56 	bl	8009b7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	4b07      	ldr	r3, [pc, #28]	; (800b2f4 <vPortFree+0xb0>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4413      	add	r3, r2
 800b2da:	4a06      	ldr	r2, [pc, #24]	; (800b2f4 <vPortFree+0xb0>)
 800b2dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b2de:	6938      	ldr	r0, [r7, #16]
 800b2e0:	f000 f86c 	bl	800b3bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b2e4:	f7fe fc58 	bl	8009b98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2e8:	bf00      	nop
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20001cf4 	.word	0x20001cf4
 800b2f4:	20001cec 	.word	0x20001cec

0800b2f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b302:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b304:	4b27      	ldr	r3, [pc, #156]	; (800b3a4 <prvHeapInit+0xac>)
 800b306:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f003 0307 	and.w	r3, r3, #7
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00c      	beq.n	800b32c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3307      	adds	r3, #7
 800b316:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 0307 	bic.w	r3, r3, #7
 800b31e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	4a1f      	ldr	r2, [pc, #124]	; (800b3a4 <prvHeapInit+0xac>)
 800b328:	4413      	add	r3, r2
 800b32a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b330:	4a1d      	ldr	r2, [pc, #116]	; (800b3a8 <prvHeapInit+0xb0>)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b336:	4b1c      	ldr	r3, [pc, #112]	; (800b3a8 <prvHeapInit+0xb0>)
 800b338:	2200      	movs	r2, #0
 800b33a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	4413      	add	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b344:	2208      	movs	r2, #8
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	1a9b      	subs	r3, r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f023 0307 	bic.w	r3, r3, #7
 800b352:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	4a15      	ldr	r2, [pc, #84]	; (800b3ac <prvHeapInit+0xb4>)
 800b358:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b35a:	4b14      	ldr	r3, [pc, #80]	; (800b3ac <prvHeapInit+0xb4>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2200      	movs	r2, #0
 800b360:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b362:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <prvHeapInit+0xb4>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2200      	movs	r2, #0
 800b368:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	1ad2      	subs	r2, r2, r3
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b378:	4b0c      	ldr	r3, [pc, #48]	; (800b3ac <prvHeapInit+0xb4>)
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	4a0a      	ldr	r2, [pc, #40]	; (800b3b0 <prvHeapInit+0xb8>)
 800b386:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	4a09      	ldr	r2, [pc, #36]	; (800b3b4 <prvHeapInit+0xbc>)
 800b38e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b390:	4b09      	ldr	r3, [pc, #36]	; (800b3b8 <prvHeapInit+0xc0>)
 800b392:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b396:	601a      	str	r2, [r3, #0]
}
 800b398:	bf00      	nop
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	200010e0 	.word	0x200010e0
 800b3a8:	20001ce0 	.word	0x20001ce0
 800b3ac:	20001ce8 	.word	0x20001ce8
 800b3b0:	20001cf0 	.word	0x20001cf0
 800b3b4:	20001cec 	.word	0x20001cec
 800b3b8:	20001cf4 	.word	0x20001cf4

0800b3bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3c4:	4b27      	ldr	r3, [pc, #156]	; (800b464 <prvInsertBlockIntoFreeList+0xa8>)
 800b3c6:	60fb      	str	r3, [r7, #12]
 800b3c8:	e002      	b.n	800b3d0 <prvInsertBlockIntoFreeList+0x14>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d8f7      	bhi.n	800b3ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d108      	bne.n	800b3fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	685a      	ldr	r2, [r3, #4]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	441a      	add	r2, r3
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	441a      	add	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d118      	bne.n	800b444 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	4b14      	ldr	r3, [pc, #80]	; (800b468 <prvInsertBlockIntoFreeList+0xac>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d00d      	beq.n	800b43a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	441a      	add	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	e008      	b.n	800b44c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b43a:	4b0b      	ldr	r3, [pc, #44]	; (800b468 <prvInsertBlockIntoFreeList+0xac>)
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	e003      	b.n	800b44c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	429a      	cmp	r2, r3
 800b452:	d002      	beq.n	800b45a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b45a:	bf00      	nop
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	bc80      	pop	{r7}
 800b462:	4770      	bx	lr
 800b464:	20001ce0 	.word	0x20001ce0
 800b468:	20001ce8 	.word	0x20001ce8

0800b46c <__errno>:
 800b46c:	4b01      	ldr	r3, [pc, #4]	; (800b474 <__errno+0x8>)
 800b46e:	6818      	ldr	r0, [r3, #0]
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	20000018 	.word	0x20000018

0800b478 <__libc_init_array>:
 800b478:	b570      	push	{r4, r5, r6, lr}
 800b47a:	2600      	movs	r6, #0
 800b47c:	4d0c      	ldr	r5, [pc, #48]	; (800b4b0 <__libc_init_array+0x38>)
 800b47e:	4c0d      	ldr	r4, [pc, #52]	; (800b4b4 <__libc_init_array+0x3c>)
 800b480:	1b64      	subs	r4, r4, r5
 800b482:	10a4      	asrs	r4, r4, #2
 800b484:	42a6      	cmp	r6, r4
 800b486:	d109      	bne.n	800b49c <__libc_init_array+0x24>
 800b488:	f004 fc52 	bl	800fd30 <_init>
 800b48c:	2600      	movs	r6, #0
 800b48e:	4d0a      	ldr	r5, [pc, #40]	; (800b4b8 <__libc_init_array+0x40>)
 800b490:	4c0a      	ldr	r4, [pc, #40]	; (800b4bc <__libc_init_array+0x44>)
 800b492:	1b64      	subs	r4, r4, r5
 800b494:	10a4      	asrs	r4, r4, #2
 800b496:	42a6      	cmp	r6, r4
 800b498:	d105      	bne.n	800b4a6 <__libc_init_array+0x2e>
 800b49a:	bd70      	pop	{r4, r5, r6, pc}
 800b49c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a0:	4798      	blx	r3
 800b4a2:	3601      	adds	r6, #1
 800b4a4:	e7ee      	b.n	800b484 <__libc_init_array+0xc>
 800b4a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4aa:	4798      	blx	r3
 800b4ac:	3601      	adds	r6, #1
 800b4ae:	e7f2      	b.n	800b496 <__libc_init_array+0x1e>
 800b4b0:	08011bcc 	.word	0x08011bcc
 800b4b4:	08011bcc 	.word	0x08011bcc
 800b4b8:	08011bcc 	.word	0x08011bcc
 800b4bc:	08011bd0 	.word	0x08011bd0

0800b4c0 <memcpy>:
 800b4c0:	440a      	add	r2, r1
 800b4c2:	4291      	cmp	r1, r2
 800b4c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4c8:	d100      	bne.n	800b4cc <memcpy+0xc>
 800b4ca:	4770      	bx	lr
 800b4cc:	b510      	push	{r4, lr}
 800b4ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4d2:	4291      	cmp	r1, r2
 800b4d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4d8:	d1f9      	bne.n	800b4ce <memcpy+0xe>
 800b4da:	bd10      	pop	{r4, pc}

0800b4dc <memset>:
 800b4dc:	4603      	mov	r3, r0
 800b4de:	4402      	add	r2, r0
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d100      	bne.n	800b4e6 <memset+0xa>
 800b4e4:	4770      	bx	lr
 800b4e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4ea:	e7f9      	b.n	800b4e0 <memset+0x4>

0800b4ec <__cvt>:
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f2:	461f      	mov	r7, r3
 800b4f4:	bfbb      	ittet	lt
 800b4f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b4fa:	461f      	movlt	r7, r3
 800b4fc:	2300      	movge	r3, #0
 800b4fe:	232d      	movlt	r3, #45	; 0x2d
 800b500:	b088      	sub	sp, #32
 800b502:	4614      	mov	r4, r2
 800b504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b506:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b508:	7013      	strb	r3, [r2, #0]
 800b50a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b50c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b510:	f023 0820 	bic.w	r8, r3, #32
 800b514:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b518:	d005      	beq.n	800b526 <__cvt+0x3a>
 800b51a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b51e:	d100      	bne.n	800b522 <__cvt+0x36>
 800b520:	3501      	adds	r5, #1
 800b522:	2302      	movs	r3, #2
 800b524:	e000      	b.n	800b528 <__cvt+0x3c>
 800b526:	2303      	movs	r3, #3
 800b528:	aa07      	add	r2, sp, #28
 800b52a:	9204      	str	r2, [sp, #16]
 800b52c:	aa06      	add	r2, sp, #24
 800b52e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b532:	e9cd 3500 	strd	r3, r5, [sp]
 800b536:	4622      	mov	r2, r4
 800b538:	463b      	mov	r3, r7
 800b53a:	f001 fd85 	bl	800d048 <_dtoa_r>
 800b53e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b542:	4606      	mov	r6, r0
 800b544:	d102      	bne.n	800b54c <__cvt+0x60>
 800b546:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b548:	07db      	lsls	r3, r3, #31
 800b54a:	d522      	bpl.n	800b592 <__cvt+0xa6>
 800b54c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b550:	eb06 0905 	add.w	r9, r6, r5
 800b554:	d110      	bne.n	800b578 <__cvt+0x8c>
 800b556:	7833      	ldrb	r3, [r6, #0]
 800b558:	2b30      	cmp	r3, #48	; 0x30
 800b55a:	d10a      	bne.n	800b572 <__cvt+0x86>
 800b55c:	2200      	movs	r2, #0
 800b55e:	2300      	movs	r3, #0
 800b560:	4620      	mov	r0, r4
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 fa90 	bl	8000a88 <__aeabi_dcmpeq>
 800b568:	b918      	cbnz	r0, 800b572 <__cvt+0x86>
 800b56a:	f1c5 0501 	rsb	r5, r5, #1
 800b56e:	f8ca 5000 	str.w	r5, [sl]
 800b572:	f8da 3000 	ldr.w	r3, [sl]
 800b576:	4499      	add	r9, r3
 800b578:	2200      	movs	r2, #0
 800b57a:	2300      	movs	r3, #0
 800b57c:	4620      	mov	r0, r4
 800b57e:	4639      	mov	r1, r7
 800b580:	f7f5 fa82 	bl	8000a88 <__aeabi_dcmpeq>
 800b584:	b108      	cbz	r0, 800b58a <__cvt+0x9e>
 800b586:	f8cd 901c 	str.w	r9, [sp, #28]
 800b58a:	2230      	movs	r2, #48	; 0x30
 800b58c:	9b07      	ldr	r3, [sp, #28]
 800b58e:	454b      	cmp	r3, r9
 800b590:	d307      	bcc.n	800b5a2 <__cvt+0xb6>
 800b592:	4630      	mov	r0, r6
 800b594:	9b07      	ldr	r3, [sp, #28]
 800b596:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b598:	1b9b      	subs	r3, r3, r6
 800b59a:	6013      	str	r3, [r2, #0]
 800b59c:	b008      	add	sp, #32
 800b59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a2:	1c59      	adds	r1, r3, #1
 800b5a4:	9107      	str	r1, [sp, #28]
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	e7f0      	b.n	800b58c <__cvt+0xa0>

0800b5aa <__exponent>:
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5ae:	2900      	cmp	r1, #0
 800b5b0:	f803 2b02 	strb.w	r2, [r3], #2
 800b5b4:	bfb6      	itet	lt
 800b5b6:	222d      	movlt	r2, #45	; 0x2d
 800b5b8:	222b      	movge	r2, #43	; 0x2b
 800b5ba:	4249      	neglt	r1, r1
 800b5bc:	2909      	cmp	r1, #9
 800b5be:	7042      	strb	r2, [r0, #1]
 800b5c0:	dd2b      	ble.n	800b61a <__exponent+0x70>
 800b5c2:	f10d 0407 	add.w	r4, sp, #7
 800b5c6:	46a4      	mov	ip, r4
 800b5c8:	270a      	movs	r7, #10
 800b5ca:	fb91 f6f7 	sdiv	r6, r1, r7
 800b5ce:	460a      	mov	r2, r1
 800b5d0:	46a6      	mov	lr, r4
 800b5d2:	fb07 1516 	mls	r5, r7, r6, r1
 800b5d6:	2a63      	cmp	r2, #99	; 0x63
 800b5d8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b5dc:	4631      	mov	r1, r6
 800b5de:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b5e6:	dcf0      	bgt.n	800b5ca <__exponent+0x20>
 800b5e8:	3130      	adds	r1, #48	; 0x30
 800b5ea:	f1ae 0502 	sub.w	r5, lr, #2
 800b5ee:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	1c44      	adds	r4, r0, #1
 800b5f6:	4561      	cmp	r1, ip
 800b5f8:	d30a      	bcc.n	800b610 <__exponent+0x66>
 800b5fa:	f10d 0209 	add.w	r2, sp, #9
 800b5fe:	eba2 020e 	sub.w	r2, r2, lr
 800b602:	4565      	cmp	r5, ip
 800b604:	bf88      	it	hi
 800b606:	2200      	movhi	r2, #0
 800b608:	4413      	add	r3, r2
 800b60a:	1a18      	subs	r0, r3, r0
 800b60c:	b003      	add	sp, #12
 800b60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b610:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b614:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b618:	e7ed      	b.n	800b5f6 <__exponent+0x4c>
 800b61a:	2330      	movs	r3, #48	; 0x30
 800b61c:	3130      	adds	r1, #48	; 0x30
 800b61e:	7083      	strb	r3, [r0, #2]
 800b620:	70c1      	strb	r1, [r0, #3]
 800b622:	1d03      	adds	r3, r0, #4
 800b624:	e7f1      	b.n	800b60a <__exponent+0x60>
	...

0800b628 <_printf_float>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	b091      	sub	sp, #68	; 0x44
 800b62e:	460c      	mov	r4, r1
 800b630:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b634:	4616      	mov	r6, r2
 800b636:	461f      	mov	r7, r3
 800b638:	4605      	mov	r5, r0
 800b63a:	f002 fe59 	bl	800e2f0 <_localeconv_r>
 800b63e:	6803      	ldr	r3, [r0, #0]
 800b640:	4618      	mov	r0, r3
 800b642:	9309      	str	r3, [sp, #36]	; 0x24
 800b644:	f7f4 fdf4 	bl	8000230 <strlen>
 800b648:	2300      	movs	r3, #0
 800b64a:	930e      	str	r3, [sp, #56]	; 0x38
 800b64c:	f8d8 3000 	ldr.w	r3, [r8]
 800b650:	900a      	str	r0, [sp, #40]	; 0x28
 800b652:	3307      	adds	r3, #7
 800b654:	f023 0307 	bic.w	r3, r3, #7
 800b658:	f103 0208 	add.w	r2, r3, #8
 800b65c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b660:	f8d4 b000 	ldr.w	fp, [r4]
 800b664:	f8c8 2000 	str.w	r2, [r8]
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b670:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b674:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b678:	930b      	str	r3, [sp, #44]	; 0x2c
 800b67a:	f04f 32ff 	mov.w	r2, #4294967295
 800b67e:	4640      	mov	r0, r8
 800b680:	4b9c      	ldr	r3, [pc, #624]	; (800b8f4 <_printf_float+0x2cc>)
 800b682:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b684:	f7f5 fa32 	bl	8000aec <__aeabi_dcmpun>
 800b688:	bb70      	cbnz	r0, 800b6e8 <_printf_float+0xc0>
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	4640      	mov	r0, r8
 800b690:	4b98      	ldr	r3, [pc, #608]	; (800b8f4 <_printf_float+0x2cc>)
 800b692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b694:	f7f5 fa0c 	bl	8000ab0 <__aeabi_dcmple>
 800b698:	bb30      	cbnz	r0, 800b6e8 <_printf_float+0xc0>
 800b69a:	2200      	movs	r2, #0
 800b69c:	2300      	movs	r3, #0
 800b69e:	4640      	mov	r0, r8
 800b6a0:	4651      	mov	r1, sl
 800b6a2:	f7f5 f9fb 	bl	8000a9c <__aeabi_dcmplt>
 800b6a6:	b110      	cbz	r0, 800b6ae <_printf_float+0x86>
 800b6a8:	232d      	movs	r3, #45	; 0x2d
 800b6aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ae:	4b92      	ldr	r3, [pc, #584]	; (800b8f8 <_printf_float+0x2d0>)
 800b6b0:	4892      	ldr	r0, [pc, #584]	; (800b8fc <_printf_float+0x2d4>)
 800b6b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b6b6:	bf94      	ite	ls
 800b6b8:	4698      	movls	r8, r3
 800b6ba:	4680      	movhi	r8, r0
 800b6bc:	2303      	movs	r3, #3
 800b6be:	f04f 0a00 	mov.w	sl, #0
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	f02b 0304 	bic.w	r3, fp, #4
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	4633      	mov	r3, r6
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	9700      	str	r7, [sp, #0]
 800b6d2:	aa0f      	add	r2, sp, #60	; 0x3c
 800b6d4:	f000 f9d4 	bl	800ba80 <_printf_common>
 800b6d8:	3001      	adds	r0, #1
 800b6da:	f040 8090 	bne.w	800b7fe <_printf_float+0x1d6>
 800b6de:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e2:	b011      	add	sp, #68	; 0x44
 800b6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e8:	4642      	mov	r2, r8
 800b6ea:	4653      	mov	r3, sl
 800b6ec:	4640      	mov	r0, r8
 800b6ee:	4651      	mov	r1, sl
 800b6f0:	f7f5 f9fc 	bl	8000aec <__aeabi_dcmpun>
 800b6f4:	b148      	cbz	r0, 800b70a <_printf_float+0xe2>
 800b6f6:	f1ba 0f00 	cmp.w	sl, #0
 800b6fa:	bfb8      	it	lt
 800b6fc:	232d      	movlt	r3, #45	; 0x2d
 800b6fe:	4880      	ldr	r0, [pc, #512]	; (800b900 <_printf_float+0x2d8>)
 800b700:	bfb8      	it	lt
 800b702:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b706:	4b7f      	ldr	r3, [pc, #508]	; (800b904 <_printf_float+0x2dc>)
 800b708:	e7d3      	b.n	800b6b2 <_printf_float+0x8a>
 800b70a:	6863      	ldr	r3, [r4, #4]
 800b70c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b710:	1c5a      	adds	r2, r3, #1
 800b712:	d142      	bne.n	800b79a <_printf_float+0x172>
 800b714:	2306      	movs	r3, #6
 800b716:	6063      	str	r3, [r4, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	9206      	str	r2, [sp, #24]
 800b71c:	aa0e      	add	r2, sp, #56	; 0x38
 800b71e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b722:	aa0d      	add	r2, sp, #52	; 0x34
 800b724:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b728:	9203      	str	r2, [sp, #12]
 800b72a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b72e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	6863      	ldr	r3, [r4, #4]
 800b736:	4642      	mov	r2, r8
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	4628      	mov	r0, r5
 800b73c:	4653      	mov	r3, sl
 800b73e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b740:	f7ff fed4 	bl	800b4ec <__cvt>
 800b744:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b746:	4680      	mov	r8, r0
 800b748:	2947      	cmp	r1, #71	; 0x47
 800b74a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b74c:	d108      	bne.n	800b760 <_printf_float+0x138>
 800b74e:	1cc8      	adds	r0, r1, #3
 800b750:	db02      	blt.n	800b758 <_printf_float+0x130>
 800b752:	6863      	ldr	r3, [r4, #4]
 800b754:	4299      	cmp	r1, r3
 800b756:	dd40      	ble.n	800b7da <_printf_float+0x1b2>
 800b758:	f1a9 0902 	sub.w	r9, r9, #2
 800b75c:	fa5f f989 	uxtb.w	r9, r9
 800b760:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b764:	d81f      	bhi.n	800b7a6 <_printf_float+0x17e>
 800b766:	464a      	mov	r2, r9
 800b768:	3901      	subs	r1, #1
 800b76a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b76e:	910d      	str	r1, [sp, #52]	; 0x34
 800b770:	f7ff ff1b 	bl	800b5aa <__exponent>
 800b774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b776:	4682      	mov	sl, r0
 800b778:	1813      	adds	r3, r2, r0
 800b77a:	2a01      	cmp	r2, #1
 800b77c:	6123      	str	r3, [r4, #16]
 800b77e:	dc02      	bgt.n	800b786 <_printf_float+0x15e>
 800b780:	6822      	ldr	r2, [r4, #0]
 800b782:	07d2      	lsls	r2, r2, #31
 800b784:	d501      	bpl.n	800b78a <_printf_float+0x162>
 800b786:	3301      	adds	r3, #1
 800b788:	6123      	str	r3, [r4, #16]
 800b78a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d09b      	beq.n	800b6ca <_printf_float+0xa2>
 800b792:	232d      	movs	r3, #45	; 0x2d
 800b794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b798:	e797      	b.n	800b6ca <_printf_float+0xa2>
 800b79a:	2947      	cmp	r1, #71	; 0x47
 800b79c:	d1bc      	bne.n	800b718 <_printf_float+0xf0>
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1ba      	bne.n	800b718 <_printf_float+0xf0>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e7b7      	b.n	800b716 <_printf_float+0xee>
 800b7a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b7aa:	d118      	bne.n	800b7de <_printf_float+0x1b6>
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	6863      	ldr	r3, [r4, #4]
 800b7b0:	dd0b      	ble.n	800b7ca <_printf_float+0x1a2>
 800b7b2:	6121      	str	r1, [r4, #16]
 800b7b4:	b913      	cbnz	r3, 800b7bc <_printf_float+0x194>
 800b7b6:	6822      	ldr	r2, [r4, #0]
 800b7b8:	07d0      	lsls	r0, r2, #31
 800b7ba:	d502      	bpl.n	800b7c2 <_printf_float+0x19a>
 800b7bc:	3301      	adds	r3, #1
 800b7be:	440b      	add	r3, r1
 800b7c0:	6123      	str	r3, [r4, #16]
 800b7c2:	f04f 0a00 	mov.w	sl, #0
 800b7c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b7c8:	e7df      	b.n	800b78a <_printf_float+0x162>
 800b7ca:	b913      	cbnz	r3, 800b7d2 <_printf_float+0x1aa>
 800b7cc:	6822      	ldr	r2, [r4, #0]
 800b7ce:	07d2      	lsls	r2, r2, #31
 800b7d0:	d501      	bpl.n	800b7d6 <_printf_float+0x1ae>
 800b7d2:	3302      	adds	r3, #2
 800b7d4:	e7f4      	b.n	800b7c0 <_printf_float+0x198>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e7f2      	b.n	800b7c0 <_printf_float+0x198>
 800b7da:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b7de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7e0:	4299      	cmp	r1, r3
 800b7e2:	db05      	blt.n	800b7f0 <_printf_float+0x1c8>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	6121      	str	r1, [r4, #16]
 800b7e8:	07d8      	lsls	r0, r3, #31
 800b7ea:	d5ea      	bpl.n	800b7c2 <_printf_float+0x19a>
 800b7ec:	1c4b      	adds	r3, r1, #1
 800b7ee:	e7e7      	b.n	800b7c0 <_printf_float+0x198>
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	bfcc      	ite	gt
 800b7f4:	2201      	movgt	r2, #1
 800b7f6:	f1c1 0202 	rsble	r2, r1, #2
 800b7fa:	4413      	add	r3, r2
 800b7fc:	e7e0      	b.n	800b7c0 <_printf_float+0x198>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	055a      	lsls	r2, r3, #21
 800b802:	d407      	bmi.n	800b814 <_printf_float+0x1ec>
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	4642      	mov	r2, r8
 800b808:	4631      	mov	r1, r6
 800b80a:	4628      	mov	r0, r5
 800b80c:	47b8      	blx	r7
 800b80e:	3001      	adds	r0, #1
 800b810:	d12b      	bne.n	800b86a <_printf_float+0x242>
 800b812:	e764      	b.n	800b6de <_printf_float+0xb6>
 800b814:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b818:	f240 80dd 	bls.w	800b9d6 <_printf_float+0x3ae>
 800b81c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b820:	2200      	movs	r2, #0
 800b822:	2300      	movs	r3, #0
 800b824:	f7f5 f930 	bl	8000a88 <__aeabi_dcmpeq>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d033      	beq.n	800b894 <_printf_float+0x26c>
 800b82c:	2301      	movs	r3, #1
 800b82e:	4631      	mov	r1, r6
 800b830:	4628      	mov	r0, r5
 800b832:	4a35      	ldr	r2, [pc, #212]	; (800b908 <_printf_float+0x2e0>)
 800b834:	47b8      	blx	r7
 800b836:	3001      	adds	r0, #1
 800b838:	f43f af51 	beq.w	800b6de <_printf_float+0xb6>
 800b83c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b840:	429a      	cmp	r2, r3
 800b842:	db02      	blt.n	800b84a <_printf_float+0x222>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	07d8      	lsls	r0, r3, #31
 800b848:	d50f      	bpl.n	800b86a <_printf_float+0x242>
 800b84a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b84e:	4631      	mov	r1, r6
 800b850:	4628      	mov	r0, r5
 800b852:	47b8      	blx	r7
 800b854:	3001      	adds	r0, #1
 800b856:	f43f af42 	beq.w	800b6de <_printf_float+0xb6>
 800b85a:	f04f 0800 	mov.w	r8, #0
 800b85e:	f104 091a 	add.w	r9, r4, #26
 800b862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b864:	3b01      	subs	r3, #1
 800b866:	4543      	cmp	r3, r8
 800b868:	dc09      	bgt.n	800b87e <_printf_float+0x256>
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	079b      	lsls	r3, r3, #30
 800b86e:	f100 8102 	bmi.w	800ba76 <_printf_float+0x44e>
 800b872:	68e0      	ldr	r0, [r4, #12]
 800b874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b876:	4298      	cmp	r0, r3
 800b878:	bfb8      	it	lt
 800b87a:	4618      	movlt	r0, r3
 800b87c:	e731      	b.n	800b6e2 <_printf_float+0xba>
 800b87e:	2301      	movs	r3, #1
 800b880:	464a      	mov	r2, r9
 800b882:	4631      	mov	r1, r6
 800b884:	4628      	mov	r0, r5
 800b886:	47b8      	blx	r7
 800b888:	3001      	adds	r0, #1
 800b88a:	f43f af28 	beq.w	800b6de <_printf_float+0xb6>
 800b88e:	f108 0801 	add.w	r8, r8, #1
 800b892:	e7e6      	b.n	800b862 <_printf_float+0x23a>
 800b894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b896:	2b00      	cmp	r3, #0
 800b898:	dc38      	bgt.n	800b90c <_printf_float+0x2e4>
 800b89a:	2301      	movs	r3, #1
 800b89c:	4631      	mov	r1, r6
 800b89e:	4628      	mov	r0, r5
 800b8a0:	4a19      	ldr	r2, [pc, #100]	; (800b908 <_printf_float+0x2e0>)
 800b8a2:	47b8      	blx	r7
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	f43f af1a 	beq.w	800b6de <_printf_float+0xb6>
 800b8aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	d102      	bne.n	800b8b8 <_printf_float+0x290>
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	07d9      	lsls	r1, r3, #31
 800b8b6:	d5d8      	bpl.n	800b86a <_printf_float+0x242>
 800b8b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8bc:	4631      	mov	r1, r6
 800b8be:	4628      	mov	r0, r5
 800b8c0:	47b8      	blx	r7
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	f43f af0b 	beq.w	800b6de <_printf_float+0xb6>
 800b8c8:	f04f 0900 	mov.w	r9, #0
 800b8cc:	f104 0a1a 	add.w	sl, r4, #26
 800b8d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8d2:	425b      	negs	r3, r3
 800b8d4:	454b      	cmp	r3, r9
 800b8d6:	dc01      	bgt.n	800b8dc <_printf_float+0x2b4>
 800b8d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8da:	e794      	b.n	800b806 <_printf_float+0x1de>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	4652      	mov	r2, sl
 800b8e0:	4631      	mov	r1, r6
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	47b8      	blx	r7
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	f43f aef9 	beq.w	800b6de <_printf_float+0xb6>
 800b8ec:	f109 0901 	add.w	r9, r9, #1
 800b8f0:	e7ee      	b.n	800b8d0 <_printf_float+0x2a8>
 800b8f2:	bf00      	nop
 800b8f4:	7fefffff 	.word	0x7fefffff
 800b8f8:	08011728 	.word	0x08011728
 800b8fc:	0801172c 	.word	0x0801172c
 800b900:	08011734 	.word	0x08011734
 800b904:	08011730 	.word	0x08011730
 800b908:	08011738 	.word	0x08011738
 800b90c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b90e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b910:	429a      	cmp	r2, r3
 800b912:	bfa8      	it	ge
 800b914:	461a      	movge	r2, r3
 800b916:	2a00      	cmp	r2, #0
 800b918:	4691      	mov	r9, r2
 800b91a:	dc37      	bgt.n	800b98c <_printf_float+0x364>
 800b91c:	f04f 0b00 	mov.w	fp, #0
 800b920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b924:	f104 021a 	add.w	r2, r4, #26
 800b928:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b92c:	ebaa 0309 	sub.w	r3, sl, r9
 800b930:	455b      	cmp	r3, fp
 800b932:	dc33      	bgt.n	800b99c <_printf_float+0x374>
 800b934:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b938:	429a      	cmp	r2, r3
 800b93a:	db3b      	blt.n	800b9b4 <_printf_float+0x38c>
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	07da      	lsls	r2, r3, #31
 800b940:	d438      	bmi.n	800b9b4 <_printf_float+0x38c>
 800b942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b944:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b946:	eba3 020a 	sub.w	r2, r3, sl
 800b94a:	eba3 0901 	sub.w	r9, r3, r1
 800b94e:	4591      	cmp	r9, r2
 800b950:	bfa8      	it	ge
 800b952:	4691      	movge	r9, r2
 800b954:	f1b9 0f00 	cmp.w	r9, #0
 800b958:	dc34      	bgt.n	800b9c4 <_printf_float+0x39c>
 800b95a:	f04f 0800 	mov.w	r8, #0
 800b95e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b962:	f104 0a1a 	add.w	sl, r4, #26
 800b966:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b96a:	1a9b      	subs	r3, r3, r2
 800b96c:	eba3 0309 	sub.w	r3, r3, r9
 800b970:	4543      	cmp	r3, r8
 800b972:	f77f af7a 	ble.w	800b86a <_printf_float+0x242>
 800b976:	2301      	movs	r3, #1
 800b978:	4652      	mov	r2, sl
 800b97a:	4631      	mov	r1, r6
 800b97c:	4628      	mov	r0, r5
 800b97e:	47b8      	blx	r7
 800b980:	3001      	adds	r0, #1
 800b982:	f43f aeac 	beq.w	800b6de <_printf_float+0xb6>
 800b986:	f108 0801 	add.w	r8, r8, #1
 800b98a:	e7ec      	b.n	800b966 <_printf_float+0x33e>
 800b98c:	4613      	mov	r3, r2
 800b98e:	4631      	mov	r1, r6
 800b990:	4642      	mov	r2, r8
 800b992:	4628      	mov	r0, r5
 800b994:	47b8      	blx	r7
 800b996:	3001      	adds	r0, #1
 800b998:	d1c0      	bne.n	800b91c <_printf_float+0x2f4>
 800b99a:	e6a0      	b.n	800b6de <_printf_float+0xb6>
 800b99c:	2301      	movs	r3, #1
 800b99e:	4631      	mov	r1, r6
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800b9a4:	47b8      	blx	r7
 800b9a6:	3001      	adds	r0, #1
 800b9a8:	f43f ae99 	beq.w	800b6de <_printf_float+0xb6>
 800b9ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9ae:	f10b 0b01 	add.w	fp, fp, #1
 800b9b2:	e7b9      	b.n	800b928 <_printf_float+0x300>
 800b9b4:	4631      	mov	r1, r6
 800b9b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	47b8      	blx	r7
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d1bf      	bne.n	800b942 <_printf_float+0x31a>
 800b9c2:	e68c      	b.n	800b6de <_printf_float+0xb6>
 800b9c4:	464b      	mov	r3, r9
 800b9c6:	4631      	mov	r1, r6
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	eb08 020a 	add.w	r2, r8, sl
 800b9ce:	47b8      	blx	r7
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	d1c2      	bne.n	800b95a <_printf_float+0x332>
 800b9d4:	e683      	b.n	800b6de <_printf_float+0xb6>
 800b9d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9d8:	2a01      	cmp	r2, #1
 800b9da:	dc01      	bgt.n	800b9e0 <_printf_float+0x3b8>
 800b9dc:	07db      	lsls	r3, r3, #31
 800b9de:	d537      	bpl.n	800ba50 <_printf_float+0x428>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	4642      	mov	r2, r8
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	47b8      	blx	r7
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	f43f ae77 	beq.w	800b6de <_printf_float+0xb6>
 800b9f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	47b8      	blx	r7
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	f43f ae6f 	beq.w	800b6de <_printf_float+0xb6>
 800ba00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba04:	2200      	movs	r2, #0
 800ba06:	2300      	movs	r3, #0
 800ba08:	f7f5 f83e 	bl	8000a88 <__aeabi_dcmpeq>
 800ba0c:	b9d8      	cbnz	r0, 800ba46 <_printf_float+0x41e>
 800ba0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba10:	f108 0201 	add.w	r2, r8, #1
 800ba14:	3b01      	subs	r3, #1
 800ba16:	4631      	mov	r1, r6
 800ba18:	4628      	mov	r0, r5
 800ba1a:	47b8      	blx	r7
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	d10e      	bne.n	800ba3e <_printf_float+0x416>
 800ba20:	e65d      	b.n	800b6de <_printf_float+0xb6>
 800ba22:	2301      	movs	r3, #1
 800ba24:	464a      	mov	r2, r9
 800ba26:	4631      	mov	r1, r6
 800ba28:	4628      	mov	r0, r5
 800ba2a:	47b8      	blx	r7
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	f43f ae56 	beq.w	800b6de <_printf_float+0xb6>
 800ba32:	f108 0801 	add.w	r8, r8, #1
 800ba36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	4543      	cmp	r3, r8
 800ba3c:	dcf1      	bgt.n	800ba22 <_printf_float+0x3fa>
 800ba3e:	4653      	mov	r3, sl
 800ba40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba44:	e6e0      	b.n	800b808 <_printf_float+0x1e0>
 800ba46:	f04f 0800 	mov.w	r8, #0
 800ba4a:	f104 091a 	add.w	r9, r4, #26
 800ba4e:	e7f2      	b.n	800ba36 <_printf_float+0x40e>
 800ba50:	2301      	movs	r3, #1
 800ba52:	4642      	mov	r2, r8
 800ba54:	e7df      	b.n	800ba16 <_printf_float+0x3ee>
 800ba56:	2301      	movs	r3, #1
 800ba58:	464a      	mov	r2, r9
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b8      	blx	r7
 800ba60:	3001      	adds	r0, #1
 800ba62:	f43f ae3c 	beq.w	800b6de <_printf_float+0xb6>
 800ba66:	f108 0801 	add.w	r8, r8, #1
 800ba6a:	68e3      	ldr	r3, [r4, #12]
 800ba6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba6e:	1a5b      	subs	r3, r3, r1
 800ba70:	4543      	cmp	r3, r8
 800ba72:	dcf0      	bgt.n	800ba56 <_printf_float+0x42e>
 800ba74:	e6fd      	b.n	800b872 <_printf_float+0x24a>
 800ba76:	f04f 0800 	mov.w	r8, #0
 800ba7a:	f104 0919 	add.w	r9, r4, #25
 800ba7e:	e7f4      	b.n	800ba6a <_printf_float+0x442>

0800ba80 <_printf_common>:
 800ba80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba84:	4616      	mov	r6, r2
 800ba86:	4699      	mov	r9, r3
 800ba88:	688a      	ldr	r2, [r1, #8]
 800ba8a:	690b      	ldr	r3, [r1, #16]
 800ba8c:	4607      	mov	r7, r0
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	bfb8      	it	lt
 800ba92:	4613      	movlt	r3, r2
 800ba94:	6033      	str	r3, [r6, #0]
 800ba96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800baa0:	b10a      	cbz	r2, 800baa6 <_printf_common+0x26>
 800baa2:	3301      	adds	r3, #1
 800baa4:	6033      	str	r3, [r6, #0]
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	0699      	lsls	r1, r3, #26
 800baaa:	bf42      	ittt	mi
 800baac:	6833      	ldrmi	r3, [r6, #0]
 800baae:	3302      	addmi	r3, #2
 800bab0:	6033      	strmi	r3, [r6, #0]
 800bab2:	6825      	ldr	r5, [r4, #0]
 800bab4:	f015 0506 	ands.w	r5, r5, #6
 800bab8:	d106      	bne.n	800bac8 <_printf_common+0x48>
 800baba:	f104 0a19 	add.w	sl, r4, #25
 800babe:	68e3      	ldr	r3, [r4, #12]
 800bac0:	6832      	ldr	r2, [r6, #0]
 800bac2:	1a9b      	subs	r3, r3, r2
 800bac4:	42ab      	cmp	r3, r5
 800bac6:	dc28      	bgt.n	800bb1a <_printf_common+0x9a>
 800bac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bacc:	1e13      	subs	r3, r2, #0
 800bace:	6822      	ldr	r2, [r4, #0]
 800bad0:	bf18      	it	ne
 800bad2:	2301      	movne	r3, #1
 800bad4:	0692      	lsls	r2, r2, #26
 800bad6:	d42d      	bmi.n	800bb34 <_printf_common+0xb4>
 800bad8:	4649      	mov	r1, r9
 800bada:	4638      	mov	r0, r7
 800badc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bae0:	47c0      	blx	r8
 800bae2:	3001      	adds	r0, #1
 800bae4:	d020      	beq.n	800bb28 <_printf_common+0xa8>
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	68e5      	ldr	r5, [r4, #12]
 800baea:	f003 0306 	and.w	r3, r3, #6
 800baee:	2b04      	cmp	r3, #4
 800baf0:	bf18      	it	ne
 800baf2:	2500      	movne	r5, #0
 800baf4:	6832      	ldr	r2, [r6, #0]
 800baf6:	f04f 0600 	mov.w	r6, #0
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	bf08      	it	eq
 800bafe:	1aad      	subeq	r5, r5, r2
 800bb00:	6922      	ldr	r2, [r4, #16]
 800bb02:	bf08      	it	eq
 800bb04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	bfc4      	itt	gt
 800bb0c:	1a9b      	subgt	r3, r3, r2
 800bb0e:	18ed      	addgt	r5, r5, r3
 800bb10:	341a      	adds	r4, #26
 800bb12:	42b5      	cmp	r5, r6
 800bb14:	d11a      	bne.n	800bb4c <_printf_common+0xcc>
 800bb16:	2000      	movs	r0, #0
 800bb18:	e008      	b.n	800bb2c <_printf_common+0xac>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	4652      	mov	r2, sl
 800bb1e:	4649      	mov	r1, r9
 800bb20:	4638      	mov	r0, r7
 800bb22:	47c0      	blx	r8
 800bb24:	3001      	adds	r0, #1
 800bb26:	d103      	bne.n	800bb30 <_printf_common+0xb0>
 800bb28:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb30:	3501      	adds	r5, #1
 800bb32:	e7c4      	b.n	800babe <_printf_common+0x3e>
 800bb34:	2030      	movs	r0, #48	; 0x30
 800bb36:	18e1      	adds	r1, r4, r3
 800bb38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb42:	4422      	add	r2, r4
 800bb44:	3302      	adds	r3, #2
 800bb46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb4a:	e7c5      	b.n	800bad8 <_printf_common+0x58>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	4622      	mov	r2, r4
 800bb50:	4649      	mov	r1, r9
 800bb52:	4638      	mov	r0, r7
 800bb54:	47c0      	blx	r8
 800bb56:	3001      	adds	r0, #1
 800bb58:	d0e6      	beq.n	800bb28 <_printf_common+0xa8>
 800bb5a:	3601      	adds	r6, #1
 800bb5c:	e7d9      	b.n	800bb12 <_printf_common+0x92>
	...

0800bb60 <_printf_i>:
 800bb60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb64:	7e0f      	ldrb	r7, [r1, #24]
 800bb66:	4691      	mov	r9, r2
 800bb68:	2f78      	cmp	r7, #120	; 0x78
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	469a      	mov	sl, r3
 800bb70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb76:	d807      	bhi.n	800bb88 <_printf_i+0x28>
 800bb78:	2f62      	cmp	r7, #98	; 0x62
 800bb7a:	d80a      	bhi.n	800bb92 <_printf_i+0x32>
 800bb7c:	2f00      	cmp	r7, #0
 800bb7e:	f000 80d9 	beq.w	800bd34 <_printf_i+0x1d4>
 800bb82:	2f58      	cmp	r7, #88	; 0x58
 800bb84:	f000 80a4 	beq.w	800bcd0 <_printf_i+0x170>
 800bb88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb90:	e03a      	b.n	800bc08 <_printf_i+0xa8>
 800bb92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb96:	2b15      	cmp	r3, #21
 800bb98:	d8f6      	bhi.n	800bb88 <_printf_i+0x28>
 800bb9a:	a101      	add	r1, pc, #4	; (adr r1, 800bba0 <_printf_i+0x40>)
 800bb9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bba0:	0800bbf9 	.word	0x0800bbf9
 800bba4:	0800bc0d 	.word	0x0800bc0d
 800bba8:	0800bb89 	.word	0x0800bb89
 800bbac:	0800bb89 	.word	0x0800bb89
 800bbb0:	0800bb89 	.word	0x0800bb89
 800bbb4:	0800bb89 	.word	0x0800bb89
 800bbb8:	0800bc0d 	.word	0x0800bc0d
 800bbbc:	0800bb89 	.word	0x0800bb89
 800bbc0:	0800bb89 	.word	0x0800bb89
 800bbc4:	0800bb89 	.word	0x0800bb89
 800bbc8:	0800bb89 	.word	0x0800bb89
 800bbcc:	0800bd1b 	.word	0x0800bd1b
 800bbd0:	0800bc3d 	.word	0x0800bc3d
 800bbd4:	0800bcfd 	.word	0x0800bcfd
 800bbd8:	0800bb89 	.word	0x0800bb89
 800bbdc:	0800bb89 	.word	0x0800bb89
 800bbe0:	0800bd3d 	.word	0x0800bd3d
 800bbe4:	0800bb89 	.word	0x0800bb89
 800bbe8:	0800bc3d 	.word	0x0800bc3d
 800bbec:	0800bb89 	.word	0x0800bb89
 800bbf0:	0800bb89 	.word	0x0800bb89
 800bbf4:	0800bd05 	.word	0x0800bd05
 800bbf8:	682b      	ldr	r3, [r5, #0]
 800bbfa:	1d1a      	adds	r2, r3, #4
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	602a      	str	r2, [r5, #0]
 800bc00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e0a4      	b.n	800bd56 <_printf_i+0x1f6>
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	6829      	ldr	r1, [r5, #0]
 800bc10:	0606      	lsls	r6, r0, #24
 800bc12:	f101 0304 	add.w	r3, r1, #4
 800bc16:	d50a      	bpl.n	800bc2e <_printf_i+0xce>
 800bc18:	680e      	ldr	r6, [r1, #0]
 800bc1a:	602b      	str	r3, [r5, #0]
 800bc1c:	2e00      	cmp	r6, #0
 800bc1e:	da03      	bge.n	800bc28 <_printf_i+0xc8>
 800bc20:	232d      	movs	r3, #45	; 0x2d
 800bc22:	4276      	negs	r6, r6
 800bc24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc28:	230a      	movs	r3, #10
 800bc2a:	485e      	ldr	r0, [pc, #376]	; (800bda4 <_printf_i+0x244>)
 800bc2c:	e019      	b.n	800bc62 <_printf_i+0x102>
 800bc2e:	680e      	ldr	r6, [r1, #0]
 800bc30:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	bf18      	it	ne
 800bc38:	b236      	sxthne	r6, r6
 800bc3a:	e7ef      	b.n	800bc1c <_printf_i+0xbc>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	6820      	ldr	r0, [r4, #0]
 800bc40:	1d19      	adds	r1, r3, #4
 800bc42:	6029      	str	r1, [r5, #0]
 800bc44:	0601      	lsls	r1, r0, #24
 800bc46:	d501      	bpl.n	800bc4c <_printf_i+0xec>
 800bc48:	681e      	ldr	r6, [r3, #0]
 800bc4a:	e002      	b.n	800bc52 <_printf_i+0xf2>
 800bc4c:	0646      	lsls	r6, r0, #25
 800bc4e:	d5fb      	bpl.n	800bc48 <_printf_i+0xe8>
 800bc50:	881e      	ldrh	r6, [r3, #0]
 800bc52:	2f6f      	cmp	r7, #111	; 0x6f
 800bc54:	bf0c      	ite	eq
 800bc56:	2308      	moveq	r3, #8
 800bc58:	230a      	movne	r3, #10
 800bc5a:	4852      	ldr	r0, [pc, #328]	; (800bda4 <_printf_i+0x244>)
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc62:	6865      	ldr	r5, [r4, #4]
 800bc64:	2d00      	cmp	r5, #0
 800bc66:	bfa8      	it	ge
 800bc68:	6821      	ldrge	r1, [r4, #0]
 800bc6a:	60a5      	str	r5, [r4, #8]
 800bc6c:	bfa4      	itt	ge
 800bc6e:	f021 0104 	bicge.w	r1, r1, #4
 800bc72:	6021      	strge	r1, [r4, #0]
 800bc74:	b90e      	cbnz	r6, 800bc7a <_printf_i+0x11a>
 800bc76:	2d00      	cmp	r5, #0
 800bc78:	d04d      	beq.n	800bd16 <_printf_i+0x1b6>
 800bc7a:	4615      	mov	r5, r2
 800bc7c:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc80:	fb03 6711 	mls	r7, r3, r1, r6
 800bc84:	5dc7      	ldrb	r7, [r0, r7]
 800bc86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc8a:	4637      	mov	r7, r6
 800bc8c:	42bb      	cmp	r3, r7
 800bc8e:	460e      	mov	r6, r1
 800bc90:	d9f4      	bls.n	800bc7c <_printf_i+0x11c>
 800bc92:	2b08      	cmp	r3, #8
 800bc94:	d10b      	bne.n	800bcae <_printf_i+0x14e>
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	07de      	lsls	r6, r3, #31
 800bc9a:	d508      	bpl.n	800bcae <_printf_i+0x14e>
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	6861      	ldr	r1, [r4, #4]
 800bca0:	4299      	cmp	r1, r3
 800bca2:	bfde      	ittt	le
 800bca4:	2330      	movle	r3, #48	; 0x30
 800bca6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcae:	1b52      	subs	r2, r2, r5
 800bcb0:	6122      	str	r2, [r4, #16]
 800bcb2:	464b      	mov	r3, r9
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	f8cd a000 	str.w	sl, [sp]
 800bcbc:	aa03      	add	r2, sp, #12
 800bcbe:	f7ff fedf 	bl	800ba80 <_printf_common>
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	d14c      	bne.n	800bd60 <_printf_i+0x200>
 800bcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcca:	b004      	add	sp, #16
 800bccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd0:	4834      	ldr	r0, [pc, #208]	; (800bda4 <_printf_i+0x244>)
 800bcd2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bcd6:	6829      	ldr	r1, [r5, #0]
 800bcd8:	6823      	ldr	r3, [r4, #0]
 800bcda:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcde:	6029      	str	r1, [r5, #0]
 800bce0:	061d      	lsls	r5, r3, #24
 800bce2:	d514      	bpl.n	800bd0e <_printf_i+0x1ae>
 800bce4:	07df      	lsls	r7, r3, #31
 800bce6:	bf44      	itt	mi
 800bce8:	f043 0320 	orrmi.w	r3, r3, #32
 800bcec:	6023      	strmi	r3, [r4, #0]
 800bcee:	b91e      	cbnz	r6, 800bcf8 <_printf_i+0x198>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	f023 0320 	bic.w	r3, r3, #32
 800bcf6:	6023      	str	r3, [r4, #0]
 800bcf8:	2310      	movs	r3, #16
 800bcfa:	e7af      	b.n	800bc5c <_printf_i+0xfc>
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	f043 0320 	orr.w	r3, r3, #32
 800bd02:	6023      	str	r3, [r4, #0]
 800bd04:	2378      	movs	r3, #120	; 0x78
 800bd06:	4828      	ldr	r0, [pc, #160]	; (800bda8 <_printf_i+0x248>)
 800bd08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd0c:	e7e3      	b.n	800bcd6 <_printf_i+0x176>
 800bd0e:	0659      	lsls	r1, r3, #25
 800bd10:	bf48      	it	mi
 800bd12:	b2b6      	uxthmi	r6, r6
 800bd14:	e7e6      	b.n	800bce4 <_printf_i+0x184>
 800bd16:	4615      	mov	r5, r2
 800bd18:	e7bb      	b.n	800bc92 <_printf_i+0x132>
 800bd1a:	682b      	ldr	r3, [r5, #0]
 800bd1c:	6826      	ldr	r6, [r4, #0]
 800bd1e:	1d18      	adds	r0, r3, #4
 800bd20:	6961      	ldr	r1, [r4, #20]
 800bd22:	6028      	str	r0, [r5, #0]
 800bd24:	0635      	lsls	r5, r6, #24
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	d501      	bpl.n	800bd2e <_printf_i+0x1ce>
 800bd2a:	6019      	str	r1, [r3, #0]
 800bd2c:	e002      	b.n	800bd34 <_printf_i+0x1d4>
 800bd2e:	0670      	lsls	r0, r6, #25
 800bd30:	d5fb      	bpl.n	800bd2a <_printf_i+0x1ca>
 800bd32:	8019      	strh	r1, [r3, #0]
 800bd34:	2300      	movs	r3, #0
 800bd36:	4615      	mov	r5, r2
 800bd38:	6123      	str	r3, [r4, #16]
 800bd3a:	e7ba      	b.n	800bcb2 <_printf_i+0x152>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	2100      	movs	r1, #0
 800bd40:	1d1a      	adds	r2, r3, #4
 800bd42:	602a      	str	r2, [r5, #0]
 800bd44:	681d      	ldr	r5, [r3, #0]
 800bd46:	6862      	ldr	r2, [r4, #4]
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f002 faef 	bl	800e32c <memchr>
 800bd4e:	b108      	cbz	r0, 800bd54 <_printf_i+0x1f4>
 800bd50:	1b40      	subs	r0, r0, r5
 800bd52:	6060      	str	r0, [r4, #4]
 800bd54:	6863      	ldr	r3, [r4, #4]
 800bd56:	6123      	str	r3, [r4, #16]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd5e:	e7a8      	b.n	800bcb2 <_printf_i+0x152>
 800bd60:	462a      	mov	r2, r5
 800bd62:	4649      	mov	r1, r9
 800bd64:	4640      	mov	r0, r8
 800bd66:	6923      	ldr	r3, [r4, #16]
 800bd68:	47d0      	blx	sl
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d0ab      	beq.n	800bcc6 <_printf_i+0x166>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	079b      	lsls	r3, r3, #30
 800bd72:	d413      	bmi.n	800bd9c <_printf_i+0x23c>
 800bd74:	68e0      	ldr	r0, [r4, #12]
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	4298      	cmp	r0, r3
 800bd7a:	bfb8      	it	lt
 800bd7c:	4618      	movlt	r0, r3
 800bd7e:	e7a4      	b.n	800bcca <_printf_i+0x16a>
 800bd80:	2301      	movs	r3, #1
 800bd82:	4632      	mov	r2, r6
 800bd84:	4649      	mov	r1, r9
 800bd86:	4640      	mov	r0, r8
 800bd88:	47d0      	blx	sl
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	d09b      	beq.n	800bcc6 <_printf_i+0x166>
 800bd8e:	3501      	adds	r5, #1
 800bd90:	68e3      	ldr	r3, [r4, #12]
 800bd92:	9903      	ldr	r1, [sp, #12]
 800bd94:	1a5b      	subs	r3, r3, r1
 800bd96:	42ab      	cmp	r3, r5
 800bd98:	dcf2      	bgt.n	800bd80 <_printf_i+0x220>
 800bd9a:	e7eb      	b.n	800bd74 <_printf_i+0x214>
 800bd9c:	2500      	movs	r5, #0
 800bd9e:	f104 0619 	add.w	r6, r4, #25
 800bda2:	e7f5      	b.n	800bd90 <_printf_i+0x230>
 800bda4:	0801173a 	.word	0x0801173a
 800bda8:	0801174b 	.word	0x0801174b

0800bdac <_scanf_float>:
 800bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb0:	b087      	sub	sp, #28
 800bdb2:	9303      	str	r3, [sp, #12]
 800bdb4:	688b      	ldr	r3, [r1, #8]
 800bdb6:	4617      	mov	r7, r2
 800bdb8:	1e5a      	subs	r2, r3, #1
 800bdba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bdbe:	bf85      	ittet	hi
 800bdc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bdc4:	195b      	addhi	r3, r3, r5
 800bdc6:	2300      	movls	r3, #0
 800bdc8:	9302      	strhi	r3, [sp, #8]
 800bdca:	bf88      	it	hi
 800bdcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bdd0:	468b      	mov	fp, r1
 800bdd2:	f04f 0500 	mov.w	r5, #0
 800bdd6:	bf8c      	ite	hi
 800bdd8:	608b      	strhi	r3, [r1, #8]
 800bdda:	9302      	strls	r3, [sp, #8]
 800bddc:	680b      	ldr	r3, [r1, #0]
 800bdde:	4680      	mov	r8, r0
 800bde0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bde4:	f84b 3b1c 	str.w	r3, [fp], #28
 800bde8:	460c      	mov	r4, r1
 800bdea:	465e      	mov	r6, fp
 800bdec:	46aa      	mov	sl, r5
 800bdee:	46a9      	mov	r9, r5
 800bdf0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bdf4:	9501      	str	r5, [sp, #4]
 800bdf6:	68a2      	ldr	r2, [r4, #8]
 800bdf8:	b152      	cbz	r2, 800be10 <_scanf_float+0x64>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	2b4e      	cmp	r3, #78	; 0x4e
 800be00:	d864      	bhi.n	800becc <_scanf_float+0x120>
 800be02:	2b40      	cmp	r3, #64	; 0x40
 800be04:	d83c      	bhi.n	800be80 <_scanf_float+0xd4>
 800be06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800be0a:	b2c8      	uxtb	r0, r1
 800be0c:	280e      	cmp	r0, #14
 800be0e:	d93a      	bls.n	800be86 <_scanf_float+0xda>
 800be10:	f1b9 0f00 	cmp.w	r9, #0
 800be14:	d003      	beq.n	800be1e <_scanf_float+0x72>
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be22:	f1ba 0f01 	cmp.w	sl, #1
 800be26:	f200 8113 	bhi.w	800c050 <_scanf_float+0x2a4>
 800be2a:	455e      	cmp	r6, fp
 800be2c:	f200 8105 	bhi.w	800c03a <_scanf_float+0x28e>
 800be30:	2501      	movs	r5, #1
 800be32:	4628      	mov	r0, r5
 800be34:	b007      	add	sp, #28
 800be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800be3e:	2a0d      	cmp	r2, #13
 800be40:	d8e6      	bhi.n	800be10 <_scanf_float+0x64>
 800be42:	a101      	add	r1, pc, #4	; (adr r1, 800be48 <_scanf_float+0x9c>)
 800be44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800be48:	0800bf87 	.word	0x0800bf87
 800be4c:	0800be11 	.word	0x0800be11
 800be50:	0800be11 	.word	0x0800be11
 800be54:	0800be11 	.word	0x0800be11
 800be58:	0800bfe7 	.word	0x0800bfe7
 800be5c:	0800bfbf 	.word	0x0800bfbf
 800be60:	0800be11 	.word	0x0800be11
 800be64:	0800be11 	.word	0x0800be11
 800be68:	0800bf95 	.word	0x0800bf95
 800be6c:	0800be11 	.word	0x0800be11
 800be70:	0800be11 	.word	0x0800be11
 800be74:	0800be11 	.word	0x0800be11
 800be78:	0800be11 	.word	0x0800be11
 800be7c:	0800bf4d 	.word	0x0800bf4d
 800be80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800be84:	e7db      	b.n	800be3e <_scanf_float+0x92>
 800be86:	290e      	cmp	r1, #14
 800be88:	d8c2      	bhi.n	800be10 <_scanf_float+0x64>
 800be8a:	a001      	add	r0, pc, #4	; (adr r0, 800be90 <_scanf_float+0xe4>)
 800be8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800be90:	0800bf3f 	.word	0x0800bf3f
 800be94:	0800be11 	.word	0x0800be11
 800be98:	0800bf3f 	.word	0x0800bf3f
 800be9c:	0800bfd3 	.word	0x0800bfd3
 800bea0:	0800be11 	.word	0x0800be11
 800bea4:	0800beed 	.word	0x0800beed
 800bea8:	0800bf29 	.word	0x0800bf29
 800beac:	0800bf29 	.word	0x0800bf29
 800beb0:	0800bf29 	.word	0x0800bf29
 800beb4:	0800bf29 	.word	0x0800bf29
 800beb8:	0800bf29 	.word	0x0800bf29
 800bebc:	0800bf29 	.word	0x0800bf29
 800bec0:	0800bf29 	.word	0x0800bf29
 800bec4:	0800bf29 	.word	0x0800bf29
 800bec8:	0800bf29 	.word	0x0800bf29
 800becc:	2b6e      	cmp	r3, #110	; 0x6e
 800bece:	d809      	bhi.n	800bee4 <_scanf_float+0x138>
 800bed0:	2b60      	cmp	r3, #96	; 0x60
 800bed2:	d8b2      	bhi.n	800be3a <_scanf_float+0x8e>
 800bed4:	2b54      	cmp	r3, #84	; 0x54
 800bed6:	d077      	beq.n	800bfc8 <_scanf_float+0x21c>
 800bed8:	2b59      	cmp	r3, #89	; 0x59
 800beda:	d199      	bne.n	800be10 <_scanf_float+0x64>
 800bedc:	2d07      	cmp	r5, #7
 800bede:	d197      	bne.n	800be10 <_scanf_float+0x64>
 800bee0:	2508      	movs	r5, #8
 800bee2:	e029      	b.n	800bf38 <_scanf_float+0x18c>
 800bee4:	2b74      	cmp	r3, #116	; 0x74
 800bee6:	d06f      	beq.n	800bfc8 <_scanf_float+0x21c>
 800bee8:	2b79      	cmp	r3, #121	; 0x79
 800beea:	e7f6      	b.n	800beda <_scanf_float+0x12e>
 800beec:	6821      	ldr	r1, [r4, #0]
 800beee:	05c8      	lsls	r0, r1, #23
 800bef0:	d51a      	bpl.n	800bf28 <_scanf_float+0x17c>
 800bef2:	9b02      	ldr	r3, [sp, #8]
 800bef4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bef8:	6021      	str	r1, [r4, #0]
 800befa:	f109 0901 	add.w	r9, r9, #1
 800befe:	b11b      	cbz	r3, 800bf08 <_scanf_float+0x15c>
 800bf00:	3b01      	subs	r3, #1
 800bf02:	3201      	adds	r2, #1
 800bf04:	9302      	str	r3, [sp, #8]
 800bf06:	60a2      	str	r2, [r4, #8]
 800bf08:	68a3      	ldr	r3, [r4, #8]
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	60a3      	str	r3, [r4, #8]
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	3301      	adds	r3, #1
 800bf12:	6123      	str	r3, [r4, #16]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	607b      	str	r3, [r7, #4]
 800bf1c:	f340 8084 	ble.w	800c028 <_scanf_float+0x27c>
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	3301      	adds	r3, #1
 800bf24:	603b      	str	r3, [r7, #0]
 800bf26:	e766      	b.n	800bdf6 <_scanf_float+0x4a>
 800bf28:	eb1a 0f05 	cmn.w	sl, r5
 800bf2c:	f47f af70 	bne.w	800be10 <_scanf_float+0x64>
 800bf30:	6822      	ldr	r2, [r4, #0]
 800bf32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bf36:	6022      	str	r2, [r4, #0]
 800bf38:	f806 3b01 	strb.w	r3, [r6], #1
 800bf3c:	e7e4      	b.n	800bf08 <_scanf_float+0x15c>
 800bf3e:	6822      	ldr	r2, [r4, #0]
 800bf40:	0610      	lsls	r0, r2, #24
 800bf42:	f57f af65 	bpl.w	800be10 <_scanf_float+0x64>
 800bf46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf4a:	e7f4      	b.n	800bf36 <_scanf_float+0x18a>
 800bf4c:	f1ba 0f00 	cmp.w	sl, #0
 800bf50:	d10e      	bne.n	800bf70 <_scanf_float+0x1c4>
 800bf52:	f1b9 0f00 	cmp.w	r9, #0
 800bf56:	d10e      	bne.n	800bf76 <_scanf_float+0x1ca>
 800bf58:	6822      	ldr	r2, [r4, #0]
 800bf5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bf5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bf62:	d108      	bne.n	800bf76 <_scanf_float+0x1ca>
 800bf64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf68:	f04f 0a01 	mov.w	sl, #1
 800bf6c:	6022      	str	r2, [r4, #0]
 800bf6e:	e7e3      	b.n	800bf38 <_scanf_float+0x18c>
 800bf70:	f1ba 0f02 	cmp.w	sl, #2
 800bf74:	d055      	beq.n	800c022 <_scanf_float+0x276>
 800bf76:	2d01      	cmp	r5, #1
 800bf78:	d002      	beq.n	800bf80 <_scanf_float+0x1d4>
 800bf7a:	2d04      	cmp	r5, #4
 800bf7c:	f47f af48 	bne.w	800be10 <_scanf_float+0x64>
 800bf80:	3501      	adds	r5, #1
 800bf82:	b2ed      	uxtb	r5, r5
 800bf84:	e7d8      	b.n	800bf38 <_scanf_float+0x18c>
 800bf86:	f1ba 0f01 	cmp.w	sl, #1
 800bf8a:	f47f af41 	bne.w	800be10 <_scanf_float+0x64>
 800bf8e:	f04f 0a02 	mov.w	sl, #2
 800bf92:	e7d1      	b.n	800bf38 <_scanf_float+0x18c>
 800bf94:	b97d      	cbnz	r5, 800bfb6 <_scanf_float+0x20a>
 800bf96:	f1b9 0f00 	cmp.w	r9, #0
 800bf9a:	f47f af3c 	bne.w	800be16 <_scanf_float+0x6a>
 800bf9e:	6822      	ldr	r2, [r4, #0]
 800bfa0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bfa4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bfa8:	f47f af39 	bne.w	800be1e <_scanf_float+0x72>
 800bfac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bfb0:	2501      	movs	r5, #1
 800bfb2:	6022      	str	r2, [r4, #0]
 800bfb4:	e7c0      	b.n	800bf38 <_scanf_float+0x18c>
 800bfb6:	2d03      	cmp	r5, #3
 800bfb8:	d0e2      	beq.n	800bf80 <_scanf_float+0x1d4>
 800bfba:	2d05      	cmp	r5, #5
 800bfbc:	e7de      	b.n	800bf7c <_scanf_float+0x1d0>
 800bfbe:	2d02      	cmp	r5, #2
 800bfc0:	f47f af26 	bne.w	800be10 <_scanf_float+0x64>
 800bfc4:	2503      	movs	r5, #3
 800bfc6:	e7b7      	b.n	800bf38 <_scanf_float+0x18c>
 800bfc8:	2d06      	cmp	r5, #6
 800bfca:	f47f af21 	bne.w	800be10 <_scanf_float+0x64>
 800bfce:	2507      	movs	r5, #7
 800bfd0:	e7b2      	b.n	800bf38 <_scanf_float+0x18c>
 800bfd2:	6822      	ldr	r2, [r4, #0]
 800bfd4:	0591      	lsls	r1, r2, #22
 800bfd6:	f57f af1b 	bpl.w	800be10 <_scanf_float+0x64>
 800bfda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	f8cd 9004 	str.w	r9, [sp, #4]
 800bfe4:	e7a8      	b.n	800bf38 <_scanf_float+0x18c>
 800bfe6:	6822      	ldr	r2, [r4, #0]
 800bfe8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bfec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bff0:	d006      	beq.n	800c000 <_scanf_float+0x254>
 800bff2:	0550      	lsls	r0, r2, #21
 800bff4:	f57f af0c 	bpl.w	800be10 <_scanf_float+0x64>
 800bff8:	f1b9 0f00 	cmp.w	r9, #0
 800bffc:	f43f af0f 	beq.w	800be1e <_scanf_float+0x72>
 800c000:	0591      	lsls	r1, r2, #22
 800c002:	bf58      	it	pl
 800c004:	9901      	ldrpl	r1, [sp, #4]
 800c006:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c00a:	bf58      	it	pl
 800c00c:	eba9 0101 	subpl.w	r1, r9, r1
 800c010:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c014:	f04f 0900 	mov.w	r9, #0
 800c018:	bf58      	it	pl
 800c01a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c01e:	6022      	str	r2, [r4, #0]
 800c020:	e78a      	b.n	800bf38 <_scanf_float+0x18c>
 800c022:	f04f 0a03 	mov.w	sl, #3
 800c026:	e787      	b.n	800bf38 <_scanf_float+0x18c>
 800c028:	4639      	mov	r1, r7
 800c02a:	4640      	mov	r0, r8
 800c02c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c030:	4798      	blx	r3
 800c032:	2800      	cmp	r0, #0
 800c034:	f43f aedf 	beq.w	800bdf6 <_scanf_float+0x4a>
 800c038:	e6ea      	b.n	800be10 <_scanf_float+0x64>
 800c03a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c03e:	463a      	mov	r2, r7
 800c040:	4640      	mov	r0, r8
 800c042:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c046:	4798      	blx	r3
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	6123      	str	r3, [r4, #16]
 800c04e:	e6ec      	b.n	800be2a <_scanf_float+0x7e>
 800c050:	1e6b      	subs	r3, r5, #1
 800c052:	2b06      	cmp	r3, #6
 800c054:	d825      	bhi.n	800c0a2 <_scanf_float+0x2f6>
 800c056:	2d02      	cmp	r5, #2
 800c058:	d836      	bhi.n	800c0c8 <_scanf_float+0x31c>
 800c05a:	455e      	cmp	r6, fp
 800c05c:	f67f aee8 	bls.w	800be30 <_scanf_float+0x84>
 800c060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c064:	463a      	mov	r2, r7
 800c066:	4640      	mov	r0, r8
 800c068:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c06c:	4798      	blx	r3
 800c06e:	6923      	ldr	r3, [r4, #16]
 800c070:	3b01      	subs	r3, #1
 800c072:	6123      	str	r3, [r4, #16]
 800c074:	e7f1      	b.n	800c05a <_scanf_float+0x2ae>
 800c076:	9802      	ldr	r0, [sp, #8]
 800c078:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c07c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c080:	463a      	mov	r2, r7
 800c082:	9002      	str	r0, [sp, #8]
 800c084:	4640      	mov	r0, r8
 800c086:	4798      	blx	r3
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	6123      	str	r3, [r4, #16]
 800c08e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c092:	fa5f fa8a 	uxtb.w	sl, sl
 800c096:	f1ba 0f02 	cmp.w	sl, #2
 800c09a:	d1ec      	bne.n	800c076 <_scanf_float+0x2ca>
 800c09c:	3d03      	subs	r5, #3
 800c09e:	b2ed      	uxtb	r5, r5
 800c0a0:	1b76      	subs	r6, r6, r5
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	05da      	lsls	r2, r3, #23
 800c0a6:	d52f      	bpl.n	800c108 <_scanf_float+0x35c>
 800c0a8:	055b      	lsls	r3, r3, #21
 800c0aa:	d510      	bpl.n	800c0ce <_scanf_float+0x322>
 800c0ac:	455e      	cmp	r6, fp
 800c0ae:	f67f aebf 	bls.w	800be30 <_scanf_float+0x84>
 800c0b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0b6:	463a      	mov	r2, r7
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0be:	4798      	blx	r3
 800c0c0:	6923      	ldr	r3, [r4, #16]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	6123      	str	r3, [r4, #16]
 800c0c6:	e7f1      	b.n	800c0ac <_scanf_float+0x300>
 800c0c8:	46aa      	mov	sl, r5
 800c0ca:	9602      	str	r6, [sp, #8]
 800c0cc:	e7df      	b.n	800c08e <_scanf_float+0x2e2>
 800c0ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	2965      	cmp	r1, #101	; 0x65
 800c0d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c0da:	f106 35ff 	add.w	r5, r6, #4294967295
 800c0de:	6123      	str	r3, [r4, #16]
 800c0e0:	d00c      	beq.n	800c0fc <_scanf_float+0x350>
 800c0e2:	2945      	cmp	r1, #69	; 0x45
 800c0e4:	d00a      	beq.n	800c0fc <_scanf_float+0x350>
 800c0e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0ea:	463a      	mov	r2, r7
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	4798      	blx	r3
 800c0f0:	6923      	ldr	r3, [r4, #16]
 800c0f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	1eb5      	subs	r5, r6, #2
 800c0fa:	6123      	str	r3, [r4, #16]
 800c0fc:	463a      	mov	r2, r7
 800c0fe:	4640      	mov	r0, r8
 800c100:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c104:	4798      	blx	r3
 800c106:	462e      	mov	r6, r5
 800c108:	6825      	ldr	r5, [r4, #0]
 800c10a:	f015 0510 	ands.w	r5, r5, #16
 800c10e:	d155      	bne.n	800c1bc <_scanf_float+0x410>
 800c110:	7035      	strb	r5, [r6, #0]
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c11c:	d11b      	bne.n	800c156 <_scanf_float+0x3aa>
 800c11e:	9b01      	ldr	r3, [sp, #4]
 800c120:	454b      	cmp	r3, r9
 800c122:	eba3 0209 	sub.w	r2, r3, r9
 800c126:	d123      	bne.n	800c170 <_scanf_float+0x3c4>
 800c128:	2200      	movs	r2, #0
 800c12a:	4659      	mov	r1, fp
 800c12c:	4640      	mov	r0, r8
 800c12e:	f000 fe7b 	bl	800ce28 <_strtod_r>
 800c132:	6822      	ldr	r2, [r4, #0]
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	f012 0f02 	tst.w	r2, #2
 800c13a:	4606      	mov	r6, r0
 800c13c:	460f      	mov	r7, r1
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	d021      	beq.n	800c186 <_scanf_float+0x3da>
 800c142:	1d1a      	adds	r2, r3, #4
 800c144:	9903      	ldr	r1, [sp, #12]
 800c146:	600a      	str	r2, [r1, #0]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	e9c3 6700 	strd	r6, r7, [r3]
 800c14e:	68e3      	ldr	r3, [r4, #12]
 800c150:	3301      	adds	r3, #1
 800c152:	60e3      	str	r3, [r4, #12]
 800c154:	e66d      	b.n	800be32 <_scanf_float+0x86>
 800c156:	9b04      	ldr	r3, [sp, #16]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d0e5      	beq.n	800c128 <_scanf_float+0x37c>
 800c15c:	9905      	ldr	r1, [sp, #20]
 800c15e:	230a      	movs	r3, #10
 800c160:	462a      	mov	r2, r5
 800c162:	4640      	mov	r0, r8
 800c164:	3101      	adds	r1, #1
 800c166:	f000 fee1 	bl	800cf2c <_strtol_r>
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	9e05      	ldr	r6, [sp, #20]
 800c16e:	1ac2      	subs	r2, r0, r3
 800c170:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c174:	429e      	cmp	r6, r3
 800c176:	bf28      	it	cs
 800c178:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c17c:	4630      	mov	r0, r6
 800c17e:	4910      	ldr	r1, [pc, #64]	; (800c1c0 <_scanf_float+0x414>)
 800c180:	f000 f826 	bl	800c1d0 <siprintf>
 800c184:	e7d0      	b.n	800c128 <_scanf_float+0x37c>
 800c186:	f012 0f04 	tst.w	r2, #4
 800c18a:	f103 0204 	add.w	r2, r3, #4
 800c18e:	d1d9      	bne.n	800c144 <_scanf_float+0x398>
 800c190:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c194:	f8cc 2000 	str.w	r2, [ip]
 800c198:	f8d3 8000 	ldr.w	r8, [r3]
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	f7f4 fca4 	bl	8000aec <__aeabi_dcmpun>
 800c1a4:	b128      	cbz	r0, 800c1b2 <_scanf_float+0x406>
 800c1a6:	4807      	ldr	r0, [pc, #28]	; (800c1c4 <_scanf_float+0x418>)
 800c1a8:	f000 f80e 	bl	800c1c8 <nanf>
 800c1ac:	f8c8 0000 	str.w	r0, [r8]
 800c1b0:	e7cd      	b.n	800c14e <_scanf_float+0x3a2>
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	4639      	mov	r1, r7
 800c1b6:	f7f4 fcf7 	bl	8000ba8 <__aeabi_d2f>
 800c1ba:	e7f7      	b.n	800c1ac <_scanf_float+0x400>
 800c1bc:	2500      	movs	r5, #0
 800c1be:	e638      	b.n	800be32 <_scanf_float+0x86>
 800c1c0:	0801175c 	.word	0x0801175c
 800c1c4:	08011b68 	.word	0x08011b68

0800c1c8 <nanf>:
 800c1c8:	4800      	ldr	r0, [pc, #0]	; (800c1cc <nanf+0x4>)
 800c1ca:	4770      	bx	lr
 800c1cc:	7fc00000 	.word	0x7fc00000

0800c1d0 <siprintf>:
 800c1d0:	b40e      	push	{r1, r2, r3}
 800c1d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1d6:	b500      	push	{lr}
 800c1d8:	b09c      	sub	sp, #112	; 0x70
 800c1da:	ab1d      	add	r3, sp, #116	; 0x74
 800c1dc:	9002      	str	r0, [sp, #8]
 800c1de:	9006      	str	r0, [sp, #24]
 800c1e0:	9107      	str	r1, [sp, #28]
 800c1e2:	9104      	str	r1, [sp, #16]
 800c1e4:	4808      	ldr	r0, [pc, #32]	; (800c208 <siprintf+0x38>)
 800c1e6:	4909      	ldr	r1, [pc, #36]	; (800c20c <siprintf+0x3c>)
 800c1e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ec:	9105      	str	r1, [sp, #20]
 800c1ee:	6800      	ldr	r0, [r0, #0]
 800c1f0:	a902      	add	r1, sp, #8
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	f002 feac 	bl	800ef50 <_svfiprintf_r>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	9b02      	ldr	r3, [sp, #8]
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	b01c      	add	sp, #112	; 0x70
 800c200:	f85d eb04 	ldr.w	lr, [sp], #4
 800c204:	b003      	add	sp, #12
 800c206:	4770      	bx	lr
 800c208:	20000018 	.word	0x20000018
 800c20c:	ffff0208 	.word	0xffff0208

0800c210 <sulp>:
 800c210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c214:	460f      	mov	r7, r1
 800c216:	4690      	mov	r8, r2
 800c218:	f002 fc06 	bl	800ea28 <__ulp>
 800c21c:	4604      	mov	r4, r0
 800c21e:	460d      	mov	r5, r1
 800c220:	f1b8 0f00 	cmp.w	r8, #0
 800c224:	d011      	beq.n	800c24a <sulp+0x3a>
 800c226:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c22a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c22e:	2b00      	cmp	r3, #0
 800c230:	dd0b      	ble.n	800c24a <sulp+0x3a>
 800c232:	2400      	movs	r4, #0
 800c234:	051b      	lsls	r3, r3, #20
 800c236:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c23a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c23e:	4622      	mov	r2, r4
 800c240:	462b      	mov	r3, r5
 800c242:	f7f4 f9b9 	bl	80005b8 <__aeabi_dmul>
 800c246:	4604      	mov	r4, r0
 800c248:	460d      	mov	r5, r1
 800c24a:	4620      	mov	r0, r4
 800c24c:	4629      	mov	r1, r5
 800c24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c252:	0000      	movs	r0, r0
 800c254:	0000      	movs	r0, r0
	...

0800c258 <_strtod_l>:
 800c258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25c:	469b      	mov	fp, r3
 800c25e:	2300      	movs	r3, #0
 800c260:	b09f      	sub	sp, #124	; 0x7c
 800c262:	931a      	str	r3, [sp, #104]	; 0x68
 800c264:	4b9e      	ldr	r3, [pc, #632]	; (800c4e0 <_strtod_l+0x288>)
 800c266:	4682      	mov	sl, r0
 800c268:	681f      	ldr	r7, [r3, #0]
 800c26a:	460e      	mov	r6, r1
 800c26c:	4638      	mov	r0, r7
 800c26e:	9215      	str	r2, [sp, #84]	; 0x54
 800c270:	f7f3 ffde 	bl	8000230 <strlen>
 800c274:	f04f 0800 	mov.w	r8, #0
 800c278:	4604      	mov	r4, r0
 800c27a:	f04f 0900 	mov.w	r9, #0
 800c27e:	9619      	str	r6, [sp, #100]	; 0x64
 800c280:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c282:	781a      	ldrb	r2, [r3, #0]
 800c284:	2a2b      	cmp	r2, #43	; 0x2b
 800c286:	d04c      	beq.n	800c322 <_strtod_l+0xca>
 800c288:	d83a      	bhi.n	800c300 <_strtod_l+0xa8>
 800c28a:	2a0d      	cmp	r2, #13
 800c28c:	d833      	bhi.n	800c2f6 <_strtod_l+0x9e>
 800c28e:	2a08      	cmp	r2, #8
 800c290:	d833      	bhi.n	800c2fa <_strtod_l+0xa2>
 800c292:	2a00      	cmp	r2, #0
 800c294:	d03d      	beq.n	800c312 <_strtod_l+0xba>
 800c296:	2300      	movs	r3, #0
 800c298:	930a      	str	r3, [sp, #40]	; 0x28
 800c29a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c29c:	782b      	ldrb	r3, [r5, #0]
 800c29e:	2b30      	cmp	r3, #48	; 0x30
 800c2a0:	f040 80aa 	bne.w	800c3f8 <_strtod_l+0x1a0>
 800c2a4:	786b      	ldrb	r3, [r5, #1]
 800c2a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c2aa:	2b58      	cmp	r3, #88	; 0x58
 800c2ac:	d166      	bne.n	800c37c <_strtod_l+0x124>
 800c2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b0:	4650      	mov	r0, sl
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	ab1a      	add	r3, sp, #104	; 0x68
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	4a8a      	ldr	r2, [pc, #552]	; (800c4e4 <_strtod_l+0x28c>)
 800c2ba:	f8cd b008 	str.w	fp, [sp, #8]
 800c2be:	ab1b      	add	r3, sp, #108	; 0x6c
 800c2c0:	a919      	add	r1, sp, #100	; 0x64
 800c2c2:	f001 fd17 	bl	800dcf4 <__gethex>
 800c2c6:	f010 0607 	ands.w	r6, r0, #7
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	d005      	beq.n	800c2da <_strtod_l+0x82>
 800c2ce:	2e06      	cmp	r6, #6
 800c2d0:	d129      	bne.n	800c326 <_strtod_l+0xce>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	3501      	adds	r5, #1
 800c2d6:	9519      	str	r5, [sp, #100]	; 0x64
 800c2d8:	930a      	str	r3, [sp, #40]	; 0x28
 800c2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f040 858a 	bne.w	800cdf6 <_strtod_l+0xb9e>
 800c2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2e4:	b1d3      	cbz	r3, 800c31c <_strtod_l+0xc4>
 800c2e6:	4642      	mov	r2, r8
 800c2e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	b01f      	add	sp, #124	; 0x7c
 800c2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f6:	2a20      	cmp	r2, #32
 800c2f8:	d1cd      	bne.n	800c296 <_strtod_l+0x3e>
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	9319      	str	r3, [sp, #100]	; 0x64
 800c2fe:	e7bf      	b.n	800c280 <_strtod_l+0x28>
 800c300:	2a2d      	cmp	r2, #45	; 0x2d
 800c302:	d1c8      	bne.n	800c296 <_strtod_l+0x3e>
 800c304:	2201      	movs	r2, #1
 800c306:	920a      	str	r2, [sp, #40]	; 0x28
 800c308:	1c5a      	adds	r2, r3, #1
 800c30a:	9219      	str	r2, [sp, #100]	; 0x64
 800c30c:	785b      	ldrb	r3, [r3, #1]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1c3      	bne.n	800c29a <_strtod_l+0x42>
 800c312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c314:	9619      	str	r6, [sp, #100]	; 0x64
 800c316:	2b00      	cmp	r3, #0
 800c318:	f040 856b 	bne.w	800cdf2 <_strtod_l+0xb9a>
 800c31c:	4642      	mov	r2, r8
 800c31e:	464b      	mov	r3, r9
 800c320:	e7e4      	b.n	800c2ec <_strtod_l+0x94>
 800c322:	2200      	movs	r2, #0
 800c324:	e7ef      	b.n	800c306 <_strtod_l+0xae>
 800c326:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c328:	b13a      	cbz	r2, 800c33a <_strtod_l+0xe2>
 800c32a:	2135      	movs	r1, #53	; 0x35
 800c32c:	a81c      	add	r0, sp, #112	; 0x70
 800c32e:	f002 fc7f 	bl	800ec30 <__copybits>
 800c332:	4650      	mov	r0, sl
 800c334:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c336:	f002 f847 	bl	800e3c8 <_Bfree>
 800c33a:	3e01      	subs	r6, #1
 800c33c:	2e04      	cmp	r6, #4
 800c33e:	d806      	bhi.n	800c34e <_strtod_l+0xf6>
 800c340:	e8df f006 	tbb	[pc, r6]
 800c344:	1714030a 	.word	0x1714030a
 800c348:	0a          	.byte	0x0a
 800c349:	00          	.byte	0x00
 800c34a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800c34e:	0721      	lsls	r1, r4, #28
 800c350:	d5c3      	bpl.n	800c2da <_strtod_l+0x82>
 800c352:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c356:	e7c0      	b.n	800c2da <_strtod_l+0x82>
 800c358:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c35a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800c35e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c362:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c366:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c36a:	e7f0      	b.n	800c34e <_strtod_l+0xf6>
 800c36c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c4e8 <_strtod_l+0x290>
 800c370:	e7ed      	b.n	800c34e <_strtod_l+0xf6>
 800c372:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c376:	f04f 38ff 	mov.w	r8, #4294967295
 800c37a:	e7e8      	b.n	800c34e <_strtod_l+0xf6>
 800c37c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	9219      	str	r2, [sp, #100]	; 0x64
 800c382:	785b      	ldrb	r3, [r3, #1]
 800c384:	2b30      	cmp	r3, #48	; 0x30
 800c386:	d0f9      	beq.n	800c37c <_strtod_l+0x124>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d0a6      	beq.n	800c2da <_strtod_l+0x82>
 800c38c:	2301      	movs	r3, #1
 800c38e:	9307      	str	r3, [sp, #28]
 800c390:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c392:	220a      	movs	r2, #10
 800c394:	9308      	str	r3, [sp, #32]
 800c396:	2300      	movs	r3, #0
 800c398:	469b      	mov	fp, r3
 800c39a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c39e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c3a0:	7805      	ldrb	r5, [r0, #0]
 800c3a2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c3a6:	b2d9      	uxtb	r1, r3
 800c3a8:	2909      	cmp	r1, #9
 800c3aa:	d927      	bls.n	800c3fc <_strtod_l+0x1a4>
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	4639      	mov	r1, r7
 800c3b0:	f002 fee4 	bl	800f17c <strncmp>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d033      	beq.n	800c420 <_strtod_l+0x1c8>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	462a      	mov	r2, r5
 800c3bc:	465c      	mov	r4, fp
 800c3be:	4603      	mov	r3, r0
 800c3c0:	9004      	str	r0, [sp, #16]
 800c3c2:	2a65      	cmp	r2, #101	; 0x65
 800c3c4:	d001      	beq.n	800c3ca <_strtod_l+0x172>
 800c3c6:	2a45      	cmp	r2, #69	; 0x45
 800c3c8:	d114      	bne.n	800c3f4 <_strtod_l+0x19c>
 800c3ca:	b91c      	cbnz	r4, 800c3d4 <_strtod_l+0x17c>
 800c3cc:	9a07      	ldr	r2, [sp, #28]
 800c3ce:	4302      	orrs	r2, r0
 800c3d0:	d09f      	beq.n	800c312 <_strtod_l+0xba>
 800c3d2:	2400      	movs	r4, #0
 800c3d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c3d6:	1c72      	adds	r2, r6, #1
 800c3d8:	9219      	str	r2, [sp, #100]	; 0x64
 800c3da:	7872      	ldrb	r2, [r6, #1]
 800c3dc:	2a2b      	cmp	r2, #43	; 0x2b
 800c3de:	d079      	beq.n	800c4d4 <_strtod_l+0x27c>
 800c3e0:	2a2d      	cmp	r2, #45	; 0x2d
 800c3e2:	f000 8083 	beq.w	800c4ec <_strtod_l+0x294>
 800c3e6:	2700      	movs	r7, #0
 800c3e8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c3ec:	2909      	cmp	r1, #9
 800c3ee:	f240 8083 	bls.w	800c4f8 <_strtod_l+0x2a0>
 800c3f2:	9619      	str	r6, [sp, #100]	; 0x64
 800c3f4:	2500      	movs	r5, #0
 800c3f6:	e09f      	b.n	800c538 <_strtod_l+0x2e0>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	e7c8      	b.n	800c38e <_strtod_l+0x136>
 800c3fc:	f1bb 0f08 	cmp.w	fp, #8
 800c400:	bfd5      	itete	le
 800c402:	9906      	ldrle	r1, [sp, #24]
 800c404:	9905      	ldrgt	r1, [sp, #20]
 800c406:	fb02 3301 	mlale	r3, r2, r1, r3
 800c40a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c40e:	f100 0001 	add.w	r0, r0, #1
 800c412:	bfd4      	ite	le
 800c414:	9306      	strle	r3, [sp, #24]
 800c416:	9305      	strgt	r3, [sp, #20]
 800c418:	f10b 0b01 	add.w	fp, fp, #1
 800c41c:	9019      	str	r0, [sp, #100]	; 0x64
 800c41e:	e7be      	b.n	800c39e <_strtod_l+0x146>
 800c420:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c422:	191a      	adds	r2, r3, r4
 800c424:	9219      	str	r2, [sp, #100]	; 0x64
 800c426:	5d1a      	ldrb	r2, [r3, r4]
 800c428:	f1bb 0f00 	cmp.w	fp, #0
 800c42c:	d036      	beq.n	800c49c <_strtod_l+0x244>
 800c42e:	465c      	mov	r4, fp
 800c430:	9004      	str	r0, [sp, #16]
 800c432:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c436:	2b09      	cmp	r3, #9
 800c438:	d912      	bls.n	800c460 <_strtod_l+0x208>
 800c43a:	2301      	movs	r3, #1
 800c43c:	e7c1      	b.n	800c3c2 <_strtod_l+0x16a>
 800c43e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c440:	3001      	adds	r0, #1
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	9219      	str	r2, [sp, #100]	; 0x64
 800c446:	785a      	ldrb	r2, [r3, #1]
 800c448:	2a30      	cmp	r2, #48	; 0x30
 800c44a:	d0f8      	beq.n	800c43e <_strtod_l+0x1e6>
 800c44c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c450:	2b08      	cmp	r3, #8
 800c452:	f200 84d5 	bhi.w	800ce00 <_strtod_l+0xba8>
 800c456:	9004      	str	r0, [sp, #16]
 800c458:	2000      	movs	r0, #0
 800c45a:	4604      	mov	r4, r0
 800c45c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c45e:	9308      	str	r3, [sp, #32]
 800c460:	3a30      	subs	r2, #48	; 0x30
 800c462:	f100 0301 	add.w	r3, r0, #1
 800c466:	d013      	beq.n	800c490 <_strtod_l+0x238>
 800c468:	9904      	ldr	r1, [sp, #16]
 800c46a:	1905      	adds	r5, r0, r4
 800c46c:	4419      	add	r1, r3
 800c46e:	9104      	str	r1, [sp, #16]
 800c470:	4623      	mov	r3, r4
 800c472:	210a      	movs	r1, #10
 800c474:	42ab      	cmp	r3, r5
 800c476:	d113      	bne.n	800c4a0 <_strtod_l+0x248>
 800c478:	1823      	adds	r3, r4, r0
 800c47a:	2b08      	cmp	r3, #8
 800c47c:	f104 0401 	add.w	r4, r4, #1
 800c480:	4404      	add	r4, r0
 800c482:	dc1b      	bgt.n	800c4bc <_strtod_l+0x264>
 800c484:	230a      	movs	r3, #10
 800c486:	9906      	ldr	r1, [sp, #24]
 800c488:	fb03 2301 	mla	r3, r3, r1, r2
 800c48c:	9306      	str	r3, [sp, #24]
 800c48e:	2300      	movs	r3, #0
 800c490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c492:	4618      	mov	r0, r3
 800c494:	1c51      	adds	r1, r2, #1
 800c496:	9119      	str	r1, [sp, #100]	; 0x64
 800c498:	7852      	ldrb	r2, [r2, #1]
 800c49a:	e7ca      	b.n	800c432 <_strtod_l+0x1da>
 800c49c:	4658      	mov	r0, fp
 800c49e:	e7d3      	b.n	800c448 <_strtod_l+0x1f0>
 800c4a0:	2b08      	cmp	r3, #8
 800c4a2:	dc04      	bgt.n	800c4ae <_strtod_l+0x256>
 800c4a4:	9f06      	ldr	r7, [sp, #24]
 800c4a6:	434f      	muls	r7, r1
 800c4a8:	9706      	str	r7, [sp, #24]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	e7e2      	b.n	800c474 <_strtod_l+0x21c>
 800c4ae:	1c5f      	adds	r7, r3, #1
 800c4b0:	2f10      	cmp	r7, #16
 800c4b2:	bfde      	ittt	le
 800c4b4:	9f05      	ldrle	r7, [sp, #20]
 800c4b6:	434f      	mulle	r7, r1
 800c4b8:	9705      	strle	r7, [sp, #20]
 800c4ba:	e7f6      	b.n	800c4aa <_strtod_l+0x252>
 800c4bc:	2c10      	cmp	r4, #16
 800c4be:	bfdf      	itttt	le
 800c4c0:	230a      	movle	r3, #10
 800c4c2:	9905      	ldrle	r1, [sp, #20]
 800c4c4:	fb03 2301 	mlale	r3, r3, r1, r2
 800c4c8:	9305      	strle	r3, [sp, #20]
 800c4ca:	e7e0      	b.n	800c48e <_strtod_l+0x236>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	9304      	str	r3, [sp, #16]
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e77b      	b.n	800c3cc <_strtod_l+0x174>
 800c4d4:	2700      	movs	r7, #0
 800c4d6:	1cb2      	adds	r2, r6, #2
 800c4d8:	9219      	str	r2, [sp, #100]	; 0x64
 800c4da:	78b2      	ldrb	r2, [r6, #2]
 800c4dc:	e784      	b.n	800c3e8 <_strtod_l+0x190>
 800c4de:	bf00      	nop
 800c4e0:	080119b0 	.word	0x080119b0
 800c4e4:	08011764 	.word	0x08011764
 800c4e8:	7ff00000 	.word	0x7ff00000
 800c4ec:	2701      	movs	r7, #1
 800c4ee:	e7f2      	b.n	800c4d6 <_strtod_l+0x27e>
 800c4f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c4f2:	1c51      	adds	r1, r2, #1
 800c4f4:	9119      	str	r1, [sp, #100]	; 0x64
 800c4f6:	7852      	ldrb	r2, [r2, #1]
 800c4f8:	2a30      	cmp	r2, #48	; 0x30
 800c4fa:	d0f9      	beq.n	800c4f0 <_strtod_l+0x298>
 800c4fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c500:	2908      	cmp	r1, #8
 800c502:	f63f af77 	bhi.w	800c3f4 <_strtod_l+0x19c>
 800c506:	f04f 0e0a 	mov.w	lr, #10
 800c50a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c50e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c510:	9209      	str	r2, [sp, #36]	; 0x24
 800c512:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c514:	1c51      	adds	r1, r2, #1
 800c516:	9119      	str	r1, [sp, #100]	; 0x64
 800c518:	7852      	ldrb	r2, [r2, #1]
 800c51a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c51e:	2d09      	cmp	r5, #9
 800c520:	d935      	bls.n	800c58e <_strtod_l+0x336>
 800c522:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c524:	1b49      	subs	r1, r1, r5
 800c526:	2908      	cmp	r1, #8
 800c528:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c52c:	dc02      	bgt.n	800c534 <_strtod_l+0x2dc>
 800c52e:	4565      	cmp	r5, ip
 800c530:	bfa8      	it	ge
 800c532:	4665      	movge	r5, ip
 800c534:	b107      	cbz	r7, 800c538 <_strtod_l+0x2e0>
 800c536:	426d      	negs	r5, r5
 800c538:	2c00      	cmp	r4, #0
 800c53a:	d14c      	bne.n	800c5d6 <_strtod_l+0x37e>
 800c53c:	9907      	ldr	r1, [sp, #28]
 800c53e:	4301      	orrs	r1, r0
 800c540:	f47f aecb 	bne.w	800c2da <_strtod_l+0x82>
 800c544:	2b00      	cmp	r3, #0
 800c546:	f47f aee4 	bne.w	800c312 <_strtod_l+0xba>
 800c54a:	2a69      	cmp	r2, #105	; 0x69
 800c54c:	d026      	beq.n	800c59c <_strtod_l+0x344>
 800c54e:	dc23      	bgt.n	800c598 <_strtod_l+0x340>
 800c550:	2a49      	cmp	r2, #73	; 0x49
 800c552:	d023      	beq.n	800c59c <_strtod_l+0x344>
 800c554:	2a4e      	cmp	r2, #78	; 0x4e
 800c556:	f47f aedc 	bne.w	800c312 <_strtod_l+0xba>
 800c55a:	499d      	ldr	r1, [pc, #628]	; (800c7d0 <_strtod_l+0x578>)
 800c55c:	a819      	add	r0, sp, #100	; 0x64
 800c55e:	f001 fe17 	bl	800e190 <__match>
 800c562:	2800      	cmp	r0, #0
 800c564:	f43f aed5 	beq.w	800c312 <_strtod_l+0xba>
 800c568:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b28      	cmp	r3, #40	; 0x28
 800c56e:	d12c      	bne.n	800c5ca <_strtod_l+0x372>
 800c570:	4998      	ldr	r1, [pc, #608]	; (800c7d4 <_strtod_l+0x57c>)
 800c572:	aa1c      	add	r2, sp, #112	; 0x70
 800c574:	a819      	add	r0, sp, #100	; 0x64
 800c576:	f001 fe1f 	bl	800e1b8 <__hexnan>
 800c57a:	2805      	cmp	r0, #5
 800c57c:	d125      	bne.n	800c5ca <_strtod_l+0x372>
 800c57e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c580:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800c584:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c588:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c58c:	e6a5      	b.n	800c2da <_strtod_l+0x82>
 800c58e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800c592:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c596:	e7bc      	b.n	800c512 <_strtod_l+0x2ba>
 800c598:	2a6e      	cmp	r2, #110	; 0x6e
 800c59a:	e7dc      	b.n	800c556 <_strtod_l+0x2fe>
 800c59c:	498e      	ldr	r1, [pc, #568]	; (800c7d8 <_strtod_l+0x580>)
 800c59e:	a819      	add	r0, sp, #100	; 0x64
 800c5a0:	f001 fdf6 	bl	800e190 <__match>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	f43f aeb4 	beq.w	800c312 <_strtod_l+0xba>
 800c5aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5ac:	498b      	ldr	r1, [pc, #556]	; (800c7dc <_strtod_l+0x584>)
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	a819      	add	r0, sp, #100	; 0x64
 800c5b2:	9319      	str	r3, [sp, #100]	; 0x64
 800c5b4:	f001 fdec 	bl	800e190 <__match>
 800c5b8:	b910      	cbnz	r0, 800c5c0 <_strtod_l+0x368>
 800c5ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5bc:	3301      	adds	r3, #1
 800c5be:	9319      	str	r3, [sp, #100]	; 0x64
 800c5c0:	f04f 0800 	mov.w	r8, #0
 800c5c4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800c7e0 <_strtod_l+0x588>
 800c5c8:	e687      	b.n	800c2da <_strtod_l+0x82>
 800c5ca:	4886      	ldr	r0, [pc, #536]	; (800c7e4 <_strtod_l+0x58c>)
 800c5cc:	f002 fdc0 	bl	800f150 <nan>
 800c5d0:	4680      	mov	r8, r0
 800c5d2:	4689      	mov	r9, r1
 800c5d4:	e681      	b.n	800c2da <_strtod_l+0x82>
 800c5d6:	9b04      	ldr	r3, [sp, #16]
 800c5d8:	f1bb 0f00 	cmp.w	fp, #0
 800c5dc:	bf08      	it	eq
 800c5de:	46a3      	moveq	fp, r4
 800c5e0:	1aeb      	subs	r3, r5, r3
 800c5e2:	2c10      	cmp	r4, #16
 800c5e4:	9806      	ldr	r0, [sp, #24]
 800c5e6:	4626      	mov	r6, r4
 800c5e8:	9307      	str	r3, [sp, #28]
 800c5ea:	bfa8      	it	ge
 800c5ec:	2610      	movge	r6, #16
 800c5ee:	f7f3 ff69 	bl	80004c4 <__aeabi_ui2d>
 800c5f2:	2c09      	cmp	r4, #9
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	4689      	mov	r9, r1
 800c5f8:	dd13      	ble.n	800c622 <_strtod_l+0x3ca>
 800c5fa:	4b7b      	ldr	r3, [pc, #492]	; (800c7e8 <_strtod_l+0x590>)
 800c5fc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c600:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c604:	f7f3 ffd8 	bl	80005b8 <__aeabi_dmul>
 800c608:	4680      	mov	r8, r0
 800c60a:	9805      	ldr	r0, [sp, #20]
 800c60c:	4689      	mov	r9, r1
 800c60e:	f7f3 ff59 	bl	80004c4 <__aeabi_ui2d>
 800c612:	4602      	mov	r2, r0
 800c614:	460b      	mov	r3, r1
 800c616:	4640      	mov	r0, r8
 800c618:	4649      	mov	r1, r9
 800c61a:	f7f3 fe17 	bl	800024c <__adddf3>
 800c61e:	4680      	mov	r8, r0
 800c620:	4689      	mov	r9, r1
 800c622:	2c0f      	cmp	r4, #15
 800c624:	dc36      	bgt.n	800c694 <_strtod_l+0x43c>
 800c626:	9b07      	ldr	r3, [sp, #28]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f43f ae56 	beq.w	800c2da <_strtod_l+0x82>
 800c62e:	dd22      	ble.n	800c676 <_strtod_l+0x41e>
 800c630:	2b16      	cmp	r3, #22
 800c632:	dc09      	bgt.n	800c648 <_strtod_l+0x3f0>
 800c634:	496c      	ldr	r1, [pc, #432]	; (800c7e8 <_strtod_l+0x590>)
 800c636:	4642      	mov	r2, r8
 800c638:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c63c:	464b      	mov	r3, r9
 800c63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c642:	f7f3 ffb9 	bl	80005b8 <__aeabi_dmul>
 800c646:	e7c3      	b.n	800c5d0 <_strtod_l+0x378>
 800c648:	9a07      	ldr	r2, [sp, #28]
 800c64a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c64e:	4293      	cmp	r3, r2
 800c650:	db20      	blt.n	800c694 <_strtod_l+0x43c>
 800c652:	4d65      	ldr	r5, [pc, #404]	; (800c7e8 <_strtod_l+0x590>)
 800c654:	f1c4 040f 	rsb	r4, r4, #15
 800c658:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c65c:	4642      	mov	r2, r8
 800c65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c662:	464b      	mov	r3, r9
 800c664:	f7f3 ffa8 	bl	80005b8 <__aeabi_dmul>
 800c668:	9b07      	ldr	r3, [sp, #28]
 800c66a:	1b1c      	subs	r4, r3, r4
 800c66c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c670:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c674:	e7e5      	b.n	800c642 <_strtod_l+0x3ea>
 800c676:	9b07      	ldr	r3, [sp, #28]
 800c678:	3316      	adds	r3, #22
 800c67a:	db0b      	blt.n	800c694 <_strtod_l+0x43c>
 800c67c:	9b04      	ldr	r3, [sp, #16]
 800c67e:	4640      	mov	r0, r8
 800c680:	1b5d      	subs	r5, r3, r5
 800c682:	4b59      	ldr	r3, [pc, #356]	; (800c7e8 <_strtod_l+0x590>)
 800c684:	4649      	mov	r1, r9
 800c686:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c68a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c68e:	f7f4 f8bd 	bl	800080c <__aeabi_ddiv>
 800c692:	e79d      	b.n	800c5d0 <_strtod_l+0x378>
 800c694:	9b07      	ldr	r3, [sp, #28]
 800c696:	1ba6      	subs	r6, r4, r6
 800c698:	441e      	add	r6, r3
 800c69a:	2e00      	cmp	r6, #0
 800c69c:	dd74      	ble.n	800c788 <_strtod_l+0x530>
 800c69e:	f016 030f 	ands.w	r3, r6, #15
 800c6a2:	d00a      	beq.n	800c6ba <_strtod_l+0x462>
 800c6a4:	4950      	ldr	r1, [pc, #320]	; (800c7e8 <_strtod_l+0x590>)
 800c6a6:	4642      	mov	r2, r8
 800c6a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b0:	464b      	mov	r3, r9
 800c6b2:	f7f3 ff81 	bl	80005b8 <__aeabi_dmul>
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	4689      	mov	r9, r1
 800c6ba:	f036 060f 	bics.w	r6, r6, #15
 800c6be:	d052      	beq.n	800c766 <_strtod_l+0x50e>
 800c6c0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800c6c4:	dd27      	ble.n	800c716 <_strtod_l+0x4be>
 800c6c6:	f04f 0b00 	mov.w	fp, #0
 800c6ca:	f8cd b010 	str.w	fp, [sp, #16]
 800c6ce:	f8cd b020 	str.w	fp, [sp, #32]
 800c6d2:	f8cd b018 	str.w	fp, [sp, #24]
 800c6d6:	2322      	movs	r3, #34	; 0x22
 800c6d8:	f04f 0800 	mov.w	r8, #0
 800c6dc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800c7e0 <_strtod_l+0x588>
 800c6e0:	f8ca 3000 	str.w	r3, [sl]
 800c6e4:	9b08      	ldr	r3, [sp, #32]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f43f adf7 	beq.w	800c2da <_strtod_l+0x82>
 800c6ec:	4650      	mov	r0, sl
 800c6ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c6f0:	f001 fe6a 	bl	800e3c8 <_Bfree>
 800c6f4:	4650      	mov	r0, sl
 800c6f6:	9906      	ldr	r1, [sp, #24]
 800c6f8:	f001 fe66 	bl	800e3c8 <_Bfree>
 800c6fc:	4650      	mov	r0, sl
 800c6fe:	9904      	ldr	r1, [sp, #16]
 800c700:	f001 fe62 	bl	800e3c8 <_Bfree>
 800c704:	4650      	mov	r0, sl
 800c706:	9908      	ldr	r1, [sp, #32]
 800c708:	f001 fe5e 	bl	800e3c8 <_Bfree>
 800c70c:	4659      	mov	r1, fp
 800c70e:	4650      	mov	r0, sl
 800c710:	f001 fe5a 	bl	800e3c8 <_Bfree>
 800c714:	e5e1      	b.n	800c2da <_strtod_l+0x82>
 800c716:	4b35      	ldr	r3, [pc, #212]	; (800c7ec <_strtod_l+0x594>)
 800c718:	4640      	mov	r0, r8
 800c71a:	9305      	str	r3, [sp, #20]
 800c71c:	2300      	movs	r3, #0
 800c71e:	4649      	mov	r1, r9
 800c720:	461f      	mov	r7, r3
 800c722:	1136      	asrs	r6, r6, #4
 800c724:	2e01      	cmp	r6, #1
 800c726:	dc21      	bgt.n	800c76c <_strtod_l+0x514>
 800c728:	b10b      	cbz	r3, 800c72e <_strtod_l+0x4d6>
 800c72a:	4680      	mov	r8, r0
 800c72c:	4689      	mov	r9, r1
 800c72e:	4b2f      	ldr	r3, [pc, #188]	; (800c7ec <_strtod_l+0x594>)
 800c730:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c734:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c738:	4642      	mov	r2, r8
 800c73a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c73e:	464b      	mov	r3, r9
 800c740:	f7f3 ff3a 	bl	80005b8 <__aeabi_dmul>
 800c744:	4b26      	ldr	r3, [pc, #152]	; (800c7e0 <_strtod_l+0x588>)
 800c746:	460a      	mov	r2, r1
 800c748:	400b      	ands	r3, r1
 800c74a:	4929      	ldr	r1, [pc, #164]	; (800c7f0 <_strtod_l+0x598>)
 800c74c:	4680      	mov	r8, r0
 800c74e:	428b      	cmp	r3, r1
 800c750:	d8b9      	bhi.n	800c6c6 <_strtod_l+0x46e>
 800c752:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c756:	428b      	cmp	r3, r1
 800c758:	bf86      	itte	hi
 800c75a:	f04f 38ff 	movhi.w	r8, #4294967295
 800c75e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c7f4 <_strtod_l+0x59c>
 800c762:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c766:	2300      	movs	r3, #0
 800c768:	9305      	str	r3, [sp, #20]
 800c76a:	e07f      	b.n	800c86c <_strtod_l+0x614>
 800c76c:	07f2      	lsls	r2, r6, #31
 800c76e:	d505      	bpl.n	800c77c <_strtod_l+0x524>
 800c770:	9b05      	ldr	r3, [sp, #20]
 800c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c776:	f7f3 ff1f 	bl	80005b8 <__aeabi_dmul>
 800c77a:	2301      	movs	r3, #1
 800c77c:	9a05      	ldr	r2, [sp, #20]
 800c77e:	3701      	adds	r7, #1
 800c780:	3208      	adds	r2, #8
 800c782:	1076      	asrs	r6, r6, #1
 800c784:	9205      	str	r2, [sp, #20]
 800c786:	e7cd      	b.n	800c724 <_strtod_l+0x4cc>
 800c788:	d0ed      	beq.n	800c766 <_strtod_l+0x50e>
 800c78a:	4276      	negs	r6, r6
 800c78c:	f016 020f 	ands.w	r2, r6, #15
 800c790:	d00a      	beq.n	800c7a8 <_strtod_l+0x550>
 800c792:	4b15      	ldr	r3, [pc, #84]	; (800c7e8 <_strtod_l+0x590>)
 800c794:	4640      	mov	r0, r8
 800c796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c79a:	4649      	mov	r1, r9
 800c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a0:	f7f4 f834 	bl	800080c <__aeabi_ddiv>
 800c7a4:	4680      	mov	r8, r0
 800c7a6:	4689      	mov	r9, r1
 800c7a8:	1136      	asrs	r6, r6, #4
 800c7aa:	d0dc      	beq.n	800c766 <_strtod_l+0x50e>
 800c7ac:	2e1f      	cmp	r6, #31
 800c7ae:	dd23      	ble.n	800c7f8 <_strtod_l+0x5a0>
 800c7b0:	f04f 0b00 	mov.w	fp, #0
 800c7b4:	f8cd b010 	str.w	fp, [sp, #16]
 800c7b8:	f8cd b020 	str.w	fp, [sp, #32]
 800c7bc:	f8cd b018 	str.w	fp, [sp, #24]
 800c7c0:	2322      	movs	r3, #34	; 0x22
 800c7c2:	f04f 0800 	mov.w	r8, #0
 800c7c6:	f04f 0900 	mov.w	r9, #0
 800c7ca:	f8ca 3000 	str.w	r3, [sl]
 800c7ce:	e789      	b.n	800c6e4 <_strtod_l+0x48c>
 800c7d0:	08011735 	.word	0x08011735
 800c7d4:	08011778 	.word	0x08011778
 800c7d8:	0801172d 	.word	0x0801172d
 800c7dc:	080118bc 	.word	0x080118bc
 800c7e0:	7ff00000 	.word	0x7ff00000
 800c7e4:	08011b68 	.word	0x08011b68
 800c7e8:	08011a48 	.word	0x08011a48
 800c7ec:	08011a20 	.word	0x08011a20
 800c7f0:	7ca00000 	.word	0x7ca00000
 800c7f4:	7fefffff 	.word	0x7fefffff
 800c7f8:	f016 0310 	ands.w	r3, r6, #16
 800c7fc:	bf18      	it	ne
 800c7fe:	236a      	movne	r3, #106	; 0x6a
 800c800:	4640      	mov	r0, r8
 800c802:	9305      	str	r3, [sp, #20]
 800c804:	4649      	mov	r1, r9
 800c806:	2300      	movs	r3, #0
 800c808:	4fb0      	ldr	r7, [pc, #704]	; (800cacc <_strtod_l+0x874>)
 800c80a:	07f2      	lsls	r2, r6, #31
 800c80c:	d504      	bpl.n	800c818 <_strtod_l+0x5c0>
 800c80e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c812:	f7f3 fed1 	bl	80005b8 <__aeabi_dmul>
 800c816:	2301      	movs	r3, #1
 800c818:	1076      	asrs	r6, r6, #1
 800c81a:	f107 0708 	add.w	r7, r7, #8
 800c81e:	d1f4      	bne.n	800c80a <_strtod_l+0x5b2>
 800c820:	b10b      	cbz	r3, 800c826 <_strtod_l+0x5ce>
 800c822:	4680      	mov	r8, r0
 800c824:	4689      	mov	r9, r1
 800c826:	9b05      	ldr	r3, [sp, #20]
 800c828:	b1c3      	cbz	r3, 800c85c <_strtod_l+0x604>
 800c82a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c82e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c832:	2b00      	cmp	r3, #0
 800c834:	4649      	mov	r1, r9
 800c836:	dd11      	ble.n	800c85c <_strtod_l+0x604>
 800c838:	2b1f      	cmp	r3, #31
 800c83a:	f340 8127 	ble.w	800ca8c <_strtod_l+0x834>
 800c83e:	2b34      	cmp	r3, #52	; 0x34
 800c840:	bfd8      	it	le
 800c842:	f04f 33ff 	movle.w	r3, #4294967295
 800c846:	f04f 0800 	mov.w	r8, #0
 800c84a:	bfcf      	iteee	gt
 800c84c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c850:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c854:	fa03 f202 	lslle.w	r2, r3, r2
 800c858:	ea02 0901 	andle.w	r9, r2, r1
 800c85c:	2200      	movs	r2, #0
 800c85e:	2300      	movs	r3, #0
 800c860:	4640      	mov	r0, r8
 800c862:	4649      	mov	r1, r9
 800c864:	f7f4 f910 	bl	8000a88 <__aeabi_dcmpeq>
 800c868:	2800      	cmp	r0, #0
 800c86a:	d1a1      	bne.n	800c7b0 <_strtod_l+0x558>
 800c86c:	9b06      	ldr	r3, [sp, #24]
 800c86e:	465a      	mov	r2, fp
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	4650      	mov	r0, sl
 800c874:	4623      	mov	r3, r4
 800c876:	9908      	ldr	r1, [sp, #32]
 800c878:	f001 fe0e 	bl	800e498 <__s2b>
 800c87c:	9008      	str	r0, [sp, #32]
 800c87e:	2800      	cmp	r0, #0
 800c880:	f43f af21 	beq.w	800c6c6 <_strtod_l+0x46e>
 800c884:	9b04      	ldr	r3, [sp, #16]
 800c886:	f04f 0b00 	mov.w	fp, #0
 800c88a:	1b5d      	subs	r5, r3, r5
 800c88c:	9b07      	ldr	r3, [sp, #28]
 800c88e:	f8cd b010 	str.w	fp, [sp, #16]
 800c892:	2b00      	cmp	r3, #0
 800c894:	bfb4      	ite	lt
 800c896:	462b      	movlt	r3, r5
 800c898:	2300      	movge	r3, #0
 800c89a:	930e      	str	r3, [sp, #56]	; 0x38
 800c89c:	9b07      	ldr	r3, [sp, #28]
 800c89e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c8a2:	9314      	str	r3, [sp, #80]	; 0x50
 800c8a4:	9b08      	ldr	r3, [sp, #32]
 800c8a6:	4650      	mov	r0, sl
 800c8a8:	6859      	ldr	r1, [r3, #4]
 800c8aa:	f001 fd4d 	bl	800e348 <_Balloc>
 800c8ae:	9006      	str	r0, [sp, #24]
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	f43f af10 	beq.w	800c6d6 <_strtod_l+0x47e>
 800c8b6:	9b08      	ldr	r3, [sp, #32]
 800c8b8:	300c      	adds	r0, #12
 800c8ba:	691a      	ldr	r2, [r3, #16]
 800c8bc:	f103 010c 	add.w	r1, r3, #12
 800c8c0:	3202      	adds	r2, #2
 800c8c2:	0092      	lsls	r2, r2, #2
 800c8c4:	f7fe fdfc 	bl	800b4c0 <memcpy>
 800c8c8:	ab1c      	add	r3, sp, #112	; 0x70
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	ab1b      	add	r3, sp, #108	; 0x6c
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	4642      	mov	r2, r8
 800c8d2:	464b      	mov	r3, r9
 800c8d4:	4650      	mov	r0, sl
 800c8d6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800c8da:	f002 f91f 	bl	800eb1c <__d2b>
 800c8de:	901a      	str	r0, [sp, #104]	; 0x68
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	f43f aef8 	beq.w	800c6d6 <_strtod_l+0x47e>
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	4650      	mov	r0, sl
 800c8ea:	f001 fe6d 	bl	800e5c8 <__i2b>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	9004      	str	r0, [sp, #16]
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	f43f aeef 	beq.w	800c6d6 <_strtod_l+0x47e>
 800c8f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c8fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c8fc:	2d00      	cmp	r5, #0
 800c8fe:	bfab      	itete	ge
 800c900:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c902:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800c904:	18ee      	addge	r6, r5, r3
 800c906:	1b5c      	sublt	r4, r3, r5
 800c908:	9b05      	ldr	r3, [sp, #20]
 800c90a:	bfa8      	it	ge
 800c90c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800c90e:	eba5 0503 	sub.w	r5, r5, r3
 800c912:	4415      	add	r5, r2
 800c914:	4b6e      	ldr	r3, [pc, #440]	; (800cad0 <_strtod_l+0x878>)
 800c916:	f105 35ff 	add.w	r5, r5, #4294967295
 800c91a:	bfb8      	it	lt
 800c91c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c91e:	429d      	cmp	r5, r3
 800c920:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c924:	f280 80c4 	bge.w	800cab0 <_strtod_l+0x858>
 800c928:	1b5b      	subs	r3, r3, r5
 800c92a:	2b1f      	cmp	r3, #31
 800c92c:	f04f 0701 	mov.w	r7, #1
 800c930:	eba2 0203 	sub.w	r2, r2, r3
 800c934:	f300 80b1 	bgt.w	800ca9a <_strtod_l+0x842>
 800c938:	2500      	movs	r5, #0
 800c93a:	fa07 f303 	lsl.w	r3, r7, r3
 800c93e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c940:	18b7      	adds	r7, r6, r2
 800c942:	9b05      	ldr	r3, [sp, #20]
 800c944:	42be      	cmp	r6, r7
 800c946:	4414      	add	r4, r2
 800c948:	441c      	add	r4, r3
 800c94a:	4633      	mov	r3, r6
 800c94c:	bfa8      	it	ge
 800c94e:	463b      	movge	r3, r7
 800c950:	42a3      	cmp	r3, r4
 800c952:	bfa8      	it	ge
 800c954:	4623      	movge	r3, r4
 800c956:	2b00      	cmp	r3, #0
 800c958:	bfc2      	ittt	gt
 800c95a:	1aff      	subgt	r7, r7, r3
 800c95c:	1ae4      	subgt	r4, r4, r3
 800c95e:	1af6      	subgt	r6, r6, r3
 800c960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c962:	2b00      	cmp	r3, #0
 800c964:	dd17      	ble.n	800c996 <_strtod_l+0x73e>
 800c966:	461a      	mov	r2, r3
 800c968:	4650      	mov	r0, sl
 800c96a:	9904      	ldr	r1, [sp, #16]
 800c96c:	f001 feea 	bl	800e744 <__pow5mult>
 800c970:	9004      	str	r0, [sp, #16]
 800c972:	2800      	cmp	r0, #0
 800c974:	f43f aeaf 	beq.w	800c6d6 <_strtod_l+0x47e>
 800c978:	4601      	mov	r1, r0
 800c97a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c97c:	4650      	mov	r0, sl
 800c97e:	f001 fe39 	bl	800e5f4 <__multiply>
 800c982:	9009      	str	r0, [sp, #36]	; 0x24
 800c984:	2800      	cmp	r0, #0
 800c986:	f43f aea6 	beq.w	800c6d6 <_strtod_l+0x47e>
 800c98a:	4650      	mov	r0, sl
 800c98c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c98e:	f001 fd1b 	bl	800e3c8 <_Bfree>
 800c992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c994:	931a      	str	r3, [sp, #104]	; 0x68
 800c996:	2f00      	cmp	r7, #0
 800c998:	f300 808e 	bgt.w	800cab8 <_strtod_l+0x860>
 800c99c:	9b07      	ldr	r3, [sp, #28]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	dd08      	ble.n	800c9b4 <_strtod_l+0x75c>
 800c9a2:	4650      	mov	r0, sl
 800c9a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9a6:	9906      	ldr	r1, [sp, #24]
 800c9a8:	f001 fecc 	bl	800e744 <__pow5mult>
 800c9ac:	9006      	str	r0, [sp, #24]
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f43f ae91 	beq.w	800c6d6 <_strtod_l+0x47e>
 800c9b4:	2c00      	cmp	r4, #0
 800c9b6:	dd08      	ble.n	800c9ca <_strtod_l+0x772>
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	4650      	mov	r0, sl
 800c9bc:	9906      	ldr	r1, [sp, #24]
 800c9be:	f001 ff1b 	bl	800e7f8 <__lshift>
 800c9c2:	9006      	str	r0, [sp, #24]
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	f43f ae86 	beq.w	800c6d6 <_strtod_l+0x47e>
 800c9ca:	2e00      	cmp	r6, #0
 800c9cc:	dd08      	ble.n	800c9e0 <_strtod_l+0x788>
 800c9ce:	4632      	mov	r2, r6
 800c9d0:	4650      	mov	r0, sl
 800c9d2:	9904      	ldr	r1, [sp, #16]
 800c9d4:	f001 ff10 	bl	800e7f8 <__lshift>
 800c9d8:	9004      	str	r0, [sp, #16]
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	f43f ae7b 	beq.w	800c6d6 <_strtod_l+0x47e>
 800c9e0:	4650      	mov	r0, sl
 800c9e2:	9a06      	ldr	r2, [sp, #24]
 800c9e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c9e6:	f001 ff93 	bl	800e910 <__mdiff>
 800c9ea:	4683      	mov	fp, r0
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	f43f ae72 	beq.w	800c6d6 <_strtod_l+0x47e>
 800c9f2:	2400      	movs	r4, #0
 800c9f4:	68c3      	ldr	r3, [r0, #12]
 800c9f6:	9904      	ldr	r1, [sp, #16]
 800c9f8:	60c4      	str	r4, [r0, #12]
 800c9fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9fc:	f001 ff6c 	bl	800e8d8 <__mcmp>
 800ca00:	42a0      	cmp	r0, r4
 800ca02:	da6b      	bge.n	800cadc <_strtod_l+0x884>
 800ca04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca06:	ea53 0308 	orrs.w	r3, r3, r8
 800ca0a:	f040 8091 	bne.w	800cb30 <_strtod_l+0x8d8>
 800ca0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f040 808c 	bne.w	800cb30 <_strtod_l+0x8d8>
 800ca18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca1c:	0d1b      	lsrs	r3, r3, #20
 800ca1e:	051b      	lsls	r3, r3, #20
 800ca20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ca24:	f240 8084 	bls.w	800cb30 <_strtod_l+0x8d8>
 800ca28:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ca2c:	b91b      	cbnz	r3, 800ca36 <_strtod_l+0x7de>
 800ca2e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	dd7c      	ble.n	800cb30 <_strtod_l+0x8d8>
 800ca36:	4659      	mov	r1, fp
 800ca38:	2201      	movs	r2, #1
 800ca3a:	4650      	mov	r0, sl
 800ca3c:	f001 fedc 	bl	800e7f8 <__lshift>
 800ca40:	9904      	ldr	r1, [sp, #16]
 800ca42:	4683      	mov	fp, r0
 800ca44:	f001 ff48 	bl	800e8d8 <__mcmp>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	dd71      	ble.n	800cb30 <_strtod_l+0x8d8>
 800ca4c:	9905      	ldr	r1, [sp, #20]
 800ca4e:	464b      	mov	r3, r9
 800ca50:	4a20      	ldr	r2, [pc, #128]	; (800cad4 <_strtod_l+0x87c>)
 800ca52:	2900      	cmp	r1, #0
 800ca54:	f000 808c 	beq.w	800cb70 <_strtod_l+0x918>
 800ca58:	ea02 0109 	and.w	r1, r2, r9
 800ca5c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ca60:	f300 8086 	bgt.w	800cb70 <_strtod_l+0x918>
 800ca64:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ca68:	f77f aeaa 	ble.w	800c7c0 <_strtod_l+0x568>
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	4649      	mov	r1, r9
 800ca70:	4b19      	ldr	r3, [pc, #100]	; (800cad8 <_strtod_l+0x880>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	f7f3 fda0 	bl	80005b8 <__aeabi_dmul>
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4303      	orrs	r3, r0
 800ca7c:	bf08      	it	eq
 800ca7e:	2322      	moveq	r3, #34	; 0x22
 800ca80:	4680      	mov	r8, r0
 800ca82:	4689      	mov	r9, r1
 800ca84:	bf08      	it	eq
 800ca86:	f8ca 3000 	streq.w	r3, [sl]
 800ca8a:	e62f      	b.n	800c6ec <_strtod_l+0x494>
 800ca8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca90:	fa02 f303 	lsl.w	r3, r2, r3
 800ca94:	ea03 0808 	and.w	r8, r3, r8
 800ca98:	e6e0      	b.n	800c85c <_strtod_l+0x604>
 800ca9a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ca9e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800caa2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800caa6:	35e2      	adds	r5, #226	; 0xe2
 800caa8:	fa07 f505 	lsl.w	r5, r7, r5
 800caac:	970f      	str	r7, [sp, #60]	; 0x3c
 800caae:	e747      	b.n	800c940 <_strtod_l+0x6e8>
 800cab0:	2301      	movs	r3, #1
 800cab2:	2500      	movs	r5, #0
 800cab4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab6:	e743      	b.n	800c940 <_strtod_l+0x6e8>
 800cab8:	463a      	mov	r2, r7
 800caba:	4650      	mov	r0, sl
 800cabc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cabe:	f001 fe9b 	bl	800e7f8 <__lshift>
 800cac2:	901a      	str	r0, [sp, #104]	; 0x68
 800cac4:	2800      	cmp	r0, #0
 800cac6:	f47f af69 	bne.w	800c99c <_strtod_l+0x744>
 800caca:	e604      	b.n	800c6d6 <_strtod_l+0x47e>
 800cacc:	08011790 	.word	0x08011790
 800cad0:	fffffc02 	.word	0xfffffc02
 800cad4:	7ff00000 	.word	0x7ff00000
 800cad8:	39500000 	.word	0x39500000
 800cadc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cae0:	d165      	bne.n	800cbae <_strtod_l+0x956>
 800cae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cae8:	b35a      	cbz	r2, 800cb42 <_strtod_l+0x8ea>
 800caea:	4a99      	ldr	r2, [pc, #612]	; (800cd50 <_strtod_l+0xaf8>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d12b      	bne.n	800cb48 <_strtod_l+0x8f0>
 800caf0:	9b05      	ldr	r3, [sp, #20]
 800caf2:	4641      	mov	r1, r8
 800caf4:	b303      	cbz	r3, 800cb38 <_strtod_l+0x8e0>
 800caf6:	464a      	mov	r2, r9
 800caf8:	4b96      	ldr	r3, [pc, #600]	; (800cd54 <_strtod_l+0xafc>)
 800cafa:	4013      	ands	r3, r2
 800cafc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cb00:	f04f 32ff 	mov.w	r2, #4294967295
 800cb04:	d81b      	bhi.n	800cb3e <_strtod_l+0x8e6>
 800cb06:	0d1b      	lsrs	r3, r3, #20
 800cb08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb10:	4299      	cmp	r1, r3
 800cb12:	d119      	bne.n	800cb48 <_strtod_l+0x8f0>
 800cb14:	4b90      	ldr	r3, [pc, #576]	; (800cd58 <_strtod_l+0xb00>)
 800cb16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d102      	bne.n	800cb22 <_strtod_l+0x8ca>
 800cb1c:	3101      	adds	r1, #1
 800cb1e:	f43f adda 	beq.w	800c6d6 <_strtod_l+0x47e>
 800cb22:	f04f 0800 	mov.w	r8, #0
 800cb26:	4b8b      	ldr	r3, [pc, #556]	; (800cd54 <_strtod_l+0xafc>)
 800cb28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb2a:	401a      	ands	r2, r3
 800cb2c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800cb30:	9b05      	ldr	r3, [sp, #20]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d19a      	bne.n	800ca6c <_strtod_l+0x814>
 800cb36:	e5d9      	b.n	800c6ec <_strtod_l+0x494>
 800cb38:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3c:	e7e8      	b.n	800cb10 <_strtod_l+0x8b8>
 800cb3e:	4613      	mov	r3, r2
 800cb40:	e7e6      	b.n	800cb10 <_strtod_l+0x8b8>
 800cb42:	ea53 0308 	orrs.w	r3, r3, r8
 800cb46:	d081      	beq.n	800ca4c <_strtod_l+0x7f4>
 800cb48:	b1e5      	cbz	r5, 800cb84 <_strtod_l+0x92c>
 800cb4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb4c:	421d      	tst	r5, r3
 800cb4e:	d0ef      	beq.n	800cb30 <_strtod_l+0x8d8>
 800cb50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb52:	4640      	mov	r0, r8
 800cb54:	4649      	mov	r1, r9
 800cb56:	9a05      	ldr	r2, [sp, #20]
 800cb58:	b1c3      	cbz	r3, 800cb8c <_strtod_l+0x934>
 800cb5a:	f7ff fb59 	bl	800c210 <sulp>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	460b      	mov	r3, r1
 800cb62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb66:	f7f3 fb71 	bl	800024c <__adddf3>
 800cb6a:	4680      	mov	r8, r0
 800cb6c:	4689      	mov	r9, r1
 800cb6e:	e7df      	b.n	800cb30 <_strtod_l+0x8d8>
 800cb70:	4013      	ands	r3, r2
 800cb72:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cb76:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cb7a:	f04f 38ff 	mov.w	r8, #4294967295
 800cb7e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cb82:	e7d5      	b.n	800cb30 <_strtod_l+0x8d8>
 800cb84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb86:	ea13 0f08 	tst.w	r3, r8
 800cb8a:	e7e0      	b.n	800cb4e <_strtod_l+0x8f6>
 800cb8c:	f7ff fb40 	bl	800c210 <sulp>
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb98:	f7f3 fb56 	bl	8000248 <__aeabi_dsub>
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4680      	mov	r8, r0
 800cba2:	4689      	mov	r9, r1
 800cba4:	f7f3 ff70 	bl	8000a88 <__aeabi_dcmpeq>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	d0c1      	beq.n	800cb30 <_strtod_l+0x8d8>
 800cbac:	e608      	b.n	800c7c0 <_strtod_l+0x568>
 800cbae:	4658      	mov	r0, fp
 800cbb0:	9904      	ldr	r1, [sp, #16]
 800cbb2:	f002 f80f 	bl	800ebd4 <__ratio>
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	460f      	mov	r7, r1
 800cbc0:	f7f3 ff76 	bl	8000ab0 <__aeabi_dcmple>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d070      	beq.n	800ccaa <_strtod_l+0xa52>
 800cbc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d042      	beq.n	800cc54 <_strtod_l+0x9fc>
 800cbce:	2600      	movs	r6, #0
 800cbd0:	4f62      	ldr	r7, [pc, #392]	; (800cd5c <_strtod_l+0xb04>)
 800cbd2:	4d62      	ldr	r5, [pc, #392]	; (800cd5c <_strtod_l+0xb04>)
 800cbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbda:	0d1b      	lsrs	r3, r3, #20
 800cbdc:	051b      	lsls	r3, r3, #20
 800cbde:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbe2:	4b5f      	ldr	r3, [pc, #380]	; (800cd60 <_strtod_l+0xb08>)
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	f040 80c3 	bne.w	800cd70 <_strtod_l+0xb18>
 800cbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbec:	4640      	mov	r0, r8
 800cbee:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	f001 ff18 	bl	800ea28 <__ulp>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	4639      	mov	r1, r7
 800cc00:	f7f3 fcda 	bl	80005b8 <__aeabi_dmul>
 800cc04:	4642      	mov	r2, r8
 800cc06:	464b      	mov	r3, r9
 800cc08:	f7f3 fb20 	bl	800024c <__adddf3>
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4951      	ldr	r1, [pc, #324]	; (800cd54 <_strtod_l+0xafc>)
 800cc10:	4a54      	ldr	r2, [pc, #336]	; (800cd64 <_strtod_l+0xb0c>)
 800cc12:	4019      	ands	r1, r3
 800cc14:	4291      	cmp	r1, r2
 800cc16:	4680      	mov	r8, r0
 800cc18:	d95d      	bls.n	800ccd6 <_strtod_l+0xa7e>
 800cc1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc1c:	4b4e      	ldr	r3, [pc, #312]	; (800cd58 <_strtod_l+0xb00>)
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d103      	bne.n	800cc2a <_strtod_l+0x9d2>
 800cc22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc24:	3301      	adds	r3, #1
 800cc26:	f43f ad56 	beq.w	800c6d6 <_strtod_l+0x47e>
 800cc2a:	f04f 38ff 	mov.w	r8, #4294967295
 800cc2e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800cd58 <_strtod_l+0xb00>
 800cc32:	4650      	mov	r0, sl
 800cc34:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cc36:	f001 fbc7 	bl	800e3c8 <_Bfree>
 800cc3a:	4650      	mov	r0, sl
 800cc3c:	9906      	ldr	r1, [sp, #24]
 800cc3e:	f001 fbc3 	bl	800e3c8 <_Bfree>
 800cc42:	4650      	mov	r0, sl
 800cc44:	9904      	ldr	r1, [sp, #16]
 800cc46:	f001 fbbf 	bl	800e3c8 <_Bfree>
 800cc4a:	4659      	mov	r1, fp
 800cc4c:	4650      	mov	r0, sl
 800cc4e:	f001 fbbb 	bl	800e3c8 <_Bfree>
 800cc52:	e627      	b.n	800c8a4 <_strtod_l+0x64c>
 800cc54:	f1b8 0f00 	cmp.w	r8, #0
 800cc58:	d119      	bne.n	800cc8e <_strtod_l+0xa36>
 800cc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc60:	b9e3      	cbnz	r3, 800cc9c <_strtod_l+0xa44>
 800cc62:	2200      	movs	r2, #0
 800cc64:	4630      	mov	r0, r6
 800cc66:	4639      	mov	r1, r7
 800cc68:	4b3c      	ldr	r3, [pc, #240]	; (800cd5c <_strtod_l+0xb04>)
 800cc6a:	f7f3 ff17 	bl	8000a9c <__aeabi_dcmplt>
 800cc6e:	b9c8      	cbnz	r0, 800cca4 <_strtod_l+0xa4c>
 800cc70:	2200      	movs	r2, #0
 800cc72:	4630      	mov	r0, r6
 800cc74:	4639      	mov	r1, r7
 800cc76:	4b3c      	ldr	r3, [pc, #240]	; (800cd68 <_strtod_l+0xb10>)
 800cc78:	f7f3 fc9e 	bl	80005b8 <__aeabi_dmul>
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	460d      	mov	r5, r1
 800cc80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cc84:	9416      	str	r4, [sp, #88]	; 0x58
 800cc86:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc88:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800cc8c:	e7a2      	b.n	800cbd4 <_strtod_l+0x97c>
 800cc8e:	f1b8 0f01 	cmp.w	r8, #1
 800cc92:	d103      	bne.n	800cc9c <_strtod_l+0xa44>
 800cc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f43f ad92 	beq.w	800c7c0 <_strtod_l+0x568>
 800cc9c:	2600      	movs	r6, #0
 800cc9e:	2400      	movs	r4, #0
 800cca0:	4f32      	ldr	r7, [pc, #200]	; (800cd6c <_strtod_l+0xb14>)
 800cca2:	e796      	b.n	800cbd2 <_strtod_l+0x97a>
 800cca4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cca6:	4d30      	ldr	r5, [pc, #192]	; (800cd68 <_strtod_l+0xb10>)
 800cca8:	e7ea      	b.n	800cc80 <_strtod_l+0xa28>
 800ccaa:	4b2f      	ldr	r3, [pc, #188]	; (800cd68 <_strtod_l+0xb10>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	4630      	mov	r0, r6
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	f7f3 fc81 	bl	80005b8 <__aeabi_dmul>
 800ccb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccb8:	4604      	mov	r4, r0
 800ccba:	460d      	mov	r5, r1
 800ccbc:	b933      	cbnz	r3, 800cccc <_strtod_l+0xa74>
 800ccbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccc2:	9010      	str	r0, [sp, #64]	; 0x40
 800ccc4:	9311      	str	r3, [sp, #68]	; 0x44
 800ccc6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ccca:	e783      	b.n	800cbd4 <_strtod_l+0x97c>
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ccd4:	e7f7      	b.n	800ccc6 <_strtod_l+0xa6e>
 800ccd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ccda:	9b05      	ldr	r3, [sp, #20]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1a8      	bne.n	800cc32 <_strtod_l+0x9da>
 800cce0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cce6:	0d1b      	lsrs	r3, r3, #20
 800cce8:	051b      	lsls	r3, r3, #20
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d1a1      	bne.n	800cc32 <_strtod_l+0x9da>
 800ccee:	4620      	mov	r0, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	f7f3 ffa9 	bl	8000c48 <__aeabi_d2lz>
 800ccf6:	f7f3 fc31 	bl	800055c <__aeabi_l2d>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4620      	mov	r0, r4
 800cd00:	4629      	mov	r1, r5
 800cd02:	f7f3 faa1 	bl	8000248 <__aeabi_dsub>
 800cd06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd0c:	ea43 0308 	orr.w	r3, r3, r8
 800cd10:	4313      	orrs	r3, r2
 800cd12:	4604      	mov	r4, r0
 800cd14:	460d      	mov	r5, r1
 800cd16:	d066      	beq.n	800cde6 <_strtod_l+0xb8e>
 800cd18:	a309      	add	r3, pc, #36	; (adr r3, 800cd40 <_strtod_l+0xae8>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	f7f3 febd 	bl	8000a9c <__aeabi_dcmplt>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	f47f ace2 	bne.w	800c6ec <_strtod_l+0x494>
 800cd28:	a307      	add	r3, pc, #28	; (adr r3, 800cd48 <_strtod_l+0xaf0>)
 800cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2e:	4620      	mov	r0, r4
 800cd30:	4629      	mov	r1, r5
 800cd32:	f7f3 fed1 	bl	8000ad8 <__aeabi_dcmpgt>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	f43f af7b 	beq.w	800cc32 <_strtod_l+0x9da>
 800cd3c:	e4d6      	b.n	800c6ec <_strtod_l+0x494>
 800cd3e:	bf00      	nop
 800cd40:	94a03595 	.word	0x94a03595
 800cd44:	3fdfffff 	.word	0x3fdfffff
 800cd48:	35afe535 	.word	0x35afe535
 800cd4c:	3fe00000 	.word	0x3fe00000
 800cd50:	000fffff 	.word	0x000fffff
 800cd54:	7ff00000 	.word	0x7ff00000
 800cd58:	7fefffff 	.word	0x7fefffff
 800cd5c:	3ff00000 	.word	0x3ff00000
 800cd60:	7fe00000 	.word	0x7fe00000
 800cd64:	7c9fffff 	.word	0x7c9fffff
 800cd68:	3fe00000 	.word	0x3fe00000
 800cd6c:	bff00000 	.word	0xbff00000
 800cd70:	9b05      	ldr	r3, [sp, #20]
 800cd72:	b313      	cbz	r3, 800cdba <_strtod_l+0xb62>
 800cd74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd7a:	d81e      	bhi.n	800cdba <_strtod_l+0xb62>
 800cd7c:	a326      	add	r3, pc, #152	; (adr r3, 800ce18 <_strtod_l+0xbc0>)
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	4620      	mov	r0, r4
 800cd84:	4629      	mov	r1, r5
 800cd86:	f7f3 fe93 	bl	8000ab0 <__aeabi_dcmple>
 800cd8a:	b190      	cbz	r0, 800cdb2 <_strtod_l+0xb5a>
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f7f3 feea 	bl	8000b68 <__aeabi_d2uiz>
 800cd94:	2801      	cmp	r0, #1
 800cd96:	bf38      	it	cc
 800cd98:	2001      	movcc	r0, #1
 800cd9a:	f7f3 fb93 	bl	80004c4 <__aeabi_ui2d>
 800cd9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cda0:	4604      	mov	r4, r0
 800cda2:	460d      	mov	r5, r1
 800cda4:	b9d3      	cbnz	r3, 800cddc <_strtod_l+0xb84>
 800cda6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdaa:	9012      	str	r0, [sp, #72]	; 0x48
 800cdac:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800cdb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cdb4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800cdb8:	1a9f      	subs	r7, r3, r2
 800cdba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cdbe:	f001 fe33 	bl	800ea28 <__ulp>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	4639      	mov	r1, r7
 800cdca:	f7f3 fbf5 	bl	80005b8 <__aeabi_dmul>
 800cdce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cdd2:	f7f3 fa3b 	bl	800024c <__adddf3>
 800cdd6:	4680      	mov	r8, r0
 800cdd8:	4689      	mov	r9, r1
 800cdda:	e77e      	b.n	800ccda <_strtod_l+0xa82>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800cde4:	e7e3      	b.n	800cdae <_strtod_l+0xb56>
 800cde6:	a30e      	add	r3, pc, #56	; (adr r3, 800ce20 <_strtod_l+0xbc8>)
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	f7f3 fe56 	bl	8000a9c <__aeabi_dcmplt>
 800cdf0:	e7a1      	b.n	800cd36 <_strtod_l+0xade>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	930a      	str	r3, [sp, #40]	; 0x28
 800cdf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdf8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cdfa:	6013      	str	r3, [r2, #0]
 800cdfc:	f7ff ba71 	b.w	800c2e2 <_strtod_l+0x8a>
 800ce00:	2a65      	cmp	r2, #101	; 0x65
 800ce02:	f43f ab63 	beq.w	800c4cc <_strtod_l+0x274>
 800ce06:	2a45      	cmp	r2, #69	; 0x45
 800ce08:	f43f ab60 	beq.w	800c4cc <_strtod_l+0x274>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	f7ff bb95 	b.w	800c53c <_strtod_l+0x2e4>
 800ce12:	bf00      	nop
 800ce14:	f3af 8000 	nop.w
 800ce18:	ffc00000 	.word	0xffc00000
 800ce1c:	41dfffff 	.word	0x41dfffff
 800ce20:	94a03595 	.word	0x94a03595
 800ce24:	3fcfffff 	.word	0x3fcfffff

0800ce28 <_strtod_r>:
 800ce28:	4b01      	ldr	r3, [pc, #4]	; (800ce30 <_strtod_r+0x8>)
 800ce2a:	f7ff ba15 	b.w	800c258 <_strtod_l>
 800ce2e:	bf00      	nop
 800ce30:	20000080 	.word	0x20000080

0800ce34 <_strtol_l.constprop.0>:
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3a:	4680      	mov	r8, r0
 800ce3c:	d001      	beq.n	800ce42 <_strtol_l.constprop.0+0xe>
 800ce3e:	2b24      	cmp	r3, #36	; 0x24
 800ce40:	d906      	bls.n	800ce50 <_strtol_l.constprop.0+0x1c>
 800ce42:	f7fe fb13 	bl	800b46c <__errno>
 800ce46:	2316      	movs	r3, #22
 800ce48:	6003      	str	r3, [r0, #0]
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce50:	460d      	mov	r5, r1
 800ce52:	4f35      	ldr	r7, [pc, #212]	; (800cf28 <_strtol_l.constprop.0+0xf4>)
 800ce54:	4628      	mov	r0, r5
 800ce56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce5a:	5de6      	ldrb	r6, [r4, r7]
 800ce5c:	f016 0608 	ands.w	r6, r6, #8
 800ce60:	d1f8      	bne.n	800ce54 <_strtol_l.constprop.0+0x20>
 800ce62:	2c2d      	cmp	r4, #45	; 0x2d
 800ce64:	d12f      	bne.n	800cec6 <_strtol_l.constprop.0+0x92>
 800ce66:	2601      	movs	r6, #1
 800ce68:	782c      	ldrb	r4, [r5, #0]
 800ce6a:	1c85      	adds	r5, r0, #2
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d057      	beq.n	800cf20 <_strtol_l.constprop.0+0xec>
 800ce70:	2b10      	cmp	r3, #16
 800ce72:	d109      	bne.n	800ce88 <_strtol_l.constprop.0+0x54>
 800ce74:	2c30      	cmp	r4, #48	; 0x30
 800ce76:	d107      	bne.n	800ce88 <_strtol_l.constprop.0+0x54>
 800ce78:	7828      	ldrb	r0, [r5, #0]
 800ce7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ce7e:	2858      	cmp	r0, #88	; 0x58
 800ce80:	d149      	bne.n	800cf16 <_strtol_l.constprop.0+0xe2>
 800ce82:	2310      	movs	r3, #16
 800ce84:	786c      	ldrb	r4, [r5, #1]
 800ce86:	3502      	adds	r5, #2
 800ce88:	2700      	movs	r7, #0
 800ce8a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800ce8e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ce92:	fbbe f9f3 	udiv	r9, lr, r3
 800ce96:	4638      	mov	r0, r7
 800ce98:	fb03 ea19 	mls	sl, r3, r9, lr
 800ce9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cea0:	f1bc 0f09 	cmp.w	ip, #9
 800cea4:	d814      	bhi.n	800ced0 <_strtol_l.constprop.0+0x9c>
 800cea6:	4664      	mov	r4, ip
 800cea8:	42a3      	cmp	r3, r4
 800ceaa:	dd22      	ble.n	800cef2 <_strtol_l.constprop.0+0xbe>
 800ceac:	2f00      	cmp	r7, #0
 800ceae:	db1d      	blt.n	800ceec <_strtol_l.constprop.0+0xb8>
 800ceb0:	4581      	cmp	r9, r0
 800ceb2:	d31b      	bcc.n	800ceec <_strtol_l.constprop.0+0xb8>
 800ceb4:	d101      	bne.n	800ceba <_strtol_l.constprop.0+0x86>
 800ceb6:	45a2      	cmp	sl, r4
 800ceb8:	db18      	blt.n	800ceec <_strtol_l.constprop.0+0xb8>
 800ceba:	2701      	movs	r7, #1
 800cebc:	fb00 4003 	mla	r0, r0, r3, r4
 800cec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cec4:	e7ea      	b.n	800ce9c <_strtol_l.constprop.0+0x68>
 800cec6:	2c2b      	cmp	r4, #43	; 0x2b
 800cec8:	bf04      	itt	eq
 800ceca:	782c      	ldrbeq	r4, [r5, #0]
 800cecc:	1c85      	addeq	r5, r0, #2
 800cece:	e7cd      	b.n	800ce6c <_strtol_l.constprop.0+0x38>
 800ced0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ced4:	f1bc 0f19 	cmp.w	ip, #25
 800ced8:	d801      	bhi.n	800cede <_strtol_l.constprop.0+0xaa>
 800ceda:	3c37      	subs	r4, #55	; 0x37
 800cedc:	e7e4      	b.n	800cea8 <_strtol_l.constprop.0+0x74>
 800cede:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cee2:	f1bc 0f19 	cmp.w	ip, #25
 800cee6:	d804      	bhi.n	800cef2 <_strtol_l.constprop.0+0xbe>
 800cee8:	3c57      	subs	r4, #87	; 0x57
 800ceea:	e7dd      	b.n	800cea8 <_strtol_l.constprop.0+0x74>
 800ceec:	f04f 37ff 	mov.w	r7, #4294967295
 800cef0:	e7e6      	b.n	800cec0 <_strtol_l.constprop.0+0x8c>
 800cef2:	2f00      	cmp	r7, #0
 800cef4:	da07      	bge.n	800cf06 <_strtol_l.constprop.0+0xd2>
 800cef6:	2322      	movs	r3, #34	; 0x22
 800cef8:	4670      	mov	r0, lr
 800cefa:	f8c8 3000 	str.w	r3, [r8]
 800cefe:	2a00      	cmp	r2, #0
 800cf00:	d0a4      	beq.n	800ce4c <_strtol_l.constprop.0+0x18>
 800cf02:	1e69      	subs	r1, r5, #1
 800cf04:	e005      	b.n	800cf12 <_strtol_l.constprop.0+0xde>
 800cf06:	b106      	cbz	r6, 800cf0a <_strtol_l.constprop.0+0xd6>
 800cf08:	4240      	negs	r0, r0
 800cf0a:	2a00      	cmp	r2, #0
 800cf0c:	d09e      	beq.n	800ce4c <_strtol_l.constprop.0+0x18>
 800cf0e:	2f00      	cmp	r7, #0
 800cf10:	d1f7      	bne.n	800cf02 <_strtol_l.constprop.0+0xce>
 800cf12:	6011      	str	r1, [r2, #0]
 800cf14:	e79a      	b.n	800ce4c <_strtol_l.constprop.0+0x18>
 800cf16:	2430      	movs	r4, #48	; 0x30
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1b5      	bne.n	800ce88 <_strtol_l.constprop.0+0x54>
 800cf1c:	2308      	movs	r3, #8
 800cf1e:	e7b3      	b.n	800ce88 <_strtol_l.constprop.0+0x54>
 800cf20:	2c30      	cmp	r4, #48	; 0x30
 800cf22:	d0a9      	beq.n	800ce78 <_strtol_l.constprop.0+0x44>
 800cf24:	230a      	movs	r3, #10
 800cf26:	e7af      	b.n	800ce88 <_strtol_l.constprop.0+0x54>
 800cf28:	080117b9 	.word	0x080117b9

0800cf2c <_strtol_r>:
 800cf2c:	f7ff bf82 	b.w	800ce34 <_strtol_l.constprop.0>

0800cf30 <quorem>:
 800cf30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	6903      	ldr	r3, [r0, #16]
 800cf36:	690c      	ldr	r4, [r1, #16]
 800cf38:	4607      	mov	r7, r0
 800cf3a:	42a3      	cmp	r3, r4
 800cf3c:	f2c0 8082 	blt.w	800d044 <quorem+0x114>
 800cf40:	3c01      	subs	r4, #1
 800cf42:	f100 0514 	add.w	r5, r0, #20
 800cf46:	f101 0814 	add.w	r8, r1, #20
 800cf4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf68:	d331      	bcc.n	800cfce <quorem+0x9e>
 800cf6a:	f04f 0e00 	mov.w	lr, #0
 800cf6e:	4640      	mov	r0, r8
 800cf70:	46ac      	mov	ip, r5
 800cf72:	46f2      	mov	sl, lr
 800cf74:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf78:	b293      	uxth	r3, r2
 800cf7a:	fb06 e303 	mla	r3, r6, r3, lr
 800cf7e:	0c12      	lsrs	r2, r2, #16
 800cf80:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	fb06 e202 	mla	r2, r6, r2, lr
 800cf8a:	ebaa 0303 	sub.w	r3, sl, r3
 800cf8e:	f8dc a000 	ldr.w	sl, [ip]
 800cf92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf96:	fa1f fa8a 	uxth.w	sl, sl
 800cf9a:	4453      	add	r3, sl
 800cf9c:	f8dc a000 	ldr.w	sl, [ip]
 800cfa0:	b292      	uxth	r2, r2
 800cfa2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cfa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfb0:	4581      	cmp	r9, r0
 800cfb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cfb6:	f84c 3b04 	str.w	r3, [ip], #4
 800cfba:	d2db      	bcs.n	800cf74 <quorem+0x44>
 800cfbc:	f855 300b 	ldr.w	r3, [r5, fp]
 800cfc0:	b92b      	cbnz	r3, 800cfce <quorem+0x9e>
 800cfc2:	9b01      	ldr	r3, [sp, #4]
 800cfc4:	3b04      	subs	r3, #4
 800cfc6:	429d      	cmp	r5, r3
 800cfc8:	461a      	mov	r2, r3
 800cfca:	d32f      	bcc.n	800d02c <quorem+0xfc>
 800cfcc:	613c      	str	r4, [r7, #16]
 800cfce:	4638      	mov	r0, r7
 800cfd0:	f001 fc82 	bl	800e8d8 <__mcmp>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	db25      	blt.n	800d024 <quorem+0xf4>
 800cfd8:	4628      	mov	r0, r5
 800cfda:	f04f 0c00 	mov.w	ip, #0
 800cfde:	3601      	adds	r6, #1
 800cfe0:	f858 1b04 	ldr.w	r1, [r8], #4
 800cfe4:	f8d0 e000 	ldr.w	lr, [r0]
 800cfe8:	b28b      	uxth	r3, r1
 800cfea:	ebac 0303 	sub.w	r3, ip, r3
 800cfee:	fa1f f28e 	uxth.w	r2, lr
 800cff2:	4413      	add	r3, r2
 800cff4:	0c0a      	lsrs	r2, r1, #16
 800cff6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cffe:	b29b      	uxth	r3, r3
 800d000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d004:	45c1      	cmp	r9, r8
 800d006:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d00a:	f840 3b04 	str.w	r3, [r0], #4
 800d00e:	d2e7      	bcs.n	800cfe0 <quorem+0xb0>
 800d010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d014:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d018:	b922      	cbnz	r2, 800d024 <quorem+0xf4>
 800d01a:	3b04      	subs	r3, #4
 800d01c:	429d      	cmp	r5, r3
 800d01e:	461a      	mov	r2, r3
 800d020:	d30a      	bcc.n	800d038 <quorem+0x108>
 800d022:	613c      	str	r4, [r7, #16]
 800d024:	4630      	mov	r0, r6
 800d026:	b003      	add	sp, #12
 800d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02c:	6812      	ldr	r2, [r2, #0]
 800d02e:	3b04      	subs	r3, #4
 800d030:	2a00      	cmp	r2, #0
 800d032:	d1cb      	bne.n	800cfcc <quorem+0x9c>
 800d034:	3c01      	subs	r4, #1
 800d036:	e7c6      	b.n	800cfc6 <quorem+0x96>
 800d038:	6812      	ldr	r2, [r2, #0]
 800d03a:	3b04      	subs	r3, #4
 800d03c:	2a00      	cmp	r2, #0
 800d03e:	d1f0      	bne.n	800d022 <quorem+0xf2>
 800d040:	3c01      	subs	r4, #1
 800d042:	e7eb      	b.n	800d01c <quorem+0xec>
 800d044:	2000      	movs	r0, #0
 800d046:	e7ee      	b.n	800d026 <quorem+0xf6>

0800d048 <_dtoa_r>:
 800d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04c:	4616      	mov	r6, r2
 800d04e:	461f      	mov	r7, r3
 800d050:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d052:	b099      	sub	sp, #100	; 0x64
 800d054:	4605      	mov	r5, r0
 800d056:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d05a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d05e:	b974      	cbnz	r4, 800d07e <_dtoa_r+0x36>
 800d060:	2010      	movs	r0, #16
 800d062:	f001 f949 	bl	800e2f8 <malloc>
 800d066:	4602      	mov	r2, r0
 800d068:	6268      	str	r0, [r5, #36]	; 0x24
 800d06a:	b920      	cbnz	r0, 800d076 <_dtoa_r+0x2e>
 800d06c:	21ea      	movs	r1, #234	; 0xea
 800d06e:	4ba8      	ldr	r3, [pc, #672]	; (800d310 <_dtoa_r+0x2c8>)
 800d070:	48a8      	ldr	r0, [pc, #672]	; (800d314 <_dtoa_r+0x2cc>)
 800d072:	f002 f8a5 	bl	800f1c0 <__assert_func>
 800d076:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d07a:	6004      	str	r4, [r0, #0]
 800d07c:	60c4      	str	r4, [r0, #12]
 800d07e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d080:	6819      	ldr	r1, [r3, #0]
 800d082:	b151      	cbz	r1, 800d09a <_dtoa_r+0x52>
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	2301      	movs	r3, #1
 800d088:	4093      	lsls	r3, r2
 800d08a:	604a      	str	r2, [r1, #4]
 800d08c:	608b      	str	r3, [r1, #8]
 800d08e:	4628      	mov	r0, r5
 800d090:	f001 f99a 	bl	800e3c8 <_Bfree>
 800d094:	2200      	movs	r2, #0
 800d096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d098:	601a      	str	r2, [r3, #0]
 800d09a:	1e3b      	subs	r3, r7, #0
 800d09c:	bfaf      	iteee	ge
 800d09e:	2300      	movge	r3, #0
 800d0a0:	2201      	movlt	r2, #1
 800d0a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d0a6:	9305      	strlt	r3, [sp, #20]
 800d0a8:	bfa8      	it	ge
 800d0aa:	f8c8 3000 	strge.w	r3, [r8]
 800d0ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d0b2:	4b99      	ldr	r3, [pc, #612]	; (800d318 <_dtoa_r+0x2d0>)
 800d0b4:	bfb8      	it	lt
 800d0b6:	f8c8 2000 	strlt.w	r2, [r8]
 800d0ba:	ea33 0309 	bics.w	r3, r3, r9
 800d0be:	d119      	bne.n	800d0f4 <_dtoa_r+0xac>
 800d0c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0cc:	4333      	orrs	r3, r6
 800d0ce:	f000 857f 	beq.w	800dbd0 <_dtoa_r+0xb88>
 800d0d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d0d4:	b953      	cbnz	r3, 800d0ec <_dtoa_r+0xa4>
 800d0d6:	4b91      	ldr	r3, [pc, #580]	; (800d31c <_dtoa_r+0x2d4>)
 800d0d8:	e022      	b.n	800d120 <_dtoa_r+0xd8>
 800d0da:	4b91      	ldr	r3, [pc, #580]	; (800d320 <_dtoa_r+0x2d8>)
 800d0dc:	9303      	str	r3, [sp, #12]
 800d0de:	3308      	adds	r3, #8
 800d0e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	9803      	ldr	r0, [sp, #12]
 800d0e6:	b019      	add	sp, #100	; 0x64
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	4b8b      	ldr	r3, [pc, #556]	; (800d31c <_dtoa_r+0x2d4>)
 800d0ee:	9303      	str	r3, [sp, #12]
 800d0f0:	3303      	adds	r3, #3
 800d0f2:	e7f5      	b.n	800d0e0 <_dtoa_r+0x98>
 800d0f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d0f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d0fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d100:	2200      	movs	r2, #0
 800d102:	2300      	movs	r3, #0
 800d104:	f7f3 fcc0 	bl	8000a88 <__aeabi_dcmpeq>
 800d108:	4680      	mov	r8, r0
 800d10a:	b158      	cbz	r0, 800d124 <_dtoa_r+0xdc>
 800d10c:	2301      	movs	r3, #1
 800d10e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d110:	6013      	str	r3, [r2, #0]
 800d112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 8558 	beq.w	800dbca <_dtoa_r+0xb82>
 800d11a:	4882      	ldr	r0, [pc, #520]	; (800d324 <_dtoa_r+0x2dc>)
 800d11c:	6018      	str	r0, [r3, #0]
 800d11e:	1e43      	subs	r3, r0, #1
 800d120:	9303      	str	r3, [sp, #12]
 800d122:	e7df      	b.n	800d0e4 <_dtoa_r+0x9c>
 800d124:	ab16      	add	r3, sp, #88	; 0x58
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	ab17      	add	r3, sp, #92	; 0x5c
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	4628      	mov	r0, r5
 800d12e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d132:	f001 fcf3 	bl	800eb1c <__d2b>
 800d136:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d13a:	4683      	mov	fp, r0
 800d13c:	2c00      	cmp	r4, #0
 800d13e:	d07f      	beq.n	800d240 <_dtoa_r+0x1f8>
 800d140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d146:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d14a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d14e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d152:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d156:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d15a:	2200      	movs	r2, #0
 800d15c:	4b72      	ldr	r3, [pc, #456]	; (800d328 <_dtoa_r+0x2e0>)
 800d15e:	f7f3 f873 	bl	8000248 <__aeabi_dsub>
 800d162:	a365      	add	r3, pc, #404	; (adr r3, 800d2f8 <_dtoa_r+0x2b0>)
 800d164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d168:	f7f3 fa26 	bl	80005b8 <__aeabi_dmul>
 800d16c:	a364      	add	r3, pc, #400	; (adr r3, 800d300 <_dtoa_r+0x2b8>)
 800d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d172:	f7f3 f86b 	bl	800024c <__adddf3>
 800d176:	4606      	mov	r6, r0
 800d178:	4620      	mov	r0, r4
 800d17a:	460f      	mov	r7, r1
 800d17c:	f7f3 f9b2 	bl	80004e4 <__aeabi_i2d>
 800d180:	a361      	add	r3, pc, #388	; (adr r3, 800d308 <_dtoa_r+0x2c0>)
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	f7f3 fa17 	bl	80005b8 <__aeabi_dmul>
 800d18a:	4602      	mov	r2, r0
 800d18c:	460b      	mov	r3, r1
 800d18e:	4630      	mov	r0, r6
 800d190:	4639      	mov	r1, r7
 800d192:	f7f3 f85b 	bl	800024c <__adddf3>
 800d196:	4606      	mov	r6, r0
 800d198:	460f      	mov	r7, r1
 800d19a:	f7f3 fcbd 	bl	8000b18 <__aeabi_d2iz>
 800d19e:	2200      	movs	r2, #0
 800d1a0:	4682      	mov	sl, r0
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	f7f3 fc78 	bl	8000a9c <__aeabi_dcmplt>
 800d1ac:	b148      	cbz	r0, 800d1c2 <_dtoa_r+0x17a>
 800d1ae:	4650      	mov	r0, sl
 800d1b0:	f7f3 f998 	bl	80004e4 <__aeabi_i2d>
 800d1b4:	4632      	mov	r2, r6
 800d1b6:	463b      	mov	r3, r7
 800d1b8:	f7f3 fc66 	bl	8000a88 <__aeabi_dcmpeq>
 800d1bc:	b908      	cbnz	r0, 800d1c2 <_dtoa_r+0x17a>
 800d1be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1c2:	f1ba 0f16 	cmp.w	sl, #22
 800d1c6:	d858      	bhi.n	800d27a <_dtoa_r+0x232>
 800d1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d1cc:	4b57      	ldr	r3, [pc, #348]	; (800d32c <_dtoa_r+0x2e4>)
 800d1ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f7f3 fc61 	bl	8000a9c <__aeabi_dcmplt>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d04f      	beq.n	800d27e <_dtoa_r+0x236>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d1e8:	1b1c      	subs	r4, r3, r4
 800d1ea:	1e63      	subs	r3, r4, #1
 800d1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ee:	bf49      	itett	mi
 800d1f0:	f1c4 0301 	rsbmi	r3, r4, #1
 800d1f4:	2300      	movpl	r3, #0
 800d1f6:	9306      	strmi	r3, [sp, #24]
 800d1f8:	2300      	movmi	r3, #0
 800d1fa:	bf54      	ite	pl
 800d1fc:	9306      	strpl	r3, [sp, #24]
 800d1fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d200:	f1ba 0f00 	cmp.w	sl, #0
 800d204:	db3d      	blt.n	800d282 <_dtoa_r+0x23a>
 800d206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d208:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d20c:	4453      	add	r3, sl
 800d20e:	9309      	str	r3, [sp, #36]	; 0x24
 800d210:	2300      	movs	r3, #0
 800d212:	930a      	str	r3, [sp, #40]	; 0x28
 800d214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d216:	2b09      	cmp	r3, #9
 800d218:	f200 808c 	bhi.w	800d334 <_dtoa_r+0x2ec>
 800d21c:	2b05      	cmp	r3, #5
 800d21e:	bfc4      	itt	gt
 800d220:	3b04      	subgt	r3, #4
 800d222:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d226:	bfc8      	it	gt
 800d228:	2400      	movgt	r4, #0
 800d22a:	f1a3 0302 	sub.w	r3, r3, #2
 800d22e:	bfd8      	it	le
 800d230:	2401      	movle	r4, #1
 800d232:	2b03      	cmp	r3, #3
 800d234:	f200 808a 	bhi.w	800d34c <_dtoa_r+0x304>
 800d238:	e8df f003 	tbb	[pc, r3]
 800d23c:	5b4d4f2d 	.word	0x5b4d4f2d
 800d240:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d244:	441c      	add	r4, r3
 800d246:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d24a:	2b20      	cmp	r3, #32
 800d24c:	bfc3      	ittte	gt
 800d24e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d252:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d256:	fa09 f303 	lslgt.w	r3, r9, r3
 800d25a:	f1c3 0320 	rsble	r3, r3, #32
 800d25e:	bfc6      	itte	gt
 800d260:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d264:	4318      	orrgt	r0, r3
 800d266:	fa06 f003 	lslle.w	r0, r6, r3
 800d26a:	f7f3 f92b 	bl	80004c4 <__aeabi_ui2d>
 800d26e:	2301      	movs	r3, #1
 800d270:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d274:	3c01      	subs	r4, #1
 800d276:	9313      	str	r3, [sp, #76]	; 0x4c
 800d278:	e76f      	b.n	800d15a <_dtoa_r+0x112>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e7b2      	b.n	800d1e4 <_dtoa_r+0x19c>
 800d27e:	900f      	str	r0, [sp, #60]	; 0x3c
 800d280:	e7b1      	b.n	800d1e6 <_dtoa_r+0x19e>
 800d282:	9b06      	ldr	r3, [sp, #24]
 800d284:	eba3 030a 	sub.w	r3, r3, sl
 800d288:	9306      	str	r3, [sp, #24]
 800d28a:	f1ca 0300 	rsb	r3, sl, #0
 800d28e:	930a      	str	r3, [sp, #40]	; 0x28
 800d290:	2300      	movs	r3, #0
 800d292:	930e      	str	r3, [sp, #56]	; 0x38
 800d294:	e7be      	b.n	800d214 <_dtoa_r+0x1cc>
 800d296:	2300      	movs	r3, #0
 800d298:	930b      	str	r3, [sp, #44]	; 0x2c
 800d29a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	dc58      	bgt.n	800d352 <_dtoa_r+0x30a>
 800d2a0:	f04f 0901 	mov.w	r9, #1
 800d2a4:	464b      	mov	r3, r9
 800d2a6:	f8cd 9020 	str.w	r9, [sp, #32]
 800d2aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d2b2:	6042      	str	r2, [r0, #4]
 800d2b4:	2204      	movs	r2, #4
 800d2b6:	f102 0614 	add.w	r6, r2, #20
 800d2ba:	429e      	cmp	r6, r3
 800d2bc:	6841      	ldr	r1, [r0, #4]
 800d2be:	d94e      	bls.n	800d35e <_dtoa_r+0x316>
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	f001 f841 	bl	800e348 <_Balloc>
 800d2c6:	9003      	str	r0, [sp, #12]
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d14c      	bne.n	800d366 <_dtoa_r+0x31e>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d2d2:	4b17      	ldr	r3, [pc, #92]	; (800d330 <_dtoa_r+0x2e8>)
 800d2d4:	e6cc      	b.n	800d070 <_dtoa_r+0x28>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e7de      	b.n	800d298 <_dtoa_r+0x250>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d2e0:	eb0a 0903 	add.w	r9, sl, r3
 800d2e4:	f109 0301 	add.w	r3, r9, #1
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	9308      	str	r3, [sp, #32]
 800d2ec:	bfb8      	it	lt
 800d2ee:	2301      	movlt	r3, #1
 800d2f0:	e7dd      	b.n	800d2ae <_dtoa_r+0x266>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e7f2      	b.n	800d2dc <_dtoa_r+0x294>
 800d2f6:	bf00      	nop
 800d2f8:	636f4361 	.word	0x636f4361
 800d2fc:	3fd287a7 	.word	0x3fd287a7
 800d300:	8b60c8b3 	.word	0x8b60c8b3
 800d304:	3fc68a28 	.word	0x3fc68a28
 800d308:	509f79fb 	.word	0x509f79fb
 800d30c:	3fd34413 	.word	0x3fd34413
 800d310:	080118c6 	.word	0x080118c6
 800d314:	080118dd 	.word	0x080118dd
 800d318:	7ff00000 	.word	0x7ff00000
 800d31c:	080118c2 	.word	0x080118c2
 800d320:	080118b9 	.word	0x080118b9
 800d324:	08011739 	.word	0x08011739
 800d328:	3ff80000 	.word	0x3ff80000
 800d32c:	08011a48 	.word	0x08011a48
 800d330:	08011938 	.word	0x08011938
 800d334:	2401      	movs	r4, #1
 800d336:	2300      	movs	r3, #0
 800d338:	940b      	str	r4, [sp, #44]	; 0x2c
 800d33a:	9322      	str	r3, [sp, #136]	; 0x88
 800d33c:	f04f 39ff 	mov.w	r9, #4294967295
 800d340:	2200      	movs	r2, #0
 800d342:	2312      	movs	r3, #18
 800d344:	f8cd 9020 	str.w	r9, [sp, #32]
 800d348:	9223      	str	r2, [sp, #140]	; 0x8c
 800d34a:	e7b0      	b.n	800d2ae <_dtoa_r+0x266>
 800d34c:	2301      	movs	r3, #1
 800d34e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d350:	e7f4      	b.n	800d33c <_dtoa_r+0x2f4>
 800d352:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800d356:	464b      	mov	r3, r9
 800d358:	f8cd 9020 	str.w	r9, [sp, #32]
 800d35c:	e7a7      	b.n	800d2ae <_dtoa_r+0x266>
 800d35e:	3101      	adds	r1, #1
 800d360:	6041      	str	r1, [r0, #4]
 800d362:	0052      	lsls	r2, r2, #1
 800d364:	e7a7      	b.n	800d2b6 <_dtoa_r+0x26e>
 800d366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d368:	9a03      	ldr	r2, [sp, #12]
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	9b08      	ldr	r3, [sp, #32]
 800d36e:	2b0e      	cmp	r3, #14
 800d370:	f200 80a8 	bhi.w	800d4c4 <_dtoa_r+0x47c>
 800d374:	2c00      	cmp	r4, #0
 800d376:	f000 80a5 	beq.w	800d4c4 <_dtoa_r+0x47c>
 800d37a:	f1ba 0f00 	cmp.w	sl, #0
 800d37e:	dd34      	ble.n	800d3ea <_dtoa_r+0x3a2>
 800d380:	4a9a      	ldr	r2, [pc, #616]	; (800d5ec <_dtoa_r+0x5a4>)
 800d382:	f00a 030f 	and.w	r3, sl, #15
 800d386:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d38a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d38e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d392:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d396:	ea4f 142a 	mov.w	r4, sl, asr #4
 800d39a:	d016      	beq.n	800d3ca <_dtoa_r+0x382>
 800d39c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3a0:	4b93      	ldr	r3, [pc, #588]	; (800d5f0 <_dtoa_r+0x5a8>)
 800d3a2:	2703      	movs	r7, #3
 800d3a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d3a8:	f7f3 fa30 	bl	800080c <__aeabi_ddiv>
 800d3ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3b0:	f004 040f 	and.w	r4, r4, #15
 800d3b4:	4e8e      	ldr	r6, [pc, #568]	; (800d5f0 <_dtoa_r+0x5a8>)
 800d3b6:	b954      	cbnz	r4, 800d3ce <_dtoa_r+0x386>
 800d3b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3c0:	f7f3 fa24 	bl	800080c <__aeabi_ddiv>
 800d3c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3c8:	e029      	b.n	800d41e <_dtoa_r+0x3d6>
 800d3ca:	2702      	movs	r7, #2
 800d3cc:	e7f2      	b.n	800d3b4 <_dtoa_r+0x36c>
 800d3ce:	07e1      	lsls	r1, r4, #31
 800d3d0:	d508      	bpl.n	800d3e4 <_dtoa_r+0x39c>
 800d3d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d3d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d3da:	f7f3 f8ed 	bl	80005b8 <__aeabi_dmul>
 800d3de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d3e2:	3701      	adds	r7, #1
 800d3e4:	1064      	asrs	r4, r4, #1
 800d3e6:	3608      	adds	r6, #8
 800d3e8:	e7e5      	b.n	800d3b6 <_dtoa_r+0x36e>
 800d3ea:	f000 80a5 	beq.w	800d538 <_dtoa_r+0x4f0>
 800d3ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3f2:	f1ca 0400 	rsb	r4, sl, #0
 800d3f6:	4b7d      	ldr	r3, [pc, #500]	; (800d5ec <_dtoa_r+0x5a4>)
 800d3f8:	f004 020f 	and.w	r2, r4, #15
 800d3fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d404:	f7f3 f8d8 	bl	80005b8 <__aeabi_dmul>
 800d408:	2702      	movs	r7, #2
 800d40a:	2300      	movs	r3, #0
 800d40c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d410:	4e77      	ldr	r6, [pc, #476]	; (800d5f0 <_dtoa_r+0x5a8>)
 800d412:	1124      	asrs	r4, r4, #4
 800d414:	2c00      	cmp	r4, #0
 800d416:	f040 8084 	bne.w	800d522 <_dtoa_r+0x4da>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1d2      	bne.n	800d3c4 <_dtoa_r+0x37c>
 800d41e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d420:	2b00      	cmp	r3, #0
 800d422:	f000 808b 	beq.w	800d53c <_dtoa_r+0x4f4>
 800d426:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d42a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d42e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d432:	2200      	movs	r2, #0
 800d434:	4b6f      	ldr	r3, [pc, #444]	; (800d5f4 <_dtoa_r+0x5ac>)
 800d436:	f7f3 fb31 	bl	8000a9c <__aeabi_dcmplt>
 800d43a:	2800      	cmp	r0, #0
 800d43c:	d07e      	beq.n	800d53c <_dtoa_r+0x4f4>
 800d43e:	9b08      	ldr	r3, [sp, #32]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d07b      	beq.n	800d53c <_dtoa_r+0x4f4>
 800d444:	f1b9 0f00 	cmp.w	r9, #0
 800d448:	dd38      	ble.n	800d4bc <_dtoa_r+0x474>
 800d44a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d44e:	2200      	movs	r2, #0
 800d450:	4b69      	ldr	r3, [pc, #420]	; (800d5f8 <_dtoa_r+0x5b0>)
 800d452:	f7f3 f8b1 	bl	80005b8 <__aeabi_dmul>
 800d456:	464c      	mov	r4, r9
 800d458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d45c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800d460:	3701      	adds	r7, #1
 800d462:	4638      	mov	r0, r7
 800d464:	f7f3 f83e 	bl	80004e4 <__aeabi_i2d>
 800d468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d46c:	f7f3 f8a4 	bl	80005b8 <__aeabi_dmul>
 800d470:	2200      	movs	r2, #0
 800d472:	4b62      	ldr	r3, [pc, #392]	; (800d5fc <_dtoa_r+0x5b4>)
 800d474:	f7f2 feea 	bl	800024c <__adddf3>
 800d478:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d47c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d480:	9611      	str	r6, [sp, #68]	; 0x44
 800d482:	2c00      	cmp	r4, #0
 800d484:	d15d      	bne.n	800d542 <_dtoa_r+0x4fa>
 800d486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d48a:	2200      	movs	r2, #0
 800d48c:	4b5c      	ldr	r3, [pc, #368]	; (800d600 <_dtoa_r+0x5b8>)
 800d48e:	f7f2 fedb 	bl	8000248 <__aeabi_dsub>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d49a:	4633      	mov	r3, r6
 800d49c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d49e:	f7f3 fb1b 	bl	8000ad8 <__aeabi_dcmpgt>
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	f040 829c 	bne.w	800d9e0 <_dtoa_r+0x998>
 800d4a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d4ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d4b2:	f7f3 faf3 	bl	8000a9c <__aeabi_dcmplt>
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	f040 8290 	bne.w	800d9dc <_dtoa_r+0x994>
 800d4bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d4c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f2c0 8152 	blt.w	800d770 <_dtoa_r+0x728>
 800d4cc:	f1ba 0f0e 	cmp.w	sl, #14
 800d4d0:	f300 814e 	bgt.w	800d770 <_dtoa_r+0x728>
 800d4d4:	4b45      	ldr	r3, [pc, #276]	; (800d5ec <_dtoa_r+0x5a4>)
 800d4d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d4da:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d4de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d4e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f280 80db 	bge.w	800d6a0 <_dtoa_r+0x658>
 800d4ea:	9b08      	ldr	r3, [sp, #32]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f300 80d7 	bgt.w	800d6a0 <_dtoa_r+0x658>
 800d4f2:	f040 8272 	bne.w	800d9da <_dtoa_r+0x992>
 800d4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	4b40      	ldr	r3, [pc, #256]	; (800d600 <_dtoa_r+0x5b8>)
 800d4fe:	f7f3 f85b 	bl	80005b8 <__aeabi_dmul>
 800d502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d506:	f7f3 fadd 	bl	8000ac4 <__aeabi_dcmpge>
 800d50a:	9c08      	ldr	r4, [sp, #32]
 800d50c:	4626      	mov	r6, r4
 800d50e:	2800      	cmp	r0, #0
 800d510:	f040 8248 	bne.w	800d9a4 <_dtoa_r+0x95c>
 800d514:	2331      	movs	r3, #49	; 0x31
 800d516:	9f03      	ldr	r7, [sp, #12]
 800d518:	f10a 0a01 	add.w	sl, sl, #1
 800d51c:	f807 3b01 	strb.w	r3, [r7], #1
 800d520:	e244      	b.n	800d9ac <_dtoa_r+0x964>
 800d522:	07e2      	lsls	r2, r4, #31
 800d524:	d505      	bpl.n	800d532 <_dtoa_r+0x4ea>
 800d526:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d52a:	f7f3 f845 	bl	80005b8 <__aeabi_dmul>
 800d52e:	2301      	movs	r3, #1
 800d530:	3701      	adds	r7, #1
 800d532:	1064      	asrs	r4, r4, #1
 800d534:	3608      	adds	r6, #8
 800d536:	e76d      	b.n	800d414 <_dtoa_r+0x3cc>
 800d538:	2702      	movs	r7, #2
 800d53a:	e770      	b.n	800d41e <_dtoa_r+0x3d6>
 800d53c:	46d0      	mov	r8, sl
 800d53e:	9c08      	ldr	r4, [sp, #32]
 800d540:	e78f      	b.n	800d462 <_dtoa_r+0x41a>
 800d542:	9903      	ldr	r1, [sp, #12]
 800d544:	4b29      	ldr	r3, [pc, #164]	; (800d5ec <_dtoa_r+0x5a4>)
 800d546:	4421      	add	r1, r4
 800d548:	9112      	str	r1, [sp, #72]	; 0x48
 800d54a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d54c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d550:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d554:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d558:	2900      	cmp	r1, #0
 800d55a:	d055      	beq.n	800d608 <_dtoa_r+0x5c0>
 800d55c:	2000      	movs	r0, #0
 800d55e:	4929      	ldr	r1, [pc, #164]	; (800d604 <_dtoa_r+0x5bc>)
 800d560:	f7f3 f954 	bl	800080c <__aeabi_ddiv>
 800d564:	463b      	mov	r3, r7
 800d566:	4632      	mov	r2, r6
 800d568:	f7f2 fe6e 	bl	8000248 <__aeabi_dsub>
 800d56c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d570:	9f03      	ldr	r7, [sp, #12]
 800d572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d576:	f7f3 facf 	bl	8000b18 <__aeabi_d2iz>
 800d57a:	4604      	mov	r4, r0
 800d57c:	f7f2 ffb2 	bl	80004e4 <__aeabi_i2d>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d588:	f7f2 fe5e 	bl	8000248 <__aeabi_dsub>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	3430      	adds	r4, #48	; 0x30
 800d592:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d59a:	f807 4b01 	strb.w	r4, [r7], #1
 800d59e:	f7f3 fa7d 	bl	8000a9c <__aeabi_dcmplt>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d174      	bne.n	800d690 <_dtoa_r+0x648>
 800d5a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	4911      	ldr	r1, [pc, #68]	; (800d5f4 <_dtoa_r+0x5ac>)
 800d5ae:	f7f2 fe4b 	bl	8000248 <__aeabi_dsub>
 800d5b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d5b6:	f7f3 fa71 	bl	8000a9c <__aeabi_dcmplt>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	f040 80b7 	bne.w	800d72e <_dtoa_r+0x6e6>
 800d5c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5c2:	429f      	cmp	r7, r3
 800d5c4:	f43f af7a 	beq.w	800d4bc <_dtoa_r+0x474>
 800d5c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	4b0a      	ldr	r3, [pc, #40]	; (800d5f8 <_dtoa_r+0x5b0>)
 800d5d0:	f7f2 fff2 	bl	80005b8 <__aeabi_dmul>
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d5da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5de:	4b06      	ldr	r3, [pc, #24]	; (800d5f8 <_dtoa_r+0x5b0>)
 800d5e0:	f7f2 ffea 	bl	80005b8 <__aeabi_dmul>
 800d5e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5e8:	e7c3      	b.n	800d572 <_dtoa_r+0x52a>
 800d5ea:	bf00      	nop
 800d5ec:	08011a48 	.word	0x08011a48
 800d5f0:	08011a20 	.word	0x08011a20
 800d5f4:	3ff00000 	.word	0x3ff00000
 800d5f8:	40240000 	.word	0x40240000
 800d5fc:	401c0000 	.word	0x401c0000
 800d600:	40140000 	.word	0x40140000
 800d604:	3fe00000 	.word	0x3fe00000
 800d608:	4630      	mov	r0, r6
 800d60a:	4639      	mov	r1, r7
 800d60c:	f7f2 ffd4 	bl	80005b8 <__aeabi_dmul>
 800d610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d612:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d616:	9c03      	ldr	r4, [sp, #12]
 800d618:	9314      	str	r3, [sp, #80]	; 0x50
 800d61a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d61e:	f7f3 fa7b 	bl	8000b18 <__aeabi_d2iz>
 800d622:	9015      	str	r0, [sp, #84]	; 0x54
 800d624:	f7f2 ff5e 	bl	80004e4 <__aeabi_i2d>
 800d628:	4602      	mov	r2, r0
 800d62a:	460b      	mov	r3, r1
 800d62c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d630:	f7f2 fe0a 	bl	8000248 <__aeabi_dsub>
 800d634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d636:	4606      	mov	r6, r0
 800d638:	3330      	adds	r3, #48	; 0x30
 800d63a:	f804 3b01 	strb.w	r3, [r4], #1
 800d63e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d640:	460f      	mov	r7, r1
 800d642:	429c      	cmp	r4, r3
 800d644:	f04f 0200 	mov.w	r2, #0
 800d648:	d124      	bne.n	800d694 <_dtoa_r+0x64c>
 800d64a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d64e:	4bb0      	ldr	r3, [pc, #704]	; (800d910 <_dtoa_r+0x8c8>)
 800d650:	f7f2 fdfc 	bl	800024c <__adddf3>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4630      	mov	r0, r6
 800d65a:	4639      	mov	r1, r7
 800d65c:	f7f3 fa3c 	bl	8000ad8 <__aeabi_dcmpgt>
 800d660:	2800      	cmp	r0, #0
 800d662:	d163      	bne.n	800d72c <_dtoa_r+0x6e4>
 800d664:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d668:	2000      	movs	r0, #0
 800d66a:	49a9      	ldr	r1, [pc, #676]	; (800d910 <_dtoa_r+0x8c8>)
 800d66c:	f7f2 fdec 	bl	8000248 <__aeabi_dsub>
 800d670:	4602      	mov	r2, r0
 800d672:	460b      	mov	r3, r1
 800d674:	4630      	mov	r0, r6
 800d676:	4639      	mov	r1, r7
 800d678:	f7f3 fa10 	bl	8000a9c <__aeabi_dcmplt>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	f43f af1d 	beq.w	800d4bc <_dtoa_r+0x474>
 800d682:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d684:	1e7b      	subs	r3, r7, #1
 800d686:	9314      	str	r3, [sp, #80]	; 0x50
 800d688:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d68c:	2b30      	cmp	r3, #48	; 0x30
 800d68e:	d0f8      	beq.n	800d682 <_dtoa_r+0x63a>
 800d690:	46c2      	mov	sl, r8
 800d692:	e03b      	b.n	800d70c <_dtoa_r+0x6c4>
 800d694:	4b9f      	ldr	r3, [pc, #636]	; (800d914 <_dtoa_r+0x8cc>)
 800d696:	f7f2 ff8f 	bl	80005b8 <__aeabi_dmul>
 800d69a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d69e:	e7bc      	b.n	800d61a <_dtoa_r+0x5d2>
 800d6a0:	9f03      	ldr	r7, [sp, #12]
 800d6a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d6a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6aa:	4640      	mov	r0, r8
 800d6ac:	4649      	mov	r1, r9
 800d6ae:	f7f3 f8ad 	bl	800080c <__aeabi_ddiv>
 800d6b2:	f7f3 fa31 	bl	8000b18 <__aeabi_d2iz>
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	f7f2 ff14 	bl	80004e4 <__aeabi_i2d>
 800d6bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6c0:	f7f2 ff7a 	bl	80005b8 <__aeabi_dmul>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	4640      	mov	r0, r8
 800d6ca:	4649      	mov	r1, r9
 800d6cc:	f7f2 fdbc 	bl	8000248 <__aeabi_dsub>
 800d6d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d6d4:	f807 6b01 	strb.w	r6, [r7], #1
 800d6d8:	9e03      	ldr	r6, [sp, #12]
 800d6da:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d6de:	1bbe      	subs	r6, r7, r6
 800d6e0:	45b4      	cmp	ip, r6
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	d136      	bne.n	800d756 <_dtoa_r+0x70e>
 800d6e8:	f7f2 fdb0 	bl	800024c <__adddf3>
 800d6ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6f0:	4680      	mov	r8, r0
 800d6f2:	4689      	mov	r9, r1
 800d6f4:	f7f3 f9f0 	bl	8000ad8 <__aeabi_dcmpgt>
 800d6f8:	bb58      	cbnz	r0, 800d752 <_dtoa_r+0x70a>
 800d6fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6fe:	4640      	mov	r0, r8
 800d700:	4649      	mov	r1, r9
 800d702:	f7f3 f9c1 	bl	8000a88 <__aeabi_dcmpeq>
 800d706:	b108      	cbz	r0, 800d70c <_dtoa_r+0x6c4>
 800d708:	07e1      	lsls	r1, r4, #31
 800d70a:	d422      	bmi.n	800d752 <_dtoa_r+0x70a>
 800d70c:	4628      	mov	r0, r5
 800d70e:	4659      	mov	r1, fp
 800d710:	f000 fe5a 	bl	800e3c8 <_Bfree>
 800d714:	2300      	movs	r3, #0
 800d716:	703b      	strb	r3, [r7, #0]
 800d718:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d71a:	f10a 0001 	add.w	r0, sl, #1
 800d71e:	6018      	str	r0, [r3, #0]
 800d720:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d722:	2b00      	cmp	r3, #0
 800d724:	f43f acde 	beq.w	800d0e4 <_dtoa_r+0x9c>
 800d728:	601f      	str	r7, [r3, #0]
 800d72a:	e4db      	b.n	800d0e4 <_dtoa_r+0x9c>
 800d72c:	4627      	mov	r7, r4
 800d72e:	463b      	mov	r3, r7
 800d730:	461f      	mov	r7, r3
 800d732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d736:	2a39      	cmp	r2, #57	; 0x39
 800d738:	d107      	bne.n	800d74a <_dtoa_r+0x702>
 800d73a:	9a03      	ldr	r2, [sp, #12]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d1f7      	bne.n	800d730 <_dtoa_r+0x6e8>
 800d740:	2230      	movs	r2, #48	; 0x30
 800d742:	9903      	ldr	r1, [sp, #12]
 800d744:	f108 0801 	add.w	r8, r8, #1
 800d748:	700a      	strb	r2, [r1, #0]
 800d74a:	781a      	ldrb	r2, [r3, #0]
 800d74c:	3201      	adds	r2, #1
 800d74e:	701a      	strb	r2, [r3, #0]
 800d750:	e79e      	b.n	800d690 <_dtoa_r+0x648>
 800d752:	46d0      	mov	r8, sl
 800d754:	e7eb      	b.n	800d72e <_dtoa_r+0x6e6>
 800d756:	2200      	movs	r2, #0
 800d758:	4b6e      	ldr	r3, [pc, #440]	; (800d914 <_dtoa_r+0x8cc>)
 800d75a:	f7f2 ff2d 	bl	80005b8 <__aeabi_dmul>
 800d75e:	2200      	movs	r2, #0
 800d760:	2300      	movs	r3, #0
 800d762:	4680      	mov	r8, r0
 800d764:	4689      	mov	r9, r1
 800d766:	f7f3 f98f 	bl	8000a88 <__aeabi_dcmpeq>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d09b      	beq.n	800d6a6 <_dtoa_r+0x65e>
 800d76e:	e7cd      	b.n	800d70c <_dtoa_r+0x6c4>
 800d770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d772:	2a00      	cmp	r2, #0
 800d774:	f000 80d0 	beq.w	800d918 <_dtoa_r+0x8d0>
 800d778:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d77a:	2a01      	cmp	r2, #1
 800d77c:	f300 80ae 	bgt.w	800d8dc <_dtoa_r+0x894>
 800d780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d782:	2a00      	cmp	r2, #0
 800d784:	f000 80a6 	beq.w	800d8d4 <_dtoa_r+0x88c>
 800d788:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d78c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d78e:	9f06      	ldr	r7, [sp, #24]
 800d790:	9a06      	ldr	r2, [sp, #24]
 800d792:	2101      	movs	r1, #1
 800d794:	441a      	add	r2, r3
 800d796:	9206      	str	r2, [sp, #24]
 800d798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d79a:	4628      	mov	r0, r5
 800d79c:	441a      	add	r2, r3
 800d79e:	9209      	str	r2, [sp, #36]	; 0x24
 800d7a0:	f000 ff12 	bl	800e5c8 <__i2b>
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	2f00      	cmp	r7, #0
 800d7a8:	dd0c      	ble.n	800d7c4 <_dtoa_r+0x77c>
 800d7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	dd09      	ble.n	800d7c4 <_dtoa_r+0x77c>
 800d7b0:	42bb      	cmp	r3, r7
 800d7b2:	bfa8      	it	ge
 800d7b4:	463b      	movge	r3, r7
 800d7b6:	9a06      	ldr	r2, [sp, #24]
 800d7b8:	1aff      	subs	r7, r7, r3
 800d7ba:	1ad2      	subs	r2, r2, r3
 800d7bc:	9206      	str	r2, [sp, #24]
 800d7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7c6:	b1f3      	cbz	r3, 800d806 <_dtoa_r+0x7be>
 800d7c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 80a8 	beq.w	800d920 <_dtoa_r+0x8d8>
 800d7d0:	2c00      	cmp	r4, #0
 800d7d2:	dd10      	ble.n	800d7f6 <_dtoa_r+0x7ae>
 800d7d4:	4631      	mov	r1, r6
 800d7d6:	4622      	mov	r2, r4
 800d7d8:	4628      	mov	r0, r5
 800d7da:	f000 ffb3 	bl	800e744 <__pow5mult>
 800d7de:	465a      	mov	r2, fp
 800d7e0:	4601      	mov	r1, r0
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	f000 ff05 	bl	800e5f4 <__multiply>
 800d7ea:	4680      	mov	r8, r0
 800d7ec:	4659      	mov	r1, fp
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f000 fdea 	bl	800e3c8 <_Bfree>
 800d7f4:	46c3      	mov	fp, r8
 800d7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7f8:	1b1a      	subs	r2, r3, r4
 800d7fa:	d004      	beq.n	800d806 <_dtoa_r+0x7be>
 800d7fc:	4659      	mov	r1, fp
 800d7fe:	4628      	mov	r0, r5
 800d800:	f000 ffa0 	bl	800e744 <__pow5mult>
 800d804:	4683      	mov	fp, r0
 800d806:	2101      	movs	r1, #1
 800d808:	4628      	mov	r0, r5
 800d80a:	f000 fedd 	bl	800e5c8 <__i2b>
 800d80e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d810:	4604      	mov	r4, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	f340 8086 	ble.w	800d924 <_dtoa_r+0x8dc>
 800d818:	461a      	mov	r2, r3
 800d81a:	4601      	mov	r1, r0
 800d81c:	4628      	mov	r0, r5
 800d81e:	f000 ff91 	bl	800e744 <__pow5mult>
 800d822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d824:	4604      	mov	r4, r0
 800d826:	2b01      	cmp	r3, #1
 800d828:	dd7f      	ble.n	800d92a <_dtoa_r+0x8e2>
 800d82a:	f04f 0800 	mov.w	r8, #0
 800d82e:	6923      	ldr	r3, [r4, #16]
 800d830:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d834:	6918      	ldr	r0, [r3, #16]
 800d836:	f000 fe79 	bl	800e52c <__hi0bits>
 800d83a:	f1c0 0020 	rsb	r0, r0, #32
 800d83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d840:	4418      	add	r0, r3
 800d842:	f010 001f 	ands.w	r0, r0, #31
 800d846:	f000 8092 	beq.w	800d96e <_dtoa_r+0x926>
 800d84a:	f1c0 0320 	rsb	r3, r0, #32
 800d84e:	2b04      	cmp	r3, #4
 800d850:	f340 808a 	ble.w	800d968 <_dtoa_r+0x920>
 800d854:	f1c0 001c 	rsb	r0, r0, #28
 800d858:	9b06      	ldr	r3, [sp, #24]
 800d85a:	4407      	add	r7, r0
 800d85c:	4403      	add	r3, r0
 800d85e:	9306      	str	r3, [sp, #24]
 800d860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d862:	4403      	add	r3, r0
 800d864:	9309      	str	r3, [sp, #36]	; 0x24
 800d866:	9b06      	ldr	r3, [sp, #24]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	dd05      	ble.n	800d878 <_dtoa_r+0x830>
 800d86c:	4659      	mov	r1, fp
 800d86e:	461a      	mov	r2, r3
 800d870:	4628      	mov	r0, r5
 800d872:	f000 ffc1 	bl	800e7f8 <__lshift>
 800d876:	4683      	mov	fp, r0
 800d878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	dd05      	ble.n	800d88a <_dtoa_r+0x842>
 800d87e:	4621      	mov	r1, r4
 800d880:	461a      	mov	r2, r3
 800d882:	4628      	mov	r0, r5
 800d884:	f000 ffb8 	bl	800e7f8 <__lshift>
 800d888:	4604      	mov	r4, r0
 800d88a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d070      	beq.n	800d972 <_dtoa_r+0x92a>
 800d890:	4621      	mov	r1, r4
 800d892:	4658      	mov	r0, fp
 800d894:	f001 f820 	bl	800e8d8 <__mcmp>
 800d898:	2800      	cmp	r0, #0
 800d89a:	da6a      	bge.n	800d972 <_dtoa_r+0x92a>
 800d89c:	2300      	movs	r3, #0
 800d89e:	4659      	mov	r1, fp
 800d8a0:	220a      	movs	r2, #10
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	f000 fdb2 	bl	800e40c <__multadd>
 800d8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8aa:	4683      	mov	fp, r0
 800d8ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f000 8194 	beq.w	800dbde <_dtoa_r+0xb96>
 800d8b6:	4631      	mov	r1, r6
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	220a      	movs	r2, #10
 800d8bc:	4628      	mov	r0, r5
 800d8be:	f000 fda5 	bl	800e40c <__multadd>
 800d8c2:	f1b9 0f00 	cmp.w	r9, #0
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	f300 8093 	bgt.w	800d9f2 <_dtoa_r+0x9aa>
 800d8cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	dc57      	bgt.n	800d982 <_dtoa_r+0x93a>
 800d8d2:	e08e      	b.n	800d9f2 <_dtoa_r+0x9aa>
 800d8d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d8d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d8da:	e757      	b.n	800d78c <_dtoa_r+0x744>
 800d8dc:	9b08      	ldr	r3, [sp, #32]
 800d8de:	1e5c      	subs	r4, r3, #1
 800d8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8e2:	42a3      	cmp	r3, r4
 800d8e4:	bfb7      	itett	lt
 800d8e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d8e8:	1b1c      	subge	r4, r3, r4
 800d8ea:	1ae2      	sublt	r2, r4, r3
 800d8ec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d8ee:	bfbe      	ittt	lt
 800d8f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d8f2:	189b      	addlt	r3, r3, r2
 800d8f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d8f6:	9b08      	ldr	r3, [sp, #32]
 800d8f8:	bfb8      	it	lt
 800d8fa:	2400      	movlt	r4, #0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	bfbb      	ittet	lt
 800d900:	9b06      	ldrlt	r3, [sp, #24]
 800d902:	9a08      	ldrlt	r2, [sp, #32]
 800d904:	9f06      	ldrge	r7, [sp, #24]
 800d906:	1a9f      	sublt	r7, r3, r2
 800d908:	bfac      	ite	ge
 800d90a:	9b08      	ldrge	r3, [sp, #32]
 800d90c:	2300      	movlt	r3, #0
 800d90e:	e73f      	b.n	800d790 <_dtoa_r+0x748>
 800d910:	3fe00000 	.word	0x3fe00000
 800d914:	40240000 	.word	0x40240000
 800d918:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d91a:	9f06      	ldr	r7, [sp, #24]
 800d91c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d91e:	e742      	b.n	800d7a6 <_dtoa_r+0x75e>
 800d920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d922:	e76b      	b.n	800d7fc <_dtoa_r+0x7b4>
 800d924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d926:	2b01      	cmp	r3, #1
 800d928:	dc19      	bgt.n	800d95e <_dtoa_r+0x916>
 800d92a:	9b04      	ldr	r3, [sp, #16]
 800d92c:	b9bb      	cbnz	r3, 800d95e <_dtoa_r+0x916>
 800d92e:	9b05      	ldr	r3, [sp, #20]
 800d930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d934:	b99b      	cbnz	r3, 800d95e <_dtoa_r+0x916>
 800d936:	9b05      	ldr	r3, [sp, #20]
 800d938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d93c:	0d1b      	lsrs	r3, r3, #20
 800d93e:	051b      	lsls	r3, r3, #20
 800d940:	b183      	cbz	r3, 800d964 <_dtoa_r+0x91c>
 800d942:	f04f 0801 	mov.w	r8, #1
 800d946:	9b06      	ldr	r3, [sp, #24]
 800d948:	3301      	adds	r3, #1
 800d94a:	9306      	str	r3, [sp, #24]
 800d94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d94e:	3301      	adds	r3, #1
 800d950:	9309      	str	r3, [sp, #36]	; 0x24
 800d952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d954:	2b00      	cmp	r3, #0
 800d956:	f47f af6a 	bne.w	800d82e <_dtoa_r+0x7e6>
 800d95a:	2001      	movs	r0, #1
 800d95c:	e76f      	b.n	800d83e <_dtoa_r+0x7f6>
 800d95e:	f04f 0800 	mov.w	r8, #0
 800d962:	e7f6      	b.n	800d952 <_dtoa_r+0x90a>
 800d964:	4698      	mov	r8, r3
 800d966:	e7f4      	b.n	800d952 <_dtoa_r+0x90a>
 800d968:	f43f af7d 	beq.w	800d866 <_dtoa_r+0x81e>
 800d96c:	4618      	mov	r0, r3
 800d96e:	301c      	adds	r0, #28
 800d970:	e772      	b.n	800d858 <_dtoa_r+0x810>
 800d972:	9b08      	ldr	r3, [sp, #32]
 800d974:	2b00      	cmp	r3, #0
 800d976:	dc36      	bgt.n	800d9e6 <_dtoa_r+0x99e>
 800d978:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	dd33      	ble.n	800d9e6 <_dtoa_r+0x99e>
 800d97e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d982:	f1b9 0f00 	cmp.w	r9, #0
 800d986:	d10d      	bne.n	800d9a4 <_dtoa_r+0x95c>
 800d988:	4621      	mov	r1, r4
 800d98a:	464b      	mov	r3, r9
 800d98c:	2205      	movs	r2, #5
 800d98e:	4628      	mov	r0, r5
 800d990:	f000 fd3c 	bl	800e40c <__multadd>
 800d994:	4601      	mov	r1, r0
 800d996:	4604      	mov	r4, r0
 800d998:	4658      	mov	r0, fp
 800d99a:	f000 ff9d 	bl	800e8d8 <__mcmp>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	f73f adb8 	bgt.w	800d514 <_dtoa_r+0x4cc>
 800d9a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d9a6:	9f03      	ldr	r7, [sp, #12]
 800d9a8:	ea6f 0a03 	mvn.w	sl, r3
 800d9ac:	f04f 0800 	mov.w	r8, #0
 800d9b0:	4621      	mov	r1, r4
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f000 fd08 	bl	800e3c8 <_Bfree>
 800d9b8:	2e00      	cmp	r6, #0
 800d9ba:	f43f aea7 	beq.w	800d70c <_dtoa_r+0x6c4>
 800d9be:	f1b8 0f00 	cmp.w	r8, #0
 800d9c2:	d005      	beq.n	800d9d0 <_dtoa_r+0x988>
 800d9c4:	45b0      	cmp	r8, r6
 800d9c6:	d003      	beq.n	800d9d0 <_dtoa_r+0x988>
 800d9c8:	4641      	mov	r1, r8
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f000 fcfc 	bl	800e3c8 <_Bfree>
 800d9d0:	4631      	mov	r1, r6
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	f000 fcf8 	bl	800e3c8 <_Bfree>
 800d9d8:	e698      	b.n	800d70c <_dtoa_r+0x6c4>
 800d9da:	2400      	movs	r4, #0
 800d9dc:	4626      	mov	r6, r4
 800d9de:	e7e1      	b.n	800d9a4 <_dtoa_r+0x95c>
 800d9e0:	46c2      	mov	sl, r8
 800d9e2:	4626      	mov	r6, r4
 800d9e4:	e596      	b.n	800d514 <_dtoa_r+0x4cc>
 800d9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f000 80fd 	beq.w	800dbec <_dtoa_r+0xba4>
 800d9f2:	2f00      	cmp	r7, #0
 800d9f4:	dd05      	ble.n	800da02 <_dtoa_r+0x9ba>
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	463a      	mov	r2, r7
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	f000 fefc 	bl	800e7f8 <__lshift>
 800da00:	4606      	mov	r6, r0
 800da02:	f1b8 0f00 	cmp.w	r8, #0
 800da06:	d05c      	beq.n	800dac2 <_dtoa_r+0xa7a>
 800da08:	4628      	mov	r0, r5
 800da0a:	6871      	ldr	r1, [r6, #4]
 800da0c:	f000 fc9c 	bl	800e348 <_Balloc>
 800da10:	4607      	mov	r7, r0
 800da12:	b928      	cbnz	r0, 800da20 <_dtoa_r+0x9d8>
 800da14:	4602      	mov	r2, r0
 800da16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800da1a:	4b7f      	ldr	r3, [pc, #508]	; (800dc18 <_dtoa_r+0xbd0>)
 800da1c:	f7ff bb28 	b.w	800d070 <_dtoa_r+0x28>
 800da20:	6932      	ldr	r2, [r6, #16]
 800da22:	f106 010c 	add.w	r1, r6, #12
 800da26:	3202      	adds	r2, #2
 800da28:	0092      	lsls	r2, r2, #2
 800da2a:	300c      	adds	r0, #12
 800da2c:	f7fd fd48 	bl	800b4c0 <memcpy>
 800da30:	2201      	movs	r2, #1
 800da32:	4639      	mov	r1, r7
 800da34:	4628      	mov	r0, r5
 800da36:	f000 fedf 	bl	800e7f8 <__lshift>
 800da3a:	46b0      	mov	r8, r6
 800da3c:	4606      	mov	r6, r0
 800da3e:	9b03      	ldr	r3, [sp, #12]
 800da40:	3301      	adds	r3, #1
 800da42:	9308      	str	r3, [sp, #32]
 800da44:	9b03      	ldr	r3, [sp, #12]
 800da46:	444b      	add	r3, r9
 800da48:	930a      	str	r3, [sp, #40]	; 0x28
 800da4a:	9b04      	ldr	r3, [sp, #16]
 800da4c:	f003 0301 	and.w	r3, r3, #1
 800da50:	9309      	str	r3, [sp, #36]	; 0x24
 800da52:	9b08      	ldr	r3, [sp, #32]
 800da54:	4621      	mov	r1, r4
 800da56:	3b01      	subs	r3, #1
 800da58:	4658      	mov	r0, fp
 800da5a:	9304      	str	r3, [sp, #16]
 800da5c:	f7ff fa68 	bl	800cf30 <quorem>
 800da60:	4603      	mov	r3, r0
 800da62:	4641      	mov	r1, r8
 800da64:	3330      	adds	r3, #48	; 0x30
 800da66:	9006      	str	r0, [sp, #24]
 800da68:	4658      	mov	r0, fp
 800da6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800da6c:	f000 ff34 	bl	800e8d8 <__mcmp>
 800da70:	4632      	mov	r2, r6
 800da72:	4681      	mov	r9, r0
 800da74:	4621      	mov	r1, r4
 800da76:	4628      	mov	r0, r5
 800da78:	f000 ff4a 	bl	800e910 <__mdiff>
 800da7c:	68c2      	ldr	r2, [r0, #12]
 800da7e:	4607      	mov	r7, r0
 800da80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da82:	bb02      	cbnz	r2, 800dac6 <_dtoa_r+0xa7e>
 800da84:	4601      	mov	r1, r0
 800da86:	4658      	mov	r0, fp
 800da88:	f000 ff26 	bl	800e8d8 <__mcmp>
 800da8c:	4602      	mov	r2, r0
 800da8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da90:	4639      	mov	r1, r7
 800da92:	4628      	mov	r0, r5
 800da94:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800da98:	f000 fc96 	bl	800e3c8 <_Bfree>
 800da9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800daa0:	9f08      	ldr	r7, [sp, #32]
 800daa2:	ea43 0102 	orr.w	r1, r3, r2
 800daa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daa8:	430b      	orrs	r3, r1
 800daaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daac:	d10d      	bne.n	800daca <_dtoa_r+0xa82>
 800daae:	2b39      	cmp	r3, #57	; 0x39
 800dab0:	d029      	beq.n	800db06 <_dtoa_r+0xabe>
 800dab2:	f1b9 0f00 	cmp.w	r9, #0
 800dab6:	dd01      	ble.n	800dabc <_dtoa_r+0xa74>
 800dab8:	9b06      	ldr	r3, [sp, #24]
 800daba:	3331      	adds	r3, #49	; 0x31
 800dabc:	9a04      	ldr	r2, [sp, #16]
 800dabe:	7013      	strb	r3, [r2, #0]
 800dac0:	e776      	b.n	800d9b0 <_dtoa_r+0x968>
 800dac2:	4630      	mov	r0, r6
 800dac4:	e7b9      	b.n	800da3a <_dtoa_r+0x9f2>
 800dac6:	2201      	movs	r2, #1
 800dac8:	e7e2      	b.n	800da90 <_dtoa_r+0xa48>
 800daca:	f1b9 0f00 	cmp.w	r9, #0
 800dace:	db06      	blt.n	800dade <_dtoa_r+0xa96>
 800dad0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800dad2:	ea41 0909 	orr.w	r9, r1, r9
 800dad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dad8:	ea59 0101 	orrs.w	r1, r9, r1
 800dadc:	d120      	bne.n	800db20 <_dtoa_r+0xad8>
 800dade:	2a00      	cmp	r2, #0
 800dae0:	ddec      	ble.n	800dabc <_dtoa_r+0xa74>
 800dae2:	4659      	mov	r1, fp
 800dae4:	2201      	movs	r2, #1
 800dae6:	4628      	mov	r0, r5
 800dae8:	9308      	str	r3, [sp, #32]
 800daea:	f000 fe85 	bl	800e7f8 <__lshift>
 800daee:	4621      	mov	r1, r4
 800daf0:	4683      	mov	fp, r0
 800daf2:	f000 fef1 	bl	800e8d8 <__mcmp>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	9b08      	ldr	r3, [sp, #32]
 800dafa:	dc02      	bgt.n	800db02 <_dtoa_r+0xaba>
 800dafc:	d1de      	bne.n	800dabc <_dtoa_r+0xa74>
 800dafe:	07da      	lsls	r2, r3, #31
 800db00:	d5dc      	bpl.n	800dabc <_dtoa_r+0xa74>
 800db02:	2b39      	cmp	r3, #57	; 0x39
 800db04:	d1d8      	bne.n	800dab8 <_dtoa_r+0xa70>
 800db06:	2339      	movs	r3, #57	; 0x39
 800db08:	9a04      	ldr	r2, [sp, #16]
 800db0a:	7013      	strb	r3, [r2, #0]
 800db0c:	463b      	mov	r3, r7
 800db0e:	461f      	mov	r7, r3
 800db10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800db14:	3b01      	subs	r3, #1
 800db16:	2a39      	cmp	r2, #57	; 0x39
 800db18:	d050      	beq.n	800dbbc <_dtoa_r+0xb74>
 800db1a:	3201      	adds	r2, #1
 800db1c:	701a      	strb	r2, [r3, #0]
 800db1e:	e747      	b.n	800d9b0 <_dtoa_r+0x968>
 800db20:	2a00      	cmp	r2, #0
 800db22:	dd03      	ble.n	800db2c <_dtoa_r+0xae4>
 800db24:	2b39      	cmp	r3, #57	; 0x39
 800db26:	d0ee      	beq.n	800db06 <_dtoa_r+0xabe>
 800db28:	3301      	adds	r3, #1
 800db2a:	e7c7      	b.n	800dabc <_dtoa_r+0xa74>
 800db2c:	9a08      	ldr	r2, [sp, #32]
 800db2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800db30:	f802 3c01 	strb.w	r3, [r2, #-1]
 800db34:	428a      	cmp	r2, r1
 800db36:	d02a      	beq.n	800db8e <_dtoa_r+0xb46>
 800db38:	4659      	mov	r1, fp
 800db3a:	2300      	movs	r3, #0
 800db3c:	220a      	movs	r2, #10
 800db3e:	4628      	mov	r0, r5
 800db40:	f000 fc64 	bl	800e40c <__multadd>
 800db44:	45b0      	cmp	r8, r6
 800db46:	4683      	mov	fp, r0
 800db48:	f04f 0300 	mov.w	r3, #0
 800db4c:	f04f 020a 	mov.w	r2, #10
 800db50:	4641      	mov	r1, r8
 800db52:	4628      	mov	r0, r5
 800db54:	d107      	bne.n	800db66 <_dtoa_r+0xb1e>
 800db56:	f000 fc59 	bl	800e40c <__multadd>
 800db5a:	4680      	mov	r8, r0
 800db5c:	4606      	mov	r6, r0
 800db5e:	9b08      	ldr	r3, [sp, #32]
 800db60:	3301      	adds	r3, #1
 800db62:	9308      	str	r3, [sp, #32]
 800db64:	e775      	b.n	800da52 <_dtoa_r+0xa0a>
 800db66:	f000 fc51 	bl	800e40c <__multadd>
 800db6a:	4631      	mov	r1, r6
 800db6c:	4680      	mov	r8, r0
 800db6e:	2300      	movs	r3, #0
 800db70:	220a      	movs	r2, #10
 800db72:	4628      	mov	r0, r5
 800db74:	f000 fc4a 	bl	800e40c <__multadd>
 800db78:	4606      	mov	r6, r0
 800db7a:	e7f0      	b.n	800db5e <_dtoa_r+0xb16>
 800db7c:	f1b9 0f00 	cmp.w	r9, #0
 800db80:	bfcc      	ite	gt
 800db82:	464f      	movgt	r7, r9
 800db84:	2701      	movle	r7, #1
 800db86:	f04f 0800 	mov.w	r8, #0
 800db8a:	9a03      	ldr	r2, [sp, #12]
 800db8c:	4417      	add	r7, r2
 800db8e:	4659      	mov	r1, fp
 800db90:	2201      	movs	r2, #1
 800db92:	4628      	mov	r0, r5
 800db94:	9308      	str	r3, [sp, #32]
 800db96:	f000 fe2f 	bl	800e7f8 <__lshift>
 800db9a:	4621      	mov	r1, r4
 800db9c:	4683      	mov	fp, r0
 800db9e:	f000 fe9b 	bl	800e8d8 <__mcmp>
 800dba2:	2800      	cmp	r0, #0
 800dba4:	dcb2      	bgt.n	800db0c <_dtoa_r+0xac4>
 800dba6:	d102      	bne.n	800dbae <_dtoa_r+0xb66>
 800dba8:	9b08      	ldr	r3, [sp, #32]
 800dbaa:	07db      	lsls	r3, r3, #31
 800dbac:	d4ae      	bmi.n	800db0c <_dtoa_r+0xac4>
 800dbae:	463b      	mov	r3, r7
 800dbb0:	461f      	mov	r7, r3
 800dbb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbb6:	2a30      	cmp	r2, #48	; 0x30
 800dbb8:	d0fa      	beq.n	800dbb0 <_dtoa_r+0xb68>
 800dbba:	e6f9      	b.n	800d9b0 <_dtoa_r+0x968>
 800dbbc:	9a03      	ldr	r2, [sp, #12]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d1a5      	bne.n	800db0e <_dtoa_r+0xac6>
 800dbc2:	2331      	movs	r3, #49	; 0x31
 800dbc4:	f10a 0a01 	add.w	sl, sl, #1
 800dbc8:	e779      	b.n	800dabe <_dtoa_r+0xa76>
 800dbca:	4b14      	ldr	r3, [pc, #80]	; (800dc1c <_dtoa_r+0xbd4>)
 800dbcc:	f7ff baa8 	b.w	800d120 <_dtoa_r+0xd8>
 800dbd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f47f aa81 	bne.w	800d0da <_dtoa_r+0x92>
 800dbd8:	4b11      	ldr	r3, [pc, #68]	; (800dc20 <_dtoa_r+0xbd8>)
 800dbda:	f7ff baa1 	b.w	800d120 <_dtoa_r+0xd8>
 800dbde:	f1b9 0f00 	cmp.w	r9, #0
 800dbe2:	dc03      	bgt.n	800dbec <_dtoa_r+0xba4>
 800dbe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	f73f aecb 	bgt.w	800d982 <_dtoa_r+0x93a>
 800dbec:	9f03      	ldr	r7, [sp, #12]
 800dbee:	4621      	mov	r1, r4
 800dbf0:	4658      	mov	r0, fp
 800dbf2:	f7ff f99d 	bl	800cf30 <quorem>
 800dbf6:	9a03      	ldr	r2, [sp, #12]
 800dbf8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dbfc:	f807 3b01 	strb.w	r3, [r7], #1
 800dc00:	1aba      	subs	r2, r7, r2
 800dc02:	4591      	cmp	r9, r2
 800dc04:	ddba      	ble.n	800db7c <_dtoa_r+0xb34>
 800dc06:	4659      	mov	r1, fp
 800dc08:	2300      	movs	r3, #0
 800dc0a:	220a      	movs	r2, #10
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f000 fbfd 	bl	800e40c <__multadd>
 800dc12:	4683      	mov	fp, r0
 800dc14:	e7eb      	b.n	800dbee <_dtoa_r+0xba6>
 800dc16:	bf00      	nop
 800dc18:	08011938 	.word	0x08011938
 800dc1c:	08011738 	.word	0x08011738
 800dc20:	080118b9 	.word	0x080118b9

0800dc24 <rshift>:
 800dc24:	6903      	ldr	r3, [r0, #16]
 800dc26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc2e:	f100 0414 	add.w	r4, r0, #20
 800dc32:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc36:	dd46      	ble.n	800dcc6 <rshift+0xa2>
 800dc38:	f011 011f 	ands.w	r1, r1, #31
 800dc3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc44:	d10c      	bne.n	800dc60 <rshift+0x3c>
 800dc46:	4629      	mov	r1, r5
 800dc48:	f100 0710 	add.w	r7, r0, #16
 800dc4c:	42b1      	cmp	r1, r6
 800dc4e:	d335      	bcc.n	800dcbc <rshift+0x98>
 800dc50:	1a9b      	subs	r3, r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	1eea      	subs	r2, r5, #3
 800dc56:	4296      	cmp	r6, r2
 800dc58:	bf38      	it	cc
 800dc5a:	2300      	movcc	r3, #0
 800dc5c:	4423      	add	r3, r4
 800dc5e:	e015      	b.n	800dc8c <rshift+0x68>
 800dc60:	46a1      	mov	r9, r4
 800dc62:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc66:	f1c1 0820 	rsb	r8, r1, #32
 800dc6a:	40cf      	lsrs	r7, r1
 800dc6c:	f105 0e04 	add.w	lr, r5, #4
 800dc70:	4576      	cmp	r6, lr
 800dc72:	46f4      	mov	ip, lr
 800dc74:	d816      	bhi.n	800dca4 <rshift+0x80>
 800dc76:	1a9a      	subs	r2, r3, r2
 800dc78:	0092      	lsls	r2, r2, #2
 800dc7a:	3a04      	subs	r2, #4
 800dc7c:	3501      	adds	r5, #1
 800dc7e:	42ae      	cmp	r6, r5
 800dc80:	bf38      	it	cc
 800dc82:	2200      	movcc	r2, #0
 800dc84:	18a3      	adds	r3, r4, r2
 800dc86:	50a7      	str	r7, [r4, r2]
 800dc88:	b107      	cbz	r7, 800dc8c <rshift+0x68>
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	42a3      	cmp	r3, r4
 800dc8e:	eba3 0204 	sub.w	r2, r3, r4
 800dc92:	bf08      	it	eq
 800dc94:	2300      	moveq	r3, #0
 800dc96:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc9a:	6102      	str	r2, [r0, #16]
 800dc9c:	bf08      	it	eq
 800dc9e:	6143      	streq	r3, [r0, #20]
 800dca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dca4:	f8dc c000 	ldr.w	ip, [ip]
 800dca8:	fa0c fc08 	lsl.w	ip, ip, r8
 800dcac:	ea4c 0707 	orr.w	r7, ip, r7
 800dcb0:	f849 7b04 	str.w	r7, [r9], #4
 800dcb4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcb8:	40cf      	lsrs	r7, r1
 800dcba:	e7d9      	b.n	800dc70 <rshift+0x4c>
 800dcbc:	f851 cb04 	ldr.w	ip, [r1], #4
 800dcc0:	f847 cf04 	str.w	ip, [r7, #4]!
 800dcc4:	e7c2      	b.n	800dc4c <rshift+0x28>
 800dcc6:	4623      	mov	r3, r4
 800dcc8:	e7e0      	b.n	800dc8c <rshift+0x68>

0800dcca <__hexdig_fun>:
 800dcca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dcce:	2b09      	cmp	r3, #9
 800dcd0:	d802      	bhi.n	800dcd8 <__hexdig_fun+0xe>
 800dcd2:	3820      	subs	r0, #32
 800dcd4:	b2c0      	uxtb	r0, r0
 800dcd6:	4770      	bx	lr
 800dcd8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dcdc:	2b05      	cmp	r3, #5
 800dcde:	d801      	bhi.n	800dce4 <__hexdig_fun+0x1a>
 800dce0:	3847      	subs	r0, #71	; 0x47
 800dce2:	e7f7      	b.n	800dcd4 <__hexdig_fun+0xa>
 800dce4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dce8:	2b05      	cmp	r3, #5
 800dcea:	d801      	bhi.n	800dcf0 <__hexdig_fun+0x26>
 800dcec:	3827      	subs	r0, #39	; 0x27
 800dcee:	e7f1      	b.n	800dcd4 <__hexdig_fun+0xa>
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	4770      	bx	lr

0800dcf4 <__gethex>:
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	b08b      	sub	sp, #44	; 0x2c
 800dcfa:	9305      	str	r3, [sp, #20]
 800dcfc:	4bb2      	ldr	r3, [pc, #712]	; (800dfc8 <__gethex+0x2d4>)
 800dcfe:	9002      	str	r0, [sp, #8]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	468b      	mov	fp, r1
 800dd04:	4618      	mov	r0, r3
 800dd06:	4690      	mov	r8, r2
 800dd08:	9303      	str	r3, [sp, #12]
 800dd0a:	f7f2 fa91 	bl	8000230 <strlen>
 800dd0e:	4682      	mov	sl, r0
 800dd10:	9b03      	ldr	r3, [sp, #12]
 800dd12:	f8db 2000 	ldr.w	r2, [fp]
 800dd16:	4403      	add	r3, r0
 800dd18:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dd1c:	9306      	str	r3, [sp, #24]
 800dd1e:	1c93      	adds	r3, r2, #2
 800dd20:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dd24:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dd28:	32fe      	adds	r2, #254	; 0xfe
 800dd2a:	18d1      	adds	r1, r2, r3
 800dd2c:	461f      	mov	r7, r3
 800dd2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd32:	9101      	str	r1, [sp, #4]
 800dd34:	2830      	cmp	r0, #48	; 0x30
 800dd36:	d0f8      	beq.n	800dd2a <__gethex+0x36>
 800dd38:	f7ff ffc7 	bl	800dcca <__hexdig_fun>
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d13a      	bne.n	800ddb8 <__gethex+0xc4>
 800dd42:	4652      	mov	r2, sl
 800dd44:	4638      	mov	r0, r7
 800dd46:	9903      	ldr	r1, [sp, #12]
 800dd48:	f001 fa18 	bl	800f17c <strncmp>
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	d166      	bne.n	800de20 <__gethex+0x12c>
 800dd52:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dd56:	eb07 060a 	add.w	r6, r7, sl
 800dd5a:	f7ff ffb6 	bl	800dcca <__hexdig_fun>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d060      	beq.n	800de24 <__gethex+0x130>
 800dd62:	4633      	mov	r3, r6
 800dd64:	7818      	ldrb	r0, [r3, #0]
 800dd66:	461f      	mov	r7, r3
 800dd68:	2830      	cmp	r0, #48	; 0x30
 800dd6a:	f103 0301 	add.w	r3, r3, #1
 800dd6e:	d0f9      	beq.n	800dd64 <__gethex+0x70>
 800dd70:	f7ff ffab 	bl	800dcca <__hexdig_fun>
 800dd74:	2301      	movs	r3, #1
 800dd76:	fab0 f480 	clz	r4, r0
 800dd7a:	4635      	mov	r5, r6
 800dd7c:	0964      	lsrs	r4, r4, #5
 800dd7e:	9301      	str	r3, [sp, #4]
 800dd80:	463a      	mov	r2, r7
 800dd82:	4616      	mov	r6, r2
 800dd84:	7830      	ldrb	r0, [r6, #0]
 800dd86:	3201      	adds	r2, #1
 800dd88:	f7ff ff9f 	bl	800dcca <__hexdig_fun>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d1f8      	bne.n	800dd82 <__gethex+0x8e>
 800dd90:	4652      	mov	r2, sl
 800dd92:	4630      	mov	r0, r6
 800dd94:	9903      	ldr	r1, [sp, #12]
 800dd96:	f001 f9f1 	bl	800f17c <strncmp>
 800dd9a:	b980      	cbnz	r0, 800ddbe <__gethex+0xca>
 800dd9c:	b94d      	cbnz	r5, 800ddb2 <__gethex+0xbe>
 800dd9e:	eb06 050a 	add.w	r5, r6, sl
 800dda2:	462a      	mov	r2, r5
 800dda4:	4616      	mov	r6, r2
 800dda6:	7830      	ldrb	r0, [r6, #0]
 800dda8:	3201      	adds	r2, #1
 800ddaa:	f7ff ff8e 	bl	800dcca <__hexdig_fun>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d1f8      	bne.n	800dda4 <__gethex+0xb0>
 800ddb2:	1bad      	subs	r5, r5, r6
 800ddb4:	00ad      	lsls	r5, r5, #2
 800ddb6:	e004      	b.n	800ddc2 <__gethex+0xce>
 800ddb8:	2400      	movs	r4, #0
 800ddba:	4625      	mov	r5, r4
 800ddbc:	e7e0      	b.n	800dd80 <__gethex+0x8c>
 800ddbe:	2d00      	cmp	r5, #0
 800ddc0:	d1f7      	bne.n	800ddb2 <__gethex+0xbe>
 800ddc2:	7833      	ldrb	r3, [r6, #0]
 800ddc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ddc8:	2b50      	cmp	r3, #80	; 0x50
 800ddca:	d139      	bne.n	800de40 <__gethex+0x14c>
 800ddcc:	7873      	ldrb	r3, [r6, #1]
 800ddce:	2b2b      	cmp	r3, #43	; 0x2b
 800ddd0:	d02a      	beq.n	800de28 <__gethex+0x134>
 800ddd2:	2b2d      	cmp	r3, #45	; 0x2d
 800ddd4:	d02c      	beq.n	800de30 <__gethex+0x13c>
 800ddd6:	f04f 0900 	mov.w	r9, #0
 800ddda:	1c71      	adds	r1, r6, #1
 800dddc:	7808      	ldrb	r0, [r1, #0]
 800ddde:	f7ff ff74 	bl	800dcca <__hexdig_fun>
 800dde2:	1e43      	subs	r3, r0, #1
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b18      	cmp	r3, #24
 800dde8:	d82a      	bhi.n	800de40 <__gethex+0x14c>
 800ddea:	f1a0 0210 	sub.w	r2, r0, #16
 800ddee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ddf2:	f7ff ff6a 	bl	800dcca <__hexdig_fun>
 800ddf6:	1e43      	subs	r3, r0, #1
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	2b18      	cmp	r3, #24
 800ddfc:	d91b      	bls.n	800de36 <__gethex+0x142>
 800ddfe:	f1b9 0f00 	cmp.w	r9, #0
 800de02:	d000      	beq.n	800de06 <__gethex+0x112>
 800de04:	4252      	negs	r2, r2
 800de06:	4415      	add	r5, r2
 800de08:	f8cb 1000 	str.w	r1, [fp]
 800de0c:	b1d4      	cbz	r4, 800de44 <__gethex+0x150>
 800de0e:	9b01      	ldr	r3, [sp, #4]
 800de10:	2b00      	cmp	r3, #0
 800de12:	bf14      	ite	ne
 800de14:	2700      	movne	r7, #0
 800de16:	2706      	moveq	r7, #6
 800de18:	4638      	mov	r0, r7
 800de1a:	b00b      	add	sp, #44	; 0x2c
 800de1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de20:	463e      	mov	r6, r7
 800de22:	4625      	mov	r5, r4
 800de24:	2401      	movs	r4, #1
 800de26:	e7cc      	b.n	800ddc2 <__gethex+0xce>
 800de28:	f04f 0900 	mov.w	r9, #0
 800de2c:	1cb1      	adds	r1, r6, #2
 800de2e:	e7d5      	b.n	800dddc <__gethex+0xe8>
 800de30:	f04f 0901 	mov.w	r9, #1
 800de34:	e7fa      	b.n	800de2c <__gethex+0x138>
 800de36:	230a      	movs	r3, #10
 800de38:	fb03 0202 	mla	r2, r3, r2, r0
 800de3c:	3a10      	subs	r2, #16
 800de3e:	e7d6      	b.n	800ddee <__gethex+0xfa>
 800de40:	4631      	mov	r1, r6
 800de42:	e7e1      	b.n	800de08 <__gethex+0x114>
 800de44:	4621      	mov	r1, r4
 800de46:	1bf3      	subs	r3, r6, r7
 800de48:	3b01      	subs	r3, #1
 800de4a:	2b07      	cmp	r3, #7
 800de4c:	dc0a      	bgt.n	800de64 <__gethex+0x170>
 800de4e:	9802      	ldr	r0, [sp, #8]
 800de50:	f000 fa7a 	bl	800e348 <_Balloc>
 800de54:	4604      	mov	r4, r0
 800de56:	b940      	cbnz	r0, 800de6a <__gethex+0x176>
 800de58:	4602      	mov	r2, r0
 800de5a:	21de      	movs	r1, #222	; 0xde
 800de5c:	4b5b      	ldr	r3, [pc, #364]	; (800dfcc <__gethex+0x2d8>)
 800de5e:	485c      	ldr	r0, [pc, #368]	; (800dfd0 <__gethex+0x2dc>)
 800de60:	f001 f9ae 	bl	800f1c0 <__assert_func>
 800de64:	3101      	adds	r1, #1
 800de66:	105b      	asrs	r3, r3, #1
 800de68:	e7ef      	b.n	800de4a <__gethex+0x156>
 800de6a:	f04f 0b00 	mov.w	fp, #0
 800de6e:	f100 0914 	add.w	r9, r0, #20
 800de72:	f1ca 0301 	rsb	r3, sl, #1
 800de76:	f8cd 9010 	str.w	r9, [sp, #16]
 800de7a:	f8cd b004 	str.w	fp, [sp, #4]
 800de7e:	9308      	str	r3, [sp, #32]
 800de80:	42b7      	cmp	r7, r6
 800de82:	d33f      	bcc.n	800df04 <__gethex+0x210>
 800de84:	9f04      	ldr	r7, [sp, #16]
 800de86:	9b01      	ldr	r3, [sp, #4]
 800de88:	f847 3b04 	str.w	r3, [r7], #4
 800de8c:	eba7 0709 	sub.w	r7, r7, r9
 800de90:	10bf      	asrs	r7, r7, #2
 800de92:	6127      	str	r7, [r4, #16]
 800de94:	4618      	mov	r0, r3
 800de96:	f000 fb49 	bl	800e52c <__hi0bits>
 800de9a:	017f      	lsls	r7, r7, #5
 800de9c:	f8d8 6000 	ldr.w	r6, [r8]
 800dea0:	1a3f      	subs	r7, r7, r0
 800dea2:	42b7      	cmp	r7, r6
 800dea4:	dd62      	ble.n	800df6c <__gethex+0x278>
 800dea6:	1bbf      	subs	r7, r7, r6
 800dea8:	4639      	mov	r1, r7
 800deaa:	4620      	mov	r0, r4
 800deac:	f000 fee3 	bl	800ec76 <__any_on>
 800deb0:	4682      	mov	sl, r0
 800deb2:	b1a8      	cbz	r0, 800dee0 <__gethex+0x1ec>
 800deb4:	f04f 0a01 	mov.w	sl, #1
 800deb8:	1e7b      	subs	r3, r7, #1
 800deba:	1159      	asrs	r1, r3, #5
 800debc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dec0:	f003 021f 	and.w	r2, r3, #31
 800dec4:	fa0a f202 	lsl.w	r2, sl, r2
 800dec8:	420a      	tst	r2, r1
 800deca:	d009      	beq.n	800dee0 <__gethex+0x1ec>
 800decc:	4553      	cmp	r3, sl
 800dece:	dd05      	ble.n	800dedc <__gethex+0x1e8>
 800ded0:	4620      	mov	r0, r4
 800ded2:	1eb9      	subs	r1, r7, #2
 800ded4:	f000 fecf 	bl	800ec76 <__any_on>
 800ded8:	2800      	cmp	r0, #0
 800deda:	d144      	bne.n	800df66 <__gethex+0x272>
 800dedc:	f04f 0a02 	mov.w	sl, #2
 800dee0:	4639      	mov	r1, r7
 800dee2:	4620      	mov	r0, r4
 800dee4:	f7ff fe9e 	bl	800dc24 <rshift>
 800dee8:	443d      	add	r5, r7
 800deea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800deee:	42ab      	cmp	r3, r5
 800def0:	da4a      	bge.n	800df88 <__gethex+0x294>
 800def2:	4621      	mov	r1, r4
 800def4:	9802      	ldr	r0, [sp, #8]
 800def6:	f000 fa67 	bl	800e3c8 <_Bfree>
 800defa:	2300      	movs	r3, #0
 800defc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800defe:	27a3      	movs	r7, #163	; 0xa3
 800df00:	6013      	str	r3, [r2, #0]
 800df02:	e789      	b.n	800de18 <__gethex+0x124>
 800df04:	1e73      	subs	r3, r6, #1
 800df06:	9a06      	ldr	r2, [sp, #24]
 800df08:	9307      	str	r3, [sp, #28]
 800df0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df0e:	4293      	cmp	r3, r2
 800df10:	d019      	beq.n	800df46 <__gethex+0x252>
 800df12:	f1bb 0f20 	cmp.w	fp, #32
 800df16:	d107      	bne.n	800df28 <__gethex+0x234>
 800df18:	9b04      	ldr	r3, [sp, #16]
 800df1a:	9a01      	ldr	r2, [sp, #4]
 800df1c:	f843 2b04 	str.w	r2, [r3], #4
 800df20:	9304      	str	r3, [sp, #16]
 800df22:	2300      	movs	r3, #0
 800df24:	469b      	mov	fp, r3
 800df26:	9301      	str	r3, [sp, #4]
 800df28:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800df2c:	f7ff fecd 	bl	800dcca <__hexdig_fun>
 800df30:	9b01      	ldr	r3, [sp, #4]
 800df32:	f000 000f 	and.w	r0, r0, #15
 800df36:	fa00 f00b 	lsl.w	r0, r0, fp
 800df3a:	4303      	orrs	r3, r0
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	f10b 0b04 	add.w	fp, fp, #4
 800df42:	9b07      	ldr	r3, [sp, #28]
 800df44:	e00d      	b.n	800df62 <__gethex+0x26e>
 800df46:	9a08      	ldr	r2, [sp, #32]
 800df48:	1e73      	subs	r3, r6, #1
 800df4a:	4413      	add	r3, r2
 800df4c:	42bb      	cmp	r3, r7
 800df4e:	d3e0      	bcc.n	800df12 <__gethex+0x21e>
 800df50:	4618      	mov	r0, r3
 800df52:	4652      	mov	r2, sl
 800df54:	9903      	ldr	r1, [sp, #12]
 800df56:	9309      	str	r3, [sp, #36]	; 0x24
 800df58:	f001 f910 	bl	800f17c <strncmp>
 800df5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df5e:	2800      	cmp	r0, #0
 800df60:	d1d7      	bne.n	800df12 <__gethex+0x21e>
 800df62:	461e      	mov	r6, r3
 800df64:	e78c      	b.n	800de80 <__gethex+0x18c>
 800df66:	f04f 0a03 	mov.w	sl, #3
 800df6a:	e7b9      	b.n	800dee0 <__gethex+0x1ec>
 800df6c:	da09      	bge.n	800df82 <__gethex+0x28e>
 800df6e:	1bf7      	subs	r7, r6, r7
 800df70:	4621      	mov	r1, r4
 800df72:	463a      	mov	r2, r7
 800df74:	9802      	ldr	r0, [sp, #8]
 800df76:	f000 fc3f 	bl	800e7f8 <__lshift>
 800df7a:	4604      	mov	r4, r0
 800df7c:	1bed      	subs	r5, r5, r7
 800df7e:	f100 0914 	add.w	r9, r0, #20
 800df82:	f04f 0a00 	mov.w	sl, #0
 800df86:	e7b0      	b.n	800deea <__gethex+0x1f6>
 800df88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800df8c:	42a8      	cmp	r0, r5
 800df8e:	dd72      	ble.n	800e076 <__gethex+0x382>
 800df90:	1b45      	subs	r5, r0, r5
 800df92:	42ae      	cmp	r6, r5
 800df94:	dc35      	bgt.n	800e002 <__gethex+0x30e>
 800df96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df9a:	2b02      	cmp	r3, #2
 800df9c:	d029      	beq.n	800dff2 <__gethex+0x2fe>
 800df9e:	2b03      	cmp	r3, #3
 800dfa0:	d02b      	beq.n	800dffa <__gethex+0x306>
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d11c      	bne.n	800dfe0 <__gethex+0x2ec>
 800dfa6:	42ae      	cmp	r6, r5
 800dfa8:	d11a      	bne.n	800dfe0 <__gethex+0x2ec>
 800dfaa:	2e01      	cmp	r6, #1
 800dfac:	d112      	bne.n	800dfd4 <__gethex+0x2e0>
 800dfae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dfb2:	9a05      	ldr	r2, [sp, #20]
 800dfb4:	2762      	movs	r7, #98	; 0x62
 800dfb6:	6013      	str	r3, [r2, #0]
 800dfb8:	2301      	movs	r3, #1
 800dfba:	6123      	str	r3, [r4, #16]
 800dfbc:	f8c9 3000 	str.w	r3, [r9]
 800dfc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfc2:	601c      	str	r4, [r3, #0]
 800dfc4:	e728      	b.n	800de18 <__gethex+0x124>
 800dfc6:	bf00      	nop
 800dfc8:	080119b0 	.word	0x080119b0
 800dfcc:	08011938 	.word	0x08011938
 800dfd0:	08011949 	.word	0x08011949
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	1e71      	subs	r1, r6, #1
 800dfd8:	f000 fe4d 	bl	800ec76 <__any_on>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d1e6      	bne.n	800dfae <__gethex+0x2ba>
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	9802      	ldr	r0, [sp, #8]
 800dfe4:	f000 f9f0 	bl	800e3c8 <_Bfree>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dfec:	2750      	movs	r7, #80	; 0x50
 800dfee:	6013      	str	r3, [r2, #0]
 800dff0:	e712      	b.n	800de18 <__gethex+0x124>
 800dff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d1f3      	bne.n	800dfe0 <__gethex+0x2ec>
 800dff8:	e7d9      	b.n	800dfae <__gethex+0x2ba>
 800dffa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d1d6      	bne.n	800dfae <__gethex+0x2ba>
 800e000:	e7ee      	b.n	800dfe0 <__gethex+0x2ec>
 800e002:	1e6f      	subs	r7, r5, #1
 800e004:	f1ba 0f00 	cmp.w	sl, #0
 800e008:	d132      	bne.n	800e070 <__gethex+0x37c>
 800e00a:	b127      	cbz	r7, 800e016 <__gethex+0x322>
 800e00c:	4639      	mov	r1, r7
 800e00e:	4620      	mov	r0, r4
 800e010:	f000 fe31 	bl	800ec76 <__any_on>
 800e014:	4682      	mov	sl, r0
 800e016:	2101      	movs	r1, #1
 800e018:	117b      	asrs	r3, r7, #5
 800e01a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e01e:	f007 071f 	and.w	r7, r7, #31
 800e022:	fa01 f707 	lsl.w	r7, r1, r7
 800e026:	421f      	tst	r7, r3
 800e028:	f04f 0702 	mov.w	r7, #2
 800e02c:	4629      	mov	r1, r5
 800e02e:	4620      	mov	r0, r4
 800e030:	bf18      	it	ne
 800e032:	f04a 0a02 	orrne.w	sl, sl, #2
 800e036:	1b76      	subs	r6, r6, r5
 800e038:	f7ff fdf4 	bl	800dc24 <rshift>
 800e03c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e040:	f1ba 0f00 	cmp.w	sl, #0
 800e044:	d048      	beq.n	800e0d8 <__gethex+0x3e4>
 800e046:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e04a:	2b02      	cmp	r3, #2
 800e04c:	d015      	beq.n	800e07a <__gethex+0x386>
 800e04e:	2b03      	cmp	r3, #3
 800e050:	d017      	beq.n	800e082 <__gethex+0x38e>
 800e052:	2b01      	cmp	r3, #1
 800e054:	d109      	bne.n	800e06a <__gethex+0x376>
 800e056:	f01a 0f02 	tst.w	sl, #2
 800e05a:	d006      	beq.n	800e06a <__gethex+0x376>
 800e05c:	f8d9 0000 	ldr.w	r0, [r9]
 800e060:	ea4a 0a00 	orr.w	sl, sl, r0
 800e064:	f01a 0f01 	tst.w	sl, #1
 800e068:	d10e      	bne.n	800e088 <__gethex+0x394>
 800e06a:	f047 0710 	orr.w	r7, r7, #16
 800e06e:	e033      	b.n	800e0d8 <__gethex+0x3e4>
 800e070:	f04f 0a01 	mov.w	sl, #1
 800e074:	e7cf      	b.n	800e016 <__gethex+0x322>
 800e076:	2701      	movs	r7, #1
 800e078:	e7e2      	b.n	800e040 <__gethex+0x34c>
 800e07a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e07c:	f1c3 0301 	rsb	r3, r3, #1
 800e080:	9315      	str	r3, [sp, #84]	; 0x54
 800e082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e084:	2b00      	cmp	r3, #0
 800e086:	d0f0      	beq.n	800e06a <__gethex+0x376>
 800e088:	f04f 0c00 	mov.w	ip, #0
 800e08c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e090:	f104 0314 	add.w	r3, r4, #20
 800e094:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e098:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e09c:	4618      	mov	r0, r3
 800e09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e0a6:	d01c      	beq.n	800e0e2 <__gethex+0x3ee>
 800e0a8:	3201      	adds	r2, #1
 800e0aa:	6002      	str	r2, [r0, #0]
 800e0ac:	2f02      	cmp	r7, #2
 800e0ae:	f104 0314 	add.w	r3, r4, #20
 800e0b2:	d13d      	bne.n	800e130 <__gethex+0x43c>
 800e0b4:	f8d8 2000 	ldr.w	r2, [r8]
 800e0b8:	3a01      	subs	r2, #1
 800e0ba:	42b2      	cmp	r2, r6
 800e0bc:	d10a      	bne.n	800e0d4 <__gethex+0x3e0>
 800e0be:	2201      	movs	r2, #1
 800e0c0:	1171      	asrs	r1, r6, #5
 800e0c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0c6:	f006 061f 	and.w	r6, r6, #31
 800e0ca:	fa02 f606 	lsl.w	r6, r2, r6
 800e0ce:	421e      	tst	r6, r3
 800e0d0:	bf18      	it	ne
 800e0d2:	4617      	movne	r7, r2
 800e0d4:	f047 0720 	orr.w	r7, r7, #32
 800e0d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0da:	601c      	str	r4, [r3, #0]
 800e0dc:	9b05      	ldr	r3, [sp, #20]
 800e0de:	601d      	str	r5, [r3, #0]
 800e0e0:	e69a      	b.n	800de18 <__gethex+0x124>
 800e0e2:	4299      	cmp	r1, r3
 800e0e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e0e8:	d8d8      	bhi.n	800e09c <__gethex+0x3a8>
 800e0ea:	68a3      	ldr	r3, [r4, #8]
 800e0ec:	459b      	cmp	fp, r3
 800e0ee:	db17      	blt.n	800e120 <__gethex+0x42c>
 800e0f0:	6861      	ldr	r1, [r4, #4]
 800e0f2:	9802      	ldr	r0, [sp, #8]
 800e0f4:	3101      	adds	r1, #1
 800e0f6:	f000 f927 	bl	800e348 <_Balloc>
 800e0fa:	4681      	mov	r9, r0
 800e0fc:	b918      	cbnz	r0, 800e106 <__gethex+0x412>
 800e0fe:	4602      	mov	r2, r0
 800e100:	2184      	movs	r1, #132	; 0x84
 800e102:	4b19      	ldr	r3, [pc, #100]	; (800e168 <__gethex+0x474>)
 800e104:	e6ab      	b.n	800de5e <__gethex+0x16a>
 800e106:	6922      	ldr	r2, [r4, #16]
 800e108:	f104 010c 	add.w	r1, r4, #12
 800e10c:	3202      	adds	r2, #2
 800e10e:	0092      	lsls	r2, r2, #2
 800e110:	300c      	adds	r0, #12
 800e112:	f7fd f9d5 	bl	800b4c0 <memcpy>
 800e116:	4621      	mov	r1, r4
 800e118:	9802      	ldr	r0, [sp, #8]
 800e11a:	f000 f955 	bl	800e3c8 <_Bfree>
 800e11e:	464c      	mov	r4, r9
 800e120:	6923      	ldr	r3, [r4, #16]
 800e122:	1c5a      	adds	r2, r3, #1
 800e124:	6122      	str	r2, [r4, #16]
 800e126:	2201      	movs	r2, #1
 800e128:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e12c:	615a      	str	r2, [r3, #20]
 800e12e:	e7bd      	b.n	800e0ac <__gethex+0x3b8>
 800e130:	6922      	ldr	r2, [r4, #16]
 800e132:	455a      	cmp	r2, fp
 800e134:	dd0b      	ble.n	800e14e <__gethex+0x45a>
 800e136:	2101      	movs	r1, #1
 800e138:	4620      	mov	r0, r4
 800e13a:	f7ff fd73 	bl	800dc24 <rshift>
 800e13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e142:	3501      	adds	r5, #1
 800e144:	42ab      	cmp	r3, r5
 800e146:	f6ff aed4 	blt.w	800def2 <__gethex+0x1fe>
 800e14a:	2701      	movs	r7, #1
 800e14c:	e7c2      	b.n	800e0d4 <__gethex+0x3e0>
 800e14e:	f016 061f 	ands.w	r6, r6, #31
 800e152:	d0fa      	beq.n	800e14a <__gethex+0x456>
 800e154:	4453      	add	r3, sl
 800e156:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e15a:	f000 f9e7 	bl	800e52c <__hi0bits>
 800e15e:	f1c6 0620 	rsb	r6, r6, #32
 800e162:	42b0      	cmp	r0, r6
 800e164:	dbe7      	blt.n	800e136 <__gethex+0x442>
 800e166:	e7f0      	b.n	800e14a <__gethex+0x456>
 800e168:	08011938 	.word	0x08011938

0800e16c <L_shift>:
 800e16c:	f1c2 0208 	rsb	r2, r2, #8
 800e170:	0092      	lsls	r2, r2, #2
 800e172:	b570      	push	{r4, r5, r6, lr}
 800e174:	f1c2 0620 	rsb	r6, r2, #32
 800e178:	6843      	ldr	r3, [r0, #4]
 800e17a:	6804      	ldr	r4, [r0, #0]
 800e17c:	fa03 f506 	lsl.w	r5, r3, r6
 800e180:	432c      	orrs	r4, r5
 800e182:	40d3      	lsrs	r3, r2
 800e184:	6004      	str	r4, [r0, #0]
 800e186:	f840 3f04 	str.w	r3, [r0, #4]!
 800e18a:	4288      	cmp	r0, r1
 800e18c:	d3f4      	bcc.n	800e178 <L_shift+0xc>
 800e18e:	bd70      	pop	{r4, r5, r6, pc}

0800e190 <__match>:
 800e190:	b530      	push	{r4, r5, lr}
 800e192:	6803      	ldr	r3, [r0, #0]
 800e194:	3301      	adds	r3, #1
 800e196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e19a:	b914      	cbnz	r4, 800e1a2 <__match+0x12>
 800e19c:	6003      	str	r3, [r0, #0]
 800e19e:	2001      	movs	r0, #1
 800e1a0:	bd30      	pop	{r4, r5, pc}
 800e1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e1aa:	2d19      	cmp	r5, #25
 800e1ac:	bf98      	it	ls
 800e1ae:	3220      	addls	r2, #32
 800e1b0:	42a2      	cmp	r2, r4
 800e1b2:	d0f0      	beq.n	800e196 <__match+0x6>
 800e1b4:	2000      	movs	r0, #0
 800e1b6:	e7f3      	b.n	800e1a0 <__match+0x10>

0800e1b8 <__hexnan>:
 800e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1bc:	2500      	movs	r5, #0
 800e1be:	680b      	ldr	r3, [r1, #0]
 800e1c0:	4682      	mov	sl, r0
 800e1c2:	115e      	asrs	r6, r3, #5
 800e1c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e1c8:	f013 031f 	ands.w	r3, r3, #31
 800e1cc:	bf18      	it	ne
 800e1ce:	3604      	addne	r6, #4
 800e1d0:	1f37      	subs	r7, r6, #4
 800e1d2:	46b9      	mov	r9, r7
 800e1d4:	463c      	mov	r4, r7
 800e1d6:	46ab      	mov	fp, r5
 800e1d8:	b087      	sub	sp, #28
 800e1da:	4690      	mov	r8, r2
 800e1dc:	6802      	ldr	r2, [r0, #0]
 800e1de:	9301      	str	r3, [sp, #4]
 800e1e0:	f846 5c04 	str.w	r5, [r6, #-4]
 800e1e4:	9502      	str	r5, [sp, #8]
 800e1e6:	7851      	ldrb	r1, [r2, #1]
 800e1e8:	1c53      	adds	r3, r2, #1
 800e1ea:	9303      	str	r3, [sp, #12]
 800e1ec:	b341      	cbz	r1, 800e240 <__hexnan+0x88>
 800e1ee:	4608      	mov	r0, r1
 800e1f0:	9205      	str	r2, [sp, #20]
 800e1f2:	9104      	str	r1, [sp, #16]
 800e1f4:	f7ff fd69 	bl	800dcca <__hexdig_fun>
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	d14f      	bne.n	800e29c <__hexnan+0xe4>
 800e1fc:	9904      	ldr	r1, [sp, #16]
 800e1fe:	9a05      	ldr	r2, [sp, #20]
 800e200:	2920      	cmp	r1, #32
 800e202:	d818      	bhi.n	800e236 <__hexnan+0x7e>
 800e204:	9b02      	ldr	r3, [sp, #8]
 800e206:	459b      	cmp	fp, r3
 800e208:	dd13      	ble.n	800e232 <__hexnan+0x7a>
 800e20a:	454c      	cmp	r4, r9
 800e20c:	d206      	bcs.n	800e21c <__hexnan+0x64>
 800e20e:	2d07      	cmp	r5, #7
 800e210:	dc04      	bgt.n	800e21c <__hexnan+0x64>
 800e212:	462a      	mov	r2, r5
 800e214:	4649      	mov	r1, r9
 800e216:	4620      	mov	r0, r4
 800e218:	f7ff ffa8 	bl	800e16c <L_shift>
 800e21c:	4544      	cmp	r4, r8
 800e21e:	d950      	bls.n	800e2c2 <__hexnan+0x10a>
 800e220:	2300      	movs	r3, #0
 800e222:	f1a4 0904 	sub.w	r9, r4, #4
 800e226:	f844 3c04 	str.w	r3, [r4, #-4]
 800e22a:	461d      	mov	r5, r3
 800e22c:	464c      	mov	r4, r9
 800e22e:	f8cd b008 	str.w	fp, [sp, #8]
 800e232:	9a03      	ldr	r2, [sp, #12]
 800e234:	e7d7      	b.n	800e1e6 <__hexnan+0x2e>
 800e236:	2929      	cmp	r1, #41	; 0x29
 800e238:	d156      	bne.n	800e2e8 <__hexnan+0x130>
 800e23a:	3202      	adds	r2, #2
 800e23c:	f8ca 2000 	str.w	r2, [sl]
 800e240:	f1bb 0f00 	cmp.w	fp, #0
 800e244:	d050      	beq.n	800e2e8 <__hexnan+0x130>
 800e246:	454c      	cmp	r4, r9
 800e248:	d206      	bcs.n	800e258 <__hexnan+0xa0>
 800e24a:	2d07      	cmp	r5, #7
 800e24c:	dc04      	bgt.n	800e258 <__hexnan+0xa0>
 800e24e:	462a      	mov	r2, r5
 800e250:	4649      	mov	r1, r9
 800e252:	4620      	mov	r0, r4
 800e254:	f7ff ff8a 	bl	800e16c <L_shift>
 800e258:	4544      	cmp	r4, r8
 800e25a:	d934      	bls.n	800e2c6 <__hexnan+0x10e>
 800e25c:	4623      	mov	r3, r4
 800e25e:	f1a8 0204 	sub.w	r2, r8, #4
 800e262:	f853 1b04 	ldr.w	r1, [r3], #4
 800e266:	429f      	cmp	r7, r3
 800e268:	f842 1f04 	str.w	r1, [r2, #4]!
 800e26c:	d2f9      	bcs.n	800e262 <__hexnan+0xaa>
 800e26e:	1b3b      	subs	r3, r7, r4
 800e270:	f023 0303 	bic.w	r3, r3, #3
 800e274:	3304      	adds	r3, #4
 800e276:	3401      	adds	r4, #1
 800e278:	3e03      	subs	r6, #3
 800e27a:	42b4      	cmp	r4, r6
 800e27c:	bf88      	it	hi
 800e27e:	2304      	movhi	r3, #4
 800e280:	2200      	movs	r2, #0
 800e282:	4443      	add	r3, r8
 800e284:	f843 2b04 	str.w	r2, [r3], #4
 800e288:	429f      	cmp	r7, r3
 800e28a:	d2fb      	bcs.n	800e284 <__hexnan+0xcc>
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	b91b      	cbnz	r3, 800e298 <__hexnan+0xe0>
 800e290:	4547      	cmp	r7, r8
 800e292:	d127      	bne.n	800e2e4 <__hexnan+0x12c>
 800e294:	2301      	movs	r3, #1
 800e296:	603b      	str	r3, [r7, #0]
 800e298:	2005      	movs	r0, #5
 800e29a:	e026      	b.n	800e2ea <__hexnan+0x132>
 800e29c:	3501      	adds	r5, #1
 800e29e:	2d08      	cmp	r5, #8
 800e2a0:	f10b 0b01 	add.w	fp, fp, #1
 800e2a4:	dd06      	ble.n	800e2b4 <__hexnan+0xfc>
 800e2a6:	4544      	cmp	r4, r8
 800e2a8:	d9c3      	bls.n	800e232 <__hexnan+0x7a>
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	2501      	movs	r5, #1
 800e2ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2b2:	3c04      	subs	r4, #4
 800e2b4:	6822      	ldr	r2, [r4, #0]
 800e2b6:	f000 000f 	and.w	r0, r0, #15
 800e2ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e2be:	6022      	str	r2, [r4, #0]
 800e2c0:	e7b7      	b.n	800e232 <__hexnan+0x7a>
 800e2c2:	2508      	movs	r5, #8
 800e2c4:	e7b5      	b.n	800e232 <__hexnan+0x7a>
 800e2c6:	9b01      	ldr	r3, [sp, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d0df      	beq.n	800e28c <__hexnan+0xd4>
 800e2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e2d0:	f1c3 0320 	rsb	r3, r3, #32
 800e2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800e2d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e2dc:	401a      	ands	r2, r3
 800e2de:	f846 2c04 	str.w	r2, [r6, #-4]
 800e2e2:	e7d3      	b.n	800e28c <__hexnan+0xd4>
 800e2e4:	3f04      	subs	r7, #4
 800e2e6:	e7d1      	b.n	800e28c <__hexnan+0xd4>
 800e2e8:	2004      	movs	r0, #4
 800e2ea:	b007      	add	sp, #28
 800e2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2f0 <_localeconv_r>:
 800e2f0:	4800      	ldr	r0, [pc, #0]	; (800e2f4 <_localeconv_r+0x4>)
 800e2f2:	4770      	bx	lr
 800e2f4:	20000170 	.word	0x20000170

0800e2f8 <malloc>:
 800e2f8:	4b02      	ldr	r3, [pc, #8]	; (800e304 <malloc+0xc>)
 800e2fa:	4601      	mov	r1, r0
 800e2fc:	6818      	ldr	r0, [r3, #0]
 800e2fe:	f000 bd57 	b.w	800edb0 <_malloc_r>
 800e302:	bf00      	nop
 800e304:	20000018 	.word	0x20000018

0800e308 <__ascii_mbtowc>:
 800e308:	b082      	sub	sp, #8
 800e30a:	b901      	cbnz	r1, 800e30e <__ascii_mbtowc+0x6>
 800e30c:	a901      	add	r1, sp, #4
 800e30e:	b142      	cbz	r2, 800e322 <__ascii_mbtowc+0x1a>
 800e310:	b14b      	cbz	r3, 800e326 <__ascii_mbtowc+0x1e>
 800e312:	7813      	ldrb	r3, [r2, #0]
 800e314:	600b      	str	r3, [r1, #0]
 800e316:	7812      	ldrb	r2, [r2, #0]
 800e318:	1e10      	subs	r0, r2, #0
 800e31a:	bf18      	it	ne
 800e31c:	2001      	movne	r0, #1
 800e31e:	b002      	add	sp, #8
 800e320:	4770      	bx	lr
 800e322:	4610      	mov	r0, r2
 800e324:	e7fb      	b.n	800e31e <__ascii_mbtowc+0x16>
 800e326:	f06f 0001 	mvn.w	r0, #1
 800e32a:	e7f8      	b.n	800e31e <__ascii_mbtowc+0x16>

0800e32c <memchr>:
 800e32c:	4603      	mov	r3, r0
 800e32e:	b510      	push	{r4, lr}
 800e330:	b2c9      	uxtb	r1, r1
 800e332:	4402      	add	r2, r0
 800e334:	4293      	cmp	r3, r2
 800e336:	4618      	mov	r0, r3
 800e338:	d101      	bne.n	800e33e <memchr+0x12>
 800e33a:	2000      	movs	r0, #0
 800e33c:	e003      	b.n	800e346 <memchr+0x1a>
 800e33e:	7804      	ldrb	r4, [r0, #0]
 800e340:	3301      	adds	r3, #1
 800e342:	428c      	cmp	r4, r1
 800e344:	d1f6      	bne.n	800e334 <memchr+0x8>
 800e346:	bd10      	pop	{r4, pc}

0800e348 <_Balloc>:
 800e348:	b570      	push	{r4, r5, r6, lr}
 800e34a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e34c:	4604      	mov	r4, r0
 800e34e:	460d      	mov	r5, r1
 800e350:	b976      	cbnz	r6, 800e370 <_Balloc+0x28>
 800e352:	2010      	movs	r0, #16
 800e354:	f7ff ffd0 	bl	800e2f8 <malloc>
 800e358:	4602      	mov	r2, r0
 800e35a:	6260      	str	r0, [r4, #36]	; 0x24
 800e35c:	b920      	cbnz	r0, 800e368 <_Balloc+0x20>
 800e35e:	2166      	movs	r1, #102	; 0x66
 800e360:	4b17      	ldr	r3, [pc, #92]	; (800e3c0 <_Balloc+0x78>)
 800e362:	4818      	ldr	r0, [pc, #96]	; (800e3c4 <_Balloc+0x7c>)
 800e364:	f000 ff2c 	bl	800f1c0 <__assert_func>
 800e368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e36c:	6006      	str	r6, [r0, #0]
 800e36e:	60c6      	str	r6, [r0, #12]
 800e370:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e372:	68f3      	ldr	r3, [r6, #12]
 800e374:	b183      	cbz	r3, 800e398 <_Balloc+0x50>
 800e376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e37e:	b9b8      	cbnz	r0, 800e3b0 <_Balloc+0x68>
 800e380:	2101      	movs	r1, #1
 800e382:	fa01 f605 	lsl.w	r6, r1, r5
 800e386:	1d72      	adds	r2, r6, #5
 800e388:	4620      	mov	r0, r4
 800e38a:	0092      	lsls	r2, r2, #2
 800e38c:	f000 fc94 	bl	800ecb8 <_calloc_r>
 800e390:	b160      	cbz	r0, 800e3ac <_Balloc+0x64>
 800e392:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e396:	e00e      	b.n	800e3b6 <_Balloc+0x6e>
 800e398:	2221      	movs	r2, #33	; 0x21
 800e39a:	2104      	movs	r1, #4
 800e39c:	4620      	mov	r0, r4
 800e39e:	f000 fc8b 	bl	800ecb8 <_calloc_r>
 800e3a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3a4:	60f0      	str	r0, [r6, #12]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1e4      	bne.n	800e376 <_Balloc+0x2e>
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	bd70      	pop	{r4, r5, r6, pc}
 800e3b0:	6802      	ldr	r2, [r0, #0]
 800e3b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e3bc:	e7f7      	b.n	800e3ae <_Balloc+0x66>
 800e3be:	bf00      	nop
 800e3c0:	080118c6 	.word	0x080118c6
 800e3c4:	080119c4 	.word	0x080119c4

0800e3c8 <_Bfree>:
 800e3c8:	b570      	push	{r4, r5, r6, lr}
 800e3ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	b976      	cbnz	r6, 800e3f0 <_Bfree+0x28>
 800e3d2:	2010      	movs	r0, #16
 800e3d4:	f7ff ff90 	bl	800e2f8 <malloc>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	6268      	str	r0, [r5, #36]	; 0x24
 800e3dc:	b920      	cbnz	r0, 800e3e8 <_Bfree+0x20>
 800e3de:	218a      	movs	r1, #138	; 0x8a
 800e3e0:	4b08      	ldr	r3, [pc, #32]	; (800e404 <_Bfree+0x3c>)
 800e3e2:	4809      	ldr	r0, [pc, #36]	; (800e408 <_Bfree+0x40>)
 800e3e4:	f000 feec 	bl	800f1c0 <__assert_func>
 800e3e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3ec:	6006      	str	r6, [r0, #0]
 800e3ee:	60c6      	str	r6, [r0, #12]
 800e3f0:	b13c      	cbz	r4, 800e402 <_Bfree+0x3a>
 800e3f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e3f4:	6862      	ldr	r2, [r4, #4]
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3fc:	6021      	str	r1, [r4, #0]
 800e3fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e402:	bd70      	pop	{r4, r5, r6, pc}
 800e404:	080118c6 	.word	0x080118c6
 800e408:	080119c4 	.word	0x080119c4

0800e40c <__multadd>:
 800e40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e410:	4607      	mov	r7, r0
 800e412:	460c      	mov	r4, r1
 800e414:	461e      	mov	r6, r3
 800e416:	2000      	movs	r0, #0
 800e418:	690d      	ldr	r5, [r1, #16]
 800e41a:	f101 0c14 	add.w	ip, r1, #20
 800e41e:	f8dc 3000 	ldr.w	r3, [ip]
 800e422:	3001      	adds	r0, #1
 800e424:	b299      	uxth	r1, r3
 800e426:	fb02 6101 	mla	r1, r2, r1, r6
 800e42a:	0c1e      	lsrs	r6, r3, #16
 800e42c:	0c0b      	lsrs	r3, r1, #16
 800e42e:	fb02 3306 	mla	r3, r2, r6, r3
 800e432:	b289      	uxth	r1, r1
 800e434:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e438:	4285      	cmp	r5, r0
 800e43a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e43e:	f84c 1b04 	str.w	r1, [ip], #4
 800e442:	dcec      	bgt.n	800e41e <__multadd+0x12>
 800e444:	b30e      	cbz	r6, 800e48a <__multadd+0x7e>
 800e446:	68a3      	ldr	r3, [r4, #8]
 800e448:	42ab      	cmp	r3, r5
 800e44a:	dc19      	bgt.n	800e480 <__multadd+0x74>
 800e44c:	6861      	ldr	r1, [r4, #4]
 800e44e:	4638      	mov	r0, r7
 800e450:	3101      	adds	r1, #1
 800e452:	f7ff ff79 	bl	800e348 <_Balloc>
 800e456:	4680      	mov	r8, r0
 800e458:	b928      	cbnz	r0, 800e466 <__multadd+0x5a>
 800e45a:	4602      	mov	r2, r0
 800e45c:	21b5      	movs	r1, #181	; 0xb5
 800e45e:	4b0c      	ldr	r3, [pc, #48]	; (800e490 <__multadd+0x84>)
 800e460:	480c      	ldr	r0, [pc, #48]	; (800e494 <__multadd+0x88>)
 800e462:	f000 fead 	bl	800f1c0 <__assert_func>
 800e466:	6922      	ldr	r2, [r4, #16]
 800e468:	f104 010c 	add.w	r1, r4, #12
 800e46c:	3202      	adds	r2, #2
 800e46e:	0092      	lsls	r2, r2, #2
 800e470:	300c      	adds	r0, #12
 800e472:	f7fd f825 	bl	800b4c0 <memcpy>
 800e476:	4621      	mov	r1, r4
 800e478:	4638      	mov	r0, r7
 800e47a:	f7ff ffa5 	bl	800e3c8 <_Bfree>
 800e47e:	4644      	mov	r4, r8
 800e480:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e484:	3501      	adds	r5, #1
 800e486:	615e      	str	r6, [r3, #20]
 800e488:	6125      	str	r5, [r4, #16]
 800e48a:	4620      	mov	r0, r4
 800e48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e490:	08011938 	.word	0x08011938
 800e494:	080119c4 	.word	0x080119c4

0800e498 <__s2b>:
 800e498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e49c:	4615      	mov	r5, r2
 800e49e:	2209      	movs	r2, #9
 800e4a0:	461f      	mov	r7, r3
 800e4a2:	3308      	adds	r3, #8
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4aa:	4606      	mov	r6, r0
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	db09      	blt.n	800e4c8 <__s2b+0x30>
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	f7ff ff47 	bl	800e348 <_Balloc>
 800e4ba:	b940      	cbnz	r0, 800e4ce <__s2b+0x36>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	21ce      	movs	r1, #206	; 0xce
 800e4c0:	4b18      	ldr	r3, [pc, #96]	; (800e524 <__s2b+0x8c>)
 800e4c2:	4819      	ldr	r0, [pc, #100]	; (800e528 <__s2b+0x90>)
 800e4c4:	f000 fe7c 	bl	800f1c0 <__assert_func>
 800e4c8:	0052      	lsls	r2, r2, #1
 800e4ca:	3101      	adds	r1, #1
 800e4cc:	e7f0      	b.n	800e4b0 <__s2b+0x18>
 800e4ce:	9b08      	ldr	r3, [sp, #32]
 800e4d0:	2d09      	cmp	r5, #9
 800e4d2:	6143      	str	r3, [r0, #20]
 800e4d4:	f04f 0301 	mov.w	r3, #1
 800e4d8:	6103      	str	r3, [r0, #16]
 800e4da:	dd16      	ble.n	800e50a <__s2b+0x72>
 800e4dc:	f104 0909 	add.w	r9, r4, #9
 800e4e0:	46c8      	mov	r8, r9
 800e4e2:	442c      	add	r4, r5
 800e4e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e4e8:	4601      	mov	r1, r0
 800e4ea:	220a      	movs	r2, #10
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	3b30      	subs	r3, #48	; 0x30
 800e4f0:	f7ff ff8c 	bl	800e40c <__multadd>
 800e4f4:	45a0      	cmp	r8, r4
 800e4f6:	d1f5      	bne.n	800e4e4 <__s2b+0x4c>
 800e4f8:	f1a5 0408 	sub.w	r4, r5, #8
 800e4fc:	444c      	add	r4, r9
 800e4fe:	1b2d      	subs	r5, r5, r4
 800e500:	1963      	adds	r3, r4, r5
 800e502:	42bb      	cmp	r3, r7
 800e504:	db04      	blt.n	800e510 <__s2b+0x78>
 800e506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e50a:	2509      	movs	r5, #9
 800e50c:	340a      	adds	r4, #10
 800e50e:	e7f6      	b.n	800e4fe <__s2b+0x66>
 800e510:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e514:	4601      	mov	r1, r0
 800e516:	220a      	movs	r2, #10
 800e518:	4630      	mov	r0, r6
 800e51a:	3b30      	subs	r3, #48	; 0x30
 800e51c:	f7ff ff76 	bl	800e40c <__multadd>
 800e520:	e7ee      	b.n	800e500 <__s2b+0x68>
 800e522:	bf00      	nop
 800e524:	08011938 	.word	0x08011938
 800e528:	080119c4 	.word	0x080119c4

0800e52c <__hi0bits>:
 800e52c:	0c02      	lsrs	r2, r0, #16
 800e52e:	0412      	lsls	r2, r2, #16
 800e530:	4603      	mov	r3, r0
 800e532:	b9ca      	cbnz	r2, 800e568 <__hi0bits+0x3c>
 800e534:	0403      	lsls	r3, r0, #16
 800e536:	2010      	movs	r0, #16
 800e538:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e53c:	bf04      	itt	eq
 800e53e:	021b      	lsleq	r3, r3, #8
 800e540:	3008      	addeq	r0, #8
 800e542:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e546:	bf04      	itt	eq
 800e548:	011b      	lsleq	r3, r3, #4
 800e54a:	3004      	addeq	r0, #4
 800e54c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e550:	bf04      	itt	eq
 800e552:	009b      	lsleq	r3, r3, #2
 800e554:	3002      	addeq	r0, #2
 800e556:	2b00      	cmp	r3, #0
 800e558:	db05      	blt.n	800e566 <__hi0bits+0x3a>
 800e55a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e55e:	f100 0001 	add.w	r0, r0, #1
 800e562:	bf08      	it	eq
 800e564:	2020      	moveq	r0, #32
 800e566:	4770      	bx	lr
 800e568:	2000      	movs	r0, #0
 800e56a:	e7e5      	b.n	800e538 <__hi0bits+0xc>

0800e56c <__lo0bits>:
 800e56c:	6803      	ldr	r3, [r0, #0]
 800e56e:	4602      	mov	r2, r0
 800e570:	f013 0007 	ands.w	r0, r3, #7
 800e574:	d00b      	beq.n	800e58e <__lo0bits+0x22>
 800e576:	07d9      	lsls	r1, r3, #31
 800e578:	d421      	bmi.n	800e5be <__lo0bits+0x52>
 800e57a:	0798      	lsls	r0, r3, #30
 800e57c:	bf49      	itett	mi
 800e57e:	085b      	lsrmi	r3, r3, #1
 800e580:	089b      	lsrpl	r3, r3, #2
 800e582:	2001      	movmi	r0, #1
 800e584:	6013      	strmi	r3, [r2, #0]
 800e586:	bf5c      	itt	pl
 800e588:	2002      	movpl	r0, #2
 800e58a:	6013      	strpl	r3, [r2, #0]
 800e58c:	4770      	bx	lr
 800e58e:	b299      	uxth	r1, r3
 800e590:	b909      	cbnz	r1, 800e596 <__lo0bits+0x2a>
 800e592:	2010      	movs	r0, #16
 800e594:	0c1b      	lsrs	r3, r3, #16
 800e596:	b2d9      	uxtb	r1, r3
 800e598:	b909      	cbnz	r1, 800e59e <__lo0bits+0x32>
 800e59a:	3008      	adds	r0, #8
 800e59c:	0a1b      	lsrs	r3, r3, #8
 800e59e:	0719      	lsls	r1, r3, #28
 800e5a0:	bf04      	itt	eq
 800e5a2:	091b      	lsreq	r3, r3, #4
 800e5a4:	3004      	addeq	r0, #4
 800e5a6:	0799      	lsls	r1, r3, #30
 800e5a8:	bf04      	itt	eq
 800e5aa:	089b      	lsreq	r3, r3, #2
 800e5ac:	3002      	addeq	r0, #2
 800e5ae:	07d9      	lsls	r1, r3, #31
 800e5b0:	d403      	bmi.n	800e5ba <__lo0bits+0x4e>
 800e5b2:	085b      	lsrs	r3, r3, #1
 800e5b4:	f100 0001 	add.w	r0, r0, #1
 800e5b8:	d003      	beq.n	800e5c2 <__lo0bits+0x56>
 800e5ba:	6013      	str	r3, [r2, #0]
 800e5bc:	4770      	bx	lr
 800e5be:	2000      	movs	r0, #0
 800e5c0:	4770      	bx	lr
 800e5c2:	2020      	movs	r0, #32
 800e5c4:	4770      	bx	lr
	...

0800e5c8 <__i2b>:
 800e5c8:	b510      	push	{r4, lr}
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	2101      	movs	r1, #1
 800e5ce:	f7ff febb 	bl	800e348 <_Balloc>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	b928      	cbnz	r0, 800e5e2 <__i2b+0x1a>
 800e5d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e5da:	4b04      	ldr	r3, [pc, #16]	; (800e5ec <__i2b+0x24>)
 800e5dc:	4804      	ldr	r0, [pc, #16]	; (800e5f0 <__i2b+0x28>)
 800e5de:	f000 fdef 	bl	800f1c0 <__assert_func>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	6144      	str	r4, [r0, #20]
 800e5e6:	6103      	str	r3, [r0, #16]
 800e5e8:	bd10      	pop	{r4, pc}
 800e5ea:	bf00      	nop
 800e5ec:	08011938 	.word	0x08011938
 800e5f0:	080119c4 	.word	0x080119c4

0800e5f4 <__multiply>:
 800e5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f8:	4691      	mov	r9, r2
 800e5fa:	690a      	ldr	r2, [r1, #16]
 800e5fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e600:	460c      	mov	r4, r1
 800e602:	429a      	cmp	r2, r3
 800e604:	bfbe      	ittt	lt
 800e606:	460b      	movlt	r3, r1
 800e608:	464c      	movlt	r4, r9
 800e60a:	4699      	movlt	r9, r3
 800e60c:	6927      	ldr	r7, [r4, #16]
 800e60e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e612:	68a3      	ldr	r3, [r4, #8]
 800e614:	6861      	ldr	r1, [r4, #4]
 800e616:	eb07 060a 	add.w	r6, r7, sl
 800e61a:	42b3      	cmp	r3, r6
 800e61c:	b085      	sub	sp, #20
 800e61e:	bfb8      	it	lt
 800e620:	3101      	addlt	r1, #1
 800e622:	f7ff fe91 	bl	800e348 <_Balloc>
 800e626:	b930      	cbnz	r0, 800e636 <__multiply+0x42>
 800e628:	4602      	mov	r2, r0
 800e62a:	f240 115d 	movw	r1, #349	; 0x15d
 800e62e:	4b43      	ldr	r3, [pc, #268]	; (800e73c <__multiply+0x148>)
 800e630:	4843      	ldr	r0, [pc, #268]	; (800e740 <__multiply+0x14c>)
 800e632:	f000 fdc5 	bl	800f1c0 <__assert_func>
 800e636:	f100 0514 	add.w	r5, r0, #20
 800e63a:	462b      	mov	r3, r5
 800e63c:	2200      	movs	r2, #0
 800e63e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e642:	4543      	cmp	r3, r8
 800e644:	d321      	bcc.n	800e68a <__multiply+0x96>
 800e646:	f104 0314 	add.w	r3, r4, #20
 800e64a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e64e:	f109 0314 	add.w	r3, r9, #20
 800e652:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e656:	9202      	str	r2, [sp, #8]
 800e658:	1b3a      	subs	r2, r7, r4
 800e65a:	3a15      	subs	r2, #21
 800e65c:	f022 0203 	bic.w	r2, r2, #3
 800e660:	3204      	adds	r2, #4
 800e662:	f104 0115 	add.w	r1, r4, #21
 800e666:	428f      	cmp	r7, r1
 800e668:	bf38      	it	cc
 800e66a:	2204      	movcc	r2, #4
 800e66c:	9201      	str	r2, [sp, #4]
 800e66e:	9a02      	ldr	r2, [sp, #8]
 800e670:	9303      	str	r3, [sp, #12]
 800e672:	429a      	cmp	r2, r3
 800e674:	d80c      	bhi.n	800e690 <__multiply+0x9c>
 800e676:	2e00      	cmp	r6, #0
 800e678:	dd03      	ble.n	800e682 <__multiply+0x8e>
 800e67a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d059      	beq.n	800e736 <__multiply+0x142>
 800e682:	6106      	str	r6, [r0, #16]
 800e684:	b005      	add	sp, #20
 800e686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68a:	f843 2b04 	str.w	r2, [r3], #4
 800e68e:	e7d8      	b.n	800e642 <__multiply+0x4e>
 800e690:	f8b3 a000 	ldrh.w	sl, [r3]
 800e694:	f1ba 0f00 	cmp.w	sl, #0
 800e698:	d023      	beq.n	800e6e2 <__multiply+0xee>
 800e69a:	46a9      	mov	r9, r5
 800e69c:	f04f 0c00 	mov.w	ip, #0
 800e6a0:	f104 0e14 	add.w	lr, r4, #20
 800e6a4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e6a8:	f8d9 1000 	ldr.w	r1, [r9]
 800e6ac:	fa1f fb82 	uxth.w	fp, r2
 800e6b0:	b289      	uxth	r1, r1
 800e6b2:	fb0a 110b 	mla	r1, sl, fp, r1
 800e6b6:	4461      	add	r1, ip
 800e6b8:	f8d9 c000 	ldr.w	ip, [r9]
 800e6bc:	0c12      	lsrs	r2, r2, #16
 800e6be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800e6c2:	fb0a c202 	mla	r2, sl, r2, ip
 800e6c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e6ca:	b289      	uxth	r1, r1
 800e6cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e6d0:	4577      	cmp	r7, lr
 800e6d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6d6:	f849 1b04 	str.w	r1, [r9], #4
 800e6da:	d8e3      	bhi.n	800e6a4 <__multiply+0xb0>
 800e6dc:	9a01      	ldr	r2, [sp, #4]
 800e6de:	f845 c002 	str.w	ip, [r5, r2]
 800e6e2:	9a03      	ldr	r2, [sp, #12]
 800e6e4:	3304      	adds	r3, #4
 800e6e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e6ea:	f1b9 0f00 	cmp.w	r9, #0
 800e6ee:	d020      	beq.n	800e732 <__multiply+0x13e>
 800e6f0:	46ae      	mov	lr, r5
 800e6f2:	f04f 0a00 	mov.w	sl, #0
 800e6f6:	6829      	ldr	r1, [r5, #0]
 800e6f8:	f104 0c14 	add.w	ip, r4, #20
 800e6fc:	f8bc b000 	ldrh.w	fp, [ip]
 800e700:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e704:	b289      	uxth	r1, r1
 800e706:	fb09 220b 	mla	r2, r9, fp, r2
 800e70a:	4492      	add	sl, r2
 800e70c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e710:	f84e 1b04 	str.w	r1, [lr], #4
 800e714:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e718:	f8be 1000 	ldrh.w	r1, [lr]
 800e71c:	0c12      	lsrs	r2, r2, #16
 800e71e:	fb09 1102 	mla	r1, r9, r2, r1
 800e722:	4567      	cmp	r7, ip
 800e724:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e728:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e72c:	d8e6      	bhi.n	800e6fc <__multiply+0x108>
 800e72e:	9a01      	ldr	r2, [sp, #4]
 800e730:	50a9      	str	r1, [r5, r2]
 800e732:	3504      	adds	r5, #4
 800e734:	e79b      	b.n	800e66e <__multiply+0x7a>
 800e736:	3e01      	subs	r6, #1
 800e738:	e79d      	b.n	800e676 <__multiply+0x82>
 800e73a:	bf00      	nop
 800e73c:	08011938 	.word	0x08011938
 800e740:	080119c4 	.word	0x080119c4

0800e744 <__pow5mult>:
 800e744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e748:	4615      	mov	r5, r2
 800e74a:	f012 0203 	ands.w	r2, r2, #3
 800e74e:	4606      	mov	r6, r0
 800e750:	460f      	mov	r7, r1
 800e752:	d007      	beq.n	800e764 <__pow5mult+0x20>
 800e754:	4c25      	ldr	r4, [pc, #148]	; (800e7ec <__pow5mult+0xa8>)
 800e756:	3a01      	subs	r2, #1
 800e758:	2300      	movs	r3, #0
 800e75a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e75e:	f7ff fe55 	bl	800e40c <__multadd>
 800e762:	4607      	mov	r7, r0
 800e764:	10ad      	asrs	r5, r5, #2
 800e766:	d03d      	beq.n	800e7e4 <__pow5mult+0xa0>
 800e768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e76a:	b97c      	cbnz	r4, 800e78c <__pow5mult+0x48>
 800e76c:	2010      	movs	r0, #16
 800e76e:	f7ff fdc3 	bl	800e2f8 <malloc>
 800e772:	4602      	mov	r2, r0
 800e774:	6270      	str	r0, [r6, #36]	; 0x24
 800e776:	b928      	cbnz	r0, 800e784 <__pow5mult+0x40>
 800e778:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e77c:	4b1c      	ldr	r3, [pc, #112]	; (800e7f0 <__pow5mult+0xac>)
 800e77e:	481d      	ldr	r0, [pc, #116]	; (800e7f4 <__pow5mult+0xb0>)
 800e780:	f000 fd1e 	bl	800f1c0 <__assert_func>
 800e784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e788:	6004      	str	r4, [r0, #0]
 800e78a:	60c4      	str	r4, [r0, #12]
 800e78c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e794:	b94c      	cbnz	r4, 800e7aa <__pow5mult+0x66>
 800e796:	f240 2171 	movw	r1, #625	; 0x271
 800e79a:	4630      	mov	r0, r6
 800e79c:	f7ff ff14 	bl	800e5c8 <__i2b>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7a8:	6003      	str	r3, [r0, #0]
 800e7aa:	f04f 0900 	mov.w	r9, #0
 800e7ae:	07eb      	lsls	r3, r5, #31
 800e7b0:	d50a      	bpl.n	800e7c8 <__pow5mult+0x84>
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	4622      	mov	r2, r4
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f7ff ff1c 	bl	800e5f4 <__multiply>
 800e7bc:	4680      	mov	r8, r0
 800e7be:	4639      	mov	r1, r7
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	f7ff fe01 	bl	800e3c8 <_Bfree>
 800e7c6:	4647      	mov	r7, r8
 800e7c8:	106d      	asrs	r5, r5, #1
 800e7ca:	d00b      	beq.n	800e7e4 <__pow5mult+0xa0>
 800e7cc:	6820      	ldr	r0, [r4, #0]
 800e7ce:	b938      	cbnz	r0, 800e7e0 <__pow5mult+0x9c>
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	4621      	mov	r1, r4
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	f7ff ff0d 	bl	800e5f4 <__multiply>
 800e7da:	6020      	str	r0, [r4, #0]
 800e7dc:	f8c0 9000 	str.w	r9, [r0]
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	e7e4      	b.n	800e7ae <__pow5mult+0x6a>
 800e7e4:	4638      	mov	r0, r7
 800e7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ea:	bf00      	nop
 800e7ec:	08011b10 	.word	0x08011b10
 800e7f0:	080118c6 	.word	0x080118c6
 800e7f4:	080119c4 	.word	0x080119c4

0800e7f8 <__lshift>:
 800e7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	4607      	mov	r7, r0
 800e800:	4691      	mov	r9, r2
 800e802:	6923      	ldr	r3, [r4, #16]
 800e804:	6849      	ldr	r1, [r1, #4]
 800e806:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e80a:	68a3      	ldr	r3, [r4, #8]
 800e80c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e810:	f108 0601 	add.w	r6, r8, #1
 800e814:	42b3      	cmp	r3, r6
 800e816:	db0b      	blt.n	800e830 <__lshift+0x38>
 800e818:	4638      	mov	r0, r7
 800e81a:	f7ff fd95 	bl	800e348 <_Balloc>
 800e81e:	4605      	mov	r5, r0
 800e820:	b948      	cbnz	r0, 800e836 <__lshift+0x3e>
 800e822:	4602      	mov	r2, r0
 800e824:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e828:	4b29      	ldr	r3, [pc, #164]	; (800e8d0 <__lshift+0xd8>)
 800e82a:	482a      	ldr	r0, [pc, #168]	; (800e8d4 <__lshift+0xdc>)
 800e82c:	f000 fcc8 	bl	800f1c0 <__assert_func>
 800e830:	3101      	adds	r1, #1
 800e832:	005b      	lsls	r3, r3, #1
 800e834:	e7ee      	b.n	800e814 <__lshift+0x1c>
 800e836:	2300      	movs	r3, #0
 800e838:	f100 0114 	add.w	r1, r0, #20
 800e83c:	f100 0210 	add.w	r2, r0, #16
 800e840:	4618      	mov	r0, r3
 800e842:	4553      	cmp	r3, sl
 800e844:	db37      	blt.n	800e8b6 <__lshift+0xbe>
 800e846:	6920      	ldr	r0, [r4, #16]
 800e848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e84c:	f104 0314 	add.w	r3, r4, #20
 800e850:	f019 091f 	ands.w	r9, r9, #31
 800e854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e858:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e85c:	d02f      	beq.n	800e8be <__lshift+0xc6>
 800e85e:	468a      	mov	sl, r1
 800e860:	f04f 0c00 	mov.w	ip, #0
 800e864:	f1c9 0e20 	rsb	lr, r9, #32
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	fa02 f209 	lsl.w	r2, r2, r9
 800e86e:	ea42 020c 	orr.w	r2, r2, ip
 800e872:	f84a 2b04 	str.w	r2, [sl], #4
 800e876:	f853 2b04 	ldr.w	r2, [r3], #4
 800e87a:	4298      	cmp	r0, r3
 800e87c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e880:	d8f2      	bhi.n	800e868 <__lshift+0x70>
 800e882:	1b03      	subs	r3, r0, r4
 800e884:	3b15      	subs	r3, #21
 800e886:	f023 0303 	bic.w	r3, r3, #3
 800e88a:	3304      	adds	r3, #4
 800e88c:	f104 0215 	add.w	r2, r4, #21
 800e890:	4290      	cmp	r0, r2
 800e892:	bf38      	it	cc
 800e894:	2304      	movcc	r3, #4
 800e896:	f841 c003 	str.w	ip, [r1, r3]
 800e89a:	f1bc 0f00 	cmp.w	ip, #0
 800e89e:	d001      	beq.n	800e8a4 <__lshift+0xac>
 800e8a0:	f108 0602 	add.w	r6, r8, #2
 800e8a4:	3e01      	subs	r6, #1
 800e8a6:	4638      	mov	r0, r7
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	612e      	str	r6, [r5, #16]
 800e8ac:	f7ff fd8c 	bl	800e3c8 <_Bfree>
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	e7c1      	b.n	800e842 <__lshift+0x4a>
 800e8be:	3904      	subs	r1, #4
 800e8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8c4:	4298      	cmp	r0, r3
 800e8c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800e8ca:	d8f9      	bhi.n	800e8c0 <__lshift+0xc8>
 800e8cc:	e7ea      	b.n	800e8a4 <__lshift+0xac>
 800e8ce:	bf00      	nop
 800e8d0:	08011938 	.word	0x08011938
 800e8d4:	080119c4 	.word	0x080119c4

0800e8d8 <__mcmp>:
 800e8d8:	4603      	mov	r3, r0
 800e8da:	690a      	ldr	r2, [r1, #16]
 800e8dc:	6900      	ldr	r0, [r0, #16]
 800e8de:	b530      	push	{r4, r5, lr}
 800e8e0:	1a80      	subs	r0, r0, r2
 800e8e2:	d10d      	bne.n	800e900 <__mcmp+0x28>
 800e8e4:	3314      	adds	r3, #20
 800e8e6:	3114      	adds	r1, #20
 800e8e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e8ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e8f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e8f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e8f8:	4295      	cmp	r5, r2
 800e8fa:	d002      	beq.n	800e902 <__mcmp+0x2a>
 800e8fc:	d304      	bcc.n	800e908 <__mcmp+0x30>
 800e8fe:	2001      	movs	r0, #1
 800e900:	bd30      	pop	{r4, r5, pc}
 800e902:	42a3      	cmp	r3, r4
 800e904:	d3f4      	bcc.n	800e8f0 <__mcmp+0x18>
 800e906:	e7fb      	b.n	800e900 <__mcmp+0x28>
 800e908:	f04f 30ff 	mov.w	r0, #4294967295
 800e90c:	e7f8      	b.n	800e900 <__mcmp+0x28>
	...

0800e910 <__mdiff>:
 800e910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	460d      	mov	r5, r1
 800e916:	4607      	mov	r7, r0
 800e918:	4611      	mov	r1, r2
 800e91a:	4628      	mov	r0, r5
 800e91c:	4614      	mov	r4, r2
 800e91e:	f7ff ffdb 	bl	800e8d8 <__mcmp>
 800e922:	1e06      	subs	r6, r0, #0
 800e924:	d111      	bne.n	800e94a <__mdiff+0x3a>
 800e926:	4631      	mov	r1, r6
 800e928:	4638      	mov	r0, r7
 800e92a:	f7ff fd0d 	bl	800e348 <_Balloc>
 800e92e:	4602      	mov	r2, r0
 800e930:	b928      	cbnz	r0, 800e93e <__mdiff+0x2e>
 800e932:	f240 2132 	movw	r1, #562	; 0x232
 800e936:	4b3a      	ldr	r3, [pc, #232]	; (800ea20 <__mdiff+0x110>)
 800e938:	483a      	ldr	r0, [pc, #232]	; (800ea24 <__mdiff+0x114>)
 800e93a:	f000 fc41 	bl	800f1c0 <__assert_func>
 800e93e:	2301      	movs	r3, #1
 800e940:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e944:	4610      	mov	r0, r2
 800e946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e94a:	bfa4      	itt	ge
 800e94c:	4623      	movge	r3, r4
 800e94e:	462c      	movge	r4, r5
 800e950:	4638      	mov	r0, r7
 800e952:	6861      	ldr	r1, [r4, #4]
 800e954:	bfa6      	itte	ge
 800e956:	461d      	movge	r5, r3
 800e958:	2600      	movge	r6, #0
 800e95a:	2601      	movlt	r6, #1
 800e95c:	f7ff fcf4 	bl	800e348 <_Balloc>
 800e960:	4602      	mov	r2, r0
 800e962:	b918      	cbnz	r0, 800e96c <__mdiff+0x5c>
 800e964:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e968:	4b2d      	ldr	r3, [pc, #180]	; (800ea20 <__mdiff+0x110>)
 800e96a:	e7e5      	b.n	800e938 <__mdiff+0x28>
 800e96c:	f102 0814 	add.w	r8, r2, #20
 800e970:	46c2      	mov	sl, r8
 800e972:	f04f 0c00 	mov.w	ip, #0
 800e976:	6927      	ldr	r7, [r4, #16]
 800e978:	60c6      	str	r6, [r0, #12]
 800e97a:	692e      	ldr	r6, [r5, #16]
 800e97c:	f104 0014 	add.w	r0, r4, #20
 800e980:	f105 0914 	add.w	r9, r5, #20
 800e984:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800e988:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e98c:	3410      	adds	r4, #16
 800e98e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800e992:	f859 3b04 	ldr.w	r3, [r9], #4
 800e996:	fa1f f18b 	uxth.w	r1, fp
 800e99a:	448c      	add	ip, r1
 800e99c:	b299      	uxth	r1, r3
 800e99e:	0c1b      	lsrs	r3, r3, #16
 800e9a0:	ebac 0101 	sub.w	r1, ip, r1
 800e9a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e9a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e9ac:	b289      	uxth	r1, r1
 800e9ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e9b2:	454e      	cmp	r6, r9
 800e9b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e9b8:	f84a 3b04 	str.w	r3, [sl], #4
 800e9bc:	d8e7      	bhi.n	800e98e <__mdiff+0x7e>
 800e9be:	1b73      	subs	r3, r6, r5
 800e9c0:	3b15      	subs	r3, #21
 800e9c2:	f023 0303 	bic.w	r3, r3, #3
 800e9c6:	3515      	adds	r5, #21
 800e9c8:	3304      	adds	r3, #4
 800e9ca:	42ae      	cmp	r6, r5
 800e9cc:	bf38      	it	cc
 800e9ce:	2304      	movcc	r3, #4
 800e9d0:	4418      	add	r0, r3
 800e9d2:	4443      	add	r3, r8
 800e9d4:	461e      	mov	r6, r3
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	4575      	cmp	r5, lr
 800e9da:	d30e      	bcc.n	800e9fa <__mdiff+0xea>
 800e9dc:	f10e 0103 	add.w	r1, lr, #3
 800e9e0:	1a09      	subs	r1, r1, r0
 800e9e2:	f021 0103 	bic.w	r1, r1, #3
 800e9e6:	3803      	subs	r0, #3
 800e9e8:	4586      	cmp	lr, r0
 800e9ea:	bf38      	it	cc
 800e9ec:	2100      	movcc	r1, #0
 800e9ee:	4419      	add	r1, r3
 800e9f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e9f4:	b18b      	cbz	r3, 800ea1a <__mdiff+0x10a>
 800e9f6:	6117      	str	r7, [r2, #16]
 800e9f8:	e7a4      	b.n	800e944 <__mdiff+0x34>
 800e9fa:	f855 8b04 	ldr.w	r8, [r5], #4
 800e9fe:	fa1f f188 	uxth.w	r1, r8
 800ea02:	4461      	add	r1, ip
 800ea04:	140c      	asrs	r4, r1, #16
 800ea06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea0a:	b289      	uxth	r1, r1
 800ea0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ea10:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ea14:	f846 1b04 	str.w	r1, [r6], #4
 800ea18:	e7de      	b.n	800e9d8 <__mdiff+0xc8>
 800ea1a:	3f01      	subs	r7, #1
 800ea1c:	e7e8      	b.n	800e9f0 <__mdiff+0xe0>
 800ea1e:	bf00      	nop
 800ea20:	08011938 	.word	0x08011938
 800ea24:	080119c4 	.word	0x080119c4

0800ea28 <__ulp>:
 800ea28:	4b11      	ldr	r3, [pc, #68]	; (800ea70 <__ulp+0x48>)
 800ea2a:	400b      	ands	r3, r1
 800ea2c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	dd02      	ble.n	800ea3a <__ulp+0x12>
 800ea34:	2000      	movs	r0, #0
 800ea36:	4619      	mov	r1, r3
 800ea38:	4770      	bx	lr
 800ea3a:	425b      	negs	r3, r3
 800ea3c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ea40:	f04f 0000 	mov.w	r0, #0
 800ea44:	f04f 0100 	mov.w	r1, #0
 800ea48:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ea4c:	da04      	bge.n	800ea58 <__ulp+0x30>
 800ea4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ea52:	fa43 f102 	asr.w	r1, r3, r2
 800ea56:	4770      	bx	lr
 800ea58:	f1a2 0314 	sub.w	r3, r2, #20
 800ea5c:	2b1e      	cmp	r3, #30
 800ea5e:	bfd6      	itet	le
 800ea60:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ea64:	2301      	movgt	r3, #1
 800ea66:	fa22 f303 	lsrle.w	r3, r2, r3
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop
 800ea70:	7ff00000 	.word	0x7ff00000

0800ea74 <__b2d>:
 800ea74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea78:	6907      	ldr	r7, [r0, #16]
 800ea7a:	f100 0914 	add.w	r9, r0, #20
 800ea7e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ea82:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ea86:	f1a7 0804 	sub.w	r8, r7, #4
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	f7ff fd4e 	bl	800e52c <__hi0bits>
 800ea90:	f1c0 0320 	rsb	r3, r0, #32
 800ea94:	280a      	cmp	r0, #10
 800ea96:	600b      	str	r3, [r1, #0]
 800ea98:	491f      	ldr	r1, [pc, #124]	; (800eb18 <__b2d+0xa4>)
 800ea9a:	dc17      	bgt.n	800eacc <__b2d+0x58>
 800ea9c:	45c1      	cmp	r9, r8
 800ea9e:	bf28      	it	cs
 800eaa0:	2200      	movcs	r2, #0
 800eaa2:	f1c0 0c0b 	rsb	ip, r0, #11
 800eaa6:	fa26 f30c 	lsr.w	r3, r6, ip
 800eaaa:	bf38      	it	cc
 800eaac:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800eab0:	ea43 0501 	orr.w	r5, r3, r1
 800eab4:	f100 0315 	add.w	r3, r0, #21
 800eab8:	fa06 f303 	lsl.w	r3, r6, r3
 800eabc:	fa22 f20c 	lsr.w	r2, r2, ip
 800eac0:	ea43 0402 	orr.w	r4, r3, r2
 800eac4:	4620      	mov	r0, r4
 800eac6:	4629      	mov	r1, r5
 800eac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eacc:	45c1      	cmp	r9, r8
 800eace:	bf2e      	itee	cs
 800ead0:	2200      	movcs	r2, #0
 800ead2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ead6:	f1a7 0808 	subcc.w	r8, r7, #8
 800eada:	f1b0 030b 	subs.w	r3, r0, #11
 800eade:	d016      	beq.n	800eb0e <__b2d+0x9a>
 800eae0:	f1c3 0720 	rsb	r7, r3, #32
 800eae4:	fa22 f107 	lsr.w	r1, r2, r7
 800eae8:	45c8      	cmp	r8, r9
 800eaea:	fa06 f603 	lsl.w	r6, r6, r3
 800eaee:	ea46 0601 	orr.w	r6, r6, r1
 800eaf2:	bf94      	ite	ls
 800eaf4:	2100      	movls	r1, #0
 800eaf6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800eafa:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800eafe:	fa02 f003 	lsl.w	r0, r2, r3
 800eb02:	40f9      	lsrs	r1, r7
 800eb04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eb08:	ea40 0401 	orr.w	r4, r0, r1
 800eb0c:	e7da      	b.n	800eac4 <__b2d+0x50>
 800eb0e:	4614      	mov	r4, r2
 800eb10:	ea46 0501 	orr.w	r5, r6, r1
 800eb14:	e7d6      	b.n	800eac4 <__b2d+0x50>
 800eb16:	bf00      	nop
 800eb18:	3ff00000 	.word	0x3ff00000

0800eb1c <__d2b>:
 800eb1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800eb20:	2101      	movs	r1, #1
 800eb22:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800eb26:	4690      	mov	r8, r2
 800eb28:	461d      	mov	r5, r3
 800eb2a:	f7ff fc0d 	bl	800e348 <_Balloc>
 800eb2e:	4604      	mov	r4, r0
 800eb30:	b930      	cbnz	r0, 800eb40 <__d2b+0x24>
 800eb32:	4602      	mov	r2, r0
 800eb34:	f240 310a 	movw	r1, #778	; 0x30a
 800eb38:	4b24      	ldr	r3, [pc, #144]	; (800ebcc <__d2b+0xb0>)
 800eb3a:	4825      	ldr	r0, [pc, #148]	; (800ebd0 <__d2b+0xb4>)
 800eb3c:	f000 fb40 	bl	800f1c0 <__assert_func>
 800eb40:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800eb44:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800eb48:	bb2d      	cbnz	r5, 800eb96 <__d2b+0x7a>
 800eb4a:	9301      	str	r3, [sp, #4]
 800eb4c:	f1b8 0300 	subs.w	r3, r8, #0
 800eb50:	d026      	beq.n	800eba0 <__d2b+0x84>
 800eb52:	4668      	mov	r0, sp
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	f7ff fd09 	bl	800e56c <__lo0bits>
 800eb5a:	9900      	ldr	r1, [sp, #0]
 800eb5c:	b1f0      	cbz	r0, 800eb9c <__d2b+0x80>
 800eb5e:	9a01      	ldr	r2, [sp, #4]
 800eb60:	f1c0 0320 	rsb	r3, r0, #32
 800eb64:	fa02 f303 	lsl.w	r3, r2, r3
 800eb68:	430b      	orrs	r3, r1
 800eb6a:	40c2      	lsrs	r2, r0
 800eb6c:	6163      	str	r3, [r4, #20]
 800eb6e:	9201      	str	r2, [sp, #4]
 800eb70:	9b01      	ldr	r3, [sp, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	bf14      	ite	ne
 800eb76:	2102      	movne	r1, #2
 800eb78:	2101      	moveq	r1, #1
 800eb7a:	61a3      	str	r3, [r4, #24]
 800eb7c:	6121      	str	r1, [r4, #16]
 800eb7e:	b1c5      	cbz	r5, 800ebb2 <__d2b+0x96>
 800eb80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb84:	4405      	add	r5, r0
 800eb86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb8a:	603d      	str	r5, [r7, #0]
 800eb8c:	6030      	str	r0, [r6, #0]
 800eb8e:	4620      	mov	r0, r4
 800eb90:	b002      	add	sp, #8
 800eb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb9a:	e7d6      	b.n	800eb4a <__d2b+0x2e>
 800eb9c:	6161      	str	r1, [r4, #20]
 800eb9e:	e7e7      	b.n	800eb70 <__d2b+0x54>
 800eba0:	a801      	add	r0, sp, #4
 800eba2:	f7ff fce3 	bl	800e56c <__lo0bits>
 800eba6:	2101      	movs	r1, #1
 800eba8:	9b01      	ldr	r3, [sp, #4]
 800ebaa:	6121      	str	r1, [r4, #16]
 800ebac:	6163      	str	r3, [r4, #20]
 800ebae:	3020      	adds	r0, #32
 800ebb0:	e7e5      	b.n	800eb7e <__d2b+0x62>
 800ebb2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ebb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ebba:	6038      	str	r0, [r7, #0]
 800ebbc:	6918      	ldr	r0, [r3, #16]
 800ebbe:	f7ff fcb5 	bl	800e52c <__hi0bits>
 800ebc2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ebc6:	6031      	str	r1, [r6, #0]
 800ebc8:	e7e1      	b.n	800eb8e <__d2b+0x72>
 800ebca:	bf00      	nop
 800ebcc:	08011938 	.word	0x08011938
 800ebd0:	080119c4 	.word	0x080119c4

0800ebd4 <__ratio>:
 800ebd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd8:	4688      	mov	r8, r1
 800ebda:	4669      	mov	r1, sp
 800ebdc:	4681      	mov	r9, r0
 800ebde:	f7ff ff49 	bl	800ea74 <__b2d>
 800ebe2:	460f      	mov	r7, r1
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	460d      	mov	r5, r1
 800ebe8:	4640      	mov	r0, r8
 800ebea:	a901      	add	r1, sp, #4
 800ebec:	f7ff ff42 	bl	800ea74 <__b2d>
 800ebf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ebf4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ebf8:	468b      	mov	fp, r1
 800ebfa:	eba3 0c02 	sub.w	ip, r3, r2
 800ebfe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec02:	1a9b      	subs	r3, r3, r2
 800ec04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	bfd5      	itete	le
 800ec0c:	460a      	movle	r2, r1
 800ec0e:	462a      	movgt	r2, r5
 800ec10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ec14:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ec18:	bfd8      	it	le
 800ec1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ec1e:	465b      	mov	r3, fp
 800ec20:	4602      	mov	r2, r0
 800ec22:	4639      	mov	r1, r7
 800ec24:	4620      	mov	r0, r4
 800ec26:	f7f1 fdf1 	bl	800080c <__aeabi_ddiv>
 800ec2a:	b003      	add	sp, #12
 800ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec30 <__copybits>:
 800ec30:	3901      	subs	r1, #1
 800ec32:	b570      	push	{r4, r5, r6, lr}
 800ec34:	1149      	asrs	r1, r1, #5
 800ec36:	6914      	ldr	r4, [r2, #16]
 800ec38:	3101      	adds	r1, #1
 800ec3a:	f102 0314 	add.w	r3, r2, #20
 800ec3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ec42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ec46:	1f05      	subs	r5, r0, #4
 800ec48:	42a3      	cmp	r3, r4
 800ec4a:	d30c      	bcc.n	800ec66 <__copybits+0x36>
 800ec4c:	1aa3      	subs	r3, r4, r2
 800ec4e:	3b11      	subs	r3, #17
 800ec50:	f023 0303 	bic.w	r3, r3, #3
 800ec54:	3211      	adds	r2, #17
 800ec56:	42a2      	cmp	r2, r4
 800ec58:	bf88      	it	hi
 800ec5a:	2300      	movhi	r3, #0
 800ec5c:	4418      	add	r0, r3
 800ec5e:	2300      	movs	r3, #0
 800ec60:	4288      	cmp	r0, r1
 800ec62:	d305      	bcc.n	800ec70 <__copybits+0x40>
 800ec64:	bd70      	pop	{r4, r5, r6, pc}
 800ec66:	f853 6b04 	ldr.w	r6, [r3], #4
 800ec6a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ec6e:	e7eb      	b.n	800ec48 <__copybits+0x18>
 800ec70:	f840 3b04 	str.w	r3, [r0], #4
 800ec74:	e7f4      	b.n	800ec60 <__copybits+0x30>

0800ec76 <__any_on>:
 800ec76:	f100 0214 	add.w	r2, r0, #20
 800ec7a:	6900      	ldr	r0, [r0, #16]
 800ec7c:	114b      	asrs	r3, r1, #5
 800ec7e:	4298      	cmp	r0, r3
 800ec80:	b510      	push	{r4, lr}
 800ec82:	db11      	blt.n	800eca8 <__any_on+0x32>
 800ec84:	dd0a      	ble.n	800ec9c <__any_on+0x26>
 800ec86:	f011 011f 	ands.w	r1, r1, #31
 800ec8a:	d007      	beq.n	800ec9c <__any_on+0x26>
 800ec8c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ec90:	fa24 f001 	lsr.w	r0, r4, r1
 800ec94:	fa00 f101 	lsl.w	r1, r0, r1
 800ec98:	428c      	cmp	r4, r1
 800ec9a:	d10b      	bne.n	800ecb4 <__any_on+0x3e>
 800ec9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d803      	bhi.n	800ecac <__any_on+0x36>
 800eca4:	2000      	movs	r0, #0
 800eca6:	bd10      	pop	{r4, pc}
 800eca8:	4603      	mov	r3, r0
 800ecaa:	e7f7      	b.n	800ec9c <__any_on+0x26>
 800ecac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ecb0:	2900      	cmp	r1, #0
 800ecb2:	d0f5      	beq.n	800eca0 <__any_on+0x2a>
 800ecb4:	2001      	movs	r0, #1
 800ecb6:	e7f6      	b.n	800eca6 <__any_on+0x30>

0800ecb8 <_calloc_r>:
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	fba1 5402 	umull	r5, r4, r1, r2
 800ecbe:	b934      	cbnz	r4, 800ecce <_calloc_r+0x16>
 800ecc0:	4629      	mov	r1, r5
 800ecc2:	f000 f875 	bl	800edb0 <_malloc_r>
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	b928      	cbnz	r0, 800ecd6 <_calloc_r+0x1e>
 800ecca:	4630      	mov	r0, r6
 800eccc:	bd70      	pop	{r4, r5, r6, pc}
 800ecce:	220c      	movs	r2, #12
 800ecd0:	2600      	movs	r6, #0
 800ecd2:	6002      	str	r2, [r0, #0]
 800ecd4:	e7f9      	b.n	800ecca <_calloc_r+0x12>
 800ecd6:	462a      	mov	r2, r5
 800ecd8:	4621      	mov	r1, r4
 800ecda:	f7fc fbff 	bl	800b4dc <memset>
 800ecde:	e7f4      	b.n	800ecca <_calloc_r+0x12>

0800ece0 <_free_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4605      	mov	r5, r0
 800ece4:	2900      	cmp	r1, #0
 800ece6:	d040      	beq.n	800ed6a <_free_r+0x8a>
 800ece8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecec:	1f0c      	subs	r4, r1, #4
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	bfb8      	it	lt
 800ecf2:	18e4      	addlt	r4, r4, r3
 800ecf4:	f000 faae 	bl	800f254 <__malloc_lock>
 800ecf8:	4a1c      	ldr	r2, [pc, #112]	; (800ed6c <_free_r+0x8c>)
 800ecfa:	6813      	ldr	r3, [r2, #0]
 800ecfc:	b933      	cbnz	r3, 800ed0c <_free_r+0x2c>
 800ecfe:	6063      	str	r3, [r4, #4]
 800ed00:	6014      	str	r4, [r2, #0]
 800ed02:	4628      	mov	r0, r5
 800ed04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed08:	f000 baaa 	b.w	800f260 <__malloc_unlock>
 800ed0c:	42a3      	cmp	r3, r4
 800ed0e:	d908      	bls.n	800ed22 <_free_r+0x42>
 800ed10:	6820      	ldr	r0, [r4, #0]
 800ed12:	1821      	adds	r1, r4, r0
 800ed14:	428b      	cmp	r3, r1
 800ed16:	bf01      	itttt	eq
 800ed18:	6819      	ldreq	r1, [r3, #0]
 800ed1a:	685b      	ldreq	r3, [r3, #4]
 800ed1c:	1809      	addeq	r1, r1, r0
 800ed1e:	6021      	streq	r1, [r4, #0]
 800ed20:	e7ed      	b.n	800ecfe <_free_r+0x1e>
 800ed22:	461a      	mov	r2, r3
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	b10b      	cbz	r3, 800ed2c <_free_r+0x4c>
 800ed28:	42a3      	cmp	r3, r4
 800ed2a:	d9fa      	bls.n	800ed22 <_free_r+0x42>
 800ed2c:	6811      	ldr	r1, [r2, #0]
 800ed2e:	1850      	adds	r0, r2, r1
 800ed30:	42a0      	cmp	r0, r4
 800ed32:	d10b      	bne.n	800ed4c <_free_r+0x6c>
 800ed34:	6820      	ldr	r0, [r4, #0]
 800ed36:	4401      	add	r1, r0
 800ed38:	1850      	adds	r0, r2, r1
 800ed3a:	4283      	cmp	r3, r0
 800ed3c:	6011      	str	r1, [r2, #0]
 800ed3e:	d1e0      	bne.n	800ed02 <_free_r+0x22>
 800ed40:	6818      	ldr	r0, [r3, #0]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	4401      	add	r1, r0
 800ed46:	6011      	str	r1, [r2, #0]
 800ed48:	6053      	str	r3, [r2, #4]
 800ed4a:	e7da      	b.n	800ed02 <_free_r+0x22>
 800ed4c:	d902      	bls.n	800ed54 <_free_r+0x74>
 800ed4e:	230c      	movs	r3, #12
 800ed50:	602b      	str	r3, [r5, #0]
 800ed52:	e7d6      	b.n	800ed02 <_free_r+0x22>
 800ed54:	6820      	ldr	r0, [r4, #0]
 800ed56:	1821      	adds	r1, r4, r0
 800ed58:	428b      	cmp	r3, r1
 800ed5a:	bf01      	itttt	eq
 800ed5c:	6819      	ldreq	r1, [r3, #0]
 800ed5e:	685b      	ldreq	r3, [r3, #4]
 800ed60:	1809      	addeq	r1, r1, r0
 800ed62:	6021      	streq	r1, [r4, #0]
 800ed64:	6063      	str	r3, [r4, #4]
 800ed66:	6054      	str	r4, [r2, #4]
 800ed68:	e7cb      	b.n	800ed02 <_free_r+0x22>
 800ed6a:	bd38      	pop	{r3, r4, r5, pc}
 800ed6c:	20001cf8 	.word	0x20001cf8

0800ed70 <sbrk_aligned>:
 800ed70:	b570      	push	{r4, r5, r6, lr}
 800ed72:	4e0e      	ldr	r6, [pc, #56]	; (800edac <sbrk_aligned+0x3c>)
 800ed74:	460c      	mov	r4, r1
 800ed76:	6831      	ldr	r1, [r6, #0]
 800ed78:	4605      	mov	r5, r0
 800ed7a:	b911      	cbnz	r1, 800ed82 <sbrk_aligned+0x12>
 800ed7c:	f000 f9ee 	bl	800f15c <_sbrk_r>
 800ed80:	6030      	str	r0, [r6, #0]
 800ed82:	4621      	mov	r1, r4
 800ed84:	4628      	mov	r0, r5
 800ed86:	f000 f9e9 	bl	800f15c <_sbrk_r>
 800ed8a:	1c43      	adds	r3, r0, #1
 800ed8c:	d00a      	beq.n	800eda4 <sbrk_aligned+0x34>
 800ed8e:	1cc4      	adds	r4, r0, #3
 800ed90:	f024 0403 	bic.w	r4, r4, #3
 800ed94:	42a0      	cmp	r0, r4
 800ed96:	d007      	beq.n	800eda8 <sbrk_aligned+0x38>
 800ed98:	1a21      	subs	r1, r4, r0
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f000 f9de 	bl	800f15c <_sbrk_r>
 800eda0:	3001      	adds	r0, #1
 800eda2:	d101      	bne.n	800eda8 <sbrk_aligned+0x38>
 800eda4:	f04f 34ff 	mov.w	r4, #4294967295
 800eda8:	4620      	mov	r0, r4
 800edaa:	bd70      	pop	{r4, r5, r6, pc}
 800edac:	20001cfc 	.word	0x20001cfc

0800edb0 <_malloc_r>:
 800edb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb4:	1ccd      	adds	r5, r1, #3
 800edb6:	f025 0503 	bic.w	r5, r5, #3
 800edba:	3508      	adds	r5, #8
 800edbc:	2d0c      	cmp	r5, #12
 800edbe:	bf38      	it	cc
 800edc0:	250c      	movcc	r5, #12
 800edc2:	2d00      	cmp	r5, #0
 800edc4:	4607      	mov	r7, r0
 800edc6:	db01      	blt.n	800edcc <_malloc_r+0x1c>
 800edc8:	42a9      	cmp	r1, r5
 800edca:	d905      	bls.n	800edd8 <_malloc_r+0x28>
 800edcc:	230c      	movs	r3, #12
 800edce:	2600      	movs	r6, #0
 800edd0:	603b      	str	r3, [r7, #0]
 800edd2:	4630      	mov	r0, r6
 800edd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd8:	4e2e      	ldr	r6, [pc, #184]	; (800ee94 <_malloc_r+0xe4>)
 800edda:	f000 fa3b 	bl	800f254 <__malloc_lock>
 800edde:	6833      	ldr	r3, [r6, #0]
 800ede0:	461c      	mov	r4, r3
 800ede2:	bb34      	cbnz	r4, 800ee32 <_malloc_r+0x82>
 800ede4:	4629      	mov	r1, r5
 800ede6:	4638      	mov	r0, r7
 800ede8:	f7ff ffc2 	bl	800ed70 <sbrk_aligned>
 800edec:	1c43      	adds	r3, r0, #1
 800edee:	4604      	mov	r4, r0
 800edf0:	d14d      	bne.n	800ee8e <_malloc_r+0xde>
 800edf2:	6834      	ldr	r4, [r6, #0]
 800edf4:	4626      	mov	r6, r4
 800edf6:	2e00      	cmp	r6, #0
 800edf8:	d140      	bne.n	800ee7c <_malloc_r+0xcc>
 800edfa:	6823      	ldr	r3, [r4, #0]
 800edfc:	4631      	mov	r1, r6
 800edfe:	4638      	mov	r0, r7
 800ee00:	eb04 0803 	add.w	r8, r4, r3
 800ee04:	f000 f9aa 	bl	800f15c <_sbrk_r>
 800ee08:	4580      	cmp	r8, r0
 800ee0a:	d13a      	bne.n	800ee82 <_malloc_r+0xd2>
 800ee0c:	6821      	ldr	r1, [r4, #0]
 800ee0e:	3503      	adds	r5, #3
 800ee10:	1a6d      	subs	r5, r5, r1
 800ee12:	f025 0503 	bic.w	r5, r5, #3
 800ee16:	3508      	adds	r5, #8
 800ee18:	2d0c      	cmp	r5, #12
 800ee1a:	bf38      	it	cc
 800ee1c:	250c      	movcc	r5, #12
 800ee1e:	4638      	mov	r0, r7
 800ee20:	4629      	mov	r1, r5
 800ee22:	f7ff ffa5 	bl	800ed70 <sbrk_aligned>
 800ee26:	3001      	adds	r0, #1
 800ee28:	d02b      	beq.n	800ee82 <_malloc_r+0xd2>
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	442b      	add	r3, r5
 800ee2e:	6023      	str	r3, [r4, #0]
 800ee30:	e00e      	b.n	800ee50 <_malloc_r+0xa0>
 800ee32:	6822      	ldr	r2, [r4, #0]
 800ee34:	1b52      	subs	r2, r2, r5
 800ee36:	d41e      	bmi.n	800ee76 <_malloc_r+0xc6>
 800ee38:	2a0b      	cmp	r2, #11
 800ee3a:	d916      	bls.n	800ee6a <_malloc_r+0xba>
 800ee3c:	1961      	adds	r1, r4, r5
 800ee3e:	42a3      	cmp	r3, r4
 800ee40:	6025      	str	r5, [r4, #0]
 800ee42:	bf18      	it	ne
 800ee44:	6059      	strne	r1, [r3, #4]
 800ee46:	6863      	ldr	r3, [r4, #4]
 800ee48:	bf08      	it	eq
 800ee4a:	6031      	streq	r1, [r6, #0]
 800ee4c:	5162      	str	r2, [r4, r5]
 800ee4e:	604b      	str	r3, [r1, #4]
 800ee50:	4638      	mov	r0, r7
 800ee52:	f104 060b 	add.w	r6, r4, #11
 800ee56:	f000 fa03 	bl	800f260 <__malloc_unlock>
 800ee5a:	f026 0607 	bic.w	r6, r6, #7
 800ee5e:	1d23      	adds	r3, r4, #4
 800ee60:	1af2      	subs	r2, r6, r3
 800ee62:	d0b6      	beq.n	800edd2 <_malloc_r+0x22>
 800ee64:	1b9b      	subs	r3, r3, r6
 800ee66:	50a3      	str	r3, [r4, r2]
 800ee68:	e7b3      	b.n	800edd2 <_malloc_r+0x22>
 800ee6a:	6862      	ldr	r2, [r4, #4]
 800ee6c:	42a3      	cmp	r3, r4
 800ee6e:	bf0c      	ite	eq
 800ee70:	6032      	streq	r2, [r6, #0]
 800ee72:	605a      	strne	r2, [r3, #4]
 800ee74:	e7ec      	b.n	800ee50 <_malloc_r+0xa0>
 800ee76:	4623      	mov	r3, r4
 800ee78:	6864      	ldr	r4, [r4, #4]
 800ee7a:	e7b2      	b.n	800ede2 <_malloc_r+0x32>
 800ee7c:	4634      	mov	r4, r6
 800ee7e:	6876      	ldr	r6, [r6, #4]
 800ee80:	e7b9      	b.n	800edf6 <_malloc_r+0x46>
 800ee82:	230c      	movs	r3, #12
 800ee84:	4638      	mov	r0, r7
 800ee86:	603b      	str	r3, [r7, #0]
 800ee88:	f000 f9ea 	bl	800f260 <__malloc_unlock>
 800ee8c:	e7a1      	b.n	800edd2 <_malloc_r+0x22>
 800ee8e:	6025      	str	r5, [r4, #0]
 800ee90:	e7de      	b.n	800ee50 <_malloc_r+0xa0>
 800ee92:	bf00      	nop
 800ee94:	20001cf8 	.word	0x20001cf8

0800ee98 <__ssputs_r>:
 800ee98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee9c:	688e      	ldr	r6, [r1, #8]
 800ee9e:	4682      	mov	sl, r0
 800eea0:	429e      	cmp	r6, r3
 800eea2:	460c      	mov	r4, r1
 800eea4:	4690      	mov	r8, r2
 800eea6:	461f      	mov	r7, r3
 800eea8:	d838      	bhi.n	800ef1c <__ssputs_r+0x84>
 800eeaa:	898a      	ldrh	r2, [r1, #12]
 800eeac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eeb0:	d032      	beq.n	800ef18 <__ssputs_r+0x80>
 800eeb2:	6825      	ldr	r5, [r4, #0]
 800eeb4:	6909      	ldr	r1, [r1, #16]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	eba5 0901 	sub.w	r9, r5, r1
 800eebc:	6965      	ldr	r5, [r4, #20]
 800eebe:	444b      	add	r3, r9
 800eec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eec8:	106d      	asrs	r5, r5, #1
 800eeca:	429d      	cmp	r5, r3
 800eecc:	bf38      	it	cc
 800eece:	461d      	movcc	r5, r3
 800eed0:	0553      	lsls	r3, r2, #21
 800eed2:	d531      	bpl.n	800ef38 <__ssputs_r+0xa0>
 800eed4:	4629      	mov	r1, r5
 800eed6:	f7ff ff6b 	bl	800edb0 <_malloc_r>
 800eeda:	4606      	mov	r6, r0
 800eedc:	b950      	cbnz	r0, 800eef4 <__ssputs_r+0x5c>
 800eede:	230c      	movs	r3, #12
 800eee0:	f04f 30ff 	mov.w	r0, #4294967295
 800eee4:	f8ca 3000 	str.w	r3, [sl]
 800eee8:	89a3      	ldrh	r3, [r4, #12]
 800eeea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeee:	81a3      	strh	r3, [r4, #12]
 800eef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef4:	464a      	mov	r2, r9
 800eef6:	6921      	ldr	r1, [r4, #16]
 800eef8:	f7fc fae2 	bl	800b4c0 <memcpy>
 800eefc:	89a3      	ldrh	r3, [r4, #12]
 800eefe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef06:	81a3      	strh	r3, [r4, #12]
 800ef08:	6126      	str	r6, [r4, #16]
 800ef0a:	444e      	add	r6, r9
 800ef0c:	6026      	str	r6, [r4, #0]
 800ef0e:	463e      	mov	r6, r7
 800ef10:	6165      	str	r5, [r4, #20]
 800ef12:	eba5 0509 	sub.w	r5, r5, r9
 800ef16:	60a5      	str	r5, [r4, #8]
 800ef18:	42be      	cmp	r6, r7
 800ef1a:	d900      	bls.n	800ef1e <__ssputs_r+0x86>
 800ef1c:	463e      	mov	r6, r7
 800ef1e:	4632      	mov	r2, r6
 800ef20:	4641      	mov	r1, r8
 800ef22:	6820      	ldr	r0, [r4, #0]
 800ef24:	f000 f97c 	bl	800f220 <memmove>
 800ef28:	68a3      	ldr	r3, [r4, #8]
 800ef2a:	2000      	movs	r0, #0
 800ef2c:	1b9b      	subs	r3, r3, r6
 800ef2e:	60a3      	str	r3, [r4, #8]
 800ef30:	6823      	ldr	r3, [r4, #0]
 800ef32:	4433      	add	r3, r6
 800ef34:	6023      	str	r3, [r4, #0]
 800ef36:	e7db      	b.n	800eef0 <__ssputs_r+0x58>
 800ef38:	462a      	mov	r2, r5
 800ef3a:	f000 f997 	bl	800f26c <_realloc_r>
 800ef3e:	4606      	mov	r6, r0
 800ef40:	2800      	cmp	r0, #0
 800ef42:	d1e1      	bne.n	800ef08 <__ssputs_r+0x70>
 800ef44:	4650      	mov	r0, sl
 800ef46:	6921      	ldr	r1, [r4, #16]
 800ef48:	f7ff feca 	bl	800ece0 <_free_r>
 800ef4c:	e7c7      	b.n	800eede <__ssputs_r+0x46>
	...

0800ef50 <_svfiprintf_r>:
 800ef50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef54:	4698      	mov	r8, r3
 800ef56:	898b      	ldrh	r3, [r1, #12]
 800ef58:	4607      	mov	r7, r0
 800ef5a:	061b      	lsls	r3, r3, #24
 800ef5c:	460d      	mov	r5, r1
 800ef5e:	4614      	mov	r4, r2
 800ef60:	b09d      	sub	sp, #116	; 0x74
 800ef62:	d50e      	bpl.n	800ef82 <_svfiprintf_r+0x32>
 800ef64:	690b      	ldr	r3, [r1, #16]
 800ef66:	b963      	cbnz	r3, 800ef82 <_svfiprintf_r+0x32>
 800ef68:	2140      	movs	r1, #64	; 0x40
 800ef6a:	f7ff ff21 	bl	800edb0 <_malloc_r>
 800ef6e:	6028      	str	r0, [r5, #0]
 800ef70:	6128      	str	r0, [r5, #16]
 800ef72:	b920      	cbnz	r0, 800ef7e <_svfiprintf_r+0x2e>
 800ef74:	230c      	movs	r3, #12
 800ef76:	603b      	str	r3, [r7, #0]
 800ef78:	f04f 30ff 	mov.w	r0, #4294967295
 800ef7c:	e0d1      	b.n	800f122 <_svfiprintf_r+0x1d2>
 800ef7e:	2340      	movs	r3, #64	; 0x40
 800ef80:	616b      	str	r3, [r5, #20]
 800ef82:	2300      	movs	r3, #0
 800ef84:	9309      	str	r3, [sp, #36]	; 0x24
 800ef86:	2320      	movs	r3, #32
 800ef88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef8c:	2330      	movs	r3, #48	; 0x30
 800ef8e:	f04f 0901 	mov.w	r9, #1
 800ef92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f13c <_svfiprintf_r+0x1ec>
 800ef9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef9e:	4623      	mov	r3, r4
 800efa0:	469a      	mov	sl, r3
 800efa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efa6:	b10a      	cbz	r2, 800efac <_svfiprintf_r+0x5c>
 800efa8:	2a25      	cmp	r2, #37	; 0x25
 800efaa:	d1f9      	bne.n	800efa0 <_svfiprintf_r+0x50>
 800efac:	ebba 0b04 	subs.w	fp, sl, r4
 800efb0:	d00b      	beq.n	800efca <_svfiprintf_r+0x7a>
 800efb2:	465b      	mov	r3, fp
 800efb4:	4622      	mov	r2, r4
 800efb6:	4629      	mov	r1, r5
 800efb8:	4638      	mov	r0, r7
 800efba:	f7ff ff6d 	bl	800ee98 <__ssputs_r>
 800efbe:	3001      	adds	r0, #1
 800efc0:	f000 80aa 	beq.w	800f118 <_svfiprintf_r+0x1c8>
 800efc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efc6:	445a      	add	r2, fp
 800efc8:	9209      	str	r2, [sp, #36]	; 0x24
 800efca:	f89a 3000 	ldrb.w	r3, [sl]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	f000 80a2 	beq.w	800f118 <_svfiprintf_r+0x1c8>
 800efd4:	2300      	movs	r3, #0
 800efd6:	f04f 32ff 	mov.w	r2, #4294967295
 800efda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efde:	f10a 0a01 	add.w	sl, sl, #1
 800efe2:	9304      	str	r3, [sp, #16]
 800efe4:	9307      	str	r3, [sp, #28]
 800efe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efea:	931a      	str	r3, [sp, #104]	; 0x68
 800efec:	4654      	mov	r4, sl
 800efee:	2205      	movs	r2, #5
 800eff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eff4:	4851      	ldr	r0, [pc, #324]	; (800f13c <_svfiprintf_r+0x1ec>)
 800eff6:	f7ff f999 	bl	800e32c <memchr>
 800effa:	9a04      	ldr	r2, [sp, #16]
 800effc:	b9d8      	cbnz	r0, 800f036 <_svfiprintf_r+0xe6>
 800effe:	06d0      	lsls	r0, r2, #27
 800f000:	bf44      	itt	mi
 800f002:	2320      	movmi	r3, #32
 800f004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f008:	0711      	lsls	r1, r2, #28
 800f00a:	bf44      	itt	mi
 800f00c:	232b      	movmi	r3, #43	; 0x2b
 800f00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f012:	f89a 3000 	ldrb.w	r3, [sl]
 800f016:	2b2a      	cmp	r3, #42	; 0x2a
 800f018:	d015      	beq.n	800f046 <_svfiprintf_r+0xf6>
 800f01a:	4654      	mov	r4, sl
 800f01c:	2000      	movs	r0, #0
 800f01e:	f04f 0c0a 	mov.w	ip, #10
 800f022:	9a07      	ldr	r2, [sp, #28]
 800f024:	4621      	mov	r1, r4
 800f026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f02a:	3b30      	subs	r3, #48	; 0x30
 800f02c:	2b09      	cmp	r3, #9
 800f02e:	d94e      	bls.n	800f0ce <_svfiprintf_r+0x17e>
 800f030:	b1b0      	cbz	r0, 800f060 <_svfiprintf_r+0x110>
 800f032:	9207      	str	r2, [sp, #28]
 800f034:	e014      	b.n	800f060 <_svfiprintf_r+0x110>
 800f036:	eba0 0308 	sub.w	r3, r0, r8
 800f03a:	fa09 f303 	lsl.w	r3, r9, r3
 800f03e:	4313      	orrs	r3, r2
 800f040:	46a2      	mov	sl, r4
 800f042:	9304      	str	r3, [sp, #16]
 800f044:	e7d2      	b.n	800efec <_svfiprintf_r+0x9c>
 800f046:	9b03      	ldr	r3, [sp, #12]
 800f048:	1d19      	adds	r1, r3, #4
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	9103      	str	r1, [sp, #12]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	bfbb      	ittet	lt
 800f052:	425b      	neglt	r3, r3
 800f054:	f042 0202 	orrlt.w	r2, r2, #2
 800f058:	9307      	strge	r3, [sp, #28]
 800f05a:	9307      	strlt	r3, [sp, #28]
 800f05c:	bfb8      	it	lt
 800f05e:	9204      	strlt	r2, [sp, #16]
 800f060:	7823      	ldrb	r3, [r4, #0]
 800f062:	2b2e      	cmp	r3, #46	; 0x2e
 800f064:	d10c      	bne.n	800f080 <_svfiprintf_r+0x130>
 800f066:	7863      	ldrb	r3, [r4, #1]
 800f068:	2b2a      	cmp	r3, #42	; 0x2a
 800f06a:	d135      	bne.n	800f0d8 <_svfiprintf_r+0x188>
 800f06c:	9b03      	ldr	r3, [sp, #12]
 800f06e:	3402      	adds	r4, #2
 800f070:	1d1a      	adds	r2, r3, #4
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	9203      	str	r2, [sp, #12]
 800f076:	2b00      	cmp	r3, #0
 800f078:	bfb8      	it	lt
 800f07a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f07e:	9305      	str	r3, [sp, #20]
 800f080:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800f140 <_svfiprintf_r+0x1f0>
 800f084:	2203      	movs	r2, #3
 800f086:	4650      	mov	r0, sl
 800f088:	7821      	ldrb	r1, [r4, #0]
 800f08a:	f7ff f94f 	bl	800e32c <memchr>
 800f08e:	b140      	cbz	r0, 800f0a2 <_svfiprintf_r+0x152>
 800f090:	2340      	movs	r3, #64	; 0x40
 800f092:	eba0 000a 	sub.w	r0, r0, sl
 800f096:	fa03 f000 	lsl.w	r0, r3, r0
 800f09a:	9b04      	ldr	r3, [sp, #16]
 800f09c:	3401      	adds	r4, #1
 800f09e:	4303      	orrs	r3, r0
 800f0a0:	9304      	str	r3, [sp, #16]
 800f0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0a6:	2206      	movs	r2, #6
 800f0a8:	4826      	ldr	r0, [pc, #152]	; (800f144 <_svfiprintf_r+0x1f4>)
 800f0aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0ae:	f7ff f93d 	bl	800e32c <memchr>
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	d038      	beq.n	800f128 <_svfiprintf_r+0x1d8>
 800f0b6:	4b24      	ldr	r3, [pc, #144]	; (800f148 <_svfiprintf_r+0x1f8>)
 800f0b8:	bb1b      	cbnz	r3, 800f102 <_svfiprintf_r+0x1b2>
 800f0ba:	9b03      	ldr	r3, [sp, #12]
 800f0bc:	3307      	adds	r3, #7
 800f0be:	f023 0307 	bic.w	r3, r3, #7
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	9303      	str	r3, [sp, #12]
 800f0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c8:	4433      	add	r3, r6
 800f0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800f0cc:	e767      	b.n	800ef9e <_svfiprintf_r+0x4e>
 800f0ce:	460c      	mov	r4, r1
 800f0d0:	2001      	movs	r0, #1
 800f0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0d6:	e7a5      	b.n	800f024 <_svfiprintf_r+0xd4>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f04f 0c0a 	mov.w	ip, #10
 800f0de:	4619      	mov	r1, r3
 800f0e0:	3401      	adds	r4, #1
 800f0e2:	9305      	str	r3, [sp, #20]
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0ea:	3a30      	subs	r2, #48	; 0x30
 800f0ec:	2a09      	cmp	r2, #9
 800f0ee:	d903      	bls.n	800f0f8 <_svfiprintf_r+0x1a8>
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d0c5      	beq.n	800f080 <_svfiprintf_r+0x130>
 800f0f4:	9105      	str	r1, [sp, #20]
 800f0f6:	e7c3      	b.n	800f080 <_svfiprintf_r+0x130>
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f100:	e7f0      	b.n	800f0e4 <_svfiprintf_r+0x194>
 800f102:	ab03      	add	r3, sp, #12
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	462a      	mov	r2, r5
 800f108:	4638      	mov	r0, r7
 800f10a:	4b10      	ldr	r3, [pc, #64]	; (800f14c <_svfiprintf_r+0x1fc>)
 800f10c:	a904      	add	r1, sp, #16
 800f10e:	f7fc fa8b 	bl	800b628 <_printf_float>
 800f112:	1c42      	adds	r2, r0, #1
 800f114:	4606      	mov	r6, r0
 800f116:	d1d6      	bne.n	800f0c6 <_svfiprintf_r+0x176>
 800f118:	89ab      	ldrh	r3, [r5, #12]
 800f11a:	065b      	lsls	r3, r3, #25
 800f11c:	f53f af2c 	bmi.w	800ef78 <_svfiprintf_r+0x28>
 800f120:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f122:	b01d      	add	sp, #116	; 0x74
 800f124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f128:	ab03      	add	r3, sp, #12
 800f12a:	9300      	str	r3, [sp, #0]
 800f12c:	462a      	mov	r2, r5
 800f12e:	4638      	mov	r0, r7
 800f130:	4b06      	ldr	r3, [pc, #24]	; (800f14c <_svfiprintf_r+0x1fc>)
 800f132:	a904      	add	r1, sp, #16
 800f134:	f7fc fd14 	bl	800bb60 <_printf_i>
 800f138:	e7eb      	b.n	800f112 <_svfiprintf_r+0x1c2>
 800f13a:	bf00      	nop
 800f13c:	08011b1c 	.word	0x08011b1c
 800f140:	08011b22 	.word	0x08011b22
 800f144:	08011b26 	.word	0x08011b26
 800f148:	0800b629 	.word	0x0800b629
 800f14c:	0800ee99 	.word	0x0800ee99

0800f150 <nan>:
 800f150:	2000      	movs	r0, #0
 800f152:	4901      	ldr	r1, [pc, #4]	; (800f158 <nan+0x8>)
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	7ff80000 	.word	0x7ff80000

0800f15c <_sbrk_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	2300      	movs	r3, #0
 800f160:	4d05      	ldr	r5, [pc, #20]	; (800f178 <_sbrk_r+0x1c>)
 800f162:	4604      	mov	r4, r0
 800f164:	4608      	mov	r0, r1
 800f166:	602b      	str	r3, [r5, #0]
 800f168:	f7f5 ff8a 	bl	8005080 <_sbrk>
 800f16c:	1c43      	adds	r3, r0, #1
 800f16e:	d102      	bne.n	800f176 <_sbrk_r+0x1a>
 800f170:	682b      	ldr	r3, [r5, #0]
 800f172:	b103      	cbz	r3, 800f176 <_sbrk_r+0x1a>
 800f174:	6023      	str	r3, [r4, #0]
 800f176:	bd38      	pop	{r3, r4, r5, pc}
 800f178:	20001d00 	.word	0x20001d00

0800f17c <strncmp>:
 800f17c:	4603      	mov	r3, r0
 800f17e:	b510      	push	{r4, lr}
 800f180:	b172      	cbz	r2, 800f1a0 <strncmp+0x24>
 800f182:	3901      	subs	r1, #1
 800f184:	1884      	adds	r4, r0, r2
 800f186:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f18a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f18e:	4290      	cmp	r0, r2
 800f190:	d101      	bne.n	800f196 <strncmp+0x1a>
 800f192:	42a3      	cmp	r3, r4
 800f194:	d101      	bne.n	800f19a <strncmp+0x1e>
 800f196:	1a80      	subs	r0, r0, r2
 800f198:	bd10      	pop	{r4, pc}
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d1f3      	bne.n	800f186 <strncmp+0xa>
 800f19e:	e7fa      	b.n	800f196 <strncmp+0x1a>
 800f1a0:	4610      	mov	r0, r2
 800f1a2:	e7f9      	b.n	800f198 <strncmp+0x1c>

0800f1a4 <__ascii_wctomb>:
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	4608      	mov	r0, r1
 800f1a8:	b141      	cbz	r1, 800f1bc <__ascii_wctomb+0x18>
 800f1aa:	2aff      	cmp	r2, #255	; 0xff
 800f1ac:	d904      	bls.n	800f1b8 <__ascii_wctomb+0x14>
 800f1ae:	228a      	movs	r2, #138	; 0x8a
 800f1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b4:	601a      	str	r2, [r3, #0]
 800f1b6:	4770      	bx	lr
 800f1b8:	2001      	movs	r0, #1
 800f1ba:	700a      	strb	r2, [r1, #0]
 800f1bc:	4770      	bx	lr
	...

0800f1c0 <__assert_func>:
 800f1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1c2:	4614      	mov	r4, r2
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	4b09      	ldr	r3, [pc, #36]	; (800f1ec <__assert_func+0x2c>)
 800f1c8:	4605      	mov	r5, r0
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68d8      	ldr	r0, [r3, #12]
 800f1ce:	b14c      	cbz	r4, 800f1e4 <__assert_func+0x24>
 800f1d0:	4b07      	ldr	r3, [pc, #28]	; (800f1f0 <__assert_func+0x30>)
 800f1d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1d6:	9100      	str	r1, [sp, #0]
 800f1d8:	462b      	mov	r3, r5
 800f1da:	4906      	ldr	r1, [pc, #24]	; (800f1f4 <__assert_func+0x34>)
 800f1dc:	f000 f80e 	bl	800f1fc <fiprintf>
 800f1e0:	f000 fa8a 	bl	800f6f8 <abort>
 800f1e4:	4b04      	ldr	r3, [pc, #16]	; (800f1f8 <__assert_func+0x38>)
 800f1e6:	461c      	mov	r4, r3
 800f1e8:	e7f3      	b.n	800f1d2 <__assert_func+0x12>
 800f1ea:	bf00      	nop
 800f1ec:	20000018 	.word	0x20000018
 800f1f0:	08011b2d 	.word	0x08011b2d
 800f1f4:	08011b3a 	.word	0x08011b3a
 800f1f8:	08011b68 	.word	0x08011b68

0800f1fc <fiprintf>:
 800f1fc:	b40e      	push	{r1, r2, r3}
 800f1fe:	b503      	push	{r0, r1, lr}
 800f200:	4601      	mov	r1, r0
 800f202:	ab03      	add	r3, sp, #12
 800f204:	4805      	ldr	r0, [pc, #20]	; (800f21c <fiprintf+0x20>)
 800f206:	f853 2b04 	ldr.w	r2, [r3], #4
 800f20a:	6800      	ldr	r0, [r0, #0]
 800f20c:	9301      	str	r3, [sp, #4]
 800f20e:	f000 f883 	bl	800f318 <_vfiprintf_r>
 800f212:	b002      	add	sp, #8
 800f214:	f85d eb04 	ldr.w	lr, [sp], #4
 800f218:	b003      	add	sp, #12
 800f21a:	4770      	bx	lr
 800f21c:	20000018 	.word	0x20000018

0800f220 <memmove>:
 800f220:	4288      	cmp	r0, r1
 800f222:	b510      	push	{r4, lr}
 800f224:	eb01 0402 	add.w	r4, r1, r2
 800f228:	d902      	bls.n	800f230 <memmove+0x10>
 800f22a:	4284      	cmp	r4, r0
 800f22c:	4623      	mov	r3, r4
 800f22e:	d807      	bhi.n	800f240 <memmove+0x20>
 800f230:	1e43      	subs	r3, r0, #1
 800f232:	42a1      	cmp	r1, r4
 800f234:	d008      	beq.n	800f248 <memmove+0x28>
 800f236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f23e:	e7f8      	b.n	800f232 <memmove+0x12>
 800f240:	4601      	mov	r1, r0
 800f242:	4402      	add	r2, r0
 800f244:	428a      	cmp	r2, r1
 800f246:	d100      	bne.n	800f24a <memmove+0x2a>
 800f248:	bd10      	pop	{r4, pc}
 800f24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f252:	e7f7      	b.n	800f244 <memmove+0x24>

0800f254 <__malloc_lock>:
 800f254:	4801      	ldr	r0, [pc, #4]	; (800f25c <__malloc_lock+0x8>)
 800f256:	f000 bc0b 	b.w	800fa70 <__retarget_lock_acquire_recursive>
 800f25a:	bf00      	nop
 800f25c:	20001d04 	.word	0x20001d04

0800f260 <__malloc_unlock>:
 800f260:	4801      	ldr	r0, [pc, #4]	; (800f268 <__malloc_unlock+0x8>)
 800f262:	f000 bc06 	b.w	800fa72 <__retarget_lock_release_recursive>
 800f266:	bf00      	nop
 800f268:	20001d04 	.word	0x20001d04

0800f26c <_realloc_r>:
 800f26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f270:	4680      	mov	r8, r0
 800f272:	4614      	mov	r4, r2
 800f274:	460e      	mov	r6, r1
 800f276:	b921      	cbnz	r1, 800f282 <_realloc_r+0x16>
 800f278:	4611      	mov	r1, r2
 800f27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f27e:	f7ff bd97 	b.w	800edb0 <_malloc_r>
 800f282:	b92a      	cbnz	r2, 800f290 <_realloc_r+0x24>
 800f284:	f7ff fd2c 	bl	800ece0 <_free_r>
 800f288:	4625      	mov	r5, r4
 800f28a:	4628      	mov	r0, r5
 800f28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f290:	f000 fc56 	bl	800fb40 <_malloc_usable_size_r>
 800f294:	4284      	cmp	r4, r0
 800f296:	4607      	mov	r7, r0
 800f298:	d802      	bhi.n	800f2a0 <_realloc_r+0x34>
 800f29a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f29e:	d812      	bhi.n	800f2c6 <_realloc_r+0x5a>
 800f2a0:	4621      	mov	r1, r4
 800f2a2:	4640      	mov	r0, r8
 800f2a4:	f7ff fd84 	bl	800edb0 <_malloc_r>
 800f2a8:	4605      	mov	r5, r0
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	d0ed      	beq.n	800f28a <_realloc_r+0x1e>
 800f2ae:	42bc      	cmp	r4, r7
 800f2b0:	4622      	mov	r2, r4
 800f2b2:	4631      	mov	r1, r6
 800f2b4:	bf28      	it	cs
 800f2b6:	463a      	movcs	r2, r7
 800f2b8:	f7fc f902 	bl	800b4c0 <memcpy>
 800f2bc:	4631      	mov	r1, r6
 800f2be:	4640      	mov	r0, r8
 800f2c0:	f7ff fd0e 	bl	800ece0 <_free_r>
 800f2c4:	e7e1      	b.n	800f28a <_realloc_r+0x1e>
 800f2c6:	4635      	mov	r5, r6
 800f2c8:	e7df      	b.n	800f28a <_realloc_r+0x1e>

0800f2ca <__sfputc_r>:
 800f2ca:	6893      	ldr	r3, [r2, #8]
 800f2cc:	b410      	push	{r4}
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	6093      	str	r3, [r2, #8]
 800f2d4:	da07      	bge.n	800f2e6 <__sfputc_r+0x1c>
 800f2d6:	6994      	ldr	r4, [r2, #24]
 800f2d8:	42a3      	cmp	r3, r4
 800f2da:	db01      	blt.n	800f2e0 <__sfputc_r+0x16>
 800f2dc:	290a      	cmp	r1, #10
 800f2de:	d102      	bne.n	800f2e6 <__sfputc_r+0x1c>
 800f2e0:	bc10      	pop	{r4}
 800f2e2:	f000 b949 	b.w	800f578 <__swbuf_r>
 800f2e6:	6813      	ldr	r3, [r2, #0]
 800f2e8:	1c58      	adds	r0, r3, #1
 800f2ea:	6010      	str	r0, [r2, #0]
 800f2ec:	7019      	strb	r1, [r3, #0]
 800f2ee:	4608      	mov	r0, r1
 800f2f0:	bc10      	pop	{r4}
 800f2f2:	4770      	bx	lr

0800f2f4 <__sfputs_r>:
 800f2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2f6:	4606      	mov	r6, r0
 800f2f8:	460f      	mov	r7, r1
 800f2fa:	4614      	mov	r4, r2
 800f2fc:	18d5      	adds	r5, r2, r3
 800f2fe:	42ac      	cmp	r4, r5
 800f300:	d101      	bne.n	800f306 <__sfputs_r+0x12>
 800f302:	2000      	movs	r0, #0
 800f304:	e007      	b.n	800f316 <__sfputs_r+0x22>
 800f306:	463a      	mov	r2, r7
 800f308:	4630      	mov	r0, r6
 800f30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f30e:	f7ff ffdc 	bl	800f2ca <__sfputc_r>
 800f312:	1c43      	adds	r3, r0, #1
 800f314:	d1f3      	bne.n	800f2fe <__sfputs_r+0xa>
 800f316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f318 <_vfiprintf_r>:
 800f318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f31c:	460d      	mov	r5, r1
 800f31e:	4614      	mov	r4, r2
 800f320:	4698      	mov	r8, r3
 800f322:	4606      	mov	r6, r0
 800f324:	b09d      	sub	sp, #116	; 0x74
 800f326:	b118      	cbz	r0, 800f330 <_vfiprintf_r+0x18>
 800f328:	6983      	ldr	r3, [r0, #24]
 800f32a:	b90b      	cbnz	r3, 800f330 <_vfiprintf_r+0x18>
 800f32c:	f000 fb02 	bl	800f934 <__sinit>
 800f330:	4b89      	ldr	r3, [pc, #548]	; (800f558 <_vfiprintf_r+0x240>)
 800f332:	429d      	cmp	r5, r3
 800f334:	d11b      	bne.n	800f36e <_vfiprintf_r+0x56>
 800f336:	6875      	ldr	r5, [r6, #4]
 800f338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f33a:	07d9      	lsls	r1, r3, #31
 800f33c:	d405      	bmi.n	800f34a <_vfiprintf_r+0x32>
 800f33e:	89ab      	ldrh	r3, [r5, #12]
 800f340:	059a      	lsls	r2, r3, #22
 800f342:	d402      	bmi.n	800f34a <_vfiprintf_r+0x32>
 800f344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f346:	f000 fb93 	bl	800fa70 <__retarget_lock_acquire_recursive>
 800f34a:	89ab      	ldrh	r3, [r5, #12]
 800f34c:	071b      	lsls	r3, r3, #28
 800f34e:	d501      	bpl.n	800f354 <_vfiprintf_r+0x3c>
 800f350:	692b      	ldr	r3, [r5, #16]
 800f352:	b9eb      	cbnz	r3, 800f390 <_vfiprintf_r+0x78>
 800f354:	4629      	mov	r1, r5
 800f356:	4630      	mov	r0, r6
 800f358:	f000 f960 	bl	800f61c <__swsetup_r>
 800f35c:	b1c0      	cbz	r0, 800f390 <_vfiprintf_r+0x78>
 800f35e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f360:	07dc      	lsls	r4, r3, #31
 800f362:	d50e      	bpl.n	800f382 <_vfiprintf_r+0x6a>
 800f364:	f04f 30ff 	mov.w	r0, #4294967295
 800f368:	b01d      	add	sp, #116	; 0x74
 800f36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36e:	4b7b      	ldr	r3, [pc, #492]	; (800f55c <_vfiprintf_r+0x244>)
 800f370:	429d      	cmp	r5, r3
 800f372:	d101      	bne.n	800f378 <_vfiprintf_r+0x60>
 800f374:	68b5      	ldr	r5, [r6, #8]
 800f376:	e7df      	b.n	800f338 <_vfiprintf_r+0x20>
 800f378:	4b79      	ldr	r3, [pc, #484]	; (800f560 <_vfiprintf_r+0x248>)
 800f37a:	429d      	cmp	r5, r3
 800f37c:	bf08      	it	eq
 800f37e:	68f5      	ldreq	r5, [r6, #12]
 800f380:	e7da      	b.n	800f338 <_vfiprintf_r+0x20>
 800f382:	89ab      	ldrh	r3, [r5, #12]
 800f384:	0598      	lsls	r0, r3, #22
 800f386:	d4ed      	bmi.n	800f364 <_vfiprintf_r+0x4c>
 800f388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f38a:	f000 fb72 	bl	800fa72 <__retarget_lock_release_recursive>
 800f38e:	e7e9      	b.n	800f364 <_vfiprintf_r+0x4c>
 800f390:	2300      	movs	r3, #0
 800f392:	9309      	str	r3, [sp, #36]	; 0x24
 800f394:	2320      	movs	r3, #32
 800f396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f39a:	2330      	movs	r3, #48	; 0x30
 800f39c:	f04f 0901 	mov.w	r9, #1
 800f3a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f564 <_vfiprintf_r+0x24c>
 800f3a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3ac:	4623      	mov	r3, r4
 800f3ae:	469a      	mov	sl, r3
 800f3b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3b4:	b10a      	cbz	r2, 800f3ba <_vfiprintf_r+0xa2>
 800f3b6:	2a25      	cmp	r2, #37	; 0x25
 800f3b8:	d1f9      	bne.n	800f3ae <_vfiprintf_r+0x96>
 800f3ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f3be:	d00b      	beq.n	800f3d8 <_vfiprintf_r+0xc0>
 800f3c0:	465b      	mov	r3, fp
 800f3c2:	4622      	mov	r2, r4
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	f7ff ff94 	bl	800f2f4 <__sfputs_r>
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	f000 80aa 	beq.w	800f526 <_vfiprintf_r+0x20e>
 800f3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3d4:	445a      	add	r2, fp
 800f3d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f3d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f000 80a2 	beq.w	800f526 <_vfiprintf_r+0x20e>
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3ec:	f10a 0a01 	add.w	sl, sl, #1
 800f3f0:	9304      	str	r3, [sp, #16]
 800f3f2:	9307      	str	r3, [sp, #28]
 800f3f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3f8:	931a      	str	r3, [sp, #104]	; 0x68
 800f3fa:	4654      	mov	r4, sl
 800f3fc:	2205      	movs	r2, #5
 800f3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f402:	4858      	ldr	r0, [pc, #352]	; (800f564 <_vfiprintf_r+0x24c>)
 800f404:	f7fe ff92 	bl	800e32c <memchr>
 800f408:	9a04      	ldr	r2, [sp, #16]
 800f40a:	b9d8      	cbnz	r0, 800f444 <_vfiprintf_r+0x12c>
 800f40c:	06d1      	lsls	r1, r2, #27
 800f40e:	bf44      	itt	mi
 800f410:	2320      	movmi	r3, #32
 800f412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f416:	0713      	lsls	r3, r2, #28
 800f418:	bf44      	itt	mi
 800f41a:	232b      	movmi	r3, #43	; 0x2b
 800f41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f420:	f89a 3000 	ldrb.w	r3, [sl]
 800f424:	2b2a      	cmp	r3, #42	; 0x2a
 800f426:	d015      	beq.n	800f454 <_vfiprintf_r+0x13c>
 800f428:	4654      	mov	r4, sl
 800f42a:	2000      	movs	r0, #0
 800f42c:	f04f 0c0a 	mov.w	ip, #10
 800f430:	9a07      	ldr	r2, [sp, #28]
 800f432:	4621      	mov	r1, r4
 800f434:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f438:	3b30      	subs	r3, #48	; 0x30
 800f43a:	2b09      	cmp	r3, #9
 800f43c:	d94e      	bls.n	800f4dc <_vfiprintf_r+0x1c4>
 800f43e:	b1b0      	cbz	r0, 800f46e <_vfiprintf_r+0x156>
 800f440:	9207      	str	r2, [sp, #28]
 800f442:	e014      	b.n	800f46e <_vfiprintf_r+0x156>
 800f444:	eba0 0308 	sub.w	r3, r0, r8
 800f448:	fa09 f303 	lsl.w	r3, r9, r3
 800f44c:	4313      	orrs	r3, r2
 800f44e:	46a2      	mov	sl, r4
 800f450:	9304      	str	r3, [sp, #16]
 800f452:	e7d2      	b.n	800f3fa <_vfiprintf_r+0xe2>
 800f454:	9b03      	ldr	r3, [sp, #12]
 800f456:	1d19      	adds	r1, r3, #4
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	9103      	str	r1, [sp, #12]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	bfbb      	ittet	lt
 800f460:	425b      	neglt	r3, r3
 800f462:	f042 0202 	orrlt.w	r2, r2, #2
 800f466:	9307      	strge	r3, [sp, #28]
 800f468:	9307      	strlt	r3, [sp, #28]
 800f46a:	bfb8      	it	lt
 800f46c:	9204      	strlt	r2, [sp, #16]
 800f46e:	7823      	ldrb	r3, [r4, #0]
 800f470:	2b2e      	cmp	r3, #46	; 0x2e
 800f472:	d10c      	bne.n	800f48e <_vfiprintf_r+0x176>
 800f474:	7863      	ldrb	r3, [r4, #1]
 800f476:	2b2a      	cmp	r3, #42	; 0x2a
 800f478:	d135      	bne.n	800f4e6 <_vfiprintf_r+0x1ce>
 800f47a:	9b03      	ldr	r3, [sp, #12]
 800f47c:	3402      	adds	r4, #2
 800f47e:	1d1a      	adds	r2, r3, #4
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	9203      	str	r2, [sp, #12]
 800f484:	2b00      	cmp	r3, #0
 800f486:	bfb8      	it	lt
 800f488:	f04f 33ff 	movlt.w	r3, #4294967295
 800f48c:	9305      	str	r3, [sp, #20]
 800f48e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f568 <_vfiprintf_r+0x250>
 800f492:	2203      	movs	r2, #3
 800f494:	4650      	mov	r0, sl
 800f496:	7821      	ldrb	r1, [r4, #0]
 800f498:	f7fe ff48 	bl	800e32c <memchr>
 800f49c:	b140      	cbz	r0, 800f4b0 <_vfiprintf_r+0x198>
 800f49e:	2340      	movs	r3, #64	; 0x40
 800f4a0:	eba0 000a 	sub.w	r0, r0, sl
 800f4a4:	fa03 f000 	lsl.w	r0, r3, r0
 800f4a8:	9b04      	ldr	r3, [sp, #16]
 800f4aa:	3401      	adds	r4, #1
 800f4ac:	4303      	orrs	r3, r0
 800f4ae:	9304      	str	r3, [sp, #16]
 800f4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4b4:	2206      	movs	r2, #6
 800f4b6:	482d      	ldr	r0, [pc, #180]	; (800f56c <_vfiprintf_r+0x254>)
 800f4b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4bc:	f7fe ff36 	bl	800e32c <memchr>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	d03f      	beq.n	800f544 <_vfiprintf_r+0x22c>
 800f4c4:	4b2a      	ldr	r3, [pc, #168]	; (800f570 <_vfiprintf_r+0x258>)
 800f4c6:	bb1b      	cbnz	r3, 800f510 <_vfiprintf_r+0x1f8>
 800f4c8:	9b03      	ldr	r3, [sp, #12]
 800f4ca:	3307      	adds	r3, #7
 800f4cc:	f023 0307 	bic.w	r3, r3, #7
 800f4d0:	3308      	adds	r3, #8
 800f4d2:	9303      	str	r3, [sp, #12]
 800f4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4d6:	443b      	add	r3, r7
 800f4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4da:	e767      	b.n	800f3ac <_vfiprintf_r+0x94>
 800f4dc:	460c      	mov	r4, r1
 800f4de:	2001      	movs	r0, #1
 800f4e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4e4:	e7a5      	b.n	800f432 <_vfiprintf_r+0x11a>
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	f04f 0c0a 	mov.w	ip, #10
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	3401      	adds	r4, #1
 800f4f0:	9305      	str	r3, [sp, #20]
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4f8:	3a30      	subs	r2, #48	; 0x30
 800f4fa:	2a09      	cmp	r2, #9
 800f4fc:	d903      	bls.n	800f506 <_vfiprintf_r+0x1ee>
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d0c5      	beq.n	800f48e <_vfiprintf_r+0x176>
 800f502:	9105      	str	r1, [sp, #20]
 800f504:	e7c3      	b.n	800f48e <_vfiprintf_r+0x176>
 800f506:	4604      	mov	r4, r0
 800f508:	2301      	movs	r3, #1
 800f50a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f50e:	e7f0      	b.n	800f4f2 <_vfiprintf_r+0x1da>
 800f510:	ab03      	add	r3, sp, #12
 800f512:	9300      	str	r3, [sp, #0]
 800f514:	462a      	mov	r2, r5
 800f516:	4630      	mov	r0, r6
 800f518:	4b16      	ldr	r3, [pc, #88]	; (800f574 <_vfiprintf_r+0x25c>)
 800f51a:	a904      	add	r1, sp, #16
 800f51c:	f7fc f884 	bl	800b628 <_printf_float>
 800f520:	4607      	mov	r7, r0
 800f522:	1c78      	adds	r0, r7, #1
 800f524:	d1d6      	bne.n	800f4d4 <_vfiprintf_r+0x1bc>
 800f526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f528:	07d9      	lsls	r1, r3, #31
 800f52a:	d405      	bmi.n	800f538 <_vfiprintf_r+0x220>
 800f52c:	89ab      	ldrh	r3, [r5, #12]
 800f52e:	059a      	lsls	r2, r3, #22
 800f530:	d402      	bmi.n	800f538 <_vfiprintf_r+0x220>
 800f532:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f534:	f000 fa9d 	bl	800fa72 <__retarget_lock_release_recursive>
 800f538:	89ab      	ldrh	r3, [r5, #12]
 800f53a:	065b      	lsls	r3, r3, #25
 800f53c:	f53f af12 	bmi.w	800f364 <_vfiprintf_r+0x4c>
 800f540:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f542:	e711      	b.n	800f368 <_vfiprintf_r+0x50>
 800f544:	ab03      	add	r3, sp, #12
 800f546:	9300      	str	r3, [sp, #0]
 800f548:	462a      	mov	r2, r5
 800f54a:	4630      	mov	r0, r6
 800f54c:	4b09      	ldr	r3, [pc, #36]	; (800f574 <_vfiprintf_r+0x25c>)
 800f54e:	a904      	add	r1, sp, #16
 800f550:	f7fc fb06 	bl	800bb60 <_printf_i>
 800f554:	e7e4      	b.n	800f520 <_vfiprintf_r+0x208>
 800f556:	bf00      	nop
 800f558:	08011b8c 	.word	0x08011b8c
 800f55c:	08011bac 	.word	0x08011bac
 800f560:	08011b6c 	.word	0x08011b6c
 800f564:	08011b1c 	.word	0x08011b1c
 800f568:	08011b22 	.word	0x08011b22
 800f56c:	08011b26 	.word	0x08011b26
 800f570:	0800b629 	.word	0x0800b629
 800f574:	0800f2f5 	.word	0x0800f2f5

0800f578 <__swbuf_r>:
 800f578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f57a:	460e      	mov	r6, r1
 800f57c:	4614      	mov	r4, r2
 800f57e:	4605      	mov	r5, r0
 800f580:	b118      	cbz	r0, 800f58a <__swbuf_r+0x12>
 800f582:	6983      	ldr	r3, [r0, #24]
 800f584:	b90b      	cbnz	r3, 800f58a <__swbuf_r+0x12>
 800f586:	f000 f9d5 	bl	800f934 <__sinit>
 800f58a:	4b21      	ldr	r3, [pc, #132]	; (800f610 <__swbuf_r+0x98>)
 800f58c:	429c      	cmp	r4, r3
 800f58e:	d12b      	bne.n	800f5e8 <__swbuf_r+0x70>
 800f590:	686c      	ldr	r4, [r5, #4]
 800f592:	69a3      	ldr	r3, [r4, #24]
 800f594:	60a3      	str	r3, [r4, #8]
 800f596:	89a3      	ldrh	r3, [r4, #12]
 800f598:	071a      	lsls	r2, r3, #28
 800f59a:	d52f      	bpl.n	800f5fc <__swbuf_r+0x84>
 800f59c:	6923      	ldr	r3, [r4, #16]
 800f59e:	b36b      	cbz	r3, 800f5fc <__swbuf_r+0x84>
 800f5a0:	6923      	ldr	r3, [r4, #16]
 800f5a2:	6820      	ldr	r0, [r4, #0]
 800f5a4:	b2f6      	uxtb	r6, r6
 800f5a6:	1ac0      	subs	r0, r0, r3
 800f5a8:	6963      	ldr	r3, [r4, #20]
 800f5aa:	4637      	mov	r7, r6
 800f5ac:	4283      	cmp	r3, r0
 800f5ae:	dc04      	bgt.n	800f5ba <__swbuf_r+0x42>
 800f5b0:	4621      	mov	r1, r4
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	f000 f92a 	bl	800f80c <_fflush_r>
 800f5b8:	bb30      	cbnz	r0, 800f608 <__swbuf_r+0x90>
 800f5ba:	68a3      	ldr	r3, [r4, #8]
 800f5bc:	3001      	adds	r0, #1
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	60a3      	str	r3, [r4, #8]
 800f5c2:	6823      	ldr	r3, [r4, #0]
 800f5c4:	1c5a      	adds	r2, r3, #1
 800f5c6:	6022      	str	r2, [r4, #0]
 800f5c8:	701e      	strb	r6, [r3, #0]
 800f5ca:	6963      	ldr	r3, [r4, #20]
 800f5cc:	4283      	cmp	r3, r0
 800f5ce:	d004      	beq.n	800f5da <__swbuf_r+0x62>
 800f5d0:	89a3      	ldrh	r3, [r4, #12]
 800f5d2:	07db      	lsls	r3, r3, #31
 800f5d4:	d506      	bpl.n	800f5e4 <__swbuf_r+0x6c>
 800f5d6:	2e0a      	cmp	r6, #10
 800f5d8:	d104      	bne.n	800f5e4 <__swbuf_r+0x6c>
 800f5da:	4621      	mov	r1, r4
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f000 f915 	bl	800f80c <_fflush_r>
 800f5e2:	b988      	cbnz	r0, 800f608 <__swbuf_r+0x90>
 800f5e4:	4638      	mov	r0, r7
 800f5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5e8:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <__swbuf_r+0x9c>)
 800f5ea:	429c      	cmp	r4, r3
 800f5ec:	d101      	bne.n	800f5f2 <__swbuf_r+0x7a>
 800f5ee:	68ac      	ldr	r4, [r5, #8]
 800f5f0:	e7cf      	b.n	800f592 <__swbuf_r+0x1a>
 800f5f2:	4b09      	ldr	r3, [pc, #36]	; (800f618 <__swbuf_r+0xa0>)
 800f5f4:	429c      	cmp	r4, r3
 800f5f6:	bf08      	it	eq
 800f5f8:	68ec      	ldreq	r4, [r5, #12]
 800f5fa:	e7ca      	b.n	800f592 <__swbuf_r+0x1a>
 800f5fc:	4621      	mov	r1, r4
 800f5fe:	4628      	mov	r0, r5
 800f600:	f000 f80c 	bl	800f61c <__swsetup_r>
 800f604:	2800      	cmp	r0, #0
 800f606:	d0cb      	beq.n	800f5a0 <__swbuf_r+0x28>
 800f608:	f04f 37ff 	mov.w	r7, #4294967295
 800f60c:	e7ea      	b.n	800f5e4 <__swbuf_r+0x6c>
 800f60e:	bf00      	nop
 800f610:	08011b8c 	.word	0x08011b8c
 800f614:	08011bac 	.word	0x08011bac
 800f618:	08011b6c 	.word	0x08011b6c

0800f61c <__swsetup_r>:
 800f61c:	4b32      	ldr	r3, [pc, #200]	; (800f6e8 <__swsetup_r+0xcc>)
 800f61e:	b570      	push	{r4, r5, r6, lr}
 800f620:	681d      	ldr	r5, [r3, #0]
 800f622:	4606      	mov	r6, r0
 800f624:	460c      	mov	r4, r1
 800f626:	b125      	cbz	r5, 800f632 <__swsetup_r+0x16>
 800f628:	69ab      	ldr	r3, [r5, #24]
 800f62a:	b913      	cbnz	r3, 800f632 <__swsetup_r+0x16>
 800f62c:	4628      	mov	r0, r5
 800f62e:	f000 f981 	bl	800f934 <__sinit>
 800f632:	4b2e      	ldr	r3, [pc, #184]	; (800f6ec <__swsetup_r+0xd0>)
 800f634:	429c      	cmp	r4, r3
 800f636:	d10f      	bne.n	800f658 <__swsetup_r+0x3c>
 800f638:	686c      	ldr	r4, [r5, #4]
 800f63a:	89a3      	ldrh	r3, [r4, #12]
 800f63c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f640:	0719      	lsls	r1, r3, #28
 800f642:	d42c      	bmi.n	800f69e <__swsetup_r+0x82>
 800f644:	06dd      	lsls	r5, r3, #27
 800f646:	d411      	bmi.n	800f66c <__swsetup_r+0x50>
 800f648:	2309      	movs	r3, #9
 800f64a:	6033      	str	r3, [r6, #0]
 800f64c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f650:	f04f 30ff 	mov.w	r0, #4294967295
 800f654:	81a3      	strh	r3, [r4, #12]
 800f656:	e03e      	b.n	800f6d6 <__swsetup_r+0xba>
 800f658:	4b25      	ldr	r3, [pc, #148]	; (800f6f0 <__swsetup_r+0xd4>)
 800f65a:	429c      	cmp	r4, r3
 800f65c:	d101      	bne.n	800f662 <__swsetup_r+0x46>
 800f65e:	68ac      	ldr	r4, [r5, #8]
 800f660:	e7eb      	b.n	800f63a <__swsetup_r+0x1e>
 800f662:	4b24      	ldr	r3, [pc, #144]	; (800f6f4 <__swsetup_r+0xd8>)
 800f664:	429c      	cmp	r4, r3
 800f666:	bf08      	it	eq
 800f668:	68ec      	ldreq	r4, [r5, #12]
 800f66a:	e7e6      	b.n	800f63a <__swsetup_r+0x1e>
 800f66c:	0758      	lsls	r0, r3, #29
 800f66e:	d512      	bpl.n	800f696 <__swsetup_r+0x7a>
 800f670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f672:	b141      	cbz	r1, 800f686 <__swsetup_r+0x6a>
 800f674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f678:	4299      	cmp	r1, r3
 800f67a:	d002      	beq.n	800f682 <__swsetup_r+0x66>
 800f67c:	4630      	mov	r0, r6
 800f67e:	f7ff fb2f 	bl	800ece0 <_free_r>
 800f682:	2300      	movs	r3, #0
 800f684:	6363      	str	r3, [r4, #52]	; 0x34
 800f686:	89a3      	ldrh	r3, [r4, #12]
 800f688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f68c:	81a3      	strh	r3, [r4, #12]
 800f68e:	2300      	movs	r3, #0
 800f690:	6063      	str	r3, [r4, #4]
 800f692:	6923      	ldr	r3, [r4, #16]
 800f694:	6023      	str	r3, [r4, #0]
 800f696:	89a3      	ldrh	r3, [r4, #12]
 800f698:	f043 0308 	orr.w	r3, r3, #8
 800f69c:	81a3      	strh	r3, [r4, #12]
 800f69e:	6923      	ldr	r3, [r4, #16]
 800f6a0:	b94b      	cbnz	r3, 800f6b6 <__swsetup_r+0x9a>
 800f6a2:	89a3      	ldrh	r3, [r4, #12]
 800f6a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f6a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6ac:	d003      	beq.n	800f6b6 <__swsetup_r+0x9a>
 800f6ae:	4621      	mov	r1, r4
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	f000 fa05 	bl	800fac0 <__smakebuf_r>
 800f6b6:	89a0      	ldrh	r0, [r4, #12]
 800f6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6bc:	f010 0301 	ands.w	r3, r0, #1
 800f6c0:	d00a      	beq.n	800f6d8 <__swsetup_r+0xbc>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	60a3      	str	r3, [r4, #8]
 800f6c6:	6963      	ldr	r3, [r4, #20]
 800f6c8:	425b      	negs	r3, r3
 800f6ca:	61a3      	str	r3, [r4, #24]
 800f6cc:	6923      	ldr	r3, [r4, #16]
 800f6ce:	b943      	cbnz	r3, 800f6e2 <__swsetup_r+0xc6>
 800f6d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f6d4:	d1ba      	bne.n	800f64c <__swsetup_r+0x30>
 800f6d6:	bd70      	pop	{r4, r5, r6, pc}
 800f6d8:	0781      	lsls	r1, r0, #30
 800f6da:	bf58      	it	pl
 800f6dc:	6963      	ldrpl	r3, [r4, #20]
 800f6de:	60a3      	str	r3, [r4, #8]
 800f6e0:	e7f4      	b.n	800f6cc <__swsetup_r+0xb0>
 800f6e2:	2000      	movs	r0, #0
 800f6e4:	e7f7      	b.n	800f6d6 <__swsetup_r+0xba>
 800f6e6:	bf00      	nop
 800f6e8:	20000018 	.word	0x20000018
 800f6ec:	08011b8c 	.word	0x08011b8c
 800f6f0:	08011bac 	.word	0x08011bac
 800f6f4:	08011b6c 	.word	0x08011b6c

0800f6f8 <abort>:
 800f6f8:	2006      	movs	r0, #6
 800f6fa:	b508      	push	{r3, lr}
 800f6fc:	f000 fa50 	bl	800fba0 <raise>
 800f700:	2001      	movs	r0, #1
 800f702:	f7f5 fc4a 	bl	8004f9a <_exit>
	...

0800f708 <__sflush_r>:
 800f708:	898a      	ldrh	r2, [r1, #12]
 800f70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70c:	4605      	mov	r5, r0
 800f70e:	0710      	lsls	r0, r2, #28
 800f710:	460c      	mov	r4, r1
 800f712:	d457      	bmi.n	800f7c4 <__sflush_r+0xbc>
 800f714:	684b      	ldr	r3, [r1, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	dc04      	bgt.n	800f724 <__sflush_r+0x1c>
 800f71a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	dc01      	bgt.n	800f724 <__sflush_r+0x1c>
 800f720:	2000      	movs	r0, #0
 800f722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f726:	2e00      	cmp	r6, #0
 800f728:	d0fa      	beq.n	800f720 <__sflush_r+0x18>
 800f72a:	2300      	movs	r3, #0
 800f72c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f730:	682f      	ldr	r7, [r5, #0]
 800f732:	602b      	str	r3, [r5, #0]
 800f734:	d032      	beq.n	800f79c <__sflush_r+0x94>
 800f736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	075a      	lsls	r2, r3, #29
 800f73c:	d505      	bpl.n	800f74a <__sflush_r+0x42>
 800f73e:	6863      	ldr	r3, [r4, #4]
 800f740:	1ac0      	subs	r0, r0, r3
 800f742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f744:	b10b      	cbz	r3, 800f74a <__sflush_r+0x42>
 800f746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f748:	1ac0      	subs	r0, r0, r3
 800f74a:	2300      	movs	r3, #0
 800f74c:	4602      	mov	r2, r0
 800f74e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f750:	4628      	mov	r0, r5
 800f752:	6a21      	ldr	r1, [r4, #32]
 800f754:	47b0      	blx	r6
 800f756:	1c43      	adds	r3, r0, #1
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	d106      	bne.n	800f76a <__sflush_r+0x62>
 800f75c:	6829      	ldr	r1, [r5, #0]
 800f75e:	291d      	cmp	r1, #29
 800f760:	d82c      	bhi.n	800f7bc <__sflush_r+0xb4>
 800f762:	4a29      	ldr	r2, [pc, #164]	; (800f808 <__sflush_r+0x100>)
 800f764:	40ca      	lsrs	r2, r1
 800f766:	07d6      	lsls	r6, r2, #31
 800f768:	d528      	bpl.n	800f7bc <__sflush_r+0xb4>
 800f76a:	2200      	movs	r2, #0
 800f76c:	6062      	str	r2, [r4, #4]
 800f76e:	6922      	ldr	r2, [r4, #16]
 800f770:	04d9      	lsls	r1, r3, #19
 800f772:	6022      	str	r2, [r4, #0]
 800f774:	d504      	bpl.n	800f780 <__sflush_r+0x78>
 800f776:	1c42      	adds	r2, r0, #1
 800f778:	d101      	bne.n	800f77e <__sflush_r+0x76>
 800f77a:	682b      	ldr	r3, [r5, #0]
 800f77c:	b903      	cbnz	r3, 800f780 <__sflush_r+0x78>
 800f77e:	6560      	str	r0, [r4, #84]	; 0x54
 800f780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f782:	602f      	str	r7, [r5, #0]
 800f784:	2900      	cmp	r1, #0
 800f786:	d0cb      	beq.n	800f720 <__sflush_r+0x18>
 800f788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f78c:	4299      	cmp	r1, r3
 800f78e:	d002      	beq.n	800f796 <__sflush_r+0x8e>
 800f790:	4628      	mov	r0, r5
 800f792:	f7ff faa5 	bl	800ece0 <_free_r>
 800f796:	2000      	movs	r0, #0
 800f798:	6360      	str	r0, [r4, #52]	; 0x34
 800f79a:	e7c2      	b.n	800f722 <__sflush_r+0x1a>
 800f79c:	6a21      	ldr	r1, [r4, #32]
 800f79e:	2301      	movs	r3, #1
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	47b0      	blx	r6
 800f7a4:	1c41      	adds	r1, r0, #1
 800f7a6:	d1c7      	bne.n	800f738 <__sflush_r+0x30>
 800f7a8:	682b      	ldr	r3, [r5, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d0c4      	beq.n	800f738 <__sflush_r+0x30>
 800f7ae:	2b1d      	cmp	r3, #29
 800f7b0:	d001      	beq.n	800f7b6 <__sflush_r+0xae>
 800f7b2:	2b16      	cmp	r3, #22
 800f7b4:	d101      	bne.n	800f7ba <__sflush_r+0xb2>
 800f7b6:	602f      	str	r7, [r5, #0]
 800f7b8:	e7b2      	b.n	800f720 <__sflush_r+0x18>
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7c0:	81a3      	strh	r3, [r4, #12]
 800f7c2:	e7ae      	b.n	800f722 <__sflush_r+0x1a>
 800f7c4:	690f      	ldr	r7, [r1, #16]
 800f7c6:	2f00      	cmp	r7, #0
 800f7c8:	d0aa      	beq.n	800f720 <__sflush_r+0x18>
 800f7ca:	0793      	lsls	r3, r2, #30
 800f7cc:	bf18      	it	ne
 800f7ce:	2300      	movne	r3, #0
 800f7d0:	680e      	ldr	r6, [r1, #0]
 800f7d2:	bf08      	it	eq
 800f7d4:	694b      	ldreq	r3, [r1, #20]
 800f7d6:	1bf6      	subs	r6, r6, r7
 800f7d8:	600f      	str	r7, [r1, #0]
 800f7da:	608b      	str	r3, [r1, #8]
 800f7dc:	2e00      	cmp	r6, #0
 800f7de:	dd9f      	ble.n	800f720 <__sflush_r+0x18>
 800f7e0:	4633      	mov	r3, r6
 800f7e2:	463a      	mov	r2, r7
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	6a21      	ldr	r1, [r4, #32]
 800f7e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800f7ec:	47e0      	blx	ip
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	dc06      	bgt.n	800f800 <__sflush_r+0xf8>
 800f7f2:	89a3      	ldrh	r3, [r4, #12]
 800f7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7fc:	81a3      	strh	r3, [r4, #12]
 800f7fe:	e790      	b.n	800f722 <__sflush_r+0x1a>
 800f800:	4407      	add	r7, r0
 800f802:	1a36      	subs	r6, r6, r0
 800f804:	e7ea      	b.n	800f7dc <__sflush_r+0xd4>
 800f806:	bf00      	nop
 800f808:	20400001 	.word	0x20400001

0800f80c <_fflush_r>:
 800f80c:	b538      	push	{r3, r4, r5, lr}
 800f80e:	690b      	ldr	r3, [r1, #16]
 800f810:	4605      	mov	r5, r0
 800f812:	460c      	mov	r4, r1
 800f814:	b913      	cbnz	r3, 800f81c <_fflush_r+0x10>
 800f816:	2500      	movs	r5, #0
 800f818:	4628      	mov	r0, r5
 800f81a:	bd38      	pop	{r3, r4, r5, pc}
 800f81c:	b118      	cbz	r0, 800f826 <_fflush_r+0x1a>
 800f81e:	6983      	ldr	r3, [r0, #24]
 800f820:	b90b      	cbnz	r3, 800f826 <_fflush_r+0x1a>
 800f822:	f000 f887 	bl	800f934 <__sinit>
 800f826:	4b14      	ldr	r3, [pc, #80]	; (800f878 <_fflush_r+0x6c>)
 800f828:	429c      	cmp	r4, r3
 800f82a:	d11b      	bne.n	800f864 <_fflush_r+0x58>
 800f82c:	686c      	ldr	r4, [r5, #4]
 800f82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d0ef      	beq.n	800f816 <_fflush_r+0xa>
 800f836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f838:	07d0      	lsls	r0, r2, #31
 800f83a:	d404      	bmi.n	800f846 <_fflush_r+0x3a>
 800f83c:	0599      	lsls	r1, r3, #22
 800f83e:	d402      	bmi.n	800f846 <_fflush_r+0x3a>
 800f840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f842:	f000 f915 	bl	800fa70 <__retarget_lock_acquire_recursive>
 800f846:	4628      	mov	r0, r5
 800f848:	4621      	mov	r1, r4
 800f84a:	f7ff ff5d 	bl	800f708 <__sflush_r>
 800f84e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f850:	4605      	mov	r5, r0
 800f852:	07da      	lsls	r2, r3, #31
 800f854:	d4e0      	bmi.n	800f818 <_fflush_r+0xc>
 800f856:	89a3      	ldrh	r3, [r4, #12]
 800f858:	059b      	lsls	r3, r3, #22
 800f85a:	d4dd      	bmi.n	800f818 <_fflush_r+0xc>
 800f85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f85e:	f000 f908 	bl	800fa72 <__retarget_lock_release_recursive>
 800f862:	e7d9      	b.n	800f818 <_fflush_r+0xc>
 800f864:	4b05      	ldr	r3, [pc, #20]	; (800f87c <_fflush_r+0x70>)
 800f866:	429c      	cmp	r4, r3
 800f868:	d101      	bne.n	800f86e <_fflush_r+0x62>
 800f86a:	68ac      	ldr	r4, [r5, #8]
 800f86c:	e7df      	b.n	800f82e <_fflush_r+0x22>
 800f86e:	4b04      	ldr	r3, [pc, #16]	; (800f880 <_fflush_r+0x74>)
 800f870:	429c      	cmp	r4, r3
 800f872:	bf08      	it	eq
 800f874:	68ec      	ldreq	r4, [r5, #12]
 800f876:	e7da      	b.n	800f82e <_fflush_r+0x22>
 800f878:	08011b8c 	.word	0x08011b8c
 800f87c:	08011bac 	.word	0x08011bac
 800f880:	08011b6c 	.word	0x08011b6c

0800f884 <std>:
 800f884:	2300      	movs	r3, #0
 800f886:	b510      	push	{r4, lr}
 800f888:	4604      	mov	r4, r0
 800f88a:	e9c0 3300 	strd	r3, r3, [r0]
 800f88e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f892:	6083      	str	r3, [r0, #8]
 800f894:	8181      	strh	r1, [r0, #12]
 800f896:	6643      	str	r3, [r0, #100]	; 0x64
 800f898:	81c2      	strh	r2, [r0, #14]
 800f89a:	6183      	str	r3, [r0, #24]
 800f89c:	4619      	mov	r1, r3
 800f89e:	2208      	movs	r2, #8
 800f8a0:	305c      	adds	r0, #92	; 0x5c
 800f8a2:	f7fb fe1b 	bl	800b4dc <memset>
 800f8a6:	4b05      	ldr	r3, [pc, #20]	; (800f8bc <std+0x38>)
 800f8a8:	6224      	str	r4, [r4, #32]
 800f8aa:	6263      	str	r3, [r4, #36]	; 0x24
 800f8ac:	4b04      	ldr	r3, [pc, #16]	; (800f8c0 <std+0x3c>)
 800f8ae:	62a3      	str	r3, [r4, #40]	; 0x28
 800f8b0:	4b04      	ldr	r3, [pc, #16]	; (800f8c4 <std+0x40>)
 800f8b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8b4:	4b04      	ldr	r3, [pc, #16]	; (800f8c8 <std+0x44>)
 800f8b6:	6323      	str	r3, [r4, #48]	; 0x30
 800f8b8:	bd10      	pop	{r4, pc}
 800f8ba:	bf00      	nop
 800f8bc:	0800fbd9 	.word	0x0800fbd9
 800f8c0:	0800fbfb 	.word	0x0800fbfb
 800f8c4:	0800fc33 	.word	0x0800fc33
 800f8c8:	0800fc57 	.word	0x0800fc57

0800f8cc <_cleanup_r>:
 800f8cc:	4901      	ldr	r1, [pc, #4]	; (800f8d4 <_cleanup_r+0x8>)
 800f8ce:	f000 b8af 	b.w	800fa30 <_fwalk_reent>
 800f8d2:	bf00      	nop
 800f8d4:	0800f80d 	.word	0x0800f80d

0800f8d8 <__sfmoreglue>:
 800f8d8:	2268      	movs	r2, #104	; 0x68
 800f8da:	b570      	push	{r4, r5, r6, lr}
 800f8dc:	1e4d      	subs	r5, r1, #1
 800f8de:	4355      	muls	r5, r2
 800f8e0:	460e      	mov	r6, r1
 800f8e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f8e6:	f7ff fa63 	bl	800edb0 <_malloc_r>
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	b140      	cbz	r0, 800f900 <__sfmoreglue+0x28>
 800f8ee:	2100      	movs	r1, #0
 800f8f0:	e9c0 1600 	strd	r1, r6, [r0]
 800f8f4:	300c      	adds	r0, #12
 800f8f6:	60a0      	str	r0, [r4, #8]
 800f8f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f8fc:	f7fb fdee 	bl	800b4dc <memset>
 800f900:	4620      	mov	r0, r4
 800f902:	bd70      	pop	{r4, r5, r6, pc}

0800f904 <__sfp_lock_acquire>:
 800f904:	4801      	ldr	r0, [pc, #4]	; (800f90c <__sfp_lock_acquire+0x8>)
 800f906:	f000 b8b3 	b.w	800fa70 <__retarget_lock_acquire_recursive>
 800f90a:	bf00      	nop
 800f90c:	20001d05 	.word	0x20001d05

0800f910 <__sfp_lock_release>:
 800f910:	4801      	ldr	r0, [pc, #4]	; (800f918 <__sfp_lock_release+0x8>)
 800f912:	f000 b8ae 	b.w	800fa72 <__retarget_lock_release_recursive>
 800f916:	bf00      	nop
 800f918:	20001d05 	.word	0x20001d05

0800f91c <__sinit_lock_acquire>:
 800f91c:	4801      	ldr	r0, [pc, #4]	; (800f924 <__sinit_lock_acquire+0x8>)
 800f91e:	f000 b8a7 	b.w	800fa70 <__retarget_lock_acquire_recursive>
 800f922:	bf00      	nop
 800f924:	20001d06 	.word	0x20001d06

0800f928 <__sinit_lock_release>:
 800f928:	4801      	ldr	r0, [pc, #4]	; (800f930 <__sinit_lock_release+0x8>)
 800f92a:	f000 b8a2 	b.w	800fa72 <__retarget_lock_release_recursive>
 800f92e:	bf00      	nop
 800f930:	20001d06 	.word	0x20001d06

0800f934 <__sinit>:
 800f934:	b510      	push	{r4, lr}
 800f936:	4604      	mov	r4, r0
 800f938:	f7ff fff0 	bl	800f91c <__sinit_lock_acquire>
 800f93c:	69a3      	ldr	r3, [r4, #24]
 800f93e:	b11b      	cbz	r3, 800f948 <__sinit+0x14>
 800f940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f944:	f7ff bff0 	b.w	800f928 <__sinit_lock_release>
 800f948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f94c:	6523      	str	r3, [r4, #80]	; 0x50
 800f94e:	4b13      	ldr	r3, [pc, #76]	; (800f99c <__sinit+0x68>)
 800f950:	4a13      	ldr	r2, [pc, #76]	; (800f9a0 <__sinit+0x6c>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	62a2      	str	r2, [r4, #40]	; 0x28
 800f956:	42a3      	cmp	r3, r4
 800f958:	bf08      	it	eq
 800f95a:	2301      	moveq	r3, #1
 800f95c:	4620      	mov	r0, r4
 800f95e:	bf08      	it	eq
 800f960:	61a3      	streq	r3, [r4, #24]
 800f962:	f000 f81f 	bl	800f9a4 <__sfp>
 800f966:	6060      	str	r0, [r4, #4]
 800f968:	4620      	mov	r0, r4
 800f96a:	f000 f81b 	bl	800f9a4 <__sfp>
 800f96e:	60a0      	str	r0, [r4, #8]
 800f970:	4620      	mov	r0, r4
 800f972:	f000 f817 	bl	800f9a4 <__sfp>
 800f976:	2200      	movs	r2, #0
 800f978:	2104      	movs	r1, #4
 800f97a:	60e0      	str	r0, [r4, #12]
 800f97c:	6860      	ldr	r0, [r4, #4]
 800f97e:	f7ff ff81 	bl	800f884 <std>
 800f982:	2201      	movs	r2, #1
 800f984:	2109      	movs	r1, #9
 800f986:	68a0      	ldr	r0, [r4, #8]
 800f988:	f7ff ff7c 	bl	800f884 <std>
 800f98c:	2202      	movs	r2, #2
 800f98e:	2112      	movs	r1, #18
 800f990:	68e0      	ldr	r0, [r4, #12]
 800f992:	f7ff ff77 	bl	800f884 <std>
 800f996:	2301      	movs	r3, #1
 800f998:	61a3      	str	r3, [r4, #24]
 800f99a:	e7d1      	b.n	800f940 <__sinit+0xc>
 800f99c:	08011724 	.word	0x08011724
 800f9a0:	0800f8cd 	.word	0x0800f8cd

0800f9a4 <__sfp>:
 800f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a6:	4607      	mov	r7, r0
 800f9a8:	f7ff ffac 	bl	800f904 <__sfp_lock_acquire>
 800f9ac:	4b1e      	ldr	r3, [pc, #120]	; (800fa28 <__sfp+0x84>)
 800f9ae:	681e      	ldr	r6, [r3, #0]
 800f9b0:	69b3      	ldr	r3, [r6, #24]
 800f9b2:	b913      	cbnz	r3, 800f9ba <__sfp+0x16>
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	f7ff ffbd 	bl	800f934 <__sinit>
 800f9ba:	3648      	adds	r6, #72	; 0x48
 800f9bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	d503      	bpl.n	800f9cc <__sfp+0x28>
 800f9c4:	6833      	ldr	r3, [r6, #0]
 800f9c6:	b30b      	cbz	r3, 800fa0c <__sfp+0x68>
 800f9c8:	6836      	ldr	r6, [r6, #0]
 800f9ca:	e7f7      	b.n	800f9bc <__sfp+0x18>
 800f9cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f9d0:	b9d5      	cbnz	r5, 800fa08 <__sfp+0x64>
 800f9d2:	4b16      	ldr	r3, [pc, #88]	; (800fa2c <__sfp+0x88>)
 800f9d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f9d8:	60e3      	str	r3, [r4, #12]
 800f9da:	6665      	str	r5, [r4, #100]	; 0x64
 800f9dc:	f000 f847 	bl	800fa6e <__retarget_lock_init_recursive>
 800f9e0:	f7ff ff96 	bl	800f910 <__sfp_lock_release>
 800f9e4:	2208      	movs	r2, #8
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f9ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f9f0:	6025      	str	r5, [r4, #0]
 800f9f2:	61a5      	str	r5, [r4, #24]
 800f9f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f9f8:	f7fb fd70 	bl	800b4dc <memset>
 800f9fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa04:	4620      	mov	r0, r4
 800fa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa08:	3468      	adds	r4, #104	; 0x68
 800fa0a:	e7d9      	b.n	800f9c0 <__sfp+0x1c>
 800fa0c:	2104      	movs	r1, #4
 800fa0e:	4638      	mov	r0, r7
 800fa10:	f7ff ff62 	bl	800f8d8 <__sfmoreglue>
 800fa14:	4604      	mov	r4, r0
 800fa16:	6030      	str	r0, [r6, #0]
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	d1d5      	bne.n	800f9c8 <__sfp+0x24>
 800fa1c:	f7ff ff78 	bl	800f910 <__sfp_lock_release>
 800fa20:	230c      	movs	r3, #12
 800fa22:	603b      	str	r3, [r7, #0]
 800fa24:	e7ee      	b.n	800fa04 <__sfp+0x60>
 800fa26:	bf00      	nop
 800fa28:	08011724 	.word	0x08011724
 800fa2c:	ffff0001 	.word	0xffff0001

0800fa30 <_fwalk_reent>:
 800fa30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa34:	4606      	mov	r6, r0
 800fa36:	4688      	mov	r8, r1
 800fa38:	2700      	movs	r7, #0
 800fa3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa42:	f1b9 0901 	subs.w	r9, r9, #1
 800fa46:	d505      	bpl.n	800fa54 <_fwalk_reent+0x24>
 800fa48:	6824      	ldr	r4, [r4, #0]
 800fa4a:	2c00      	cmp	r4, #0
 800fa4c:	d1f7      	bne.n	800fa3e <_fwalk_reent+0xe>
 800fa4e:	4638      	mov	r0, r7
 800fa50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa54:	89ab      	ldrh	r3, [r5, #12]
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d907      	bls.n	800fa6a <_fwalk_reent+0x3a>
 800fa5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	d003      	beq.n	800fa6a <_fwalk_reent+0x3a>
 800fa62:	4629      	mov	r1, r5
 800fa64:	4630      	mov	r0, r6
 800fa66:	47c0      	blx	r8
 800fa68:	4307      	orrs	r7, r0
 800fa6a:	3568      	adds	r5, #104	; 0x68
 800fa6c:	e7e9      	b.n	800fa42 <_fwalk_reent+0x12>

0800fa6e <__retarget_lock_init_recursive>:
 800fa6e:	4770      	bx	lr

0800fa70 <__retarget_lock_acquire_recursive>:
 800fa70:	4770      	bx	lr

0800fa72 <__retarget_lock_release_recursive>:
 800fa72:	4770      	bx	lr

0800fa74 <__swhatbuf_r>:
 800fa74:	b570      	push	{r4, r5, r6, lr}
 800fa76:	460e      	mov	r6, r1
 800fa78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa7c:	4614      	mov	r4, r2
 800fa7e:	2900      	cmp	r1, #0
 800fa80:	461d      	mov	r5, r3
 800fa82:	b096      	sub	sp, #88	; 0x58
 800fa84:	da08      	bge.n	800fa98 <__swhatbuf_r+0x24>
 800fa86:	2200      	movs	r2, #0
 800fa88:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fa8c:	602a      	str	r2, [r5, #0]
 800fa8e:	061a      	lsls	r2, r3, #24
 800fa90:	d410      	bmi.n	800fab4 <__swhatbuf_r+0x40>
 800fa92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa96:	e00e      	b.n	800fab6 <__swhatbuf_r+0x42>
 800fa98:	466a      	mov	r2, sp
 800fa9a:	f000 f903 	bl	800fca4 <_fstat_r>
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	dbf1      	blt.n	800fa86 <__swhatbuf_r+0x12>
 800faa2:	9a01      	ldr	r2, [sp, #4]
 800faa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800faa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800faac:	425a      	negs	r2, r3
 800faae:	415a      	adcs	r2, r3
 800fab0:	602a      	str	r2, [r5, #0]
 800fab2:	e7ee      	b.n	800fa92 <__swhatbuf_r+0x1e>
 800fab4:	2340      	movs	r3, #64	; 0x40
 800fab6:	2000      	movs	r0, #0
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	b016      	add	sp, #88	; 0x58
 800fabc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fac0 <__smakebuf_r>:
 800fac0:	898b      	ldrh	r3, [r1, #12]
 800fac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fac4:	079d      	lsls	r5, r3, #30
 800fac6:	4606      	mov	r6, r0
 800fac8:	460c      	mov	r4, r1
 800faca:	d507      	bpl.n	800fadc <__smakebuf_r+0x1c>
 800facc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fad0:	6023      	str	r3, [r4, #0]
 800fad2:	6123      	str	r3, [r4, #16]
 800fad4:	2301      	movs	r3, #1
 800fad6:	6163      	str	r3, [r4, #20]
 800fad8:	b002      	add	sp, #8
 800fada:	bd70      	pop	{r4, r5, r6, pc}
 800fadc:	466a      	mov	r2, sp
 800fade:	ab01      	add	r3, sp, #4
 800fae0:	f7ff ffc8 	bl	800fa74 <__swhatbuf_r>
 800fae4:	9900      	ldr	r1, [sp, #0]
 800fae6:	4605      	mov	r5, r0
 800fae8:	4630      	mov	r0, r6
 800faea:	f7ff f961 	bl	800edb0 <_malloc_r>
 800faee:	b948      	cbnz	r0, 800fb04 <__smakebuf_r+0x44>
 800faf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faf4:	059a      	lsls	r2, r3, #22
 800faf6:	d4ef      	bmi.n	800fad8 <__smakebuf_r+0x18>
 800faf8:	f023 0303 	bic.w	r3, r3, #3
 800fafc:	f043 0302 	orr.w	r3, r3, #2
 800fb00:	81a3      	strh	r3, [r4, #12]
 800fb02:	e7e3      	b.n	800facc <__smakebuf_r+0xc>
 800fb04:	4b0d      	ldr	r3, [pc, #52]	; (800fb3c <__smakebuf_r+0x7c>)
 800fb06:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	6020      	str	r0, [r4, #0]
 800fb0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb10:	81a3      	strh	r3, [r4, #12]
 800fb12:	9b00      	ldr	r3, [sp, #0]
 800fb14:	6120      	str	r0, [r4, #16]
 800fb16:	6163      	str	r3, [r4, #20]
 800fb18:	9b01      	ldr	r3, [sp, #4]
 800fb1a:	b15b      	cbz	r3, 800fb34 <__smakebuf_r+0x74>
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb22:	f000 f8d1 	bl	800fcc8 <_isatty_r>
 800fb26:	b128      	cbz	r0, 800fb34 <__smakebuf_r+0x74>
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	f023 0303 	bic.w	r3, r3, #3
 800fb2e:	f043 0301 	orr.w	r3, r3, #1
 800fb32:	81a3      	strh	r3, [r4, #12]
 800fb34:	89a0      	ldrh	r0, [r4, #12]
 800fb36:	4305      	orrs	r5, r0
 800fb38:	81a5      	strh	r5, [r4, #12]
 800fb3a:	e7cd      	b.n	800fad8 <__smakebuf_r+0x18>
 800fb3c:	0800f8cd 	.word	0x0800f8cd

0800fb40 <_malloc_usable_size_r>:
 800fb40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb44:	1f18      	subs	r0, r3, #4
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	bfbc      	itt	lt
 800fb4a:	580b      	ldrlt	r3, [r1, r0]
 800fb4c:	18c0      	addlt	r0, r0, r3
 800fb4e:	4770      	bx	lr

0800fb50 <_raise_r>:
 800fb50:	291f      	cmp	r1, #31
 800fb52:	b538      	push	{r3, r4, r5, lr}
 800fb54:	4604      	mov	r4, r0
 800fb56:	460d      	mov	r5, r1
 800fb58:	d904      	bls.n	800fb64 <_raise_r+0x14>
 800fb5a:	2316      	movs	r3, #22
 800fb5c:	6003      	str	r3, [r0, #0]
 800fb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb62:	bd38      	pop	{r3, r4, r5, pc}
 800fb64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fb66:	b112      	cbz	r2, 800fb6e <_raise_r+0x1e>
 800fb68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb6c:	b94b      	cbnz	r3, 800fb82 <_raise_r+0x32>
 800fb6e:	4620      	mov	r0, r4
 800fb70:	f000 f830 	bl	800fbd4 <_getpid_r>
 800fb74:	462a      	mov	r2, r5
 800fb76:	4601      	mov	r1, r0
 800fb78:	4620      	mov	r0, r4
 800fb7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb7e:	f000 b817 	b.w	800fbb0 <_kill_r>
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d00a      	beq.n	800fb9c <_raise_r+0x4c>
 800fb86:	1c59      	adds	r1, r3, #1
 800fb88:	d103      	bne.n	800fb92 <_raise_r+0x42>
 800fb8a:	2316      	movs	r3, #22
 800fb8c:	6003      	str	r3, [r0, #0]
 800fb8e:	2001      	movs	r0, #1
 800fb90:	e7e7      	b.n	800fb62 <_raise_r+0x12>
 800fb92:	2400      	movs	r4, #0
 800fb94:	4628      	mov	r0, r5
 800fb96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb9a:	4798      	blx	r3
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	e7e0      	b.n	800fb62 <_raise_r+0x12>

0800fba0 <raise>:
 800fba0:	4b02      	ldr	r3, [pc, #8]	; (800fbac <raise+0xc>)
 800fba2:	4601      	mov	r1, r0
 800fba4:	6818      	ldr	r0, [r3, #0]
 800fba6:	f7ff bfd3 	b.w	800fb50 <_raise_r>
 800fbaa:	bf00      	nop
 800fbac:	20000018 	.word	0x20000018

0800fbb0 <_kill_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	4d06      	ldr	r5, [pc, #24]	; (800fbd0 <_kill_r+0x20>)
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	4608      	mov	r0, r1
 800fbba:	4611      	mov	r1, r2
 800fbbc:	602b      	str	r3, [r5, #0]
 800fbbe:	f7f5 f9dc 	bl	8004f7a <_kill>
 800fbc2:	1c43      	adds	r3, r0, #1
 800fbc4:	d102      	bne.n	800fbcc <_kill_r+0x1c>
 800fbc6:	682b      	ldr	r3, [r5, #0]
 800fbc8:	b103      	cbz	r3, 800fbcc <_kill_r+0x1c>
 800fbca:	6023      	str	r3, [r4, #0]
 800fbcc:	bd38      	pop	{r3, r4, r5, pc}
 800fbce:	bf00      	nop
 800fbd0:	20001d00 	.word	0x20001d00

0800fbd4 <_getpid_r>:
 800fbd4:	f7f5 b9ca 	b.w	8004f6c <_getpid>

0800fbd8 <__sread>:
 800fbd8:	b510      	push	{r4, lr}
 800fbda:	460c      	mov	r4, r1
 800fbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbe0:	f000 f894 	bl	800fd0c <_read_r>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	bfab      	itete	ge
 800fbe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fbea:	89a3      	ldrhlt	r3, [r4, #12]
 800fbec:	181b      	addge	r3, r3, r0
 800fbee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fbf2:	bfac      	ite	ge
 800fbf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fbf6:	81a3      	strhlt	r3, [r4, #12]
 800fbf8:	bd10      	pop	{r4, pc}

0800fbfa <__swrite>:
 800fbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbfe:	461f      	mov	r7, r3
 800fc00:	898b      	ldrh	r3, [r1, #12]
 800fc02:	4605      	mov	r5, r0
 800fc04:	05db      	lsls	r3, r3, #23
 800fc06:	460c      	mov	r4, r1
 800fc08:	4616      	mov	r6, r2
 800fc0a:	d505      	bpl.n	800fc18 <__swrite+0x1e>
 800fc0c:	2302      	movs	r3, #2
 800fc0e:	2200      	movs	r2, #0
 800fc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc14:	f000 f868 	bl	800fce8 <_lseek_r>
 800fc18:	89a3      	ldrh	r3, [r4, #12]
 800fc1a:	4632      	mov	r2, r6
 800fc1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc20:	81a3      	strh	r3, [r4, #12]
 800fc22:	4628      	mov	r0, r5
 800fc24:	463b      	mov	r3, r7
 800fc26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc2e:	f000 b817 	b.w	800fc60 <_write_r>

0800fc32 <__sseek>:
 800fc32:	b510      	push	{r4, lr}
 800fc34:	460c      	mov	r4, r1
 800fc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc3a:	f000 f855 	bl	800fce8 <_lseek_r>
 800fc3e:	1c43      	adds	r3, r0, #1
 800fc40:	89a3      	ldrh	r3, [r4, #12]
 800fc42:	bf15      	itete	ne
 800fc44:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc4e:	81a3      	strheq	r3, [r4, #12]
 800fc50:	bf18      	it	ne
 800fc52:	81a3      	strhne	r3, [r4, #12]
 800fc54:	bd10      	pop	{r4, pc}

0800fc56 <__sclose>:
 800fc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc5a:	f000 b813 	b.w	800fc84 <_close_r>
	...

0800fc60 <_write_r>:
 800fc60:	b538      	push	{r3, r4, r5, lr}
 800fc62:	4604      	mov	r4, r0
 800fc64:	4608      	mov	r0, r1
 800fc66:	4611      	mov	r1, r2
 800fc68:	2200      	movs	r2, #0
 800fc6a:	4d05      	ldr	r5, [pc, #20]	; (800fc80 <_write_r+0x20>)
 800fc6c:	602a      	str	r2, [r5, #0]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	f7f5 f9ba 	bl	8004fe8 <_write>
 800fc74:	1c43      	adds	r3, r0, #1
 800fc76:	d102      	bne.n	800fc7e <_write_r+0x1e>
 800fc78:	682b      	ldr	r3, [r5, #0]
 800fc7a:	b103      	cbz	r3, 800fc7e <_write_r+0x1e>
 800fc7c:	6023      	str	r3, [r4, #0]
 800fc7e:	bd38      	pop	{r3, r4, r5, pc}
 800fc80:	20001d00 	.word	0x20001d00

0800fc84 <_close_r>:
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	2300      	movs	r3, #0
 800fc88:	4d05      	ldr	r5, [pc, #20]	; (800fca0 <_close_r+0x1c>)
 800fc8a:	4604      	mov	r4, r0
 800fc8c:	4608      	mov	r0, r1
 800fc8e:	602b      	str	r3, [r5, #0]
 800fc90:	f7f5 f9c6 	bl	8005020 <_close>
 800fc94:	1c43      	adds	r3, r0, #1
 800fc96:	d102      	bne.n	800fc9e <_close_r+0x1a>
 800fc98:	682b      	ldr	r3, [r5, #0]
 800fc9a:	b103      	cbz	r3, 800fc9e <_close_r+0x1a>
 800fc9c:	6023      	str	r3, [r4, #0]
 800fc9e:	bd38      	pop	{r3, r4, r5, pc}
 800fca0:	20001d00 	.word	0x20001d00

0800fca4 <_fstat_r>:
 800fca4:	b538      	push	{r3, r4, r5, lr}
 800fca6:	2300      	movs	r3, #0
 800fca8:	4d06      	ldr	r5, [pc, #24]	; (800fcc4 <_fstat_r+0x20>)
 800fcaa:	4604      	mov	r4, r0
 800fcac:	4608      	mov	r0, r1
 800fcae:	4611      	mov	r1, r2
 800fcb0:	602b      	str	r3, [r5, #0]
 800fcb2:	f7f5 f9c0 	bl	8005036 <_fstat>
 800fcb6:	1c43      	adds	r3, r0, #1
 800fcb8:	d102      	bne.n	800fcc0 <_fstat_r+0x1c>
 800fcba:	682b      	ldr	r3, [r5, #0]
 800fcbc:	b103      	cbz	r3, 800fcc0 <_fstat_r+0x1c>
 800fcbe:	6023      	str	r3, [r4, #0]
 800fcc0:	bd38      	pop	{r3, r4, r5, pc}
 800fcc2:	bf00      	nop
 800fcc4:	20001d00 	.word	0x20001d00

0800fcc8 <_isatty_r>:
 800fcc8:	b538      	push	{r3, r4, r5, lr}
 800fcca:	2300      	movs	r3, #0
 800fccc:	4d05      	ldr	r5, [pc, #20]	; (800fce4 <_isatty_r+0x1c>)
 800fcce:	4604      	mov	r4, r0
 800fcd0:	4608      	mov	r0, r1
 800fcd2:	602b      	str	r3, [r5, #0]
 800fcd4:	f7f5 f9be 	bl	8005054 <_isatty>
 800fcd8:	1c43      	adds	r3, r0, #1
 800fcda:	d102      	bne.n	800fce2 <_isatty_r+0x1a>
 800fcdc:	682b      	ldr	r3, [r5, #0]
 800fcde:	b103      	cbz	r3, 800fce2 <_isatty_r+0x1a>
 800fce0:	6023      	str	r3, [r4, #0]
 800fce2:	bd38      	pop	{r3, r4, r5, pc}
 800fce4:	20001d00 	.word	0x20001d00

0800fce8 <_lseek_r>:
 800fce8:	b538      	push	{r3, r4, r5, lr}
 800fcea:	4604      	mov	r4, r0
 800fcec:	4608      	mov	r0, r1
 800fcee:	4611      	mov	r1, r2
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	4d05      	ldr	r5, [pc, #20]	; (800fd08 <_lseek_r+0x20>)
 800fcf4:	602a      	str	r2, [r5, #0]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	f7f5 f9b6 	bl	8005068 <_lseek>
 800fcfc:	1c43      	adds	r3, r0, #1
 800fcfe:	d102      	bne.n	800fd06 <_lseek_r+0x1e>
 800fd00:	682b      	ldr	r3, [r5, #0]
 800fd02:	b103      	cbz	r3, 800fd06 <_lseek_r+0x1e>
 800fd04:	6023      	str	r3, [r4, #0]
 800fd06:	bd38      	pop	{r3, r4, r5, pc}
 800fd08:	20001d00 	.word	0x20001d00

0800fd0c <_read_r>:
 800fd0c:	b538      	push	{r3, r4, r5, lr}
 800fd0e:	4604      	mov	r4, r0
 800fd10:	4608      	mov	r0, r1
 800fd12:	4611      	mov	r1, r2
 800fd14:	2200      	movs	r2, #0
 800fd16:	4d05      	ldr	r5, [pc, #20]	; (800fd2c <_read_r+0x20>)
 800fd18:	602a      	str	r2, [r5, #0]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	f7f5 f947 	bl	8004fae <_read>
 800fd20:	1c43      	adds	r3, r0, #1
 800fd22:	d102      	bne.n	800fd2a <_read_r+0x1e>
 800fd24:	682b      	ldr	r3, [r5, #0]
 800fd26:	b103      	cbz	r3, 800fd2a <_read_r+0x1e>
 800fd28:	6023      	str	r3, [r4, #0]
 800fd2a:	bd38      	pop	{r3, r4, r5, pc}
 800fd2c:	20001d00 	.word	0x20001d00

0800fd30 <_init>:
 800fd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd32:	bf00      	nop
 800fd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd36:	bc08      	pop	{r3}
 800fd38:	469e      	mov	lr, r3
 800fd3a:	4770      	bx	lr

0800fd3c <_fini>:
 800fd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3e:	bf00      	nop
 800fd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd42:	bc08      	pop	{r3}
 800fd44:	469e      	mov	lr, r3
 800fd46:	4770      	bx	lr
